#lang ivy1.7

include apt_endpoint


include quic_locale
include quic_network_controler


object endpoint = {
    type this

    module client_quic(address:ip.addr,port:ip.port) = { 
        variant this of endpoint = struct { }
        individual ep        : ip.endpoint
        individual tls_id    : tls_api.id
        individual enc_level : quic_packet_type
        individual lost_pkt_num : pkt_num

        after init {
            enc_level := quic_packet_type.initial;
            ep.protocol := ip.udp;
            ep.addr := address;
            ep.port := port;
            if ep.addr = 0x7f000001 | is_mim { # TODO is_mim not used
                ep.interface := ip.lo;
            } else {
                ep.interface := ip.ivy;
            }
        }
        
        action set_ep(e:ip.endpoint) = {
            ep := e;
        }

        action set_tls_id(e:tls_api.id) = {
            tls_id := e;
        }

        action behavior(host:endpoint_id, s:net.socket, src:ip.endpoint, pkts:prot.arr) = {
            var dst := socket_endpoint(host,s);  # because net API doesn't tell us the dst
            var idx := pkts.begin;
            var past_data : stream_data := stream_data.empty;
            while idx < pkts.end {
                var ppkt := pkts.value(idx);
                var tls_id := src_tls_id(dst); # todo multiple
                var header := ppkt.value(0);
                var hdr_type : type_bits := bfe[0][6](ppkt.value(0));
                var tt := bvand(hdr_type,0x30);
                var is_long : bool := bvand(0x80,header) ~= 0;
                
                var version := ppkt.segment(1,1+4);
                var bversion := bytes_to_version(version);
                
                var ptype : byte := bvand(0x30,header);

                if (bversion = 0 & is_long) | version_not_found(src) { 
                    # for server test, for version_negociation
                    # 1000 0000 == version_negociation
                    past_data := past_data.extend(ppkt);
                    call tls_client_version_response(src,dst,past_data);
                } 
                else if (tt = 0x30 & is_long) & ~(bversion = 0)  {
                    #for server test, Retry packet
                    call tls_client_retry_response(src,dst,ppkt);
                } 
                # else if is_pad { #is_pad | is_rand_pad
                #     call padding_packet_event(src,dst,ppkt); # For quic-go and quand  client
                # } 
                else { 
                    var rnum := reference_pkt_num(ppkt,true);
                    call show_rnum(rnum);
                    # if rnum = lost_pkt_num {
                    #     call on_purpose_lost_packet_event(host,src,dst,last_zrtt_pkt);
                    # } else {
                        var res := prot.decrypt(tls_id,rnum,ppkt);
                        var dcil : stream_pos := bfe[0][7](ppkt.value(5));
                        var ikm := cid_to_bytes(0,1); # dcid
                        if(~dcil = 0) {
                            client_initial_dcil := dcil;
                            ikm := ppkt.segment(6,6+dcil); # dcid
                        };
                        var dcid : cid := bytes_to_cid(ikm);
                        total_data_received := total_data_received + ppkt.size;
                        # if total_data_received > 3 * total_data_sent { # Only for server
                        #     call show_data_received(total_data_received);
                        #     call show_data_sent(total_data_sent);
                        #     if ~address_validated {
                        #         anti_amplification_limit_reached := true;
                        #     } else {
                        #         anti_amplification_limit_reached := false;
                        #     }
                        # };
                        call on_datagram_received(dst, dcid, ppkt);
                        if res.ok {
                            var is_pad := is_padding_packet(res.payload); # For picoquic  client
                            if is_pad { #is_pad | is_rand_pad
                                call padding_packet_event(host,src,dst,ppkt);
                            } else {
                                call clear_packet(src,dst,rnum,res.data);
                                var pkt := pkt_serdes.from_bytes(res.data);
                                pkt.seq_num := prot.correct_pnum(rnum,pkt.seq_num,prot.get_pnum_len(res.data));
                                # if pkt.seq_num = lost_pkt_num {
                                #     call on_purpose_lost_packet_event(host,src,dst,last_zrtt_pkt);
                                # } else {
                                    call recv_packet(host,src,dst,pkt);
                                    call infer_tls_events(src,dst,pkt);   # infer any TLS events on server side
                                    call packet_event(src,dst,pkt);       # also an inferred event
                                    call on_packet_received(src,dst,pkt,last_datagram_received_size);
                                # };
                            };
                        } else {
                            call undecryptable_packet_event(host,src,dst,ppkt);
                        };
                    # };
                };
                idx := idx.next;
            };
            version_not_found(src) := false;
            call show_last_datagram_size(last_datagram_received_size);
            if ~first_datagram_received & host = endpoint_id.server { # for client tests
                require last_datagram_received_size + 8 > 1200; # 8 is for UDP datagram header
                first_datagram_received := true;
            };
            last_datagram_received_size := 0;
        }
        import action show_data_received(s:stream_pos)
        import action show_data_sent(s:stream_pos)
        import action show_rnum(s:pkt_num)
    }

    # TODO 
    module clients_quic(address:ip.addr,port:ip.port,nc: client.idx) = { # Fix to multiple clients
        variant this of endpoint = struct { }

        object client = {
            type this = struct {
                ep        : ip.endpoint,
                tls_id    : tls_api.id,
                enc_level : quic_packet_type
            }
            instance idx : unbounded_sequence
            instance arr : array(idx,this)

            # Useless for now
            action set_ep(p:this,e:ip.endpoint)
            action set_tls_id(p:this,e:tls_api.id)
        }
        
        individual clients : client.arr

        after init {
            var cdx : client.idx := 0;
            var last_cid := the_cid;
            # clients := client.arr.empty;
            var idx_port : ip.port := 0;
            while cdx < nc {
                var cc : client;
                cc.enc_level := quic_packet_type.initial;
                cc.ep.protocol := ip.udp;
                cc.ep.addr := address;
                cc.ep.port := port + (2*(idx_port+1));
                clients := clients.append(cc);
                the_cids := the_cids.append(last_cid);
                last_cid := double_cid(last_cid);
                cdx := cdx.next;
                idx_port := idx_port + 1;
            }
        }
        
        action set_ep(e:ip.endpoint,n:client.idx) = {
            clients.value(n).ep := e;
        }

        action set_tls_id(e:tls_api.id,n:client.idx) = {
            clients.value(n).tls_id := e;
        }

        action src_tls_id(src:ip.endpoint) returns (tls_id:tls_api.id) = {
            var cdx : client.idx := 0;
            while cdx < nc {
                if src = clients.value(cdx).ep {
                    tls_id := clients.value(cdx).tls_id;
                }
                cdx := cdx.next;
            }
        }

        action init_tls_ids = {
            var cdx : client.idx := 0;
            var ti  : tls_api.id := 0;
            while cdx < nc {
                clients.value(cdx).tls_id := ti;
                cdx := cdx.next;
                ti := ti + 1;
            }
        }
    }

    module server_quic(address:ip.addr,port:ip.port) = { 
        variant this of endpoint = struct { }
        individual ep        : ip.endpoint
        individual tls_id    : tls_api.id
        individual enc_level : quic_packet_type
        individual lost_pkt_num : pkt_num
        # }

        after init {
            enc_level := quic_packet_type.initial;
            ep.protocol := ip.udp;
            ep.addr := address;
            ep.port := port;
            if ep.addr = 0x7f000001 | is_mim {
                ep.interface := ip.lo;
            } else {
                ep.interface := ip.ivy;
            }
            lost_pkt_num := 0xa; # 0xFFFFFF; # means we do not loss packet on purposes
        }
        
        action set_ep(e:ip.endpoint) = {
            ep := e;
        }

        action set_tls_id(e:tls_api.id) = {
            tls_id := e;
        }

        action behavior(host:endpoint_id, s:net.socket, src:ip.endpoint, pkts:prot.arr) = {
            var dst := socket_endpoint(host,s);  # because net API doesn't tell us the dst
            var idx := pkts.begin;
            while idx < pkts.end {
                var ppkt := pkts.value(idx);
                var tls_id := src_tls_id(dst); # todo multiple
                var header := ppkt.value(0);
                var hdr_type : type_bits := bfe[0][6](ppkt.value(0));
                var tt := bvand(hdr_type,0x30);
                var is_long : bool := bvand(0x80,header) ~= 0;
                var version := ppkt.segment(1,1+4);
                var bversion := bytes_to_version(version);
                var ptype : byte := bvand(0x30,header);
                if zrtt_pkt_set & ~zrtt_pkt_process {
                    zrtt_pkt_process := true;
                    var rnum := reference_pkt_num(last_zrtt_pkt,true);
                    call show_rnum(rnum);
                    # if rnum = lost_pkt_num {
                    #     call on_purpose_lost_packet_event(host,src,dst,last_zrtt_pkt); # TODO bug never called
                    # } else {
                        var res := prot.decrypt(tls_id,rnum,last_zrtt_pkt);
                        var dcil : stream_pos := bfe[0][7](ppkt.value(5));
                        var ikm := cid_to_bytes(0,1); # dcid
                        if(~dcil = 0) {
                            client_initial_dcil := dcil;
                            ikm := ppkt.segment(6,6+dcil); # dcid
                        };
                        var dcid : cid := bytes_to_cid(ikm);
                        total_data_received := total_data_received + ppkt.size;
                        if total_data_received > 3 * total_data_sent {
                            call show_data_received(total_data_received);
                            call show_data_sent(total_data_sent);
                            if ~address_validated {
                                anti_amplification_limit_reached := true;
                            } else {
                                anti_amplification_limit_reached := false;
                            }
                        };
                        call on_datagram_received(dst, dcid, ppkt);
                        # call set_loss_detection_timer(dst, dcid);
                        # if loss_detection_timer < time_api.c_timer.now_micros {
                        #     call on_loss_detection_timeout();
                        # };
                        if res.ok {
                            if ~(bversion = 0) {
                                #for client test, 0rtt packet
                                call tls_client_0rtt_response(src,dst,res.data);
                            };
                        } else {
                            call undecryptable_packet_event(host,src,dst,last_zrtt_pkt);
                        };
                    # }
                };
                if bvand(ppkt.value(0),0xf0) = 0xc0 {
                    # for client test
                    call tls_client_initial_response(src,dst,ppkt)
                };
                var rnum := reference_pkt_num(ppkt,true);
                # call show_rnum(rnum);
                # if rnum = lost_pkt_num {
                #     call on_purpose_lost_packet_event(host,src,dst,last_zrtt_pkt);
                # } else {
                    var res := prot.decrypt(tls_id,rnum,ppkt);
                    var dcil : stream_pos := bfe[0][7](ppkt.value(5));
                    var ikm := cid_to_bytes(0,1); # dcid
                    if(~dcil = 0) {
                        client_initial_dcil := dcil;
                        ikm := ppkt.segment(6,6+dcil); # dcid
                    };
                    var dcid : cid := bytes_to_cid(ikm);
                    total_data_received := total_data_received + ppkt.size;
                    if total_data_received > 3 * total_data_sent {
                        call show_data_received(total_data_received);
                        call show_data_sent(total_data_sent);
                        if ~address_validated {
                            anti_amplification_limit_reached := true;
                        } else {
                            anti_amplification_limit_reached := false;
                        }
                    };
                    call on_datagram_received(dst, dcid, ppkt);
                    if res.ok {
                        var is_pad := is_padding_packet(res.payload); # For picoquic  client
                        if is_pad { #is_pad | is_rand_pad
                            call padding_packet_event(host,src,dst,ppkt);
                        } else if tt = 0x10  & ~(bversion = 0) {
                            #for client test, 0rtt packet
                            call tls_client_0rtt_response(src,dst,res.data);
                        } else {
                            call clear_packet(src,dst,rnum,res.data);
                            var pkt := pkt_serdes.from_bytes(res.data);
                            pkt.seq_num := prot.correct_pnum(rnum,pkt.seq_num,prot.get_pnum_len(res.data));
                            # if pkt.seq_num = lost_pkt_num {
                            #     call on_purpose_lost_packet_event(host,src,dst,last_zrtt_pkt);
                            # } else {
                                call recv_packet(host,src,dst,pkt);
                                call infer_tls_events(src,dst,pkt);   # infer any TLS events on server side
                                call packet_event(src,dst,pkt);       # also an inferred event
                                call on_packet_received(src,dst,pkt,last_datagram_received_size);
                                if nclients > 1 {
                                    var cdx := the_cids.begin;
                                    while cdx < the_cids.end {
                                        var tcid := the_cids.value(cdx);
                                        if bvand(ppkt.value(0),0xf0) = 0xc0 & ~connected(tcid) { 
                                            # for client test
                                            call app_server_open_event(dst,src,tcid,pkt.src_cid);  # [1]
                                        };
                                        cdx := cdx.next;
                                    }
                                } else {
                                    if bvand(ppkt.value(0),0xf0) = 0xc0 & ~connected(the_cid) { 
                                        # for client test
                                        call app_server_open_event(dst,src,the_cid,pkt.src_cid);  # [1]
                                    };
                                };
                            # };
                        };
                    } else {
                        call undecryptable_packet_event(host,src,dst,ppkt);
                    };
               # };
                idx := idx.next;
            };
            version_not_found(src) := false;
            call show_last_datagram_size(last_datagram_received_size);
            if ~first_datagram_received { # for client tests
                #require last_datagram_received_size + 8 > 1200; # 8 is for UDP datagram header TODO
                first_datagram_received := true;
            };
            last_datagram_received_size := 0;
        }
        import action show_data_received(s:stream_pos)
        import action show_data_sent(s:stream_pos)
        import action show_rnum(s:pkt_num)
    }

    # TODO 
    module servers_quic(address:ip.addr,port:ip.port,nc: server.idx) = { # Fix to multiple clients
        variant this of endpoint = struct { }

        object server = {
            type this = struct {
                ep        : ip.endpoint,
                tls_id    : tls_api.id,
                enc_level : quic_packet_type
            }
            instance idx : unbounded_sequence
            instance arr : array(idx,this)

            # Useless for now
            action set_ep(p:this,e:ip.endpoint)
            action set_tls_id(p:this,e:tls_api.id)
        }
        
        individual servers : server.arr

        after init {
            var cdx : server.idx := 0;
            # var last_cid := the_cid;
            # clients := client.arr.empty;
            var idx_port : ip.port := 0;
            while cdx < nc {
                var cc : server;
                cc.enc_level := quic_packet_type.initial;
                cc.ep.protocol := ip.udp;
                cc.ep.addr := address;
                cc.ep.port := port + (2*(idx_port+1));
                servers := servers.append(cc);
                # the_cids := the_cids.append(last_cid);
                # last_cid := double_cid(last_cid);
                cdx := cdx.next;
                idx_port := idx_port + 1;
            }
        }
        
        action set_ep(e:ip.endpoint,n:server.idx) = {
            servers.value(n).ep := e;
        }

        action set_tls_id(e:tls_api.id,n:server.idx) = {
            servers.value(n).tls_id := e;
        }

        action src_tls_id(src:ip.endpoint) returns (tls_id:tls_api.id) = {
            var cdx : server.idx := 0;
            while cdx < nc {
                if src = servers.value(cdx).ep {
                    tls_id := servers.value(cdx).tls_id;
                }
                cdx := cdx.next;
            }
        }

        action init_tls_ids = {
            var cdx : server.idx := 0;
            var ti  : tls_api.id := 0;
            while cdx < nc {
                servers.value(cdx).tls_id := ti;
                cdx := cdx.next;
                ti := ti + 1;
            }
        }
    }

    module client_server_quic(address:ip.addr,port:ip.port, oport:ip.port) = { 
        variant this of endpoint = struct { }
        
        individual ep_in        : ip.endpoint
        individual ep_out       : ip.endpoint
        individual tls_id_server    : tls_api.id
        individual tls_id_client    : tls_api.id
        individual enc_level : quic_packet_type
    
        individual init_cids : bool # TODO remove

        after init {
            enc_level := quic_packet_type.initial;
            ep_in.protocol := ip.udp;
            ep_in.addr := address;
            ep_in.port := port;
            
            ep_out.protocol := ip.udp;
            ep_out.addr := address;
            ep_out.port := oport;
        }
        
        action set_ep(e:ip.endpoint) = {
            ep_in := e; # TODO
        }

        action set_tls_id(e:tls_api.id,ee:tls_api.id) = {
            tls_id_server := ee;
            tls_id_client := e;
        }

        action behavior(host:endpoint_id, s:net.socket, src:ip.endpoint, pkts:prot.arr) = {
            var dst := socket_endpoint(host,s);  # because net API doesn't tell us the dst socket_endpoint_mim
            var idx := pkts.begin;
            # TODO should not be here

            while idx < pkts.end {
                var ppkt := pkts.value(idx);
                var tls_id := src_tls_id(dst); # todo multiple
                var header := ppkt.value(0);
                var hdr_type : type_bits := bfe[0][6](ppkt.value(0));
                var tt := bvand(hdr_type,0x30);
                var is_long : bool := bvand(0x80,header) ~= 0;
                
                var version := ppkt.segment(1,1+4);
                var bversion := bytes_to_version(version);
                
                var ptype : byte := bvand(0x30,header);
                idx := idx.next; 
            };
        }
    }
}

action double_cid(c:cid) returns(res:cid) = {
    <<<
    res.val = c.val * 2;
    >>>
}

import action show_endpoint(e:endpoint)