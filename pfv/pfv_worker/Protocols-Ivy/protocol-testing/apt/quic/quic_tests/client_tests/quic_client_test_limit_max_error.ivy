#lang ivy1.7

include order
include quic_infer
include file
include ivy_quic_shim_server
include quic_locale
include ivy_quic_server_behavior

#
# We fix the initial transport parameters here. TODO: In principle these
# parameters should be selected randomly by some event.
#

include ivy_quic_server_standard_tp

# Generate max_streams frames only for the client.

before quic_frameframeframe.max_streamsquic_framequic_framequic_frame.max_streams,scid:cid,dcid:cid) {
    if _generating {
        require client.ep.addr ~= 0;
        require scid = the_cid;
	var tp := trans_params(scid);
	if initial_max_stream_id_bidi.is_set(tp) {
        	require f.id > initial_max_stream_id_bidi.value(tp).stream_id_16;
	}
    }
}

# Generate connection_close frames only for the client.

before quic_frameframeframe.connection_closequic_framequic_framequic_frame.connection_close,scid:cid,dcid:cid) {
    if _generating {
        require client.ep.addr ~= 0;         
        require scid = the_cid;
    } else {
        require is_stream_limit_error
    }
}

# Generate connection_close frames only for the client.

before quic_frameframeframe.application_closequic_framequic_framequic_frame.application_close,scid:cid,dcid:cid) {
    if _generating {
        require client.ep.addr ~= 0;
        require scid = the_cid;
    }
}

around client_send_event {
    #require stream_seen(dcid,s); # TODO: wait until client request is finished?
	var tp := trans_params(dcid);
	if initial_max_stream_id_bidi.is_set(tp) {
        	require s > initial_max_stream_id_bidi.value(tp).stream_id_16 ;
	}else  {
		require s = current_stream;
	};


    require src = server.ep;
    require dst = client.ep;
    #require cid_dst_to_src_set(the_cid) & dcid = cid_dst_to_src(the_cid);
    require connected(the_cid) & dcid = connected_to(the_cid);
    require stream_length(dcid,s) = stream_app_data_end(dcid,s);
    require stream_length(dcid,s) < http_response.end;
    ...
    var data := http_response.segment(stream_length(dcid,s),http_response.end);
#    call app_send_event(src,dst,dcid,s,data,end = http_request.end);
    call app_send_event(src,dst,dcid,s,data,stream_length(dcid,s),true);
}

# The actions listed below will be generated by the mirror.
#
# Note: some of these are commented out. They are added in other files
# that include this one.

export quic_frameframeframe.ack.handle
export quic_frameframeframe.stream.handle
export quic_frameframeframe.crypto.handle
export quic_frameframeframe.path_response.handle
export quic_frameframeframe.handshake_done.handle
export packet_event
export client_send_event
export tls_recv_event

#export quic_frameframeframe.streams_blocked.handle
#export quic_frameframeframe.new_connection_id.handle
#export quic_frameframeframe.retire_connection_id.handle
#export quic_frameframeframe.rst_stream.handle
#export quic_frameframeframe.max_streams.handle
#export quic_frameframeframe.connection_close.handle
#export quic_frameframeframe.max_stream_data.handle

# Final check
#
# When the test is complete, the tester calls the special action `_finalize`.
# We use this action to make some heuristic checks, for example that some
# data was actually received from the server. We can add advice to this
# action with additional checks.

export action _finalize = {
    # chris TODO 
    require is_stream_limit_error;
}


