#lang ivy1.7

include order
include quic_infer
include file
include ivy_quic_shim_server
include quic_locale
include ivy_quic_server_behavior


after init {
    client_port_vn := 4986;
    client_alt := endpoint_id_addr(endpoint_id.client_alt);
    client_vn := endpoint_id_addr(endpoint_id.client_vn);
}


# HACK: we fix the initial client transport parameters here


action make_transport_parameters returns (tp:quic_transport_parameters) = {
    var imsdbl : initial_max_stream_data_bidi_local;
    imsdbl.stream_pos_32 := random_stream_pos(1,0xFFFFFFF);
    var imd : initial_max_data;
    imd.stream_pos_32 := random_stream_pos(1,0xFFFFFFF);
    var it : max_idle_timeout;
    it.seconds_16 := random_microsecs(0,0xFFFFFFF);
    var imsdbr : initial_max_stream_data_bidi_remote;
    imsdbr.stream_pos_32 := random_stream_pos(1,0xFFFFFFF);
    var imsdu : initial_max_stream_data_uni;
    imsdu.stream_pos_32 := random_stream_pos(1,0xFFFFFFF);
    tp.transport_parameters := tp.transport_parameters.append(imsdbl);
    tp.transport_parameters := tp.transport_parameters.append(imd);
    tp.transport_parameters := tp.transport_parameters.append(it);
    tp.transport_parameters := tp.transport_parameters.append(imsdbr);
    tp.transport_parameters := tp.transport_parameters.append(imsdu);
    # TEMPORARY: a missing numeric parameter should be treated as zero,
    # but some clients don't handle this correctly, so we put all parameters in.
    # Remove the following to test this client behavior.
    var imsib : initial_max_stream_id_bidi;
    imsib.stream_id_16 := initial_max_streams_bidi;
    tp.transport_parameters := tp.transport_parameters.append(imsib);
    
    #if client_non_zero_scil {
    var icid : initial_source_connection_id; #update v29
    icid.scid := the_cid;
    tp.transport_parameters := tp.transport_parameters.append(icid);
    #};
    var odci : original_destination_connection_id; #update v29
    odci.dcid := client_initial_dcid;
    tp.transport_parameters := tp.transport_parameters.append(odci);
}


var server_scid  : cid
var server_dcid  : cid

#
# Restrict generation to packets from the designated client endpoints
# to the server endpoint.

before packet_event(src:ip.endpoint,dst:ip.endpoint,pkt:packet.quic_packet) {
    if _generating {
        require ~negocation_of_version(src);
        require client.ep.addr ~= 0;  # must have a client address to send to
        require src = server.ep;
        require dst = client.ep;
        
        require pkt.token.end = 0; # [1]
        require connected(pkt.src_cid);
    	require pkt.long -> pkt.pversion = initial_version;  #version 29
	    call show_version(initial_version);
    } 
    else {
        if pkt.ptype = quic_packet_type.initial {
            server_scid := pkt.src_cid;
            server_dcid := pkt.dst_cid;
        };
	    require pkt.long -> (pkt.pversion = 0xff00001d | pkt.pversion = 0xfaceb002 | pkt.pversion = 0x00000001 | pkt.pversion = 0xff000022);  #version 29
	    if pkt.long {
	    	initial_version := pkt.pversion;
	    };
	    call show_version(initial_version);
    }
}


before packet_event_vn(src:ip.endpoint,dst:ip.endpoint,pkt:packet.quic_packet_vn) {
    if _generating {
        #require initial_version ~= 0x00000001; 
        require negocation_of_version(dst);
        require client.ep.addr ~= 0;  # must have a client address to send to
        require src = server.ep;
        require dst = client.ep;
        require pkt.dst_cid = client_initial_scid;
        require pkt.src_cid = client_initial_dcid;
        require pkt.pversion = 0x00000000;  #version 0
        pkt.supported_version := supported_versions_bv;
        #pkt.supported_version := versions_bv.empty;
        #pkt.supported_version := pkt.supported_version.append(0x00000001);
    } 
}

# Generate connection_close frames only for the client.

before quic_frame.connection_close.handquic_framequic_frame.connection_close,scid:cid,dcid:cid) {
    if _generating {
        require client.ep.addr ~= 0;         
        require scid = the_cid;
    } else {
        require is_no_error;
        call _finalize;
    }
}

# Generate connection_close frames only for the client.

before quic_frame.application_close.handquic_framequic_frame.application_close,scid:cid,dcid:cid) {
    if _generating {
        require client.ep.addr ~= 0;
        require scid = the_cid;
    } else {
        require is_no_error;
        call _finalize;
    }
}

# The actions listed below will be generated by the mirror.
#
# Note: some of these are commented out. They are added in other files
# that include this one.

export quic_frame.ack.handle
export quic_frame.stream.handle
export quic_frame.crypto.handle
export quic_frame.path_response.handle
export quic_frame.handshake_done.handle
export packet_event
export packet_event_vn
export client_send_event
export tls_recv_event
#export quic_frame.new_connection_id.handle
#export quic_frame.retire_connection_id.handle
#export quic_frame.rst_stream.handle
#export quic_frame.max_stream_id.handle
#export quic_frame.connection_close.handle
#export quic_frame.max_stream_data.handle


export quic_frame.max_streams.handle
export quic_frame.max_stream_data.handle
export quic_frame.max_data.handle
#export quic_frame.stream_blocked.handle
export quic_frame.rst_stream.handle
attribute quic_frame.rst_stream.handle.weight = "0.02"
attribute quic_frame.max_streams.handle.weight = "0.02"
attribute quic_frame.max_stream_data.handle.weight = "0.02"
attribute quic_frame.max_data.handle.weight = "0.02"


# export quic_frame.connection_close.handle
# attribute quic_frame.connection_close.handle.weight = "0.02"

#export quic_frame.application_close.handle
#attribute quic_frame.application_close.handle.weight = "0.02"

# export quic_frame.stop_sending.handle

before quic_frame.max_stream_data.handquic_framequic_frame.max_stream_data,scid:cid,dcid:cid,e:quic_packet_type) {
    if _generating {
        require f.pos = 32 | f.pos = 16;
    }
}

before quic_frame.stream_data_blocked.handquic_framequic_frame.stream_data_blocked,scid:cid,dcid:cid,e:quic_packet_type) {
    if _generating {
        require f.pos > 32;
    }
}

before quic_frame.max_data.handquic_framequic_frame.max_data,scid:cid,dcid:cid,e:quic_packet_type) {
    if _generating {
        require f.pos = 2048 | f.pos = 40;
    }
}

# Final check
#
# When the test is complete, the tester calls the special action `_finalize`.
# We use this action to make some heuristic checks, for example that some
# data was actually received from the server. We can add advice to this
# action with additional checks.

export action _finalize = {
    # chris TODO 
    require conn_total_data(the_cid) > 0;
}


