#lang ivy1.7

include order
include quic_infer
include file
include ivy_quic_shim_client
include quic_locale
include ivy_quic_client_behavior

#
# We fix the initial transport parameters here. TODO: In principle these
# parameters should be selected randomly by some event.
#

include ivy_quic_client_standard_tp

after init {
    sock := net.open(endpoint_id.client,client.ep);
    sock_alt := net.open(endpoint_id.client_alt,client_alt);
    sock_vn := sock; # net.open(endpoint_id.client_vn,client_vn);
    client.set_tls_id(0);
    second_client.set_tls_id(0); # TODO to avoid error
    server.set_tls_id(1);
    # second_client.set_tls_id(0);
    var extns := tls_extensions.empty;
    extns := extns.append(make_transport_parameters);
    call tls_api.upper.create(0,false,extns);  # false means this instance of tls is not a server
}


after init {
	allowed_multiple_migration := false;
    allowed_migration := false;
    version_negociated := false;
    # initial_version := 0xff00001c; #0xff00001c for quant vuln
}

# after init {
#     supported_versions := versions.empty;
#     var v1 := stream_data.empty;
#     v1 := v1.append(0xff);
#     v1 := v1.append(0x0);
#     v1 := v1.append(0x0);
#     v1 := v1.append(0x1c); # TODO for quant bug
#     supported_versions := supported_versions.append(v1);

#     supported_versions_bv := versions_bv.empty;
#     supported_versions_bv := supported_versions_bv.append(0xff00001c);
# }

# This token MUST be repeated by the client in all
#    Initial packets it sends for that connection after it receives the
#    Retry packet. 

# In comparison, a
#    token obtained in a Retry packet MUST be used immediately during the
#    connection attempt and cannot be used in subsequent connection
#    attempts.

# A client MUST
#    discard a Retry packet that contains a Source Connection ID field
#    that is identical to the Destination Connection ID field of its
#    Initial packet TODO

# The client MUST use the value from the Source
#    Connection ID field of the Retry packet in the Destination Connection
#    ID field of subsequent packets that it sends.

before packet_event(src:ip.endpoint,dst:ip.endpoint,pkt:packet.quic_packet) {
    if _generating {
        if pkt.ptype = quic_packet_type.initial {
            pkt.dst_cid := server_cid; # TODO
        };
    };
}

# The actions listed below will be generated by the mirror.
#
# Note: some of these are commented out. They are added in other files
# that include this one.

export quic_frame.ack.handle
export quic_frame.stream.handle
export quic_frame.crypto.handle
export quic_frame.path_response.handle
export packet_event
export client_send_event
export tls_recv_event
#export quic_frame.new_connection_id.handle
#export quic_frame.retire_connection_id.handle
#export quic_frame.rst_stream.handle
#export quic_frame.max_stream_id.handle
export quic_frame.connection_close.handle
#export quic_frame.max_stream_data.handle
#export quic_frame.max_data.handle
attribute quic_frame.crypto.handle.weight = "5"
attribute quic_frame.path_response.handle.weight = "5"

# Final check
#
# When the test is complete, the tester calls the special action `_finalize`.
# We use this action to make some heuristic checks, for example that some
# data was actually received from the server. We can add advice to this
# action with additional checks.

export action _finalize = {
    # chris TODO 
    require conn_total_data(the_cid) > 0;
}

