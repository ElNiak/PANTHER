#lang ivy1.7

include order
include quic_infer
include file
include ivy_quic_shim_client
include quic_locale
include ivy_quic_client_behavior

#
# We fix the initial transport parameters here. TODO: In principle these
# parameters should be selected randomly by some event.
#

include ivy_quic_client_standard_tp

after init {
    sock := net.open(endpoint_id.client,client.ep);
    sock_alt := net.open(endpoint_id.client_alt,client_alt);
    sock_vn := sock; # net.open(endpoint_id.client_vn,client_vn);
    client.set_tls_id(0);
    second_client.set_tls_id(0); # TODO to avoid error
    server.set_tls_id(1);
    var extns := tls_extensions.empty;
    extns := extns.append(make_transport_parameters);
    call tls_api.upper.create(0,false,extns);  # false means this instance of tls is not a server
}

#     Length:  An 8-bit unsigned integer containing the length of the
#      connection ID.  Values less than 1 and greater than [20 not testable 
#      since 20 bytes not available] are invalid
#      and MUST be treated as a connection error of type
#       FRAME_ENCODING_ERROR

before quic_frameframeframe.new_connection_idquic_framequic_framequic_frame.new_connection_id,scid:cid,dcid:cid) {
    if _generating {
        require client.ep.addr ~= 0;
        require scid = the_cid;
	#var cid_bytes := random_stream_data(0x10,0xfffff,8);
	#f.scid := bytes_to_cid(cid_bytes);
        require f.length < 1;
        require f.retire_prior_to <= f.seq_num; #[4]
    }
}


# Generate connection_close frames only for the environment process(es).
#
# Note: requiring the `err_code` is zero on non-generated frames means that
# we stop the test if the peer reports a protocol error. 

before quic_frameframeframe.connection_closequic_framequic_framequic_frame.connection_close,scid:cid,dcid:cid) {
    if _generating {
        require scid = the_cid;
    } else {
        require is_frame_encoding_error
    }
}

# Generate application_close frames only for the environment process(es).

before quic_frameframeframe.application_closequic_framequic_framequic_frame.application_close,scid:cid,dcid:cid) {
    if _generating {
        require scid = the_cid;
    }
}


# The actions listed below will be generated by the mirror.
#
# Note: some of these are commented out. They are added in other files
# that include this one.

export quic_frameframeframe.ack.handle
export quic_frameframeframe.stream.handle
export quic_frameframeframe.crypto.handle
export quic_frameframeframe.path_response.handle
export packet_event
export client_send_event
export tls_recv_event

export quic_frameframeframe.new_connection_id.handle
#export quic_frameframeframe.retire_connection_id.handle
#export quic_frameframeframe.rst_stream.handle
#export quic_frameframeframe.max_stream_id.handle
#export quic_frameframeframe.connection_close.handle
#export quic_frameframeframe.max_stream_data.handle

# Final check
#
# When the test is complete, the tester calls the special action `_finalize`.
# We use this action to make some heuristic checks, for example that some
# data was actually received from the server. We can add advice to this
# action with additional checks.

export action _finalize = {
    # chris TODO 
    require is_frame_encoding_error
}


