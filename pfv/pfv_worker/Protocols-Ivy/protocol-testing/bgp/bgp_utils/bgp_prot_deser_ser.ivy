#lang ivy1.7

object ping_prot_ser = {}

<<< member

    class `ping_prot_ser`;

>>>

<<< impl

    class `ping_prot_ser` : public ivy_binary_ser_128 {
    public:

        void open_list(int) {
        }

        virtual void  set(int128_t res) {
            setn(res,1);
        }    
    };

>>>

# The deserializer is tricker. It looks at the first byte of the packet
# to determine if it is a long or short packet. For long packets, it computes
# the total length based on the header bytes and the payload length field.
# This is a bit redundant with the above code, however this can't be helped as
# there is no way for the deserializer to have access to the ivy object.

object ping_prot_deser = {}

<<< member

    class `ping_prot_deser`;

>>>

<<< impl

    class `ping_prot_deser` : public ivy_binary_deser_128 {
        int data_remaining;
    public:
        ping_prot_deser(const std::vector<char> &inp) : ivy_binary_deser_128(inp) {
            data_remaining = inp.size();
        }

        void  get(int128_t &res) {
            getn(res,1);
        }    

        unsigned char peek(unsigned p) {
            return more(p-pos+1) ? inp[p] : 0;
        }
            
        void open_list() {
            return;
        }

        bool open_list_elem() {
            /*
            if (!more(1)) {
                return false;
            }
            */
            bool res = data_remaining-- >= 0;
            //if(data_remaining == 0) pos++;
            return res;
        }
        void close_list_elem() {
        }
    };

>>>
