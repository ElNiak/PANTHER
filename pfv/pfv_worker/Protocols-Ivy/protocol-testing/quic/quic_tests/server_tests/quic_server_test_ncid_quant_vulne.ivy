#lang ivy1.7

include order
include quic_infer
include file
include ivy_quic_shim_client
include random_value
include quic_locale
include ivy_quic_client_behavior

#
# We fix the initial transport parameters here. TODO: In principle these
# parameters should be selected randomly by some event.
#

include ivy_quic_client_standard_tp

after init {
	allowed_multiple_migration := false;
    version_negociated := false;
    # initial_version := 0xff00001c;
}


after init {
    sock := net.open(endpoint_id.client,client.ep);
    sock_alt := net.open(endpoint_id.client_alt,client_alt);
    sock_vn := sock; # net.open(endpoint_id.client_vn,client_vn);
    client.set_tls_id(0);
    second_client.set_tls_id(0); # TODO to avoid error
    server.set_tls_id(1);
    var extns := tls_extensions.empty;
    extns := extns.append(make_transport_parameters);
    call tls_api.upper.create(0,false,extns);  # false means this instance of tls is not a server
}

after init {
    # supported_versions := versions.empty;
    # var v1 := stream_data.empty;
    # v1 := v1.append(0xff);
    # v1 := v1.append(0x0);
    # v1 := v1.append(0x0);
    # v1 := v1.append(0x1c); # TODO
    # supported_versions := supported_versions.append(v1);

    # supported_versions_bv := versions_bv.empty;
    # supported_versions_bv := supported_versions_bv.append(0xff00001c);

    token_saved := false;
}

#  An endpoint cannot send this frame if it was provided with a zero-
#   length connection ID by its peer.  An endpoint that provides a zero-
#   length connection ID MUST treat receipt of a RETIRE_CONNECTION_ID
#   frame as a connection error of type PROTOCOL_VIOLATION.

before frame.retire_connection_id.handle(f:frame.retire_connection_id,scid:cid,dcid:cid) {
    if _generating {
        require scid = the_cid;
	    require connected(the_cid) & dcid = connected_to(the_cid);
        #require scid = 0;
    }
}


#   Once a sender indicates a Retire Prior To value, smaller values sent
#   in subsequent NEW_CONNECTION_ID frames have no effect.  A receiver
#   MUST ignore any Retire Prior To fields that do not increase the
#   largest received Retire Prior To value7

# https://github.com/NTAP/quant/issues/68

before frame.new_connection_id.handle(f:frame.new_connection_id,scid:cid,dcid:cid) {
    if _generating {
        require scid = the_cid;
	    require f.length = 8; #[1]
        f.scid := 0x42;
        require f.retire_prior_to = 0; #[4]
        f.seq_num := last_cid_seq(scid) + 0x1;
        f.token := 42;
        call show_cid_seq(last_cid_seq(scid));
        #f.seq_num := seqnum_to_cidseq(last_pkt_num(scid,quic_packet_type.zero_rtt));
    }
}

import action show_cid_seq(c:cid_seq)



# The actions listed below will be generated by the mirror.
#
# Note: some of these are commented out. They are added in other files
# that include this one.

export frame.ack.handle
export frame.stream.handle
export frame.crypto.handle
export frame.path_response.handle
export packet_event
export client_send_event
export tls_recv_event

export frame.new_connection_id.handle

#export frame.retire_connection_id.handle
#export frame.rst_stream.handle
#export frame.max_stream_id.handle
#export frame.connection_close.handle
#export frame.max_stream_data.handle

# Final check
#
# When the test is complete, the tester calls the special action `_finalize`.
# We use this action to make some heuristic checks, for example that some
# data was actually received from the server. We can add advice to this
# action with additional checks.

export action _finalize = {
    # chris TODO 
    require conn_total_data(the_cid) > 0;
}


