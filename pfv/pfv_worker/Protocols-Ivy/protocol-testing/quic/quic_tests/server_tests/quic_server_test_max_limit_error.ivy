#lang ivy1.7

include order
include quic_infer
include file
include ivy_quic_shim_client
include quic_locale
include ivy_quic_client_behavior

#
# We fix the initial transport parameters here. TODO: In principle these
# parameters should be selected randomly by some event.
#

include ivy_quic_client_standard_tp

after init {
    sock := net.open(endpoint_id.client,client.ep);
    sock_alt := net.open(endpoint_id.client_alt,client_alt);
    sock_vn := sock; # net.open(endpoint_id.client_vn,client_vn);
    client.set_tls_id(0);
    second_client.set_tls_id(0); # TODO to avoid error
    server.set_tls_id(1);
    var extns := tls_extensions.empty;
    extns := extns.append(make_transport_parameters);
    call tls_api.upper.create(0,false,extns);  # false means this instance of tls is not a server
}

# Generate max_streams frames only for the environment process(es).

#   Endpoints MUST NOT exceed the limit set by their peer.  An endpoint
#   that receives a frame with a stream ID exceeding the limit it has
#   sent MUST treat this as a connection error of type STREAM_LIMIT_ERROR
#   (Section 11).

before frame.max_streams.handle(f:frame.max_streams,scid:cid,dcid:cid) {
    if _generating {
        require scid = the_cid;
        var tp := trans_params(scid);
        if initial_max_stream_id_bidi.is_set(tp) {
                require f.id > initial_max_stream_id_bidi.value(tp).stream_id_16;
        }
    }
}


before frame.streams_blocked.handle(f:frame.streams_blocked,scid:cid,dcid:cid) {
    if _generating {
        require client.ep.addr ~= 0;
        require scid = the_cid;
    }
}

# The protocol specification describes all the events occurring the
# system at all protocol layers. When constructing the test mirror,
# however, we need to generate only events that are outputs of the
# environment. Ivy doesn't have any built-in mechanism to do this,
# so we have to add a constraint to every generated action. 
#
# We also add other pre-conditions to the actions to try to restrict
# them to relevant parameter values. 
#
# To restrict the generated events, we use the built-in predicate
# "_generating" that is true if this is a generated event.
#
# This is the mirror constraint for the stream frame protocol. We add
# some requirements to make the tests more interesting. In particular,
# we don't want the tester to produce lots of tiny frames (or empty
# ones) so we require that a stream frame send all of the available
# stream data. 
#
# TODO: We reuquire tje `off` and `len` bits to be true. Maybe these should
# determined in the low-level packet encoding stage.

#   Endpoints MUST NOT exceed the limit set by their peer.  An endpoint
#   that receives a frame with a stream ID exceeding the limit it has
#   sent MUST treat this as a connection error of type STREAM_LIMIT_ERROR
#   (Section 11).

before frame.stream.handle(f:frame.stream,scid:cid,dcid:cid,e:quic_packet_type) {
    if _generating {
        require scid = the_cid;
        require connected(the_cid) & dcid = connected_to(the_cid);
	var tp := trans_params(dcid);
	if initial_max_stream_id_bidi.is_set(tp) {
        	require f.id > initial_max_stream_id_bidi.value(tp).stream_id_16 ;
	};
        require f.len & f.off; 
        require f.length > 0;
        require f.offset = stream_length(dcid,f.id);
        require f.length = (stream_app_data_end(dcid,f.id)) - f.offset;
    }
}

before frame.connection_close.handle(f:frame.connection_close,scid:cid,dcid:cid) {
    if _generating {
        require scid = the_cid;
    } else {
        require is_stream_limit_error
    }
}

# Generate application_close frames only for the environment process(es).

before frame.application_close.handle(f:frame.application_close,scid:cid,dcid:cid) {
    if _generating {
        require scid = the_cid;
    }
}
export frame.ack.handle
export frame.stream.handle
export frame.crypto.handle
export frame.path_response.handle
export packet_event
export client_send_event
export tls_recv_event

#export frame.streams_blocked.handle
#export frame.new_connection_id.handle
#export frame.retire_connection_id.handle
#export frame.rst_stream.handle
#export frame.max_stream_id.handle
#export frame.connection_close.handle
#export frame.max_streams.handle

# Final check
#
# When the test is complete, the tester calls the special action `_finalize`.
# We use this action to make some heuristic checks, for example that some
# data was actually received from the server. We can add advice to this
# action with additional checks.

export action _finalize = {
    # chris TODO
    require is_stream_limit_error;
}


