#lang ivy1.7

include order
include quic_infer
include file
include ivy_quic_shim_client_dead
include quic_locale
include ivy_quic_client_behavior

#
# We fix the initial transport parameters here. TODO: In principle these
# parameters should be selected randomly by some event.
#

include ivy_quic_client_standard_tp

include quic_time

after init {
    call time_api.c_timer.start;
    call time_api.c_timer.start;
}

after init {
    sock := net.open(endpoint_id.client,client.ep);
    sock_alt := net.open(endpoint_id.client_alt,client_alt);
    sock_vn := sock; # net.open(endpoint_id.client_vn,client_vn);
    client.set_tls_id(0);
    second_client.set_tls_id(0); # TODO to avoid error
    server.set_tls_id(1);
    var extns := tls_extensions.empty;
    extns := extns.append(make_transport_parameters);
    call tls_api.upper.create(0,false,extns);  # false means this instance of tls is not a server
}

# The actions listed below will be generated by the mirror.
#
# Note: some of these are commented out. They are added in other files
# that include this one.

export frame.ack.handle
export frame.stream.handle
export frame.crypto.handle
export frame.path_response.handle
export packet_event
export client_send_event
export tls_recv_event
#export frame.new_connection_id.handle
#export frame.retire_connection_id.handle
#export frame.rst_stream.handle
#export frame.max_stream_id.handle
#export frame.connection_close.handle # TODO
#export frame.max_stream_data.handle
#export frame.max_data.handle


relation slept

after init {
    slept := false;
}

before packet_event(src:ip.endpoint,dst:ip.endpoint,pkt:quic_packet) {
    call show_last_pkt_num_for_cid(last_pkt_num(pkt.src_cid,quic_packet_type.one_rtt),pkt.src_cid,quic_packet_type.one_rtt,last_pkt_num(pkt.src_cid,quic_packet_type.one_rtt)/2);
    # TODO check with & without handshake_done_recv
    if ~_generating {
        if last_pkt_num(pkt.src_cid,quic_packet_type.one_rtt) > 5 & ~slept & handshake_done_recv {  # 
            var idle_timeout_forced := max_idle_timeout_used;
            var force_packet_retransmission_timeout := max_ack_delay_tp;
            call sleep_event(idle_timeout_forced);
            call time_api.c_timer.sleep(microseconds_to_milliseconds(idle_timeout_forced));
            slept := true;
        }
    } 
    # else {
    #     if last_pkt_num(pkt.src_cid,quic_packet_type.one_rtt) > 5  & ~slept {  # 
    #         call sleep_event;
    #         var idle_timeout_forced := max_idle_timeout_used;
    #         var force_packet_retransmission_timeout := max_ack_delay_tp;
    #         call time_api.c_timer.sleep(microseconds_to_milliseconds(idle_timeout_forced));
    #         slept := true;
    #     }
    # }
}

import action show_last_pkt_num_for_cid(pktnum:pkt_num,dst_cid:cid,ptype:quic_packet_type, div:pkt_num)
# export send_ack_eliciting_handshake_packet
# export send_ack_eliciting_application_packet
# export send_ack_eliciting_initial_packet
# export frame.ping.handle

export action _finalize = {
    # chris TODO 
    require is_no_error;
    require conn_total_data(the_cid) > 0;
    require ~connection_closed; # silent close
    #call 
}