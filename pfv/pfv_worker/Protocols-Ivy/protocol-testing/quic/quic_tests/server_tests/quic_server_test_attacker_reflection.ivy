#lang ivy1.7

include order
include quic_infer
include file
include ivy_quic_shim_attacker
include quic_locale
include ivy_quic_attacker_behavior
#
# We fix the initial transport parameters here. TODO: In principle these
# parameters should be selected randomly by some event.
#

include ivy_quic_client_standard_tp

after init {
    sock_victim := net.open(endpoint_id.victim,victim_agent.ep);
}

after init {
    sock_attacker := net.open(endpoint_id.attacker,attacker.ep);
    sock_alt := net.open(endpoint_id.client_alt,client_alt);
    sock_vn := sock_attacker; # net.open(endpoint_id.client_vn,client_vn);
    attacker.set_tls_id(0);
    server.set_tls_id(1);
    call attacker.configure_NAT_attack_in_spoof_hack(server.ep.port,victim_agent.ep.port);
    var extns := tls_extensions.empty;
    extns := extns.append(make_transport_parameters);
    call tls_api.upper.create(0,false,extns);  # false means this instance of tls is not a server
}

before forged_packet_event(src:ip.endpoint,dst:ip.endpoint,pkt:forged_quic_packet) {
    if _generating {
        #require ~negocation_of_version(src);
        var tp := trans_params(the_cid);
        if version_negociated {
            require src = client_vn;
        } else {
            if ~disable_active_migration.is_set(tp) {
                if ~migration_done | allowed_multiple_migration { 
                    #only one migration
                    require src = attacker.ep | src = client_alt;
                } else {
                    require src = client_alt;
                }
            } else {
                require src = attacker.ep;
            }
        };
        require dst = server.ep;
        #require pkt.token.end = 0; 
        if pkt.ptype = quic_packet_type.initial & retry_recv(pkt.src_cid) & ~zero_length_token {
            require pkt.token = retry_token(pkt.src_cid); # TODO new_token
        } else {
            require pkt.token.end = 0; 
        };
    } 
    if final_version = 0x00000000 {
        #require pkt.long -> pkt.pversion = 0xff00001d  #version 29
        #require pkt.long -> pkt.pversion = 0xff000020  #version 32
        #require pkt.long -> pkt.pversion = 0xff00001e  #version 30
        require pkt.long -> pkt.pversion = initial_version  #version 30
    } else {
        require pkt.long -> pkt.pversion = final_version
    };
}

# The actions listed below will be generated by the mirror.
#
# Note: some of these are commented out. They are added in other files
# that include this one.

export frame.ack.handle
export frame.stream.handle
export frame.crypto.handle
export frame.path_response.handle
export forged_packet_event
export attacker_send_event
export tls_recv_event
#export frame.new_connection_id.handle
#export frame.retire_connection_id.handle
#export frame.rst_stream.handle
#export frame.max_stream_id.handle
export frame.connection_close.handle # TODO
#export frame.max_stream_data.handle
#export frame.max_data.handle

# Final check
#
# When the test is complete, the tester calls the special action `_finalize`.
# We use this action to make some heuristic checks, for example that some
# data was actually received from the server. We can add advice to this
# action with additional checks.

export action _finalize = {
    # chris TODO 
    require victim_agent.ppkt_recvd.end > 0;
    call attacker.reset_NAT;
    #call 
}

