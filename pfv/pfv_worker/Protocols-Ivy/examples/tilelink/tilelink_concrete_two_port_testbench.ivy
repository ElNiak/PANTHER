#lang ivy1.3

################################################################################
# 
# Test bench for a two-port TileLink component that acts like a manager
# on its front port and a client on its back port.
#
################################################################################


################################################################################
# 
# The system we want to verify. Somewhat arbitrarily, the DUT is called "b".
#
################################################################################

individual buf_id : id   # arbitrary process id for the buffer

instantiate c : tl_generic_client(b,ref,fside)
instantiate b : dut(buf_id,c,m,ref)
instantiate m : tl_generic_manager(b,ref,bside)

export c.step
export b.step
export m.step

################################################################################
# 
# Instantiate the reference specification
#
################################################################################

instantiate ref : reference

################################################################################
# 
# Specify the two interfaces of the buffer
#
# To do this, we arbitrarily distribute the process id's on the client and
# manager side. The axioms guarantee the side assignments for the front
# and back interfaces of the buffer are consistent.
#
################################################################################

individual fside(I:id) : side
individual bside(I:id) : side
axiom fside(buf_id) = manager
axiom bside(buf_id) = client
axiom I ~= buf_id -> fside(I) = bside(I)

instantiate front : tl_interface(ref,c,b,fside)
instantiate back : tl_interface(ref,b,m,bside)

################################################################################
#
# Assume/guarantee relationships
#
################################################################################

# Correctness of client-side serializations is proved from front to back.
# When verifying the dut "b", we prove all serializations on the client
# side of the back interface are correct.

mixord front.perform_client -> back.perform_client
delegate back.perform_client -> b

# Correctness of manager-side serializations is proved from back to front.
# When verifying the dut "b", we prove all serializations on the manager
# side of the front interface are correct.

mixord back.perform_manager -> front.perform_manager
delegate front.perform_manager -> b


################################################################################
#
# Localize the proof
#
################################################################################

isolate iso_b = b with ref,front,back,c,m







