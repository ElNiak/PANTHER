#lang ivy1.7

include order
include quic_infer
include file
include ivy_quic_shim_server
include quic_locale
include ivy_quic_server_behavior

#
# We fix the initial transport parameters here. TODO: In principle these
# parameters should be selected randomly by some event.
#

include ivy_quic_server_standard_tp
include quic_time

after init {
    call time_api.c_timer.start;
    call time_api.c_timer.start;
}
# Note, we don't need a tester precondition for packet protocol
# events, since the frame queue for the server end will always be
# empty. This is because server frames are only inferred in response to
# a server packet event, which immediately dequeues them.

export frame.ack.handle
export frame.stream.handle
export frame.crypto.handle
export frame.path_response.handle #challenge ?
export frame.handshake_done.handle
#attribute frame.handshake_done.handle.weight = "0.02"
export packet_event
export client_send_event
export tls_recv_event

#export frame.rst_stream.handle
#export frame.max_stream_id.handle
#export frame.connection_close.handle
#export frame.max_stream_data.handle

#export frame.ping.handle
#attribute frame.ping.handle.weight = "0.02"

# Final check
#
# When the test is complete, the tester calls the special action `_finalize`.
# We use this action to make some heuristic checks, for example that some
# data was actually received from the server. We can add advice to this
# action with additional checks.

export action _finalize = {
    require is_no_error;
    require conn_total_data(the_cid) > 0;
    require respect_idle_timeout;
}



