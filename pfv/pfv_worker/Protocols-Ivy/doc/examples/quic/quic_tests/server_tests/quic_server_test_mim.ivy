#lang ivy1.7

include order
include quic_infer
include file
include ivy_quic_shim_mim
include ivy_quic_shim_client
include quic_locale
include ivy_quic_client_behavior

after init {
    call show_is_mim(is_mim);
    # mim_server_target.set_ep(server.ep);
    server.ep.interface := ip.lo;
}

include ivy_quic_mim_behavior

#
# We fix the initial transport parameters here. TODO: In principle these
# parameters should be selected randomly by some event.
#

after init {
    call show_is_mim(is_mim);
    sock_mim_client := net.listen(endpoint_id.mim,client.ep);
    # mim_server_target.set_ep(server.ep);
    server.ep.interface := ip.ivy;
}


include ivy_quic_client_standard_tp

after init {
    # With that, mim listen on ivy interface and client connect to lo interface
    client.ep.interface := ip.lo;
    # mim_client_target.set_ep(client.ep); # Like initial connection from client 
}

after init {
    sock := net.open(endpoint_id.client,client.ep);
    sock_alt := sock; #net.open(endpoint_id.client_alt,client_alt);
    sock_vn := sock; # net.open(endpoint_id.client_vn,client_vn);
    client.set_tls_id(0);
    second_client.set_tls_id(0); # TODO to avoid error
    server.set_tls_id(1);
    var extns := tls_extensions.empty;
    extns := extns.append(make_transport_parameters);
    call tls_api.upper.create(0,false,extns);  # false means this instance of tls is not a server
}

import action show_is_mim(b:bool)


before forward_packet_to_client_event(src:ip.endpoint,dst:ip.endpoint,pkt:forged_pkts) {
    if _generating {
        require mim_client_target.ep.addr ~= 0;  # must have a client address to send to
        #require;
        require src = mim_server_target.ep;
        require dst = mim_client_target.ep;
        require pkt = mim_agent.ppkt_to_be_forwarded_to_client(mim_agent.last_cppkt_forwarded_to_client);
        #require pkt = mim_agent.ppkt_to_be_forwarded_to_server; # TODO put relation ?
    } 
}

before forward_packet_to_server_event(src:ip.endpoint,dst:ip.endpoint,pkt:forged_pkts) {
    if _generating {
        require mim_client_target.ep.addr ~= 0;  # must have a client address to send to
        #require;
        require src = mim_client_target.ep;
        require dst = mim_server_target.ep;
        require pkt = mim_agent.ppkt_to_be_forwarded_to_server(mim_agent.last_cppkt_forwarded_to_server);        #require ;
        #require ;
        #require pkt = mim_agent.ppkt_to_be_forwarded_to_server; # TODO put relation ?
    } 
}

# The actions listed below will be generated by the mirror.
#
# Note: some of these are commented out. They are added in other files
# that include this one.

export frame.ack.handle
export frame.stream.handle
export frame.crypto.handle
export frame.path_response.handle
export packet_event
export client_send_event
export tls_recv_event
#export frame.new_connection_id.handle
#export frame.retire_connection_id.handle
#export frame.rst_stream.handle
#export frame.max_stream_id.handle
export frame.connection_close.handle # TODO
#export frame.max_stream_data.handle
#export frame.max_data.handle

export forward_packet_to_client_event
export forward_packet_to_server_event

# Final check
#
# When the test is complete, the tester calls the special action `_finalize`.
# We use this action to make some heuristic checks, for example that some
# data was actually received from the server. We can add advice to this
# action with additional checks.

export action _finalize = {
    # chris TODO 
    require is_no_error;
    require conn_total_data(the_cid) > 0;
    #call 
}

