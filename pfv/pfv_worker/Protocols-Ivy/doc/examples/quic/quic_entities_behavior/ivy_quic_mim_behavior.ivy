#lang ivy1.7

include order
include quic_infer
include file
include ivy_quic_shim_mim
# include quic_locale
include random_value


# Network setup
# -------------
#
# To test the server over the OS sockets layer, we need some setup. We must
# establish which interface and which ports the tester will use. 
#
# create an UDP network instance to communicate to server with
# Note: because of packet coalescing, a single UDP datagram contains
# an array of QUIC packets.

# Our test network has two endpoints: one for the client and one for the server
# We use this type as a host id. There are two client host ids so we
# can model migration.


# Open a server socket to listen on and create an instance of TLS.
# TODO: we should have one instance of TLS per connection


# Here we have a bunch of conversions that map between cid's, IP
# endpoints, TLS instances and host ids. TODO: This is a mess and
# should be done in a more systematic way.

# Get the host id associated to an ip endpoint. 

after init {
    sock_mim_server := net.listen(endpoint_id.mim,server.ep);
    mim_agent.set_tls_id(4); # 0 is default value, we dont wont that
}

# action endpoint_to_socket_mim(src:ip.endpoint) returns (socket:net.socket) = {
#     socket := sock_mim_server if (src = mim_agent.ep_in | src = mim_client_target.ep) else (sock_mim_server if src = mim_agent.ep_out else sock); #  & ~forged_packet_send
# }

# tODO 
# action socket_endpoint_mim(host:endpoint_id,s:net.socket) returns (src:ip.endpoint) = {
#     src := server.ep if (is_mim_standalone) else client.ep;
# }