#lang ivy1.7


include quic_types # should be change
include ping_application
include ping_packet

include ping_time
include udp_impl
include deserializer
include ip
include serdes

include useless

object ping_prot_ser = {}

<<< member

    class `ping_prot_ser`;

>>>

<<< impl

    class `ping_prot_ser` : public ivy_binary_ser_128 {
    public:

        void open_list(int) {
        }

        virtual void  set(int128_t res) {
            setn(res,1);
        }    
    };

>>>

# The deserializer is tricker. It looks at the first byte of the packet
# to determine if it is a long or short packet. For long packets, it computes
# the total length based on the header bytes and the payload length field.
# This is a bit redundant with the above code, however this can't be helped as
# there is no way for the deserializer to have access to the ivy object.

object ping_prot_deser = {}

<<< member

    class `ping_prot_deser`;

>>>

<<< impl

    class `ping_prot_deser` : public ivy_binary_deser_128 {
        int data_remaining;
    public:
        ping_prot_deser(const std::vector<char> &inp) : ivy_binary_deser_128(inp) {
            data_remaining = inp.size();
        }

        void  get(int128_t &res) {
            getn(res,1);
        }    

        unsigned char peek(unsigned p) {
            return more(p-pos+1) ? inp[p] : 0;
        }
            
        void open_list() {
            return;
        }

        bool open_list_elem() {
            /*
            if (!more(1)) {
                return false;
            }
            */
            bool res = data_remaining-- >= 0;
            //if(data_remaining == 0) pos++;
            return res;
        }
        void close_list_elem() {
        }
    };

>>>



include ping_deser
include ping_ser

object tls_api = {
    instance id : long_unbounded_sequence # unbounded_sequence #cid #
}   

relation zero_rtt_allowed # useless 

instance pingd : ping_array

instance net : udp_impl(endpoint_id,pingd.arr,ping_prot_ser,ping_prot_deser)

include ping_server
include ping_client

implement net.recv(host:endpoint_id, s:net.socket, src:ip.endpoint, pkts:pingd.arr) {
    # call show_current_time(time_api.c_timer.now_micros_last_bp);
    if host = endpoint_id.server {        # for client test (tested implem = client <-> ivy implem = server)
        call server.behavior(host,s,src,pkts);
    } else if host = endpoint_id.client  { # for server test (tested implem = server <-> ivy implem = client)
        call client.behavior(host,s,src,pkts);
    } else {
        # ERROR
        call undefined_host_error(host,s,src);
    };
}

import action recv_ping(host:endpoint_id,src:ip.endpoint,dst:ip.endpoint,pkt:ping_packet)
import action recv_pong(host:endpoint_id,src:ip.endpoint,dst:ip.endpoint,pkt:ping_packet)

import action undefined_host_error(host:endpoint_id, s:net.socket, src:ip.endpoint)

instance ping_packet_serdes : serdes(ping_packet,stream_data,ping_ser,ping_deser)

