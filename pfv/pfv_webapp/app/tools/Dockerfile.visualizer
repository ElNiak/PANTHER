FROM ubuntu:18.04

MAINTAINER Robin Marx <robin.marx@uhasselt.be>
MAINTAINER Christophe Crochet

# at least ubuntu 18.04 is needed for libgcrypt.
# It needs a high enough version to support all QUIC cyphers. 
# see https://code.wireshark.org/review/#/c/37525/

# sudo docker build -t qvis/server:wireshark wireshark/
# sudo docker run --privileged --name qvis_server -d qvis/server:wireshark
# sudo docker exec -it qvis_server bash

#		qt5-default \ 
#		qttools5-dev \ 
#		libqt5svg5-dev \ 
		
# install necessary packages
RUN 						\
	apt-get update 			\
	&& apt-get upgrade -y 	\
	&& apt-get install -y 	\
    	build-essential 	\
		git 				\
		autoconf            \
		libtool             \
		pkg-config          \
		libev-dev           \
		libcap-dev \
		libc-ares-dev \ 
		doxygen \ 
		libgcrypt11-dev \ 
		libglib2.0-dev \ 
		libgnutls28-dev \ 
		krb5-multidev \ 
		flex \ 
		qtmultimedia5-dev \ 
		libssh-dev \ 
		liblz4-dev \ 
		libxml2-dev \ 
		libnghttp2-dev \ 
		libpcap-dev \ 
		libmaxminddb-dev \ 
		libnl-3-dev \ 
		libnl-genl-3-dev \ 
		libnl-route-3-dev \ 
		liblua5.1-0-dev \ 
		liblua50-dev \ 
		liblualib50-dev \ 
		libsbc-dev \ 
		libsmi2-dev \ 
		libsnappy-dev \ 
		libspandsp-dev \ 
		libsystemd-dev \ 
		bison \ 
		asciidoctor \ 
		xsltproc \ 
		cmake \   
		wget \
		python3 \
		gcc \
    && apt-get autoremove 	\
    && apt-get clean		\
	&& rm -rf /var/lib/apt/lists/*

RUN apt remove --fix-missing -y cmake
RUN wget https://github.com/Kitware/CMake/releases/download/v3.22.1/cmake-3.22.1-Linux-x86_64.sh  
RUN chmod +x cmake-3.22.1-Linux-x86_64.sh
RUN mkdir /opt/cmake
RUN bash cmake-3.22.1-Linux-x86_64.sh --skip-license --prefix=/opt/cmake
RUN ln -s /opt/cmake/bin/cmake /usr/local/bin/cmake
RUN cmake --version

RUN git clone --depth 1 https://github.com/BelledonneCommunications/bcg729 /bcg729 \
    && cd /bcg729 \
    && cmake . \
    && make \
    && make install

# draft -29 support (as far as possible at this time)
# https://github.com/wireshark/wireshark/commit/e3d44136f0f0026c5e893fa249f458073f3b7328
RUN mkdir /wiresharksrc \
    && cd /wiresharksrc \ 
    && wget https://github.com/wireshark/wireshark/archive/e3d44136f0f0026c5e893fa249f458073f3b7328.zip \ 
    && unzip e3d44136f0f0026c5e893fa249f458073f3b7328.zip \
    && rm -f e3d44136f0f0026c5e893fa249f458073f3b7328.zip
 

#RUN apt-get update && apt-get install -y python3 gcc 
#RUN apt-get install -y qttools5-dev qttools5-dev-tools 


RUN mkdir /wireshark \ 
    && cd /wireshark \ 
    && cmake -DBUILD_wireshark=OFF -DBUILD_mergecap=OFF -DBUILD_dftest=OFF -DBUILD_randpkt=OFF -DBUILD_dumpcap=OFF -DBUILD_rawshark=OFF -DENABLE_PCAP=OFF -DENABLE_PLUGINS=OFF /wiresharksrc/wireshark-e3d44136f0f0026c5e893fa249f458073f3b7328 \ 
    && make


# sudo docker build -t qvis/server:latest qvis/
# sudo docker run --privileged --name qvis_server -d qvis/server:latest
# sudo docker exec -it qvis_server bash

		
# install necessary packages
RUN 						\
	apt-get update 			\
	&& apt-get upgrade -y 	\
	&& apt-get install -y curl \
    && curl -sL https://deb.nodesource.com/setup_10.x | bash - \
    && apt-get install -y nodejs git-core nano \	
    && apt-get -y  autoremove 	\
    && apt-get -y  clean		\
	&& rm -rf /var/lib/apt/lists/*

ADD src/vizualizer/pcap2qlog /srv/pcap2qlog
RUN cd /srv/pcap2qlog \
  && npm install \
  && node_modules/typescript/bin/tsc -p .

ADD src/vizualizer/qviz-server /srv/qvisserver
RUN cd /srv/qvisserver \
  && npm install \
  && node_modules/typescript/bin/tsc -p . \
  && mkdir /srv/qvisserver/out/public

# TODO: copy the qvis/dist folder over to /public in the expressjs app
ADD src/vizualizer/qviz /srv/qvis
RUN cd /srv/qvis/visualizations \
  && npm install \
  && npm run build \
  && cp -r /srv/qvis/visualizations/dist /srv/qvisserver/out/public

# this directory is supposed to be filled by mounting a volume when doing docker run
RUN mkdir /srv/certs
ADD src/pfv/scripts/certs/generate_cert.sh /srv/certs/generate_cert.sh
# RUN cd /srv/certs \
#   && chmod +x generate_cert.sh \
#   && ./generate_cert.sh

ADD src/pfv/scripts/certs/tls_cert.crt /srv/certs/tls_cert.crt
ADD src/pfv/scripts/certs/tls_cert.key /srv/certs/tls_cert.key

ADD src/containers/scripts/startup_vizualizer.sh /
RUN chmod +x /startup_vizualizer.sh