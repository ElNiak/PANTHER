title WebApp Model GUI
actor EndUser
actor WebApp(server.py)
actor App(run_experiments.py)
actor Ivy

EndUser->WebApp(server.py):GET /creator.html
note over WebApp(server.py),App(run_experiments.py): (1) update/compile picotls header \n   + update/compile ivy_*.py\n(2) copy *.ivy files to include/1.7/ \n     for needed for compilation
WebApp(server.py)->App(run_experiments.py):update_includes_ptls()\nupdate_includes()
WebApp(server.py)->WebApp(server.py):setup_quic_model()
WebApp(server.py)->Ivy:ivy_check diagnose=true \n                 show_compiled=false \n                 pedantic=true \n                 trusted=false \n                 trace=false \n                 isolate_mode=test \n                 isolate=this \n                 quic_server_test_stream.ivy\n>>/tmp/ivy_show_output.txt

note over WebApp(server.py): +- loop behavior but \nnot refactor for now
loop #ff00ff for line in ivy_show_output.txt
alt "implementation" in line
WebApp(server.py)->WebApp(server.py): get_implementation(line)
else "monitor of" in line
WebApp(server.py)->WebApp(server.py): get_monitor(line)
else "initializers are" in line
WebApp(server.py)->WebApp(server.py): get_initializer(line)
else "ext:" in line
WebApp(server.py)->WebApp(server.py):get_generated_event(line)
else "guarantees" in line:
WebApp(server.py)->WebApp(server.py):get_guarantees(line)
else "assumptions" in line:
WebApp(server.py)->WebApp(server.py):get_assumptions(line)
else "in action" in line:
WebApp(server.py)->WebApp(server.py):get_action(line)
else "transport parameter" in line:
WebApp(server.py)->WebApp(server.py):get_transport_parameters(line)
end
end

WebApp(server.py)->WebApp(server.py):  write(cytoscape_model.json)

WebApp(server.py)->WebApp(server.py):  generate_cytoscape_model(cytoscape_model.json)
WebApp(server.py)->EndUser:cytoscape_config.json