#lang ivy1.7

include order
include quic_infer
include file
include ivy_quic_shim_server
include quic_locale
include ivy_quic_server_behavior

#
# We fix the initial transport parameters here. TODO: In principle these
# parameters should be selected randomly by some event.
#

include ivy_quic_server_ext_min_ack_tp


include quic_time

after init {
    call time_api.c_timer.start;
}

# The actions listed below will be generated by the mirror.
#
# Note: some of these are commented out. They are added in other files
# that include this one.

before frame.ack_frequency.handle(f:frame.ack_frequency,scid:cid,dcid:cid) {
    if _generating {
        require client.ep.addr ~= 0;         
        require scid = the_cid;
        force_ack_frequency := true;
    } 
}


before frame.immediate_ack.handle(f:frame.immediate_ack,scid:cid,dcid:cid) {
    if _generating {
        require client.ep.addr ~= 0;
        require scid = the_cid;
        force_immediate_ack := true;
    } 
}


export frame.ack.handle
export frame.ack_frequency.handle
# export frame.immediate_ack.handle
export frame.stream.handle
export frame.handshake_done.handle
export frame.crypto.handle
export frame.path_response.handle
export packet_event
export client_send_event
export tls_recv_event

#export frame.retire_connection_id.handle
#export frame.rst_stream.handle
#export frame.max_stream_id.handle
#export frame.connection_close.handle
#export frame.max_stream_data.handle

# export send_ack_eliciting_handshake_packet
# export send_ack_eliciting_initial_packet
# export frame.ping.handle

# Final check
#
# When the test is complete, the tester calls the special action `_finalize`.
# We use this action to make some heuristic checks, for example that some
# data was actually received from the server. We can add advice to this
# action with additional checks.

export action _finalize = {
    # chris TODO 
    require conn_total_data(the_cid) > 0;
}


