#lang ivy1.7

include order
include quic_infer
include file
include ivy_quic_shim_server_dead
include quic_locale


include ivy_quic_server_behavior

#
# We fix the initial transport parameters here. TODO: In principle these
# parameters should be selected randomly by some event.
#

include ivy_quic_server_standard_tp
include quic_time

after init {
    call time_api.c_timer.start;
}

after init {
    slept := false;
    # is_not_sleeping := false;
}

before packet_event(src:ip.endpoint,dst:ip.endpoint,pkt:quic_packet) {
    #require time_api.c_timer.is_sleep_fake_timeout -> _generating;
    # is_not_sleeping := time_api.c_timer.is_sleep_fake_timeout;
    #require is_not_sleeping -> _generating;
    call show_is_sleep_fake_timeout(time_api.c_timer.is_sleep_fake_timeout);
    # require _generating -> is_not_sleeping;
    # require _generating <-> is_not_sleeping;
    if slept & is_not_sleeping {
        call _finalize;
    };
    if ~_generating {
        if last_pkt_num(the_cid,quic_packet_type.one_rtt) > 5  & ~slept & handshake_done_send & path_validated & pkt.seq_num > path_validated_pkt_num{  # & path_validated
            var idle_timeout_forced := max_idle_timeout_used;
            call sleep_event(idle_timeout_forced);
            var force_packet_retransmission_timeout := max_ack_delay_tp;
            sleep_start := time_api.c_timer.sleep_fake(microseconds_to_milliseconds(idle_timeout_forced));
            slept := true;
        }
    }
    else {
        # call show_is_sleep_fake_timeout(time_api.c_timer.is_sleep_fake_timeout);
        # require time_api.c_timer.is_sleep_fake_timeout <-> _generating;
        # require (_generating  -> is_not_sleeping);
        # require (~is_not_sleeping -> ~_generating);
    }
}


before send_ack_eliciting_handshake_packet(src:ip.endpoint,dst:ip.endpoint,pkt:quic_packet) {
    if _generating { # &
        #require  ~connection_timeout;
        require client.ep.addr ~= 0;  # must have a client address to send to
        require src = server.ep;
        require dst = client.ep;
        require pkt.token.end = 0; # [1]
        require connected(pkt.src_cid);
    	require pkt.long -> pkt.pversion = initial_version;  #version 29
	    #call show_version(initial_version);
    } else {
        # require ~connection_timeout;
	    require pkt.long -> (pkt.pversion = initial_version | pkt.pversion = 0xfaceb002);  #version 29
	    if pkt.long {
	    	initial_version := pkt.pversion;
	    };
	    #call show_version(initial_version);
    }
}

before send_ack_eliciting_initial_packet(src:ip.endpoint,dst:ip.endpoint,pkt:quic_packet) {
    if _generating { # &
        #require  ~connection_timeout;
        require client.ep.addr ~= 0;  # must have a client address to send to
        require src = server.ep;
        require dst = client.ep;
        require pkt.token.end = 0; # [1]
        require connected(pkt.src_cid);
    	require pkt.long -> pkt.pversion = initial_version;  #version 29
	    #call show_version(initial_version);
    } else {
        # require ~connection_timeout;
	    require pkt.long -> (pkt.pversion = initial_version | pkt.pversion = 0xfaceb002);  #version 29
	    if pkt.long {
	    	initial_version := pkt.pversion;
	    };
	    #call show_version(initial_version);
    }
}

before send_ack_eliciting_application_packet(src:ip.endpoint,dst:ip.endpoint,pkt:quic_packet) {
    if _generating { # &
        #require  ~connection_timeout;
        require client.ep.addr ~= 0;  # must have a client address to send to
        require src = server.ep;
        require dst = client.ep;
        require pkt.token.end = 0; # [1]
        require connected(pkt.src_cid);
    	require pkt.long -> pkt.pversion = initial_version;  #version 29
	    #call show_version(initial_version);
    } else {
        # require ~connection_timeout;
	    require pkt.long -> (pkt.pversion = initial_version | pkt.pversion = 0xfaceb002);  #version 29
	    if pkt.long {
	    	initial_version := pkt.pversion;
	    };
	    #call show_version(initial_version);
    }
}

# Note, we don't need a tester precondition for packet protocol
# events, since the frame queue for the server end will always be
# empty. This is because server frames are only inferred in response to
# a server packet event, which immediately dequeues them.

export frame.ack.handle
export frame.stream.handle
export frame.crypto.handle
# export frame.path_response.handle #challenge ?
export frame.handshake_done.handle
export frame.path_challenge.handle
#attribute frame.handshake_done.handle.weight = "0.02"
export packet_event
export client_send_event
export tls_recv_event


export send_ack_eliciting_handshake_packet
export send_ack_eliciting_initial_packet
export send_ack_eliciting_application_packet
export frame.ping.handle


export action _finalize = {
    # chris TODO 
    require is_no_error;
    require conn_total_data(the_cid) > 0;
    require ~connection_closed; # silent close
    require ~ (received_packets_time_sent(quic_packet_type.one_rtt, streampos_to_seqnum(received_packets_end(quic_packet_type.one_rtt))) - milliseconds_to_microseconds(sleep_start) > max_idle_timeout_used + 0x10);
    require received_packets_time_sent(quic_packet_type.one_rtt, streampos_to_seqnum(received_packets_end(quic_packet_type.one_rtt))) - milliseconds_to_microseconds(sleep_start) <= max_idle_timeout_used + 0x10;
    #call 
    #call 
}