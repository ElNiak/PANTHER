#lang ivy1.7

include order
include quic_infer
include file
include ivy_quic_shim_server
include quic_locale
include ivy_quic_server_behavior

# HACK: we fix the initial client transport parameters here


action make_transport_parameters returns (tp:quic_transport_parameters) = {
    #tp.initial_version := 0xff000017;
    #tp.versions := tp.versions.append(0xff000017);
    #tp.versions := tp.versions.append(0x49565931);  # IVY1
    var imsdbl : initial_max_stream_data_bidi_local;
    imsdbl.stream_pos_32 := random_stream_pos(1,0xFFFFFFF);
    var imd : initial_max_data;
    imd.stream_pos_32 := random_stream_pos(1,0xFFFFFFF);
    var it : max_idle_timeout;
    it.seconds_16 := random_microsecs(0,0xFFFFFFF);
    var imsdbr : initial_max_stream_data_bidi_remote;
    imsdbr.stream_pos_32 := random_stream_pos(1,0xFFFFFFF);
    var imsdu : initial_max_stream_data_uni;
    imsdu.stream_pos_32 := random_stream_pos(1,0xFFFFFFF);

    tp.transport_parameters := tp.transport_parameters.append(imsdbl);
    tp.transport_parameters := tp.transport_parameters.append(imd);
    tp.transport_parameters := tp.transport_parameters.append(it);
    tp.transport_parameters := tp.transport_parameters.append(imsdbr);
    tp.transport_parameters := tp.transport_parameters.append(imsdu);
    # TEMPORARY: a missing numeric parameter should be treated as zero,
    # but some clients don't handle this correctly, so we put all parameters in.
    # Remove the following to test this client behavior.
    var imsib : initial_max_stream_id_bidi;
    imsib.stream_id_16 := initial_max_streams_bidi;
    tp.transport_parameters := tp.transport_parameters.append(imsib);

    # New transport parameters can be used to negotiate new protocol
    # behavior.  An endpoint MUST ignore transport parameters that it does
    # not support

    var unk : unknown_ignore; 
    tp.transport_parameters := tp.transport_parameters.append(unk);


    var icid : initial_source_connection_id; #update v29
    icid.scid := the_cid;
    tp.transport_parameters := tp.transport_parameters.append(icid);
    var odci : original_destination_connection_id; #update v29
    odci.dcid := client_initial_dcid;
    tp.transport_parameters := tp.transport_parameters.append(odci);
}

# TODO connection close 

# The actions listed below will be generated by the mirror.
#
# Note: some of these are commented out. They are added in other files
# that include this one.

export frame.ack.handle
export frame.stream.handle
export frame.crypto.handle
export frame.path_response.handle
export frame.handshake_done.handle
export packet_event
export client_send_event
export tls_recv_event
#export frame.new_connection_id.handle
#export frame.retire_connection_id.handle
#export frame.rst_stream.handle
#export frame.max_stream_id.handle
#export frame.connection_close.handle
#export frame.max_stream_data.handle


# Final check
#
# When the test is complete, the tester calls the special action `_finalize`.
# We use this action to make some heuristic checks, for example that some
# data was actually received from the server. We can add advice to this
# action with additional checks.

export action _finalize = {
    # chris TODO 
    require conn_total_data(the_cid) > 0;
}


