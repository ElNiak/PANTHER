#lang ivy1.7

include order
include quic_infer
include file
include ivy_quic_shim_server
include quic_locale
include ivy_quic_server_behavior

#
# We fix the initial transport parameters here. TODO: In principle these
# parameters should be selected randomly by some event.
#

include ivy_quic_server_standard_tp
#
# Restrict generation to packets from the designated client endpoints
# to the server endpoint.
#

#   A HANDSHAKE_DONE frame can only be sent by the server.  Servers MUST
#   NOT send a HANDSHAKE_DONE frame before completing the handshake.  A
#   server MUST treat receipt of a HANDSHAKE_DONE frame as a connection
#   error of type PROTOCOL_VIOLATION

export frame.handshake_done.handle

attribute frame.handshake_done.handle.weight = "5"

# "Not working" due to requirements in quic_Frame, should move them here directly to 
# control

before frame.handshake_done.handle(f:frame.handshake_done,scid:cid,dcid:cid) {
    if _generating {
        require client.ep.addr ~= 0;
        require scid = the_cid;
	    #require ~handshake_done_send;
	    #require ~tls_handshake_finished; # & ~handshake_done_send;
	    #require ;
	    #handshake_done_send := true; #Tricks, we should wait ack and restransmit
    }
}

# Generate connection_close frames only for the client.

before frame.connection_close.handle(f:frame.connection_close,scid:cid,dcid:cid) {
    if _generating {
        require client.ep.addr ~= 0;         
        require scid = the_cid;
    } else {
        require is_protocol_violation
    }
}

# Generate connection_close frames only for the client.

before frame.application_close.handle(f:frame.application_close,scid:cid,dcid:cid) {
    if _generating {
        require client.ep.addr ~= 0;
        require scid = the_cid;
    }
}


# The actions listed below will be generated by the mirror.
#
# Note: some of these are commented out. They are added in other files
# that include this one.

export frame.ack.handle
export frame.stream.handle
export frame.crypto.handle
export frame.path_response.handle
export packet_event
export client_send_event
export tls_recv_event
#export frame.new_connection_id.handle
#export frame.retire_connection_id.handle
#export frame.rst_stream.handle
#export frame.max_stream_id.handle
#export frame.connection_close.handle
#export frame.max_stream_data.handle

# Final check
#
# When the test is complete, the tester calls the special action `_finalize`.
# We use this action to make some heuristic checks, for example that some
# data was actually received from the server. We can add advice to this
# action with additional checks.

export action _finalize = {
    # chris TODO 
    require is_protocol_violation;
}


