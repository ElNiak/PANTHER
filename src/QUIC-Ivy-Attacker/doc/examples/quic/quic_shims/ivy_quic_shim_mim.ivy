#lang ivy1.7

include quic_shim

# The QUIC test shim
# ------------------


# Packet event shim
# -----------------
#
# When a packet even is generated, we encode the packet contents and
# route it to the network. The encoding involves serializing the packet
# to its byte-level representation, and then applying protection.
#
# TODO: We do not actually generate protection layer events. Instead,
# whenever a generated packet event occurs, we deterministically
# serialize and encrypt the packet for transmission. This is not quite sound,
# since in fact there are a few choices to be made in the encoding (such
# as the number of bytes in the sequence number encoding) and these choices
# should in principle be randomized. We have not done this, however, since we
# are more interested in the higher-layer aspects of the protocol.
#
# TODO: We don't coalesce multiple packets into a datagram. To do
# this, we could enqueue packets (as frames are enqueued) and then
# randomly choose the moment to encode them.
#
# Note: To encode the packet, we need a reference sequence number,
# which is the sequence number of the most recently transmitted packet
# on the same connection. This information is obtained from the protocol
# state by the procedure `reference_pkt_num`.
#
# Note: We assume the each endpoint the tester can transmit on has been
# mapped to an open socket. This map is provided by `endpoint_to_socket_mim`.
#

after init {
    is_mim := true;
}

after modify_protected_packet_event(src:ip.endpoint,dst:ip.endpoint,pkt:forged_protected_quic_packet) {
    if _generating {  # & ~conn_closed(pkt.the_cid)
        # var idx := pkt.begin;
        # while idx < pkt.end {
            var spkt := forged_protected_pkt_serdes.to_bytes(pkt); # .value(idx)
            # var rnum := reference_pkt_num(spkt,false);
            # var tls_id := src_tls_id(src);
            # var ppkt := prot.encrypt(tls_id,rnum,spkt);
            var pkts := prot.arr.empty;
            pkts := pkts.append(spkt);
            call net.send(endpoint_id.mim,endpoint_to_socket_mim(src),dst,pkts);
        #     idx := idx.next; 
        # }
    }
}

after forward_packet_to_server_event(src:ip.endpoint,dst:ip.endpoint,pkt:forged_pkts) {
    if _generating {  # & ~conn_closed(pkt.the_cid)
        var idx := pkt.begin;
        
        # while idx < pkt.end {
        #     var pkts_mim := prot.arr.empty;
        #     pkts_mim := pkts_mim.append(pkt.value(idx));
        #     call net.send(endpoint_id.mim,endpoint_to_socket_mim(src),dst,pkts_mim); # TODO endpoint_to_socket_mim
        #     idx := idx.next; 
        # };
        
        var pkts_mim := prot.arr.empty;
        while idx < pkt.end {
            pkts_mim := pkts_mim.append(pkt.value(idx));
            idx := idx.next; 
        };
        call net.send(endpoint_id.mim,endpoint_to_socket_mim(src),dst,pkts_mim); # TODO endpoint_to_socket_mim

        mim_agent.last_cppkt_forwarded_to_server := mim_agent.last_cppkt_forwarded_to_server + 1;
    }
}


after forward_packet_to_client_event(src:ip.endpoint,dst:ip.endpoint,pkt:forged_pkts) {
    if _generating {  # & ~conn_closed(pkt.the_cid)
        var idx := pkt.begin;

        # while idx < pkt.end {
        #     var pkts_mim := prot.arr.empty;
        #     pkts_mim := pkts_mim.append(pkt.value(idx));
        #     call net.send(endpoint_id.mim,endpoint_to_socket_mim(src),dst,pkts_mim); # TODO endpoint_to_socket_mim
        #     idx := idx.next; 
        # };
        
        var pkts_mim := prot.arr.empty;
        while idx < pkt.end {
            pkts_mim := pkts_mim.append(pkt.value(idx));
            # TODO allow forwarding coalesed packet or not
            idx := idx.next; 
        }; 
        call net.send(endpoint_id.mim,endpoint_to_socket_mim(src),dst,pkts_mim); # TODO endpoint_to_socket_mim
        
        mim_agent.last_cppkt_forwarded_to_client := mim_agent.last_cppkt_forwarded_to_client + 1;
    }
}

after replay_packet_to_server_event(src:ip.endpoint,dst:ip.endpoint,pkt:forged_pkts) {
    if _generating {  # & ~conn_closed(pkt.the_cid)
        var idx := pkt.begin;
        while idx < pkt.end {
            var pkts_mim := prot.arr.empty;
            pkts_mim := pkts_mim.append(pkt.value(idx));
            call net.send(endpoint_id.mim,endpoint_to_socket_mim(src),dst,pkts_mim); # TODO endpoint_to_socket_mim
            idx := idx.next; 
        };
    }
}

after forged_packet_event_vn(src:ip.endpoint,dst:ip.endpoint,pkt:forged_quic_packet_vn) {
    if _generating {  # & ~conn_closed(pkt.the_cid)
        var spkt := forged_pkt_serdes_vn.to_bytes(pkt);
        # var rnum := reference_pkt_num(spkt,false);
        # var tls_id := dst_tls_id(dst);
        # var ppkt := prot.encrypt(tls_id,rnum,spkt); # no encryption ?
        var pkts := prot.arr.empty;
        pkts := pkts.append(spkt);
        call net.send(endpoint_id.mim,endpoint_to_socket_mim(src),dst,pkts);
    }
}

after forged_packet_event_retry(src:ip.endpoint,dst:ip.endpoint,pkt:forged_quic_packet_retry,inpkt:quic_packet_retry) {
    if _generating {  # & ~conn_closed(pkt.the_cid)
        var spkt := forged_pkt_serdes_retry.to_bytes(pkt);
        var pkts := prot.arr.empty;
        pkts := pkts.append(spkt);
        call net.send(endpoint_id.mim,endpoint_to_socket_mim(src),dst,pkts);
    }
}

after replayed_packet_event_0rtt(src:ip.endpoint,dst:ip.endpoint,pkt:replayed_quic_packet_0rtt) {
    if _generating {  # & ~conn_closed(pkt.the_cid)
        var spkt := replayed_pkt_serdes_0rtt.to_bytes(pkt);
        var pkts := prot.arr.empty;
        var tls_id := src_tls_id(src);
        var rnum := reference_pkt_num(spkt,false);
        var ppkt := prot.encrypt_rtt(tls_id,rnum,spkt);
        pkts := pkts.append(ppkt);
        call net.send(endpoint_id.mim,endpoint_to_socket_mim(src),dst,pkts);
    }
}

