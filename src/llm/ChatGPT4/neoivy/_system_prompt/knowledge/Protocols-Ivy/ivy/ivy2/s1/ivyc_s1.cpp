#include "ivyc_s1.h"

#include <sstream>
#include <algorithm>

#include <iostream>
#include <stdlib.h>
#include <sys/types.h>          /* See NOTES */
#include <sys/stat.h>
#include <fcntl.h>
#ifdef _WIN32
#include <winsock2.h>
#include <WS2tcpip.h>
#include <io.h>
#define isatty _isatty
#else
#include <sys/socket.h>
#include <netinet/in.h>
#include <netinet/ip.h> 
#include <sys/select.h>
#include <unistd.h>
#define _open open
#define _dup2 dup2
#endif
#include <string.h>
#include <stdio.h>
#include <string>
#if __cplusplus < 201103L
#else
#include <cstdint>
#endif
typedef ivyc_s1 ivy_class;
std::ofstream __ivy_out;
std::ofstream __ivy_modelfile;
void __ivy_exit(int code){exit(code);}

class reader {
public:
    virtual int fdes() = 0;
    virtual void read() = 0;
    virtual void bind() {}
    virtual bool running() {return fdes() >= 0;}
    virtual ~reader() {}
};

class timer {
public:
    virtual int ms_delay() = 0;
    virtual void timeout(int) = 0;
    virtual ~timer() {}
};

#ifdef _WIN32
DWORD WINAPI ReaderThreadFunction( LPVOID lpParam ) 
{
    reader *cr = (reader *) lpParam;
    cr->bind();
    while (true)
        cr->read();
    return 0;
} 

DWORD WINAPI TimerThreadFunction( LPVOID lpParam ) 
{
    timer *cr = (timer *) lpParam;
    while (true) {
        int ms = cr->ms_delay();
        Sleep(ms);
        cr->timeout(ms);
    }
    return 0;
} 
#else
void * _thread_reader(void *rdr_void) {
    reader *rdr = (reader *) rdr_void;
    rdr->bind();
    while(rdr->running()) {
        rdr->read();
    }
    delete rdr;
    return 0; // just to stop warning
}

void * _thread_timer( void *tmr_void ) 
{
    timer *tmr = (timer *) tmr_void;
    while (true) {
        int ms = tmr->ms_delay();
        struct timespec ts;
        ts.tv_sec = ms/1000;
        ts.tv_nsec = (ms % 1000) * 1000000;
        nanosleep(&ts,NULL);
        tmr->timeout(ms);
    }
    return 0;
} 
#endif 

void ivyc_s1::install_reader(reader *r) {
    #ifdef _WIN32

        DWORD dummy;
        HANDLE h = CreateThread( 
            NULL,                   // default security attributes
            0,                      // use default stack size  
            ReaderThreadFunction,   // thread function name
            r,                      // argument to thread function 
            0,                      // use default creation flags 
            &dummy);                // returns the thread identifier 
        if (h == NULL) {
            std::cerr << "failed to create thread" << std::endl;
            exit(1);
        }
        thread_ids.push_back(h);
    #else
        pthread_t thread;
        int res = pthread_create(&thread, NULL, _thread_reader, r);
        if (res) {
            std::cerr << "failed to create thread" << std::endl;
            exit(1);
        }
        thread_ids.push_back(thread);
    #endif
}      

void ivyc_s1::install_thread(reader *r) {
    install_reader(r);
}

void ivyc_s1::install_timer(timer *r) {
    #ifdef _WIN32

        DWORD dummy;
        HANDLE h = CreateThread( 
            NULL,                   // default security attributes
            0,                      // use default stack size  
            TimersThreadFunction,   // thread function name
            r,                      // argument to thread function 
            0,                      // use default creation flags 
            &dummy);                // returns the thread identifier 
        if (h == NULL) {
            std::cerr << "failed to create thread" << std::endl;
            exit(1);
        }
        thread_ids.push_back(h);
    #else
        pthread_t thread;
        int res = pthread_create(&thread, NULL, _thread_timer, r);
        if (res) {
            std::cerr << "failed to create thread" << std::endl;
            exit(1);
        }
        thread_ids.push_back(thread);
    #endif
}      


#ifdef _WIN32
    void ivyc_s1::__lock() { WaitForSingleObject(mutex,INFINITE); }
    void ivyc_s1::__unlock() { ReleaseMutex(mutex); }
#else
    void ivyc_s1::__lock() { pthread_mutex_lock(&mutex); }
    void ivyc_s1::__unlock() { pthread_mutex_unlock(&mutex); }
#endif

/*++
Copyright (c) Microsoft Corporation

This string hash function is borrowed from Microsoft Z3
(https://github.com/Z3Prover/z3). 

--*/


#define mix(a,b,c)              \
{                               \
  a -= b; a -= c; a ^= (c>>13); \
  b -= c; b -= a; b ^= (a<<8);  \
  c -= a; c -= b; c ^= (b>>13); \
  a -= b; a -= c; a ^= (c>>12); \
  b -= c; b -= a; b ^= (a<<16); \
  c -= a; c -= b; c ^= (b>>5);  \
  a -= b; a -= c; a ^= (c>>3);  \
  b -= c; b -= a; b ^= (a<<10); \
  c -= a; c -= b; c ^= (b>>15); \
}

#ifndef __fallthrough
#define __fallthrough
#endif

namespace hash_space {

// I'm using Bob Jenkin's hash function.
// http://burtleburtle.net/bob/hash/doobs.html
unsigned string_hash(const char * str, unsigned length, unsigned init_value) {
    register unsigned a, b, c, len;

    /* Set up the internal state */
    len = length;
    a = b = 0x9e3779b9;  /* the golden ratio; an arbitrary value */
    c = init_value;      /* the previous hash value */

    /*---------------------------------------- handle most of the key */
    while (len >= 12) {
        a += reinterpret_cast<const unsigned *>(str)[0];
        b += reinterpret_cast<const unsigned *>(str)[1];
        c += reinterpret_cast<const unsigned *>(str)[2];
        mix(a,b,c);
        str += 12; len -= 12;
    }

    /*------------------------------------- handle the last 11 bytes */
    c += length;
    switch(len) {        /* all the case statements fall through */
    case 11: 
        c+=((unsigned)str[10]<<24);
        __fallthrough;
    case 10: 
        c+=((unsigned)str[9]<<16);
        __fallthrough;
    case 9 : 
        c+=((unsigned)str[8]<<8);
        __fallthrough;
        /* the first byte of c is reserved for the length */
    case 8 : 
        b+=((unsigned)str[7]<<24);
        __fallthrough;
    case 7 : 
        b+=((unsigned)str[6]<<16);
        __fallthrough;
    case 6 : 
        b+=((unsigned)str[5]<<8);
        __fallthrough;
    case 5 : 
        b+=str[4];
        __fallthrough;
    case 4 : 
        a+=((unsigned)str[3]<<24);
        __fallthrough;
    case 3 : 
        a+=((unsigned)str[2]<<16);
        __fallthrough;
    case 2 : 
        a+=((unsigned)str[1]<<8);
        __fallthrough;
    case 1 : 
        a+=str[0];
        __fallthrough;
        /* case 0: nothing left to add */
    }
    mix(a,b,c);
    /*-------------------------------------------- report the result */
    return c;
}

}




struct ivy_value {
    int pos;
    std::string atom;
    std::vector<ivy_value> fields;
    bool is_member() const {
        return atom.size() && fields.size();
    }
};
struct deser_err {
};

struct ivy_ser {
    virtual void  set(long long) = 0;
    virtual void  set(bool) = 0;
    virtual void  setn(long long inp, int len) = 0;
    virtual void  set(const std::string &) = 0;
    virtual void  open_list(int len) = 0;
    virtual void  close_list() = 0;
    virtual void  open_list_elem() = 0;
    virtual void  close_list_elem() = 0;
    virtual void  open_struct() = 0;
    virtual void  close_struct() = 0;
    virtual void  open_field(const std::string &) = 0;
    virtual void  close_field() = 0;
    virtual void  open_tag(int, const std::string &) {throw deser_err();}
    virtual void  close_tag() {}
    virtual ~ivy_ser(){}
};
struct ivy_binary_ser : public ivy_ser {
    std::vector<char> res;
    void setn(long long inp, int len) {
        for (int i = len-1; i >= 0 ; i--)
            res.push_back((inp>>(8*i))&0xff);
    }
    void set(long long inp) {
        setn(inp,sizeof(long long));
    }
    void set(bool inp) {
        set((long long)inp);
    }
    void set(const std::string &inp) {
        for (unsigned i = 0; i < inp.size(); i++)
            res.push_back(inp[i]);
        res.push_back(0);
    }
    void open_list(int len) {
        set((long long)len);
    }
    void close_list() {}
    void open_list_elem() {}
    void close_list_elem() {}
    void open_struct() {}
    void close_struct() {}
    virtual void  open_field(const std::string &) {}
    void close_field() {}
    virtual void  open_tag(int tag, const std::string &) {
        set((long long)tag);
    }
    virtual void  close_tag() {}
};

struct ivy_deser {
    virtual void  get(long long&) = 0;
    virtual void  get(std::string &) = 0;
    virtual void  getn(long long &res, int bytes) = 0;
    virtual void  open_list() = 0;
    virtual void  close_list() = 0;
    virtual bool  open_list_elem() = 0;
    virtual void  close_list_elem() = 0;
    virtual void  open_struct() = 0;
    virtual void  close_struct() = 0;
    virtual void  open_field(const std::string &) = 0;
    virtual void  close_field() = 0;
    virtual int   open_tag(const std::vector<std::string> &) {throw deser_err();}
    virtual void  close_tag() {}
    virtual void  end() = 0;
    virtual ~ivy_deser(){}
};

struct ivy_binary_deser : public ivy_deser {
    std::vector<char> inp;
    int pos;
    std::vector<int> lenstack;
    ivy_binary_deser(const std::vector<char> &inp) : inp(inp),pos(0) {}
    virtual bool more(unsigned bytes) {return inp.size() >= pos + bytes;}
    virtual bool can_end() {return pos == inp.size();}
    void get(long long &res) {
       getn(res,8);
    }
    void getn(long long &res, int bytes) {
        if (!more(bytes))
            throw deser_err();
        res = 0;
        for (int i = 0; i < bytes; i++)
            res = (res << 8) | (((long long)inp[pos++]) & 0xff);
    }
    void get(std::string &res) {
        while (more(1) && inp[pos]) {
//            if (inp[pos] == '"')
//                throw deser_err();
            res.push_back(inp[pos++]);
        }
        if(!(more(1) && inp[pos] == 0))
            throw deser_err();
        pos++;
    }
    void open_list() {
        long long len;
        get(len);
        lenstack.push_back(len);
    }
    void close_list() {
        lenstack.pop_back();
    }
    bool open_list_elem() {
        return lenstack.back();
    }
    void close_list_elem() {
        lenstack.back()--;
    }
    void open_struct() {}
    void close_struct() {}
    virtual void  open_field(const std::string &) {}
    void close_field() {}
    int open_tag(const std::vector<std::string> &tags) {
        long long res;
        get(res);
        if (res >= tags.size())
            throw deser_err();
        return res;
    }
    void end() {
        if (!can_end())
            throw deser_err();
    }
};
struct ivy_socket_deser : public ivy_binary_deser {
      int sock;
    public:
      ivy_socket_deser(int sock, const std::vector<char> &inp)
          : ivy_binary_deser(inp), sock(sock) {}
    virtual bool more(unsigned bytes) {
        while (inp.size() < pos + bytes) {
            int oldsize = inp.size();
            int get = pos + bytes - oldsize;
            get = (get < 1024) ? 1024 : get;
            inp.resize(oldsize + get);
            int newbytes;
	    if ((newbytes = read(sock,&inp[oldsize],get)) < 0)
		 { std::cerr << "recvfrom failed\n"; exit(1); }
            inp.resize(oldsize + newbytes);
            if (newbytes == 0)
                 return false;
        }
        return true;
    }
    virtual bool can_end() {return true;}
};

struct out_of_bounds {
    std::string txt;
    int pos;
    out_of_bounds(int _idx, int pos = 0) : pos(pos){
        std::ostringstream os;
        os << "argument " << _idx+1;
        txt = os.str();
    }
    out_of_bounds(const std::string &s, int pos = 0) : txt(s), pos(pos) {}
};

template <class T> T _arg(std::vector<ivy_value> &args, unsigned idx, long long bound);
template <class T> T __lit(const char *);

template <>
bool _arg<bool>(std::vector<ivy_value> &args, unsigned idx, long long bound) {
    if (!(args[idx].atom == "true" || args[idx].atom == "false") || args[idx].fields.size())
        throw out_of_bounds(idx,args[idx].pos);
    return args[idx].atom == "true";
}

template <>
int _arg<int>(std::vector<ivy_value> &args, unsigned idx, long long bound) {
    std::istringstream s(args[idx].atom.c_str());
    s.unsetf(std::ios::dec);
    s.unsetf(std::ios::hex);
    s.unsetf(std::ios::oct);
    long long res;
    s  >> res;
    // int res = atoi(args[idx].atom.c_str());
    if (bound && (res < 0 || res >= bound) || args[idx].fields.size())
        throw out_of_bounds(idx,args[idx].pos);
    return res;
}

template <>
long long _arg<long long>(std::vector<ivy_value> &args, unsigned idx, long long bound) {
    std::istringstream s(args[idx].atom.c_str());
    s.unsetf(std::ios::dec);
    s.unsetf(std::ios::hex);
    s.unsetf(std::ios::oct);
    long long res;
    s  >> res;
//    long long res = atoll(args[idx].atom.c_str());
    if (bound && (res < 0 || res >= bound) || args[idx].fields.size())
        throw out_of_bounds(idx,args[idx].pos);
    return res;
}

template <>
unsigned long long _arg<unsigned long long>(std::vector<ivy_value> &args, unsigned idx, long long bound) {
    std::istringstream s(args[idx].atom.c_str());
    s.unsetf(std::ios::dec);
    s.unsetf(std::ios::hex);
    s.unsetf(std::ios::oct);
    unsigned long long res;
    s  >> res;
//    unsigned long long res = atoll(args[idx].atom.c_str());
    if (bound && (res < 0 || res >= bound) || args[idx].fields.size())
        throw out_of_bounds(idx,args[idx].pos);
    return res;
}

template <>
unsigned _arg<unsigned>(std::vector<ivy_value> &args, unsigned idx, long long bound) {
    std::istringstream s(args[idx].atom.c_str());
    s.unsetf(std::ios::dec);
    s.unsetf(std::ios::hex);
    s.unsetf(std::ios::oct);
    unsigned res;
    s  >> res;
//    unsigned res = atoll(args[idx].atom.c_str());
    if (bound && (res < 0 || res >= bound) || args[idx].fields.size())
        throw out_of_bounds(idx,args[idx].pos);
    return res;
}


std::ostream &operator <<(std::ostream &s, const __strlit &t){
    s << "\"" << t.c_str() << "\"";
    return s;
}

template <>
__strlit _arg<__strlit>(std::vector<ivy_value> &args, unsigned idx, long long bound) {
    if (args[idx].fields.size())
        throw out_of_bounds(idx,args[idx].pos);
    return args[idx].atom;
}

template <class T> void __ser(ivy_ser &res, const T &inp);

template <>
void __ser<int>(ivy_ser &res, const int &inp) {
    res.set((long long)inp);
}

template <>
void __ser<long long>(ivy_ser &res, const long long &inp) {
    res.set(inp);
}

template <>
void __ser<unsigned long long>(ivy_ser &res, const unsigned long long &inp) {
    res.set((long long)inp);
}

template <>
void __ser<unsigned>(ivy_ser &res, const unsigned &inp) {
    res.set((long long)inp);
}

template <>
void __ser<bool>(ivy_ser &res, const bool &inp) {
    res.set(inp);
}

template <>
void __ser<__strlit>(ivy_ser &res, const __strlit &inp) {
    res.set(inp);
}

template <class T> void __deser(ivy_deser &inp, T &res);

template <>
void __deser<int>(ivy_deser &inp, int &res) {
    long long temp;
    inp.get(temp);
    res = temp;
}

template <>
void __deser<long long>(ivy_deser &inp, long long &res) {
    inp.get(res);
}

template <>
void __deser<unsigned long long>(ivy_deser &inp, unsigned long long &res) {
    long long temp;
    inp.get(temp);
    res = temp;
}

template <>
void __deser<unsigned>(ivy_deser &inp, unsigned &res) {
    long long temp;
    inp.get(temp);
    res = temp;
}

template <>
void __deser<__strlit>(ivy_deser &inp, __strlit &res) {
    inp.get(res);
}

template <>
void __deser<bool>(ivy_deser &inp, bool &res) {
    long long thing;
    inp.get(thing);
    res = thing;
}

class gen;

std::ostream &operator <<(std::ostream &s, const ivyc_s1::char__kinds &t);
template <>
ivyc_s1::char__kinds _arg<ivyc_s1::char__kinds>(std::vector<ivy_value> &args, unsigned idx, long long bound);
template <>
void  __ser<ivyc_s1::char__kinds>(ivy_ser &res, const ivyc_s1::char__kinds&);
template <>
void  __deser<ivyc_s1::char__kinds>(ivy_deser &inp, ivyc_s1::char__kinds &res);
std::ostream &operator <<(std::ostream &s, const ivyc_s1::cpp__verb &t);
template <>
ivyc_s1::cpp__verb _arg<ivyc_s1::cpp__verb>(std::vector<ivy_value> &args, unsigned idx, long long bound);
template <>
void  __ser<ivyc_s1::cpp__verb>(ivy_ser &res, const ivyc_s1::cpp__verb&);
template <>
void  __deser<ivyc_s1::cpp__verb>(ivy_deser &inp, ivyc_s1::cpp__verb &res);
std::ostream &operator <<(std::ostream &s, const ivyc_s1::ivy__action_kind &t);
template <>
ivyc_s1::ivy__action_kind _arg<ivyc_s1::ivy__action_kind>(std::vector<ivy_value> &args, unsigned idx, long long bound);
template <>
void  __ser<ivyc_s1::ivy__action_kind>(ivy_ser &res, const ivyc_s1::ivy__action_kind&);
template <>
void  __deser<ivyc_s1::ivy__action_kind>(ivy_deser &inp, ivyc_s1::ivy__action_kind &res);
std::ostream &operator <<(std::ostream &s, const ivyc_s1::ivy__verb &t);
template <>
ivyc_s1::ivy__verb _arg<ivyc_s1::ivy__verb>(std::vector<ivy_value> &args, unsigned idx, long long bound);
template <>
void  __ser<ivyc_s1::ivy__verb>(ivy_ser &res, const ivyc_s1::ivy__verb&);
template <>
void  __deser<ivyc_s1::ivy__verb>(ivy_deser &inp, ivyc_s1::ivy__verb &res);
std::ostream &operator <<(std::ostream &s, const ivyc_s1::annot_i &t);
template <>
ivyc_s1::annot_i _arg<ivyc_s1::annot_i>(std::vector<ivy_value> &args, unsigned idx, long long bound);
template <>
void  __ser<ivyc_s1::annot_i>(ivy_ser &res, const ivyc_s1::annot_i&);
template <>
void  __deser<ivyc_s1::annot_i>(ivy_deser &inp, ivyc_s1::annot_i &res);
std::ostream &operator <<(std::ostream &s, const ivyc_s1::cpp__app &t);
template <>
ivyc_s1::cpp__app _arg<ivyc_s1::cpp__app>(std::vector<ivy_value> &args, unsigned idx, long long bound);
template <>
void  __ser<ivyc_s1::cpp__app>(ivy_ser &res, const ivyc_s1::cpp__app&);
template <>
void  __deser<ivyc_s1::cpp__app>(ivy_deser &inp, ivyc_s1::cpp__app &res);
std::ostream &operator <<(std::ostream &s, const ivyc_s1::cpp__asgn &t);
template <>
ivyc_s1::cpp__asgn _arg<ivyc_s1::cpp__asgn>(std::vector<ivy_value> &args, unsigned idx, long long bound);
template <>
void  __ser<ivyc_s1::cpp__asgn>(ivy_ser &res, const ivyc_s1::cpp__asgn&);
template <>
void  __deser<ivyc_s1::cpp__asgn>(ivy_deser &inp, ivyc_s1::cpp__asgn &res);
std::ostream &operator <<(std::ostream &s, const ivyc_s1::cpp__breakst &t);
template <>
ivyc_s1::cpp__breakst _arg<ivyc_s1::cpp__breakst>(std::vector<ivy_value> &args, unsigned idx, long long bound);
template <>
void  __ser<ivyc_s1::cpp__breakst>(ivy_ser &res, const ivyc_s1::cpp__breakst&);
template <>
void  __deser<ivyc_s1::cpp__breakst>(ivy_deser &inp, ivyc_s1::cpp__breakst &res);
std::ostream &operator <<(std::ostream &s, const ivyc_s1::cpp__dotident &t);
template <>
ivyc_s1::cpp__dotident _arg<ivyc_s1::cpp__dotident>(std::vector<ivy_value> &args, unsigned idx, long long bound);
template <>
void  __ser<ivyc_s1::cpp__dotident>(ivy_ser &res, const ivyc_s1::cpp__dotident&);
template <>
void  __deser<ivyc_s1::cpp__dotident>(ivy_deser &inp, ivyc_s1::cpp__dotident &res);
std::ostream &operator <<(std::ostream &s, const ivyc_s1::cpp__enumdecl &t);
template <>
ivyc_s1::cpp__enumdecl _arg<ivyc_s1::cpp__enumdecl>(std::vector<ivy_value> &args, unsigned idx, long long bound);
template <>
void  __ser<ivyc_s1::cpp__enumdecl>(ivy_ser &res, const ivyc_s1::cpp__enumdecl&);
template <>
void  __deser<ivyc_s1::cpp__enumdecl>(ivy_deser &inp, ivyc_s1::cpp__enumdecl &res);
std::ostream &operator <<(std::ostream &s, const ivyc_s1::cpp__funcdecl &t);
template <>
ivyc_s1::cpp__funcdecl _arg<ivyc_s1::cpp__funcdecl>(std::vector<ivy_value> &args, unsigned idx, long long bound);
template <>
void  __ser<ivyc_s1::cpp__funcdecl>(ivy_ser &res, const ivyc_s1::cpp__funcdecl&);
template <>
void  __deser<ivyc_s1::cpp__funcdecl>(ivy_deser &inp, ivyc_s1::cpp__funcdecl &res);
std::ostream &operator <<(std::ostream &s, const ivyc_s1::cpp__functype &t);
template <>
ivyc_s1::cpp__functype _arg<ivyc_s1::cpp__functype>(std::vector<ivy_value> &args, unsigned idx, long long bound);
template <>
void  __ser<ivyc_s1::cpp__functype>(ivy_ser &res, const ivyc_s1::cpp__functype&);
template <>
void  __deser<ivyc_s1::cpp__functype>(ivy_deser &inp, ivyc_s1::cpp__functype &res);
std::ostream &operator <<(std::ostream &s, const ivyc_s1::cpp__groupdc &t);
template <>
ivyc_s1::cpp__groupdc _arg<ivyc_s1::cpp__groupdc>(std::vector<ivy_value> &args, unsigned idx, long long bound);
template <>
void  __ser<ivyc_s1::cpp__groupdc>(ivy_ser &res, const ivyc_s1::cpp__groupdc&);
template <>
void  __deser<ivyc_s1::cpp__groupdc>(ivy_deser &inp, ivyc_s1::cpp__groupdc &res);
std::ostream &operator <<(std::ostream &s, const ivyc_s1::cpp__header &t);
template <>
ivyc_s1::cpp__header _arg<ivyc_s1::cpp__header>(std::vector<ivy_value> &args, unsigned idx, long long bound);
template <>
void  __ser<ivyc_s1::cpp__header>(ivy_ser &res, const ivyc_s1::cpp__header&);
template <>
void  __deser<ivyc_s1::cpp__header>(ivy_deser &inp, ivyc_s1::cpp__header &res);
std::ostream &operator <<(std::ostream &s, const ivyc_s1::cpp__ifst &t);
template <>
ivyc_s1::cpp__ifst _arg<ivyc_s1::cpp__ifst>(std::vector<ivy_value> &args, unsigned idx, long long bound);
template <>
void  __ser<ivyc_s1::cpp__ifst>(ivy_ser &res, const ivyc_s1::cpp__ifst&);
template <>
void  __deser<ivyc_s1::cpp__ifst>(ivy_deser &inp, ivyc_s1::cpp__ifst &res);
std::ostream &operator <<(std::ostream &s, const ivyc_s1::cpp__namespacedecl &t);
template <>
ivyc_s1::cpp__namespacedecl _arg<ivyc_s1::cpp__namespacedecl>(std::vector<ivy_value> &args, unsigned idx, long long bound);
template <>
void  __ser<ivyc_s1::cpp__namespacedecl>(ivy_ser &res, const ivyc_s1::cpp__namespacedecl&);
template <>
void  __deser<ivyc_s1::cpp__namespacedecl>(ivy_deser &inp, ivyc_s1::cpp__namespacedecl &res);
std::ostream &operator <<(std::ostream &s, const ivyc_s1::cpp__numident &t);
template <>
ivyc_s1::cpp__numident _arg<ivyc_s1::cpp__numident>(std::vector<ivy_value> &args, unsigned idx, long long bound);
template <>
void  __ser<ivyc_s1::cpp__numident>(ivy_ser &res, const ivyc_s1::cpp__numident&);
template <>
void  __deser<ivyc_s1::cpp__numident>(ivy_deser &inp, ivyc_s1::cpp__numident &res);
std::ostream &operator <<(std::ostream &s, const ivyc_s1::cpp__pi &t);
template <>
ivyc_s1::cpp__pi _arg<ivyc_s1::cpp__pi>(std::vector<ivy_value> &args, unsigned idx, long long bound);
template <>
void  __ser<ivyc_s1::cpp__pi>(ivy_ser &res, const ivyc_s1::cpp__pi&);
template <>
void  __deser<ivyc_s1::cpp__pi>(ivy_deser &inp, ivyc_s1::cpp__pi &res);
std::ostream &operator <<(std::ostream &s, const ivyc_s1::cpp__prog &t);
template <>
ivyc_s1::cpp__prog _arg<ivyc_s1::cpp__prog>(std::vector<ivy_value> &args, unsigned idx, long long bound);
template <>
void  __ser<ivyc_s1::cpp__prog>(ivy_ser &res, const ivyc_s1::cpp__prog&);
template <>
void  __deser<ivyc_s1::cpp__prog>(ivy_deser &inp, ivyc_s1::cpp__prog &res);
std::ostream &operator <<(std::ostream &s, const ivyc_s1::cpp__retst &t);
template <>
ivyc_s1::cpp__retst _arg<ivyc_s1::cpp__retst>(std::vector<ivy_value> &args, unsigned idx, long long bound);
template <>
void  __ser<ivyc_s1::cpp__retst>(ivy_ser &res, const ivyc_s1::cpp__retst&);
template <>
void  __deser<ivyc_s1::cpp__retst>(ivy_deser &inp, ivyc_s1::cpp__retst &res);
std::ostream &operator <<(std::ostream &s, const ivyc_s1::cpp__sequence &t);
template <>
ivyc_s1::cpp__sequence _arg<ivyc_s1::cpp__sequence>(std::vector<ivy_value> &args, unsigned idx, long long bound);
template <>
void  __ser<ivyc_s1::cpp__sequence>(ivy_ser &res, const ivyc_s1::cpp__sequence&);
template <>
void  __deser<ivyc_s1::cpp__sequence>(ivy_deser &inp, ivyc_s1::cpp__sequence &res);
std::ostream &operator <<(std::ostream &s, const ivyc_s1::cpp__simpletype &t);
template <>
ivyc_s1::cpp__simpletype _arg<ivyc_s1::cpp__simpletype>(std::vector<ivy_value> &args, unsigned idx, long long bound);
template <>
void  __ser<ivyc_s1::cpp__simpletype>(ivy_ser &res, const ivyc_s1::cpp__simpletype&);
template <>
void  __deser<ivyc_s1::cpp__simpletype>(ivy_deser &inp, ivyc_s1::cpp__simpletype &res);
std::ostream &operator <<(std::ostream &s, const ivyc_s1::cpp__skipst &t);
template <>
ivyc_s1::cpp__skipst _arg<ivyc_s1::cpp__skipst>(std::vector<ivy_value> &args, unsigned idx, long long bound);
template <>
void  __ser<ivyc_s1::cpp__skipst>(ivy_ser &res, const ivyc_s1::cpp__skipst&);
template <>
void  __deser<ivyc_s1::cpp__skipst>(ivy_deser &inp, ivyc_s1::cpp__skipst &res);
std::ostream &operator <<(std::ostream &s, const ivyc_s1::cpp__strident &t);
template <>
ivyc_s1::cpp__strident _arg<ivyc_s1::cpp__strident>(std::vector<ivy_value> &args, unsigned idx, long long bound);
template <>
void  __ser<ivyc_s1::cpp__strident>(ivy_ser &res, const ivyc_s1::cpp__strident&);
template <>
void  __deser<ivyc_s1::cpp__strident>(ivy_deser &inp, ivyc_s1::cpp__strident &res);
std::ostream &operator <<(std::ostream &s, const ivyc_s1::cpp__structdecl &t);
template <>
ivyc_s1::cpp__structdecl _arg<ivyc_s1::cpp__structdecl>(std::vector<ivy_value> &args, unsigned idx, long long bound);
template <>
void  __ser<ivyc_s1::cpp__structdecl>(ivy_ser &res, const ivyc_s1::cpp__structdecl&);
template <>
void  __deser<ivyc_s1::cpp__structdecl>(ivy_deser &inp, ivyc_s1::cpp__structdecl &res);
std::ostream &operator <<(std::ostream &s, const ivyc_s1::cpp__symbol &t);
template <>
ivyc_s1::cpp__symbol _arg<ivyc_s1::cpp__symbol>(std::vector<ivy_value> &args, unsigned idx, long long bound);
template <>
void  __ser<ivyc_s1::cpp__symbol>(ivy_ser &res, const ivyc_s1::cpp__symbol&);
template <>
void  __deser<ivyc_s1::cpp__symbol>(ivy_deser &inp, ivyc_s1::cpp__symbol &res);
std::ostream &operator <<(std::ostream &s, const ivyc_s1::cpp__typedecl &t);
template <>
ivyc_s1::cpp__typedecl _arg<ivyc_s1::cpp__typedecl>(std::vector<ivy_value> &args, unsigned idx, long long bound);
template <>
void  __ser<ivyc_s1::cpp__typedecl>(ivy_ser &res, const ivyc_s1::cpp__typedecl&);
template <>
void  __deser<ivyc_s1::cpp__typedecl>(ivy_deser &inp, ivyc_s1::cpp__typedecl &res);
std::ostream &operator <<(std::ostream &s, const ivyc_s1::cpp__vardecl &t);
template <>
ivyc_s1::cpp__vardecl _arg<ivyc_s1::cpp__vardecl>(std::vector<ivy_value> &args, unsigned idx, long long bound);
template <>
void  __ser<ivyc_s1::cpp__vardecl>(ivy_ser &res, const ivyc_s1::cpp__vardecl&);
template <>
void  __deser<ivyc_s1::cpp__vardecl>(ivy_deser &inp, ivyc_s1::cpp__vardecl &res);
std::ostream &operator <<(std::ostream &s, const ivyc_s1::cpp__variable &t);
template <>
ivyc_s1::cpp__variable _arg<ivyc_s1::cpp__variable>(std::vector<ivy_value> &args, unsigned idx, long long bound);
template <>
void  __ser<ivyc_s1::cpp__variable>(ivy_ser &res, const ivyc_s1::cpp__variable&);
template <>
void  __deser<ivyc_s1::cpp__variable>(ivy_deser &inp, ivyc_s1::cpp__variable &res);
std::ostream &operator <<(std::ostream &s, const ivyc_s1::cpp__varst &t);
template <>
ivyc_s1::cpp__varst _arg<ivyc_s1::cpp__varst>(std::vector<ivy_value> &args, unsigned idx, long long bound);
template <>
void  __ser<ivyc_s1::cpp__varst>(ivy_ser &res, const ivyc_s1::cpp__varst&);
template <>
void  __deser<ivyc_s1::cpp__varst>(ivy_deser &inp, ivyc_s1::cpp__varst &res);
std::ostream &operator <<(std::ostream &s, const ivyc_s1::cpp__version &t);
template <>
ivyc_s1::cpp__version _arg<ivyc_s1::cpp__version>(std::vector<ivy_value> &args, unsigned idx, long long bound);
template <>
void  __ser<ivyc_s1::cpp__version>(ivy_ser &res, const ivyc_s1::cpp__version&);
template <>
void  __deser<ivyc_s1::cpp__version>(ivy_deser &inp, ivyc_s1::cpp__version &res);
std::ostream &operator <<(std::ostream &s, const ivyc_s1::cpp__whilest &t);
template <>
ivyc_s1::cpp__whilest _arg<ivyc_s1::cpp__whilest>(std::vector<ivy_value> &args, unsigned idx, long long bound);
template <>
void  __ser<ivyc_s1::cpp__whilest>(ivy_ser &res, const ivyc_s1::cpp__whilest&);
template <>
void  __deser<ivyc_s1::cpp__whilest>(ivy_deser &inp, ivyc_s1::cpp__whilest &res);
std::ostream &operator <<(std::ostream &s, const ivyc_s1::ivy__access_path &t);
template <>
ivyc_s1::ivy__access_path _arg<ivyc_s1::ivy__access_path>(std::vector<ivy_value> &args, unsigned idx, long long bound);
template <>
void  __ser<ivyc_s1::ivy__access_path>(ivy_ser &res, const ivyc_s1::ivy__access_path&);
template <>
void  __deser<ivyc_s1::ivy__access_path>(ivy_deser &inp, ivyc_s1::ivy__access_path &res);
std::ostream &operator <<(std::ostream &s, const ivyc_s1::ivy__actdc &t);
template <>
ivyc_s1::ivy__actdc _arg<ivyc_s1::ivy__actdc>(std::vector<ivy_value> &args, unsigned idx, long long bound);
template <>
void  __ser<ivyc_s1::ivy__actdc>(ivy_ser &res, const ivyc_s1::ivy__actdc&);
template <>
void  __deser<ivyc_s1::ivy__actdc>(ivy_deser &inp, ivyc_s1::ivy__actdc &res);
std::ostream &operator <<(std::ostream &s, const ivyc_s1::ivy__app &t);
template <>
ivyc_s1::ivy__app _arg<ivyc_s1::ivy__app>(std::vector<ivy_value> &args, unsigned idx, long long bound);
template <>
void  __ser<ivyc_s1::ivy__app>(ivy_ser &res, const ivyc_s1::ivy__app&);
template <>
void  __deser<ivyc_s1::ivy__app>(ivy_deser &inp, ivyc_s1::ivy__app &res);
std::ostream &operator <<(std::ostream &s, const ivyc_s1::ivy__asgn &t);
template <>
ivyc_s1::ivy__asgn _arg<ivyc_s1::ivy__asgn>(std::vector<ivy_value> &args, unsigned idx, long long bound);
template <>
void  __ser<ivyc_s1::ivy__asgn>(ivy_ser &res, const ivyc_s1::ivy__asgn&);
template <>
void  __deser<ivyc_s1::ivy__asgn>(ivy_deser &inp, ivyc_s1::ivy__asgn &res);
std::ostream &operator <<(std::ostream &s, const ivyc_s1::ivy__breakst &t);
template <>
ivyc_s1::ivy__breakst _arg<ivyc_s1::ivy__breakst>(std::vector<ivy_value> &args, unsigned idx, long long bound);
template <>
void  __ser<ivyc_s1::ivy__breakst>(ivy_ser &res, const ivyc_s1::ivy__breakst&);
template <>
void  __deser<ivyc_s1::ivy__breakst>(ivy_deser &inp, ivyc_s1::ivy__breakst &res);
std::ostream &operator <<(std::ostream &s, const ivyc_s1::ivy__cannot_write &t);
template <>
ivyc_s1::ivy__cannot_write _arg<ivyc_s1::ivy__cannot_write>(std::vector<ivy_value> &args, unsigned idx, long long bound);
template <>
void  __ser<ivyc_s1::ivy__cannot_write>(ivy_ser &res, const ivyc_s1::ivy__cannot_write&);
template <>
void  __deser<ivyc_s1::ivy__cannot_write>(ivy_deser &inp, ivyc_s1::ivy__cannot_write &res);
std::ostream &operator <<(std::ostream &s, const ivyc_s1::ivy__decost &t);
template <>
ivyc_s1::ivy__decost _arg<ivyc_s1::ivy__decost>(std::vector<ivy_value> &args, unsigned idx, long long bound);
template <>
void  __ser<ivyc_s1::ivy__decost>(ivy_ser &res, const ivyc_s1::ivy__decost&);
template <>
void  __deser<ivyc_s1::ivy__decost>(ivy_deser &inp, ivyc_s1::ivy__decost &res);
std::ostream &operator <<(std::ostream &s, const ivyc_s1::ivy__dotident &t);
template <>
ivyc_s1::ivy__dotident _arg<ivyc_s1::ivy__dotident>(std::vector<ivy_value> &args, unsigned idx, long long bound);
template <>
void  __ser<ivyc_s1::ivy__dotident>(ivy_ser &res, const ivyc_s1::ivy__dotident&);
template <>
void  __deser<ivyc_s1::ivy__dotident>(ivy_deser &inp, ivyc_s1::ivy__dotident &res);
std::ostream &operator <<(std::ostream &s, const ivyc_s1::ivy__elidest &t);
template <>
ivyc_s1::ivy__elidest _arg<ivyc_s1::ivy__elidest>(std::vector<ivy_value> &args, unsigned idx, long long bound);
template <>
void  __ser<ivyc_s1::ivy__elidest>(ivy_ser &res, const ivyc_s1::ivy__elidest&);
template <>
void  __deser<ivyc_s1::ivy__elidest>(ivy_deser &inp, ivyc_s1::ivy__elidest &res);
std::ostream &operator <<(std::ostream &s, const ivyc_s1::ivy__enumspec &t);
template <>
ivyc_s1::ivy__enumspec _arg<ivyc_s1::ivy__enumspec>(std::vector<ivy_value> &args, unsigned idx, long long bound);
template <>
void  __ser<ivyc_s1::ivy__enumspec>(ivy_ser &res, const ivyc_s1::ivy__enumspec&);
template <>
void  __deser<ivyc_s1::ivy__enumspec>(ivy_deser &inp, ivyc_s1::ivy__enumspec &res);
std::ostream &operator <<(std::ostream &s, const ivyc_s1::ivy__file_not_found &t);
template <>
ivyc_s1::ivy__file_not_found _arg<ivyc_s1::ivy__file_not_found>(std::vector<ivy_value> &args, unsigned idx, long long bound);
template <>
void  __ser<ivyc_s1::ivy__file_not_found>(ivy_ser &res, const ivyc_s1::ivy__file_not_found&);
template <>
void  __deser<ivyc_s1::ivy__file_not_found>(ivy_deser &inp, ivyc_s1::ivy__file_not_found &res);
std::ostream &operator <<(std::ostream &s, const ivyc_s1::ivy__flatst &t);
template <>
ivyc_s1::ivy__flatst _arg<ivyc_s1::ivy__flatst>(std::vector<ivy_value> &args, unsigned idx, long long bound);
template <>
void  __ser<ivyc_s1::ivy__flatst>(ivy_ser &res, const ivyc_s1::ivy__flatst&);
template <>
void  __deser<ivyc_s1::ivy__flatst>(ivy_deser &inp, ivyc_s1::ivy__flatst &res);
std::ostream &operator <<(std::ostream &s, const ivyc_s1::ivy__global_types &t);
template <>
ivyc_s1::ivy__global_types _arg<ivyc_s1::ivy__global_types>(std::vector<ivy_value> &args, unsigned idx, long long bound);
template <>
void  __ser<ivyc_s1::ivy__global_types>(ivy_ser &res, const ivyc_s1::ivy__global_types&);
template <>
void  __deser<ivyc_s1::ivy__global_types>(ivy_deser &inp, ivyc_s1::ivy__global_types &res);
std::ostream &operator <<(std::ostream &s, const ivyc_s1::ivy__groupdc &t);
template <>
ivyc_s1::ivy__groupdc _arg<ivyc_s1::ivy__groupdc>(std::vector<ivy_value> &args, unsigned idx, long long bound);
template <>
void  __ser<ivyc_s1::ivy__groupdc>(ivy_ser &res, const ivyc_s1::ivy__groupdc&);
template <>
void  __deser<ivyc_s1::ivy__groupdc>(ivy_deser &inp, ivyc_s1::ivy__groupdc &res);
std::ostream &operator <<(std::ostream &s, const ivyc_s1::ivy__header &t);
template <>
ivyc_s1::ivy__header _arg<ivyc_s1::ivy__header>(std::vector<ivy_value> &args, unsigned idx, long long bound);
template <>
void  __ser<ivyc_s1::ivy__header>(ivy_ser &res, const ivyc_s1::ivy__header&);
template <>
void  __deser<ivyc_s1::ivy__header>(ivy_deser &inp, ivyc_s1::ivy__header &res);
std::ostream &operator <<(std::ostream &s, const ivyc_s1::ivy__ifst &t);
template <>
ivyc_s1::ivy__ifst _arg<ivyc_s1::ivy__ifst>(std::vector<ivy_value> &args, unsigned idx, long long bound);
template <>
void  __ser<ivyc_s1::ivy__ifst>(ivy_ser &res, const ivyc_s1::ivy__ifst&);
template <>
void  __deser<ivyc_s1::ivy__ifst>(ivy_deser &inp, ivyc_s1::ivy__ifst &res);
std::ostream &operator <<(std::ostream &s, const ivyc_s1::ivy__includedc &t);
template <>
ivyc_s1::ivy__includedc _arg<ivyc_s1::ivy__includedc>(std::vector<ivy_value> &args, unsigned idx, long long bound);
template <>
void  __ser<ivyc_s1::ivy__includedc>(ivy_ser &res, const ivyc_s1::ivy__includedc&);
template <>
void  __deser<ivyc_s1::ivy__includedc>(ivy_deser &inp, ivyc_s1::ivy__includedc &res);
std::ostream &operator <<(std::ostream &s, const ivyc_s1::ivy__initdc &t);
template <>
ivyc_s1::ivy__initdc _arg<ivyc_s1::ivy__initdc>(std::vector<ivy_value> &args, unsigned idx, long long bound);
template <>
void  __ser<ivyc_s1::ivy__initdc>(ivy_ser &res, const ivyc_s1::ivy__initdc&);
template <>
void  __deser<ivyc_s1::ivy__initdc>(ivy_deser &inp, ivyc_s1::ivy__initdc &res);
std::ostream &operator <<(std::ostream &s, const ivyc_s1::ivy__instancedc &t);
template <>
ivyc_s1::ivy__instancedc _arg<ivyc_s1::ivy__instancedc>(std::vector<ivy_value> &args, unsigned idx, long long bound);
template <>
void  __ser<ivyc_s1::ivy__instancedc>(ivy_ser &res, const ivyc_s1::ivy__instancedc&);
template <>
void  __deser<ivyc_s1::ivy__instancedc>(ivy_deser &inp, ivyc_s1::ivy__instancedc &res);
std::ostream &operator <<(std::ostream &s, const ivyc_s1::ivy__instantiatedc &t);
template <>
ivyc_s1::ivy__instantiatedc _arg<ivyc_s1::ivy__instantiatedc>(std::vector<ivy_value> &args, unsigned idx, long long bound);
template <>
void  __ser<ivyc_s1::ivy__instantiatedc>(ivy_ser &res, const ivyc_s1::ivy__instantiatedc&);
template <>
void  __deser<ivyc_s1::ivy__instantiatedc>(ivy_deser &inp, ivyc_s1::ivy__instantiatedc &res);
std::ostream &operator <<(std::ostream &s, const ivyc_s1::ivy__interpdc &t);
template <>
ivyc_s1::ivy__interpdc _arg<ivyc_s1::ivy__interpdc>(std::vector<ivy_value> &args, unsigned idx, long long bound);
template <>
void  __ser<ivyc_s1::ivy__interpdc>(ivy_ser &res, const ivyc_s1::ivy__interpdc&);
template <>
void  __deser<ivyc_s1::ivy__interpdc>(ivy_deser &inp, ivyc_s1::ivy__interpdc &res);
std::ostream &operator <<(std::ostream &s, const ivyc_s1::ivy__local_tracker &t);
template <>
ivyc_s1::ivy__local_tracker _arg<ivyc_s1::ivy__local_tracker>(std::vector<ivy_value> &args, unsigned idx, long long bound);
template <>
void  __ser<ivyc_s1::ivy__local_tracker>(ivy_ser &res, const ivyc_s1::ivy__local_tracker&);
template <>
void  __deser<ivyc_s1::ivy__local_tracker>(ivy_deser &inp, ivyc_s1::ivy__local_tracker &res);
std::ostream &operator <<(std::ostream &s, const ivyc_s1::ivy__lvalue_count &t);
template <>
ivyc_s1::ivy__lvalue_count _arg<ivyc_s1::ivy__lvalue_count>(std::vector<ivy_value> &args, unsigned idx, long long bound);
template <>
void  __ser<ivyc_s1::ivy__lvalue_count>(ivy_ser &res, const ivyc_s1::ivy__lvalue_count&);
template <>
void  __deser<ivyc_s1::ivy__lvalue_count>(ivy_deser &inp, ivyc_s1::ivy__lvalue_count &res);
std::ostream &operator <<(std::ostream &s, const ivyc_s1::ivy__moduledc &t);
template <>
ivyc_s1::ivy__moduledc _arg<ivyc_s1::ivy__moduledc>(std::vector<ivy_value> &args, unsigned idx, long long bound);
template <>
void  __ser<ivyc_s1::ivy__moduledc>(ivy_ser &res, const ivyc_s1::ivy__moduledc&);
template <>
void  __deser<ivyc_s1::ivy__moduledc>(ivy_deser &inp, ivyc_s1::ivy__moduledc &res);
std::ostream &operator <<(std::ostream &s, const ivyc_s1::ivy__not_first_order &t);
template <>
ivyc_s1::ivy__not_first_order _arg<ivyc_s1::ivy__not_first_order>(std::vector<ivy_value> &args, unsigned idx, long long bound);
template <>
void  __ser<ivyc_s1::ivy__not_first_order>(ivy_ser &res, const ivyc_s1::ivy__not_first_order&);
template <>
void  __deser<ivyc_s1::ivy__not_first_order>(ivy_deser &inp, ivyc_s1::ivy__not_first_order &res);
std::ostream &operator <<(std::ostream &s, const ivyc_s1::ivy__numident &t);
template <>
ivyc_s1::ivy__numident _arg<ivyc_s1::ivy__numident>(std::vector<ivy_value> &args, unsigned idx, long long bound);
template <>
void  __ser<ivyc_s1::ivy__numident>(ivy_ser &res, const ivyc_s1::ivy__numident&);
template <>
void  __deser<ivyc_s1::ivy__numident>(ivy_deser &inp, ivyc_s1::ivy__numident &res);
std::ostream &operator <<(std::ostream &s, const ivyc_s1::ivy__objectdc &t);
template <>
ivyc_s1::ivy__objectdc _arg<ivyc_s1::ivy__objectdc>(std::vector<ivy_value> &args, unsigned idx, long long bound);
template <>
void  __ser<ivyc_s1::ivy__objectdc>(ivy_ser &res, const ivyc_s1::ivy__objectdc&);
template <>
void  __deser<ivyc_s1::ivy__objectdc>(ivy_deser &inp, ivyc_s1::ivy__objectdc &res);
std::ostream &operator <<(std::ostream &s, const ivyc_s1::ivy__pi &t);
template <>
ivyc_s1::ivy__pi _arg<ivyc_s1::ivy__pi>(std::vector<ivy_value> &args, unsigned idx, long long bound);
template <>
void  __ser<ivyc_s1::ivy__pi>(ivy_ser &res, const ivyc_s1::ivy__pi&);
template <>
void  __deser<ivyc_s1::ivy__pi>(ivy_deser &inp, ivyc_s1::ivy__pi &res);
std::ostream &operator <<(std::ostream &s, const ivyc_s1::ivy__prog &t);
template <>
ivyc_s1::ivy__prog _arg<ivyc_s1::ivy__prog>(std::vector<ivy_value> &args, unsigned idx, long long bound);
template <>
void  __ser<ivyc_s1::ivy__prog>(ivy_ser &res, const ivyc_s1::ivy__prog&);
template <>
void  __deser<ivyc_s1::ivy__prog>(ivy_deser &inp, ivyc_s1::ivy__prog &res);
std::ostream &operator <<(std::ostream &s, const ivyc_s1::ivy__prog__readst &t);
template <>
ivyc_s1::ivy__prog__readst _arg<ivyc_s1::ivy__prog__readst>(std::vector<ivy_value> &args, unsigned idx, long long bound);
template <>
void  __ser<ivyc_s1::ivy__prog__readst>(ivy_ser &res, const ivyc_s1::ivy__prog__readst&);
template <>
void  __deser<ivyc_s1::ivy__prog__readst>(ivy_deser &inp, ivyc_s1::ivy__prog__readst &res);
std::ostream &operator <<(std::ostream &s, const ivyc_s1::ivy__prototype &t);
template <>
ivyc_s1::ivy__prototype _arg<ivyc_s1::ivy__prototype>(std::vector<ivy_value> &args, unsigned idx, long long bound);
template <>
void  __ser<ivyc_s1::ivy__prototype>(ivy_ser &res, const ivyc_s1::ivy__prototype&);
template <>
void  __deser<ivyc_s1::ivy__prototype>(ivy_deser &inp, ivyc_s1::ivy__prototype &res);
std::ostream &operator <<(std::ostream &s, const ivyc_s1::ivy__prototype_argument &t);
template <>
ivyc_s1::ivy__prototype_argument _arg<ivyc_s1::ivy__prototype_argument>(std::vector<ivy_value> &args, unsigned idx, long long bound);
template <>
void  __ser<ivyc_s1::ivy__prototype_argument>(ivy_ser &res, const ivyc_s1::ivy__prototype_argument&);
template <>
void  __deser<ivyc_s1::ivy__prototype_argument>(ivy_deser &inp, ivyc_s1::ivy__prototype_argument &res);
std::ostream &operator <<(std::ostream &s, const ivyc_s1::ivy__push_pop_ident_set &t);
template <>
ivyc_s1::ivy__push_pop_ident_set _arg<ivyc_s1::ivy__push_pop_ident_set>(std::vector<ivy_value> &args, unsigned idx, long long bound);
template <>
void  __ser<ivyc_s1::ivy__push_pop_ident_set>(ivy_ser &res, const ivyc_s1::ivy__push_pop_ident_set&);
template <>
void  __deser<ivyc_s1::ivy__push_pop_ident_set>(ivy_deser &inp, ivyc_s1::ivy__push_pop_ident_set &res);
std::ostream &operator <<(std::ostream &s, const ivyc_s1::ivy__sequence &t);
template <>
ivyc_s1::ivy__sequence _arg<ivyc_s1::ivy__sequence>(std::vector<ivy_value> &args, unsigned idx, long long bound);
template <>
void  __ser<ivyc_s1::ivy__sequence>(ivy_ser &res, const ivyc_s1::ivy__sequence&);
template <>
void  __deser<ivyc_s1::ivy__sequence>(ivy_deser &inp, ivyc_s1::ivy__sequence &res);
std::ostream &operator <<(std::ostream &s, const ivyc_s1::ivy__skipst &t);
template <>
ivyc_s1::ivy__skipst _arg<ivyc_s1::ivy__skipst>(std::vector<ivy_value> &args, unsigned idx, long long bound);
template <>
void  __ser<ivyc_s1::ivy__skipst>(ivy_ser &res, const ivyc_s1::ivy__skipst&);
template <>
void  __deser<ivyc_s1::ivy__skipst>(ivy_deser &inp, ivyc_s1::ivy__skipst &res);
std::ostream &operator <<(std::ostream &s, const ivyc_s1::ivy__strident &t);
template <>
ivyc_s1::ivy__strident _arg<ivyc_s1::ivy__strident>(std::vector<ivy_value> &args, unsigned idx, long long bound);
template <>
void  __ser<ivyc_s1::ivy__strident>(ivy_ser &res, const ivyc_s1::ivy__strident&);
template <>
void  __deser<ivyc_s1::ivy__strident>(ivy_deser &inp, ivyc_s1::ivy__strident &res);
std::ostream &operator <<(std::ostream &s, const ivyc_s1::ivy__structspec &t);
template <>
ivyc_s1::ivy__structspec _arg<ivyc_s1::ivy__structspec>(std::vector<ivy_value> &args, unsigned idx, long long bound);
template <>
void  __ser<ivyc_s1::ivy__structspec>(ivy_ser &res, const ivyc_s1::ivy__structspec&);
template <>
void  __deser<ivyc_s1::ivy__structspec>(ivy_deser &inp, ivyc_s1::ivy__structspec &res);
std::ostream &operator <<(std::ostream &s, const ivyc_s1::ivy__subtypes &t);
template <>
ivyc_s1::ivy__subtypes _arg<ivyc_s1::ivy__subtypes>(std::vector<ivy_value> &args, unsigned idx, long long bound);
template <>
void  __ser<ivyc_s1::ivy__subtypes>(ivy_ser &res, const ivyc_s1::ivy__subtypes&);
template <>
void  __deser<ivyc_s1::ivy__subtypes>(ivy_deser &inp, ivyc_s1::ivy__subtypes &res);
std::ostream &operator <<(std::ostream &s, const ivyc_s1::ivy__symbol &t);
template <>
ivyc_s1::ivy__symbol _arg<ivyc_s1::ivy__symbol>(std::vector<ivy_value> &args, unsigned idx, long long bound);
template <>
void  __ser<ivyc_s1::ivy__symbol>(ivy_ser &res, const ivyc_s1::ivy__symbol&);
template <>
void  __deser<ivyc_s1::ivy__symbol>(ivy_deser &inp, ivyc_s1::ivy__symbol &res);
std::ostream &operator <<(std::ostream &s, const ivyc_s1::ivy__syntax_error &t);
template <>
ivyc_s1::ivy__syntax_error _arg<ivyc_s1::ivy__syntax_error>(std::vector<ivy_value> &args, unsigned idx, long long bound);
template <>
void  __ser<ivyc_s1::ivy__syntax_error>(ivy_ser &res, const ivyc_s1::ivy__syntax_error&);
template <>
void  __deser<ivyc_s1::ivy__syntax_error>(ivy_deser &inp, ivyc_s1::ivy__syntax_error &res);
std::ostream &operator <<(std::ostream &s, const ivyc_s1::ivy__tocppst &t);
template <>
ivyc_s1::ivy__tocppst _arg<ivyc_s1::ivy__tocppst>(std::vector<ivy_value> &args, unsigned idx, long long bound);
template <>
void  __ser<ivyc_s1::ivy__tocppst>(ivy_ser &res, const ivyc_s1::ivy__tocppst&);
template <>
void  __deser<ivyc_s1::ivy__tocppst>(ivy_deser &inp, ivyc_s1::ivy__tocppst &res);
std::ostream &operator <<(std::ostream &s, const ivyc_s1::ivy__type_clash &t);
template <>
ivyc_s1::ivy__type_clash _arg<ivyc_s1::ivy__type_clash>(std::vector<ivy_value> &args, unsigned idx, long long bound);
template <>
void  __ser<ivyc_s1::ivy__type_clash>(ivy_ser &res, const ivyc_s1::ivy__type_clash&);
template <>
void  __deser<ivyc_s1::ivy__type_clash>(ivy_deser &inp, ivyc_s1::ivy__type_clash &res);
std::ostream &operator <<(std::ostream &s, const ivyc_s1::ivy__type_context &t);
template <>
ivyc_s1::ivy__type_context _arg<ivyc_s1::ivy__type_context>(std::vector<ivy_value> &args, unsigned idx, long long bound);
template <>
void  __ser<ivyc_s1::ivy__type_context>(ivy_ser &res, const ivyc_s1::ivy__type_context&);
template <>
void  __deser<ivyc_s1::ivy__type_context>(ivy_deser &inp, ivyc_s1::ivy__type_context &res);
std::ostream &operator <<(std::ostream &s, const ivyc_s1::ivy__type_context__stack_entry &t);
template <>
ivyc_s1::ivy__type_context__stack_entry _arg<ivyc_s1::ivy__type_context__stack_entry>(std::vector<ivy_value> &args, unsigned idx, long long bound);
template <>
void  __ser<ivyc_s1::ivy__type_context__stack_entry>(ivy_ser &res, const ivyc_s1::ivy__type_context__stack_entry&);
template <>
void  __deser<ivyc_s1::ivy__type_context__stack_entry>(ivy_deser &inp, ivyc_s1::ivy__type_context__stack_entry &res);
std::ostream &operator <<(std::ostream &s, const ivyc_s1::ivy__type_conversion &t);
template <>
ivyc_s1::ivy__type_conversion _arg<ivyc_s1::ivy__type_conversion>(std::vector<ivy_value> &args, unsigned idx, long long bound);
template <>
void  __ser<ivyc_s1::ivy__type_conversion>(ivy_ser &res, const ivyc_s1::ivy__type_conversion&);
template <>
void  __deser<ivyc_s1::ivy__type_conversion>(ivy_deser &inp, ivyc_s1::ivy__type_conversion &res);
std::ostream &operator <<(std::ostream &s, const ivyc_s1::ivy__typedc &t);
template <>
ivyc_s1::ivy__typedc _arg<ivyc_s1::ivy__typedc>(std::vector<ivy_value> &args, unsigned idx, long long bound);
template <>
void  __ser<ivyc_s1::ivy__typedc>(ivy_ser &res, const ivyc_s1::ivy__typedc&);
template <>
void  __deser<ivyc_s1::ivy__typedc>(ivy_deser &inp, ivyc_s1::ivy__typedc &res);
std::ostream &operator <<(std::ostream &s, const ivyc_s1::ivy__typeinferst &t);
template <>
ivyc_s1::ivy__typeinferst _arg<ivyc_s1::ivy__typeinferst>(std::vector<ivy_value> &args, unsigned idx, long long bound);
template <>
void  __ser<ivyc_s1::ivy__typeinferst>(ivy_ser &res, const ivyc_s1::ivy__typeinferst&);
template <>
void  __deser<ivyc_s1::ivy__typeinferst>(ivy_deser &inp, ivyc_s1::ivy__typeinferst &res);
std::ostream &operator <<(std::ostream &s, const ivyc_s1::ivy__undefined &t);
template <>
ivyc_s1::ivy__undefined _arg<ivyc_s1::ivy__undefined>(std::vector<ivy_value> &args, unsigned idx, long long bound);
template <>
void  __ser<ivyc_s1::ivy__undefined>(ivy_ser &res, const ivyc_s1::ivy__undefined&);
template <>
void  __deser<ivyc_s1::ivy__undefined>(ivy_deser &inp, ivyc_s1::ivy__undefined &res);
std::ostream &operator <<(std::ostream &s, const ivyc_s1::ivy__untyped &t);
template <>
ivyc_s1::ivy__untyped _arg<ivyc_s1::ivy__untyped>(std::vector<ivy_value> &args, unsigned idx, long long bound);
template <>
void  __ser<ivyc_s1::ivy__untyped>(ivy_ser &res, const ivyc_s1::ivy__untyped&);
template <>
void  __deser<ivyc_s1::ivy__untyped>(ivy_deser &inp, ivyc_s1::ivy__untyped &res);
std::ostream &operator <<(std::ostream &s, const ivyc_s1::ivy__vardc &t);
template <>
ivyc_s1::ivy__vardc _arg<ivyc_s1::ivy__vardc>(std::vector<ivy_value> &args, unsigned idx, long long bound);
template <>
void  __ser<ivyc_s1::ivy__vardc>(ivy_ser &res, const ivyc_s1::ivy__vardc&);
template <>
void  __deser<ivyc_s1::ivy__vardc>(ivy_deser &inp, ivyc_s1::ivy__vardc &res);
std::ostream &operator <<(std::ostream &s, const ivyc_s1::ivy__variable &t);
template <>
ivyc_s1::ivy__variable _arg<ivyc_s1::ivy__variable>(std::vector<ivy_value> &args, unsigned idx, long long bound);
template <>
void  __ser<ivyc_s1::ivy__variable>(ivy_ser &res, const ivyc_s1::ivy__variable&);
template <>
void  __deser<ivyc_s1::ivy__variable>(ivy_deser &inp, ivyc_s1::ivy__variable &res);
std::ostream &operator <<(std::ostream &s, const ivyc_s1::ivy__varst &t);
template <>
ivyc_s1::ivy__varst _arg<ivyc_s1::ivy__varst>(std::vector<ivy_value> &args, unsigned idx, long long bound);
template <>
void  __ser<ivyc_s1::ivy__varst>(ivy_ser &res, const ivyc_s1::ivy__varst&);
template <>
void  __deser<ivyc_s1::ivy__varst>(ivy_deser &inp, ivyc_s1::ivy__varst &res);
std::ostream &operator <<(std::ostream &s, const ivyc_s1::ivy__version &t);
template <>
ivyc_s1::ivy__version _arg<ivyc_s1::ivy__version>(std::vector<ivy_value> &args, unsigned idx, long long bound);
template <>
void  __ser<ivyc_s1::ivy__version>(ivy_ser &res, const ivyc_s1::ivy__version&);
template <>
void  __deser<ivyc_s1::ivy__version>(ivy_deser &inp, ivyc_s1::ivy__version &res);
std::ostream &operator <<(std::ostream &s, const ivyc_s1::ivy__whilest &t);
template <>
ivyc_s1::ivy__whilest _arg<ivyc_s1::ivy__whilest>(std::vector<ivy_value> &args, unsigned idx, long long bound);
template <>
void  __ser<ivyc_s1::ivy__whilest>(ivy_ser &res, const ivyc_s1::ivy__whilest&);
template <>
void  __deser<ivyc_s1::ivy__whilest>(ivy_deser &inp, ivyc_s1::ivy__whilest &res);
std::ostream &operator <<(std::ostream &s, const ivyc_s1::ivy__wrong_number_params &t);
template <>
ivyc_s1::ivy__wrong_number_params _arg<ivyc_s1::ivy__wrong_number_params>(std::vector<ivy_value> &args, unsigned idx, long long bound);
template <>
void  __ser<ivyc_s1::ivy__wrong_number_params>(ivy_ser &res, const ivyc_s1::ivy__wrong_number_params&);
template <>
void  __deser<ivyc_s1::ivy__wrong_number_params>(ivy_deser &inp, ivyc_s1::ivy__wrong_number_params &res);
std::ostream &operator <<(std::ostream &s, const ivyc_s1::pretty &t);
template <>
ivyc_s1::pretty _arg<ivyc_s1::pretty>(std::vector<ivy_value> &args, unsigned idx, long long bound);
template <>
void  __ser<ivyc_s1::pretty>(ivy_ser &res, const ivyc_s1::pretty&);
template <>
void  __deser<ivyc_s1::pretty>(ivy_deser &inp, ivyc_s1::pretty &res);
std::ostream &operator <<(std::ostream &s, const ivyc_s1::pretty__state &t);
template <>
ivyc_s1::pretty__state _arg<ivyc_s1::pretty__state>(std::vector<ivy_value> &args, unsigned idx, long long bound);
template <>
void  __ser<ivyc_s1::pretty__state>(ivy_ser &res, const ivyc_s1::pretty__state&);
template <>
void  __deser<ivyc_s1::pretty__state>(ivy_deser &inp, ivyc_s1::pretty__state &res);
std::ostream &operator <<(std::ostream &s, const ivyc_s1::pretty__token &t);
template <>
ivyc_s1::pretty__token _arg<ivyc_s1::pretty__token>(std::vector<ivy_value> &args, unsigned idx, long long bound);
template <>
void  __ser<ivyc_s1::pretty__token>(ivy_ser &res, const ivyc_s1::pretty__token&);
template <>
void  __deser<ivyc_s1::pretty__token>(ivy_deser &inp, ivyc_s1::pretty__token &res);
std::ostream &operator <<(std::ostream &s, const ivyc_s1::pstate &t);
template <>
ivyc_s1::pstate _arg<ivyc_s1::pstate>(std::vector<ivy_value> &args, unsigned idx, long long bound);
template <>
void  __ser<ivyc_s1::pstate>(ivy_ser &res, const ivyc_s1::pstate&);
template <>
void  __deser<ivyc_s1::pstate>(ivy_deser &inp, ivyc_s1::pstate &res);

int ivyc_s1::annot::temp_counter = 0;

std::ostream &operator <<(std::ostream &s, const ivyc_s1::annot &t){
    s << "{";
    switch (t.tag) {
        case 0: s << "annot_i:" << ivyc_s1::annot::unwrap< ivyc_s1::annot_i >(t); break;

    }
    s << "}";
    return s;
}
template <>
ivyc_s1::annot _arg<ivyc_s1::annot>(std::vector<ivy_value> &args, unsigned idx, long long bound) {
    if (args[idx].atom.size())
        throw out_of_bounds("unexpected value for sort annot: " + args[idx].atom,args[idx].pos);
    if (args[idx].fields.size() == 0)
        return ivyc_s1::annot();
    if (args[idx].fields.size() != 1)
        throw out_of_bounds("too many fields for sort annot (expected one)",args[idx].pos);
    if (args[idx].fields[0].atom == "annot_i") return ivyc_s1::annot(0, new ivyc_s1::annot::twrap<ivyc_s1::annot_i>(_arg<ivyc_s1::annot_i>(args[idx].fields[0].fields,0,0)));

        throw out_of_bounds("unexpected field sort SORTNAME: " + args[idx].fields[0].atom, args[idx].pos);
}
template <>
void __ser<ivyc_s1::annot>(ivy_ser &res, const ivyc_s1::annot &inp) {
    if (inp.tag == 0) {res.open_tag(0,"annot_i"); __ser(res,ivyc_s1::annot::unwrap< ivyc_s1::annot_i >(inp)); res.close_tag();}

}
template <>
void __deser<ivyc_s1::annot>(ivy_deser &res, ivyc_s1::annot &inp) {
    std::vector<std::string> tags;
    tags.push_back("annot_i");

    int tag = res.open_tag(tags);
    switch (tag) {
    case 0: {ivyc_s1::annot_i tmp; __deser(res,tmp); inp = ivyc_s1::annot(0, new ivyc_s1::annot::twrap<ivyc_s1::annot_i>(tmp)); break;} 

    }
    res.close_tag();
}
#ifdef Z3PP_H_
template <>
void __from_solver<ivyc_s1::annot>( gen &g, const  z3::expr &v, ivyc_s1::annot &res) {
    {
        z3::sort sort = g.sort("annot_i");
        z3::func_decl pto = g.ctx.function("*>:annot:annot_i",g.sort("annot"),g.sort("annot_i"),g.ctx.bool_sort());
        // std::cout <<  g.model << std::endl;
        Z3_ast_vector av = Z3_model_get_sort_universe(g.ctx, g.model, sort);
        if (av) {
            z3::expr_vector univ(g.ctx,av);
            for (unsigned i = 0; i < univ.size(); i++){
                if (eq(g.model.eval(pto(v,univ[i]),true),g.ctx.bool_val(true))){
                    ivyc_s1::annot_i tmp;
                    __from_solver(g,univ[i],tmp);                    res = ivyc_s1::annot(0, new ivyc_s1::annot::twrap<ivyc_s1::annot_i>(tmp));
                }
            }
        }
    }

}
template <>
z3::expr __to_solver<ivyc_s1::annot>( gen &g, const  z3::expr &v, ivyc_s1::annot &val) {
//    std::cout << v << ":" << v.get_sort() << std::endl;
    if (val.tag == 0) {
        z3::func_decl pto = g.ctx.function("*>:annot:annot_i",g.sort("annot"),g.sort("annot_i"),g.ctx.bool_sort());
        z3::expr X = g.ctx.constant("X",g.sort("annot_i"));
        ivyc_s1::annot_i tmp = ivyc_s1::annot::unwrap< ivyc_s1::annot_i >(val);
        return exists(X,pto(v,X) && __to_solver(g,X,tmp));
    }

    z3::expr conj = g.ctx.bool_val(false);
    {
        z3::func_decl pto = g.ctx.function("*>:annot:annot_i",g.sort("annot"),g.sort("annot_i"),g.ctx.bool_sort());
        z3::expr Y = g.ctx.constant("Y",g.sort("annot_i"));
        conj = conj && forall(Y,!pto(v,Y));
    }

    return conj;
}
template <>
void __randomize<ivyc_s1::annot>( gen &g, const  z3::expr &apply_expr) {
    std::ostringstream os;
    os << "__annot__tmp" << ivyc_s1::annot::temp_counter++;
    std::string temp = os.str();
    z3::sort range = apply_expr.get_sort();
    z3::expr disj = g.ctx.bool_val(false);
int tag = rand() % 1;
    if (tag == 0) {
        z3::func_decl pto = g.ctx.function("*>:annot:annot_i",g.sort("annot"),g.sort("annot_i"),g.ctx.bool_sort());
        z3::expr X = g.ctx.constant(temp.c_str(),g.sort("annot_i"));
        z3::expr pred = pto(apply_expr,X);
        g.add_alit(pred);
        __randomize<ivyc_s1::annot_i>(g,X);
    }

}
#endif

int ivyc_s1::ivy__ident::temp_counter = 0;

std::ostream &operator <<(std::ostream &s, const ivyc_s1::ivy__ident &t){
    s << "{";
    switch (t.tag) {
        case 0: s << "ivy.strident:" << ivyc_s1::ivy__ident::unwrap< ivyc_s1::ivy__strident >(t); break;
        case 1: s << "ivy.numident:" << ivyc_s1::ivy__ident::unwrap< ivyc_s1::ivy__numident >(t); break;
        case 2: s << "ivy.dotident:" << ivyc_s1::ivy__ident::unwrap< ivyc_s1::ivy__dotident >(t); break;

    }
    s << "}";
    return s;
}
template <>
ivyc_s1::ivy__ident _arg<ivyc_s1::ivy__ident>(std::vector<ivy_value> &args, unsigned idx, long long bound) {
    if (args[idx].atom.size())
        throw out_of_bounds("unexpected value for sort ivy.ident: " + args[idx].atom,args[idx].pos);
    if (args[idx].fields.size() == 0)
        return ivyc_s1::ivy__ident();
    if (args[idx].fields.size() != 1)
        throw out_of_bounds("too many fields for sort ivy.ident (expected one)",args[idx].pos);
    if (args[idx].fields[0].atom == "ivy.strident") return ivyc_s1::ivy__ident(0, new ivyc_s1::ivy__ident::twrap<ivyc_s1::ivy__strident>(_arg<ivyc_s1::ivy__strident>(args[idx].fields[0].fields,0,0)));
    if (args[idx].fields[0].atom == "ivy.numident") return ivyc_s1::ivy__ident(1, new ivyc_s1::ivy__ident::twrap<ivyc_s1::ivy__numident>(_arg<ivyc_s1::ivy__numident>(args[idx].fields[0].fields,0,0)));
    if (args[idx].fields[0].atom == "ivy.dotident") return ivyc_s1::ivy__ident(2, new ivyc_s1::ivy__ident::twrap<ivyc_s1::ivy__dotident>(_arg<ivyc_s1::ivy__dotident>(args[idx].fields[0].fields,0,0)));

        throw out_of_bounds("unexpected field sort SORTNAME: " + args[idx].fields[0].atom, args[idx].pos);
}
template <>
void __ser<ivyc_s1::ivy__ident>(ivy_ser &res, const ivyc_s1::ivy__ident &inp) {
    if (inp.tag == 0) {res.open_tag(0,"ivy.strident"); __ser(res,ivyc_s1::ivy__ident::unwrap< ivyc_s1::ivy__strident >(inp)); res.close_tag();}
    if (inp.tag == 1) {res.open_tag(1,"ivy.numident"); __ser(res,ivyc_s1::ivy__ident::unwrap< ivyc_s1::ivy__numident >(inp)); res.close_tag();}
    if (inp.tag == 2) {res.open_tag(2,"ivy.dotident"); __ser(res,ivyc_s1::ivy__ident::unwrap< ivyc_s1::ivy__dotident >(inp)); res.close_tag();}

}
template <>
void __deser<ivyc_s1::ivy__ident>(ivy_deser &res, ivyc_s1::ivy__ident &inp) {
    std::vector<std::string> tags;
    tags.push_back("ivy.strident");
    tags.push_back("ivy.numident");
    tags.push_back("ivy.dotident");

    int tag = res.open_tag(tags);
    switch (tag) {
    case 0: {ivyc_s1::ivy__strident tmp; __deser(res,tmp); inp = ivyc_s1::ivy__ident(0, new ivyc_s1::ivy__ident::twrap<ivyc_s1::ivy__strident>(tmp)); break;} 
    case 1: {ivyc_s1::ivy__numident tmp; __deser(res,tmp); inp = ivyc_s1::ivy__ident(1, new ivyc_s1::ivy__ident::twrap<ivyc_s1::ivy__numident>(tmp)); break;} 
    case 2: {ivyc_s1::ivy__dotident tmp; __deser(res,tmp); inp = ivyc_s1::ivy__ident(2, new ivyc_s1::ivy__ident::twrap<ivyc_s1::ivy__dotident>(tmp)); break;} 

    }
    res.close_tag();
}
#ifdef Z3PP_H_
template <>
void __from_solver<ivyc_s1::ivy__ident>( gen &g, const  z3::expr &v, ivyc_s1::ivy__ident &res) {
    {
        z3::sort sort = g.sort("ivy.strident");
        z3::func_decl pto = g.ctx.function("*>:ivy.ident:ivy.strident",g.sort("ivy.ident"),g.sort("ivy.strident"),g.ctx.bool_sort());
        // std::cout <<  g.model << std::endl;
        Z3_ast_vector av = Z3_model_get_sort_universe(g.ctx, g.model, sort);
        if (av) {
            z3::expr_vector univ(g.ctx,av);
            for (unsigned i = 0; i < univ.size(); i++){
                if (eq(g.model.eval(pto(v,univ[i]),true),g.ctx.bool_val(true))){
                    ivyc_s1::ivy__strident tmp;
                    __from_solver(g,univ[i],tmp);                    res = ivyc_s1::ivy__ident(0, new ivyc_s1::ivy__ident::twrap<ivyc_s1::ivy__strident>(tmp));
                }
            }
        }
    }
    {
        z3::sort sort = g.sort("ivy.numident");
        z3::func_decl pto = g.ctx.function("*>:ivy.ident:ivy.numident",g.sort("ivy.ident"),g.sort("ivy.numident"),g.ctx.bool_sort());
        // std::cout <<  g.model << std::endl;
        Z3_ast_vector av = Z3_model_get_sort_universe(g.ctx, g.model, sort);
        if (av) {
            z3::expr_vector univ(g.ctx,av);
            for (unsigned i = 0; i < univ.size(); i++){
                if (eq(g.model.eval(pto(v,univ[i]),true),g.ctx.bool_val(true))){
                    ivyc_s1::ivy__numident tmp;
                    __from_solver(g,univ[i],tmp);                    res = ivyc_s1::ivy__ident(1, new ivyc_s1::ivy__ident::twrap<ivyc_s1::ivy__numident>(tmp));
                }
            }
        }
    }
    {
        z3::sort sort = g.sort("ivy.dotident");
        z3::func_decl pto = g.ctx.function("*>:ivy.ident:ivy.dotident",g.sort("ivy.ident"),g.sort("ivy.dotident"),g.ctx.bool_sort());
        // std::cout <<  g.model << std::endl;
        Z3_ast_vector av = Z3_model_get_sort_universe(g.ctx, g.model, sort);
        if (av) {
            z3::expr_vector univ(g.ctx,av);
            for (unsigned i = 0; i < univ.size(); i++){
                if (eq(g.model.eval(pto(v,univ[i]),true),g.ctx.bool_val(true))){
                    ivyc_s1::ivy__dotident tmp;
                    __from_solver(g,univ[i],tmp);                    res = ivyc_s1::ivy__ident(2, new ivyc_s1::ivy__ident::twrap<ivyc_s1::ivy__dotident>(tmp));
                }
            }
        }
    }

}
template <>
z3::expr __to_solver<ivyc_s1::ivy__ident>( gen &g, const  z3::expr &v, ivyc_s1::ivy__ident &val) {
//    std::cout << v << ":" << v.get_sort() << std::endl;
    if (val.tag == 0) {
        z3::func_decl pto = g.ctx.function("*>:ivy.ident:ivy.strident",g.sort("ivy.ident"),g.sort("ivy.strident"),g.ctx.bool_sort());
        z3::expr X = g.ctx.constant("X",g.sort("ivy.strident"));
        ivyc_s1::ivy__strident tmp = ivyc_s1::ivy__ident::unwrap< ivyc_s1::ivy__strident >(val);
        return exists(X,pto(v,X) && __to_solver(g,X,tmp));
    }
    if (val.tag == 1) {
        z3::func_decl pto = g.ctx.function("*>:ivy.ident:ivy.numident",g.sort("ivy.ident"),g.sort("ivy.numident"),g.ctx.bool_sort());
        z3::expr X = g.ctx.constant("X",g.sort("ivy.numident"));
        ivyc_s1::ivy__numident tmp = ivyc_s1::ivy__ident::unwrap< ivyc_s1::ivy__numident >(val);
        return exists(X,pto(v,X) && __to_solver(g,X,tmp));
    }
    if (val.tag == 2) {
        z3::func_decl pto = g.ctx.function("*>:ivy.ident:ivy.dotident",g.sort("ivy.ident"),g.sort("ivy.dotident"),g.ctx.bool_sort());
        z3::expr X = g.ctx.constant("X",g.sort("ivy.dotident"));
        ivyc_s1::ivy__dotident tmp = ivyc_s1::ivy__ident::unwrap< ivyc_s1::ivy__dotident >(val);
        return exists(X,pto(v,X) && __to_solver(g,X,tmp));
    }

    z3::expr conj = g.ctx.bool_val(false);
    {
        z3::func_decl pto = g.ctx.function("*>:ivy.ident:ivy.strident",g.sort("ivy.ident"),g.sort("ivy.strident"),g.ctx.bool_sort());
        z3::expr Y = g.ctx.constant("Y",g.sort("ivy.strident"));
        conj = conj && forall(Y,!pto(v,Y));
    }
    {
        z3::func_decl pto = g.ctx.function("*>:ivy.ident:ivy.numident",g.sort("ivy.ident"),g.sort("ivy.numident"),g.ctx.bool_sort());
        z3::expr Y = g.ctx.constant("Y",g.sort("ivy.numident"));
        conj = conj && forall(Y,!pto(v,Y));
    }
    {
        z3::func_decl pto = g.ctx.function("*>:ivy.ident:ivy.dotident",g.sort("ivy.ident"),g.sort("ivy.dotident"),g.ctx.bool_sort());
        z3::expr Y = g.ctx.constant("Y",g.sort("ivy.dotident"));
        conj = conj && forall(Y,!pto(v,Y));
    }

    return conj;
}
template <>
void __randomize<ivyc_s1::ivy__ident>( gen &g, const  z3::expr &apply_expr) {
    std::ostringstream os;
    os << "__ivy.ident__tmp" << ivyc_s1::ivy__ident::temp_counter++;
    std::string temp = os.str();
    z3::sort range = apply_expr.get_sort();
    z3::expr disj = g.ctx.bool_val(false);
int tag = rand() % 3;
    if (tag == 0) {
        z3::func_decl pto = g.ctx.function("*>:ivy.ident:ivy.strident",g.sort("ivy.ident"),g.sort("ivy.strident"),g.ctx.bool_sort());
        z3::expr X = g.ctx.constant(temp.c_str(),g.sort("ivy.strident"));
        z3::expr pred = pto(apply_expr,X);
        g.add_alit(pred);
        __randomize<ivyc_s1::ivy__strident>(g,X);
    }
    if (tag == 1) {
        z3::func_decl pto = g.ctx.function("*>:ivy.ident:ivy.numident",g.sort("ivy.ident"),g.sort("ivy.numident"),g.ctx.bool_sort());
        z3::expr X = g.ctx.constant(temp.c_str(),g.sort("ivy.numident"));
        z3::expr pred = pto(apply_expr,X);
        g.add_alit(pred);
        __randomize<ivyc_s1::ivy__numident>(g,X);
    }
    if (tag == 2) {
        z3::func_decl pto = g.ctx.function("*>:ivy.ident:ivy.dotident",g.sort("ivy.ident"),g.sort("ivy.dotident"),g.ctx.bool_sort());
        z3::expr X = g.ctx.constant(temp.c_str(),g.sort("ivy.dotident"));
        z3::expr pred = pto(apply_expr,X);
        g.add_alit(pred);
        __randomize<ivyc_s1::ivy__dotident>(g,X);
    }

}
#endif

int ivyc_s1::ivy__expr::temp_counter = 0;

std::ostream &operator <<(std::ostream &s, const ivyc_s1::ivy__expr &t){
    s << "{";
    switch (t.tag) {
        case 0: s << "ivy.symbol:" << ivyc_s1::ivy__expr::unwrap< ivyc_s1::ivy__symbol >(t); break;
        case 1: s << "ivy.app:" << ivyc_s1::ivy__expr::unwrap< ivyc_s1::ivy__app >(t); break;
        case 2: s << "ivy.variable:" << ivyc_s1::ivy__expr::unwrap< ivyc_s1::ivy__variable >(t); break;
        case 3: s << "ivy.pi:" << ivyc_s1::ivy__expr::unwrap< ivyc_s1::ivy__pi >(t); break;

    }
    s << "}";
    return s;
}
template <>
ivyc_s1::ivy__expr _arg<ivyc_s1::ivy__expr>(std::vector<ivy_value> &args, unsigned idx, long long bound) {
    if (args[idx].atom.size())
        throw out_of_bounds("unexpected value for sort ivy.expr: " + args[idx].atom,args[idx].pos);
    if (args[idx].fields.size() == 0)
        return ivyc_s1::ivy__expr();
    if (args[idx].fields.size() != 1)
        throw out_of_bounds("too many fields for sort ivy.expr (expected one)",args[idx].pos);
    if (args[idx].fields[0].atom == "ivy.symbol") return ivyc_s1::ivy__expr(0, new ivyc_s1::ivy__expr::twrap<ivyc_s1::ivy__symbol>(_arg<ivyc_s1::ivy__symbol>(args[idx].fields[0].fields,0,0)));
    if (args[idx].fields[0].atom == "ivy.app") return ivyc_s1::ivy__expr(1, new ivyc_s1::ivy__expr::twrap<ivyc_s1::ivy__app>(_arg<ivyc_s1::ivy__app>(args[idx].fields[0].fields,0,0)));
    if (args[idx].fields[0].atom == "ivy.variable") return ivyc_s1::ivy__expr(2, new ivyc_s1::ivy__expr::twrap<ivyc_s1::ivy__variable>(_arg<ivyc_s1::ivy__variable>(args[idx].fields[0].fields,0,0)));
    if (args[idx].fields[0].atom == "ivy.pi") return ivyc_s1::ivy__expr(3, new ivyc_s1::ivy__expr::twrap<ivyc_s1::ivy__pi>(_arg<ivyc_s1::ivy__pi>(args[idx].fields[0].fields,0,0)));

        throw out_of_bounds("unexpected field sort SORTNAME: " + args[idx].fields[0].atom, args[idx].pos);
}
template <>
void __ser<ivyc_s1::ivy__expr>(ivy_ser &res, const ivyc_s1::ivy__expr &inp) {
    if (inp.tag == 0) {res.open_tag(0,"ivy.symbol"); __ser(res,ivyc_s1::ivy__expr::unwrap< ivyc_s1::ivy__symbol >(inp)); res.close_tag();}
    if (inp.tag == 1) {res.open_tag(1,"ivy.app"); __ser(res,ivyc_s1::ivy__expr::unwrap< ivyc_s1::ivy__app >(inp)); res.close_tag();}
    if (inp.tag == 2) {res.open_tag(2,"ivy.variable"); __ser(res,ivyc_s1::ivy__expr::unwrap< ivyc_s1::ivy__variable >(inp)); res.close_tag();}
    if (inp.tag == 3) {res.open_tag(3,"ivy.pi"); __ser(res,ivyc_s1::ivy__expr::unwrap< ivyc_s1::ivy__pi >(inp)); res.close_tag();}

}
template <>
void __deser<ivyc_s1::ivy__expr>(ivy_deser &res, ivyc_s1::ivy__expr &inp) {
    std::vector<std::string> tags;
    tags.push_back("ivy.symbol");
    tags.push_back("ivy.app");
    tags.push_back("ivy.variable");
    tags.push_back("ivy.pi");

    int tag = res.open_tag(tags);
    switch (tag) {
    case 0: {ivyc_s1::ivy__symbol tmp; __deser(res,tmp); inp = ivyc_s1::ivy__expr(0, new ivyc_s1::ivy__expr::twrap<ivyc_s1::ivy__symbol>(tmp)); break;} 
    case 1: {ivyc_s1::ivy__app tmp; __deser(res,tmp); inp = ivyc_s1::ivy__expr(1, new ivyc_s1::ivy__expr::twrap<ivyc_s1::ivy__app>(tmp)); break;} 
    case 2: {ivyc_s1::ivy__variable tmp; __deser(res,tmp); inp = ivyc_s1::ivy__expr(2, new ivyc_s1::ivy__expr::twrap<ivyc_s1::ivy__variable>(tmp)); break;} 
    case 3: {ivyc_s1::ivy__pi tmp; __deser(res,tmp); inp = ivyc_s1::ivy__expr(3, new ivyc_s1::ivy__expr::twrap<ivyc_s1::ivy__pi>(tmp)); break;} 

    }
    res.close_tag();
}
#ifdef Z3PP_H_
template <>
void __from_solver<ivyc_s1::ivy__expr>( gen &g, const  z3::expr &v, ivyc_s1::ivy__expr &res) {
    {
        z3::sort sort = g.sort("ivy.symbol");
        z3::func_decl pto = g.ctx.function("*>:ivy.expr:ivy.symbol",g.sort("ivy.expr"),g.sort("ivy.symbol"),g.ctx.bool_sort());
        // std::cout <<  g.model << std::endl;
        Z3_ast_vector av = Z3_model_get_sort_universe(g.ctx, g.model, sort);
        if (av) {
            z3::expr_vector univ(g.ctx,av);
            for (unsigned i = 0; i < univ.size(); i++){
                if (eq(g.model.eval(pto(v,univ[i]),true),g.ctx.bool_val(true))){
                    ivyc_s1::ivy__symbol tmp;
                    __from_solver(g,univ[i],tmp);                    res = ivyc_s1::ivy__expr(0, new ivyc_s1::ivy__expr::twrap<ivyc_s1::ivy__symbol>(tmp));
                }
            }
        }
    }
    {
        z3::sort sort = g.sort("ivy.app");
        z3::func_decl pto = g.ctx.function("*>:ivy.expr:ivy.app",g.sort("ivy.expr"),g.sort("ivy.app"),g.ctx.bool_sort());
        // std::cout <<  g.model << std::endl;
        Z3_ast_vector av = Z3_model_get_sort_universe(g.ctx, g.model, sort);
        if (av) {
            z3::expr_vector univ(g.ctx,av);
            for (unsigned i = 0; i < univ.size(); i++){
                if (eq(g.model.eval(pto(v,univ[i]),true),g.ctx.bool_val(true))){
                    ivyc_s1::ivy__app tmp;
                    __from_solver(g,univ[i],tmp);                    res = ivyc_s1::ivy__expr(1, new ivyc_s1::ivy__expr::twrap<ivyc_s1::ivy__app>(tmp));
                }
            }
        }
    }
    {
        z3::sort sort = g.sort("ivy.variable");
        z3::func_decl pto = g.ctx.function("*>:ivy.expr:ivy.variable",g.sort("ivy.expr"),g.sort("ivy.variable"),g.ctx.bool_sort());
        // std::cout <<  g.model << std::endl;
        Z3_ast_vector av = Z3_model_get_sort_universe(g.ctx, g.model, sort);
        if (av) {
            z3::expr_vector univ(g.ctx,av);
            for (unsigned i = 0; i < univ.size(); i++){
                if (eq(g.model.eval(pto(v,univ[i]),true),g.ctx.bool_val(true))){
                    ivyc_s1::ivy__variable tmp;
                    __from_solver(g,univ[i],tmp);                    res = ivyc_s1::ivy__expr(2, new ivyc_s1::ivy__expr::twrap<ivyc_s1::ivy__variable>(tmp));
                }
            }
        }
    }
    {
        z3::sort sort = g.sort("ivy.pi");
        z3::func_decl pto = g.ctx.function("*>:ivy.expr:ivy.pi",g.sort("ivy.expr"),g.sort("ivy.pi"),g.ctx.bool_sort());
        // std::cout <<  g.model << std::endl;
        Z3_ast_vector av = Z3_model_get_sort_universe(g.ctx, g.model, sort);
        if (av) {
            z3::expr_vector univ(g.ctx,av);
            for (unsigned i = 0; i < univ.size(); i++){
                if (eq(g.model.eval(pto(v,univ[i]),true),g.ctx.bool_val(true))){
                    ivyc_s1::ivy__pi tmp;
                    __from_solver(g,univ[i],tmp);                    res = ivyc_s1::ivy__expr(3, new ivyc_s1::ivy__expr::twrap<ivyc_s1::ivy__pi>(tmp));
                }
            }
        }
    }

}
template <>
z3::expr __to_solver<ivyc_s1::ivy__expr>( gen &g, const  z3::expr &v, ivyc_s1::ivy__expr &val) {
//    std::cout << v << ":" << v.get_sort() << std::endl;
    if (val.tag == 0) {
        z3::func_decl pto = g.ctx.function("*>:ivy.expr:ivy.symbol",g.sort("ivy.expr"),g.sort("ivy.symbol"),g.ctx.bool_sort());
        z3::expr X = g.ctx.constant("X",g.sort("ivy.symbol"));
        ivyc_s1::ivy__symbol tmp = ivyc_s1::ivy__expr::unwrap< ivyc_s1::ivy__symbol >(val);
        return exists(X,pto(v,X) && __to_solver(g,X,tmp));
    }
    if (val.tag == 1) {
        z3::func_decl pto = g.ctx.function("*>:ivy.expr:ivy.app",g.sort("ivy.expr"),g.sort("ivy.app"),g.ctx.bool_sort());
        z3::expr X = g.ctx.constant("X",g.sort("ivy.app"));
        ivyc_s1::ivy__app tmp = ivyc_s1::ivy__expr::unwrap< ivyc_s1::ivy__app >(val);
        return exists(X,pto(v,X) && __to_solver(g,X,tmp));
    }
    if (val.tag == 2) {
        z3::func_decl pto = g.ctx.function("*>:ivy.expr:ivy.variable",g.sort("ivy.expr"),g.sort("ivy.variable"),g.ctx.bool_sort());
        z3::expr X = g.ctx.constant("X",g.sort("ivy.variable"));
        ivyc_s1::ivy__variable tmp = ivyc_s1::ivy__expr::unwrap< ivyc_s1::ivy__variable >(val);
        return exists(X,pto(v,X) && __to_solver(g,X,tmp));
    }
    if (val.tag == 3) {
        z3::func_decl pto = g.ctx.function("*>:ivy.expr:ivy.pi",g.sort("ivy.expr"),g.sort("ivy.pi"),g.ctx.bool_sort());
        z3::expr X = g.ctx.constant("X",g.sort("ivy.pi"));
        ivyc_s1::ivy__pi tmp = ivyc_s1::ivy__expr::unwrap< ivyc_s1::ivy__pi >(val);
        return exists(X,pto(v,X) && __to_solver(g,X,tmp));
    }

    z3::expr conj = g.ctx.bool_val(false);
    {
        z3::func_decl pto = g.ctx.function("*>:ivy.expr:ivy.symbol",g.sort("ivy.expr"),g.sort("ivy.symbol"),g.ctx.bool_sort());
        z3::expr Y = g.ctx.constant("Y",g.sort("ivy.symbol"));
        conj = conj && forall(Y,!pto(v,Y));
    }
    {
        z3::func_decl pto = g.ctx.function("*>:ivy.expr:ivy.app",g.sort("ivy.expr"),g.sort("ivy.app"),g.ctx.bool_sort());
        z3::expr Y = g.ctx.constant("Y",g.sort("ivy.app"));
        conj = conj && forall(Y,!pto(v,Y));
    }
    {
        z3::func_decl pto = g.ctx.function("*>:ivy.expr:ivy.variable",g.sort("ivy.expr"),g.sort("ivy.variable"),g.ctx.bool_sort());
        z3::expr Y = g.ctx.constant("Y",g.sort("ivy.variable"));
        conj = conj && forall(Y,!pto(v,Y));
    }
    {
        z3::func_decl pto = g.ctx.function("*>:ivy.expr:ivy.pi",g.sort("ivy.expr"),g.sort("ivy.pi"),g.ctx.bool_sort());
        z3::expr Y = g.ctx.constant("Y",g.sort("ivy.pi"));
        conj = conj && forall(Y,!pto(v,Y));
    }

    return conj;
}
template <>
void __randomize<ivyc_s1::ivy__expr>( gen &g, const  z3::expr &apply_expr) {
    std::ostringstream os;
    os << "__ivy.expr__tmp" << ivyc_s1::ivy__expr::temp_counter++;
    std::string temp = os.str();
    z3::sort range = apply_expr.get_sort();
    z3::expr disj = g.ctx.bool_val(false);
int tag = rand() % 4;
    if (tag == 0) {
        z3::func_decl pto = g.ctx.function("*>:ivy.expr:ivy.symbol",g.sort("ivy.expr"),g.sort("ivy.symbol"),g.ctx.bool_sort());
        z3::expr X = g.ctx.constant(temp.c_str(),g.sort("ivy.symbol"));
        z3::expr pred = pto(apply_expr,X);
        g.add_alit(pred);
        __randomize<ivyc_s1::ivy__symbol>(g,X);
    }
    if (tag == 1) {
        z3::func_decl pto = g.ctx.function("*>:ivy.expr:ivy.app",g.sort("ivy.expr"),g.sort("ivy.app"),g.ctx.bool_sort());
        z3::expr X = g.ctx.constant(temp.c_str(),g.sort("ivy.app"));
        z3::expr pred = pto(apply_expr,X);
        g.add_alit(pred);
        __randomize<ivyc_s1::ivy__app>(g,X);
    }
    if (tag == 2) {
        z3::func_decl pto = g.ctx.function("*>:ivy.expr:ivy.variable",g.sort("ivy.expr"),g.sort("ivy.variable"),g.ctx.bool_sort());
        z3::expr X = g.ctx.constant(temp.c_str(),g.sort("ivy.variable"));
        z3::expr pred = pto(apply_expr,X);
        g.add_alit(pred);
        __randomize<ivyc_s1::ivy__variable>(g,X);
    }
    if (tag == 3) {
        z3::func_decl pto = g.ctx.function("*>:ivy.expr:ivy.pi",g.sort("ivy.expr"),g.sort("ivy.pi"),g.ctx.bool_sort());
        z3::expr X = g.ctx.constant(temp.c_str(),g.sort("ivy.pi"));
        z3::expr pred = pto(apply_expr,X);
        g.add_alit(pred);
        __randomize<ivyc_s1::ivy__pi>(g,X);
    }

}
#endif

int ivyc_s1::ivy__stmt::temp_counter = 0;

std::ostream &operator <<(std::ostream &s, const ivyc_s1::ivy__stmt &t){
    s << "{";
    switch (t.tag) {
        case 0: s << "ivy.asgn:" << ivyc_s1::ivy__stmt::unwrap< ivyc_s1::ivy__asgn >(t); break;
        case 1: s << "ivy.sequence:" << ivyc_s1::ivy__stmt::unwrap< ivyc_s1::ivy__sequence >(t); break;
        case 2: s << "ivy.skipst:" << ivyc_s1::ivy__stmt::unwrap< ivyc_s1::ivy__skipst >(t); break;
        case 3: s << "ivy.ifst:" << ivyc_s1::ivy__stmt::unwrap< ivyc_s1::ivy__ifst >(t); break;
        case 4: s << "ivy.whilest:" << ivyc_s1::ivy__stmt::unwrap< ivyc_s1::ivy__whilest >(t); break;
        case 5: s << "ivy.breakst:" << ivyc_s1::ivy__stmt::unwrap< ivyc_s1::ivy__breakst >(t); break;
        case 6: s << "ivy.varst:" << ivyc_s1::ivy__stmt::unwrap< ivyc_s1::ivy__varst >(t); break;

    }
    s << "}";
    return s;
}
template <>
ivyc_s1::ivy__stmt _arg<ivyc_s1::ivy__stmt>(std::vector<ivy_value> &args, unsigned idx, long long bound) {
    if (args[idx].atom.size())
        throw out_of_bounds("unexpected value for sort ivy.stmt: " + args[idx].atom,args[idx].pos);
    if (args[idx].fields.size() == 0)
        return ivyc_s1::ivy__stmt();
    if (args[idx].fields.size() != 1)
        throw out_of_bounds("too many fields for sort ivy.stmt (expected one)",args[idx].pos);
    if (args[idx].fields[0].atom == "ivy.asgn") return ivyc_s1::ivy__stmt(0, new ivyc_s1::ivy__stmt::twrap<ivyc_s1::ivy__asgn>(_arg<ivyc_s1::ivy__asgn>(args[idx].fields[0].fields,0,0)));
    if (args[idx].fields[0].atom == "ivy.sequence") return ivyc_s1::ivy__stmt(1, new ivyc_s1::ivy__stmt::twrap<ivyc_s1::ivy__sequence>(_arg<ivyc_s1::ivy__sequence>(args[idx].fields[0].fields,0,0)));
    if (args[idx].fields[0].atom == "ivy.skipst") return ivyc_s1::ivy__stmt(2, new ivyc_s1::ivy__stmt::twrap<ivyc_s1::ivy__skipst>(_arg<ivyc_s1::ivy__skipst>(args[idx].fields[0].fields,0,0)));
    if (args[idx].fields[0].atom == "ivy.ifst") return ivyc_s1::ivy__stmt(3, new ivyc_s1::ivy__stmt::twrap<ivyc_s1::ivy__ifst>(_arg<ivyc_s1::ivy__ifst>(args[idx].fields[0].fields,0,0)));
    if (args[idx].fields[0].atom == "ivy.whilest") return ivyc_s1::ivy__stmt(4, new ivyc_s1::ivy__stmt::twrap<ivyc_s1::ivy__whilest>(_arg<ivyc_s1::ivy__whilest>(args[idx].fields[0].fields,0,0)));
    if (args[idx].fields[0].atom == "ivy.breakst") return ivyc_s1::ivy__stmt(5, new ivyc_s1::ivy__stmt::twrap<ivyc_s1::ivy__breakst>(_arg<ivyc_s1::ivy__breakst>(args[idx].fields[0].fields,0,0)));
    if (args[idx].fields[0].atom == "ivy.varst") return ivyc_s1::ivy__stmt(6, new ivyc_s1::ivy__stmt::twrap<ivyc_s1::ivy__varst>(_arg<ivyc_s1::ivy__varst>(args[idx].fields[0].fields,0,0)));

        throw out_of_bounds("unexpected field sort SORTNAME: " + args[idx].fields[0].atom, args[idx].pos);
}
template <>
void __ser<ivyc_s1::ivy__stmt>(ivy_ser &res, const ivyc_s1::ivy__stmt &inp) {
    if (inp.tag == 0) {res.open_tag(0,"ivy.asgn"); __ser(res,ivyc_s1::ivy__stmt::unwrap< ivyc_s1::ivy__asgn >(inp)); res.close_tag();}
    if (inp.tag == 1) {res.open_tag(1,"ivy.sequence"); __ser(res,ivyc_s1::ivy__stmt::unwrap< ivyc_s1::ivy__sequence >(inp)); res.close_tag();}
    if (inp.tag == 2) {res.open_tag(2,"ivy.skipst"); __ser(res,ivyc_s1::ivy__stmt::unwrap< ivyc_s1::ivy__skipst >(inp)); res.close_tag();}
    if (inp.tag == 3) {res.open_tag(3,"ivy.ifst"); __ser(res,ivyc_s1::ivy__stmt::unwrap< ivyc_s1::ivy__ifst >(inp)); res.close_tag();}
    if (inp.tag == 4) {res.open_tag(4,"ivy.whilest"); __ser(res,ivyc_s1::ivy__stmt::unwrap< ivyc_s1::ivy__whilest >(inp)); res.close_tag();}
    if (inp.tag == 5) {res.open_tag(5,"ivy.breakst"); __ser(res,ivyc_s1::ivy__stmt::unwrap< ivyc_s1::ivy__breakst >(inp)); res.close_tag();}
    if (inp.tag == 6) {res.open_tag(6,"ivy.varst"); __ser(res,ivyc_s1::ivy__stmt::unwrap< ivyc_s1::ivy__varst >(inp)); res.close_tag();}

}
template <>
void __deser<ivyc_s1::ivy__stmt>(ivy_deser &res, ivyc_s1::ivy__stmt &inp) {
    std::vector<std::string> tags;
    tags.push_back("ivy.asgn");
    tags.push_back("ivy.sequence");
    tags.push_back("ivy.skipst");
    tags.push_back("ivy.ifst");
    tags.push_back("ivy.whilest");
    tags.push_back("ivy.breakst");
    tags.push_back("ivy.varst");

    int tag = res.open_tag(tags);
    switch (tag) {
    case 0: {ivyc_s1::ivy__asgn tmp; __deser(res,tmp); inp = ivyc_s1::ivy__stmt(0, new ivyc_s1::ivy__stmt::twrap<ivyc_s1::ivy__asgn>(tmp)); break;} 
    case 1: {ivyc_s1::ivy__sequence tmp; __deser(res,tmp); inp = ivyc_s1::ivy__stmt(1, new ivyc_s1::ivy__stmt::twrap<ivyc_s1::ivy__sequence>(tmp)); break;} 
    case 2: {ivyc_s1::ivy__skipst tmp; __deser(res,tmp); inp = ivyc_s1::ivy__stmt(2, new ivyc_s1::ivy__stmt::twrap<ivyc_s1::ivy__skipst>(tmp)); break;} 
    case 3: {ivyc_s1::ivy__ifst tmp; __deser(res,tmp); inp = ivyc_s1::ivy__stmt(3, new ivyc_s1::ivy__stmt::twrap<ivyc_s1::ivy__ifst>(tmp)); break;} 
    case 4: {ivyc_s1::ivy__whilest tmp; __deser(res,tmp); inp = ivyc_s1::ivy__stmt(4, new ivyc_s1::ivy__stmt::twrap<ivyc_s1::ivy__whilest>(tmp)); break;} 
    case 5: {ivyc_s1::ivy__breakst tmp; __deser(res,tmp); inp = ivyc_s1::ivy__stmt(5, new ivyc_s1::ivy__stmt::twrap<ivyc_s1::ivy__breakst>(tmp)); break;} 
    case 6: {ivyc_s1::ivy__varst tmp; __deser(res,tmp); inp = ivyc_s1::ivy__stmt(6, new ivyc_s1::ivy__stmt::twrap<ivyc_s1::ivy__varst>(tmp)); break;} 

    }
    res.close_tag();
}
#ifdef Z3PP_H_
template <>
void __from_solver<ivyc_s1::ivy__stmt>( gen &g, const  z3::expr &v, ivyc_s1::ivy__stmt &res) {
    {
        z3::sort sort = g.sort("ivy.asgn");
        z3::func_decl pto = g.ctx.function("*>:ivy.stmt:ivy.asgn",g.sort("ivy.stmt"),g.sort("ivy.asgn"),g.ctx.bool_sort());
        // std::cout <<  g.model << std::endl;
        Z3_ast_vector av = Z3_model_get_sort_universe(g.ctx, g.model, sort);
        if (av) {
            z3::expr_vector univ(g.ctx,av);
            for (unsigned i = 0; i < univ.size(); i++){
                if (eq(g.model.eval(pto(v,univ[i]),true),g.ctx.bool_val(true))){
                    ivyc_s1::ivy__asgn tmp;
                    __from_solver(g,univ[i],tmp);                    res = ivyc_s1::ivy__stmt(0, new ivyc_s1::ivy__stmt::twrap<ivyc_s1::ivy__asgn>(tmp));
                }
            }
        }
    }
    {
        z3::sort sort = g.sort("ivy.sequence");
        z3::func_decl pto = g.ctx.function("*>:ivy.stmt:ivy.sequence",g.sort("ivy.stmt"),g.sort("ivy.sequence"),g.ctx.bool_sort());
        // std::cout <<  g.model << std::endl;
        Z3_ast_vector av = Z3_model_get_sort_universe(g.ctx, g.model, sort);
        if (av) {
            z3::expr_vector univ(g.ctx,av);
            for (unsigned i = 0; i < univ.size(); i++){
                if (eq(g.model.eval(pto(v,univ[i]),true),g.ctx.bool_val(true))){
                    ivyc_s1::ivy__sequence tmp;
                    __from_solver(g,univ[i],tmp);                    res = ivyc_s1::ivy__stmt(1, new ivyc_s1::ivy__stmt::twrap<ivyc_s1::ivy__sequence>(tmp));
                }
            }
        }
    }
    {
        z3::sort sort = g.sort("ivy.skipst");
        z3::func_decl pto = g.ctx.function("*>:ivy.stmt:ivy.skipst",g.sort("ivy.stmt"),g.sort("ivy.skipst"),g.ctx.bool_sort());
        // std::cout <<  g.model << std::endl;
        Z3_ast_vector av = Z3_model_get_sort_universe(g.ctx, g.model, sort);
        if (av) {
            z3::expr_vector univ(g.ctx,av);
            for (unsigned i = 0; i < univ.size(); i++){
                if (eq(g.model.eval(pto(v,univ[i]),true),g.ctx.bool_val(true))){
                    ivyc_s1::ivy__skipst tmp;
                    __from_solver(g,univ[i],tmp);                    res = ivyc_s1::ivy__stmt(2, new ivyc_s1::ivy__stmt::twrap<ivyc_s1::ivy__skipst>(tmp));
                }
            }
        }
    }
    {
        z3::sort sort = g.sort("ivy.ifst");
        z3::func_decl pto = g.ctx.function("*>:ivy.stmt:ivy.ifst",g.sort("ivy.stmt"),g.sort("ivy.ifst"),g.ctx.bool_sort());
        // std::cout <<  g.model << std::endl;
        Z3_ast_vector av = Z3_model_get_sort_universe(g.ctx, g.model, sort);
        if (av) {
            z3::expr_vector univ(g.ctx,av);
            for (unsigned i = 0; i < univ.size(); i++){
                if (eq(g.model.eval(pto(v,univ[i]),true),g.ctx.bool_val(true))){
                    ivyc_s1::ivy__ifst tmp;
                    __from_solver(g,univ[i],tmp);                    res = ivyc_s1::ivy__stmt(3, new ivyc_s1::ivy__stmt::twrap<ivyc_s1::ivy__ifst>(tmp));
                }
            }
        }
    }
    {
        z3::sort sort = g.sort("ivy.whilest");
        z3::func_decl pto = g.ctx.function("*>:ivy.stmt:ivy.whilest",g.sort("ivy.stmt"),g.sort("ivy.whilest"),g.ctx.bool_sort());
        // std::cout <<  g.model << std::endl;
        Z3_ast_vector av = Z3_model_get_sort_universe(g.ctx, g.model, sort);
        if (av) {
            z3::expr_vector univ(g.ctx,av);
            for (unsigned i = 0; i < univ.size(); i++){
                if (eq(g.model.eval(pto(v,univ[i]),true),g.ctx.bool_val(true))){
                    ivyc_s1::ivy__whilest tmp;
                    __from_solver(g,univ[i],tmp);                    res = ivyc_s1::ivy__stmt(4, new ivyc_s1::ivy__stmt::twrap<ivyc_s1::ivy__whilest>(tmp));
                }
            }
        }
    }
    {
        z3::sort sort = g.sort("ivy.breakst");
        z3::func_decl pto = g.ctx.function("*>:ivy.stmt:ivy.breakst",g.sort("ivy.stmt"),g.sort("ivy.breakst"),g.ctx.bool_sort());
        // std::cout <<  g.model << std::endl;
        Z3_ast_vector av = Z3_model_get_sort_universe(g.ctx, g.model, sort);
        if (av) {
            z3::expr_vector univ(g.ctx,av);
            for (unsigned i = 0; i < univ.size(); i++){
                if (eq(g.model.eval(pto(v,univ[i]),true),g.ctx.bool_val(true))){
                    ivyc_s1::ivy__breakst tmp;
                    __from_solver(g,univ[i],tmp);                    res = ivyc_s1::ivy__stmt(5, new ivyc_s1::ivy__stmt::twrap<ivyc_s1::ivy__breakst>(tmp));
                }
            }
        }
    }
    {
        z3::sort sort = g.sort("ivy.varst");
        z3::func_decl pto = g.ctx.function("*>:ivy.stmt:ivy.varst",g.sort("ivy.stmt"),g.sort("ivy.varst"),g.ctx.bool_sort());
        // std::cout <<  g.model << std::endl;
        Z3_ast_vector av = Z3_model_get_sort_universe(g.ctx, g.model, sort);
        if (av) {
            z3::expr_vector univ(g.ctx,av);
            for (unsigned i = 0; i < univ.size(); i++){
                if (eq(g.model.eval(pto(v,univ[i]),true),g.ctx.bool_val(true))){
                    ivyc_s1::ivy__varst tmp;
                    __from_solver(g,univ[i],tmp);                    res = ivyc_s1::ivy__stmt(6, new ivyc_s1::ivy__stmt::twrap<ivyc_s1::ivy__varst>(tmp));
                }
            }
        }
    }

}
template <>
z3::expr __to_solver<ivyc_s1::ivy__stmt>( gen &g, const  z3::expr &v, ivyc_s1::ivy__stmt &val) {
//    std::cout << v << ":" << v.get_sort() << std::endl;
    if (val.tag == 0) {
        z3::func_decl pto = g.ctx.function("*>:ivy.stmt:ivy.asgn",g.sort("ivy.stmt"),g.sort("ivy.asgn"),g.ctx.bool_sort());
        z3::expr X = g.ctx.constant("X",g.sort("ivy.asgn"));
        ivyc_s1::ivy__asgn tmp = ivyc_s1::ivy__stmt::unwrap< ivyc_s1::ivy__asgn >(val);
        return exists(X,pto(v,X) && __to_solver(g,X,tmp));
    }
    if (val.tag == 1) {
        z3::func_decl pto = g.ctx.function("*>:ivy.stmt:ivy.sequence",g.sort("ivy.stmt"),g.sort("ivy.sequence"),g.ctx.bool_sort());
        z3::expr X = g.ctx.constant("X",g.sort("ivy.sequence"));
        ivyc_s1::ivy__sequence tmp = ivyc_s1::ivy__stmt::unwrap< ivyc_s1::ivy__sequence >(val);
        return exists(X,pto(v,X) && __to_solver(g,X,tmp));
    }
    if (val.tag == 2) {
        z3::func_decl pto = g.ctx.function("*>:ivy.stmt:ivy.skipst",g.sort("ivy.stmt"),g.sort("ivy.skipst"),g.ctx.bool_sort());
        z3::expr X = g.ctx.constant("X",g.sort("ivy.skipst"));
        ivyc_s1::ivy__skipst tmp = ivyc_s1::ivy__stmt::unwrap< ivyc_s1::ivy__skipst >(val);
        return exists(X,pto(v,X) && __to_solver(g,X,tmp));
    }
    if (val.tag == 3) {
        z3::func_decl pto = g.ctx.function("*>:ivy.stmt:ivy.ifst",g.sort("ivy.stmt"),g.sort("ivy.ifst"),g.ctx.bool_sort());
        z3::expr X = g.ctx.constant("X",g.sort("ivy.ifst"));
        ivyc_s1::ivy__ifst tmp = ivyc_s1::ivy__stmt::unwrap< ivyc_s1::ivy__ifst >(val);
        return exists(X,pto(v,X) && __to_solver(g,X,tmp));
    }
    if (val.tag == 4) {
        z3::func_decl pto = g.ctx.function("*>:ivy.stmt:ivy.whilest",g.sort("ivy.stmt"),g.sort("ivy.whilest"),g.ctx.bool_sort());
        z3::expr X = g.ctx.constant("X",g.sort("ivy.whilest"));
        ivyc_s1::ivy__whilest tmp = ivyc_s1::ivy__stmt::unwrap< ivyc_s1::ivy__whilest >(val);
        return exists(X,pto(v,X) && __to_solver(g,X,tmp));
    }
    if (val.tag == 5) {
        z3::func_decl pto = g.ctx.function("*>:ivy.stmt:ivy.breakst",g.sort("ivy.stmt"),g.sort("ivy.breakst"),g.ctx.bool_sort());
        z3::expr X = g.ctx.constant("X",g.sort("ivy.breakst"));
        ivyc_s1::ivy__breakst tmp = ivyc_s1::ivy__stmt::unwrap< ivyc_s1::ivy__breakst >(val);
        return exists(X,pto(v,X) && __to_solver(g,X,tmp));
    }
    if (val.tag == 6) {
        z3::func_decl pto = g.ctx.function("*>:ivy.stmt:ivy.varst",g.sort("ivy.stmt"),g.sort("ivy.varst"),g.ctx.bool_sort());
        z3::expr X = g.ctx.constant("X",g.sort("ivy.varst"));
        ivyc_s1::ivy__varst tmp = ivyc_s1::ivy__stmt::unwrap< ivyc_s1::ivy__varst >(val);
        return exists(X,pto(v,X) && __to_solver(g,X,tmp));
    }

    z3::expr conj = g.ctx.bool_val(false);
    {
        z3::func_decl pto = g.ctx.function("*>:ivy.stmt:ivy.asgn",g.sort("ivy.stmt"),g.sort("ivy.asgn"),g.ctx.bool_sort());
        z3::expr Y = g.ctx.constant("Y",g.sort("ivy.asgn"));
        conj = conj && forall(Y,!pto(v,Y));
    }
    {
        z3::func_decl pto = g.ctx.function("*>:ivy.stmt:ivy.sequence",g.sort("ivy.stmt"),g.sort("ivy.sequence"),g.ctx.bool_sort());
        z3::expr Y = g.ctx.constant("Y",g.sort("ivy.sequence"));
        conj = conj && forall(Y,!pto(v,Y));
    }
    {
        z3::func_decl pto = g.ctx.function("*>:ivy.stmt:ivy.skipst",g.sort("ivy.stmt"),g.sort("ivy.skipst"),g.ctx.bool_sort());
        z3::expr Y = g.ctx.constant("Y",g.sort("ivy.skipst"));
        conj = conj && forall(Y,!pto(v,Y));
    }
    {
        z3::func_decl pto = g.ctx.function("*>:ivy.stmt:ivy.ifst",g.sort("ivy.stmt"),g.sort("ivy.ifst"),g.ctx.bool_sort());
        z3::expr Y = g.ctx.constant("Y",g.sort("ivy.ifst"));
        conj = conj && forall(Y,!pto(v,Y));
    }
    {
        z3::func_decl pto = g.ctx.function("*>:ivy.stmt:ivy.whilest",g.sort("ivy.stmt"),g.sort("ivy.whilest"),g.ctx.bool_sort());
        z3::expr Y = g.ctx.constant("Y",g.sort("ivy.whilest"));
        conj = conj && forall(Y,!pto(v,Y));
    }
    {
        z3::func_decl pto = g.ctx.function("*>:ivy.stmt:ivy.breakst",g.sort("ivy.stmt"),g.sort("ivy.breakst"),g.ctx.bool_sort());
        z3::expr Y = g.ctx.constant("Y",g.sort("ivy.breakst"));
        conj = conj && forall(Y,!pto(v,Y));
    }
    {
        z3::func_decl pto = g.ctx.function("*>:ivy.stmt:ivy.varst",g.sort("ivy.stmt"),g.sort("ivy.varst"),g.ctx.bool_sort());
        z3::expr Y = g.ctx.constant("Y",g.sort("ivy.varst"));
        conj = conj && forall(Y,!pto(v,Y));
    }

    return conj;
}
template <>
void __randomize<ivyc_s1::ivy__stmt>( gen &g, const  z3::expr &apply_expr) {
    std::ostringstream os;
    os << "__ivy.stmt__tmp" << ivyc_s1::ivy__stmt::temp_counter++;
    std::string temp = os.str();
    z3::sort range = apply_expr.get_sort();
    z3::expr disj = g.ctx.bool_val(false);
int tag = rand() % 7;
    if (tag == 0) {
        z3::func_decl pto = g.ctx.function("*>:ivy.stmt:ivy.asgn",g.sort("ivy.stmt"),g.sort("ivy.asgn"),g.ctx.bool_sort());
        z3::expr X = g.ctx.constant(temp.c_str(),g.sort("ivy.asgn"));
        z3::expr pred = pto(apply_expr,X);
        g.add_alit(pred);
        __randomize<ivyc_s1::ivy__asgn>(g,X);
    }
    if (tag == 1) {
        z3::func_decl pto = g.ctx.function("*>:ivy.stmt:ivy.sequence",g.sort("ivy.stmt"),g.sort("ivy.sequence"),g.ctx.bool_sort());
        z3::expr X = g.ctx.constant(temp.c_str(),g.sort("ivy.sequence"));
        z3::expr pred = pto(apply_expr,X);
        g.add_alit(pred);
        __randomize<ivyc_s1::ivy__sequence>(g,X);
    }
    if (tag == 2) {
        z3::func_decl pto = g.ctx.function("*>:ivy.stmt:ivy.skipst",g.sort("ivy.stmt"),g.sort("ivy.skipst"),g.ctx.bool_sort());
        z3::expr X = g.ctx.constant(temp.c_str(),g.sort("ivy.skipst"));
        z3::expr pred = pto(apply_expr,X);
        g.add_alit(pred);
        __randomize<ivyc_s1::ivy__skipst>(g,X);
    }
    if (tag == 3) {
        z3::func_decl pto = g.ctx.function("*>:ivy.stmt:ivy.ifst",g.sort("ivy.stmt"),g.sort("ivy.ifst"),g.ctx.bool_sort());
        z3::expr X = g.ctx.constant(temp.c_str(),g.sort("ivy.ifst"));
        z3::expr pred = pto(apply_expr,X);
        g.add_alit(pred);
        __randomize<ivyc_s1::ivy__ifst>(g,X);
    }
    if (tag == 4) {
        z3::func_decl pto = g.ctx.function("*>:ivy.stmt:ivy.whilest",g.sort("ivy.stmt"),g.sort("ivy.whilest"),g.ctx.bool_sort());
        z3::expr X = g.ctx.constant(temp.c_str(),g.sort("ivy.whilest"));
        z3::expr pred = pto(apply_expr,X);
        g.add_alit(pred);
        __randomize<ivyc_s1::ivy__whilest>(g,X);
    }
    if (tag == 5) {
        z3::func_decl pto = g.ctx.function("*>:ivy.stmt:ivy.breakst",g.sort("ivy.stmt"),g.sort("ivy.breakst"),g.ctx.bool_sort());
        z3::expr X = g.ctx.constant(temp.c_str(),g.sort("ivy.breakst"));
        z3::expr pred = pto(apply_expr,X);
        g.add_alit(pred);
        __randomize<ivyc_s1::ivy__breakst>(g,X);
    }
    if (tag == 6) {
        z3::func_decl pto = g.ctx.function("*>:ivy.stmt:ivy.varst",g.sort("ivy.stmt"),g.sort("ivy.varst"),g.ctx.bool_sort());
        z3::expr X = g.ctx.constant(temp.c_str(),g.sort("ivy.varst"));
        z3::expr pred = pto(apply_expr,X);
        g.add_alit(pred);
        __randomize<ivyc_s1::ivy__varst>(g,X);
    }

}
#endif

int ivyc_s1::ivy__decl::temp_counter = 0;

std::ostream &operator <<(std::ostream &s, const ivyc_s1::ivy__decl &t){
    s << "{";
    switch (t.tag) {
        case 0: s << "ivy.actdc:" << ivyc_s1::ivy__decl::unwrap< ivyc_s1::ivy__actdc >(t); break;
        case 1: s << "ivy.groupdc:" << ivyc_s1::ivy__decl::unwrap< ivyc_s1::ivy__groupdc >(t); break;
        case 2: s << "ivy.typedc:" << ivyc_s1::ivy__decl::unwrap< ivyc_s1::ivy__typedc >(t); break;
        case 3: s << "ivy.vardc:" << ivyc_s1::ivy__decl::unwrap< ivyc_s1::ivy__vardc >(t); break;
        case 4: s << "ivy.header:" << ivyc_s1::ivy__decl::unwrap< ivyc_s1::ivy__header >(t); break;
        case 5: s << "ivy.interpdc:" << ivyc_s1::ivy__decl::unwrap< ivyc_s1::ivy__interpdc >(t); break;
        case 6: s << "ivy.includedc:" << ivyc_s1::ivy__decl::unwrap< ivyc_s1::ivy__includedc >(t); break;
        case 7: s << "ivy.moduledc:" << ivyc_s1::ivy__decl::unwrap< ivyc_s1::ivy__moduledc >(t); break;
        case 8: s << "ivy.instantiatedc:" << ivyc_s1::ivy__decl::unwrap< ivyc_s1::ivy__instantiatedc >(t); break;
        case 9: s << "ivy.objectdc:" << ivyc_s1::ivy__decl::unwrap< ivyc_s1::ivy__objectdc >(t); break;
        case 10: s << "ivy.instancedc:" << ivyc_s1::ivy__decl::unwrap< ivyc_s1::ivy__instancedc >(t); break;
        case 11: s << "ivy.initdc:" << ivyc_s1::ivy__decl::unwrap< ivyc_s1::ivy__initdc >(t); break;

    }
    s << "}";
    return s;
}
template <>
ivyc_s1::ivy__decl _arg<ivyc_s1::ivy__decl>(std::vector<ivy_value> &args, unsigned idx, long long bound) {
    if (args[idx].atom.size())
        throw out_of_bounds("unexpected value for sort ivy.decl: " + args[idx].atom,args[idx].pos);
    if (args[idx].fields.size() == 0)
        return ivyc_s1::ivy__decl();
    if (args[idx].fields.size() != 1)
        throw out_of_bounds("too many fields for sort ivy.decl (expected one)",args[idx].pos);
    if (args[idx].fields[0].atom == "ivy.actdc") return ivyc_s1::ivy__decl(0, new ivyc_s1::ivy__decl::twrap<ivyc_s1::ivy__actdc>(_arg<ivyc_s1::ivy__actdc>(args[idx].fields[0].fields,0,0)));
    if (args[idx].fields[0].atom == "ivy.groupdc") return ivyc_s1::ivy__decl(1, new ivyc_s1::ivy__decl::twrap<ivyc_s1::ivy__groupdc>(_arg<ivyc_s1::ivy__groupdc>(args[idx].fields[0].fields,0,0)));
    if (args[idx].fields[0].atom == "ivy.typedc") return ivyc_s1::ivy__decl(2, new ivyc_s1::ivy__decl::twrap<ivyc_s1::ivy__typedc>(_arg<ivyc_s1::ivy__typedc>(args[idx].fields[0].fields,0,0)));
    if (args[idx].fields[0].atom == "ivy.vardc") return ivyc_s1::ivy__decl(3, new ivyc_s1::ivy__decl::twrap<ivyc_s1::ivy__vardc>(_arg<ivyc_s1::ivy__vardc>(args[idx].fields[0].fields,0,0)));
    if (args[idx].fields[0].atom == "ivy.header") return ivyc_s1::ivy__decl(4, new ivyc_s1::ivy__decl::twrap<ivyc_s1::ivy__header>(_arg<ivyc_s1::ivy__header>(args[idx].fields[0].fields,0,0)));
    if (args[idx].fields[0].atom == "ivy.interpdc") return ivyc_s1::ivy__decl(5, new ivyc_s1::ivy__decl::twrap<ivyc_s1::ivy__interpdc>(_arg<ivyc_s1::ivy__interpdc>(args[idx].fields[0].fields,0,0)));
    if (args[idx].fields[0].atom == "ivy.includedc") return ivyc_s1::ivy__decl(6, new ivyc_s1::ivy__decl::twrap<ivyc_s1::ivy__includedc>(_arg<ivyc_s1::ivy__includedc>(args[idx].fields[0].fields,0,0)));
    if (args[idx].fields[0].atom == "ivy.moduledc") return ivyc_s1::ivy__decl(7, new ivyc_s1::ivy__decl::twrap<ivyc_s1::ivy__moduledc>(_arg<ivyc_s1::ivy__moduledc>(args[idx].fields[0].fields,0,0)));
    if (args[idx].fields[0].atom == "ivy.instantiatedc") return ivyc_s1::ivy__decl(8, new ivyc_s1::ivy__decl::twrap<ivyc_s1::ivy__instantiatedc>(_arg<ivyc_s1::ivy__instantiatedc>(args[idx].fields[0].fields,0,0)));
    if (args[idx].fields[0].atom == "ivy.objectdc") return ivyc_s1::ivy__decl(9, new ivyc_s1::ivy__decl::twrap<ivyc_s1::ivy__objectdc>(_arg<ivyc_s1::ivy__objectdc>(args[idx].fields[0].fields,0,0)));
    if (args[idx].fields[0].atom == "ivy.instancedc") return ivyc_s1::ivy__decl(10, new ivyc_s1::ivy__decl::twrap<ivyc_s1::ivy__instancedc>(_arg<ivyc_s1::ivy__instancedc>(args[idx].fields[0].fields,0,0)));
    if (args[idx].fields[0].atom == "ivy.initdc") return ivyc_s1::ivy__decl(11, new ivyc_s1::ivy__decl::twrap<ivyc_s1::ivy__initdc>(_arg<ivyc_s1::ivy__initdc>(args[idx].fields[0].fields,0,0)));

        throw out_of_bounds("unexpected field sort SORTNAME: " + args[idx].fields[0].atom, args[idx].pos);
}
template <>
void __ser<ivyc_s1::ivy__decl>(ivy_ser &res, const ivyc_s1::ivy__decl &inp) {
    if (inp.tag == 0) {res.open_tag(0,"ivy.actdc"); __ser(res,ivyc_s1::ivy__decl::unwrap< ivyc_s1::ivy__actdc >(inp)); res.close_tag();}
    if (inp.tag == 1) {res.open_tag(1,"ivy.groupdc"); __ser(res,ivyc_s1::ivy__decl::unwrap< ivyc_s1::ivy__groupdc >(inp)); res.close_tag();}
    if (inp.tag == 2) {res.open_tag(2,"ivy.typedc"); __ser(res,ivyc_s1::ivy__decl::unwrap< ivyc_s1::ivy__typedc >(inp)); res.close_tag();}
    if (inp.tag == 3) {res.open_tag(3,"ivy.vardc"); __ser(res,ivyc_s1::ivy__decl::unwrap< ivyc_s1::ivy__vardc >(inp)); res.close_tag();}
    if (inp.tag == 4) {res.open_tag(4,"ivy.header"); __ser(res,ivyc_s1::ivy__decl::unwrap< ivyc_s1::ivy__header >(inp)); res.close_tag();}
    if (inp.tag == 5) {res.open_tag(5,"ivy.interpdc"); __ser(res,ivyc_s1::ivy__decl::unwrap< ivyc_s1::ivy__interpdc >(inp)); res.close_tag();}
    if (inp.tag == 6) {res.open_tag(6,"ivy.includedc"); __ser(res,ivyc_s1::ivy__decl::unwrap< ivyc_s1::ivy__includedc >(inp)); res.close_tag();}
    if (inp.tag == 7) {res.open_tag(7,"ivy.moduledc"); __ser(res,ivyc_s1::ivy__decl::unwrap< ivyc_s1::ivy__moduledc >(inp)); res.close_tag();}
    if (inp.tag == 8) {res.open_tag(8,"ivy.instantiatedc"); __ser(res,ivyc_s1::ivy__decl::unwrap< ivyc_s1::ivy__instantiatedc >(inp)); res.close_tag();}
    if (inp.tag == 9) {res.open_tag(9,"ivy.objectdc"); __ser(res,ivyc_s1::ivy__decl::unwrap< ivyc_s1::ivy__objectdc >(inp)); res.close_tag();}
    if (inp.tag == 10) {res.open_tag(10,"ivy.instancedc"); __ser(res,ivyc_s1::ivy__decl::unwrap< ivyc_s1::ivy__instancedc >(inp)); res.close_tag();}
    if (inp.tag == 11) {res.open_tag(11,"ivy.initdc"); __ser(res,ivyc_s1::ivy__decl::unwrap< ivyc_s1::ivy__initdc >(inp)); res.close_tag();}

}
template <>
void __deser<ivyc_s1::ivy__decl>(ivy_deser &res, ivyc_s1::ivy__decl &inp) {
    std::vector<std::string> tags;
    tags.push_back("ivy.actdc");
    tags.push_back("ivy.groupdc");
    tags.push_back("ivy.typedc");
    tags.push_back("ivy.vardc");
    tags.push_back("ivy.header");
    tags.push_back("ivy.interpdc");
    tags.push_back("ivy.includedc");
    tags.push_back("ivy.moduledc");
    tags.push_back("ivy.instantiatedc");
    tags.push_back("ivy.objectdc");
    tags.push_back("ivy.instancedc");
    tags.push_back("ivy.initdc");

    int tag = res.open_tag(tags);
    switch (tag) {
    case 0: {ivyc_s1::ivy__actdc tmp; __deser(res,tmp); inp = ivyc_s1::ivy__decl(0, new ivyc_s1::ivy__decl::twrap<ivyc_s1::ivy__actdc>(tmp)); break;} 
    case 1: {ivyc_s1::ivy__groupdc tmp; __deser(res,tmp); inp = ivyc_s1::ivy__decl(1, new ivyc_s1::ivy__decl::twrap<ivyc_s1::ivy__groupdc>(tmp)); break;} 
    case 2: {ivyc_s1::ivy__typedc tmp; __deser(res,tmp); inp = ivyc_s1::ivy__decl(2, new ivyc_s1::ivy__decl::twrap<ivyc_s1::ivy__typedc>(tmp)); break;} 
    case 3: {ivyc_s1::ivy__vardc tmp; __deser(res,tmp); inp = ivyc_s1::ivy__decl(3, new ivyc_s1::ivy__decl::twrap<ivyc_s1::ivy__vardc>(tmp)); break;} 
    case 4: {ivyc_s1::ivy__header tmp; __deser(res,tmp); inp = ivyc_s1::ivy__decl(4, new ivyc_s1::ivy__decl::twrap<ivyc_s1::ivy__header>(tmp)); break;} 
    case 5: {ivyc_s1::ivy__interpdc tmp; __deser(res,tmp); inp = ivyc_s1::ivy__decl(5, new ivyc_s1::ivy__decl::twrap<ivyc_s1::ivy__interpdc>(tmp)); break;} 
    case 6: {ivyc_s1::ivy__includedc tmp; __deser(res,tmp); inp = ivyc_s1::ivy__decl(6, new ivyc_s1::ivy__decl::twrap<ivyc_s1::ivy__includedc>(tmp)); break;} 
    case 7: {ivyc_s1::ivy__moduledc tmp; __deser(res,tmp); inp = ivyc_s1::ivy__decl(7, new ivyc_s1::ivy__decl::twrap<ivyc_s1::ivy__moduledc>(tmp)); break;} 
    case 8: {ivyc_s1::ivy__instantiatedc tmp; __deser(res,tmp); inp = ivyc_s1::ivy__decl(8, new ivyc_s1::ivy__decl::twrap<ivyc_s1::ivy__instantiatedc>(tmp)); break;} 
    case 9: {ivyc_s1::ivy__objectdc tmp; __deser(res,tmp); inp = ivyc_s1::ivy__decl(9, new ivyc_s1::ivy__decl::twrap<ivyc_s1::ivy__objectdc>(tmp)); break;} 
    case 10: {ivyc_s1::ivy__instancedc tmp; __deser(res,tmp); inp = ivyc_s1::ivy__decl(10, new ivyc_s1::ivy__decl::twrap<ivyc_s1::ivy__instancedc>(tmp)); break;} 
    case 11: {ivyc_s1::ivy__initdc tmp; __deser(res,tmp); inp = ivyc_s1::ivy__decl(11, new ivyc_s1::ivy__decl::twrap<ivyc_s1::ivy__initdc>(tmp)); break;} 

    }
    res.close_tag();
}
#ifdef Z3PP_H_
template <>
void __from_solver<ivyc_s1::ivy__decl>( gen &g, const  z3::expr &v, ivyc_s1::ivy__decl &res) {
    {
        z3::sort sort = g.sort("ivy.actdc");
        z3::func_decl pto = g.ctx.function("*>:ivy.decl:ivy.actdc",g.sort("ivy.decl"),g.sort("ivy.actdc"),g.ctx.bool_sort());
        // std::cout <<  g.model << std::endl;
        Z3_ast_vector av = Z3_model_get_sort_universe(g.ctx, g.model, sort);
        if (av) {
            z3::expr_vector univ(g.ctx,av);
            for (unsigned i = 0; i < univ.size(); i++){
                if (eq(g.model.eval(pto(v,univ[i]),true),g.ctx.bool_val(true))){
                    ivyc_s1::ivy__actdc tmp;
                    __from_solver(g,univ[i],tmp);                    res = ivyc_s1::ivy__decl(0, new ivyc_s1::ivy__decl::twrap<ivyc_s1::ivy__actdc>(tmp));
                }
            }
        }
    }
    {
        z3::sort sort = g.sort("ivy.groupdc");
        z3::func_decl pto = g.ctx.function("*>:ivy.decl:ivy.groupdc",g.sort("ivy.decl"),g.sort("ivy.groupdc"),g.ctx.bool_sort());
        // std::cout <<  g.model << std::endl;
        Z3_ast_vector av = Z3_model_get_sort_universe(g.ctx, g.model, sort);
        if (av) {
            z3::expr_vector univ(g.ctx,av);
            for (unsigned i = 0; i < univ.size(); i++){
                if (eq(g.model.eval(pto(v,univ[i]),true),g.ctx.bool_val(true))){
                    ivyc_s1::ivy__groupdc tmp;
                    __from_solver(g,univ[i],tmp);                    res = ivyc_s1::ivy__decl(1, new ivyc_s1::ivy__decl::twrap<ivyc_s1::ivy__groupdc>(tmp));
                }
            }
        }
    }
    {
        z3::sort sort = g.sort("ivy.typedc");
        z3::func_decl pto = g.ctx.function("*>:ivy.decl:ivy.typedc",g.sort("ivy.decl"),g.sort("ivy.typedc"),g.ctx.bool_sort());
        // std::cout <<  g.model << std::endl;
        Z3_ast_vector av = Z3_model_get_sort_universe(g.ctx, g.model, sort);
        if (av) {
            z3::expr_vector univ(g.ctx,av);
            for (unsigned i = 0; i < univ.size(); i++){
                if (eq(g.model.eval(pto(v,univ[i]),true),g.ctx.bool_val(true))){
                    ivyc_s1::ivy__typedc tmp;
                    __from_solver(g,univ[i],tmp);                    res = ivyc_s1::ivy__decl(2, new ivyc_s1::ivy__decl::twrap<ivyc_s1::ivy__typedc>(tmp));
                }
            }
        }
    }
    {
        z3::sort sort = g.sort("ivy.vardc");
        z3::func_decl pto = g.ctx.function("*>:ivy.decl:ivy.vardc",g.sort("ivy.decl"),g.sort("ivy.vardc"),g.ctx.bool_sort());
        // std::cout <<  g.model << std::endl;
        Z3_ast_vector av = Z3_model_get_sort_universe(g.ctx, g.model, sort);
        if (av) {
            z3::expr_vector univ(g.ctx,av);
            for (unsigned i = 0; i < univ.size(); i++){
                if (eq(g.model.eval(pto(v,univ[i]),true),g.ctx.bool_val(true))){
                    ivyc_s1::ivy__vardc tmp;
                    __from_solver(g,univ[i],tmp);                    res = ivyc_s1::ivy__decl(3, new ivyc_s1::ivy__decl::twrap<ivyc_s1::ivy__vardc>(tmp));
                }
            }
        }
    }
    {
        z3::sort sort = g.sort("ivy.header");
        z3::func_decl pto = g.ctx.function("*>:ivy.decl:ivy.header",g.sort("ivy.decl"),g.sort("ivy.header"),g.ctx.bool_sort());
        // std::cout <<  g.model << std::endl;
        Z3_ast_vector av = Z3_model_get_sort_universe(g.ctx, g.model, sort);
        if (av) {
            z3::expr_vector univ(g.ctx,av);
            for (unsigned i = 0; i < univ.size(); i++){
                if (eq(g.model.eval(pto(v,univ[i]),true),g.ctx.bool_val(true))){
                    ivyc_s1::ivy__header tmp;
                    __from_solver(g,univ[i],tmp);                    res = ivyc_s1::ivy__decl(4, new ivyc_s1::ivy__decl::twrap<ivyc_s1::ivy__header>(tmp));
                }
            }
        }
    }
    {
        z3::sort sort = g.sort("ivy.interpdc");
        z3::func_decl pto = g.ctx.function("*>:ivy.decl:ivy.interpdc",g.sort("ivy.decl"),g.sort("ivy.interpdc"),g.ctx.bool_sort());
        // std::cout <<  g.model << std::endl;
        Z3_ast_vector av = Z3_model_get_sort_universe(g.ctx, g.model, sort);
        if (av) {
            z3::expr_vector univ(g.ctx,av);
            for (unsigned i = 0; i < univ.size(); i++){
                if (eq(g.model.eval(pto(v,univ[i]),true),g.ctx.bool_val(true))){
                    ivyc_s1::ivy__interpdc tmp;
                    __from_solver(g,univ[i],tmp);                    res = ivyc_s1::ivy__decl(5, new ivyc_s1::ivy__decl::twrap<ivyc_s1::ivy__interpdc>(tmp));
                }
            }
        }
    }
    {
        z3::sort sort = g.sort("ivy.includedc");
        z3::func_decl pto = g.ctx.function("*>:ivy.decl:ivy.includedc",g.sort("ivy.decl"),g.sort("ivy.includedc"),g.ctx.bool_sort());
        // std::cout <<  g.model << std::endl;
        Z3_ast_vector av = Z3_model_get_sort_universe(g.ctx, g.model, sort);
        if (av) {
            z3::expr_vector univ(g.ctx,av);
            for (unsigned i = 0; i < univ.size(); i++){
                if (eq(g.model.eval(pto(v,univ[i]),true),g.ctx.bool_val(true))){
                    ivyc_s1::ivy__includedc tmp;
                    __from_solver(g,univ[i],tmp);                    res = ivyc_s1::ivy__decl(6, new ivyc_s1::ivy__decl::twrap<ivyc_s1::ivy__includedc>(tmp));
                }
            }
        }
    }
    {
        z3::sort sort = g.sort("ivy.moduledc");
        z3::func_decl pto = g.ctx.function("*>:ivy.decl:ivy.moduledc",g.sort("ivy.decl"),g.sort("ivy.moduledc"),g.ctx.bool_sort());
        // std::cout <<  g.model << std::endl;
        Z3_ast_vector av = Z3_model_get_sort_universe(g.ctx, g.model, sort);
        if (av) {
            z3::expr_vector univ(g.ctx,av);
            for (unsigned i = 0; i < univ.size(); i++){
                if (eq(g.model.eval(pto(v,univ[i]),true),g.ctx.bool_val(true))){
                    ivyc_s1::ivy__moduledc tmp;
                    __from_solver(g,univ[i],tmp);                    res = ivyc_s1::ivy__decl(7, new ivyc_s1::ivy__decl::twrap<ivyc_s1::ivy__moduledc>(tmp));
                }
            }
        }
    }
    {
        z3::sort sort = g.sort("ivy.instantiatedc");
        z3::func_decl pto = g.ctx.function("*>:ivy.decl:ivy.instantiatedc",g.sort("ivy.decl"),g.sort("ivy.instantiatedc"),g.ctx.bool_sort());
        // std::cout <<  g.model << std::endl;
        Z3_ast_vector av = Z3_model_get_sort_universe(g.ctx, g.model, sort);
        if (av) {
            z3::expr_vector univ(g.ctx,av);
            for (unsigned i = 0; i < univ.size(); i++){
                if (eq(g.model.eval(pto(v,univ[i]),true),g.ctx.bool_val(true))){
                    ivyc_s1::ivy__instantiatedc tmp;
                    __from_solver(g,univ[i],tmp);                    res = ivyc_s1::ivy__decl(8, new ivyc_s1::ivy__decl::twrap<ivyc_s1::ivy__instantiatedc>(tmp));
                }
            }
        }
    }
    {
        z3::sort sort = g.sort("ivy.objectdc");
        z3::func_decl pto = g.ctx.function("*>:ivy.decl:ivy.objectdc",g.sort("ivy.decl"),g.sort("ivy.objectdc"),g.ctx.bool_sort());
        // std::cout <<  g.model << std::endl;
        Z3_ast_vector av = Z3_model_get_sort_universe(g.ctx, g.model, sort);
        if (av) {
            z3::expr_vector univ(g.ctx,av);
            for (unsigned i = 0; i < univ.size(); i++){
                if (eq(g.model.eval(pto(v,univ[i]),true),g.ctx.bool_val(true))){
                    ivyc_s1::ivy__objectdc tmp;
                    __from_solver(g,univ[i],tmp);                    res = ivyc_s1::ivy__decl(9, new ivyc_s1::ivy__decl::twrap<ivyc_s1::ivy__objectdc>(tmp));
                }
            }
        }
    }
    {
        z3::sort sort = g.sort("ivy.instancedc");
        z3::func_decl pto = g.ctx.function("*>:ivy.decl:ivy.instancedc",g.sort("ivy.decl"),g.sort("ivy.instancedc"),g.ctx.bool_sort());
        // std::cout <<  g.model << std::endl;
        Z3_ast_vector av = Z3_model_get_sort_universe(g.ctx, g.model, sort);
        if (av) {
            z3::expr_vector univ(g.ctx,av);
            for (unsigned i = 0; i < univ.size(); i++){
                if (eq(g.model.eval(pto(v,univ[i]),true),g.ctx.bool_val(true))){
                    ivyc_s1::ivy__instancedc tmp;
                    __from_solver(g,univ[i],tmp);                    res = ivyc_s1::ivy__decl(10, new ivyc_s1::ivy__decl::twrap<ivyc_s1::ivy__instancedc>(tmp));
                }
            }
        }
    }
    {
        z3::sort sort = g.sort("ivy.initdc");
        z3::func_decl pto = g.ctx.function("*>:ivy.decl:ivy.initdc",g.sort("ivy.decl"),g.sort("ivy.initdc"),g.ctx.bool_sort());
        // std::cout <<  g.model << std::endl;
        Z3_ast_vector av = Z3_model_get_sort_universe(g.ctx, g.model, sort);
        if (av) {
            z3::expr_vector univ(g.ctx,av);
            for (unsigned i = 0; i < univ.size(); i++){
                if (eq(g.model.eval(pto(v,univ[i]),true),g.ctx.bool_val(true))){
                    ivyc_s1::ivy__initdc tmp;
                    __from_solver(g,univ[i],tmp);                    res = ivyc_s1::ivy__decl(11, new ivyc_s1::ivy__decl::twrap<ivyc_s1::ivy__initdc>(tmp));
                }
            }
        }
    }

}
template <>
z3::expr __to_solver<ivyc_s1::ivy__decl>( gen &g, const  z3::expr &v, ivyc_s1::ivy__decl &val) {
//    std::cout << v << ":" << v.get_sort() << std::endl;
    if (val.tag == 0) {
        z3::func_decl pto = g.ctx.function("*>:ivy.decl:ivy.actdc",g.sort("ivy.decl"),g.sort("ivy.actdc"),g.ctx.bool_sort());
        z3::expr X = g.ctx.constant("X",g.sort("ivy.actdc"));
        ivyc_s1::ivy__actdc tmp = ivyc_s1::ivy__decl::unwrap< ivyc_s1::ivy__actdc >(val);
        return exists(X,pto(v,X) && __to_solver(g,X,tmp));
    }
    if (val.tag == 1) {
        z3::func_decl pto = g.ctx.function("*>:ivy.decl:ivy.groupdc",g.sort("ivy.decl"),g.sort("ivy.groupdc"),g.ctx.bool_sort());
        z3::expr X = g.ctx.constant("X",g.sort("ivy.groupdc"));
        ivyc_s1::ivy__groupdc tmp = ivyc_s1::ivy__decl::unwrap< ivyc_s1::ivy__groupdc >(val);
        return exists(X,pto(v,X) && __to_solver(g,X,tmp));
    }
    if (val.tag == 2) {
        z3::func_decl pto = g.ctx.function("*>:ivy.decl:ivy.typedc",g.sort("ivy.decl"),g.sort("ivy.typedc"),g.ctx.bool_sort());
        z3::expr X = g.ctx.constant("X",g.sort("ivy.typedc"));
        ivyc_s1::ivy__typedc tmp = ivyc_s1::ivy__decl::unwrap< ivyc_s1::ivy__typedc >(val);
        return exists(X,pto(v,X) && __to_solver(g,X,tmp));
    }
    if (val.tag == 3) {
        z3::func_decl pto = g.ctx.function("*>:ivy.decl:ivy.vardc",g.sort("ivy.decl"),g.sort("ivy.vardc"),g.ctx.bool_sort());
        z3::expr X = g.ctx.constant("X",g.sort("ivy.vardc"));
        ivyc_s1::ivy__vardc tmp = ivyc_s1::ivy__decl::unwrap< ivyc_s1::ivy__vardc >(val);
        return exists(X,pto(v,X) && __to_solver(g,X,tmp));
    }
    if (val.tag == 4) {
        z3::func_decl pto = g.ctx.function("*>:ivy.decl:ivy.header",g.sort("ivy.decl"),g.sort("ivy.header"),g.ctx.bool_sort());
        z3::expr X = g.ctx.constant("X",g.sort("ivy.header"));
        ivyc_s1::ivy__header tmp = ivyc_s1::ivy__decl::unwrap< ivyc_s1::ivy__header >(val);
        return exists(X,pto(v,X) && __to_solver(g,X,tmp));
    }
    if (val.tag == 5) {
        z3::func_decl pto = g.ctx.function("*>:ivy.decl:ivy.interpdc",g.sort("ivy.decl"),g.sort("ivy.interpdc"),g.ctx.bool_sort());
        z3::expr X = g.ctx.constant("X",g.sort("ivy.interpdc"));
        ivyc_s1::ivy__interpdc tmp = ivyc_s1::ivy__decl::unwrap< ivyc_s1::ivy__interpdc >(val);
        return exists(X,pto(v,X) && __to_solver(g,X,tmp));
    }
    if (val.tag == 6) {
        z3::func_decl pto = g.ctx.function("*>:ivy.decl:ivy.includedc",g.sort("ivy.decl"),g.sort("ivy.includedc"),g.ctx.bool_sort());
        z3::expr X = g.ctx.constant("X",g.sort("ivy.includedc"));
        ivyc_s1::ivy__includedc tmp = ivyc_s1::ivy__decl::unwrap< ivyc_s1::ivy__includedc >(val);
        return exists(X,pto(v,X) && __to_solver(g,X,tmp));
    }
    if (val.tag == 7) {
        z3::func_decl pto = g.ctx.function("*>:ivy.decl:ivy.moduledc",g.sort("ivy.decl"),g.sort("ivy.moduledc"),g.ctx.bool_sort());
        z3::expr X = g.ctx.constant("X",g.sort("ivy.moduledc"));
        ivyc_s1::ivy__moduledc tmp = ivyc_s1::ivy__decl::unwrap< ivyc_s1::ivy__moduledc >(val);
        return exists(X,pto(v,X) && __to_solver(g,X,tmp));
    }
    if (val.tag == 8) {
        z3::func_decl pto = g.ctx.function("*>:ivy.decl:ivy.instantiatedc",g.sort("ivy.decl"),g.sort("ivy.instantiatedc"),g.ctx.bool_sort());
        z3::expr X = g.ctx.constant("X",g.sort("ivy.instantiatedc"));
        ivyc_s1::ivy__instantiatedc tmp = ivyc_s1::ivy__decl::unwrap< ivyc_s1::ivy__instantiatedc >(val);
        return exists(X,pto(v,X) && __to_solver(g,X,tmp));
    }
    if (val.tag == 9) {
        z3::func_decl pto = g.ctx.function("*>:ivy.decl:ivy.objectdc",g.sort("ivy.decl"),g.sort("ivy.objectdc"),g.ctx.bool_sort());
        z3::expr X = g.ctx.constant("X",g.sort("ivy.objectdc"));
        ivyc_s1::ivy__objectdc tmp = ivyc_s1::ivy__decl::unwrap< ivyc_s1::ivy__objectdc >(val);
        return exists(X,pto(v,X) && __to_solver(g,X,tmp));
    }
    if (val.tag == 10) {
        z3::func_decl pto = g.ctx.function("*>:ivy.decl:ivy.instancedc",g.sort("ivy.decl"),g.sort("ivy.instancedc"),g.ctx.bool_sort());
        z3::expr X = g.ctx.constant("X",g.sort("ivy.instancedc"));
        ivyc_s1::ivy__instancedc tmp = ivyc_s1::ivy__decl::unwrap< ivyc_s1::ivy__instancedc >(val);
        return exists(X,pto(v,X) && __to_solver(g,X,tmp));
    }
    if (val.tag == 11) {
        z3::func_decl pto = g.ctx.function("*>:ivy.decl:ivy.initdc",g.sort("ivy.decl"),g.sort("ivy.initdc"),g.ctx.bool_sort());
        z3::expr X = g.ctx.constant("X",g.sort("ivy.initdc"));
        ivyc_s1::ivy__initdc tmp = ivyc_s1::ivy__decl::unwrap< ivyc_s1::ivy__initdc >(val);
        return exists(X,pto(v,X) && __to_solver(g,X,tmp));
    }

    z3::expr conj = g.ctx.bool_val(false);
    {
        z3::func_decl pto = g.ctx.function("*>:ivy.decl:ivy.actdc",g.sort("ivy.decl"),g.sort("ivy.actdc"),g.ctx.bool_sort());
        z3::expr Y = g.ctx.constant("Y",g.sort("ivy.actdc"));
        conj = conj && forall(Y,!pto(v,Y));
    }
    {
        z3::func_decl pto = g.ctx.function("*>:ivy.decl:ivy.groupdc",g.sort("ivy.decl"),g.sort("ivy.groupdc"),g.ctx.bool_sort());
        z3::expr Y = g.ctx.constant("Y",g.sort("ivy.groupdc"));
        conj = conj && forall(Y,!pto(v,Y));
    }
    {
        z3::func_decl pto = g.ctx.function("*>:ivy.decl:ivy.typedc",g.sort("ivy.decl"),g.sort("ivy.typedc"),g.ctx.bool_sort());
        z3::expr Y = g.ctx.constant("Y",g.sort("ivy.typedc"));
        conj = conj && forall(Y,!pto(v,Y));
    }
    {
        z3::func_decl pto = g.ctx.function("*>:ivy.decl:ivy.vardc",g.sort("ivy.decl"),g.sort("ivy.vardc"),g.ctx.bool_sort());
        z3::expr Y = g.ctx.constant("Y",g.sort("ivy.vardc"));
        conj = conj && forall(Y,!pto(v,Y));
    }
    {
        z3::func_decl pto = g.ctx.function("*>:ivy.decl:ivy.header",g.sort("ivy.decl"),g.sort("ivy.header"),g.ctx.bool_sort());
        z3::expr Y = g.ctx.constant("Y",g.sort("ivy.header"));
        conj = conj && forall(Y,!pto(v,Y));
    }
    {
        z3::func_decl pto = g.ctx.function("*>:ivy.decl:ivy.interpdc",g.sort("ivy.decl"),g.sort("ivy.interpdc"),g.ctx.bool_sort());
        z3::expr Y = g.ctx.constant("Y",g.sort("ivy.interpdc"));
        conj = conj && forall(Y,!pto(v,Y));
    }
    {
        z3::func_decl pto = g.ctx.function("*>:ivy.decl:ivy.includedc",g.sort("ivy.decl"),g.sort("ivy.includedc"),g.ctx.bool_sort());
        z3::expr Y = g.ctx.constant("Y",g.sort("ivy.includedc"));
        conj = conj && forall(Y,!pto(v,Y));
    }
    {
        z3::func_decl pto = g.ctx.function("*>:ivy.decl:ivy.moduledc",g.sort("ivy.decl"),g.sort("ivy.moduledc"),g.ctx.bool_sort());
        z3::expr Y = g.ctx.constant("Y",g.sort("ivy.moduledc"));
        conj = conj && forall(Y,!pto(v,Y));
    }
    {
        z3::func_decl pto = g.ctx.function("*>:ivy.decl:ivy.instantiatedc",g.sort("ivy.decl"),g.sort("ivy.instantiatedc"),g.ctx.bool_sort());
        z3::expr Y = g.ctx.constant("Y",g.sort("ivy.instantiatedc"));
        conj = conj && forall(Y,!pto(v,Y));
    }
    {
        z3::func_decl pto = g.ctx.function("*>:ivy.decl:ivy.objectdc",g.sort("ivy.decl"),g.sort("ivy.objectdc"),g.ctx.bool_sort());
        z3::expr Y = g.ctx.constant("Y",g.sort("ivy.objectdc"));
        conj = conj && forall(Y,!pto(v,Y));
    }
    {
        z3::func_decl pto = g.ctx.function("*>:ivy.decl:ivy.instancedc",g.sort("ivy.decl"),g.sort("ivy.instancedc"),g.ctx.bool_sort());
        z3::expr Y = g.ctx.constant("Y",g.sort("ivy.instancedc"));
        conj = conj && forall(Y,!pto(v,Y));
    }
    {
        z3::func_decl pto = g.ctx.function("*>:ivy.decl:ivy.initdc",g.sort("ivy.decl"),g.sort("ivy.initdc"),g.ctx.bool_sort());
        z3::expr Y = g.ctx.constant("Y",g.sort("ivy.initdc"));
        conj = conj && forall(Y,!pto(v,Y));
    }

    return conj;
}
template <>
void __randomize<ivyc_s1::ivy__decl>( gen &g, const  z3::expr &apply_expr) {
    std::ostringstream os;
    os << "__ivy.decl__tmp" << ivyc_s1::ivy__decl::temp_counter++;
    std::string temp = os.str();
    z3::sort range = apply_expr.get_sort();
    z3::expr disj = g.ctx.bool_val(false);
int tag = rand() % 12;
    if (tag == 0) {
        z3::func_decl pto = g.ctx.function("*>:ivy.decl:ivy.actdc",g.sort("ivy.decl"),g.sort("ivy.actdc"),g.ctx.bool_sort());
        z3::expr X = g.ctx.constant(temp.c_str(),g.sort("ivy.actdc"));
        z3::expr pred = pto(apply_expr,X);
        g.add_alit(pred);
        __randomize<ivyc_s1::ivy__actdc>(g,X);
    }
    if (tag == 1) {
        z3::func_decl pto = g.ctx.function("*>:ivy.decl:ivy.groupdc",g.sort("ivy.decl"),g.sort("ivy.groupdc"),g.ctx.bool_sort());
        z3::expr X = g.ctx.constant(temp.c_str(),g.sort("ivy.groupdc"));
        z3::expr pred = pto(apply_expr,X);
        g.add_alit(pred);
        __randomize<ivyc_s1::ivy__groupdc>(g,X);
    }
    if (tag == 2) {
        z3::func_decl pto = g.ctx.function("*>:ivy.decl:ivy.typedc",g.sort("ivy.decl"),g.sort("ivy.typedc"),g.ctx.bool_sort());
        z3::expr X = g.ctx.constant(temp.c_str(),g.sort("ivy.typedc"));
        z3::expr pred = pto(apply_expr,X);
        g.add_alit(pred);
        __randomize<ivyc_s1::ivy__typedc>(g,X);
    }
    if (tag == 3) {
        z3::func_decl pto = g.ctx.function("*>:ivy.decl:ivy.vardc",g.sort("ivy.decl"),g.sort("ivy.vardc"),g.ctx.bool_sort());
        z3::expr X = g.ctx.constant(temp.c_str(),g.sort("ivy.vardc"));
        z3::expr pred = pto(apply_expr,X);
        g.add_alit(pred);
        __randomize<ivyc_s1::ivy__vardc>(g,X);
    }
    if (tag == 4) {
        z3::func_decl pto = g.ctx.function("*>:ivy.decl:ivy.header",g.sort("ivy.decl"),g.sort("ivy.header"),g.ctx.bool_sort());
        z3::expr X = g.ctx.constant(temp.c_str(),g.sort("ivy.header"));
        z3::expr pred = pto(apply_expr,X);
        g.add_alit(pred);
        __randomize<ivyc_s1::ivy__header>(g,X);
    }
    if (tag == 5) {
        z3::func_decl pto = g.ctx.function("*>:ivy.decl:ivy.interpdc",g.sort("ivy.decl"),g.sort("ivy.interpdc"),g.ctx.bool_sort());
        z3::expr X = g.ctx.constant(temp.c_str(),g.sort("ivy.interpdc"));
        z3::expr pred = pto(apply_expr,X);
        g.add_alit(pred);
        __randomize<ivyc_s1::ivy__interpdc>(g,X);
    }
    if (tag == 6) {
        z3::func_decl pto = g.ctx.function("*>:ivy.decl:ivy.includedc",g.sort("ivy.decl"),g.sort("ivy.includedc"),g.ctx.bool_sort());
        z3::expr X = g.ctx.constant(temp.c_str(),g.sort("ivy.includedc"));
        z3::expr pred = pto(apply_expr,X);
        g.add_alit(pred);
        __randomize<ivyc_s1::ivy__includedc>(g,X);
    }
    if (tag == 7) {
        z3::func_decl pto = g.ctx.function("*>:ivy.decl:ivy.moduledc",g.sort("ivy.decl"),g.sort("ivy.moduledc"),g.ctx.bool_sort());
        z3::expr X = g.ctx.constant(temp.c_str(),g.sort("ivy.moduledc"));
        z3::expr pred = pto(apply_expr,X);
        g.add_alit(pred);
        __randomize<ivyc_s1::ivy__moduledc>(g,X);
    }
    if (tag == 8) {
        z3::func_decl pto = g.ctx.function("*>:ivy.decl:ivy.instantiatedc",g.sort("ivy.decl"),g.sort("ivy.instantiatedc"),g.ctx.bool_sort());
        z3::expr X = g.ctx.constant(temp.c_str(),g.sort("ivy.instantiatedc"));
        z3::expr pred = pto(apply_expr,X);
        g.add_alit(pred);
        __randomize<ivyc_s1::ivy__instantiatedc>(g,X);
    }
    if (tag == 9) {
        z3::func_decl pto = g.ctx.function("*>:ivy.decl:ivy.objectdc",g.sort("ivy.decl"),g.sort("ivy.objectdc"),g.ctx.bool_sort());
        z3::expr X = g.ctx.constant(temp.c_str(),g.sort("ivy.objectdc"));
        z3::expr pred = pto(apply_expr,X);
        g.add_alit(pred);
        __randomize<ivyc_s1::ivy__objectdc>(g,X);
    }
    if (tag == 10) {
        z3::func_decl pto = g.ctx.function("*>:ivy.decl:ivy.instancedc",g.sort("ivy.decl"),g.sort("ivy.instancedc"),g.ctx.bool_sort());
        z3::expr X = g.ctx.constant(temp.c_str(),g.sort("ivy.instancedc"));
        z3::expr pred = pto(apply_expr,X);
        g.add_alit(pred);
        __randomize<ivyc_s1::ivy__instancedc>(g,X);
    }
    if (tag == 11) {
        z3::func_decl pto = g.ctx.function("*>:ivy.decl:ivy.initdc",g.sort("ivy.decl"),g.sort("ivy.initdc"),g.ctx.bool_sort());
        z3::expr X = g.ctx.constant(temp.c_str(),g.sort("ivy.initdc"));
        z3::expr pred = pto(apply_expr,X);
        g.add_alit(pred);
        __randomize<ivyc_s1::ivy__initdc>(g,X);
    }

}
#endif

int ivyc_s1::ivy__typespec::temp_counter = 0;

std::ostream &operator <<(std::ostream &s, const ivyc_s1::ivy__typespec &t){
    s << "{";
    switch (t.tag) {
        case 0: s << "ivy.enumspec:" << ivyc_s1::ivy__typespec::unwrap< ivyc_s1::ivy__enumspec >(t); break;
        case 1: s << "ivy.structspec:" << ivyc_s1::ivy__typespec::unwrap< ivyc_s1::ivy__structspec >(t); break;

    }
    s << "}";
    return s;
}
template <>
ivyc_s1::ivy__typespec _arg<ivyc_s1::ivy__typespec>(std::vector<ivy_value> &args, unsigned idx, long long bound) {
    if (args[idx].atom.size())
        throw out_of_bounds("unexpected value for sort ivy.typespec: " + args[idx].atom,args[idx].pos);
    if (args[idx].fields.size() == 0)
        return ivyc_s1::ivy__typespec();
    if (args[idx].fields.size() != 1)
        throw out_of_bounds("too many fields for sort ivy.typespec (expected one)",args[idx].pos);
    if (args[idx].fields[0].atom == "ivy.enumspec") return ivyc_s1::ivy__typespec(0, new ivyc_s1::ivy__typespec::twrap<ivyc_s1::ivy__enumspec>(_arg<ivyc_s1::ivy__enumspec>(args[idx].fields[0].fields,0,0)));
    if (args[idx].fields[0].atom == "ivy.structspec") return ivyc_s1::ivy__typespec(1, new ivyc_s1::ivy__typespec::twrap<ivyc_s1::ivy__structspec>(_arg<ivyc_s1::ivy__structspec>(args[idx].fields[0].fields,0,0)));

        throw out_of_bounds("unexpected field sort SORTNAME: " + args[idx].fields[0].atom, args[idx].pos);
}
template <>
void __ser<ivyc_s1::ivy__typespec>(ivy_ser &res, const ivyc_s1::ivy__typespec &inp) {
    if (inp.tag == 0) {res.open_tag(0,"ivy.enumspec"); __ser(res,ivyc_s1::ivy__typespec::unwrap< ivyc_s1::ivy__enumspec >(inp)); res.close_tag();}
    if (inp.tag == 1) {res.open_tag(1,"ivy.structspec"); __ser(res,ivyc_s1::ivy__typespec::unwrap< ivyc_s1::ivy__structspec >(inp)); res.close_tag();}

}
template <>
void __deser<ivyc_s1::ivy__typespec>(ivy_deser &res, ivyc_s1::ivy__typespec &inp) {
    std::vector<std::string> tags;
    tags.push_back("ivy.enumspec");
    tags.push_back("ivy.structspec");

    int tag = res.open_tag(tags);
    switch (tag) {
    case 0: {ivyc_s1::ivy__enumspec tmp; __deser(res,tmp); inp = ivyc_s1::ivy__typespec(0, new ivyc_s1::ivy__typespec::twrap<ivyc_s1::ivy__enumspec>(tmp)); break;} 
    case 1: {ivyc_s1::ivy__structspec tmp; __deser(res,tmp); inp = ivyc_s1::ivy__typespec(1, new ivyc_s1::ivy__typespec::twrap<ivyc_s1::ivy__structspec>(tmp)); break;} 

    }
    res.close_tag();
}
#ifdef Z3PP_H_
template <>
void __from_solver<ivyc_s1::ivy__typespec>( gen &g, const  z3::expr &v, ivyc_s1::ivy__typespec &res) {
    {
        z3::sort sort = g.sort("ivy.enumspec");
        z3::func_decl pto = g.ctx.function("*>:ivy.typespec:ivy.enumspec",g.sort("ivy.typespec"),g.sort("ivy.enumspec"),g.ctx.bool_sort());
        // std::cout <<  g.model << std::endl;
        Z3_ast_vector av = Z3_model_get_sort_universe(g.ctx, g.model, sort);
        if (av) {
            z3::expr_vector univ(g.ctx,av);
            for (unsigned i = 0; i < univ.size(); i++){
                if (eq(g.model.eval(pto(v,univ[i]),true),g.ctx.bool_val(true))){
                    ivyc_s1::ivy__enumspec tmp;
                    __from_solver(g,univ[i],tmp);                    res = ivyc_s1::ivy__typespec(0, new ivyc_s1::ivy__typespec::twrap<ivyc_s1::ivy__enumspec>(tmp));
                }
            }
        }
    }
    {
        z3::sort sort = g.sort("ivy.structspec");
        z3::func_decl pto = g.ctx.function("*>:ivy.typespec:ivy.structspec",g.sort("ivy.typespec"),g.sort("ivy.structspec"),g.ctx.bool_sort());
        // std::cout <<  g.model << std::endl;
        Z3_ast_vector av = Z3_model_get_sort_universe(g.ctx, g.model, sort);
        if (av) {
            z3::expr_vector univ(g.ctx,av);
            for (unsigned i = 0; i < univ.size(); i++){
                if (eq(g.model.eval(pto(v,univ[i]),true),g.ctx.bool_val(true))){
                    ivyc_s1::ivy__structspec tmp;
                    __from_solver(g,univ[i],tmp);                    res = ivyc_s1::ivy__typespec(1, new ivyc_s1::ivy__typespec::twrap<ivyc_s1::ivy__structspec>(tmp));
                }
            }
        }
    }

}
template <>
z3::expr __to_solver<ivyc_s1::ivy__typespec>( gen &g, const  z3::expr &v, ivyc_s1::ivy__typespec &val) {
//    std::cout << v << ":" << v.get_sort() << std::endl;
    if (val.tag == 0) {
        z3::func_decl pto = g.ctx.function("*>:ivy.typespec:ivy.enumspec",g.sort("ivy.typespec"),g.sort("ivy.enumspec"),g.ctx.bool_sort());
        z3::expr X = g.ctx.constant("X",g.sort("ivy.enumspec"));
        ivyc_s1::ivy__enumspec tmp = ivyc_s1::ivy__typespec::unwrap< ivyc_s1::ivy__enumspec >(val);
        return exists(X,pto(v,X) && __to_solver(g,X,tmp));
    }
    if (val.tag == 1) {
        z3::func_decl pto = g.ctx.function("*>:ivy.typespec:ivy.structspec",g.sort("ivy.typespec"),g.sort("ivy.structspec"),g.ctx.bool_sort());
        z3::expr X = g.ctx.constant("X",g.sort("ivy.structspec"));
        ivyc_s1::ivy__structspec tmp = ivyc_s1::ivy__typespec::unwrap< ivyc_s1::ivy__structspec >(val);
        return exists(X,pto(v,X) && __to_solver(g,X,tmp));
    }

    z3::expr conj = g.ctx.bool_val(false);
    {
        z3::func_decl pto = g.ctx.function("*>:ivy.typespec:ivy.enumspec",g.sort("ivy.typespec"),g.sort("ivy.enumspec"),g.ctx.bool_sort());
        z3::expr Y = g.ctx.constant("Y",g.sort("ivy.enumspec"));
        conj = conj && forall(Y,!pto(v,Y));
    }
    {
        z3::func_decl pto = g.ctx.function("*>:ivy.typespec:ivy.structspec",g.sort("ivy.typespec"),g.sort("ivy.structspec"),g.ctx.bool_sort());
        z3::expr Y = g.ctx.constant("Y",g.sort("ivy.structspec"));
        conj = conj && forall(Y,!pto(v,Y));
    }

    return conj;
}
template <>
void __randomize<ivyc_s1::ivy__typespec>( gen &g, const  z3::expr &apply_expr) {
    std::ostringstream os;
    os << "__ivy.typespec__tmp" << ivyc_s1::ivy__typespec::temp_counter++;
    std::string temp = os.str();
    z3::sort range = apply_expr.get_sort();
    z3::expr disj = g.ctx.bool_val(false);
int tag = rand() % 2;
    if (tag == 0) {
        z3::func_decl pto = g.ctx.function("*>:ivy.typespec:ivy.enumspec",g.sort("ivy.typespec"),g.sort("ivy.enumspec"),g.ctx.bool_sort());
        z3::expr X = g.ctx.constant(temp.c_str(),g.sort("ivy.enumspec"));
        z3::expr pred = pto(apply_expr,X);
        g.add_alit(pred);
        __randomize<ivyc_s1::ivy__enumspec>(g,X);
    }
    if (tag == 1) {
        z3::func_decl pto = g.ctx.function("*>:ivy.typespec:ivy.structspec",g.sort("ivy.typespec"),g.sort("ivy.structspec"),g.ctx.bool_sort());
        z3::expr X = g.ctx.constant(temp.c_str(),g.sort("ivy.structspec"));
        z3::expr pred = pto(apply_expr,X);
        g.add_alit(pred);
        __randomize<ivyc_s1::ivy__structspec>(g,X);
    }

}
#endif

int ivyc_s1::ivy__error::temp_counter = 0;

std::ostream &operator <<(std::ostream &s, const ivyc_s1::ivy__error &t){
    s << "{";
    switch (t.tag) {
        case 0: s << "ivy.type_clash:" << ivyc_s1::ivy__error::unwrap< ivyc_s1::ivy__type_clash >(t); break;
        case 1: s << "ivy.type_conversion:" << ivyc_s1::ivy__error::unwrap< ivyc_s1::ivy__type_conversion >(t); break;
        case 2: s << "ivy.untyped:" << ivyc_s1::ivy__error::unwrap< ivyc_s1::ivy__untyped >(t); break;
        case 3: s << "ivy.not_first_order:" << ivyc_s1::ivy__error::unwrap< ivyc_s1::ivy__not_first_order >(t); break;
        case 4: s << "ivy.file_not_found:" << ivyc_s1::ivy__error::unwrap< ivyc_s1::ivy__file_not_found >(t); break;
        case 5: s << "ivy.cannot_write:" << ivyc_s1::ivy__error::unwrap< ivyc_s1::ivy__cannot_write >(t); break;
        case 6: s << "ivy.undefined:" << ivyc_s1::ivy__error::unwrap< ivyc_s1::ivy__undefined >(t); break;
        case 7: s << "ivy.wrong_number_params:" << ivyc_s1::ivy__error::unwrap< ivyc_s1::ivy__wrong_number_params >(t); break;
        case 8: s << "ivy.syntax_error:" << ivyc_s1::ivy__error::unwrap< ivyc_s1::ivy__syntax_error >(t); break;

    }
    s << "}";
    return s;
}
template <>
ivyc_s1::ivy__error _arg<ivyc_s1::ivy__error>(std::vector<ivy_value> &args, unsigned idx, long long bound) {
    if (args[idx].atom.size())
        throw out_of_bounds("unexpected value for sort ivy.error: " + args[idx].atom,args[idx].pos);
    if (args[idx].fields.size() == 0)
        return ivyc_s1::ivy__error();
    if (args[idx].fields.size() != 1)
        throw out_of_bounds("too many fields for sort ivy.error (expected one)",args[idx].pos);
    if (args[idx].fields[0].atom == "ivy.type_clash") return ivyc_s1::ivy__error(0, new ivyc_s1::ivy__error::twrap<ivyc_s1::ivy__type_clash>(_arg<ivyc_s1::ivy__type_clash>(args[idx].fields[0].fields,0,0)));
    if (args[idx].fields[0].atom == "ivy.type_conversion") return ivyc_s1::ivy__error(1, new ivyc_s1::ivy__error::twrap<ivyc_s1::ivy__type_conversion>(_arg<ivyc_s1::ivy__type_conversion>(args[idx].fields[0].fields,0,0)));
    if (args[idx].fields[0].atom == "ivy.untyped") return ivyc_s1::ivy__error(2, new ivyc_s1::ivy__error::twrap<ivyc_s1::ivy__untyped>(_arg<ivyc_s1::ivy__untyped>(args[idx].fields[0].fields,0,0)));
    if (args[idx].fields[0].atom == "ivy.not_first_order") return ivyc_s1::ivy__error(3, new ivyc_s1::ivy__error::twrap<ivyc_s1::ivy__not_first_order>(_arg<ivyc_s1::ivy__not_first_order>(args[idx].fields[0].fields,0,0)));
    if (args[idx].fields[0].atom == "ivy.file_not_found") return ivyc_s1::ivy__error(4, new ivyc_s1::ivy__error::twrap<ivyc_s1::ivy__file_not_found>(_arg<ivyc_s1::ivy__file_not_found>(args[idx].fields[0].fields,0,0)));
    if (args[idx].fields[0].atom == "ivy.cannot_write") return ivyc_s1::ivy__error(5, new ivyc_s1::ivy__error::twrap<ivyc_s1::ivy__cannot_write>(_arg<ivyc_s1::ivy__cannot_write>(args[idx].fields[0].fields,0,0)));
    if (args[idx].fields[0].atom == "ivy.undefined") return ivyc_s1::ivy__error(6, new ivyc_s1::ivy__error::twrap<ivyc_s1::ivy__undefined>(_arg<ivyc_s1::ivy__undefined>(args[idx].fields[0].fields,0,0)));
    if (args[idx].fields[0].atom == "ivy.wrong_number_params") return ivyc_s1::ivy__error(7, new ivyc_s1::ivy__error::twrap<ivyc_s1::ivy__wrong_number_params>(_arg<ivyc_s1::ivy__wrong_number_params>(args[idx].fields[0].fields,0,0)));
    if (args[idx].fields[0].atom == "ivy.syntax_error") return ivyc_s1::ivy__error(8, new ivyc_s1::ivy__error::twrap<ivyc_s1::ivy__syntax_error>(_arg<ivyc_s1::ivy__syntax_error>(args[idx].fields[0].fields,0,0)));

        throw out_of_bounds("unexpected field sort SORTNAME: " + args[idx].fields[0].atom, args[idx].pos);
}
template <>
void __ser<ivyc_s1::ivy__error>(ivy_ser &res, const ivyc_s1::ivy__error &inp) {
    if (inp.tag == 0) {res.open_tag(0,"ivy.type_clash"); __ser(res,ivyc_s1::ivy__error::unwrap< ivyc_s1::ivy__type_clash >(inp)); res.close_tag();}
    if (inp.tag == 1) {res.open_tag(1,"ivy.type_conversion"); __ser(res,ivyc_s1::ivy__error::unwrap< ivyc_s1::ivy__type_conversion >(inp)); res.close_tag();}
    if (inp.tag == 2) {res.open_tag(2,"ivy.untyped"); __ser(res,ivyc_s1::ivy__error::unwrap< ivyc_s1::ivy__untyped >(inp)); res.close_tag();}
    if (inp.tag == 3) {res.open_tag(3,"ivy.not_first_order"); __ser(res,ivyc_s1::ivy__error::unwrap< ivyc_s1::ivy__not_first_order >(inp)); res.close_tag();}
    if (inp.tag == 4) {res.open_tag(4,"ivy.file_not_found"); __ser(res,ivyc_s1::ivy__error::unwrap< ivyc_s1::ivy__file_not_found >(inp)); res.close_tag();}
    if (inp.tag == 5) {res.open_tag(5,"ivy.cannot_write"); __ser(res,ivyc_s1::ivy__error::unwrap< ivyc_s1::ivy__cannot_write >(inp)); res.close_tag();}
    if (inp.tag == 6) {res.open_tag(6,"ivy.undefined"); __ser(res,ivyc_s1::ivy__error::unwrap< ivyc_s1::ivy__undefined >(inp)); res.close_tag();}
    if (inp.tag == 7) {res.open_tag(7,"ivy.wrong_number_params"); __ser(res,ivyc_s1::ivy__error::unwrap< ivyc_s1::ivy__wrong_number_params >(inp)); res.close_tag();}
    if (inp.tag == 8) {res.open_tag(8,"ivy.syntax_error"); __ser(res,ivyc_s1::ivy__error::unwrap< ivyc_s1::ivy__syntax_error >(inp)); res.close_tag();}

}
template <>
void __deser<ivyc_s1::ivy__error>(ivy_deser &res, ivyc_s1::ivy__error &inp) {
    std::vector<std::string> tags;
    tags.push_back("ivy.type_clash");
    tags.push_back("ivy.type_conversion");
    tags.push_back("ivy.untyped");
    tags.push_back("ivy.not_first_order");
    tags.push_back("ivy.file_not_found");
    tags.push_back("ivy.cannot_write");
    tags.push_back("ivy.undefined");
    tags.push_back("ivy.wrong_number_params");
    tags.push_back("ivy.syntax_error");

    int tag = res.open_tag(tags);
    switch (tag) {
    case 0: {ivyc_s1::ivy__type_clash tmp; __deser(res,tmp); inp = ivyc_s1::ivy__error(0, new ivyc_s1::ivy__error::twrap<ivyc_s1::ivy__type_clash>(tmp)); break;} 
    case 1: {ivyc_s1::ivy__type_conversion tmp; __deser(res,tmp); inp = ivyc_s1::ivy__error(1, new ivyc_s1::ivy__error::twrap<ivyc_s1::ivy__type_conversion>(tmp)); break;} 
    case 2: {ivyc_s1::ivy__untyped tmp; __deser(res,tmp); inp = ivyc_s1::ivy__error(2, new ivyc_s1::ivy__error::twrap<ivyc_s1::ivy__untyped>(tmp)); break;} 
    case 3: {ivyc_s1::ivy__not_first_order tmp; __deser(res,tmp); inp = ivyc_s1::ivy__error(3, new ivyc_s1::ivy__error::twrap<ivyc_s1::ivy__not_first_order>(tmp)); break;} 
    case 4: {ivyc_s1::ivy__file_not_found tmp; __deser(res,tmp); inp = ivyc_s1::ivy__error(4, new ivyc_s1::ivy__error::twrap<ivyc_s1::ivy__file_not_found>(tmp)); break;} 
    case 5: {ivyc_s1::ivy__cannot_write tmp; __deser(res,tmp); inp = ivyc_s1::ivy__error(5, new ivyc_s1::ivy__error::twrap<ivyc_s1::ivy__cannot_write>(tmp)); break;} 
    case 6: {ivyc_s1::ivy__undefined tmp; __deser(res,tmp); inp = ivyc_s1::ivy__error(6, new ivyc_s1::ivy__error::twrap<ivyc_s1::ivy__undefined>(tmp)); break;} 
    case 7: {ivyc_s1::ivy__wrong_number_params tmp; __deser(res,tmp); inp = ivyc_s1::ivy__error(7, new ivyc_s1::ivy__error::twrap<ivyc_s1::ivy__wrong_number_params>(tmp)); break;} 
    case 8: {ivyc_s1::ivy__syntax_error tmp; __deser(res,tmp); inp = ivyc_s1::ivy__error(8, new ivyc_s1::ivy__error::twrap<ivyc_s1::ivy__syntax_error>(tmp)); break;} 

    }
    res.close_tag();
}
#ifdef Z3PP_H_
template <>
void __from_solver<ivyc_s1::ivy__error>( gen &g, const  z3::expr &v, ivyc_s1::ivy__error &res) {
    {
        z3::sort sort = g.sort("ivy.type_clash");
        z3::func_decl pto = g.ctx.function("*>:ivy.error:ivy.type_clash",g.sort("ivy.error"),g.sort("ivy.type_clash"),g.ctx.bool_sort());
        // std::cout <<  g.model << std::endl;
        Z3_ast_vector av = Z3_model_get_sort_universe(g.ctx, g.model, sort);
        if (av) {
            z3::expr_vector univ(g.ctx,av);
            for (unsigned i = 0; i < univ.size(); i++){
                if (eq(g.model.eval(pto(v,univ[i]),true),g.ctx.bool_val(true))){
                    ivyc_s1::ivy__type_clash tmp;
                    __from_solver(g,univ[i],tmp);                    res = ivyc_s1::ivy__error(0, new ivyc_s1::ivy__error::twrap<ivyc_s1::ivy__type_clash>(tmp));
                }
            }
        }
    }
    {
        z3::sort sort = g.sort("ivy.type_conversion");
        z3::func_decl pto = g.ctx.function("*>:ivy.error:ivy.type_conversion",g.sort("ivy.error"),g.sort("ivy.type_conversion"),g.ctx.bool_sort());
        // std::cout <<  g.model << std::endl;
        Z3_ast_vector av = Z3_model_get_sort_universe(g.ctx, g.model, sort);
        if (av) {
            z3::expr_vector univ(g.ctx,av);
            for (unsigned i = 0; i < univ.size(); i++){
                if (eq(g.model.eval(pto(v,univ[i]),true),g.ctx.bool_val(true))){
                    ivyc_s1::ivy__type_conversion tmp;
                    __from_solver(g,univ[i],tmp);                    res = ivyc_s1::ivy__error(1, new ivyc_s1::ivy__error::twrap<ivyc_s1::ivy__type_conversion>(tmp));
                }
            }
        }
    }
    {
        z3::sort sort = g.sort("ivy.untyped");
        z3::func_decl pto = g.ctx.function("*>:ivy.error:ivy.untyped",g.sort("ivy.error"),g.sort("ivy.untyped"),g.ctx.bool_sort());
        // std::cout <<  g.model << std::endl;
        Z3_ast_vector av = Z3_model_get_sort_universe(g.ctx, g.model, sort);
        if (av) {
            z3::expr_vector univ(g.ctx,av);
            for (unsigned i = 0; i < univ.size(); i++){
                if (eq(g.model.eval(pto(v,univ[i]),true),g.ctx.bool_val(true))){
                    ivyc_s1::ivy__untyped tmp;
                    __from_solver(g,univ[i],tmp);                    res = ivyc_s1::ivy__error(2, new ivyc_s1::ivy__error::twrap<ivyc_s1::ivy__untyped>(tmp));
                }
            }
        }
    }
    {
        z3::sort sort = g.sort("ivy.not_first_order");
        z3::func_decl pto = g.ctx.function("*>:ivy.error:ivy.not_first_order",g.sort("ivy.error"),g.sort("ivy.not_first_order"),g.ctx.bool_sort());
        // std::cout <<  g.model << std::endl;
        Z3_ast_vector av = Z3_model_get_sort_universe(g.ctx, g.model, sort);
        if (av) {
            z3::expr_vector univ(g.ctx,av);
            for (unsigned i = 0; i < univ.size(); i++){
                if (eq(g.model.eval(pto(v,univ[i]),true),g.ctx.bool_val(true))){
                    ivyc_s1::ivy__not_first_order tmp;
                    __from_solver(g,univ[i],tmp);                    res = ivyc_s1::ivy__error(3, new ivyc_s1::ivy__error::twrap<ivyc_s1::ivy__not_first_order>(tmp));
                }
            }
        }
    }
    {
        z3::sort sort = g.sort("ivy.file_not_found");
        z3::func_decl pto = g.ctx.function("*>:ivy.error:ivy.file_not_found",g.sort("ivy.error"),g.sort("ivy.file_not_found"),g.ctx.bool_sort());
        // std::cout <<  g.model << std::endl;
        Z3_ast_vector av = Z3_model_get_sort_universe(g.ctx, g.model, sort);
        if (av) {
            z3::expr_vector univ(g.ctx,av);
            for (unsigned i = 0; i < univ.size(); i++){
                if (eq(g.model.eval(pto(v,univ[i]),true),g.ctx.bool_val(true))){
                    ivyc_s1::ivy__file_not_found tmp;
                    __from_solver(g,univ[i],tmp);                    res = ivyc_s1::ivy__error(4, new ivyc_s1::ivy__error::twrap<ivyc_s1::ivy__file_not_found>(tmp));
                }
            }
        }
    }
    {
        z3::sort sort = g.sort("ivy.cannot_write");
        z3::func_decl pto = g.ctx.function("*>:ivy.error:ivy.cannot_write",g.sort("ivy.error"),g.sort("ivy.cannot_write"),g.ctx.bool_sort());
        // std::cout <<  g.model << std::endl;
        Z3_ast_vector av = Z3_model_get_sort_universe(g.ctx, g.model, sort);
        if (av) {
            z3::expr_vector univ(g.ctx,av);
            for (unsigned i = 0; i < univ.size(); i++){
                if (eq(g.model.eval(pto(v,univ[i]),true),g.ctx.bool_val(true))){
                    ivyc_s1::ivy__cannot_write tmp;
                    __from_solver(g,univ[i],tmp);                    res = ivyc_s1::ivy__error(5, new ivyc_s1::ivy__error::twrap<ivyc_s1::ivy__cannot_write>(tmp));
                }
            }
        }
    }
    {
        z3::sort sort = g.sort("ivy.undefined");
        z3::func_decl pto = g.ctx.function("*>:ivy.error:ivy.undefined",g.sort("ivy.error"),g.sort("ivy.undefined"),g.ctx.bool_sort());
        // std::cout <<  g.model << std::endl;
        Z3_ast_vector av = Z3_model_get_sort_universe(g.ctx, g.model, sort);
        if (av) {
            z3::expr_vector univ(g.ctx,av);
            for (unsigned i = 0; i < univ.size(); i++){
                if (eq(g.model.eval(pto(v,univ[i]),true),g.ctx.bool_val(true))){
                    ivyc_s1::ivy__undefined tmp;
                    __from_solver(g,univ[i],tmp);                    res = ivyc_s1::ivy__error(6, new ivyc_s1::ivy__error::twrap<ivyc_s1::ivy__undefined>(tmp));
                }
            }
        }
    }
    {
        z3::sort sort = g.sort("ivy.wrong_number_params");
        z3::func_decl pto = g.ctx.function("*>:ivy.error:ivy.wrong_number_params",g.sort("ivy.error"),g.sort("ivy.wrong_number_params"),g.ctx.bool_sort());
        // std::cout <<  g.model << std::endl;
        Z3_ast_vector av = Z3_model_get_sort_universe(g.ctx, g.model, sort);
        if (av) {
            z3::expr_vector univ(g.ctx,av);
            for (unsigned i = 0; i < univ.size(); i++){
                if (eq(g.model.eval(pto(v,univ[i]),true),g.ctx.bool_val(true))){
                    ivyc_s1::ivy__wrong_number_params tmp;
                    __from_solver(g,univ[i],tmp);                    res = ivyc_s1::ivy__error(7, new ivyc_s1::ivy__error::twrap<ivyc_s1::ivy__wrong_number_params>(tmp));
                }
            }
        }
    }
    {
        z3::sort sort = g.sort("ivy.syntax_error");
        z3::func_decl pto = g.ctx.function("*>:ivy.error:ivy.syntax_error",g.sort("ivy.error"),g.sort("ivy.syntax_error"),g.ctx.bool_sort());
        // std::cout <<  g.model << std::endl;
        Z3_ast_vector av = Z3_model_get_sort_universe(g.ctx, g.model, sort);
        if (av) {
            z3::expr_vector univ(g.ctx,av);
            for (unsigned i = 0; i < univ.size(); i++){
                if (eq(g.model.eval(pto(v,univ[i]),true),g.ctx.bool_val(true))){
                    ivyc_s1::ivy__syntax_error tmp;
                    __from_solver(g,univ[i],tmp);                    res = ivyc_s1::ivy__error(8, new ivyc_s1::ivy__error::twrap<ivyc_s1::ivy__syntax_error>(tmp));
                }
            }
        }
    }

}
template <>
z3::expr __to_solver<ivyc_s1::ivy__error>( gen &g, const  z3::expr &v, ivyc_s1::ivy__error &val) {
//    std::cout << v << ":" << v.get_sort() << std::endl;
    if (val.tag == 0) {
        z3::func_decl pto = g.ctx.function("*>:ivy.error:ivy.type_clash",g.sort("ivy.error"),g.sort("ivy.type_clash"),g.ctx.bool_sort());
        z3::expr X = g.ctx.constant("X",g.sort("ivy.type_clash"));
        ivyc_s1::ivy__type_clash tmp = ivyc_s1::ivy__error::unwrap< ivyc_s1::ivy__type_clash >(val);
        return exists(X,pto(v,X) && __to_solver(g,X,tmp));
    }
    if (val.tag == 1) {
        z3::func_decl pto = g.ctx.function("*>:ivy.error:ivy.type_conversion",g.sort("ivy.error"),g.sort("ivy.type_conversion"),g.ctx.bool_sort());
        z3::expr X = g.ctx.constant("X",g.sort("ivy.type_conversion"));
        ivyc_s1::ivy__type_conversion tmp = ivyc_s1::ivy__error::unwrap< ivyc_s1::ivy__type_conversion >(val);
        return exists(X,pto(v,X) && __to_solver(g,X,tmp));
    }
    if (val.tag == 2) {
        z3::func_decl pto = g.ctx.function("*>:ivy.error:ivy.untyped",g.sort("ivy.error"),g.sort("ivy.untyped"),g.ctx.bool_sort());
        z3::expr X = g.ctx.constant("X",g.sort("ivy.untyped"));
        ivyc_s1::ivy__untyped tmp = ivyc_s1::ivy__error::unwrap< ivyc_s1::ivy__untyped >(val);
        return exists(X,pto(v,X) && __to_solver(g,X,tmp));
    }
    if (val.tag == 3) {
        z3::func_decl pto = g.ctx.function("*>:ivy.error:ivy.not_first_order",g.sort("ivy.error"),g.sort("ivy.not_first_order"),g.ctx.bool_sort());
        z3::expr X = g.ctx.constant("X",g.sort("ivy.not_first_order"));
        ivyc_s1::ivy__not_first_order tmp = ivyc_s1::ivy__error::unwrap< ivyc_s1::ivy__not_first_order >(val);
        return exists(X,pto(v,X) && __to_solver(g,X,tmp));
    }
    if (val.tag == 4) {
        z3::func_decl pto = g.ctx.function("*>:ivy.error:ivy.file_not_found",g.sort("ivy.error"),g.sort("ivy.file_not_found"),g.ctx.bool_sort());
        z3::expr X = g.ctx.constant("X",g.sort("ivy.file_not_found"));
        ivyc_s1::ivy__file_not_found tmp = ivyc_s1::ivy__error::unwrap< ivyc_s1::ivy__file_not_found >(val);
        return exists(X,pto(v,X) && __to_solver(g,X,tmp));
    }
    if (val.tag == 5) {
        z3::func_decl pto = g.ctx.function("*>:ivy.error:ivy.cannot_write",g.sort("ivy.error"),g.sort("ivy.cannot_write"),g.ctx.bool_sort());
        z3::expr X = g.ctx.constant("X",g.sort("ivy.cannot_write"));
        ivyc_s1::ivy__cannot_write tmp = ivyc_s1::ivy__error::unwrap< ivyc_s1::ivy__cannot_write >(val);
        return exists(X,pto(v,X) && __to_solver(g,X,tmp));
    }
    if (val.tag == 6) {
        z3::func_decl pto = g.ctx.function("*>:ivy.error:ivy.undefined",g.sort("ivy.error"),g.sort("ivy.undefined"),g.ctx.bool_sort());
        z3::expr X = g.ctx.constant("X",g.sort("ivy.undefined"));
        ivyc_s1::ivy__undefined tmp = ivyc_s1::ivy__error::unwrap< ivyc_s1::ivy__undefined >(val);
        return exists(X,pto(v,X) && __to_solver(g,X,tmp));
    }
    if (val.tag == 7) {
        z3::func_decl pto = g.ctx.function("*>:ivy.error:ivy.wrong_number_params",g.sort("ivy.error"),g.sort("ivy.wrong_number_params"),g.ctx.bool_sort());
        z3::expr X = g.ctx.constant("X",g.sort("ivy.wrong_number_params"));
        ivyc_s1::ivy__wrong_number_params tmp = ivyc_s1::ivy__error::unwrap< ivyc_s1::ivy__wrong_number_params >(val);
        return exists(X,pto(v,X) && __to_solver(g,X,tmp));
    }
    if (val.tag == 8) {
        z3::func_decl pto = g.ctx.function("*>:ivy.error:ivy.syntax_error",g.sort("ivy.error"),g.sort("ivy.syntax_error"),g.ctx.bool_sort());
        z3::expr X = g.ctx.constant("X",g.sort("ivy.syntax_error"));
        ivyc_s1::ivy__syntax_error tmp = ivyc_s1::ivy__error::unwrap< ivyc_s1::ivy__syntax_error >(val);
        return exists(X,pto(v,X) && __to_solver(g,X,tmp));
    }

    z3::expr conj = g.ctx.bool_val(false);
    {
        z3::func_decl pto = g.ctx.function("*>:ivy.error:ivy.type_clash",g.sort("ivy.error"),g.sort("ivy.type_clash"),g.ctx.bool_sort());
        z3::expr Y = g.ctx.constant("Y",g.sort("ivy.type_clash"));
        conj = conj && forall(Y,!pto(v,Y));
    }
    {
        z3::func_decl pto = g.ctx.function("*>:ivy.error:ivy.type_conversion",g.sort("ivy.error"),g.sort("ivy.type_conversion"),g.ctx.bool_sort());
        z3::expr Y = g.ctx.constant("Y",g.sort("ivy.type_conversion"));
        conj = conj && forall(Y,!pto(v,Y));
    }
    {
        z3::func_decl pto = g.ctx.function("*>:ivy.error:ivy.untyped",g.sort("ivy.error"),g.sort("ivy.untyped"),g.ctx.bool_sort());
        z3::expr Y = g.ctx.constant("Y",g.sort("ivy.untyped"));
        conj = conj && forall(Y,!pto(v,Y));
    }
    {
        z3::func_decl pto = g.ctx.function("*>:ivy.error:ivy.not_first_order",g.sort("ivy.error"),g.sort("ivy.not_first_order"),g.ctx.bool_sort());
        z3::expr Y = g.ctx.constant("Y",g.sort("ivy.not_first_order"));
        conj = conj && forall(Y,!pto(v,Y));
    }
    {
        z3::func_decl pto = g.ctx.function("*>:ivy.error:ivy.file_not_found",g.sort("ivy.error"),g.sort("ivy.file_not_found"),g.ctx.bool_sort());
        z3::expr Y = g.ctx.constant("Y",g.sort("ivy.file_not_found"));
        conj = conj && forall(Y,!pto(v,Y));
    }
    {
        z3::func_decl pto = g.ctx.function("*>:ivy.error:ivy.cannot_write",g.sort("ivy.error"),g.sort("ivy.cannot_write"),g.ctx.bool_sort());
        z3::expr Y = g.ctx.constant("Y",g.sort("ivy.cannot_write"));
        conj = conj && forall(Y,!pto(v,Y));
    }
    {
        z3::func_decl pto = g.ctx.function("*>:ivy.error:ivy.undefined",g.sort("ivy.error"),g.sort("ivy.undefined"),g.ctx.bool_sort());
        z3::expr Y = g.ctx.constant("Y",g.sort("ivy.undefined"));
        conj = conj && forall(Y,!pto(v,Y));
    }
    {
        z3::func_decl pto = g.ctx.function("*>:ivy.error:ivy.wrong_number_params",g.sort("ivy.error"),g.sort("ivy.wrong_number_params"),g.ctx.bool_sort());
        z3::expr Y = g.ctx.constant("Y",g.sort("ivy.wrong_number_params"));
        conj = conj && forall(Y,!pto(v,Y));
    }
    {
        z3::func_decl pto = g.ctx.function("*>:ivy.error:ivy.syntax_error",g.sort("ivy.error"),g.sort("ivy.syntax_error"),g.ctx.bool_sort());
        z3::expr Y = g.ctx.constant("Y",g.sort("ivy.syntax_error"));
        conj = conj && forall(Y,!pto(v,Y));
    }

    return conj;
}
template <>
void __randomize<ivyc_s1::ivy__error>( gen &g, const  z3::expr &apply_expr) {
    std::ostringstream os;
    os << "__ivy.error__tmp" << ivyc_s1::ivy__error::temp_counter++;
    std::string temp = os.str();
    z3::sort range = apply_expr.get_sort();
    z3::expr disj = g.ctx.bool_val(false);
int tag = rand() % 9;
    if (tag == 0) {
        z3::func_decl pto = g.ctx.function("*>:ivy.error:ivy.type_clash",g.sort("ivy.error"),g.sort("ivy.type_clash"),g.ctx.bool_sort());
        z3::expr X = g.ctx.constant(temp.c_str(),g.sort("ivy.type_clash"));
        z3::expr pred = pto(apply_expr,X);
        g.add_alit(pred);
        __randomize<ivyc_s1::ivy__type_clash>(g,X);
    }
    if (tag == 1) {
        z3::func_decl pto = g.ctx.function("*>:ivy.error:ivy.type_conversion",g.sort("ivy.error"),g.sort("ivy.type_conversion"),g.ctx.bool_sort());
        z3::expr X = g.ctx.constant(temp.c_str(),g.sort("ivy.type_conversion"));
        z3::expr pred = pto(apply_expr,X);
        g.add_alit(pred);
        __randomize<ivyc_s1::ivy__type_conversion>(g,X);
    }
    if (tag == 2) {
        z3::func_decl pto = g.ctx.function("*>:ivy.error:ivy.untyped",g.sort("ivy.error"),g.sort("ivy.untyped"),g.ctx.bool_sort());
        z3::expr X = g.ctx.constant(temp.c_str(),g.sort("ivy.untyped"));
        z3::expr pred = pto(apply_expr,X);
        g.add_alit(pred);
        __randomize<ivyc_s1::ivy__untyped>(g,X);
    }
    if (tag == 3) {
        z3::func_decl pto = g.ctx.function("*>:ivy.error:ivy.not_first_order",g.sort("ivy.error"),g.sort("ivy.not_first_order"),g.ctx.bool_sort());
        z3::expr X = g.ctx.constant(temp.c_str(),g.sort("ivy.not_first_order"));
        z3::expr pred = pto(apply_expr,X);
        g.add_alit(pred);
        __randomize<ivyc_s1::ivy__not_first_order>(g,X);
    }
    if (tag == 4) {
        z3::func_decl pto = g.ctx.function("*>:ivy.error:ivy.file_not_found",g.sort("ivy.error"),g.sort("ivy.file_not_found"),g.ctx.bool_sort());
        z3::expr X = g.ctx.constant(temp.c_str(),g.sort("ivy.file_not_found"));
        z3::expr pred = pto(apply_expr,X);
        g.add_alit(pred);
        __randomize<ivyc_s1::ivy__file_not_found>(g,X);
    }
    if (tag == 5) {
        z3::func_decl pto = g.ctx.function("*>:ivy.error:ivy.cannot_write",g.sort("ivy.error"),g.sort("ivy.cannot_write"),g.ctx.bool_sort());
        z3::expr X = g.ctx.constant(temp.c_str(),g.sort("ivy.cannot_write"));
        z3::expr pred = pto(apply_expr,X);
        g.add_alit(pred);
        __randomize<ivyc_s1::ivy__cannot_write>(g,X);
    }
    if (tag == 6) {
        z3::func_decl pto = g.ctx.function("*>:ivy.error:ivy.undefined",g.sort("ivy.error"),g.sort("ivy.undefined"),g.ctx.bool_sort());
        z3::expr X = g.ctx.constant(temp.c_str(),g.sort("ivy.undefined"));
        z3::expr pred = pto(apply_expr,X);
        g.add_alit(pred);
        __randomize<ivyc_s1::ivy__undefined>(g,X);
    }
    if (tag == 7) {
        z3::func_decl pto = g.ctx.function("*>:ivy.error:ivy.wrong_number_params",g.sort("ivy.error"),g.sort("ivy.wrong_number_params"),g.ctx.bool_sort());
        z3::expr X = g.ctx.constant(temp.c_str(),g.sort("ivy.wrong_number_params"));
        z3::expr pred = pto(apply_expr,X);
        g.add_alit(pred);
        __randomize<ivyc_s1::ivy__wrong_number_params>(g,X);
    }
    if (tag == 8) {
        z3::func_decl pto = g.ctx.function("*>:ivy.error:ivy.syntax_error",g.sort("ivy.error"),g.sort("ivy.syntax_error"),g.ctx.bool_sort());
        z3::expr X = g.ctx.constant(temp.c_str(),g.sort("ivy.syntax_error"));
        z3::expr pred = pto(apply_expr,X);
        g.add_alit(pred);
        __randomize<ivyc_s1::ivy__syntax_error>(g,X);
    }

}
#endif

int ivyc_s1::cpp__ident::temp_counter = 0;

std::ostream &operator <<(std::ostream &s, const ivyc_s1::cpp__ident &t){
    s << "{";
    switch (t.tag) {
        case 0: s << "cpp.strident:" << ivyc_s1::cpp__ident::unwrap< ivyc_s1::cpp__strident >(t); break;
        case 1: s << "cpp.numident:" << ivyc_s1::cpp__ident::unwrap< ivyc_s1::cpp__numident >(t); break;
        case 2: s << "cpp.dotident:" << ivyc_s1::cpp__ident::unwrap< ivyc_s1::cpp__dotident >(t); break;

    }
    s << "}";
    return s;
}
template <>
ivyc_s1::cpp__ident _arg<ivyc_s1::cpp__ident>(std::vector<ivy_value> &args, unsigned idx, long long bound) {
    if (args[idx].atom.size())
        throw out_of_bounds("unexpected value for sort cpp.ident: " + args[idx].atom,args[idx].pos);
    if (args[idx].fields.size() == 0)
        return ivyc_s1::cpp__ident();
    if (args[idx].fields.size() != 1)
        throw out_of_bounds("too many fields for sort cpp.ident (expected one)",args[idx].pos);
    if (args[idx].fields[0].atom == "cpp.strident") return ivyc_s1::cpp__ident(0, new ivyc_s1::cpp__ident::twrap<ivyc_s1::cpp__strident>(_arg<ivyc_s1::cpp__strident>(args[idx].fields[0].fields,0,0)));
    if (args[idx].fields[0].atom == "cpp.numident") return ivyc_s1::cpp__ident(1, new ivyc_s1::cpp__ident::twrap<ivyc_s1::cpp__numident>(_arg<ivyc_s1::cpp__numident>(args[idx].fields[0].fields,0,0)));
    if (args[idx].fields[0].atom == "cpp.dotident") return ivyc_s1::cpp__ident(2, new ivyc_s1::cpp__ident::twrap<ivyc_s1::cpp__dotident>(_arg<ivyc_s1::cpp__dotident>(args[idx].fields[0].fields,0,0)));

        throw out_of_bounds("unexpected field sort SORTNAME: " + args[idx].fields[0].atom, args[idx].pos);
}
template <>
void __ser<ivyc_s1::cpp__ident>(ivy_ser &res, const ivyc_s1::cpp__ident &inp) {
    if (inp.tag == 0) {res.open_tag(0,"cpp.strident"); __ser(res,ivyc_s1::cpp__ident::unwrap< ivyc_s1::cpp__strident >(inp)); res.close_tag();}
    if (inp.tag == 1) {res.open_tag(1,"cpp.numident"); __ser(res,ivyc_s1::cpp__ident::unwrap< ivyc_s1::cpp__numident >(inp)); res.close_tag();}
    if (inp.tag == 2) {res.open_tag(2,"cpp.dotident"); __ser(res,ivyc_s1::cpp__ident::unwrap< ivyc_s1::cpp__dotident >(inp)); res.close_tag();}

}
template <>
void __deser<ivyc_s1::cpp__ident>(ivy_deser &res, ivyc_s1::cpp__ident &inp) {
    std::vector<std::string> tags;
    tags.push_back("cpp.strident");
    tags.push_back("cpp.numident");
    tags.push_back("cpp.dotident");

    int tag = res.open_tag(tags);
    switch (tag) {
    case 0: {ivyc_s1::cpp__strident tmp; __deser(res,tmp); inp = ivyc_s1::cpp__ident(0, new ivyc_s1::cpp__ident::twrap<ivyc_s1::cpp__strident>(tmp)); break;} 
    case 1: {ivyc_s1::cpp__numident tmp; __deser(res,tmp); inp = ivyc_s1::cpp__ident(1, new ivyc_s1::cpp__ident::twrap<ivyc_s1::cpp__numident>(tmp)); break;} 
    case 2: {ivyc_s1::cpp__dotident tmp; __deser(res,tmp); inp = ivyc_s1::cpp__ident(2, new ivyc_s1::cpp__ident::twrap<ivyc_s1::cpp__dotident>(tmp)); break;} 

    }
    res.close_tag();
}
#ifdef Z3PP_H_
template <>
void __from_solver<ivyc_s1::cpp__ident>( gen &g, const  z3::expr &v, ivyc_s1::cpp__ident &res) {
    {
        z3::sort sort = g.sort("cpp.strident");
        z3::func_decl pto = g.ctx.function("*>:cpp.ident:cpp.strident",g.sort("cpp.ident"),g.sort("cpp.strident"),g.ctx.bool_sort());
        // std::cout <<  g.model << std::endl;
        Z3_ast_vector av = Z3_model_get_sort_universe(g.ctx, g.model, sort);
        if (av) {
            z3::expr_vector univ(g.ctx,av);
            for (unsigned i = 0; i < univ.size(); i++){
                if (eq(g.model.eval(pto(v,univ[i]),true),g.ctx.bool_val(true))){
                    ivyc_s1::cpp__strident tmp;
                    __from_solver(g,univ[i],tmp);                    res = ivyc_s1::cpp__ident(0, new ivyc_s1::cpp__ident::twrap<ivyc_s1::cpp__strident>(tmp));
                }
            }
        }
    }
    {
        z3::sort sort = g.sort("cpp.numident");
        z3::func_decl pto = g.ctx.function("*>:cpp.ident:cpp.numident",g.sort("cpp.ident"),g.sort("cpp.numident"),g.ctx.bool_sort());
        // std::cout <<  g.model << std::endl;
        Z3_ast_vector av = Z3_model_get_sort_universe(g.ctx, g.model, sort);
        if (av) {
            z3::expr_vector univ(g.ctx,av);
            for (unsigned i = 0; i < univ.size(); i++){
                if (eq(g.model.eval(pto(v,univ[i]),true),g.ctx.bool_val(true))){
                    ivyc_s1::cpp__numident tmp;
                    __from_solver(g,univ[i],tmp);                    res = ivyc_s1::cpp__ident(1, new ivyc_s1::cpp__ident::twrap<ivyc_s1::cpp__numident>(tmp));
                }
            }
        }
    }
    {
        z3::sort sort = g.sort("cpp.dotident");
        z3::func_decl pto = g.ctx.function("*>:cpp.ident:cpp.dotident",g.sort("cpp.ident"),g.sort("cpp.dotident"),g.ctx.bool_sort());
        // std::cout <<  g.model << std::endl;
        Z3_ast_vector av = Z3_model_get_sort_universe(g.ctx, g.model, sort);
        if (av) {
            z3::expr_vector univ(g.ctx,av);
            for (unsigned i = 0; i < univ.size(); i++){
                if (eq(g.model.eval(pto(v,univ[i]),true),g.ctx.bool_val(true))){
                    ivyc_s1::cpp__dotident tmp;
                    __from_solver(g,univ[i],tmp);                    res = ivyc_s1::cpp__ident(2, new ivyc_s1::cpp__ident::twrap<ivyc_s1::cpp__dotident>(tmp));
                }
            }
        }
    }

}
template <>
z3::expr __to_solver<ivyc_s1::cpp__ident>( gen &g, const  z3::expr &v, ivyc_s1::cpp__ident &val) {
//    std::cout << v << ":" << v.get_sort() << std::endl;
    if (val.tag == 0) {
        z3::func_decl pto = g.ctx.function("*>:cpp.ident:cpp.strident",g.sort("cpp.ident"),g.sort("cpp.strident"),g.ctx.bool_sort());
        z3::expr X = g.ctx.constant("X",g.sort("cpp.strident"));
        ivyc_s1::cpp__strident tmp = ivyc_s1::cpp__ident::unwrap< ivyc_s1::cpp__strident >(val);
        return exists(X,pto(v,X) && __to_solver(g,X,tmp));
    }
    if (val.tag == 1) {
        z3::func_decl pto = g.ctx.function("*>:cpp.ident:cpp.numident",g.sort("cpp.ident"),g.sort("cpp.numident"),g.ctx.bool_sort());
        z3::expr X = g.ctx.constant("X",g.sort("cpp.numident"));
        ivyc_s1::cpp__numident tmp = ivyc_s1::cpp__ident::unwrap< ivyc_s1::cpp__numident >(val);
        return exists(X,pto(v,X) && __to_solver(g,X,tmp));
    }
    if (val.tag == 2) {
        z3::func_decl pto = g.ctx.function("*>:cpp.ident:cpp.dotident",g.sort("cpp.ident"),g.sort("cpp.dotident"),g.ctx.bool_sort());
        z3::expr X = g.ctx.constant("X",g.sort("cpp.dotident"));
        ivyc_s1::cpp__dotident tmp = ivyc_s1::cpp__ident::unwrap< ivyc_s1::cpp__dotident >(val);
        return exists(X,pto(v,X) && __to_solver(g,X,tmp));
    }

    z3::expr conj = g.ctx.bool_val(false);
    {
        z3::func_decl pto = g.ctx.function("*>:cpp.ident:cpp.strident",g.sort("cpp.ident"),g.sort("cpp.strident"),g.ctx.bool_sort());
        z3::expr Y = g.ctx.constant("Y",g.sort("cpp.strident"));
        conj = conj && forall(Y,!pto(v,Y));
    }
    {
        z3::func_decl pto = g.ctx.function("*>:cpp.ident:cpp.numident",g.sort("cpp.ident"),g.sort("cpp.numident"),g.ctx.bool_sort());
        z3::expr Y = g.ctx.constant("Y",g.sort("cpp.numident"));
        conj = conj && forall(Y,!pto(v,Y));
    }
    {
        z3::func_decl pto = g.ctx.function("*>:cpp.ident:cpp.dotident",g.sort("cpp.ident"),g.sort("cpp.dotident"),g.ctx.bool_sort());
        z3::expr Y = g.ctx.constant("Y",g.sort("cpp.dotident"));
        conj = conj && forall(Y,!pto(v,Y));
    }

    return conj;
}
template <>
void __randomize<ivyc_s1::cpp__ident>( gen &g, const  z3::expr &apply_expr) {
    std::ostringstream os;
    os << "__cpp.ident__tmp" << ivyc_s1::cpp__ident::temp_counter++;
    std::string temp = os.str();
    z3::sort range = apply_expr.get_sort();
    z3::expr disj = g.ctx.bool_val(false);
int tag = rand() % 3;
    if (tag == 0) {
        z3::func_decl pto = g.ctx.function("*>:cpp.ident:cpp.strident",g.sort("cpp.ident"),g.sort("cpp.strident"),g.ctx.bool_sort());
        z3::expr X = g.ctx.constant(temp.c_str(),g.sort("cpp.strident"));
        z3::expr pred = pto(apply_expr,X);
        g.add_alit(pred);
        __randomize<ivyc_s1::cpp__strident>(g,X);
    }
    if (tag == 1) {
        z3::func_decl pto = g.ctx.function("*>:cpp.ident:cpp.numident",g.sort("cpp.ident"),g.sort("cpp.numident"),g.ctx.bool_sort());
        z3::expr X = g.ctx.constant(temp.c_str(),g.sort("cpp.numident"));
        z3::expr pred = pto(apply_expr,X);
        g.add_alit(pred);
        __randomize<ivyc_s1::cpp__numident>(g,X);
    }
    if (tag == 2) {
        z3::func_decl pto = g.ctx.function("*>:cpp.ident:cpp.dotident",g.sort("cpp.ident"),g.sort("cpp.dotident"),g.ctx.bool_sort());
        z3::expr X = g.ctx.constant(temp.c_str(),g.sort("cpp.dotident"));
        z3::expr pred = pto(apply_expr,X);
        g.add_alit(pred);
        __randomize<ivyc_s1::cpp__dotident>(g,X);
    }

}
#endif

int ivyc_s1::cpp__expr::temp_counter = 0;

std::ostream &operator <<(std::ostream &s, const ivyc_s1::cpp__expr &t){
    s << "{";
    switch (t.tag) {
        case 0: s << "cpp.symbol:" << ivyc_s1::cpp__expr::unwrap< ivyc_s1::cpp__symbol >(t); break;
        case 1: s << "cpp.app:" << ivyc_s1::cpp__expr::unwrap< ivyc_s1::cpp__app >(t); break;
        case 2: s << "cpp.variable:" << ivyc_s1::cpp__expr::unwrap< ivyc_s1::cpp__variable >(t); break;
        case 3: s << "cpp.pi:" << ivyc_s1::cpp__expr::unwrap< ivyc_s1::cpp__pi >(t); break;

    }
    s << "}";
    return s;
}
template <>
ivyc_s1::cpp__expr _arg<ivyc_s1::cpp__expr>(std::vector<ivy_value> &args, unsigned idx, long long bound) {
    if (args[idx].atom.size())
        throw out_of_bounds("unexpected value for sort cpp.expr: " + args[idx].atom,args[idx].pos);
    if (args[idx].fields.size() == 0)
        return ivyc_s1::cpp__expr();
    if (args[idx].fields.size() != 1)
        throw out_of_bounds("too many fields for sort cpp.expr (expected one)",args[idx].pos);
    if (args[idx].fields[0].atom == "cpp.symbol") return ivyc_s1::cpp__expr(0, new ivyc_s1::cpp__expr::twrap<ivyc_s1::cpp__symbol>(_arg<ivyc_s1::cpp__symbol>(args[idx].fields[0].fields,0,0)));
    if (args[idx].fields[0].atom == "cpp.app") return ivyc_s1::cpp__expr(1, new ivyc_s1::cpp__expr::twrap<ivyc_s1::cpp__app>(_arg<ivyc_s1::cpp__app>(args[idx].fields[0].fields,0,0)));
    if (args[idx].fields[0].atom == "cpp.variable") return ivyc_s1::cpp__expr(2, new ivyc_s1::cpp__expr::twrap<ivyc_s1::cpp__variable>(_arg<ivyc_s1::cpp__variable>(args[idx].fields[0].fields,0,0)));
    if (args[idx].fields[0].atom == "cpp.pi") return ivyc_s1::cpp__expr(3, new ivyc_s1::cpp__expr::twrap<ivyc_s1::cpp__pi>(_arg<ivyc_s1::cpp__pi>(args[idx].fields[0].fields,0,0)));

        throw out_of_bounds("unexpected field sort SORTNAME: " + args[idx].fields[0].atom, args[idx].pos);
}
template <>
void __ser<ivyc_s1::cpp__expr>(ivy_ser &res, const ivyc_s1::cpp__expr &inp) {
    if (inp.tag == 0) {res.open_tag(0,"cpp.symbol"); __ser(res,ivyc_s1::cpp__expr::unwrap< ivyc_s1::cpp__symbol >(inp)); res.close_tag();}
    if (inp.tag == 1) {res.open_tag(1,"cpp.app"); __ser(res,ivyc_s1::cpp__expr::unwrap< ivyc_s1::cpp__app >(inp)); res.close_tag();}
    if (inp.tag == 2) {res.open_tag(2,"cpp.variable"); __ser(res,ivyc_s1::cpp__expr::unwrap< ivyc_s1::cpp__variable >(inp)); res.close_tag();}
    if (inp.tag == 3) {res.open_tag(3,"cpp.pi"); __ser(res,ivyc_s1::cpp__expr::unwrap< ivyc_s1::cpp__pi >(inp)); res.close_tag();}

}
template <>
void __deser<ivyc_s1::cpp__expr>(ivy_deser &res, ivyc_s1::cpp__expr &inp) {
    std::vector<std::string> tags;
    tags.push_back("cpp.symbol");
    tags.push_back("cpp.app");
    tags.push_back("cpp.variable");
    tags.push_back("cpp.pi");

    int tag = res.open_tag(tags);
    switch (tag) {
    case 0: {ivyc_s1::cpp__symbol tmp; __deser(res,tmp); inp = ivyc_s1::cpp__expr(0, new ivyc_s1::cpp__expr::twrap<ivyc_s1::cpp__symbol>(tmp)); break;} 
    case 1: {ivyc_s1::cpp__app tmp; __deser(res,tmp); inp = ivyc_s1::cpp__expr(1, new ivyc_s1::cpp__expr::twrap<ivyc_s1::cpp__app>(tmp)); break;} 
    case 2: {ivyc_s1::cpp__variable tmp; __deser(res,tmp); inp = ivyc_s1::cpp__expr(2, new ivyc_s1::cpp__expr::twrap<ivyc_s1::cpp__variable>(tmp)); break;} 
    case 3: {ivyc_s1::cpp__pi tmp; __deser(res,tmp); inp = ivyc_s1::cpp__expr(3, new ivyc_s1::cpp__expr::twrap<ivyc_s1::cpp__pi>(tmp)); break;} 

    }
    res.close_tag();
}
#ifdef Z3PP_H_
template <>
void __from_solver<ivyc_s1::cpp__expr>( gen &g, const  z3::expr &v, ivyc_s1::cpp__expr &res) {
    {
        z3::sort sort = g.sort("cpp.symbol");
        z3::func_decl pto = g.ctx.function("*>:cpp.expr:cpp.symbol",g.sort("cpp.expr"),g.sort("cpp.symbol"),g.ctx.bool_sort());
        // std::cout <<  g.model << std::endl;
        Z3_ast_vector av = Z3_model_get_sort_universe(g.ctx, g.model, sort);
        if (av) {
            z3::expr_vector univ(g.ctx,av);
            for (unsigned i = 0; i < univ.size(); i++){
                if (eq(g.model.eval(pto(v,univ[i]),true),g.ctx.bool_val(true))){
                    ivyc_s1::cpp__symbol tmp;
                    __from_solver(g,univ[i],tmp);                    res = ivyc_s1::cpp__expr(0, new ivyc_s1::cpp__expr::twrap<ivyc_s1::cpp__symbol>(tmp));
                }
            }
        }
    }
    {
        z3::sort sort = g.sort("cpp.app");
        z3::func_decl pto = g.ctx.function("*>:cpp.expr:cpp.app",g.sort("cpp.expr"),g.sort("cpp.app"),g.ctx.bool_sort());
        // std::cout <<  g.model << std::endl;
        Z3_ast_vector av = Z3_model_get_sort_universe(g.ctx, g.model, sort);
        if (av) {
            z3::expr_vector univ(g.ctx,av);
            for (unsigned i = 0; i < univ.size(); i++){
                if (eq(g.model.eval(pto(v,univ[i]),true),g.ctx.bool_val(true))){
                    ivyc_s1::cpp__app tmp;
                    __from_solver(g,univ[i],tmp);                    res = ivyc_s1::cpp__expr(1, new ivyc_s1::cpp__expr::twrap<ivyc_s1::cpp__app>(tmp));
                }
            }
        }
    }
    {
        z3::sort sort = g.sort("cpp.variable");
        z3::func_decl pto = g.ctx.function("*>:cpp.expr:cpp.variable",g.sort("cpp.expr"),g.sort("cpp.variable"),g.ctx.bool_sort());
        // std::cout <<  g.model << std::endl;
        Z3_ast_vector av = Z3_model_get_sort_universe(g.ctx, g.model, sort);
        if (av) {
            z3::expr_vector univ(g.ctx,av);
            for (unsigned i = 0; i < univ.size(); i++){
                if (eq(g.model.eval(pto(v,univ[i]),true),g.ctx.bool_val(true))){
                    ivyc_s1::cpp__variable tmp;
                    __from_solver(g,univ[i],tmp);                    res = ivyc_s1::cpp__expr(2, new ivyc_s1::cpp__expr::twrap<ivyc_s1::cpp__variable>(tmp));
                }
            }
        }
    }
    {
        z3::sort sort = g.sort("cpp.pi");
        z3::func_decl pto = g.ctx.function("*>:cpp.expr:cpp.pi",g.sort("cpp.expr"),g.sort("cpp.pi"),g.ctx.bool_sort());
        // std::cout <<  g.model << std::endl;
        Z3_ast_vector av = Z3_model_get_sort_universe(g.ctx, g.model, sort);
        if (av) {
            z3::expr_vector univ(g.ctx,av);
            for (unsigned i = 0; i < univ.size(); i++){
                if (eq(g.model.eval(pto(v,univ[i]),true),g.ctx.bool_val(true))){
                    ivyc_s1::cpp__pi tmp;
                    __from_solver(g,univ[i],tmp);                    res = ivyc_s1::cpp__expr(3, new ivyc_s1::cpp__expr::twrap<ivyc_s1::cpp__pi>(tmp));
                }
            }
        }
    }

}
template <>
z3::expr __to_solver<ivyc_s1::cpp__expr>( gen &g, const  z3::expr &v, ivyc_s1::cpp__expr &val) {
//    std::cout << v << ":" << v.get_sort() << std::endl;
    if (val.tag == 0) {
        z3::func_decl pto = g.ctx.function("*>:cpp.expr:cpp.symbol",g.sort("cpp.expr"),g.sort("cpp.symbol"),g.ctx.bool_sort());
        z3::expr X = g.ctx.constant("X",g.sort("cpp.symbol"));
        ivyc_s1::cpp__symbol tmp = ivyc_s1::cpp__expr::unwrap< ivyc_s1::cpp__symbol >(val);
        return exists(X,pto(v,X) && __to_solver(g,X,tmp));
    }
    if (val.tag == 1) {
        z3::func_decl pto = g.ctx.function("*>:cpp.expr:cpp.app",g.sort("cpp.expr"),g.sort("cpp.app"),g.ctx.bool_sort());
        z3::expr X = g.ctx.constant("X",g.sort("cpp.app"));
        ivyc_s1::cpp__app tmp = ivyc_s1::cpp__expr::unwrap< ivyc_s1::cpp__app >(val);
        return exists(X,pto(v,X) && __to_solver(g,X,tmp));
    }
    if (val.tag == 2) {
        z3::func_decl pto = g.ctx.function("*>:cpp.expr:cpp.variable",g.sort("cpp.expr"),g.sort("cpp.variable"),g.ctx.bool_sort());
        z3::expr X = g.ctx.constant("X",g.sort("cpp.variable"));
        ivyc_s1::cpp__variable tmp = ivyc_s1::cpp__expr::unwrap< ivyc_s1::cpp__variable >(val);
        return exists(X,pto(v,X) && __to_solver(g,X,tmp));
    }
    if (val.tag == 3) {
        z3::func_decl pto = g.ctx.function("*>:cpp.expr:cpp.pi",g.sort("cpp.expr"),g.sort("cpp.pi"),g.ctx.bool_sort());
        z3::expr X = g.ctx.constant("X",g.sort("cpp.pi"));
        ivyc_s1::cpp__pi tmp = ivyc_s1::cpp__expr::unwrap< ivyc_s1::cpp__pi >(val);
        return exists(X,pto(v,X) && __to_solver(g,X,tmp));
    }

    z3::expr conj = g.ctx.bool_val(false);
    {
        z3::func_decl pto = g.ctx.function("*>:cpp.expr:cpp.symbol",g.sort("cpp.expr"),g.sort("cpp.symbol"),g.ctx.bool_sort());
        z3::expr Y = g.ctx.constant("Y",g.sort("cpp.symbol"));
        conj = conj && forall(Y,!pto(v,Y));
    }
    {
        z3::func_decl pto = g.ctx.function("*>:cpp.expr:cpp.app",g.sort("cpp.expr"),g.sort("cpp.app"),g.ctx.bool_sort());
        z3::expr Y = g.ctx.constant("Y",g.sort("cpp.app"));
        conj = conj && forall(Y,!pto(v,Y));
    }
    {
        z3::func_decl pto = g.ctx.function("*>:cpp.expr:cpp.variable",g.sort("cpp.expr"),g.sort("cpp.variable"),g.ctx.bool_sort());
        z3::expr Y = g.ctx.constant("Y",g.sort("cpp.variable"));
        conj = conj && forall(Y,!pto(v,Y));
    }
    {
        z3::func_decl pto = g.ctx.function("*>:cpp.expr:cpp.pi",g.sort("cpp.expr"),g.sort("cpp.pi"),g.ctx.bool_sort());
        z3::expr Y = g.ctx.constant("Y",g.sort("cpp.pi"));
        conj = conj && forall(Y,!pto(v,Y));
    }

    return conj;
}
template <>
void __randomize<ivyc_s1::cpp__expr>( gen &g, const  z3::expr &apply_expr) {
    std::ostringstream os;
    os << "__cpp.expr__tmp" << ivyc_s1::cpp__expr::temp_counter++;
    std::string temp = os.str();
    z3::sort range = apply_expr.get_sort();
    z3::expr disj = g.ctx.bool_val(false);
int tag = rand() % 4;
    if (tag == 0) {
        z3::func_decl pto = g.ctx.function("*>:cpp.expr:cpp.symbol",g.sort("cpp.expr"),g.sort("cpp.symbol"),g.ctx.bool_sort());
        z3::expr X = g.ctx.constant(temp.c_str(),g.sort("cpp.symbol"));
        z3::expr pred = pto(apply_expr,X);
        g.add_alit(pred);
        __randomize<ivyc_s1::cpp__symbol>(g,X);
    }
    if (tag == 1) {
        z3::func_decl pto = g.ctx.function("*>:cpp.expr:cpp.app",g.sort("cpp.expr"),g.sort("cpp.app"),g.ctx.bool_sort());
        z3::expr X = g.ctx.constant(temp.c_str(),g.sort("cpp.app"));
        z3::expr pred = pto(apply_expr,X);
        g.add_alit(pred);
        __randomize<ivyc_s1::cpp__app>(g,X);
    }
    if (tag == 2) {
        z3::func_decl pto = g.ctx.function("*>:cpp.expr:cpp.variable",g.sort("cpp.expr"),g.sort("cpp.variable"),g.ctx.bool_sort());
        z3::expr X = g.ctx.constant(temp.c_str(),g.sort("cpp.variable"));
        z3::expr pred = pto(apply_expr,X);
        g.add_alit(pred);
        __randomize<ivyc_s1::cpp__variable>(g,X);
    }
    if (tag == 3) {
        z3::func_decl pto = g.ctx.function("*>:cpp.expr:cpp.pi",g.sort("cpp.expr"),g.sort("cpp.pi"),g.ctx.bool_sort());
        z3::expr X = g.ctx.constant(temp.c_str(),g.sort("cpp.pi"));
        z3::expr pred = pto(apply_expr,X);
        g.add_alit(pred);
        __randomize<ivyc_s1::cpp__pi>(g,X);
    }

}
#endif

int ivyc_s1::cpp__stmt::temp_counter = 0;

std::ostream &operator <<(std::ostream &s, const ivyc_s1::cpp__stmt &t){
    s << "{";
    switch (t.tag) {
        case 0: s << "cpp.asgn:" << ivyc_s1::cpp__stmt::unwrap< ivyc_s1::cpp__asgn >(t); break;
        case 1: s << "cpp.sequence:" << ivyc_s1::cpp__stmt::unwrap< ivyc_s1::cpp__sequence >(t); break;
        case 2: s << "cpp.skipst:" << ivyc_s1::cpp__stmt::unwrap< ivyc_s1::cpp__skipst >(t); break;
        case 3: s << "cpp.ifst:" << ivyc_s1::cpp__stmt::unwrap< ivyc_s1::cpp__ifst >(t); break;
        case 4: s << "cpp.whilest:" << ivyc_s1::cpp__stmt::unwrap< ivyc_s1::cpp__whilest >(t); break;
        case 5: s << "cpp.breakst:" << ivyc_s1::cpp__stmt::unwrap< ivyc_s1::cpp__breakst >(t); break;
        case 6: s << "cpp.varst:" << ivyc_s1::cpp__stmt::unwrap< ivyc_s1::cpp__varst >(t); break;
        case 7: s << "cpp.retst:" << ivyc_s1::cpp__stmt::unwrap< ivyc_s1::cpp__retst >(t); break;

    }
    s << "}";
    return s;
}
template <>
ivyc_s1::cpp__stmt _arg<ivyc_s1::cpp__stmt>(std::vector<ivy_value> &args, unsigned idx, long long bound) {
    if (args[idx].atom.size())
        throw out_of_bounds("unexpected value for sort cpp.stmt: " + args[idx].atom,args[idx].pos);
    if (args[idx].fields.size() == 0)
        return ivyc_s1::cpp__stmt();
    if (args[idx].fields.size() != 1)
        throw out_of_bounds("too many fields for sort cpp.stmt (expected one)",args[idx].pos);
    if (args[idx].fields[0].atom == "cpp.asgn") return ivyc_s1::cpp__stmt(0, new ivyc_s1::cpp__stmt::twrap<ivyc_s1::cpp__asgn>(_arg<ivyc_s1::cpp__asgn>(args[idx].fields[0].fields,0,0)));
    if (args[idx].fields[0].atom == "cpp.sequence") return ivyc_s1::cpp__stmt(1, new ivyc_s1::cpp__stmt::twrap<ivyc_s1::cpp__sequence>(_arg<ivyc_s1::cpp__sequence>(args[idx].fields[0].fields,0,0)));
    if (args[idx].fields[0].atom == "cpp.skipst") return ivyc_s1::cpp__stmt(2, new ivyc_s1::cpp__stmt::twrap<ivyc_s1::cpp__skipst>(_arg<ivyc_s1::cpp__skipst>(args[idx].fields[0].fields,0,0)));
    if (args[idx].fields[0].atom == "cpp.ifst") return ivyc_s1::cpp__stmt(3, new ivyc_s1::cpp__stmt::twrap<ivyc_s1::cpp__ifst>(_arg<ivyc_s1::cpp__ifst>(args[idx].fields[0].fields,0,0)));
    if (args[idx].fields[0].atom == "cpp.whilest") return ivyc_s1::cpp__stmt(4, new ivyc_s1::cpp__stmt::twrap<ivyc_s1::cpp__whilest>(_arg<ivyc_s1::cpp__whilest>(args[idx].fields[0].fields,0,0)));
    if (args[idx].fields[0].atom == "cpp.breakst") return ivyc_s1::cpp__stmt(5, new ivyc_s1::cpp__stmt::twrap<ivyc_s1::cpp__breakst>(_arg<ivyc_s1::cpp__breakst>(args[idx].fields[0].fields,0,0)));
    if (args[idx].fields[0].atom == "cpp.varst") return ivyc_s1::cpp__stmt(6, new ivyc_s1::cpp__stmt::twrap<ivyc_s1::cpp__varst>(_arg<ivyc_s1::cpp__varst>(args[idx].fields[0].fields,0,0)));
    if (args[idx].fields[0].atom == "cpp.retst") return ivyc_s1::cpp__stmt(7, new ivyc_s1::cpp__stmt::twrap<ivyc_s1::cpp__retst>(_arg<ivyc_s1::cpp__retst>(args[idx].fields[0].fields,0,0)));

        throw out_of_bounds("unexpected field sort SORTNAME: " + args[idx].fields[0].atom, args[idx].pos);
}
template <>
void __ser<ivyc_s1::cpp__stmt>(ivy_ser &res, const ivyc_s1::cpp__stmt &inp) {
    if (inp.tag == 0) {res.open_tag(0,"cpp.asgn"); __ser(res,ivyc_s1::cpp__stmt::unwrap< ivyc_s1::cpp__asgn >(inp)); res.close_tag();}
    if (inp.tag == 1) {res.open_tag(1,"cpp.sequence"); __ser(res,ivyc_s1::cpp__stmt::unwrap< ivyc_s1::cpp__sequence >(inp)); res.close_tag();}
    if (inp.tag == 2) {res.open_tag(2,"cpp.skipst"); __ser(res,ivyc_s1::cpp__stmt::unwrap< ivyc_s1::cpp__skipst >(inp)); res.close_tag();}
    if (inp.tag == 3) {res.open_tag(3,"cpp.ifst"); __ser(res,ivyc_s1::cpp__stmt::unwrap< ivyc_s1::cpp__ifst >(inp)); res.close_tag();}
    if (inp.tag == 4) {res.open_tag(4,"cpp.whilest"); __ser(res,ivyc_s1::cpp__stmt::unwrap< ivyc_s1::cpp__whilest >(inp)); res.close_tag();}
    if (inp.tag == 5) {res.open_tag(5,"cpp.breakst"); __ser(res,ivyc_s1::cpp__stmt::unwrap< ivyc_s1::cpp__breakst >(inp)); res.close_tag();}
    if (inp.tag == 6) {res.open_tag(6,"cpp.varst"); __ser(res,ivyc_s1::cpp__stmt::unwrap< ivyc_s1::cpp__varst >(inp)); res.close_tag();}
    if (inp.tag == 7) {res.open_tag(7,"cpp.retst"); __ser(res,ivyc_s1::cpp__stmt::unwrap< ivyc_s1::cpp__retst >(inp)); res.close_tag();}

}
template <>
void __deser<ivyc_s1::cpp__stmt>(ivy_deser &res, ivyc_s1::cpp__stmt &inp) {
    std::vector<std::string> tags;
    tags.push_back("cpp.asgn");
    tags.push_back("cpp.sequence");
    tags.push_back("cpp.skipst");
    tags.push_back("cpp.ifst");
    tags.push_back("cpp.whilest");
    tags.push_back("cpp.breakst");
    tags.push_back("cpp.varst");
    tags.push_back("cpp.retst");

    int tag = res.open_tag(tags);
    switch (tag) {
    case 0: {ivyc_s1::cpp__asgn tmp; __deser(res,tmp); inp = ivyc_s1::cpp__stmt(0, new ivyc_s1::cpp__stmt::twrap<ivyc_s1::cpp__asgn>(tmp)); break;} 
    case 1: {ivyc_s1::cpp__sequence tmp; __deser(res,tmp); inp = ivyc_s1::cpp__stmt(1, new ivyc_s1::cpp__stmt::twrap<ivyc_s1::cpp__sequence>(tmp)); break;} 
    case 2: {ivyc_s1::cpp__skipst tmp; __deser(res,tmp); inp = ivyc_s1::cpp__stmt(2, new ivyc_s1::cpp__stmt::twrap<ivyc_s1::cpp__skipst>(tmp)); break;} 
    case 3: {ivyc_s1::cpp__ifst tmp; __deser(res,tmp); inp = ivyc_s1::cpp__stmt(3, new ivyc_s1::cpp__stmt::twrap<ivyc_s1::cpp__ifst>(tmp)); break;} 
    case 4: {ivyc_s1::cpp__whilest tmp; __deser(res,tmp); inp = ivyc_s1::cpp__stmt(4, new ivyc_s1::cpp__stmt::twrap<ivyc_s1::cpp__whilest>(tmp)); break;} 
    case 5: {ivyc_s1::cpp__breakst tmp; __deser(res,tmp); inp = ivyc_s1::cpp__stmt(5, new ivyc_s1::cpp__stmt::twrap<ivyc_s1::cpp__breakst>(tmp)); break;} 
    case 6: {ivyc_s1::cpp__varst tmp; __deser(res,tmp); inp = ivyc_s1::cpp__stmt(6, new ivyc_s1::cpp__stmt::twrap<ivyc_s1::cpp__varst>(tmp)); break;} 
    case 7: {ivyc_s1::cpp__retst tmp; __deser(res,tmp); inp = ivyc_s1::cpp__stmt(7, new ivyc_s1::cpp__stmt::twrap<ivyc_s1::cpp__retst>(tmp)); break;} 

    }
    res.close_tag();
}
#ifdef Z3PP_H_
template <>
void __from_solver<ivyc_s1::cpp__stmt>( gen &g, const  z3::expr &v, ivyc_s1::cpp__stmt &res) {
    {
        z3::sort sort = g.sort("cpp.asgn");
        z3::func_decl pto = g.ctx.function("*>:cpp.stmt:cpp.asgn",g.sort("cpp.stmt"),g.sort("cpp.asgn"),g.ctx.bool_sort());
        // std::cout <<  g.model << std::endl;
        Z3_ast_vector av = Z3_model_get_sort_universe(g.ctx, g.model, sort);
        if (av) {
            z3::expr_vector univ(g.ctx,av);
            for (unsigned i = 0; i < univ.size(); i++){
                if (eq(g.model.eval(pto(v,univ[i]),true),g.ctx.bool_val(true))){
                    ivyc_s1::cpp__asgn tmp;
                    __from_solver(g,univ[i],tmp);                    res = ivyc_s1::cpp__stmt(0, new ivyc_s1::cpp__stmt::twrap<ivyc_s1::cpp__asgn>(tmp));
                }
            }
        }
    }
    {
        z3::sort sort = g.sort("cpp.sequence");
        z3::func_decl pto = g.ctx.function("*>:cpp.stmt:cpp.sequence",g.sort("cpp.stmt"),g.sort("cpp.sequence"),g.ctx.bool_sort());
        // std::cout <<  g.model << std::endl;
        Z3_ast_vector av = Z3_model_get_sort_universe(g.ctx, g.model, sort);
        if (av) {
            z3::expr_vector univ(g.ctx,av);
            for (unsigned i = 0; i < univ.size(); i++){
                if (eq(g.model.eval(pto(v,univ[i]),true),g.ctx.bool_val(true))){
                    ivyc_s1::cpp__sequence tmp;
                    __from_solver(g,univ[i],tmp);                    res = ivyc_s1::cpp__stmt(1, new ivyc_s1::cpp__stmt::twrap<ivyc_s1::cpp__sequence>(tmp));
                }
            }
        }
    }
    {
        z3::sort sort = g.sort("cpp.skipst");
        z3::func_decl pto = g.ctx.function("*>:cpp.stmt:cpp.skipst",g.sort("cpp.stmt"),g.sort("cpp.skipst"),g.ctx.bool_sort());
        // std::cout <<  g.model << std::endl;
        Z3_ast_vector av = Z3_model_get_sort_universe(g.ctx, g.model, sort);
        if (av) {
            z3::expr_vector univ(g.ctx,av);
            for (unsigned i = 0; i < univ.size(); i++){
                if (eq(g.model.eval(pto(v,univ[i]),true),g.ctx.bool_val(true))){
                    ivyc_s1::cpp__skipst tmp;
                    __from_solver(g,univ[i],tmp);                    res = ivyc_s1::cpp__stmt(2, new ivyc_s1::cpp__stmt::twrap<ivyc_s1::cpp__skipst>(tmp));
                }
            }
        }
    }
    {
        z3::sort sort = g.sort("cpp.ifst");
        z3::func_decl pto = g.ctx.function("*>:cpp.stmt:cpp.ifst",g.sort("cpp.stmt"),g.sort("cpp.ifst"),g.ctx.bool_sort());
        // std::cout <<  g.model << std::endl;
        Z3_ast_vector av = Z3_model_get_sort_universe(g.ctx, g.model, sort);
        if (av) {
            z3::expr_vector univ(g.ctx,av);
            for (unsigned i = 0; i < univ.size(); i++){
                if (eq(g.model.eval(pto(v,univ[i]),true),g.ctx.bool_val(true))){
                    ivyc_s1::cpp__ifst tmp;
                    __from_solver(g,univ[i],tmp);                    res = ivyc_s1::cpp__stmt(3, new ivyc_s1::cpp__stmt::twrap<ivyc_s1::cpp__ifst>(tmp));
                }
            }
        }
    }
    {
        z3::sort sort = g.sort("cpp.whilest");
        z3::func_decl pto = g.ctx.function("*>:cpp.stmt:cpp.whilest",g.sort("cpp.stmt"),g.sort("cpp.whilest"),g.ctx.bool_sort());
        // std::cout <<  g.model << std::endl;
        Z3_ast_vector av = Z3_model_get_sort_universe(g.ctx, g.model, sort);
        if (av) {
            z3::expr_vector univ(g.ctx,av);
            for (unsigned i = 0; i < univ.size(); i++){
                if (eq(g.model.eval(pto(v,univ[i]),true),g.ctx.bool_val(true))){
                    ivyc_s1::cpp__whilest tmp;
                    __from_solver(g,univ[i],tmp);                    res = ivyc_s1::cpp__stmt(4, new ivyc_s1::cpp__stmt::twrap<ivyc_s1::cpp__whilest>(tmp));
                }
            }
        }
    }
    {
        z3::sort sort = g.sort("cpp.breakst");
        z3::func_decl pto = g.ctx.function("*>:cpp.stmt:cpp.breakst",g.sort("cpp.stmt"),g.sort("cpp.breakst"),g.ctx.bool_sort());
        // std::cout <<  g.model << std::endl;
        Z3_ast_vector av = Z3_model_get_sort_universe(g.ctx, g.model, sort);
        if (av) {
            z3::expr_vector univ(g.ctx,av);
            for (unsigned i = 0; i < univ.size(); i++){
                if (eq(g.model.eval(pto(v,univ[i]),true),g.ctx.bool_val(true))){
                    ivyc_s1::cpp__breakst tmp;
                    __from_solver(g,univ[i],tmp);                    res = ivyc_s1::cpp__stmt(5, new ivyc_s1::cpp__stmt::twrap<ivyc_s1::cpp__breakst>(tmp));
                }
            }
        }
    }
    {
        z3::sort sort = g.sort("cpp.varst");
        z3::func_decl pto = g.ctx.function("*>:cpp.stmt:cpp.varst",g.sort("cpp.stmt"),g.sort("cpp.varst"),g.ctx.bool_sort());
        // std::cout <<  g.model << std::endl;
        Z3_ast_vector av = Z3_model_get_sort_universe(g.ctx, g.model, sort);
        if (av) {
            z3::expr_vector univ(g.ctx,av);
            for (unsigned i = 0; i < univ.size(); i++){
                if (eq(g.model.eval(pto(v,univ[i]),true),g.ctx.bool_val(true))){
                    ivyc_s1::cpp__varst tmp;
                    __from_solver(g,univ[i],tmp);                    res = ivyc_s1::cpp__stmt(6, new ivyc_s1::cpp__stmt::twrap<ivyc_s1::cpp__varst>(tmp));
                }
            }
        }
    }
    {
        z3::sort sort = g.sort("cpp.retst");
        z3::func_decl pto = g.ctx.function("*>:cpp.stmt:cpp.retst",g.sort("cpp.stmt"),g.sort("cpp.retst"),g.ctx.bool_sort());
        // std::cout <<  g.model << std::endl;
        Z3_ast_vector av = Z3_model_get_sort_universe(g.ctx, g.model, sort);
        if (av) {
            z3::expr_vector univ(g.ctx,av);
            for (unsigned i = 0; i < univ.size(); i++){
                if (eq(g.model.eval(pto(v,univ[i]),true),g.ctx.bool_val(true))){
                    ivyc_s1::cpp__retst tmp;
                    __from_solver(g,univ[i],tmp);                    res = ivyc_s1::cpp__stmt(7, new ivyc_s1::cpp__stmt::twrap<ivyc_s1::cpp__retst>(tmp));
                }
            }
        }
    }

}
template <>
z3::expr __to_solver<ivyc_s1::cpp__stmt>( gen &g, const  z3::expr &v, ivyc_s1::cpp__stmt &val) {
//    std::cout << v << ":" << v.get_sort() << std::endl;
    if (val.tag == 0) {
        z3::func_decl pto = g.ctx.function("*>:cpp.stmt:cpp.asgn",g.sort("cpp.stmt"),g.sort("cpp.asgn"),g.ctx.bool_sort());
        z3::expr X = g.ctx.constant("X",g.sort("cpp.asgn"));
        ivyc_s1::cpp__asgn tmp = ivyc_s1::cpp__stmt::unwrap< ivyc_s1::cpp__asgn >(val);
        return exists(X,pto(v,X) && __to_solver(g,X,tmp));
    }
    if (val.tag == 1) {
        z3::func_decl pto = g.ctx.function("*>:cpp.stmt:cpp.sequence",g.sort("cpp.stmt"),g.sort("cpp.sequence"),g.ctx.bool_sort());
        z3::expr X = g.ctx.constant("X",g.sort("cpp.sequence"));
        ivyc_s1::cpp__sequence tmp = ivyc_s1::cpp__stmt::unwrap< ivyc_s1::cpp__sequence >(val);
        return exists(X,pto(v,X) && __to_solver(g,X,tmp));
    }
    if (val.tag == 2) {
        z3::func_decl pto = g.ctx.function("*>:cpp.stmt:cpp.skipst",g.sort("cpp.stmt"),g.sort("cpp.skipst"),g.ctx.bool_sort());
        z3::expr X = g.ctx.constant("X",g.sort("cpp.skipst"));
        ivyc_s1::cpp__skipst tmp = ivyc_s1::cpp__stmt::unwrap< ivyc_s1::cpp__skipst >(val);
        return exists(X,pto(v,X) && __to_solver(g,X,tmp));
    }
    if (val.tag == 3) {
        z3::func_decl pto = g.ctx.function("*>:cpp.stmt:cpp.ifst",g.sort("cpp.stmt"),g.sort("cpp.ifst"),g.ctx.bool_sort());
        z3::expr X = g.ctx.constant("X",g.sort("cpp.ifst"));
        ivyc_s1::cpp__ifst tmp = ivyc_s1::cpp__stmt::unwrap< ivyc_s1::cpp__ifst >(val);
        return exists(X,pto(v,X) && __to_solver(g,X,tmp));
    }
    if (val.tag == 4) {
        z3::func_decl pto = g.ctx.function("*>:cpp.stmt:cpp.whilest",g.sort("cpp.stmt"),g.sort("cpp.whilest"),g.ctx.bool_sort());
        z3::expr X = g.ctx.constant("X",g.sort("cpp.whilest"));
        ivyc_s1::cpp__whilest tmp = ivyc_s1::cpp__stmt::unwrap< ivyc_s1::cpp__whilest >(val);
        return exists(X,pto(v,X) && __to_solver(g,X,tmp));
    }
    if (val.tag == 5) {
        z3::func_decl pto = g.ctx.function("*>:cpp.stmt:cpp.breakst",g.sort("cpp.stmt"),g.sort("cpp.breakst"),g.ctx.bool_sort());
        z3::expr X = g.ctx.constant("X",g.sort("cpp.breakst"));
        ivyc_s1::cpp__breakst tmp = ivyc_s1::cpp__stmt::unwrap< ivyc_s1::cpp__breakst >(val);
        return exists(X,pto(v,X) && __to_solver(g,X,tmp));
    }
    if (val.tag == 6) {
        z3::func_decl pto = g.ctx.function("*>:cpp.stmt:cpp.varst",g.sort("cpp.stmt"),g.sort("cpp.varst"),g.ctx.bool_sort());
        z3::expr X = g.ctx.constant("X",g.sort("cpp.varst"));
        ivyc_s1::cpp__varst tmp = ivyc_s1::cpp__stmt::unwrap< ivyc_s1::cpp__varst >(val);
        return exists(X,pto(v,X) && __to_solver(g,X,tmp));
    }
    if (val.tag == 7) {
        z3::func_decl pto = g.ctx.function("*>:cpp.stmt:cpp.retst",g.sort("cpp.stmt"),g.sort("cpp.retst"),g.ctx.bool_sort());
        z3::expr X = g.ctx.constant("X",g.sort("cpp.retst"));
        ivyc_s1::cpp__retst tmp = ivyc_s1::cpp__stmt::unwrap< ivyc_s1::cpp__retst >(val);
        return exists(X,pto(v,X) && __to_solver(g,X,tmp));
    }

    z3::expr conj = g.ctx.bool_val(false);
    {
        z3::func_decl pto = g.ctx.function("*>:cpp.stmt:cpp.asgn",g.sort("cpp.stmt"),g.sort("cpp.asgn"),g.ctx.bool_sort());
        z3::expr Y = g.ctx.constant("Y",g.sort("cpp.asgn"));
        conj = conj && forall(Y,!pto(v,Y));
    }
    {
        z3::func_decl pto = g.ctx.function("*>:cpp.stmt:cpp.sequence",g.sort("cpp.stmt"),g.sort("cpp.sequence"),g.ctx.bool_sort());
        z3::expr Y = g.ctx.constant("Y",g.sort("cpp.sequence"));
        conj = conj && forall(Y,!pto(v,Y));
    }
    {
        z3::func_decl pto = g.ctx.function("*>:cpp.stmt:cpp.skipst",g.sort("cpp.stmt"),g.sort("cpp.skipst"),g.ctx.bool_sort());
        z3::expr Y = g.ctx.constant("Y",g.sort("cpp.skipst"));
        conj = conj && forall(Y,!pto(v,Y));
    }
    {
        z3::func_decl pto = g.ctx.function("*>:cpp.stmt:cpp.ifst",g.sort("cpp.stmt"),g.sort("cpp.ifst"),g.ctx.bool_sort());
        z3::expr Y = g.ctx.constant("Y",g.sort("cpp.ifst"));
        conj = conj && forall(Y,!pto(v,Y));
    }
    {
        z3::func_decl pto = g.ctx.function("*>:cpp.stmt:cpp.whilest",g.sort("cpp.stmt"),g.sort("cpp.whilest"),g.ctx.bool_sort());
        z3::expr Y = g.ctx.constant("Y",g.sort("cpp.whilest"));
        conj = conj && forall(Y,!pto(v,Y));
    }
    {
        z3::func_decl pto = g.ctx.function("*>:cpp.stmt:cpp.breakst",g.sort("cpp.stmt"),g.sort("cpp.breakst"),g.ctx.bool_sort());
        z3::expr Y = g.ctx.constant("Y",g.sort("cpp.breakst"));
        conj = conj && forall(Y,!pto(v,Y));
    }
    {
        z3::func_decl pto = g.ctx.function("*>:cpp.stmt:cpp.varst",g.sort("cpp.stmt"),g.sort("cpp.varst"),g.ctx.bool_sort());
        z3::expr Y = g.ctx.constant("Y",g.sort("cpp.varst"));
        conj = conj && forall(Y,!pto(v,Y));
    }
    {
        z3::func_decl pto = g.ctx.function("*>:cpp.stmt:cpp.retst",g.sort("cpp.stmt"),g.sort("cpp.retst"),g.ctx.bool_sort());
        z3::expr Y = g.ctx.constant("Y",g.sort("cpp.retst"));
        conj = conj && forall(Y,!pto(v,Y));
    }

    return conj;
}
template <>
void __randomize<ivyc_s1::cpp__stmt>( gen &g, const  z3::expr &apply_expr) {
    std::ostringstream os;
    os << "__cpp.stmt__tmp" << ivyc_s1::cpp__stmt::temp_counter++;
    std::string temp = os.str();
    z3::sort range = apply_expr.get_sort();
    z3::expr disj = g.ctx.bool_val(false);
int tag = rand() % 8;
    if (tag == 0) {
        z3::func_decl pto = g.ctx.function("*>:cpp.stmt:cpp.asgn",g.sort("cpp.stmt"),g.sort("cpp.asgn"),g.ctx.bool_sort());
        z3::expr X = g.ctx.constant(temp.c_str(),g.sort("cpp.asgn"));
        z3::expr pred = pto(apply_expr,X);
        g.add_alit(pred);
        __randomize<ivyc_s1::cpp__asgn>(g,X);
    }
    if (tag == 1) {
        z3::func_decl pto = g.ctx.function("*>:cpp.stmt:cpp.sequence",g.sort("cpp.stmt"),g.sort("cpp.sequence"),g.ctx.bool_sort());
        z3::expr X = g.ctx.constant(temp.c_str(),g.sort("cpp.sequence"));
        z3::expr pred = pto(apply_expr,X);
        g.add_alit(pred);
        __randomize<ivyc_s1::cpp__sequence>(g,X);
    }
    if (tag == 2) {
        z3::func_decl pto = g.ctx.function("*>:cpp.stmt:cpp.skipst",g.sort("cpp.stmt"),g.sort("cpp.skipst"),g.ctx.bool_sort());
        z3::expr X = g.ctx.constant(temp.c_str(),g.sort("cpp.skipst"));
        z3::expr pred = pto(apply_expr,X);
        g.add_alit(pred);
        __randomize<ivyc_s1::cpp__skipst>(g,X);
    }
    if (tag == 3) {
        z3::func_decl pto = g.ctx.function("*>:cpp.stmt:cpp.ifst",g.sort("cpp.stmt"),g.sort("cpp.ifst"),g.ctx.bool_sort());
        z3::expr X = g.ctx.constant(temp.c_str(),g.sort("cpp.ifst"));
        z3::expr pred = pto(apply_expr,X);
        g.add_alit(pred);
        __randomize<ivyc_s1::cpp__ifst>(g,X);
    }
    if (tag == 4) {
        z3::func_decl pto = g.ctx.function("*>:cpp.stmt:cpp.whilest",g.sort("cpp.stmt"),g.sort("cpp.whilest"),g.ctx.bool_sort());
        z3::expr X = g.ctx.constant(temp.c_str(),g.sort("cpp.whilest"));
        z3::expr pred = pto(apply_expr,X);
        g.add_alit(pred);
        __randomize<ivyc_s1::cpp__whilest>(g,X);
    }
    if (tag == 5) {
        z3::func_decl pto = g.ctx.function("*>:cpp.stmt:cpp.breakst",g.sort("cpp.stmt"),g.sort("cpp.breakst"),g.ctx.bool_sort());
        z3::expr X = g.ctx.constant(temp.c_str(),g.sort("cpp.breakst"));
        z3::expr pred = pto(apply_expr,X);
        g.add_alit(pred);
        __randomize<ivyc_s1::cpp__breakst>(g,X);
    }
    if (tag == 6) {
        z3::func_decl pto = g.ctx.function("*>:cpp.stmt:cpp.varst",g.sort("cpp.stmt"),g.sort("cpp.varst"),g.ctx.bool_sort());
        z3::expr X = g.ctx.constant(temp.c_str(),g.sort("cpp.varst"));
        z3::expr pred = pto(apply_expr,X);
        g.add_alit(pred);
        __randomize<ivyc_s1::cpp__varst>(g,X);
    }
    if (tag == 7) {
        z3::func_decl pto = g.ctx.function("*>:cpp.stmt:cpp.retst",g.sort("cpp.stmt"),g.sort("cpp.retst"),g.ctx.bool_sort());
        z3::expr X = g.ctx.constant(temp.c_str(),g.sort("cpp.retst"));
        z3::expr pred = pto(apply_expr,X);
        g.add_alit(pred);
        __randomize<ivyc_s1::cpp__retst>(g,X);
    }

}
#endif

int ivyc_s1::cpp__decl::temp_counter = 0;

std::ostream &operator <<(std::ostream &s, const ivyc_s1::cpp__decl &t){
    s << "{";
    switch (t.tag) {
        case 0: s << "cpp.header:" << ivyc_s1::cpp__decl::unwrap< ivyc_s1::cpp__header >(t); break;
        case 1: s << "cpp.typedecl:" << ivyc_s1::cpp__decl::unwrap< ivyc_s1::cpp__typedecl >(t); break;
        case 2: s << "cpp.enumdecl:" << ivyc_s1::cpp__decl::unwrap< ivyc_s1::cpp__enumdecl >(t); break;
        case 3: s << "cpp.vardecl:" << ivyc_s1::cpp__decl::unwrap< ivyc_s1::cpp__vardecl >(t); break;
        case 4: s << "cpp.funcdecl:" << ivyc_s1::cpp__decl::unwrap< ivyc_s1::cpp__funcdecl >(t); break;
        case 5: s << "cpp.structdecl:" << ivyc_s1::cpp__decl::unwrap< ivyc_s1::cpp__structdecl >(t); break;
        case 6: s << "cpp.namespacedecl:" << ivyc_s1::cpp__decl::unwrap< ivyc_s1::cpp__namespacedecl >(t); break;
        case 7: s << "cpp.groupdc:" << ivyc_s1::cpp__decl::unwrap< ivyc_s1::cpp__groupdc >(t); break;

    }
    s << "}";
    return s;
}
template <>
ivyc_s1::cpp__decl _arg<ivyc_s1::cpp__decl>(std::vector<ivy_value> &args, unsigned idx, long long bound) {
    if (args[idx].atom.size())
        throw out_of_bounds("unexpected value for sort cpp.decl: " + args[idx].atom,args[idx].pos);
    if (args[idx].fields.size() == 0)
        return ivyc_s1::cpp__decl();
    if (args[idx].fields.size() != 1)
        throw out_of_bounds("too many fields for sort cpp.decl (expected one)",args[idx].pos);
    if (args[idx].fields[0].atom == "cpp.header") return ivyc_s1::cpp__decl(0, new ivyc_s1::cpp__decl::twrap<ivyc_s1::cpp__header>(_arg<ivyc_s1::cpp__header>(args[idx].fields[0].fields,0,0)));
    if (args[idx].fields[0].atom == "cpp.typedecl") return ivyc_s1::cpp__decl(1, new ivyc_s1::cpp__decl::twrap<ivyc_s1::cpp__typedecl>(_arg<ivyc_s1::cpp__typedecl>(args[idx].fields[0].fields,0,0)));
    if (args[idx].fields[0].atom == "cpp.enumdecl") return ivyc_s1::cpp__decl(2, new ivyc_s1::cpp__decl::twrap<ivyc_s1::cpp__enumdecl>(_arg<ivyc_s1::cpp__enumdecl>(args[idx].fields[0].fields,0,0)));
    if (args[idx].fields[0].atom == "cpp.vardecl") return ivyc_s1::cpp__decl(3, new ivyc_s1::cpp__decl::twrap<ivyc_s1::cpp__vardecl>(_arg<ivyc_s1::cpp__vardecl>(args[idx].fields[0].fields,0,0)));
    if (args[idx].fields[0].atom == "cpp.funcdecl") return ivyc_s1::cpp__decl(4, new ivyc_s1::cpp__decl::twrap<ivyc_s1::cpp__funcdecl>(_arg<ivyc_s1::cpp__funcdecl>(args[idx].fields[0].fields,0,0)));
    if (args[idx].fields[0].atom == "cpp.structdecl") return ivyc_s1::cpp__decl(5, new ivyc_s1::cpp__decl::twrap<ivyc_s1::cpp__structdecl>(_arg<ivyc_s1::cpp__structdecl>(args[idx].fields[0].fields,0,0)));
    if (args[idx].fields[0].atom == "cpp.namespacedecl") return ivyc_s1::cpp__decl(6, new ivyc_s1::cpp__decl::twrap<ivyc_s1::cpp__namespacedecl>(_arg<ivyc_s1::cpp__namespacedecl>(args[idx].fields[0].fields,0,0)));
    if (args[idx].fields[0].atom == "cpp.groupdc") return ivyc_s1::cpp__decl(7, new ivyc_s1::cpp__decl::twrap<ivyc_s1::cpp__groupdc>(_arg<ivyc_s1::cpp__groupdc>(args[idx].fields[0].fields,0,0)));

        throw out_of_bounds("unexpected field sort SORTNAME: " + args[idx].fields[0].atom, args[idx].pos);
}
template <>
void __ser<ivyc_s1::cpp__decl>(ivy_ser &res, const ivyc_s1::cpp__decl &inp) {
    if (inp.tag == 0) {res.open_tag(0,"cpp.header"); __ser(res,ivyc_s1::cpp__decl::unwrap< ivyc_s1::cpp__header >(inp)); res.close_tag();}
    if (inp.tag == 1) {res.open_tag(1,"cpp.typedecl"); __ser(res,ivyc_s1::cpp__decl::unwrap< ivyc_s1::cpp__typedecl >(inp)); res.close_tag();}
    if (inp.tag == 2) {res.open_tag(2,"cpp.enumdecl"); __ser(res,ivyc_s1::cpp__decl::unwrap< ivyc_s1::cpp__enumdecl >(inp)); res.close_tag();}
    if (inp.tag == 3) {res.open_tag(3,"cpp.vardecl"); __ser(res,ivyc_s1::cpp__decl::unwrap< ivyc_s1::cpp__vardecl >(inp)); res.close_tag();}
    if (inp.tag == 4) {res.open_tag(4,"cpp.funcdecl"); __ser(res,ivyc_s1::cpp__decl::unwrap< ivyc_s1::cpp__funcdecl >(inp)); res.close_tag();}
    if (inp.tag == 5) {res.open_tag(5,"cpp.structdecl"); __ser(res,ivyc_s1::cpp__decl::unwrap< ivyc_s1::cpp__structdecl >(inp)); res.close_tag();}
    if (inp.tag == 6) {res.open_tag(6,"cpp.namespacedecl"); __ser(res,ivyc_s1::cpp__decl::unwrap< ivyc_s1::cpp__namespacedecl >(inp)); res.close_tag();}
    if (inp.tag == 7) {res.open_tag(7,"cpp.groupdc"); __ser(res,ivyc_s1::cpp__decl::unwrap< ivyc_s1::cpp__groupdc >(inp)); res.close_tag();}

}
template <>
void __deser<ivyc_s1::cpp__decl>(ivy_deser &res, ivyc_s1::cpp__decl &inp) {
    std::vector<std::string> tags;
    tags.push_back("cpp.header");
    tags.push_back("cpp.typedecl");
    tags.push_back("cpp.enumdecl");
    tags.push_back("cpp.vardecl");
    tags.push_back("cpp.funcdecl");
    tags.push_back("cpp.structdecl");
    tags.push_back("cpp.namespacedecl");
    tags.push_back("cpp.groupdc");

    int tag = res.open_tag(tags);
    switch (tag) {
    case 0: {ivyc_s1::cpp__header tmp; __deser(res,tmp); inp = ivyc_s1::cpp__decl(0, new ivyc_s1::cpp__decl::twrap<ivyc_s1::cpp__header>(tmp)); break;} 
    case 1: {ivyc_s1::cpp__typedecl tmp; __deser(res,tmp); inp = ivyc_s1::cpp__decl(1, new ivyc_s1::cpp__decl::twrap<ivyc_s1::cpp__typedecl>(tmp)); break;} 
    case 2: {ivyc_s1::cpp__enumdecl tmp; __deser(res,tmp); inp = ivyc_s1::cpp__decl(2, new ivyc_s1::cpp__decl::twrap<ivyc_s1::cpp__enumdecl>(tmp)); break;} 
    case 3: {ivyc_s1::cpp__vardecl tmp; __deser(res,tmp); inp = ivyc_s1::cpp__decl(3, new ivyc_s1::cpp__decl::twrap<ivyc_s1::cpp__vardecl>(tmp)); break;} 
    case 4: {ivyc_s1::cpp__funcdecl tmp; __deser(res,tmp); inp = ivyc_s1::cpp__decl(4, new ivyc_s1::cpp__decl::twrap<ivyc_s1::cpp__funcdecl>(tmp)); break;} 
    case 5: {ivyc_s1::cpp__structdecl tmp; __deser(res,tmp); inp = ivyc_s1::cpp__decl(5, new ivyc_s1::cpp__decl::twrap<ivyc_s1::cpp__structdecl>(tmp)); break;} 
    case 6: {ivyc_s1::cpp__namespacedecl tmp; __deser(res,tmp); inp = ivyc_s1::cpp__decl(6, new ivyc_s1::cpp__decl::twrap<ivyc_s1::cpp__namespacedecl>(tmp)); break;} 
    case 7: {ivyc_s1::cpp__groupdc tmp; __deser(res,tmp); inp = ivyc_s1::cpp__decl(7, new ivyc_s1::cpp__decl::twrap<ivyc_s1::cpp__groupdc>(tmp)); break;} 

    }
    res.close_tag();
}
#ifdef Z3PP_H_
template <>
void __from_solver<ivyc_s1::cpp__decl>( gen &g, const  z3::expr &v, ivyc_s1::cpp__decl &res) {
    {
        z3::sort sort = g.sort("cpp.header");
        z3::func_decl pto = g.ctx.function("*>:cpp.decl:cpp.header",g.sort("cpp.decl"),g.sort("cpp.header"),g.ctx.bool_sort());
        // std::cout <<  g.model << std::endl;
        Z3_ast_vector av = Z3_model_get_sort_universe(g.ctx, g.model, sort);
        if (av) {
            z3::expr_vector univ(g.ctx,av);
            for (unsigned i = 0; i < univ.size(); i++){
                if (eq(g.model.eval(pto(v,univ[i]),true),g.ctx.bool_val(true))){
                    ivyc_s1::cpp__header tmp;
                    __from_solver(g,univ[i],tmp);                    res = ivyc_s1::cpp__decl(0, new ivyc_s1::cpp__decl::twrap<ivyc_s1::cpp__header>(tmp));
                }
            }
        }
    }
    {
        z3::sort sort = g.sort("cpp.typedecl");
        z3::func_decl pto = g.ctx.function("*>:cpp.decl:cpp.typedecl",g.sort("cpp.decl"),g.sort("cpp.typedecl"),g.ctx.bool_sort());
        // std::cout <<  g.model << std::endl;
        Z3_ast_vector av = Z3_model_get_sort_universe(g.ctx, g.model, sort);
        if (av) {
            z3::expr_vector univ(g.ctx,av);
            for (unsigned i = 0; i < univ.size(); i++){
                if (eq(g.model.eval(pto(v,univ[i]),true),g.ctx.bool_val(true))){
                    ivyc_s1::cpp__typedecl tmp;
                    __from_solver(g,univ[i],tmp);                    res = ivyc_s1::cpp__decl(1, new ivyc_s1::cpp__decl::twrap<ivyc_s1::cpp__typedecl>(tmp));
                }
            }
        }
    }
    {
        z3::sort sort = g.sort("cpp.enumdecl");
        z3::func_decl pto = g.ctx.function("*>:cpp.decl:cpp.enumdecl",g.sort("cpp.decl"),g.sort("cpp.enumdecl"),g.ctx.bool_sort());
        // std::cout <<  g.model << std::endl;
        Z3_ast_vector av = Z3_model_get_sort_universe(g.ctx, g.model, sort);
        if (av) {
            z3::expr_vector univ(g.ctx,av);
            for (unsigned i = 0; i < univ.size(); i++){
                if (eq(g.model.eval(pto(v,univ[i]),true),g.ctx.bool_val(true))){
                    ivyc_s1::cpp__enumdecl tmp;
                    __from_solver(g,univ[i],tmp);                    res = ivyc_s1::cpp__decl(2, new ivyc_s1::cpp__decl::twrap<ivyc_s1::cpp__enumdecl>(tmp));
                }
            }
        }
    }
    {
        z3::sort sort = g.sort("cpp.vardecl");
        z3::func_decl pto = g.ctx.function("*>:cpp.decl:cpp.vardecl",g.sort("cpp.decl"),g.sort("cpp.vardecl"),g.ctx.bool_sort());
        // std::cout <<  g.model << std::endl;
        Z3_ast_vector av = Z3_model_get_sort_universe(g.ctx, g.model, sort);
        if (av) {
            z3::expr_vector univ(g.ctx,av);
            for (unsigned i = 0; i < univ.size(); i++){
                if (eq(g.model.eval(pto(v,univ[i]),true),g.ctx.bool_val(true))){
                    ivyc_s1::cpp__vardecl tmp;
                    __from_solver(g,univ[i],tmp);                    res = ivyc_s1::cpp__decl(3, new ivyc_s1::cpp__decl::twrap<ivyc_s1::cpp__vardecl>(tmp));
                }
            }
        }
    }
    {
        z3::sort sort = g.sort("cpp.funcdecl");
        z3::func_decl pto = g.ctx.function("*>:cpp.decl:cpp.funcdecl",g.sort("cpp.decl"),g.sort("cpp.funcdecl"),g.ctx.bool_sort());
        // std::cout <<  g.model << std::endl;
        Z3_ast_vector av = Z3_model_get_sort_universe(g.ctx, g.model, sort);
        if (av) {
            z3::expr_vector univ(g.ctx,av);
            for (unsigned i = 0; i < univ.size(); i++){
                if (eq(g.model.eval(pto(v,univ[i]),true),g.ctx.bool_val(true))){
                    ivyc_s1::cpp__funcdecl tmp;
                    __from_solver(g,univ[i],tmp);                    res = ivyc_s1::cpp__decl(4, new ivyc_s1::cpp__decl::twrap<ivyc_s1::cpp__funcdecl>(tmp));
                }
            }
        }
    }
    {
        z3::sort sort = g.sort("cpp.structdecl");
        z3::func_decl pto = g.ctx.function("*>:cpp.decl:cpp.structdecl",g.sort("cpp.decl"),g.sort("cpp.structdecl"),g.ctx.bool_sort());
        // std::cout <<  g.model << std::endl;
        Z3_ast_vector av = Z3_model_get_sort_universe(g.ctx, g.model, sort);
        if (av) {
            z3::expr_vector univ(g.ctx,av);
            for (unsigned i = 0; i < univ.size(); i++){
                if (eq(g.model.eval(pto(v,univ[i]),true),g.ctx.bool_val(true))){
                    ivyc_s1::cpp__structdecl tmp;
                    __from_solver(g,univ[i],tmp);                    res = ivyc_s1::cpp__decl(5, new ivyc_s1::cpp__decl::twrap<ivyc_s1::cpp__structdecl>(tmp));
                }
            }
        }
    }
    {
        z3::sort sort = g.sort("cpp.namespacedecl");
        z3::func_decl pto = g.ctx.function("*>:cpp.decl:cpp.namespacedecl",g.sort("cpp.decl"),g.sort("cpp.namespacedecl"),g.ctx.bool_sort());
        // std::cout <<  g.model << std::endl;
        Z3_ast_vector av = Z3_model_get_sort_universe(g.ctx, g.model, sort);
        if (av) {
            z3::expr_vector univ(g.ctx,av);
            for (unsigned i = 0; i < univ.size(); i++){
                if (eq(g.model.eval(pto(v,univ[i]),true),g.ctx.bool_val(true))){
                    ivyc_s1::cpp__namespacedecl tmp;
                    __from_solver(g,univ[i],tmp);                    res = ivyc_s1::cpp__decl(6, new ivyc_s1::cpp__decl::twrap<ivyc_s1::cpp__namespacedecl>(tmp));
                }
            }
        }
    }
    {
        z3::sort sort = g.sort("cpp.groupdc");
        z3::func_decl pto = g.ctx.function("*>:cpp.decl:cpp.groupdc",g.sort("cpp.decl"),g.sort("cpp.groupdc"),g.ctx.bool_sort());
        // std::cout <<  g.model << std::endl;
        Z3_ast_vector av = Z3_model_get_sort_universe(g.ctx, g.model, sort);
        if (av) {
            z3::expr_vector univ(g.ctx,av);
            for (unsigned i = 0; i < univ.size(); i++){
                if (eq(g.model.eval(pto(v,univ[i]),true),g.ctx.bool_val(true))){
                    ivyc_s1::cpp__groupdc tmp;
                    __from_solver(g,univ[i],tmp);                    res = ivyc_s1::cpp__decl(7, new ivyc_s1::cpp__decl::twrap<ivyc_s1::cpp__groupdc>(tmp));
                }
            }
        }
    }

}
template <>
z3::expr __to_solver<ivyc_s1::cpp__decl>( gen &g, const  z3::expr &v, ivyc_s1::cpp__decl &val) {
//    std::cout << v << ":" << v.get_sort() << std::endl;
    if (val.tag == 0) {
        z3::func_decl pto = g.ctx.function("*>:cpp.decl:cpp.header",g.sort("cpp.decl"),g.sort("cpp.header"),g.ctx.bool_sort());
        z3::expr X = g.ctx.constant("X",g.sort("cpp.header"));
        ivyc_s1::cpp__header tmp = ivyc_s1::cpp__decl::unwrap< ivyc_s1::cpp__header >(val);
        return exists(X,pto(v,X) && __to_solver(g,X,tmp));
    }
    if (val.tag == 1) {
        z3::func_decl pto = g.ctx.function("*>:cpp.decl:cpp.typedecl",g.sort("cpp.decl"),g.sort("cpp.typedecl"),g.ctx.bool_sort());
        z3::expr X = g.ctx.constant("X",g.sort("cpp.typedecl"));
        ivyc_s1::cpp__typedecl tmp = ivyc_s1::cpp__decl::unwrap< ivyc_s1::cpp__typedecl >(val);
        return exists(X,pto(v,X) && __to_solver(g,X,tmp));
    }
    if (val.tag == 2) {
        z3::func_decl pto = g.ctx.function("*>:cpp.decl:cpp.enumdecl",g.sort("cpp.decl"),g.sort("cpp.enumdecl"),g.ctx.bool_sort());
        z3::expr X = g.ctx.constant("X",g.sort("cpp.enumdecl"));
        ivyc_s1::cpp__enumdecl tmp = ivyc_s1::cpp__decl::unwrap< ivyc_s1::cpp__enumdecl >(val);
        return exists(X,pto(v,X) && __to_solver(g,X,tmp));
    }
    if (val.tag == 3) {
        z3::func_decl pto = g.ctx.function("*>:cpp.decl:cpp.vardecl",g.sort("cpp.decl"),g.sort("cpp.vardecl"),g.ctx.bool_sort());
        z3::expr X = g.ctx.constant("X",g.sort("cpp.vardecl"));
        ivyc_s1::cpp__vardecl tmp = ivyc_s1::cpp__decl::unwrap< ivyc_s1::cpp__vardecl >(val);
        return exists(X,pto(v,X) && __to_solver(g,X,tmp));
    }
    if (val.tag == 4) {
        z3::func_decl pto = g.ctx.function("*>:cpp.decl:cpp.funcdecl",g.sort("cpp.decl"),g.sort("cpp.funcdecl"),g.ctx.bool_sort());
        z3::expr X = g.ctx.constant("X",g.sort("cpp.funcdecl"));
        ivyc_s1::cpp__funcdecl tmp = ivyc_s1::cpp__decl::unwrap< ivyc_s1::cpp__funcdecl >(val);
        return exists(X,pto(v,X) && __to_solver(g,X,tmp));
    }
    if (val.tag == 5) {
        z3::func_decl pto = g.ctx.function("*>:cpp.decl:cpp.structdecl",g.sort("cpp.decl"),g.sort("cpp.structdecl"),g.ctx.bool_sort());
        z3::expr X = g.ctx.constant("X",g.sort("cpp.structdecl"));
        ivyc_s1::cpp__structdecl tmp = ivyc_s1::cpp__decl::unwrap< ivyc_s1::cpp__structdecl >(val);
        return exists(X,pto(v,X) && __to_solver(g,X,tmp));
    }
    if (val.tag == 6) {
        z3::func_decl pto = g.ctx.function("*>:cpp.decl:cpp.namespacedecl",g.sort("cpp.decl"),g.sort("cpp.namespacedecl"),g.ctx.bool_sort());
        z3::expr X = g.ctx.constant("X",g.sort("cpp.namespacedecl"));
        ivyc_s1::cpp__namespacedecl tmp = ivyc_s1::cpp__decl::unwrap< ivyc_s1::cpp__namespacedecl >(val);
        return exists(X,pto(v,X) && __to_solver(g,X,tmp));
    }
    if (val.tag == 7) {
        z3::func_decl pto = g.ctx.function("*>:cpp.decl:cpp.groupdc",g.sort("cpp.decl"),g.sort("cpp.groupdc"),g.ctx.bool_sort());
        z3::expr X = g.ctx.constant("X",g.sort("cpp.groupdc"));
        ivyc_s1::cpp__groupdc tmp = ivyc_s1::cpp__decl::unwrap< ivyc_s1::cpp__groupdc >(val);
        return exists(X,pto(v,X) && __to_solver(g,X,tmp));
    }

    z3::expr conj = g.ctx.bool_val(false);
    {
        z3::func_decl pto = g.ctx.function("*>:cpp.decl:cpp.header",g.sort("cpp.decl"),g.sort("cpp.header"),g.ctx.bool_sort());
        z3::expr Y = g.ctx.constant("Y",g.sort("cpp.header"));
        conj = conj && forall(Y,!pto(v,Y));
    }
    {
        z3::func_decl pto = g.ctx.function("*>:cpp.decl:cpp.typedecl",g.sort("cpp.decl"),g.sort("cpp.typedecl"),g.ctx.bool_sort());
        z3::expr Y = g.ctx.constant("Y",g.sort("cpp.typedecl"));
        conj = conj && forall(Y,!pto(v,Y));
    }
    {
        z3::func_decl pto = g.ctx.function("*>:cpp.decl:cpp.enumdecl",g.sort("cpp.decl"),g.sort("cpp.enumdecl"),g.ctx.bool_sort());
        z3::expr Y = g.ctx.constant("Y",g.sort("cpp.enumdecl"));
        conj = conj && forall(Y,!pto(v,Y));
    }
    {
        z3::func_decl pto = g.ctx.function("*>:cpp.decl:cpp.vardecl",g.sort("cpp.decl"),g.sort("cpp.vardecl"),g.ctx.bool_sort());
        z3::expr Y = g.ctx.constant("Y",g.sort("cpp.vardecl"));
        conj = conj && forall(Y,!pto(v,Y));
    }
    {
        z3::func_decl pto = g.ctx.function("*>:cpp.decl:cpp.funcdecl",g.sort("cpp.decl"),g.sort("cpp.funcdecl"),g.ctx.bool_sort());
        z3::expr Y = g.ctx.constant("Y",g.sort("cpp.funcdecl"));
        conj = conj && forall(Y,!pto(v,Y));
    }
    {
        z3::func_decl pto = g.ctx.function("*>:cpp.decl:cpp.structdecl",g.sort("cpp.decl"),g.sort("cpp.structdecl"),g.ctx.bool_sort());
        z3::expr Y = g.ctx.constant("Y",g.sort("cpp.structdecl"));
        conj = conj && forall(Y,!pto(v,Y));
    }
    {
        z3::func_decl pto = g.ctx.function("*>:cpp.decl:cpp.namespacedecl",g.sort("cpp.decl"),g.sort("cpp.namespacedecl"),g.ctx.bool_sort());
        z3::expr Y = g.ctx.constant("Y",g.sort("cpp.namespacedecl"));
        conj = conj && forall(Y,!pto(v,Y));
    }
    {
        z3::func_decl pto = g.ctx.function("*>:cpp.decl:cpp.groupdc",g.sort("cpp.decl"),g.sort("cpp.groupdc"),g.ctx.bool_sort());
        z3::expr Y = g.ctx.constant("Y",g.sort("cpp.groupdc"));
        conj = conj && forall(Y,!pto(v,Y));
    }

    return conj;
}
template <>
void __randomize<ivyc_s1::cpp__decl>( gen &g, const  z3::expr &apply_expr) {
    std::ostringstream os;
    os << "__cpp.decl__tmp" << ivyc_s1::cpp__decl::temp_counter++;
    std::string temp = os.str();
    z3::sort range = apply_expr.get_sort();
    z3::expr disj = g.ctx.bool_val(false);
int tag = rand() % 8;
    if (tag == 0) {
        z3::func_decl pto = g.ctx.function("*>:cpp.decl:cpp.header",g.sort("cpp.decl"),g.sort("cpp.header"),g.ctx.bool_sort());
        z3::expr X = g.ctx.constant(temp.c_str(),g.sort("cpp.header"));
        z3::expr pred = pto(apply_expr,X);
        g.add_alit(pred);
        __randomize<ivyc_s1::cpp__header>(g,X);
    }
    if (tag == 1) {
        z3::func_decl pto = g.ctx.function("*>:cpp.decl:cpp.typedecl",g.sort("cpp.decl"),g.sort("cpp.typedecl"),g.ctx.bool_sort());
        z3::expr X = g.ctx.constant(temp.c_str(),g.sort("cpp.typedecl"));
        z3::expr pred = pto(apply_expr,X);
        g.add_alit(pred);
        __randomize<ivyc_s1::cpp__typedecl>(g,X);
    }
    if (tag == 2) {
        z3::func_decl pto = g.ctx.function("*>:cpp.decl:cpp.enumdecl",g.sort("cpp.decl"),g.sort("cpp.enumdecl"),g.ctx.bool_sort());
        z3::expr X = g.ctx.constant(temp.c_str(),g.sort("cpp.enumdecl"));
        z3::expr pred = pto(apply_expr,X);
        g.add_alit(pred);
        __randomize<ivyc_s1::cpp__enumdecl>(g,X);
    }
    if (tag == 3) {
        z3::func_decl pto = g.ctx.function("*>:cpp.decl:cpp.vardecl",g.sort("cpp.decl"),g.sort("cpp.vardecl"),g.ctx.bool_sort());
        z3::expr X = g.ctx.constant(temp.c_str(),g.sort("cpp.vardecl"));
        z3::expr pred = pto(apply_expr,X);
        g.add_alit(pred);
        __randomize<ivyc_s1::cpp__vardecl>(g,X);
    }
    if (tag == 4) {
        z3::func_decl pto = g.ctx.function("*>:cpp.decl:cpp.funcdecl",g.sort("cpp.decl"),g.sort("cpp.funcdecl"),g.ctx.bool_sort());
        z3::expr X = g.ctx.constant(temp.c_str(),g.sort("cpp.funcdecl"));
        z3::expr pred = pto(apply_expr,X);
        g.add_alit(pred);
        __randomize<ivyc_s1::cpp__funcdecl>(g,X);
    }
    if (tag == 5) {
        z3::func_decl pto = g.ctx.function("*>:cpp.decl:cpp.structdecl",g.sort("cpp.decl"),g.sort("cpp.structdecl"),g.ctx.bool_sort());
        z3::expr X = g.ctx.constant(temp.c_str(),g.sort("cpp.structdecl"));
        z3::expr pred = pto(apply_expr,X);
        g.add_alit(pred);
        __randomize<ivyc_s1::cpp__structdecl>(g,X);
    }
    if (tag == 6) {
        z3::func_decl pto = g.ctx.function("*>:cpp.decl:cpp.namespacedecl",g.sort("cpp.decl"),g.sort("cpp.namespacedecl"),g.ctx.bool_sort());
        z3::expr X = g.ctx.constant(temp.c_str(),g.sort("cpp.namespacedecl"));
        z3::expr pred = pto(apply_expr,X);
        g.add_alit(pred);
        __randomize<ivyc_s1::cpp__namespacedecl>(g,X);
    }
    if (tag == 7) {
        z3::func_decl pto = g.ctx.function("*>:cpp.decl:cpp.groupdc",g.sort("cpp.decl"),g.sort("cpp.groupdc"),g.ctx.bool_sort());
        z3::expr X = g.ctx.constant(temp.c_str(),g.sort("cpp.groupdc"));
        z3::expr pred = pto(apply_expr,X);
        g.add_alit(pred);
        __randomize<ivyc_s1::cpp__groupdc>(g,X);
    }

}
#endif
        template <typename T>
        T __string_segment(const T &a, long long lo, long long hi) {
            T res;
            lo = (lo < 0) ? 0 : lo;
            hi = (hi > a.size()) ? a.size() : hi;
            if (hi > lo) {
                res.resize(hi-lo);
                std::copy(a.begin()+lo,a.begin()+hi,res.begin());
            }
            return res;
        }
        	    std::ostream &operator <<(std::ostream &s, const ivyc_s1::str &a) {
	        s << '"';
		for (unsigned i = 0; i < a.size(); i++) {
		    s << (char)a[i];
		}
	        s << '"';
		return s;
            }

	    template <>
	    ivyc_s1::str _arg<ivyc_s1::str>(std::vector<ivy_value> &args, unsigned idx, long long bound) {
	         if (args[idx].fields.size())
                     throw out_of_bounds(idx);
	         ivyc_s1::str res;
	         std::string s = args[idx].atom;
	         for (unsigned __idx = 0; __idx < s.size(); __idx++)
	             res.push_back(s[__idx]);
	         return res;
	    }

	    template <>
	    ivyc_s1::str __lit<ivyc_s1::str>(const char *c) {
	         ivyc_s1::str res;
	         std::string s = c;
	         for (unsigned __idx = 0; __idx < s.size(); __idx++)
	             res.push_back(s[__idx]);
	         return res;
	    }

	    template <>
	    void __deser<ivyc_s1::str>(ivy_deser &inp, ivyc_s1::str &res) {
	        inp.open_list();
	        while(inp.open_list_elem()) {
		    res.resize(res.size()+1);
	            __deser(inp,res.back());
		    inp.close_list_elem();
                }
		inp.close_list();
	    }

	    template <>
	    void __ser<ivyc_s1::str>(ivy_ser &res, const ivyc_s1::str &inp) {
	        int sz = inp.size();
	        res.open_list(sz);
	        for (unsigned i = 0; i < (unsigned)sz; i++) {
		    res.open_list_elem();
	            __ser(res,inp[i]);
		    res.close_list_elem();
                }
	        res.close_list();
	    }

	    #ifdef Z3PP_H_
	    template <>
            z3::expr __to_solver(gen& g, const z3::expr& z3val, ivyc_s1::str& val) {
	        z3::expr z3end = g.apply("str.end",z3val);
	        z3::expr __ret = z3end  == g.int_to_z3(z3end.get_sort(),val.size());
	        unsigned __sz = val.size();
	        for (unsigned __i = 0; __i < __sz; ++__i)
		    __ret = __ret && __to_solver(g,g.apply("str.value",z3val,g.int_to_z3(g.sort("pos"),__i)),val[__i]);
                return __ret;
            }

	    template <>
	    void  __from_solver<ivyc_s1::str>( gen &g, const  z3::expr &v,ivyc_s1::str &res){
	        unsigned long long __end;
	        __from_solver(g,g.apply("str.end",v),__end);
	        unsigned __sz = (unsigned) __end;
	        res.resize(__sz);
	        for (unsigned __i = 0; __i < __sz; ++__i)
		    __from_solver(g,g.apply("str.value",v,g.int_to_z3(g.sort("pos"),__i)),res[__i]);
	    }

	    template <>
	    void  __randomize<ivyc_s1::str>( gen &g, const  z3::expr &v){
	        unsigned __sz = rand() % 4;
                z3::expr val_expr = g.int_to_z3(g.sort("pos"),__sz);
                z3::expr pred =  g.apply("str.end",v) == val_expr;
                g.add_alit(pred);
	        for (unsigned __i = 0; __i < __sz; ++__i)
	            __randomize<int>(g,g.apply("str.value",v,g.int_to_z3(g.sort("pos"),__i)));
	    }
	    #endif

	        template <typename T>
        T __array_segment(const T &a, long long lo, long long hi) {
            T res;
            lo = (lo < 0) ? 0 : lo;
            hi = (hi > a.size()) ? a.size() : hi;
            if (hi > lo) {
                res.resize(hi-lo);
                std::copy(a.begin()+lo,a.begin()+hi,res.begin());
            }
            return res;
        }
        	    std::ostream &operator <<(std::ostream &s, const ivyc_s1::vector__pretty__token__ &a) {
	        s << '[';
		for (unsigned i = 0; i < a.size(); i++) {
		    if (i != 0)
		        s << ',';
		    s << a[i];
		}
	        s << ']';
		return s;
            }

	    template <>
	    ivyc_s1::vector__pretty__token__ _arg<ivyc_s1::vector__pretty__token__>(std::vector<ivy_value> &args, unsigned idx, long long bound) {
	        ivy_value &arg = args[idx];
	        if (arg.atom.size()) 
	            throw out_of_bounds(idx);
	        ivyc_s1::vector__pretty__token__ a;
	        a.resize(arg.fields.size());
		for (unsigned i = 0; i < a.size(); i++) {
		    a[i] = _arg<ivyc_s1::pretty__token>(arg.fields,i,0);
	        }
	        return a;
	    }

	    template <>
	    void __deser<ivyc_s1::vector__pretty__token__>(ivy_deser &inp, ivyc_s1::vector__pretty__token__ &res) {
	        inp.open_list();
	        while(inp.open_list_elem()) {
		    res.resize(res.size()+1);
	            __deser(inp,res.back());
		    inp.close_list_elem();
                }
		inp.close_list();
	    }

	    template <>
	    void __ser<ivyc_s1::vector__pretty__token__>(ivy_ser &res, const ivyc_s1::vector__pretty__token__ &inp) {
	        int sz = inp.size();
	        res.open_list(sz);
	        for (unsigned i = 0; i < (unsigned)sz; i++) {
		    res.open_list_elem();
	            __ser(res,inp[i]);
		    res.close_list_elem();
                }
	        res.close_list();
	    }

	    #ifdef Z3PP_H_
	    template <>
            z3::expr __to_solver(gen& g, const z3::expr& z3val, ivyc_s1::vector__pretty__token__& val) {
	        z3::expr z3end = g.apply("vector[pretty.token].end",z3val);
	        z3::expr __ret = z3end  == g.int_to_z3(z3end.get_sort(),val.size());
	        unsigned __sz = val.size();
	        for (unsigned __i = 0; __i < __sz; ++__i)
		    __ret = __ret && __to_solver(g,g.apply("vector[pretty.token].value",z3val,g.int_to_z3(g.sort("vector[pretty.token].domain"),__i)),val[__i]);
                return __ret;
            }

	    template <>
	    void  __from_solver<ivyc_s1::vector__pretty__token__>( gen &g, const  z3::expr &v,ivyc_s1::vector__pretty__token__ &res){
	        unsigned long long __end;
	        __from_solver(g,g.apply("vector[pretty.token].end",v),__end);
	        unsigned __sz = (unsigned) __end;
	        res.resize(__sz);
	        for (unsigned __i = 0; __i < __sz; ++__i)
		    __from_solver(g,g.apply("vector[pretty.token].value",v,g.int_to_z3(g.sort("vector[pretty.token].domain"),__i)),res[__i]);
	    }

	    template <>
	    void  __randomize<ivyc_s1::vector__pretty__token__>( gen &g, const  z3::expr &v){
	        unsigned __sz = rand() % 4;
                z3::expr val_expr = g.int_to_z3(g.sort("vector[pretty.token].domain"),__sz);
                z3::expr pred =  g.apply("vector[pretty.token].end",v) == val_expr;
                g.add_alit(pred);
	        for (unsigned __i = 0; __i < __sz; ++__i)
	            __randomize<ivyc_s1::pretty__token>(g,g.apply("vector[pretty.token].value",v,g.int_to_z3(g.sort("vector[pretty.token].domain"),__i)));
	    }
	    #endif

		    std::ostream &operator <<(std::ostream &s, const ivyc_s1::vector__pos__ &a) {
	        s << '[';
		for (unsigned i = 0; i < a.size(); i++) {
		    if (i != 0)
		        s << ',';
		    s << a[i];
		}
	        s << ']';
		return s;
            }

	    template <>
	    ivyc_s1::vector__pos__ _arg<ivyc_s1::vector__pos__>(std::vector<ivy_value> &args, unsigned idx, long long bound) {
	        ivy_value &arg = args[idx];
	        if (arg.atom.size()) 
	            throw out_of_bounds(idx);
	        ivyc_s1::vector__pos__ a;
	        a.resize(arg.fields.size());
		for (unsigned i = 0; i < a.size(); i++) {
		    a[i] = _arg<unsigned long long>(arg.fields,i,0);
	        }
	        return a;
	    }

	    template <>
	    void __deser<ivyc_s1::vector__pos__>(ivy_deser &inp, ivyc_s1::vector__pos__ &res) {
	        inp.open_list();
	        while(inp.open_list_elem()) {
		    res.resize(res.size()+1);
	            __deser(inp,res.back());
		    inp.close_list_elem();
                }
		inp.close_list();
	    }

	    template <>
	    void __ser<ivyc_s1::vector__pos__>(ivy_ser &res, const ivyc_s1::vector__pos__ &inp) {
	        int sz = inp.size();
	        res.open_list(sz);
	        for (unsigned i = 0; i < (unsigned)sz; i++) {
		    res.open_list_elem();
	            __ser(res,inp[i]);
		    res.close_list_elem();
                }
	        res.close_list();
	    }

	    #ifdef Z3PP_H_
	    template <>
            z3::expr __to_solver(gen& g, const z3::expr& z3val, ivyc_s1::vector__pos__& val) {
	        z3::expr z3end = g.apply("vector[pos].end",z3val);
	        z3::expr __ret = z3end  == g.int_to_z3(z3end.get_sort(),val.size());
	        unsigned __sz = val.size();
	        for (unsigned __i = 0; __i < __sz; ++__i)
		    __ret = __ret && __to_solver(g,g.apply("vector[pos].value",z3val,g.int_to_z3(g.sort("vector[pos].domain"),__i)),val[__i]);
                return __ret;
            }

	    template <>
	    void  __from_solver<ivyc_s1::vector__pos__>( gen &g, const  z3::expr &v,ivyc_s1::vector__pos__ &res){
	        unsigned long long __end;
	        __from_solver(g,g.apply("vector[pos].end",v),__end);
	        unsigned __sz = (unsigned) __end;
	        res.resize(__sz);
	        for (unsigned __i = 0; __i < __sz; ++__i)
		    __from_solver(g,g.apply("vector[pos].value",v,g.int_to_z3(g.sort("vector[pos].domain"),__i)),res[__i]);
	    }

	    template <>
	    void  __randomize<ivyc_s1::vector__pos__>( gen &g, const  z3::expr &v){
	        unsigned __sz = rand() % 4;
                z3::expr val_expr = g.int_to_z3(g.sort("vector[pos].domain"),__sz);
                z3::expr pred =  g.apply("vector[pos].end",v) == val_expr;
                g.add_alit(pred);
	        for (unsigned __i = 0; __i < __sz; ++__i)
	            __randomize<unsigned long long>(g,g.apply("vector[pos].value",v,g.int_to_z3(g.sort("vector[pos].domain"),__i)));
	    }
	    #endif

		    std::ostream &operator <<(std::ostream &s, const ivyc_s1::vector__pretty__state__ &a) {
	        s << '[';
		for (unsigned i = 0; i < a.size(); i++) {
		    if (i != 0)
		        s << ',';
		    s << a[i];
		}
	        s << ']';
		return s;
            }

	    template <>
	    ivyc_s1::vector__pretty__state__ _arg<ivyc_s1::vector__pretty__state__>(std::vector<ivy_value> &args, unsigned idx, long long bound) {
	        ivy_value &arg = args[idx];
	        if (arg.atom.size()) 
	            throw out_of_bounds(idx);
	        ivyc_s1::vector__pretty__state__ a;
	        a.resize(arg.fields.size());
		for (unsigned i = 0; i < a.size(); i++) {
		    a[i] = _arg<ivyc_s1::pretty__state>(arg.fields,i,0);
	        }
	        return a;
	    }

	    template <>
	    void __deser<ivyc_s1::vector__pretty__state__>(ivy_deser &inp, ivyc_s1::vector__pretty__state__ &res) {
	        inp.open_list();
	        while(inp.open_list_elem()) {
		    res.resize(res.size()+1);
	            __deser(inp,res.back());
		    inp.close_list_elem();
                }
		inp.close_list();
	    }

	    template <>
	    void __ser<ivyc_s1::vector__pretty__state__>(ivy_ser &res, const ivyc_s1::vector__pretty__state__ &inp) {
	        int sz = inp.size();
	        res.open_list(sz);
	        for (unsigned i = 0; i < (unsigned)sz; i++) {
		    res.open_list_elem();
	            __ser(res,inp[i]);
		    res.close_list_elem();
                }
	        res.close_list();
	    }

	    #ifdef Z3PP_H_
	    template <>
            z3::expr __to_solver(gen& g, const z3::expr& z3val, ivyc_s1::vector__pretty__state__& val) {
	        z3::expr z3end = g.apply("vector[pretty.state].end",z3val);
	        z3::expr __ret = z3end  == g.int_to_z3(z3end.get_sort(),val.size());
	        unsigned __sz = val.size();
	        for (unsigned __i = 0; __i < __sz; ++__i)
		    __ret = __ret && __to_solver(g,g.apply("vector[pretty.state].value",z3val,g.int_to_z3(g.sort("vector[pretty.state].domain"),__i)),val[__i]);
                return __ret;
            }

	    template <>
	    void  __from_solver<ivyc_s1::vector__pretty__state__>( gen &g, const  z3::expr &v,ivyc_s1::vector__pretty__state__ &res){
	        unsigned long long __end;
	        __from_solver(g,g.apply("vector[pretty.state].end",v),__end);
	        unsigned __sz = (unsigned) __end;
	        res.resize(__sz);
	        for (unsigned __i = 0; __i < __sz; ++__i)
		    __from_solver(g,g.apply("vector[pretty.state].value",v,g.int_to_z3(g.sort("vector[pretty.state].domain"),__i)),res[__i]);
	    }

	    template <>
	    void  __randomize<ivyc_s1::vector__pretty__state__>( gen &g, const  z3::expr &v){
	        unsigned __sz = rand() % 4;
                z3::expr val_expr = g.int_to_z3(g.sort("vector[pretty.state].domain"),__sz);
                z3::expr pred =  g.apply("vector[pretty.state].end",v) == val_expr;
                g.add_alit(pred);
	        for (unsigned __i = 0; __i < __sz; ++__i)
	            __randomize<ivyc_s1::pretty__state>(g,g.apply("vector[pretty.state].value",v,g.int_to_z3(g.sort("vector[pretty.state].domain"),__i)));
	    }
	    #endif

		    std::ostream &operator <<(std::ostream &s, const ivyc_s1::vector__str__ &a) {
	        s << '[';
		for (unsigned i = 0; i < a.size(); i++) {
		    if (i != 0)
		        s << ',';
		    s << a[i];
		}
	        s << ']';
		return s;
            }

	    template <>
	    ivyc_s1::vector__str__ _arg<ivyc_s1::vector__str__>(std::vector<ivy_value> &args, unsigned idx, long long bound) {
	        ivy_value &arg = args[idx];
	        if (arg.atom.size()) 
	            throw out_of_bounds(idx);
	        ivyc_s1::vector__str__ a;
	        a.resize(arg.fields.size());
		for (unsigned i = 0; i < a.size(); i++) {
		    a[i] = _arg<ivyc_s1::str>(arg.fields,i,0);
	        }
	        return a;
	    }

	    template <>
	    void __deser<ivyc_s1::vector__str__>(ivy_deser &inp, ivyc_s1::vector__str__ &res) {
	        inp.open_list();
	        while(inp.open_list_elem()) {
		    res.resize(res.size()+1);
	            __deser(inp,res.back());
		    inp.close_list_elem();
                }
		inp.close_list();
	    }

	    template <>
	    void __ser<ivyc_s1::vector__str__>(ivy_ser &res, const ivyc_s1::vector__str__ &inp) {
	        int sz = inp.size();
	        res.open_list(sz);
	        for (unsigned i = 0; i < (unsigned)sz; i++) {
		    res.open_list_elem();
	            __ser(res,inp[i]);
		    res.close_list_elem();
                }
	        res.close_list();
	    }

	    #ifdef Z3PP_H_
	    template <>
            z3::expr __to_solver(gen& g, const z3::expr& z3val, ivyc_s1::vector__str__& val) {
	        z3::expr z3end = g.apply("vector[str].end",z3val);
	        z3::expr __ret = z3end  == g.int_to_z3(z3end.get_sort(),val.size());
	        unsigned __sz = val.size();
	        for (unsigned __i = 0; __i < __sz; ++__i)
		    __ret = __ret && __to_solver(g,g.apply("vector[str].value",z3val,g.int_to_z3(g.sort("vector[str].domain"),__i)),val[__i]);
                return __ret;
            }

	    template <>
	    void  __from_solver<ivyc_s1::vector__str__>( gen &g, const  z3::expr &v,ivyc_s1::vector__str__ &res){
	        unsigned long long __end;
	        __from_solver(g,g.apply("vector[str].end",v),__end);
	        unsigned __sz = (unsigned) __end;
	        res.resize(__sz);
	        for (unsigned __i = 0; __i < __sz; ++__i)
		    __from_solver(g,g.apply("vector[str].value",v,g.int_to_z3(g.sort("vector[str].domain"),__i)),res[__i]);
	    }

	    template <>
	    void  __randomize<ivyc_s1::vector__str__>( gen &g, const  z3::expr &v){
	        unsigned __sz = rand() % 4;
                z3::expr val_expr = g.int_to_z3(g.sort("vector[str].domain"),__sz);
                z3::expr pred =  g.apply("vector[str].end",v) == val_expr;
                g.add_alit(pred);
	        for (unsigned __i = 0; __i < __sz; ++__i)
	            __randomize<ivyc_s1::str>(g,g.apply("vector[str].value",v,g.int_to_z3(g.sort("vector[str].domain"),__i)));
	    }
	    #endif

		    std::ostream &operator <<(std::ostream &s, const ivyc_s1::vector__ivy__ident__ &a) {
	        s << '[';
		for (unsigned i = 0; i < a.size(); i++) {
		    if (i != 0)
		        s << ',';
		    s << a[i];
		}
	        s << ']';
		return s;
            }

	    template <>
	    ivyc_s1::vector__ivy__ident__ _arg<ivyc_s1::vector__ivy__ident__>(std::vector<ivy_value> &args, unsigned idx, long long bound) {
	        ivy_value &arg = args[idx];
	        if (arg.atom.size()) 
	            throw out_of_bounds(idx);
	        ivyc_s1::vector__ivy__ident__ a;
	        a.resize(arg.fields.size());
		for (unsigned i = 0; i < a.size(); i++) {
		    a[i] = _arg<ivyc_s1::ivy__ident>(arg.fields,i,0);
	        }
	        return a;
	    }

	    template <>
	    void __deser<ivyc_s1::vector__ivy__ident__>(ivy_deser &inp, ivyc_s1::vector__ivy__ident__ &res) {
	        inp.open_list();
	        while(inp.open_list_elem()) {
		    res.resize(res.size()+1);
	            __deser(inp,res.back());
		    inp.close_list_elem();
                }
		inp.close_list();
	    }

	    template <>
	    void __ser<ivyc_s1::vector__ivy__ident__>(ivy_ser &res, const ivyc_s1::vector__ivy__ident__ &inp) {
	        int sz = inp.size();
	        res.open_list(sz);
	        for (unsigned i = 0; i < (unsigned)sz; i++) {
		    res.open_list_elem();
	            __ser(res,inp[i]);
		    res.close_list_elem();
                }
	        res.close_list();
	    }

	    #ifdef Z3PP_H_
	    template <>
            z3::expr __to_solver(gen& g, const z3::expr& z3val, ivyc_s1::vector__ivy__ident__& val) {
	        z3::expr z3end = g.apply("vector[ivy.ident].end",z3val);
	        z3::expr __ret = z3end  == g.int_to_z3(z3end.get_sort(),val.size());
	        unsigned __sz = val.size();
	        for (unsigned __i = 0; __i < __sz; ++__i)
		    __ret = __ret && __to_solver(g,g.apply("vector[ivy.ident].value",z3val,g.int_to_z3(g.sort("vector[ivy.ident].domain"),__i)),val[__i]);
                return __ret;
            }

	    template <>
	    void  __from_solver<ivyc_s1::vector__ivy__ident__>( gen &g, const  z3::expr &v,ivyc_s1::vector__ivy__ident__ &res){
	        unsigned long long __end;
	        __from_solver(g,g.apply("vector[ivy.ident].end",v),__end);
	        unsigned __sz = (unsigned) __end;
	        res.resize(__sz);
	        for (unsigned __i = 0; __i < __sz; ++__i)
		    __from_solver(g,g.apply("vector[ivy.ident].value",v,g.int_to_z3(g.sort("vector[ivy.ident].domain"),__i)),res[__i]);
	    }

	    template <>
	    void  __randomize<ivyc_s1::vector__ivy__ident__>( gen &g, const  z3::expr &v){
	        unsigned __sz = rand() % 4;
                z3::expr val_expr = g.int_to_z3(g.sort("vector[ivy.ident].domain"),__sz);
                z3::expr pred =  g.apply("vector[ivy.ident].end",v) == val_expr;
                g.add_alit(pred);
	        for (unsigned __i = 0; __i < __sz; ++__i)
	            __randomize<ivyc_s1::ivy__ident>(g,g.apply("vector[ivy.ident].value",v,g.int_to_z3(g.sort("vector[ivy.ident].domain"),__i)));
	    }
	    #endif

		    std::ostream &operator <<(std::ostream &s, const ivyc_s1::vector__ivy__expr__ &a) {
	        s << '[';
		for (unsigned i = 0; i < a.size(); i++) {
		    if (i != 0)
		        s << ',';
		    s << a[i];
		}
	        s << ']';
		return s;
            }

	    template <>
	    ivyc_s1::vector__ivy__expr__ _arg<ivyc_s1::vector__ivy__expr__>(std::vector<ivy_value> &args, unsigned idx, long long bound) {
	        ivy_value &arg = args[idx];
	        if (arg.atom.size()) 
	            throw out_of_bounds(idx);
	        ivyc_s1::vector__ivy__expr__ a;
	        a.resize(arg.fields.size());
		for (unsigned i = 0; i < a.size(); i++) {
		    a[i] = _arg<ivyc_s1::ivy__expr>(arg.fields,i,0);
	        }
	        return a;
	    }

	    template <>
	    void __deser<ivyc_s1::vector__ivy__expr__>(ivy_deser &inp, ivyc_s1::vector__ivy__expr__ &res) {
	        inp.open_list();
	        while(inp.open_list_elem()) {
		    res.resize(res.size()+1);
	            __deser(inp,res.back());
		    inp.close_list_elem();
                }
		inp.close_list();
	    }

	    template <>
	    void __ser<ivyc_s1::vector__ivy__expr__>(ivy_ser &res, const ivyc_s1::vector__ivy__expr__ &inp) {
	        int sz = inp.size();
	        res.open_list(sz);
	        for (unsigned i = 0; i < (unsigned)sz; i++) {
		    res.open_list_elem();
	            __ser(res,inp[i]);
		    res.close_list_elem();
                }
	        res.close_list();
	    }

	    #ifdef Z3PP_H_
	    template <>
            z3::expr __to_solver(gen& g, const z3::expr& z3val, ivyc_s1::vector__ivy__expr__& val) {
	        z3::expr z3end = g.apply("vector[ivy.expr].end",z3val);
	        z3::expr __ret = z3end  == g.int_to_z3(z3end.get_sort(),val.size());
	        unsigned __sz = val.size();
	        for (unsigned __i = 0; __i < __sz; ++__i)
		    __ret = __ret && __to_solver(g,g.apply("vector[ivy.expr].value",z3val,g.int_to_z3(g.sort("vector[ivy.expr].domain"),__i)),val[__i]);
                return __ret;
            }

	    template <>
	    void  __from_solver<ivyc_s1::vector__ivy__expr__>( gen &g, const  z3::expr &v,ivyc_s1::vector__ivy__expr__ &res){
	        unsigned long long __end;
	        __from_solver(g,g.apply("vector[ivy.expr].end",v),__end);
	        unsigned __sz = (unsigned) __end;
	        res.resize(__sz);
	        for (unsigned __i = 0; __i < __sz; ++__i)
		    __from_solver(g,g.apply("vector[ivy.expr].value",v,g.int_to_z3(g.sort("vector[ivy.expr].domain"),__i)),res[__i]);
	    }

	    template <>
	    void  __randomize<ivyc_s1::vector__ivy__expr__>( gen &g, const  z3::expr &v){
	        unsigned __sz = rand() % 4;
                z3::expr val_expr = g.int_to_z3(g.sort("vector[ivy.expr].domain"),__sz);
                z3::expr pred =  g.apply("vector[ivy.expr].end",v) == val_expr;
                g.add_alit(pred);
	        for (unsigned __i = 0; __i < __sz; ++__i)
	            __randomize<ivyc_s1::ivy__expr>(g,g.apply("vector[ivy.expr].value",v,g.int_to_z3(g.sort("vector[ivy.expr].domain"),__i)));
	    }
	    #endif

		    std::ostream &operator <<(std::ostream &s, const ivyc_s1::vector__ivy__stmt__ &a) {
	        s << '[';
		for (unsigned i = 0; i < a.size(); i++) {
		    if (i != 0)
		        s << ',';
		    s << a[i];
		}
	        s << ']';
		return s;
            }

	    template <>
	    ivyc_s1::vector__ivy__stmt__ _arg<ivyc_s1::vector__ivy__stmt__>(std::vector<ivy_value> &args, unsigned idx, long long bound) {
	        ivy_value &arg = args[idx];
	        if (arg.atom.size()) 
	            throw out_of_bounds(idx);
	        ivyc_s1::vector__ivy__stmt__ a;
	        a.resize(arg.fields.size());
		for (unsigned i = 0; i < a.size(); i++) {
		    a[i] = _arg<ivyc_s1::ivy__stmt>(arg.fields,i,0);
	        }
	        return a;
	    }

	    template <>
	    void __deser<ivyc_s1::vector__ivy__stmt__>(ivy_deser &inp, ivyc_s1::vector__ivy__stmt__ &res) {
	        inp.open_list();
	        while(inp.open_list_elem()) {
		    res.resize(res.size()+1);
	            __deser(inp,res.back());
		    inp.close_list_elem();
                }
		inp.close_list();
	    }

	    template <>
	    void __ser<ivyc_s1::vector__ivy__stmt__>(ivy_ser &res, const ivyc_s1::vector__ivy__stmt__ &inp) {
	        int sz = inp.size();
	        res.open_list(sz);
	        for (unsigned i = 0; i < (unsigned)sz; i++) {
		    res.open_list_elem();
	            __ser(res,inp[i]);
		    res.close_list_elem();
                }
	        res.close_list();
	    }

	    #ifdef Z3PP_H_
	    template <>
            z3::expr __to_solver(gen& g, const z3::expr& z3val, ivyc_s1::vector__ivy__stmt__& val) {
	        z3::expr z3end = g.apply("vector[ivy.stmt].end",z3val);
	        z3::expr __ret = z3end  == g.int_to_z3(z3end.get_sort(),val.size());
	        unsigned __sz = val.size();
	        for (unsigned __i = 0; __i < __sz; ++__i)
		    __ret = __ret && __to_solver(g,g.apply("vector[ivy.stmt].value",z3val,g.int_to_z3(g.sort("vector[ivy.stmt].domain"),__i)),val[__i]);
                return __ret;
            }

	    template <>
	    void  __from_solver<ivyc_s1::vector__ivy__stmt__>( gen &g, const  z3::expr &v,ivyc_s1::vector__ivy__stmt__ &res){
	        unsigned long long __end;
	        __from_solver(g,g.apply("vector[ivy.stmt].end",v),__end);
	        unsigned __sz = (unsigned) __end;
	        res.resize(__sz);
	        for (unsigned __i = 0; __i < __sz; ++__i)
		    __from_solver(g,g.apply("vector[ivy.stmt].value",v,g.int_to_z3(g.sort("vector[ivy.stmt].domain"),__i)),res[__i]);
	    }

	    template <>
	    void  __randomize<ivyc_s1::vector__ivy__stmt__>( gen &g, const  z3::expr &v){
	        unsigned __sz = rand() % 4;
                z3::expr val_expr = g.int_to_z3(g.sort("vector[ivy.stmt].domain"),__sz);
                z3::expr pred =  g.apply("vector[ivy.stmt].end",v) == val_expr;
                g.add_alit(pred);
	        for (unsigned __i = 0; __i < __sz; ++__i)
	            __randomize<ivyc_s1::ivy__stmt>(g,g.apply("vector[ivy.stmt].value",v,g.int_to_z3(g.sort("vector[ivy.stmt].domain"),__i)));
	    }
	    #endif

		    std::ostream &operator <<(std::ostream &s, const ivyc_s1::vector__ivy__prototype_argument__ &a) {
	        s << '[';
		for (unsigned i = 0; i < a.size(); i++) {
		    if (i != 0)
		        s << ',';
		    s << a[i];
		}
	        s << ']';
		return s;
            }

	    template <>
	    ivyc_s1::vector__ivy__prototype_argument__ _arg<ivyc_s1::vector__ivy__prototype_argument__>(std::vector<ivy_value> &args, unsigned idx, long long bound) {
	        ivy_value &arg = args[idx];
	        if (arg.atom.size()) 
	            throw out_of_bounds(idx);
	        ivyc_s1::vector__ivy__prototype_argument__ a;
	        a.resize(arg.fields.size());
		for (unsigned i = 0; i < a.size(); i++) {
		    a[i] = _arg<ivyc_s1::ivy__prototype_argument>(arg.fields,i,0);
	        }
	        return a;
	    }

	    template <>
	    void __deser<ivyc_s1::vector__ivy__prototype_argument__>(ivy_deser &inp, ivyc_s1::vector__ivy__prototype_argument__ &res) {
	        inp.open_list();
	        while(inp.open_list_elem()) {
		    res.resize(res.size()+1);
	            __deser(inp,res.back());
		    inp.close_list_elem();
                }
		inp.close_list();
	    }

	    template <>
	    void __ser<ivyc_s1::vector__ivy__prototype_argument__>(ivy_ser &res, const ivyc_s1::vector__ivy__prototype_argument__ &inp) {
	        int sz = inp.size();
	        res.open_list(sz);
	        for (unsigned i = 0; i < (unsigned)sz; i++) {
		    res.open_list_elem();
	            __ser(res,inp[i]);
		    res.close_list_elem();
                }
	        res.close_list();
	    }

	    #ifdef Z3PP_H_
	    template <>
            z3::expr __to_solver(gen& g, const z3::expr& z3val, ivyc_s1::vector__ivy__prototype_argument__& val) {
	        z3::expr z3end = g.apply("vector[ivy.prototype_argument].end",z3val);
	        z3::expr __ret = z3end  == g.int_to_z3(z3end.get_sort(),val.size());
	        unsigned __sz = val.size();
	        for (unsigned __i = 0; __i < __sz; ++__i)
		    __ret = __ret && __to_solver(g,g.apply("vector[ivy.prototype_argument].value",z3val,g.int_to_z3(g.sort("vector[ivy.prototype_argument].domain"),__i)),val[__i]);
                return __ret;
            }

	    template <>
	    void  __from_solver<ivyc_s1::vector__ivy__prototype_argument__>( gen &g, const  z3::expr &v,ivyc_s1::vector__ivy__prototype_argument__ &res){
	        unsigned long long __end;
	        __from_solver(g,g.apply("vector[ivy.prototype_argument].end",v),__end);
	        unsigned __sz = (unsigned) __end;
	        res.resize(__sz);
	        for (unsigned __i = 0; __i < __sz; ++__i)
		    __from_solver(g,g.apply("vector[ivy.prototype_argument].value",v,g.int_to_z3(g.sort("vector[ivy.prototype_argument].domain"),__i)),res[__i]);
	    }

	    template <>
	    void  __randomize<ivyc_s1::vector__ivy__prototype_argument__>( gen &g, const  z3::expr &v){
	        unsigned __sz = rand() % 4;
                z3::expr val_expr = g.int_to_z3(g.sort("vector[ivy.prototype_argument].domain"),__sz);
                z3::expr pred =  g.apply("vector[ivy.prototype_argument].end",v) == val_expr;
                g.add_alit(pred);
	        for (unsigned __i = 0; __i < __sz; ++__i)
	            __randomize<ivyc_s1::ivy__prototype_argument>(g,g.apply("vector[ivy.prototype_argument].value",v,g.int_to_z3(g.sort("vector[ivy.prototype_argument].domain"),__i)));
	    }
	    #endif

		    std::ostream &operator <<(std::ostream &s, const ivyc_s1::ivy__ident_set &a) {
	        s << '[';
		for (ivyc_s1::ivy__ident_set::const_iterator it = a.begin(), en = a.end(); it != en; ++it) {
		    if (it != a.begin())
		        s << ',';
		    s << "[" << it->first << "," << it->second << "]";
		}
	        s << ']';
		return s;
            }

	    template <>
	    ivyc_s1::ivy__ident_set _arg<ivyc_s1::ivy__ident_set>(std::vector<ivy_value> &args, unsigned idx, long long bound) {
	        ivy_value &arg = args[idx];
	        if (arg.atom.size()) 
	            throw out_of_bounds(idx);
	        ivyc_s1::ivy__ident_set a;
		for (unsigned i = 0; i < arg.fields.size(); i++) {
		    if (arg.fields[i].fields.size() != 2)
		        throw out_of_bounds(idx);
		    a[_arg<ivyc_s1::ivy__ident>(arg.fields[i].fields,0,0)] = _arg<bool>(arg.fields[i].fields,1,0);
	        }
	        return a;
	    }

	    template <>
	    void __deser<ivyc_s1::ivy__ident_set>(ivy_deser &inp, ivyc_s1::ivy__ident_set &res) {
	        inp.open_list();
	        while(inp.open_list_elem()) {
		    ivyc_s1::ivy__ident x;
	            __deser(inp,x);
                    bool y;
	            __deser(inp,y);
                    res[x] = y;
		    inp.close_list_elem();
                }
		inp.close_list();
	    }

	    template <>
	    void __ser<ivyc_s1::ivy__ident_set>(ivy_ser &res, const ivyc_s1::ivy__ident_set &inp) {
	        int sz = inp.size();
	        res.open_list(sz);
		for (ivyc_s1::ivy__ident_set::const_iterator it = inp.begin(), en = inp.end(); it != en; ++it) {
		    res.open_list_elem();
	            __ser(res,it->first);
	            __ser(res,it->second);
		    res.close_list_elem();
                }
	        res.close_list();
	    }


		    std::ostream &operator <<(std::ostream &s, const ivyc_s1::vector__ivy__decl__ &a) {
	        s << '[';
		for (unsigned i = 0; i < a.size(); i++) {
		    if (i != 0)
		        s << ',';
		    s << a[i];
		}
	        s << ']';
		return s;
            }

	    template <>
	    ivyc_s1::vector__ivy__decl__ _arg<ivyc_s1::vector__ivy__decl__>(std::vector<ivy_value> &args, unsigned idx, long long bound) {
	        ivy_value &arg = args[idx];
	        if (arg.atom.size()) 
	            throw out_of_bounds(idx);
	        ivyc_s1::vector__ivy__decl__ a;
	        a.resize(arg.fields.size());
		for (unsigned i = 0; i < a.size(); i++) {
		    a[i] = _arg<ivyc_s1::ivy__decl>(arg.fields,i,0);
	        }
	        return a;
	    }

	    template <>
	    void __deser<ivyc_s1::vector__ivy__decl__>(ivy_deser &inp, ivyc_s1::vector__ivy__decl__ &res) {
	        inp.open_list();
	        while(inp.open_list_elem()) {
		    res.resize(res.size()+1);
	            __deser(inp,res.back());
		    inp.close_list_elem();
                }
		inp.close_list();
	    }

	    template <>
	    void __ser<ivyc_s1::vector__ivy__decl__>(ivy_ser &res, const ivyc_s1::vector__ivy__decl__ &inp) {
	        int sz = inp.size();
	        res.open_list(sz);
	        for (unsigned i = 0; i < (unsigned)sz; i++) {
		    res.open_list_elem();
	            __ser(res,inp[i]);
		    res.close_list_elem();
                }
	        res.close_list();
	    }

	    #ifdef Z3PP_H_
	    template <>
            z3::expr __to_solver(gen& g, const z3::expr& z3val, ivyc_s1::vector__ivy__decl__& val) {
	        z3::expr z3end = g.apply("vector[ivy.decl].end",z3val);
	        z3::expr __ret = z3end  == g.int_to_z3(z3end.get_sort(),val.size());
	        unsigned __sz = val.size();
	        for (unsigned __i = 0; __i < __sz; ++__i)
		    __ret = __ret && __to_solver(g,g.apply("vector[ivy.decl].value",z3val,g.int_to_z3(g.sort("vector[ivy.decl].domain"),__i)),val[__i]);
                return __ret;
            }

	    template <>
	    void  __from_solver<ivyc_s1::vector__ivy__decl__>( gen &g, const  z3::expr &v,ivyc_s1::vector__ivy__decl__ &res){
	        unsigned long long __end;
	        __from_solver(g,g.apply("vector[ivy.decl].end",v),__end);
	        unsigned __sz = (unsigned) __end;
	        res.resize(__sz);
	        for (unsigned __i = 0; __i < __sz; ++__i)
		    __from_solver(g,g.apply("vector[ivy.decl].value",v,g.int_to_z3(g.sort("vector[ivy.decl].domain"),__i)),res[__i]);
	    }

	    template <>
	    void  __randomize<ivyc_s1::vector__ivy__decl__>( gen &g, const  z3::expr &v){
	        unsigned __sz = rand() % 4;
                z3::expr val_expr = g.int_to_z3(g.sort("vector[ivy.decl].domain"),__sz);
                z3::expr pred =  g.apply("vector[ivy.decl].end",v) == val_expr;
                g.add_alit(pred);
	        for (unsigned __i = 0; __i < __sz; ++__i)
	            __randomize<ivyc_s1::ivy__decl>(g,g.apply("vector[ivy.decl].value",v,g.int_to_z3(g.sort("vector[ivy.decl].domain"),__i)));
	    }
	    #endif

		    std::ostream &operator <<(std::ostream &s, const ivyc_s1::vector__ivy__error__ &a) {
	        s << '[';
		for (unsigned i = 0; i < a.size(); i++) {
		    if (i != 0)
		        s << ',';
		    s << a[i];
		}
	        s << ']';
		return s;
            }

	    template <>
	    ivyc_s1::vector__ivy__error__ _arg<ivyc_s1::vector__ivy__error__>(std::vector<ivy_value> &args, unsigned idx, long long bound) {
	        ivy_value &arg = args[idx];
	        if (arg.atom.size()) 
	            throw out_of_bounds(idx);
	        ivyc_s1::vector__ivy__error__ a;
	        a.resize(arg.fields.size());
		for (unsigned i = 0; i < a.size(); i++) {
		    a[i] = _arg<ivyc_s1::ivy__error>(arg.fields,i,0);
	        }
	        return a;
	    }

	    template <>
	    void __deser<ivyc_s1::vector__ivy__error__>(ivy_deser &inp, ivyc_s1::vector__ivy__error__ &res) {
	        inp.open_list();
	        while(inp.open_list_elem()) {
		    res.resize(res.size()+1);
	            __deser(inp,res.back());
		    inp.close_list_elem();
                }
		inp.close_list();
	    }

	    template <>
	    void __ser<ivyc_s1::vector__ivy__error__>(ivy_ser &res, const ivyc_s1::vector__ivy__error__ &inp) {
	        int sz = inp.size();
	        res.open_list(sz);
	        for (unsigned i = 0; i < (unsigned)sz; i++) {
		    res.open_list_elem();
	            __ser(res,inp[i]);
		    res.close_list_elem();
                }
	        res.close_list();
	    }

	    #ifdef Z3PP_H_
	    template <>
            z3::expr __to_solver(gen& g, const z3::expr& z3val, ivyc_s1::vector__ivy__error__& val) {
	        z3::expr z3end = g.apply("vector[ivy.error].end",z3val);
	        z3::expr __ret = z3end  == g.int_to_z3(z3end.get_sort(),val.size());
	        unsigned __sz = val.size();
	        for (unsigned __i = 0; __i < __sz; ++__i)
		    __ret = __ret && __to_solver(g,g.apply("vector[ivy.error].value",z3val,g.int_to_z3(g.sort("vector[ivy.error].domain"),__i)),val[__i]);
                return __ret;
            }

	    template <>
	    void  __from_solver<ivyc_s1::vector__ivy__error__>( gen &g, const  z3::expr &v,ivyc_s1::vector__ivy__error__ &res){
	        unsigned long long __end;
	        __from_solver(g,g.apply("vector[ivy.error].end",v),__end);
	        unsigned __sz = (unsigned) __end;
	        res.resize(__sz);
	        for (unsigned __i = 0; __i < __sz; ++__i)
		    __from_solver(g,g.apply("vector[ivy.error].value",v,g.int_to_z3(g.sort("vector[ivy.error].domain"),__i)),res[__i]);
	    }

	    template <>
	    void  __randomize<ivyc_s1::vector__ivy__error__>( gen &g, const  z3::expr &v){
	        unsigned __sz = rand() % 4;
                z3::expr val_expr = g.int_to_z3(g.sort("vector[ivy.error].domain"),__sz);
                z3::expr pred =  g.apply("vector[ivy.error].end",v) == val_expr;
                g.add_alit(pred);
	        for (unsigned __i = 0; __i < __sz; ++__i)
	            __randomize<ivyc_s1::ivy__error>(g,g.apply("vector[ivy.error].value",v,g.int_to_z3(g.sort("vector[ivy.error].domain"),__i)));
	    }
	    #endif

		    std::ostream &operator <<(std::ostream &s, const ivyc_s1::ivy__symeval &a) {
	        s << '[';
		for (ivyc_s1::ivy__symeval::const_iterator it = a.begin(), en = a.end(); it != en; ++it) {
		    if (it != a.begin())
		        s << ',';
		    s << "[" << it->first << "," << it->second << "]";
		}
	        s << ']';
		return s;
            }

	    template <>
	    ivyc_s1::ivy__symeval _arg<ivyc_s1::ivy__symeval>(std::vector<ivy_value> &args, unsigned idx, long long bound) {
	        ivy_value &arg = args[idx];
	        if (arg.atom.size()) 
	            throw out_of_bounds(idx);
	        ivyc_s1::ivy__symeval a;
		for (unsigned i = 0; i < arg.fields.size(); i++) {
		    if (arg.fields[i].fields.size() != 2)
		        throw out_of_bounds(idx);
		    a[_arg<ivyc_s1::ivy__ident>(arg.fields[i].fields,0,0)] = _arg<ivyc_s1::ivy__expr>(arg.fields[i].fields,1,0);
	        }
	        return a;
	    }

	    template <>
	    void __deser<ivyc_s1::ivy__symeval>(ivy_deser &inp, ivyc_s1::ivy__symeval &res) {
	        inp.open_list();
	        while(inp.open_list_elem()) {
		    ivyc_s1::ivy__ident x;
	            __deser(inp,x);
                    ivyc_s1::ivy__expr y;
	            __deser(inp,y);
                    res[x] = y;
		    inp.close_list_elem();
                }
		inp.close_list();
	    }

	    template <>
	    void __ser<ivyc_s1::ivy__symeval>(ivy_ser &res, const ivyc_s1::ivy__symeval &inp) {
	        int sz = inp.size();
	        res.open_list(sz);
		for (ivyc_s1::ivy__symeval::const_iterator it = inp.begin(), en = inp.end(); it != en; ++it) {
		    res.open_list_elem();
	            __ser(res,it->first);
	            __ser(res,it->second);
		    res.close_list_elem();
                }
	        res.close_list();
	    }


		    std::ostream &operator <<(std::ostream &s, const ivyc_s1::ivy__ident_to_moduledc &a) {
	        s << '[';
		for (ivyc_s1::ivy__ident_to_moduledc::const_iterator it = a.begin(), en = a.end(); it != en; ++it) {
		    if (it != a.begin())
		        s << ',';
		    s << "[" << it->first << "," << it->second << "]";
		}
	        s << ']';
		return s;
            }

	    template <>
	    ivyc_s1::ivy__ident_to_moduledc _arg<ivyc_s1::ivy__ident_to_moduledc>(std::vector<ivy_value> &args, unsigned idx, long long bound) {
	        ivy_value &arg = args[idx];
	        if (arg.atom.size()) 
	            throw out_of_bounds(idx);
	        ivyc_s1::ivy__ident_to_moduledc a;
		for (unsigned i = 0; i < arg.fields.size(); i++) {
		    if (arg.fields[i].fields.size() != 2)
		        throw out_of_bounds(idx);
		    a[_arg<ivyc_s1::ivy__ident>(arg.fields[i].fields,0,0)] = _arg<ivyc_s1::ivy__moduledc>(arg.fields[i].fields,1,0);
	        }
	        return a;
	    }

	    template <>
	    void __deser<ivyc_s1::ivy__ident_to_moduledc>(ivy_deser &inp, ivyc_s1::ivy__ident_to_moduledc &res) {
	        inp.open_list();
	        while(inp.open_list_elem()) {
		    ivyc_s1::ivy__ident x;
	            __deser(inp,x);
                    ivyc_s1::ivy__moduledc y;
	            __deser(inp,y);
                    res[x] = y;
		    inp.close_list_elem();
                }
		inp.close_list();
	    }

	    template <>
	    void __ser<ivyc_s1::ivy__ident_to_moduledc>(ivy_ser &res, const ivyc_s1::ivy__ident_to_moduledc &inp) {
	        int sz = inp.size();
	        res.open_list(sz);
		for (ivyc_s1::ivy__ident_to_moduledc::const_iterator it = inp.begin(), en = inp.end(); it != en; ++it) {
		    res.open_list_elem();
	            __ser(res,it->first);
	            __ser(res,it->second);
		    res.close_list_elem();
                }
	        res.close_list();
	    }


		    std::ostream &operator <<(std::ostream &s, const ivyc_s1::ivy__ident_to_ident &a) {
	        s << '[';
		for (ivyc_s1::ivy__ident_to_ident::const_iterator it = a.begin(), en = a.end(); it != en; ++it) {
		    if (it != a.begin())
		        s << ',';
		    s << "[" << it->first << "," << it->second << "]";
		}
	        s << ']';
		return s;
            }

	    template <>
	    ivyc_s1::ivy__ident_to_ident _arg<ivyc_s1::ivy__ident_to_ident>(std::vector<ivy_value> &args, unsigned idx, long long bound) {
	        ivy_value &arg = args[idx];
	        if (arg.atom.size()) 
	            throw out_of_bounds(idx);
	        ivyc_s1::ivy__ident_to_ident a;
		for (unsigned i = 0; i < arg.fields.size(); i++) {
		    if (arg.fields[i].fields.size() != 2)
		        throw out_of_bounds(idx);
		    a[_arg<ivyc_s1::ivy__ident>(arg.fields[i].fields,0,0)] = _arg<ivyc_s1::ivy__ident>(arg.fields[i].fields,1,0);
	        }
	        return a;
	    }

	    template <>
	    void __deser<ivyc_s1::ivy__ident_to_ident>(ivy_deser &inp, ivyc_s1::ivy__ident_to_ident &res) {
	        inp.open_list();
	        while(inp.open_list_elem()) {
		    ivyc_s1::ivy__ident x;
	            __deser(inp,x);
                    ivyc_s1::ivy__ident y;
	            __deser(inp,y);
                    res[x] = y;
		    inp.close_list_elem();
                }
		inp.close_list();
	    }

	    template <>
	    void __ser<ivyc_s1::ivy__ident_to_ident>(ivy_ser &res, const ivyc_s1::ivy__ident_to_ident &inp) {
	        int sz = inp.size();
	        res.open_list(sz);
		for (ivyc_s1::ivy__ident_to_ident::const_iterator it = inp.begin(), en = inp.end(); it != en; ++it) {
		    res.open_list_elem();
	            __ser(res,it->first);
	            __ser(res,it->second);
		    res.close_list_elem();
                }
	        res.close_list();
	    }


		    std::ostream &operator <<(std::ostream &s, const ivyc_s1::ivy__ident_to_instantiatedc &a) {
	        s << '[';
		for (ivyc_s1::ivy__ident_to_instantiatedc::const_iterator it = a.begin(), en = a.end(); it != en; ++it) {
		    if (it != a.begin())
		        s << ',';
		    s << "[" << it->first << "," << it->second << "]";
		}
	        s << ']';
		return s;
            }

	    template <>
	    ivyc_s1::ivy__ident_to_instantiatedc _arg<ivyc_s1::ivy__ident_to_instantiatedc>(std::vector<ivy_value> &args, unsigned idx, long long bound) {
	        ivy_value &arg = args[idx];
	        if (arg.atom.size()) 
	            throw out_of_bounds(idx);
	        ivyc_s1::ivy__ident_to_instantiatedc a;
		for (unsigned i = 0; i < arg.fields.size(); i++) {
		    if (arg.fields[i].fields.size() != 2)
		        throw out_of_bounds(idx);
		    a[_arg<ivyc_s1::ivy__ident>(arg.fields[i].fields,0,0)] = _arg<ivyc_s1::ivy__instantiatedc>(arg.fields[i].fields,1,0);
	        }
	        return a;
	    }

	    template <>
	    void __deser<ivyc_s1::ivy__ident_to_instantiatedc>(ivy_deser &inp, ivyc_s1::ivy__ident_to_instantiatedc &res) {
	        inp.open_list();
	        while(inp.open_list_elem()) {
		    ivyc_s1::ivy__ident x;
	            __deser(inp,x);
                    ivyc_s1::ivy__instantiatedc y;
	            __deser(inp,y);
                    res[x] = y;
		    inp.close_list_elem();
                }
		inp.close_list();
	    }

	    template <>
	    void __ser<ivyc_s1::ivy__ident_to_instantiatedc>(ivy_ser &res, const ivyc_s1::ivy__ident_to_instantiatedc &inp) {
	        int sz = inp.size();
	        res.open_list(sz);
		for (ivyc_s1::ivy__ident_to_instantiatedc::const_iterator it = inp.begin(), en = inp.end(); it != en; ++it) {
		    res.open_list_elem();
	            __ser(res,it->first);
	            __ser(res,it->second);
		    res.close_list_elem();
                }
	        res.close_list();
	    }


		    std::ostream &operator <<(std::ostream &s, const ivyc_s1::ivy__ident_to_exprs &a) {
	        s << '[';
		for (ivyc_s1::ivy__ident_to_exprs::const_iterator it = a.begin(), en = a.end(); it != en; ++it) {
		    if (it != a.begin())
		        s << ',';
		    s << "[" << it->first << "," << it->second << "]";
		}
	        s << ']';
		return s;
            }

	    template <>
	    ivyc_s1::ivy__ident_to_exprs _arg<ivyc_s1::ivy__ident_to_exprs>(std::vector<ivy_value> &args, unsigned idx, long long bound) {
	        ivy_value &arg = args[idx];
	        if (arg.atom.size()) 
	            throw out_of_bounds(idx);
	        ivyc_s1::ivy__ident_to_exprs a;
		for (unsigned i = 0; i < arg.fields.size(); i++) {
		    if (arg.fields[i].fields.size() != 2)
		        throw out_of_bounds(idx);
		    a[_arg<ivyc_s1::ivy__ident>(arg.fields[i].fields,0,0)] = _arg<ivyc_s1::vector__ivy__expr__>(arg.fields[i].fields,1,0);
	        }
	        return a;
	    }

	    template <>
	    void __deser<ivyc_s1::ivy__ident_to_exprs>(ivy_deser &inp, ivyc_s1::ivy__ident_to_exprs &res) {
	        inp.open_list();
	        while(inp.open_list_elem()) {
		    ivyc_s1::ivy__ident x;
	            __deser(inp,x);
                    ivyc_s1::vector__ivy__expr__ y;
	            __deser(inp,y);
                    res[x] = y;
		    inp.close_list_elem();
                }
		inp.close_list();
	    }

	    template <>
	    void __ser<ivyc_s1::ivy__ident_to_exprs>(ivy_ser &res, const ivyc_s1::ivy__ident_to_exprs &inp) {
	        int sz = inp.size();
	        res.open_list(sz);
		for (ivyc_s1::ivy__ident_to_exprs::const_iterator it = inp.begin(), en = inp.end(); it != en; ++it) {
		    res.open_list_elem();
	            __ser(res,it->first);
	            __ser(res,it->second);
		    res.close_list_elem();
                }
	        res.close_list();
	    }


		    std::ostream &operator <<(std::ostream &s, const ivyc_s1::ivy__param_map &a) {
	        s << '[';
		for (ivyc_s1::ivy__param_map::const_iterator it = a.begin(), en = a.end(); it != en; ++it) {
		    if (it != a.begin())
		        s << ',';
		    s << "[" << it->first << "," << it->second << "]";
		}
	        s << ']';
		return s;
            }

	    template <>
	    ivyc_s1::ivy__param_map _arg<ivyc_s1::ivy__param_map>(std::vector<ivy_value> &args, unsigned idx, long long bound) {
	        ivy_value &arg = args[idx];
	        if (arg.atom.size()) 
	            throw out_of_bounds(idx);
	        ivyc_s1::ivy__param_map a;
		for (unsigned i = 0; i < arg.fields.size(); i++) {
		    if (arg.fields[i].fields.size() != 2)
		        throw out_of_bounds(idx);
		    a[_arg<ivyc_s1::ivy__ident>(arg.fields[i].fields,0,0)] = _arg<unsigned long long>(arg.fields[i].fields,1,0);
	        }
	        return a;
	    }

	    template <>
	    void __deser<ivyc_s1::ivy__param_map>(ivy_deser &inp, ivyc_s1::ivy__param_map &res) {
	        inp.open_list();
	        while(inp.open_list_elem()) {
		    ivyc_s1::ivy__ident x;
	            __deser(inp,x);
                    unsigned long long y;
	            __deser(inp,y);
                    res[x] = y;
		    inp.close_list_elem();
                }
		inp.close_list();
	    }

	    template <>
	    void __ser<ivyc_s1::ivy__param_map>(ivy_ser &res, const ivyc_s1::ivy__param_map &inp) {
	        int sz = inp.size();
	        res.open_list(sz);
		for (ivyc_s1::ivy__param_map::const_iterator it = inp.begin(), en = inp.end(); it != en; ++it) {
		    res.open_list_elem();
	            __ser(res,it->first);
	            __ser(res,it->second);
		    res.close_list_elem();
                }
	        res.close_list();
	    }


		    std::ostream &operator <<(std::ostream &s, const ivyc_s1::ivy__push_pop_ident_set__map_t &a) {
	        s << '[';
		for (ivyc_s1::ivy__push_pop_ident_set__map_t::const_iterator it = a.begin(), en = a.end(); it != en; ++it) {
		    if (it != a.begin())
		        s << ',';
		    s << "[" << it->first << "," << it->second << "]";
		}
	        s << ']';
		return s;
            }

	    template <>
	    ivyc_s1::ivy__push_pop_ident_set__map_t _arg<ivyc_s1::ivy__push_pop_ident_set__map_t>(std::vector<ivy_value> &args, unsigned idx, long long bound) {
	        ivy_value &arg = args[idx];
	        if (arg.atom.size()) 
	            throw out_of_bounds(idx);
	        ivyc_s1::ivy__push_pop_ident_set__map_t a;
		for (unsigned i = 0; i < arg.fields.size(); i++) {
		    if (arg.fields[i].fields.size() != 2)
		        throw out_of_bounds(idx);
		    a[_arg<ivyc_s1::ivy__ident>(arg.fields[i].fields,0,0)] = _arg<bool>(arg.fields[i].fields,1,0);
	        }
	        return a;
	    }

	    template <>
	    void __deser<ivyc_s1::ivy__push_pop_ident_set__map_t>(ivy_deser &inp, ivyc_s1::ivy__push_pop_ident_set__map_t &res) {
	        inp.open_list();
	        while(inp.open_list_elem()) {
		    ivyc_s1::ivy__ident x;
	            __deser(inp,x);
                    bool y;
	            __deser(inp,y);
                    res[x] = y;
		    inp.close_list_elem();
                }
		inp.close_list();
	    }

	    template <>
	    void __ser<ivyc_s1::ivy__push_pop_ident_set__map_t>(ivy_ser &res, const ivyc_s1::ivy__push_pop_ident_set__map_t &inp) {
	        int sz = inp.size();
	        res.open_list(sz);
		for (ivyc_s1::ivy__push_pop_ident_set__map_t::const_iterator it = inp.begin(), en = inp.end(); it != en; ++it) {
		    res.open_list_elem();
	            __ser(res,it->first);
	            __ser(res,it->second);
		    res.close_list_elem();
                }
	        res.close_list();
	    }


		    std::ostream &operator <<(std::ostream &s, const ivyc_s1::ivy__push_pop_ident_set__vec_t &a) {
	        s << '[';
		for (unsigned i = 0; i < a.size(); i++) {
		    if (i != 0)
		        s << ',';
		    s << a[i];
		}
	        s << ']';
		return s;
            }

	    template <>
	    ivyc_s1::ivy__push_pop_ident_set__vec_t _arg<ivyc_s1::ivy__push_pop_ident_set__vec_t>(std::vector<ivy_value> &args, unsigned idx, long long bound) {
	        ivy_value &arg = args[idx];
	        if (arg.atom.size()) 
	            throw out_of_bounds(idx);
	        ivyc_s1::ivy__push_pop_ident_set__vec_t a;
	        a.resize(arg.fields.size());
		for (unsigned i = 0; i < a.size(); i++) {
		    a[i] = _arg<ivyc_s1::ivy__ident>(arg.fields,i,0);
	        }
	        return a;
	    }

	    template <>
	    void __deser<ivyc_s1::ivy__push_pop_ident_set__vec_t>(ivy_deser &inp, ivyc_s1::ivy__push_pop_ident_set__vec_t &res) {
	        inp.open_list();
	        while(inp.open_list_elem()) {
		    res.resize(res.size()+1);
	            __deser(inp,res.back());
		    inp.close_list_elem();
                }
		inp.close_list();
	    }

	    template <>
	    void __ser<ivyc_s1::ivy__push_pop_ident_set__vec_t>(ivy_ser &res, const ivyc_s1::ivy__push_pop_ident_set__vec_t &inp) {
	        int sz = inp.size();
	        res.open_list(sz);
	        for (unsigned i = 0; i < (unsigned)sz; i++) {
		    res.open_list_elem();
	            __ser(res,inp[i]);
		    res.close_list_elem();
                }
	        res.close_list();
	    }

	    #ifdef Z3PP_H_
	    template <>
            z3::expr __to_solver(gen& g, const z3::expr& z3val, ivyc_s1::ivy__push_pop_ident_set__vec_t& val) {
	        z3::expr z3end = g.apply("ivy.push_pop_ident_set.vec_t.end",z3val);
	        z3::expr __ret = z3end  == g.int_to_z3(z3end.get_sort(),val.size());
	        unsigned __sz = val.size();
	        for (unsigned __i = 0; __i < __sz; ++__i)
		    __ret = __ret && __to_solver(g,g.apply("ivy.push_pop_ident_set.vec_t.value",z3val,g.int_to_z3(g.sort("pos"),__i)),val[__i]);
                return __ret;
            }

	    template <>
	    void  __from_solver<ivyc_s1::ivy__push_pop_ident_set__vec_t>( gen &g, const  z3::expr &v,ivyc_s1::ivy__push_pop_ident_set__vec_t &res){
	        unsigned long long __end;
	        __from_solver(g,g.apply("ivy.push_pop_ident_set.vec_t.end",v),__end);
	        unsigned __sz = (unsigned) __end;
	        res.resize(__sz);
	        for (unsigned __i = 0; __i < __sz; ++__i)
		    __from_solver(g,g.apply("ivy.push_pop_ident_set.vec_t.value",v,g.int_to_z3(g.sort("pos"),__i)),res[__i]);
	    }

	    template <>
	    void  __randomize<ivyc_s1::ivy__push_pop_ident_set__vec_t>( gen &g, const  z3::expr &v){
	        unsigned __sz = rand() % 4;
                z3::expr val_expr = g.int_to_z3(g.sort("pos"),__sz);
                z3::expr pred =  g.apply("ivy.push_pop_ident_set.vec_t.end",v) == val_expr;
                g.add_alit(pred);
	        for (unsigned __i = 0; __i < __sz; ++__i)
	            __randomize<ivyc_s1::ivy__ident>(g,g.apply("ivy.push_pop_ident_set.vec_t.value",v,g.int_to_z3(g.sort("pos"),__i)));
	    }
	    #endif

		    std::ostream &operator <<(std::ostream &s, const ivyc_s1::ivy__decost__map &a) {
	        s << '[';
		for (ivyc_s1::ivy__decost__map::const_iterator it = a.begin(), en = a.end(); it != en; ++it) {
		    if (it != a.begin())
		        s << ',';
		    s << "[" << it->first << "," << it->second << "]";
		}
	        s << ']';
		return s;
            }

	    template <>
	    ivyc_s1::ivy__decost__map _arg<ivyc_s1::ivy__decost__map>(std::vector<ivy_value> &args, unsigned idx, long long bound) {
	        ivy_value &arg = args[idx];
	        if (arg.atom.size()) 
	            throw out_of_bounds(idx);
	        ivyc_s1::ivy__decost__map a;
		for (unsigned i = 0; i < arg.fields.size(); i++) {
		    if (arg.fields[i].fields.size() != 2)
		        throw out_of_bounds(idx);
		    a[_arg<ivyc_s1::ivy__ident>(arg.fields[i].fields,0,0)] = _arg<ivyc_s1::ivy__expr>(arg.fields[i].fields,1,0);
	        }
	        return a;
	    }

	    template <>
	    void __deser<ivyc_s1::ivy__decost__map>(ivy_deser &inp, ivyc_s1::ivy__decost__map &res) {
	        inp.open_list();
	        while(inp.open_list_elem()) {
		    ivyc_s1::ivy__ident x;
	            __deser(inp,x);
                    ivyc_s1::ivy__expr y;
	            __deser(inp,y);
                    res[x] = y;
		    inp.close_list_elem();
                }
		inp.close_list();
	    }

	    template <>
	    void __ser<ivyc_s1::ivy__decost__map>(ivy_ser &res, const ivyc_s1::ivy__decost__map &inp) {
	        int sz = inp.size();
	        res.open_list(sz);
		for (ivyc_s1::ivy__decost__map::const_iterator it = inp.begin(), en = inp.end(); it != en; ++it) {
		    res.open_list_elem();
	            __ser(res,it->first);
	            __ser(res,it->second);
		    res.close_list_elem();
                }
	        res.close_list();
	    }


		    std::ostream &operator <<(std::ostream &s, const ivyc_s1::ivy__elidest__map &a) {
	        s << '[';
		for (ivyc_s1::ivy__elidest__map::const_iterator it = a.begin(), en = a.end(); it != en; ++it) {
		    if (it != a.begin())
		        s << ',';
		    s << "[" << it->first << "," << it->second << "]";
		}
	        s << ']';
		return s;
            }

	    template <>
	    ivyc_s1::ivy__elidest__map _arg<ivyc_s1::ivy__elidest__map>(std::vector<ivy_value> &args, unsigned idx, long long bound) {
	        ivy_value &arg = args[idx];
	        if (arg.atom.size()) 
	            throw out_of_bounds(idx);
	        ivyc_s1::ivy__elidest__map a;
		for (unsigned i = 0; i < arg.fields.size(); i++) {
		    if (arg.fields[i].fields.size() != 2)
		        throw out_of_bounds(idx);
		    a[_arg<ivyc_s1::ivy__ident>(arg.fields[i].fields,0,0)] = _arg<bool>(arg.fields[i].fields,1,0);
	        }
	        return a;
	    }

	    template <>
	    void __deser<ivyc_s1::ivy__elidest__map>(ivy_deser &inp, ivyc_s1::ivy__elidest__map &res) {
	        inp.open_list();
	        while(inp.open_list_elem()) {
		    ivyc_s1::ivy__ident x;
	            __deser(inp,x);
                    bool y;
	            __deser(inp,y);
                    res[x] = y;
		    inp.close_list_elem();
                }
		inp.close_list();
	    }

	    template <>
	    void __ser<ivyc_s1::ivy__elidest__map>(ivy_ser &res, const ivyc_s1::ivy__elidest__map &inp) {
	        int sz = inp.size();
	        res.open_list(sz);
		for (ivyc_s1::ivy__elidest__map::const_iterator it = inp.begin(), en = inp.end(); it != en; ++it) {
		    res.open_list_elem();
	            __ser(res,it->first);
	            __ser(res,it->second);
		    res.close_list_elem();
                }
	        res.close_list();
	    }


		    std::ostream &operator <<(std::ostream &s, const ivyc_s1::vector__ivy__type_context__stack_entry__ &a) {
	        s << '[';
		for (unsigned i = 0; i < a.size(); i++) {
		    if (i != 0)
		        s << ',';
		    s << a[i];
		}
	        s << ']';
		return s;
            }

	    template <>
	    ivyc_s1::vector__ivy__type_context__stack_entry__ _arg<ivyc_s1::vector__ivy__type_context__stack_entry__>(std::vector<ivy_value> &args, unsigned idx, long long bound) {
	        ivy_value &arg = args[idx];
	        if (arg.atom.size()) 
	            throw out_of_bounds(idx);
	        ivyc_s1::vector__ivy__type_context__stack_entry__ a;
	        a.resize(arg.fields.size());
		for (unsigned i = 0; i < a.size(); i++) {
		    a[i] = _arg<ivyc_s1::ivy__type_context__stack_entry>(arg.fields,i,0);
	        }
	        return a;
	    }

	    template <>
	    void __deser<ivyc_s1::vector__ivy__type_context__stack_entry__>(ivy_deser &inp, ivyc_s1::vector__ivy__type_context__stack_entry__ &res) {
	        inp.open_list();
	        while(inp.open_list_elem()) {
		    res.resize(res.size()+1);
	            __deser(inp,res.back());
		    inp.close_list_elem();
                }
		inp.close_list();
	    }

	    template <>
	    void __ser<ivyc_s1::vector__ivy__type_context__stack_entry__>(ivy_ser &res, const ivyc_s1::vector__ivy__type_context__stack_entry__ &inp) {
	        int sz = inp.size();
	        res.open_list(sz);
	        for (unsigned i = 0; i < (unsigned)sz; i++) {
		    res.open_list_elem();
	            __ser(res,inp[i]);
		    res.close_list_elem();
                }
	        res.close_list();
	    }

	    #ifdef Z3PP_H_
	    template <>
            z3::expr __to_solver(gen& g, const z3::expr& z3val, ivyc_s1::vector__ivy__type_context__stack_entry__& val) {
	        z3::expr z3end = g.apply("vector[ivy.type_context.stack_entry].end",z3val);
	        z3::expr __ret = z3end  == g.int_to_z3(z3end.get_sort(),val.size());
	        unsigned __sz = val.size();
	        for (unsigned __i = 0; __i < __sz; ++__i)
		    __ret = __ret && __to_solver(g,g.apply("vector[ivy.type_context.stack_entry].value",z3val,g.int_to_z3(g.sort("vector[ivy.type_context.stack_entry].domain"),__i)),val[__i]);
                return __ret;
            }

	    template <>
	    void  __from_solver<ivyc_s1::vector__ivy__type_context__stack_entry__>( gen &g, const  z3::expr &v,ivyc_s1::vector__ivy__type_context__stack_entry__ &res){
	        unsigned long long __end;
	        __from_solver(g,g.apply("vector[ivy.type_context.stack_entry].end",v),__end);
	        unsigned __sz = (unsigned) __end;
	        res.resize(__sz);
	        for (unsigned __i = 0; __i < __sz; ++__i)
		    __from_solver(g,g.apply("vector[ivy.type_context.stack_entry].value",v,g.int_to_z3(g.sort("vector[ivy.type_context.stack_entry].domain"),__i)),res[__i]);
	    }

	    template <>
	    void  __randomize<ivyc_s1::vector__ivy__type_context__stack_entry__>( gen &g, const  z3::expr &v){
	        unsigned __sz = rand() % 4;
                z3::expr val_expr = g.int_to_z3(g.sort("vector[ivy.type_context.stack_entry].domain"),__sz);
                z3::expr pred =  g.apply("vector[ivy.type_context.stack_entry].end",v) == val_expr;
                g.add_alit(pred);
	        for (unsigned __i = 0; __i < __sz; ++__i)
	            __randomize<ivyc_s1::ivy__type_context__stack_entry>(g,g.apply("vector[ivy.type_context.stack_entry].value",v,g.int_to_z3(g.sort("vector[ivy.type_context.stack_entry].domain"),__i)));
	    }
	    #endif

		    std::ostream &operator <<(std::ostream &s, const ivyc_s1::vector__cpp__ident__ &a) {
	        s << '[';
		for (unsigned i = 0; i < a.size(); i++) {
		    if (i != 0)
		        s << ',';
		    s << a[i];
		}
	        s << ']';
		return s;
            }

	    template <>
	    ivyc_s1::vector__cpp__ident__ _arg<ivyc_s1::vector__cpp__ident__>(std::vector<ivy_value> &args, unsigned idx, long long bound) {
	        ivy_value &arg = args[idx];
	        if (arg.atom.size()) 
	            throw out_of_bounds(idx);
	        ivyc_s1::vector__cpp__ident__ a;
	        a.resize(arg.fields.size());
		for (unsigned i = 0; i < a.size(); i++) {
		    a[i] = _arg<ivyc_s1::cpp__ident>(arg.fields,i,0);
	        }
	        return a;
	    }

	    template <>
	    void __deser<ivyc_s1::vector__cpp__ident__>(ivy_deser &inp, ivyc_s1::vector__cpp__ident__ &res) {
	        inp.open_list();
	        while(inp.open_list_elem()) {
		    res.resize(res.size()+1);
	            __deser(inp,res.back());
		    inp.close_list_elem();
                }
		inp.close_list();
	    }

	    template <>
	    void __ser<ivyc_s1::vector__cpp__ident__>(ivy_ser &res, const ivyc_s1::vector__cpp__ident__ &inp) {
	        int sz = inp.size();
	        res.open_list(sz);
	        for (unsigned i = 0; i < (unsigned)sz; i++) {
		    res.open_list_elem();
	            __ser(res,inp[i]);
		    res.close_list_elem();
                }
	        res.close_list();
	    }

	    #ifdef Z3PP_H_
	    template <>
            z3::expr __to_solver(gen& g, const z3::expr& z3val, ivyc_s1::vector__cpp__ident__& val) {
	        z3::expr z3end = g.apply("vector[cpp.ident].end",z3val);
	        z3::expr __ret = z3end  == g.int_to_z3(z3end.get_sort(),val.size());
	        unsigned __sz = val.size();
	        for (unsigned __i = 0; __i < __sz; ++__i)
		    __ret = __ret && __to_solver(g,g.apply("vector[cpp.ident].value",z3val,g.int_to_z3(g.sort("vector[cpp.ident].domain"),__i)),val[__i]);
                return __ret;
            }

	    template <>
	    void  __from_solver<ivyc_s1::vector__cpp__ident__>( gen &g, const  z3::expr &v,ivyc_s1::vector__cpp__ident__ &res){
	        unsigned long long __end;
	        __from_solver(g,g.apply("vector[cpp.ident].end",v),__end);
	        unsigned __sz = (unsigned) __end;
	        res.resize(__sz);
	        for (unsigned __i = 0; __i < __sz; ++__i)
		    __from_solver(g,g.apply("vector[cpp.ident].value",v,g.int_to_z3(g.sort("vector[cpp.ident].domain"),__i)),res[__i]);
	    }

	    template <>
	    void  __randomize<ivyc_s1::vector__cpp__ident__>( gen &g, const  z3::expr &v){
	        unsigned __sz = rand() % 4;
                z3::expr val_expr = g.int_to_z3(g.sort("vector[cpp.ident].domain"),__sz);
                z3::expr pred =  g.apply("vector[cpp.ident].end",v) == val_expr;
                g.add_alit(pred);
	        for (unsigned __i = 0; __i < __sz; ++__i)
	            __randomize<ivyc_s1::cpp__ident>(g,g.apply("vector[cpp.ident].value",v,g.int_to_z3(g.sort("vector[cpp.ident].domain"),__i)));
	    }
	    #endif

		    std::ostream &operator <<(std::ostream &s, const ivyc_s1::vector__cpp__expr__ &a) {
	        s << '[';
		for (unsigned i = 0; i < a.size(); i++) {
		    if (i != 0)
		        s << ',';
		    s << a[i];
		}
	        s << ']';
		return s;
            }

	    template <>
	    ivyc_s1::vector__cpp__expr__ _arg<ivyc_s1::vector__cpp__expr__>(std::vector<ivy_value> &args, unsigned idx, long long bound) {
	        ivy_value &arg = args[idx];
	        if (arg.atom.size()) 
	            throw out_of_bounds(idx);
	        ivyc_s1::vector__cpp__expr__ a;
	        a.resize(arg.fields.size());
		for (unsigned i = 0; i < a.size(); i++) {
		    a[i] = _arg<ivyc_s1::cpp__expr>(arg.fields,i,0);
	        }
	        return a;
	    }

	    template <>
	    void __deser<ivyc_s1::vector__cpp__expr__>(ivy_deser &inp, ivyc_s1::vector__cpp__expr__ &res) {
	        inp.open_list();
	        while(inp.open_list_elem()) {
		    res.resize(res.size()+1);
	            __deser(inp,res.back());
		    inp.close_list_elem();
                }
		inp.close_list();
	    }

	    template <>
	    void __ser<ivyc_s1::vector__cpp__expr__>(ivy_ser &res, const ivyc_s1::vector__cpp__expr__ &inp) {
	        int sz = inp.size();
	        res.open_list(sz);
	        for (unsigned i = 0; i < (unsigned)sz; i++) {
		    res.open_list_elem();
	            __ser(res,inp[i]);
		    res.close_list_elem();
                }
	        res.close_list();
	    }

	    #ifdef Z3PP_H_
	    template <>
            z3::expr __to_solver(gen& g, const z3::expr& z3val, ivyc_s1::vector__cpp__expr__& val) {
	        z3::expr z3end = g.apply("vector[cpp.expr].end",z3val);
	        z3::expr __ret = z3end  == g.int_to_z3(z3end.get_sort(),val.size());
	        unsigned __sz = val.size();
	        for (unsigned __i = 0; __i < __sz; ++__i)
		    __ret = __ret && __to_solver(g,g.apply("vector[cpp.expr].value",z3val,g.int_to_z3(g.sort("vector[cpp.expr].domain"),__i)),val[__i]);
                return __ret;
            }

	    template <>
	    void  __from_solver<ivyc_s1::vector__cpp__expr__>( gen &g, const  z3::expr &v,ivyc_s1::vector__cpp__expr__ &res){
	        unsigned long long __end;
	        __from_solver(g,g.apply("vector[cpp.expr].end",v),__end);
	        unsigned __sz = (unsigned) __end;
	        res.resize(__sz);
	        for (unsigned __i = 0; __i < __sz; ++__i)
		    __from_solver(g,g.apply("vector[cpp.expr].value",v,g.int_to_z3(g.sort("vector[cpp.expr].domain"),__i)),res[__i]);
	    }

	    template <>
	    void  __randomize<ivyc_s1::vector__cpp__expr__>( gen &g, const  z3::expr &v){
	        unsigned __sz = rand() % 4;
                z3::expr val_expr = g.int_to_z3(g.sort("vector[cpp.expr].domain"),__sz);
                z3::expr pred =  g.apply("vector[cpp.expr].end",v) == val_expr;
                g.add_alit(pred);
	        for (unsigned __i = 0; __i < __sz; ++__i)
	            __randomize<ivyc_s1::cpp__expr>(g,g.apply("vector[cpp.expr].value",v,g.int_to_z3(g.sort("vector[cpp.expr].domain"),__i)));
	    }
	    #endif

		    std::ostream &operator <<(std::ostream &s, const ivyc_s1::vector__cpp__stmt__ &a) {
	        s << '[';
		for (unsigned i = 0; i < a.size(); i++) {
		    if (i != 0)
		        s << ',';
		    s << a[i];
		}
	        s << ']';
		return s;
            }

	    template <>
	    ivyc_s1::vector__cpp__stmt__ _arg<ivyc_s1::vector__cpp__stmt__>(std::vector<ivy_value> &args, unsigned idx, long long bound) {
	        ivy_value &arg = args[idx];
	        if (arg.atom.size()) 
	            throw out_of_bounds(idx);
	        ivyc_s1::vector__cpp__stmt__ a;
	        a.resize(arg.fields.size());
		for (unsigned i = 0; i < a.size(); i++) {
		    a[i] = _arg<ivyc_s1::cpp__stmt>(arg.fields,i,0);
	        }
	        return a;
	    }

	    template <>
	    void __deser<ivyc_s1::vector__cpp__stmt__>(ivy_deser &inp, ivyc_s1::vector__cpp__stmt__ &res) {
	        inp.open_list();
	        while(inp.open_list_elem()) {
		    res.resize(res.size()+1);
	            __deser(inp,res.back());
		    inp.close_list_elem();
                }
		inp.close_list();
	    }

	    template <>
	    void __ser<ivyc_s1::vector__cpp__stmt__>(ivy_ser &res, const ivyc_s1::vector__cpp__stmt__ &inp) {
	        int sz = inp.size();
	        res.open_list(sz);
	        for (unsigned i = 0; i < (unsigned)sz; i++) {
		    res.open_list_elem();
	            __ser(res,inp[i]);
		    res.close_list_elem();
                }
	        res.close_list();
	    }

	    #ifdef Z3PP_H_
	    template <>
            z3::expr __to_solver(gen& g, const z3::expr& z3val, ivyc_s1::vector__cpp__stmt__& val) {
	        z3::expr z3end = g.apply("vector[cpp.stmt].end",z3val);
	        z3::expr __ret = z3end  == g.int_to_z3(z3end.get_sort(),val.size());
	        unsigned __sz = val.size();
	        for (unsigned __i = 0; __i < __sz; ++__i)
		    __ret = __ret && __to_solver(g,g.apply("vector[cpp.stmt].value",z3val,g.int_to_z3(g.sort("vector[cpp.stmt].domain"),__i)),val[__i]);
                return __ret;
            }

	    template <>
	    void  __from_solver<ivyc_s1::vector__cpp__stmt__>( gen &g, const  z3::expr &v,ivyc_s1::vector__cpp__stmt__ &res){
	        unsigned long long __end;
	        __from_solver(g,g.apply("vector[cpp.stmt].end",v),__end);
	        unsigned __sz = (unsigned) __end;
	        res.resize(__sz);
	        for (unsigned __i = 0; __i < __sz; ++__i)
		    __from_solver(g,g.apply("vector[cpp.stmt].value",v,g.int_to_z3(g.sort("vector[cpp.stmt].domain"),__i)),res[__i]);
	    }

	    template <>
	    void  __randomize<ivyc_s1::vector__cpp__stmt__>( gen &g, const  z3::expr &v){
	        unsigned __sz = rand() % 4;
                z3::expr val_expr = g.int_to_z3(g.sort("vector[cpp.stmt].domain"),__sz);
                z3::expr pred =  g.apply("vector[cpp.stmt].end",v) == val_expr;
                g.add_alit(pred);
	        for (unsigned __i = 0; __i < __sz; ++__i)
	            __randomize<ivyc_s1::cpp__stmt>(g,g.apply("vector[cpp.stmt].value",v,g.int_to_z3(g.sort("vector[cpp.stmt].domain"),__i)));
	    }
	    #endif

		    std::ostream &operator <<(std::ostream &s, const ivyc_s1::vector__cpp__simpletype__ &a) {
	        s << '[';
		for (unsigned i = 0; i < a.size(); i++) {
		    if (i != 0)
		        s << ',';
		    s << a[i];
		}
	        s << ']';
		return s;
            }

	    template <>
	    ivyc_s1::vector__cpp__simpletype__ _arg<ivyc_s1::vector__cpp__simpletype__>(std::vector<ivy_value> &args, unsigned idx, long long bound) {
	        ivy_value &arg = args[idx];
	        if (arg.atom.size()) 
	            throw out_of_bounds(idx);
	        ivyc_s1::vector__cpp__simpletype__ a;
	        a.resize(arg.fields.size());
		for (unsigned i = 0; i < a.size(); i++) {
		    a[i] = _arg<ivyc_s1::cpp__simpletype>(arg.fields,i,0);
	        }
	        return a;
	    }

	    template <>
	    void __deser<ivyc_s1::vector__cpp__simpletype__>(ivy_deser &inp, ivyc_s1::vector__cpp__simpletype__ &res) {
	        inp.open_list();
	        while(inp.open_list_elem()) {
		    res.resize(res.size()+1);
	            __deser(inp,res.back());
		    inp.close_list_elem();
                }
		inp.close_list();
	    }

	    template <>
	    void __ser<ivyc_s1::vector__cpp__simpletype__>(ivy_ser &res, const ivyc_s1::vector__cpp__simpletype__ &inp) {
	        int sz = inp.size();
	        res.open_list(sz);
	        for (unsigned i = 0; i < (unsigned)sz; i++) {
		    res.open_list_elem();
	            __ser(res,inp[i]);
		    res.close_list_elem();
                }
	        res.close_list();
	    }

	    #ifdef Z3PP_H_
	    template <>
            z3::expr __to_solver(gen& g, const z3::expr& z3val, ivyc_s1::vector__cpp__simpletype__& val) {
	        z3::expr z3end = g.apply("vector[cpp.simpletype].end",z3val);
	        z3::expr __ret = z3end  == g.int_to_z3(z3end.get_sort(),val.size());
	        unsigned __sz = val.size();
	        for (unsigned __i = 0; __i < __sz; ++__i)
		    __ret = __ret && __to_solver(g,g.apply("vector[cpp.simpletype].value",z3val,g.int_to_z3(g.sort("vector[cpp.simpletype].domain"),__i)),val[__i]);
                return __ret;
            }

	    template <>
	    void  __from_solver<ivyc_s1::vector__cpp__simpletype__>( gen &g, const  z3::expr &v,ivyc_s1::vector__cpp__simpletype__ &res){
	        unsigned long long __end;
	        __from_solver(g,g.apply("vector[cpp.simpletype].end",v),__end);
	        unsigned __sz = (unsigned) __end;
	        res.resize(__sz);
	        for (unsigned __i = 0; __i < __sz; ++__i)
		    __from_solver(g,g.apply("vector[cpp.simpletype].value",v,g.int_to_z3(g.sort("vector[cpp.simpletype].domain"),__i)),res[__i]);
	    }

	    template <>
	    void  __randomize<ivyc_s1::vector__cpp__simpletype__>( gen &g, const  z3::expr &v){
	        unsigned __sz = rand() % 4;
                z3::expr val_expr = g.int_to_z3(g.sort("vector[cpp.simpletype].domain"),__sz);
                z3::expr pred =  g.apply("vector[cpp.simpletype].end",v) == val_expr;
                g.add_alit(pred);
	        for (unsigned __i = 0; __i < __sz; ++__i)
	            __randomize<ivyc_s1::cpp__simpletype>(g,g.apply("vector[cpp.simpletype].value",v,g.int_to_z3(g.sort("vector[cpp.simpletype].domain"),__i)));
	    }
	    #endif

		    std::ostream &operator <<(std::ostream &s, const ivyc_s1::vector__cpp__decl__ &a) {
	        s << '[';
		for (unsigned i = 0; i < a.size(); i++) {
		    if (i != 0)
		        s << ',';
		    s << a[i];
		}
	        s << ']';
		return s;
            }

	    template <>
	    ivyc_s1::vector__cpp__decl__ _arg<ivyc_s1::vector__cpp__decl__>(std::vector<ivy_value> &args, unsigned idx, long long bound) {
	        ivy_value &arg = args[idx];
	        if (arg.atom.size()) 
	            throw out_of_bounds(idx);
	        ivyc_s1::vector__cpp__decl__ a;
	        a.resize(arg.fields.size());
		for (unsigned i = 0; i < a.size(); i++) {
		    a[i] = _arg<ivyc_s1::cpp__decl>(arg.fields,i,0);
	        }
	        return a;
	    }

	    template <>
	    void __deser<ivyc_s1::vector__cpp__decl__>(ivy_deser &inp, ivyc_s1::vector__cpp__decl__ &res) {
	        inp.open_list();
	        while(inp.open_list_elem()) {
		    res.resize(res.size()+1);
	            __deser(inp,res.back());
		    inp.close_list_elem();
                }
		inp.close_list();
	    }

	    template <>
	    void __ser<ivyc_s1::vector__cpp__decl__>(ivy_ser &res, const ivyc_s1::vector__cpp__decl__ &inp) {
	        int sz = inp.size();
	        res.open_list(sz);
	        for (unsigned i = 0; i < (unsigned)sz; i++) {
		    res.open_list_elem();
	            __ser(res,inp[i]);
		    res.close_list_elem();
                }
	        res.close_list();
	    }

	    #ifdef Z3PP_H_
	    template <>
            z3::expr __to_solver(gen& g, const z3::expr& z3val, ivyc_s1::vector__cpp__decl__& val) {
	        z3::expr z3end = g.apply("vector[cpp.decl].end",z3val);
	        z3::expr __ret = z3end  == g.int_to_z3(z3end.get_sort(),val.size());
	        unsigned __sz = val.size();
	        for (unsigned __i = 0; __i < __sz; ++__i)
		    __ret = __ret && __to_solver(g,g.apply("vector[cpp.decl].value",z3val,g.int_to_z3(g.sort("vector[cpp.decl].domain"),__i)),val[__i]);
                return __ret;
            }

	    template <>
	    void  __from_solver<ivyc_s1::vector__cpp__decl__>( gen &g, const  z3::expr &v,ivyc_s1::vector__cpp__decl__ &res){
	        unsigned long long __end;
	        __from_solver(g,g.apply("vector[cpp.decl].end",v),__end);
	        unsigned __sz = (unsigned) __end;
	        res.resize(__sz);
	        for (unsigned __i = 0; __i < __sz; ++__i)
		    __from_solver(g,g.apply("vector[cpp.decl].value",v,g.int_to_z3(g.sort("vector[cpp.decl].domain"),__i)),res[__i]);
	    }

	    template <>
	    void  __randomize<ivyc_s1::vector__cpp__decl__>( gen &g, const  z3::expr &v){
	        unsigned __sz = rand() % 4;
                z3::expr val_expr = g.int_to_z3(g.sort("vector[cpp.decl].domain"),__sz);
                z3::expr pred =  g.apply("vector[cpp.decl].end",v) == val_expr;
                g.add_alit(pred);
	        for (unsigned __i = 0; __i < __sz; ++__i)
	            __randomize<ivyc_s1::cpp__decl>(g,g.apply("vector[cpp.decl].value",v,g.int_to_z3(g.sort("vector[cpp.decl].domain"),__i)));
	    }
	    #endif

		    std::ostream &operator <<(std::ostream &s, const ivyc_s1::ivy__ident_to_declvec &a) {
	        s << '[';
		for (ivyc_s1::ivy__ident_to_declvec::const_iterator it = a.begin(), en = a.end(); it != en; ++it) {
		    if (it != a.begin())
		        s << ',';
		    s << "[" << it->first << "," << it->second << "]";
		}
	        s << ']';
		return s;
            }

	    template <>
	    ivyc_s1::ivy__ident_to_declvec _arg<ivyc_s1::ivy__ident_to_declvec>(std::vector<ivy_value> &args, unsigned idx, long long bound) {
	        ivy_value &arg = args[idx];
	        if (arg.atom.size()) 
	            throw out_of_bounds(idx);
	        ivyc_s1::ivy__ident_to_declvec a;
		for (unsigned i = 0; i < arg.fields.size(); i++) {
		    if (arg.fields[i].fields.size() != 2)
		        throw out_of_bounds(idx);
		    a[_arg<ivyc_s1::ivy__ident>(arg.fields[i].fields,0,0)] = _arg<ivyc_s1::vector__ivy__decl__>(arg.fields[i].fields,1,0);
	        }
	        return a;
	    }

	    template <>
	    void __deser<ivyc_s1::ivy__ident_to_declvec>(ivy_deser &inp, ivyc_s1::ivy__ident_to_declvec &res) {
	        inp.open_list();
	        while(inp.open_list_elem()) {
		    ivyc_s1::ivy__ident x;
	            __deser(inp,x);
                    ivyc_s1::vector__ivy__decl__ y;
	            __deser(inp,y);
                    res[x] = y;
		    inp.close_list_elem();
                }
		inp.close_list();
	    }

	    template <>
	    void __ser<ivyc_s1::ivy__ident_to_declvec>(ivy_ser &res, const ivyc_s1::ivy__ident_to_declvec &inp) {
	        int sz = inp.size();
	        res.open_list(sz);
		for (ivyc_s1::ivy__ident_to_declvec::const_iterator it = inp.begin(), en = inp.end(); it != en; ++it) {
		    res.open_list_elem();
	            __ser(res,it->first);
	            __ser(res,it->second);
		    res.close_list_elem();
                }
	        res.close_list();
	    }


		    std::ostream &operator <<(std::ostream &s, const ivyc_s1::ivy__ident_to_cppclass &a) {
	        s << '[';
		for (ivyc_s1::ivy__ident_to_cppclass::const_iterator it = a.begin(), en = a.end(); it != en; ++it) {
		    if (it != a.begin())
		        s << ',';
		    s << "[" << it->first << "," << it->second << "]";
		}
	        s << ']';
		return s;
            }

	    template <>
	    ivyc_s1::ivy__ident_to_cppclass _arg<ivyc_s1::ivy__ident_to_cppclass>(std::vector<ivy_value> &args, unsigned idx, long long bound) {
	        ivy_value &arg = args[idx];
	        if (arg.atom.size()) 
	            throw out_of_bounds(idx);
	        ivyc_s1::ivy__ident_to_cppclass a;
		for (unsigned i = 0; i < arg.fields.size(); i++) {
		    if (arg.fields[i].fields.size() != 2)
		        throw out_of_bounds(idx);
		    a[_arg<ivyc_s1::ivy__ident>(arg.fields[i].fields,0,0)] = _arg<ivyc_s1::ivy__expr>(arg.fields[i].fields,1,0);
	        }
	        return a;
	    }

	    template <>
	    void __deser<ivyc_s1::ivy__ident_to_cppclass>(ivy_deser &inp, ivyc_s1::ivy__ident_to_cppclass &res) {
	        inp.open_list();
	        while(inp.open_list_elem()) {
		    ivyc_s1::ivy__ident x;
	            __deser(inp,x);
                    ivyc_s1::ivy__expr y;
	            __deser(inp,y);
                    res[x] = y;
		    inp.close_list_elem();
                }
		inp.close_list();
	    }

	    template <>
	    void __ser<ivyc_s1::ivy__ident_to_cppclass>(ivy_ser &res, const ivyc_s1::ivy__ident_to_cppclass &inp) {
	        int sz = inp.size();
	        res.open_list(sz);
		for (ivyc_s1::ivy__ident_to_cppclass::const_iterator it = inp.begin(), en = inp.end(); it != en; ++it) {
		    res.open_list_elem();
	            __ser(res,it->first);
	            __ser(res,it->second);
		    res.close_list_elem();
                }
	        res.close_list();
	    }


		    std::ostream &operator <<(std::ostream &s, const ivyc_s1::ivy__ident_to_prototype &a) {
	        s << '[';
		for (ivyc_s1::ivy__ident_to_prototype::const_iterator it = a.begin(), en = a.end(); it != en; ++it) {
		    if (it != a.begin())
		        s << ',';
		    s << "[" << it->first << "," << it->second << "]";
		}
	        s << ']';
		return s;
            }

	    template <>
	    ivyc_s1::ivy__ident_to_prototype _arg<ivyc_s1::ivy__ident_to_prototype>(std::vector<ivy_value> &args, unsigned idx, long long bound) {
	        ivy_value &arg = args[idx];
	        if (arg.atom.size()) 
	            throw out_of_bounds(idx);
	        ivyc_s1::ivy__ident_to_prototype a;
		for (unsigned i = 0; i < arg.fields.size(); i++) {
		    if (arg.fields[i].fields.size() != 2)
		        throw out_of_bounds(idx);
		    a[_arg<ivyc_s1::ivy__ident>(arg.fields[i].fields,0,0)] = _arg<ivyc_s1::ivy__prototype>(arg.fields[i].fields,1,0);
	        }
	        return a;
	    }

	    template <>
	    void __deser<ivyc_s1::ivy__ident_to_prototype>(ivy_deser &inp, ivyc_s1::ivy__ident_to_prototype &res) {
	        inp.open_list();
	        while(inp.open_list_elem()) {
		    ivyc_s1::ivy__ident x;
	            __deser(inp,x);
                    ivyc_s1::ivy__prototype y;
	            __deser(inp,y);
                    res[x] = y;
		    inp.close_list_elem();
                }
		inp.close_list();
	    }

	    template <>
	    void __ser<ivyc_s1::ivy__ident_to_prototype>(ivy_ser &res, const ivyc_s1::ivy__ident_to_prototype &inp) {
	        int sz = inp.size();
	        res.open_list(sz);
		for (ivyc_s1::ivy__ident_to_prototype::const_iterator it = inp.begin(), en = inp.end(); it != en; ++it) {
		    res.open_list_elem();
	            __ser(res,it->first);
	            __ser(res,it->second);
		    res.close_list_elem();
                }
	        res.close_list();
	    }


		    std::ostream &operator <<(std::ostream &s, const ivyc_s1::vector__ivy__lvalue_count__ &a) {
	        s << '[';
		for (unsigned i = 0; i < a.size(); i++) {
		    if (i != 0)
		        s << ',';
		    s << a[i];
		}
	        s << ']';
		return s;
            }

	    template <>
	    ivyc_s1::vector__ivy__lvalue_count__ _arg<ivyc_s1::vector__ivy__lvalue_count__>(std::vector<ivy_value> &args, unsigned idx, long long bound) {
	        ivy_value &arg = args[idx];
	        if (arg.atom.size()) 
	            throw out_of_bounds(idx);
	        ivyc_s1::vector__ivy__lvalue_count__ a;
	        a.resize(arg.fields.size());
		for (unsigned i = 0; i < a.size(); i++) {
		    a[i] = _arg<ivyc_s1::ivy__lvalue_count>(arg.fields,i,0);
	        }
	        return a;
	    }

	    template <>
	    void __deser<ivyc_s1::vector__ivy__lvalue_count__>(ivy_deser &inp, ivyc_s1::vector__ivy__lvalue_count__ &res) {
	        inp.open_list();
	        while(inp.open_list_elem()) {
		    res.resize(res.size()+1);
	            __deser(inp,res.back());
		    inp.close_list_elem();
                }
		inp.close_list();
	    }

	    template <>
	    void __ser<ivyc_s1::vector__ivy__lvalue_count__>(ivy_ser &res, const ivyc_s1::vector__ivy__lvalue_count__ &inp) {
	        int sz = inp.size();
	        res.open_list(sz);
	        for (unsigned i = 0; i < (unsigned)sz; i++) {
		    res.open_list_elem();
	            __ser(res,inp[i]);
		    res.close_list_elem();
                }
	        res.close_list();
	    }

	    #ifdef Z3PP_H_
	    template <>
            z3::expr __to_solver(gen& g, const z3::expr& z3val, ivyc_s1::vector__ivy__lvalue_count__& val) {
	        z3::expr z3end = g.apply("vector[ivy.lvalue_count].end",z3val);
	        z3::expr __ret = z3end  == g.int_to_z3(z3end.get_sort(),val.size());
	        unsigned __sz = val.size();
	        for (unsigned __i = 0; __i < __sz; ++__i)
		    __ret = __ret && __to_solver(g,g.apply("vector[ivy.lvalue_count].value",z3val,g.int_to_z3(g.sort("vector[ivy.lvalue_count].domain"),__i)),val[__i]);
                return __ret;
            }

	    template <>
	    void  __from_solver<ivyc_s1::vector__ivy__lvalue_count__>( gen &g, const  z3::expr &v,ivyc_s1::vector__ivy__lvalue_count__ &res){
	        unsigned long long __end;
	        __from_solver(g,g.apply("vector[ivy.lvalue_count].end",v),__end);
	        unsigned __sz = (unsigned) __end;
	        res.resize(__sz);
	        for (unsigned __i = 0; __i < __sz; ++__i)
		    __from_solver(g,g.apply("vector[ivy.lvalue_count].value",v,g.int_to_z3(g.sort("vector[ivy.lvalue_count].domain"),__i)),res[__i]);
	    }

	    template <>
	    void  __randomize<ivyc_s1::vector__ivy__lvalue_count__>( gen &g, const  z3::expr &v){
	        unsigned __sz = rand() % 4;
                z3::expr val_expr = g.int_to_z3(g.sort("vector[ivy.lvalue_count].domain"),__sz);
                z3::expr pred =  g.apply("vector[ivy.lvalue_count].end",v) == val_expr;
                g.add_alit(pred);
	        for (unsigned __i = 0; __i < __sz; ++__i)
	            __randomize<ivyc_s1::ivy__lvalue_count>(g,g.apply("vector[ivy.lvalue_count].value",v,g.int_to_z3(g.sort("vector[ivy.lvalue_count].domain"),__i)));
	    }
	    #endif

		    std::ostream &operator <<(std::ostream &s, const ivyc_s1::vector__ivy__access_path__ &a) {
	        s << '[';
		for (unsigned i = 0; i < a.size(); i++) {
		    if (i != 0)
		        s << ',';
		    s << a[i];
		}
	        s << ']';
		return s;
            }

	    template <>
	    ivyc_s1::vector__ivy__access_path__ _arg<ivyc_s1::vector__ivy__access_path__>(std::vector<ivy_value> &args, unsigned idx, long long bound) {
	        ivy_value &arg = args[idx];
	        if (arg.atom.size()) 
	            throw out_of_bounds(idx);
	        ivyc_s1::vector__ivy__access_path__ a;
	        a.resize(arg.fields.size());
		for (unsigned i = 0; i < a.size(); i++) {
		    a[i] = _arg<ivyc_s1::ivy__access_path>(arg.fields,i,0);
	        }
	        return a;
	    }

	    template <>
	    void __deser<ivyc_s1::vector__ivy__access_path__>(ivy_deser &inp, ivyc_s1::vector__ivy__access_path__ &res) {
	        inp.open_list();
	        while(inp.open_list_elem()) {
		    res.resize(res.size()+1);
	            __deser(inp,res.back());
		    inp.close_list_elem();
                }
		inp.close_list();
	    }

	    template <>
	    void __ser<ivyc_s1::vector__ivy__access_path__>(ivy_ser &res, const ivyc_s1::vector__ivy__access_path__ &inp) {
	        int sz = inp.size();
	        res.open_list(sz);
	        for (unsigned i = 0; i < (unsigned)sz; i++) {
		    res.open_list_elem();
	            __ser(res,inp[i]);
		    res.close_list_elem();
                }
	        res.close_list();
	    }

	    #ifdef Z3PP_H_
	    template <>
            z3::expr __to_solver(gen& g, const z3::expr& z3val, ivyc_s1::vector__ivy__access_path__& val) {
	        z3::expr z3end = g.apply("vector[ivy.access_path].end",z3val);
	        z3::expr __ret = z3end  == g.int_to_z3(z3end.get_sort(),val.size());
	        unsigned __sz = val.size();
	        for (unsigned __i = 0; __i < __sz; ++__i)
		    __ret = __ret && __to_solver(g,g.apply("vector[ivy.access_path].value",z3val,g.int_to_z3(g.sort("vector[ivy.access_path].domain"),__i)),val[__i]);
                return __ret;
            }

	    template <>
	    void  __from_solver<ivyc_s1::vector__ivy__access_path__>( gen &g, const  z3::expr &v,ivyc_s1::vector__ivy__access_path__ &res){
	        unsigned long long __end;
	        __from_solver(g,g.apply("vector[ivy.access_path].end",v),__end);
	        unsigned __sz = (unsigned) __end;
	        res.resize(__sz);
	        for (unsigned __i = 0; __i < __sz; ++__i)
		    __from_solver(g,g.apply("vector[ivy.access_path].value",v,g.int_to_z3(g.sort("vector[ivy.access_path].domain"),__i)),res[__i]);
	    }

	    template <>
	    void  __randomize<ivyc_s1::vector__ivy__access_path__>( gen &g, const  z3::expr &v){
	        unsigned __sz = rand() % 4;
                z3::expr val_expr = g.int_to_z3(g.sort("vector[ivy.access_path].domain"),__sz);
                z3::expr pred =  g.apply("vector[ivy.access_path].end",v) == val_expr;
                g.add_alit(pred);
	        for (unsigned __i = 0; __i < __sz; ++__i)
	            __randomize<ivyc_s1::ivy__access_path>(g,g.apply("vector[ivy.access_path].value",v,g.int_to_z3(g.sort("vector[ivy.access_path].domain"),__i)));
	    }
	    #endif

	int ivyc_s1::___ivy_choose(int rng,const char *name,int id) {
        return 0;
    }
bool ivyc_s1::char__is_alphanum(int X){
    bool val;
    val = (bool)___ivy_choose(0,"ret:val",0);
    val = ((((48 < X) || (48 == X)) && (X < 58)) || (((65 < X) || (65 == X)) && (X < 91)) || (((97 < X) || (97 == X)) && (X < 123)) || (X == 95));
    return val;
}
bool ivyc_s1::char__is_bracket(int X){
    bool val;
    val = (bool)___ivy_choose(0,"ret:val",0);
    val = ((X == 40) || (X == 41) || (X == 91) || (X == 93) || (X == 123) || (X == 125) || (X == 59) || (X == 44));
    return val;
}
bool ivyc_s1::char__is_white(int X){
    bool val;
    val = (bool)___ivy_choose(0,"ret:val",0);
    val = ((X == 9) || (X == 10) || (X == 13) || (X == 32));
    return val;
}
ivyc_s1::char__kinds ivyc_s1::char__kind(int X){
    ivyc_s1::char__kinds val;
    val = (char__kinds)___ivy_choose(0,"ret:val",0);
    val = (char__is_alphanum(X) ? char__alphanum : (char__is_bracket(X) ? char__bracket : char__punct));
    return val;
}
bool ivyc_s1::char__non_printing(int X){
    bool val;
    val = (bool)___ivy_choose(0,"ret:val",0);
    val = ((X < 32) || (X == 127));
    return val;
}
bool ivyc_s1::char__is_digit(int X){
    bool val;
    val = (bool)___ivy_choose(0,"ret:val",0);
    val = (((48 < X) || (48 == X)) && (X < 58));
    return val;
}
bool ivyc_s1::char__is_capital(int X){
    bool val;
    val = (bool)___ivy_choose(0,"ret:val",0);
    val = (((65 < X) || (65 == X)) && (X < 91));
    return val;
}
unsigned long long ivyc_s1::str__begin(const str& A){
    unsigned long long val;
    val = (unsigned long long)___ivy_choose(0,"ret:val",0);
    val = 0;
    return val;
}
unsigned long long ivyc_s1::vector__pretty__token____begin(const vector__pretty__token__& A){
    unsigned long long val;
    val = (unsigned long long)___ivy_choose(0,"ret:val",0);
    val = 0;
    return val;
}
unsigned long long ivyc_s1::vector__pos____begin(const vector__pos__& A){
    unsigned long long val;
    val = (unsigned long long)___ivy_choose(0,"ret:val",0);
    val = 0;
    return val;
}
unsigned long long ivyc_s1::vector__str____begin(const vector__str__& A){
    unsigned long long val;
    val = (unsigned long long)___ivy_choose(0,"ret:val",0);
    val = 0;
    return val;
}
unsigned long long ivyc_s1::vector__ivy__ident____begin(const vector__ivy__ident__& A){
    unsigned long long val;
    val = (unsigned long long)___ivy_choose(0,"ret:val",0);
    val = 0;
    return val;
}
unsigned long long ivyc_s1::vector__ivy__expr____begin(const vector__ivy__expr__& A){
    unsigned long long val;
    val = (unsigned long long)___ivy_choose(0,"ret:val",0);
    val = 0;
    return val;
}
unsigned long long ivyc_s1::vector__ivy__stmt____begin(const vector__ivy__stmt__& A){
    unsigned long long val;
    val = (unsigned long long)___ivy_choose(0,"ret:val",0);
    val = 0;
    return val;
}
unsigned long long ivyc_s1::vector__ivy__prototype_argument____begin(const vector__ivy__prototype_argument__& A){
    unsigned long long val;
    val = (unsigned long long)___ivy_choose(0,"ret:val",0);
    val = 0;
    return val;
}
unsigned long long ivyc_s1::vector__ivy__decl____begin(const vector__ivy__decl__& A){
    unsigned long long val;
    val = (unsigned long long)___ivy_choose(0,"ret:val",0);
    val = 0;
    return val;
}
unsigned long long ivyc_s1::vector__cpp__ident____begin(const vector__cpp__ident__& A){
    unsigned long long val;
    val = (unsigned long long)___ivy_choose(0,"ret:val",0);
    val = 0;
    return val;
}
unsigned long long ivyc_s1::vector__cpp__expr____begin(const vector__cpp__expr__& A){
    unsigned long long val;
    val = (unsigned long long)___ivy_choose(0,"ret:val",0);
    val = 0;
    return val;
}
unsigned long long ivyc_s1::vector__cpp__stmt____begin(const vector__cpp__stmt__& A){
    unsigned long long val;
    val = (unsigned long long)___ivy_choose(0,"ret:val",0);
    val = 0;
    return val;
}
unsigned long long ivyc_s1::vector__cpp__simpletype____begin(const vector__cpp__simpletype__& A){
    unsigned long long val;
    val = (unsigned long long)___ivy_choose(0,"ret:val",0);
    val = 0;
    return val;
}
unsigned long long ivyc_s1::vector__cpp__decl____begin(const vector__cpp__decl__& A){
    unsigned long long val;
    val = (unsigned long long)___ivy_choose(0,"ret:val",0);
    val = 0;
    return val;
}
unsigned long long ivyc_s1::vector__ivy__lvalue_count____begin(const vector__ivy__lvalue_count__& A){
    unsigned long long val;
    val = (unsigned long long)___ivy_choose(0,"ret:val",0);
    val = 0;
    return val;
}
unsigned long long ivyc_s1::vector__ivy__access_path____begin(const vector__ivy__access_path__& A){
    unsigned long long val;
    val = (unsigned long long)___ivy_choose(0,"ret:val",0);
    val = 0;
    return val;
}
int ivyc_s1::str__value(const str& a, unsigned long long i){
    int val;
    val = (int)___ivy_choose(0,"ret:val",0);
    val =  (0 <= i && i < a.size()) ? a[i] : val ;
    return val;
}
unsigned long long ivyc_s1::str__end(const str& a){
    unsigned long long val;
    val = (unsigned long long)___ivy_choose(0,"ret:val",0);
    val =  a.size() ;
    return val;
}
ivyc_s1::str ivyc_s1::str__segment(const str& a, unsigned long long lo, unsigned long long hi){
    ivyc_s1::str val;
    val =  __string_segment(a,lo,hi) ;
    return val;
}
ivyc_s1::pretty__token ivyc_s1::vector__pretty__token____value(const vector__pretty__token__& a, unsigned long long i){
    ivyc_s1::pretty__token val;
    val.pair = (bool)___ivy_choose(0,"ret:val",0);
    val.tdepth = (unsigned long long)___ivy_choose(0,"ret:val",0);
    val.second = (unsigned long long)___ivy_choose(0,"ret:val",0);
    val =  (0 <= i && i < a.size()) ? a[i] : val ;
    return val;
}
unsigned long long ivyc_s1::vector__pretty__token____end(const vector__pretty__token__& a){
    unsigned long long val;
    val = (unsigned long long)___ivy_choose(0,"ret:val",0);
    val =  a.size() ;
    return val;
}
unsigned long long ivyc_s1::vector__pos____value(const vector__pos__& a, unsigned long long i){
    unsigned long long val;
    val = (unsigned long long)___ivy_choose(0,"ret:val",0);
    val =  (0 <= i && i < a.size()) ? a[i] : val ;
    return val;
}
unsigned long long ivyc_s1::vector__pos____end(const vector__pos__& a){
    unsigned long long val;
    val = (unsigned long long)___ivy_choose(0,"ret:val",0);
    val =  a.size() ;
    return val;
}
ivyc_s1::pretty__state ivyc_s1::vector__pretty__state____value(const vector__pretty__state__& a, unsigned long long i){
    ivyc_s1::pretty__state val;
    val.begin = (unsigned long long)___ivy_choose(0,"ret:val",0);
    val.total = (unsigned long long)___ivy_choose(0,"ret:val",0);
    val =  (0 <= i && i < a.size()) ? a[i] : val ;
    return val;
}
unsigned long long ivyc_s1::vector__pretty__state____end(const vector__pretty__state__& a){
    unsigned long long val;
    val = (unsigned long long)___ivy_choose(0,"ret:val",0);
    val =  a.size() ;
    return val;
}
ivyc_s1::str ivyc_s1::vector__str____value(const vector__str__& a, unsigned long long i){
    ivyc_s1::str val;
    val =  (0 <= i && i < a.size()) ? a[i] : val ;
    return val;
}
unsigned long long ivyc_s1::vector__str____end(const vector__str__& a){
    unsigned long long val;
    val = (unsigned long long)___ivy_choose(0,"ret:val",0);
    val =  a.size() ;
    return val;
}
ivyc_s1::vector__str__ ivyc_s1::vector__str____segment(const vector__str__& a, unsigned long long lo, unsigned long long hi){
    ivyc_s1::vector__str__ val;
    val =  __array_segment(a,lo,hi) ;
    return val;
}
ivyc_s1::ivy__ident ivyc_s1::vector__ivy__ident____value(const vector__ivy__ident__& a, unsigned long long i){
    ivyc_s1::ivy__ident val;
    val =  (0 <= i && i < a.size()) ? a[i] : val ;
    return val;
}
unsigned long long ivyc_s1::vector__ivy__ident____end(const vector__ivy__ident__& a){
    unsigned long long val;
    val = (unsigned long long)___ivy_choose(0,"ret:val",0);
    val =  a.size() ;
    return val;
}
ivyc_s1::ivy__expr ivyc_s1::vector__ivy__expr____value(const vector__ivy__expr__& a, unsigned long long i){
    ivyc_s1::ivy__expr val;
    val =  (0 <= i && i < a.size()) ? a[i] : val ;
    return val;
}
unsigned long long ivyc_s1::vector__ivy__expr____end(const vector__ivy__expr__& a){
    unsigned long long val;
    val = (unsigned long long)___ivy_choose(0,"ret:val",0);
    val =  a.size() ;
    return val;
}
ivyc_s1::vector__ivy__expr__ ivyc_s1::vector__ivy__expr____segment(const vector__ivy__expr__& a, unsigned long long lo, unsigned long long hi){
    ivyc_s1::vector__ivy__expr__ val;
    val =  __array_segment(a,lo,hi) ;
    return val;
}
ivyc_s1::ivy__stmt ivyc_s1::vector__ivy__stmt____value(const vector__ivy__stmt__& a, unsigned long long i){
    ivyc_s1::ivy__stmt val;
    val =  (0 <= i && i < a.size()) ? a[i] : val ;
    return val;
}
unsigned long long ivyc_s1::vector__ivy__stmt____end(const vector__ivy__stmt__& a){
    unsigned long long val;
    val = (unsigned long long)___ivy_choose(0,"ret:val",0);
    val =  a.size() ;
    return val;
}
ivyc_s1::ivy__prototype_argument ivyc_s1::vector__ivy__prototype_argument____value(const vector__ivy__prototype_argument__& a, unsigned long long i){
    ivyc_s1::ivy__prototype_argument val;
    val.is_input = (bool)___ivy_choose(0,"ret:val",0);
    val.inpos = (unsigned long long)___ivy_choose(0,"ret:val",0);
    val.is_output = (bool)___ivy_choose(0,"ret:val",0);
    val.outpos = (unsigned long long)___ivy_choose(0,"ret:val",0);
    val.is_ref = (bool)___ivy_choose(0,"ret:val",0);
    val.is_const = (bool)___ivy_choose(0,"ret:val",0);
    val =  (0 <= i && i < a.size()) ? a[i] : val ;
    return val;
}
unsigned long long ivyc_s1::vector__ivy__prototype_argument____end(const vector__ivy__prototype_argument__& a){
    unsigned long long val;
    val = (unsigned long long)___ivy_choose(0,"ret:val",0);
    val =  a.size() ;
    return val;
}
ivyc_s1::ivy__decl ivyc_s1::vector__ivy__decl____value(const vector__ivy__decl__& a, unsigned long long i){
    ivyc_s1::ivy__decl val;
    val =  (0 <= i && i < a.size()) ? a[i] : val ;
    return val;
}
unsigned long long ivyc_s1::vector__ivy__decl____end(const vector__ivy__decl__& a){
    unsigned long long val;
    val = (unsigned long long)___ivy_choose(0,"ret:val",0);
    val =  a.size() ;
    return val;
}
ivyc_s1::ivy__error ivyc_s1::vector__ivy__error____value(const vector__ivy__error__& a, unsigned long long i){
    ivyc_s1::ivy__error val;
    val =  (0 <= i && i < a.size()) ? a[i] : val ;
    return val;
}
unsigned long long ivyc_s1::vector__ivy__error____end(const vector__ivy__error__& a){
    unsigned long long val;
    val = (unsigned long long)___ivy_choose(0,"ret:val",0);
    val =  a.size() ;
    return val;
}
ivyc_s1::ivy__expr ivyc_s1::ivy__symeval__value(const ivy__symeval& a, ivyc_s1::ivy__ident i){
    ivyc_s1::ivy__expr val;
    val =  (a.find(i) != a.end()) ? (a.find(i)->second) : val ;
    return val;
}
ivyc_s1::ivy__instantiatedc ivyc_s1::ivy__ident_to_instantiatedc__value(const ivy__ident_to_instantiatedc& a, ivyc_s1::ivy__ident i){
    ivyc_s1::ivy__instantiatedc val;
    val =  (a.find(i) != a.end()) ? (a.find(i)->second) : val ;
    return val;
}
unsigned long long ivyc_s1::ivy__param_map__value(const ivy__param_map& a, ivyc_s1::ivy__ident i){
    unsigned long long val;
    val = (unsigned long long)___ivy_choose(0,"ret:val",0);
    val =  (a.find(i) != a.end()) ? (a.find(i)->second) : val ;
    return val;
}
ivyc_s1::ivy__ident ivyc_s1::ivy__push_pop_ident_set__vec_t__value(const ivy__push_pop_ident_set__vec_t& a, unsigned long long i){
    ivyc_s1::ivy__ident val;
    val =  (0 <= i && i < a.size()) ? a[i] : val ;
    return val;
}
unsigned long long ivyc_s1::ivy__push_pop_ident_set__vec_t__end(const ivy__push_pop_ident_set__vec_t& a){
    unsigned long long val;
    val = (unsigned long long)___ivy_choose(0,"ret:val",0);
    val =  a.size() ;
    return val;
}
ivyc_s1::ivy__type_context__stack_entry ivyc_s1::vector__ivy__type_context__stack_entry____value(const vector__ivy__type_context__stack_entry__& a, unsigned long long i){
    ivyc_s1::ivy__type_context__stack_entry val;
    val.any = (bool)___ivy_choose(0,"ret:val",0);
    val =  (0 <= i && i < a.size()) ? a[i] : val ;
    return val;
}
unsigned long long ivyc_s1::vector__ivy__type_context__stack_entry____end(const vector__ivy__type_context__stack_entry__& a){
    unsigned long long val;
    val = (unsigned long long)___ivy_choose(0,"ret:val",0);
    val =  a.size() ;
    return val;
}
ivyc_s1::cpp__ident ivyc_s1::vector__cpp__ident____value(const vector__cpp__ident__& a, unsigned long long i){
    ivyc_s1::cpp__ident val;
    val =  (0 <= i && i < a.size()) ? a[i] : val ;
    return val;
}
unsigned long long ivyc_s1::vector__cpp__ident____end(const vector__cpp__ident__& a){
    unsigned long long val;
    val = (unsigned long long)___ivy_choose(0,"ret:val",0);
    val =  a.size() ;
    return val;
}
ivyc_s1::cpp__expr ivyc_s1::vector__cpp__expr____value(const vector__cpp__expr__& a, unsigned long long i){
    ivyc_s1::cpp__expr val;
    val =  (0 <= i && i < a.size()) ? a[i] : val ;
    return val;
}
unsigned long long ivyc_s1::vector__cpp__expr____end(const vector__cpp__expr__& a){
    unsigned long long val;
    val = (unsigned long long)___ivy_choose(0,"ret:val",0);
    val =  a.size() ;
    return val;
}
ivyc_s1::vector__cpp__expr__ ivyc_s1::vector__cpp__expr____segment(const vector__cpp__expr__& a, unsigned long long lo, unsigned long long hi){
    ivyc_s1::vector__cpp__expr__ val;
    val =  __array_segment(a,lo,hi) ;
    return val;
}
ivyc_s1::cpp__stmt ivyc_s1::vector__cpp__stmt____value(const vector__cpp__stmt__& a, unsigned long long i){
    ivyc_s1::cpp__stmt val;
    val =  (0 <= i && i < a.size()) ? a[i] : val ;
    return val;
}
unsigned long long ivyc_s1::vector__cpp__stmt____end(const vector__cpp__stmt__& a){
    unsigned long long val;
    val = (unsigned long long)___ivy_choose(0,"ret:val",0);
    val =  a.size() ;
    return val;
}
ivyc_s1::cpp__simpletype ivyc_s1::vector__cpp__simpletype____value(const vector__cpp__simpletype__& a, unsigned long long i){
    ivyc_s1::cpp__simpletype val;
    val.is_const = (bool)___ivy_choose(0,"ret:val",0);
    val.is_ref = (bool)___ivy_choose(0,"ret:val",0);
    val =  (0 <= i && i < a.size()) ? a[i] : val ;
    return val;
}
unsigned long long ivyc_s1::vector__cpp__simpletype____end(const vector__cpp__simpletype__& a){
    unsigned long long val;
    val = (unsigned long long)___ivy_choose(0,"ret:val",0);
    val =  a.size() ;
    return val;
}
ivyc_s1::cpp__decl ivyc_s1::vector__cpp__decl____value(const vector__cpp__decl__& a, unsigned long long i){
    ivyc_s1::cpp__decl val;
    val =  (0 <= i && i < a.size()) ? a[i] : val ;
    return val;
}
unsigned long long ivyc_s1::vector__cpp__decl____end(const vector__cpp__decl__& a){
    unsigned long long val;
    val = (unsigned long long)___ivy_choose(0,"ret:val",0);
    val =  a.size() ;
    return val;
}
ivyc_s1::ivy__expr ivyc_s1::ivy__ident_to_cppclass__value(const ivy__ident_to_cppclass& a, ivyc_s1::ivy__ident i){
    ivyc_s1::ivy__expr val;
    val =  (a.find(i) != a.end()) ? (a.find(i)->second) : val ;
    return val;
}
ivyc_s1::ivy__prototype ivyc_s1::ivy__ident_to_prototype__value(const ivy__ident_to_prototype& a, ivyc_s1::ivy__ident i){
    ivyc_s1::ivy__prototype val;
    val.has_ret = (bool)___ivy_choose(0,"ret:val",0);
    val.ret.is_input = (bool)___ivy_choose(0,"ret:val",0);
    val.ret.inpos = (unsigned long long)___ivy_choose(0,"ret:val",0);
    val.ret.is_output = (bool)___ivy_choose(0,"ret:val",0);
    val.ret.outpos = (unsigned long long)___ivy_choose(0,"ret:val",0);
    val.ret.is_ref = (bool)___ivy_choose(0,"ret:val",0);
    val.ret.is_const = (bool)___ivy_choose(0,"ret:val",0);
    val =  (a.find(i) != a.end()) ? (a.find(i)->second) : val ;
    return val;
}
ivyc_s1::ivy__lvalue_count ivyc_s1::vector__ivy__lvalue_count____value(const vector__ivy__lvalue_count__& a, unsigned long long i){
    ivyc_s1::ivy__lvalue_count val;
    val.cnt = (unsigned long long)___ivy_choose(0,"ret:val",0);
    val =  (0 <= i && i < a.size()) ? a[i] : val ;
    return val;
}
unsigned long long ivyc_s1::vector__ivy__lvalue_count____end(const vector__ivy__lvalue_count__& a){
    unsigned long long val;
    val = (unsigned long long)___ivy_choose(0,"ret:val",0);
    val =  a.size() ;
    return val;
}
ivyc_s1::ivy__access_path ivyc_s1::vector__ivy__access_path____value(const vector__ivy__access_path__& a, unsigned long long i){
    ivyc_s1::ivy__access_path val;
    val =  (0 <= i && i < a.size()) ? a[i] : val ;
    return val;
}
unsigned long long ivyc_s1::vector__ivy__access_path____end(const vector__ivy__access_path__& a){
    unsigned long long val;
    val = (unsigned long long)___ivy_choose(0,"ret:val",0);
    val =  a.size() ;
    return val;
}
void ivyc_s1::ext__ivy__typespec__auto_flat_spec(ivyc_s1::ivy__typespec s, ivy__flatst& st, ivyc_s1::ivy__expr ty){
    {
    }
}
ivyc_s1::ivy__expr ivyc_s1::ext__ivy__get_typed_symbol(ivyc_s1::ivy__expr typing){
    ivyc_s1::ivy__expr res;
    if(((typing).tag == 1)){
        {
            bool loc__0;
    loc__0 = (bool)___ivy_choose(0,"loc:0",15494);
            {
                {
                    ivy__app self__COLON__ivy__app;
                    if (((typing).tag == 1)) self__COLON__ivy__app = ivyc_s1::ivy__expr::unwrap< ivyc_s1::ivy__app >(typing);
                    if(((typing).tag == 1)){
                        loc__0 = ext__ivy__app__is(self__COLON__ivy__app, ivy__verb__colon);
                    }
                    else {
                        loc__0 = ext__ivy__expr__is(typing, ivy__verb__colon);
                    }
                }
                if(loc__0){
                    {
                        ivyc_s1::ivy__expr loc__0;
                        {
                            {
                                ivy__app self__COLON__ivy__app;
                                if (((typing).tag == 1)) self__COLON__ivy__app = ivyc_s1::ivy__expr::unwrap< ivyc_s1::ivy__app >(typing);
                                if(((typing).tag == 1)){
                                    loc__0 = ext__ivy__app__get_arg(self__COLON__ivy__app, 0);
                                }
                                else {
                                    loc__0 = ext__ivy__expr__get_arg(typing, 0);
                                }
                            }
                            res = ext__ivy__get_typed_symbol(loc__0);
                        }
                    }
                }
                else {
                    {
                        bool loc__0;
    loc__0 = (bool)___ivy_choose(0,"loc:0",15493);
                        {
                            {
                                ivy__app self__COLON__ivy__app;
                                if (((typing).tag == 1)) self__COLON__ivy__app = ivyc_s1::ivy__expr::unwrap< ivyc_s1::ivy__app >(typing);
                                if(((typing).tag == 1)){
                                    loc__0 = ext__ivy__app__is(self__COLON__ivy__app, ivy__verb__dot);
                                }
                                else {
                                    loc__0 = ext__ivy__expr__is(typing, ivy__verb__dot);
                                }
                            }
                            if(loc__0){
                                res = typing;
                            }
                            else {
                                {
                                    ivyc_s1::ivy__expr loc__0;
                                    {
                                        {
                                            ivy__app self__COLON__ivy__app;
                                            if (((typing).tag == 1)) self__COLON__ivy__app = ivyc_s1::ivy__expr::unwrap< ivyc_s1::ivy__app >(typing);
                                            if(((typing).tag == 1)){
                                                loc__0 = ext__ivy__app__get_func(self__COLON__ivy__app);
                                            }
                                            else {
                                                loc__0 = ext__ivy__expr__get_func(typing);
                                            }
                                        }
                                        res = ext__ivy__get_typed_symbol(loc__0);
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
    }
    else {
        res = typing;
    }
    return res;
}
void ivyc_s1::ext__ivy__ident_to_declvec__get(const ivy__ident_to_declvec& a, ivyc_s1::ivy__ident x, vector__ivy__decl__& y){
    {

        ivy__ident_to_declvec::const_iterator it = a.find(x);
        if (it != a.end())
            y = it->second;
    }
}
ivyc_s1::ivy__stmt ivyc_s1::ext__ivy__asgn__make(ivyc_s1::ivy__expr x, ivyc_s1::ivy__expr y, ivyc_s1::annot ann){
    ivyc_s1::ivy__stmt res;
    {
        {
            ivy__asgn loc__s;
            {
                loc__s.lhs = x;
                loc__s.rhs = y;
                loc__s.ann = ann;
                res = ivyc_s1::ivy__stmt(0, new ivyc_s1::ivy__stmt::twrap<ivyc_s1::ivy__asgn>(loc__s));
            }
        }
    }
    return res;
}
unsigned long long ivyc_s1::ext__vector__ivy__access_path____domain__next(unsigned long long x){
    unsigned long long y;
    y = (unsigned long long)___ivy_choose(0,"fml:y",0);
    {
        y = (x + 1);
    }
    return y;
}
ivyc_s1::vector__ivy__lvalue_count__ ivyc_s1::ext__vector__ivy__lvalue_count____empty(){
    ivyc_s1::vector__ivy__lvalue_count__ a;
    {
        
    }
    return a;
}
void ivyc_s1::ext__ivy__expr__tup__parse(pstate& st, int prio, vector__ivy__expr__& res){
    if((st.tok == __lit<str>("("))){
        {
            ext__pstate__consume(st);
            {
                ivyc_s1::ivy__expr loc__s;
                {
                    ext__ivy__expr__parse(st, prio, loc__s);
                    ext__vector__ivy__expr____append(res, loc__s);
                    while((st.ok && (st.tok == __lit<str>(",")))){
                        {
                            ext__pstate__consume(st);
                            ext__ivy__expr__parse(st, prio, loc__s);
                            ext__vector__ivy__expr____append(res, loc__s);
                        }
                    }
                    if((st.ok && (st.tok == __lit<str>(")")))){
                        {
                            ext__pstate__consume(st);
                        }
                    }
                    else {
                        st.ok = false;
                    }
                }
            }
        }
    }
    else {
        st.ok = false;
    }
}
ivyc_s1::ivy__decl ivyc_s1::ext__ivy__vardc__typeinfer(const ivy__vardc& s, ivy__typeinferst& st){
    ivyc_s1::ivy__decl res;
    {
        {
            ivy__vardc loc__t;
    loc__t.is_destructor = (bool)___ivy_choose(0,"loc:t",15497);
    loc__t.has_def = (bool)___ivy_choose(0,"loc:t",15497);
            {
                loc__t = ext__ivy__vardc__typeinfer_int(s, st);
                loc__t.ann = s.ann;
                res = ivyc_s1::ivy__decl(3, new ivyc_s1::ivy__decl::twrap<ivyc_s1::ivy__vardc>(loc__t));
            }
        }
    }
    return res;
}
void ivyc_s1::ext__vector__ivy__prototype_argument____append(vector__ivy__prototype_argument__& a, const ivy__prototype_argument& v){
    {

        a.push_back(v);
    }
}
ivyc_s1::cpp__expr ivyc_s1::ext__ivy__make_cpp_call(ivyc_s1::ivy__expr func, const vector__cpp__expr__& args, ivyc_s1::annot ann, ivy__tocppst& st){
    ivyc_s1::cpp__expr res;
    {
        bool loc__0;
    loc__0 = (bool)___ivy_choose(0,"loc:0",15504);
        {
            loc__0 = ext__ivy__func_is_member(func);
            if(loc__0){
                {
                    {
                        ivyc_s1::ivy__expr loc__0;
                        ivyc_s1::ivy__ident loc__1;
                        ivyc_s1::cpp__ident loc__2;
                        {
                            {
                                ivy__app self__COLON__ivy__app;
                                if (((func).tag == 1)) self__COLON__ivy__app = ivyc_s1::ivy__expr::unwrap< ivyc_s1::ivy__app >(func);
                                if(((func).tag == 1)){
                                    loc__0 = ext__ivy__app__get_arg(self__COLON__ivy__app, 0);
                                }
                                else {
                                    loc__0 = ext__ivy__expr__get_arg(func, 0);
                                }
                            }
                            {
                                ivy__symbol self__COLON__ivy__symbol;
                                if (((loc__0).tag == 0)) self__COLON__ivy__symbol = ivyc_s1::ivy__expr::unwrap< ivyc_s1::ivy__symbol >(loc__0);
                                if(((loc__0).tag == 0)){
                                    loc__1 = ext__ivy__symbol__get_name(self__COLON__ivy__symbol);
                                }
                                else {
                                    loc__1 = ext__ivy__expr__get_name(loc__0);
                                }
                            }
                            {
                                ivy__dotident self__COLON__ivy__dotident;
                                if (((loc__1).tag == 2)) self__COLON__ivy__dotident = ivyc_s1::ivy__ident::unwrap< ivyc_s1::ivy__dotident >(loc__1);
                                if(((loc__1).tag == 2)){
                                    loc__2 = ext__ivy__dotident__to_cpp(self__COLON__ivy__dotident, false);
                                }
                                else {
                                    {
                                        ivy__strident self__COLON__ivy__strident;
                                        if (((loc__1).tag == 0)) self__COLON__ivy__strident = ivyc_s1::ivy__ident::unwrap< ivyc_s1::ivy__strident >(loc__1);
                                        if(((loc__1).tag == 0)){
                                            loc__2 = ext__ivy__strident__to_cpp(self__COLON__ivy__strident, false);
                                        }
                                        else {
                                            loc__2 = ext__ivy__ident__to_cpp(loc__1, false);
                                        }
                                    }
                                }
                            }
                            {
                                ivyc_s1::cpp__ident loc__fid;
                                {
                                    loc__fid = loc__2;
                                    {
                                        ivyc_s1::cpp__ident loc__0;
                                        ivyc_s1::annot loc__1;
                                        ivyc_s1::cpp__expr loc__2;
                                        {
                                            {
                                                cpp__dotident self__COLON__cpp__dotident;
                                                if (((loc__fid).tag == 2)) self__COLON__cpp__dotident = ivyc_s1::cpp__ident::unwrap< ivyc_s1::cpp__dotident >(loc__fid);
                                                if(((loc__fid).tag == 2)){
                                                    loc__0 = ext__cpp__dotident__get_member(self__COLON__cpp__dotident);
                                                }
                                                else {
                                                    loc__0 = ext__cpp__ident__get_member(loc__fid);
                                                }
                                            }
                                            {
                                                ivy__app self__COLON__ivy__app;
                                                if (((func).tag == 1)) self__COLON__ivy__app = ivyc_s1::ivy__expr::unwrap< ivyc_s1::ivy__app >(func);
                                                if(((func).tag == 1)){
                                                    loc__1 = ext__ivy__app__get_ann(self__COLON__ivy__app);
                                                }
                                                else {
                                                    {
                                                        ivy__symbol self__COLON__ivy__symbol;
                                                        if (((func).tag == 0)) self__COLON__ivy__symbol = ivyc_s1::ivy__expr::unwrap< ivyc_s1::ivy__symbol >(func);
                                                        if(((func).tag == 0)){
                                                            loc__1 = ext__ivy__symbol__get_ann(self__COLON__ivy__symbol);
                                                        }
                                                        else {
                                                            loc__1 = ext__ivy__expr__get_ann(func);
                                                        }
                                                    }
                                                }
                                            }
                                            loc__2 = ext__cpp__symbol__make(loc__0, loc__1);
                                            {
                                                ivyc_s1::cpp__expr loc__cfunc;
                                                {
                                                    loc__cfunc = loc__2;
                                                    {
                                                        ivyc_s1::ivy__expr loc__0;
                                                        ivyc_s1::ivy__expr loc__1;
                                                        bool loc__2;
    loc__2 = (bool)___ivy_choose(0,"loc:2",15498);
                                                        bool loc__3;
    loc__3 = (bool)___ivy_choose(0,"loc:3",15498);
                                                        {
                                                            {
                                                                ivy__app self__COLON__ivy__app;
                                                                if (((func).tag == 1)) self__COLON__ivy__app = ivyc_s1::ivy__expr::unwrap< ivyc_s1::ivy__app >(func);
                                                                if(((func).tag == 1)){
                                                                    loc__0 = ext__ivy__app__get_arg(self__COLON__ivy__app, 1);
                                                                }
                                                                else {
                                                                    loc__0 = ext__ivy__expr__get_arg(func, 1);
                                                                }
                                                            }
                                                            loc__1 = ext__ivy__get_dom0(loc__0);
                                                            loc__2 = ext__ivy__is_variant_type(loc__1, st);
                                                            loc__3 = ext__ivy__is_cpp_this(vector__cpp__expr____value(args,0));
                                                            if((loc__2 && !loc__3)){
                                                                loc__cfunc = ext__cpp__arrow__make(vector__cpp__expr____value(args,0), loc__cfunc, ann);
                                                            }
                                                            else {
                                                                loc__cfunc = ext__cpp__dot__make(vector__cpp__expr____value(args,0), loc__cfunc, ann);
                                                            }
                                                        }
                                                    }
                                                    res = ext__cpp__app__make(loc__cfunc, vector__cpp__expr____segment(args,1,vector__cpp__expr____end(args)), ann);
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
            else {
                {
                    {
                        ivyc_s1::cpp__expr loc__cfunc;
                        {
                            {
                                ivy__app self__COLON__ivy__app;
                                if (((func).tag == 1)) self__COLON__ivy__app = ivyc_s1::ivy__expr::unwrap< ivyc_s1::ivy__app >(func);
                                if(((func).tag == 1)){
                                    loc__cfunc = ext__ivy__app__to_cpp(self__COLON__ivy__app, st);
                                }
                                else {
                                    {
                                        ivy__symbol self__COLON__ivy__symbol;
                                        if (((func).tag == 0)) self__COLON__ivy__symbol = ivyc_s1::ivy__expr::unwrap< ivyc_s1::ivy__symbol >(func);
                                        if(((func).tag == 0)){
                                            loc__cfunc = ext__ivy__symbol__to_cpp(self__COLON__ivy__symbol, st);
                                        }
                                        else {
                                            loc__cfunc = ext__ivy__expr__to_cpp(func, st);
                                        }
                                    }
                                }
                            }
                            res = ext__cpp__app__make(loc__cfunc, args, ann);
                        }
                    }
                }
            }
        }
    }
    return res;
}
void ivyc_s1::ext__ivy__header__flat(const ivy__header& s, ivy__flatst& st){
    {
        {
            ivy__header loc__t;
            {
                loc__t = ext__ivy__header__flat_int(s, st);
                loc__t.ann = s.ann;
                ext__vector__ivy__decl____append(st.decls, ivyc_s1::ivy__decl(4, new ivyc_s1::ivy__decl::twrap<ivyc_s1::ivy__header>(loc__t)));
            }
        }
    }
}
void ivyc_s1::ext__ivy__instantiatedc__flat(const ivy__instantiatedc& s, ivy__flatst& st){
    {
        {
            ivy__moduledc loc__mod;
            {
                {
                    ivy__ident_to_ident loc__old_prmvals;
                    {
                        loc__old_prmvals = st.prmvals;
                        loc__mod = ext__ivy__instantiatedc__setup(s, st);
                        {
                            ivy__initdc self__COLON__ivy__initdc;
                            if (((loc__mod.body).tag == 11)) self__COLON__ivy__initdc = ivyc_s1::ivy__decl::unwrap< ivyc_s1::ivy__initdc >(loc__mod.body);
                            if(((loc__mod.body).tag == 11)){
                                ext__ivy__initdc__flat(self__COLON__ivy__initdc, st);
                            }
                            else {
                                {
                                    ivy__instancedc self__COLON__ivy__instancedc;
                                    if (((loc__mod.body).tag == 10)) self__COLON__ivy__instancedc = ivyc_s1::ivy__decl::unwrap< ivyc_s1::ivy__instancedc >(loc__mod.body);
                                    if(((loc__mod.body).tag == 10)){
                                        ext__ivy__instancedc__flat(self__COLON__ivy__instancedc, st);
                                    }
                                    else {
                                        {
                                            ivy__objectdc self__COLON__ivy__objectdc;
                                            if (((loc__mod.body).tag == 9)) self__COLON__ivy__objectdc = ivyc_s1::ivy__decl::unwrap< ivyc_s1::ivy__objectdc >(loc__mod.body);
                                            if(((loc__mod.body).tag == 9)){
                                                ext__ivy__objectdc__flat(self__COLON__ivy__objectdc, st);
                                            }
                                            else {
                                                {
                                                    ivy__instantiatedc self__COLON__ivy__instantiatedc;
                                                    if (((loc__mod.body).tag == 8)) self__COLON__ivy__instantiatedc = ivyc_s1::ivy__decl::unwrap< ivyc_s1::ivy__instantiatedc >(loc__mod.body);
                                                    if(((loc__mod.body).tag == 8)){
                                                        ext__ivy__instantiatedc__flat(self__COLON__ivy__instantiatedc, st);
                                                    }
                                                    else {
                                                        {
                                                            ivy__interpdc self__COLON__ivy__interpdc;
                                                            if (((loc__mod.body).tag == 5)) self__COLON__ivy__interpdc = ivyc_s1::ivy__decl::unwrap< ivyc_s1::ivy__interpdc >(loc__mod.body);
                                                            if(((loc__mod.body).tag == 5)){
                                                                ext__ivy__interpdc__flat(self__COLON__ivy__interpdc, st);
                                                            }
                                                            else {
                                                                {
                                                                    ivy__header self__COLON__ivy__header;
                                                                    if (((loc__mod.body).tag == 4)) self__COLON__ivy__header = ivyc_s1::ivy__decl::unwrap< ivyc_s1::ivy__header >(loc__mod.body);
                                                                    if(((loc__mod.body).tag == 4)){
                                                                        ext__ivy__header__flat(self__COLON__ivy__header, st);
                                                                    }
                                                                    else {
                                                                        {
                                                                            ivy__vardc self__COLON__ivy__vardc;
                                                                            if (((loc__mod.body).tag == 3)) self__COLON__ivy__vardc = ivyc_s1::ivy__decl::unwrap< ivyc_s1::ivy__vardc >(loc__mod.body);
                                                                            if(((loc__mod.body).tag == 3)){
                                                                                ext__ivy__vardc__flat(self__COLON__ivy__vardc, st);
                                                                            }
                                                                            else {
                                                                                {
                                                                                    ivy__typedc self__COLON__ivy__typedc;
                                                                                    if (((loc__mod.body).tag == 2)) self__COLON__ivy__typedc = ivyc_s1::ivy__decl::unwrap< ivyc_s1::ivy__typedc >(loc__mod.body);
                                                                                    if(((loc__mod.body).tag == 2)){
                                                                                        ext__ivy__typedc__flat(self__COLON__ivy__typedc, st);
                                                                                    }
                                                                                    else {
                                                                                        {
                                                                                            ivy__groupdc self__COLON__ivy__groupdc;
                                                                                            if (((loc__mod.body).tag == 1)) self__COLON__ivy__groupdc = ivyc_s1::ivy__decl::unwrap< ivyc_s1::ivy__groupdc >(loc__mod.body);
                                                                                            if(((loc__mod.body).tag == 1)){
                                                                                                ext__ivy__groupdc__flat(self__COLON__ivy__groupdc, st);
                                                                                            }
                                                                                            else {
                                                                                                {
                                                                                                    ivy__actdc self__COLON__ivy__actdc;
                                                                                                    if (((loc__mod.body).tag == 0)) self__COLON__ivy__actdc = ivyc_s1::ivy__decl::unwrap< ivyc_s1::ivy__actdc >(loc__mod.body);
                                                                                                    if(((loc__mod.body).tag == 0)){
                                                                                                        ext__ivy__actdc__flat(self__COLON__ivy__actdc, st);
                                                                                                    }
                                                                                                    else {
                                                                                                        ext__ivy__decl__flat(loc__mod.body, st);
                                                                                                    }
                                                                                                }
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                        st.prmvals = loc__old_prmvals;
                    }
                }
            }
        }
    }
}
ivyc_s1::cpp__expr ivyc_s1::ext__cpp__expr__prefix(ivyc_s1::cpp__expr s, ivyc_s1::cpp__ident pref){
    ivyc_s1::cpp__expr res;
    {
    }
    return res;
}
ivyc_s1::cpp__verb ivyc_s1::ext__cpp__verb_from_name(const str& name){
    ivyc_s1::cpp__verb vrb;
    vrb = (cpp__verb)___ivy_choose(0,"fml:vrb",0);
    if(char__is_digit(str__value(name,0))){
        vrb = cpp__verb__numeral;
    }
    else {
        if((str__value(name,0) == 34)){
            vrb = cpp__verb__string;
        }
        else {
            {
                bool loc__0;
    loc__0 = (bool)___ivy_choose(0,"loc:0",15506);
                {
                    loc__0 = ext__cpp__is_logvar_name(name);
                    if(loc__0){
                        {
                            vrb = cpp__verb__logvar;
                        }
                    }
                    else {
                        {
                            vrb = cpp__str_to_verb[name];
                        }
                    }
                }
            }
        }
    }
    return vrb;
}
void ivyc_s1::ext__ivy__typespec__parse(pstate& st, int prio, ivyc_s1::ivy__typespec& res){
    if((st.tok == __lit<str>("struct"))){
        {
            {
                ivy__structspec loc__s;
                {
                    ext__pstate__get_ann(st, loc__s.ann);
                    ext__pstate__consume(st);
                    ext__ivy__curly_tup__parse(st, 1, loc__s.destructors);
                    res = ivyc_s1::ivy__typespec(1, new ivyc_s1::ivy__typespec::twrap<ivyc_s1::ivy__structspec>(loc__s));
                }
            }
        }
    }
    else {
        {
            {
                ivy__enumspec loc__s;
                {
                    ext__pstate__get_ann(st, loc__s.ann);
                    ext__ivy__curly_tup__parse(st, 1, loc__s.constructors);
                    res = ivyc_s1::ivy__typespec(0, new ivyc_s1::ivy__typespec::twrap<ivyc_s1::ivy__enumspec>(loc__s));
                }
            }
        }
    }
}
ivyc_s1::cpp__decl ivyc_s1::ext__ivy__enum_to_cpp(ivyc_s1::cpp__expr name, ivyc_s1::ivy__typespec spec, ivyc_s1::cpp__decl sd, ivy__tocppst& st){
    ivyc_s1::cpp__decl res;
    {
        {
            cpp__enumdecl loc__ed;
            {
                {
                    cpp__app self__COLON__cpp__app;
                    if (((name).tag == 1)) self__COLON__cpp__app = ivyc_s1::cpp__expr::unwrap< ivyc_s1::cpp__app >(name);
                    if(((name).tag == 1)){
                        loc__ed.ann = ext__cpp__app__get_ann(self__COLON__cpp__app);
                    }
                    else {
                        {
                            cpp__symbol self__COLON__cpp__symbol;
                            if (((name).tag == 0)) self__COLON__cpp__symbol = ivyc_s1::cpp__expr::unwrap< ivyc_s1::cpp__symbol >(name);
                            if(((name).tag == 0)){
                                loc__ed.ann = ext__cpp__symbol__get_ann(self__COLON__cpp__symbol);
                            }
                            else {
                                loc__ed.ann = ext__cpp__expr__get_ann(name);
                            }
                        }
                    }
                }
                {
                    str loc__0;
                    {
                        loc__0 = ext__ivy__enum_name(name);
                        loc__ed.name = ext__cpp__symbol__makestr(loc__0, loc__ed.ann);
                    }
                }
                {
                    vector__ivy__expr__ loc__0;
                    {
                        {
                            ivy__structspec self__COLON__ivy__structspec;
                            if (((spec).tag == 1)) self__COLON__ivy__structspec = ivyc_s1::ivy__typespec::unwrap< ivyc_s1::ivy__structspec >(spec);
                            if(((spec).tag == 1)){
                                loc__0 = ext__ivy__structspec__get_elems(self__COLON__ivy__structspec);
                            }
                            else {
                                {
                                    ivy__enumspec self__COLON__ivy__enumspec;
                                    if (((spec).tag == 0)) self__COLON__ivy__enumspec = ivyc_s1::ivy__typespec::unwrap< ivyc_s1::ivy__enumspec >(spec);
                                    if(((spec).tag == 0)){
                                        loc__0 = ext__ivy__enumspec__get_elems(self__COLON__ivy__enumspec);
                                    }
                                    else {
                                        loc__0 = ext__ivy__typespec__get_elems(spec);
                                    }
                                }
                            }
                        }
                        {
                            vector__ivy__expr__ loc__cnstrs;
                            {
                                loc__cnstrs = loc__0;
                                {
                                    unsigned long long loc__idx;
    loc__idx = (unsigned long long)___ivy_choose(0,"loc:idx",15513);
                                    {
                                        loc__idx = vector__ivy__expr____begin(loc__cnstrs);
                                        while((loc__idx < vector__ivy__expr____end(loc__cnstrs))){
                                            {
                                                ivyc_s1::cpp__expr loc__e;
                                                {
                                                    {
                                                        ivy__app self__COLON__ivy__app;
                                                        if (((vector__ivy__expr____value(loc__cnstrs,loc__idx)).tag == 1)) self__COLON__ivy__app = ivyc_s1::ivy__expr::unwrap< ivyc_s1::ivy__app >(vector__ivy__expr____value(loc__cnstrs,loc__idx));
                                                        if(((vector__ivy__expr____value(loc__cnstrs,loc__idx)).tag == 1)){
                                                            loc__e = ext__ivy__app__to_cpp(self__COLON__ivy__app, st);
                                                        }
                                                        else {
                                                            {
                                                                ivy__symbol self__COLON__ivy__symbol;
                                                                if (((vector__ivy__expr____value(loc__cnstrs,loc__idx)).tag == 0)) self__COLON__ivy__symbol = ivyc_s1::ivy__expr::unwrap< ivyc_s1::ivy__symbol >(vector__ivy__expr____value(loc__cnstrs,loc__idx));
                                                                if(((vector__ivy__expr____value(loc__cnstrs,loc__idx)).tag == 0)){
                                                                    loc__e = ext__ivy__symbol__to_cpp(self__COLON__ivy__symbol, st);
                                                                }
                                                                else {
                                                                    loc__e = ext__ivy__expr__to_cpp(vector__ivy__expr____value(loc__cnstrs,loc__idx), st);
                                                                }
                                                            }
                                                        }
                                                    }
                                                    {
                                                        ivyc_s1::cpp__expr loc__0;
                                                        {
                                                            ivyc_s1::cpp__expr __tmp0;
                                                            __tmp0 = loc__e; ext__ivy__member_name(__tmp0);
                                                            loc__0 = __tmp0;
                                                            ext__vector__cpp__expr____append(loc__ed.elems, loc__0);
                                                        }
                                                    }
                                                    loc__idx = ext__vector__ivy__expr____domain__next(loc__idx);
                                                }
                                            }
                                        }
                                        {
                                            cpp__groupdc loc__gd;
                                            {
                                                {
                                                    cpp__app self__COLON__cpp__app;
                                                    if (((name).tag == 1)) self__COLON__cpp__app = ivyc_s1::cpp__expr::unwrap< ivyc_s1::cpp__app >(name);
                                                    if(((name).tag == 1)){
                                                        loc__gd.ann = ext__cpp__app__get_ann(self__COLON__cpp__app);
                                                    }
                                                    else {
                                                        {
                                                            cpp__symbol self__COLON__cpp__symbol;
                                                            if (((name).tag == 0)) self__COLON__cpp__symbol = ivyc_s1::cpp__expr::unwrap< ivyc_s1::cpp__symbol >(name);
                                                            if(((name).tag == 0)){
                                                                loc__gd.ann = ext__cpp__symbol__get_ann(self__COLON__cpp__symbol);
                                                            }
                                                            else {
                                                                loc__gd.ann = ext__cpp__expr__get_ann(name);
                                                            }
                                                        }
                                                    }
                                                }
                                                ext__vector__cpp__decl____append(loc__gd.decls, ivyc_s1::cpp__decl(2, new ivyc_s1::cpp__decl::twrap<ivyc_s1::cpp__enumdecl>(loc__ed)));
                                                ext__vector__cpp__decl____append(loc__gd.decls, sd);
                                                res = ivyc_s1::cpp__decl(7, new ivyc_s1::cpp__decl::twrap<ivyc_s1::cpp__groupdc>(loc__gd));
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
    }
    return res;
}
bool ivyc_s1::ext__ivy__initdc__emitted(const ivy__initdc& s, const ivy__tocppst& st){
    bool res;
    res = (bool)___ivy_choose(0,"fml:res",0);
    {
        res = false;
    }
    return res;
}
ivyc_s1::cpp__expr ivyc_s1::ext__cpp__inttype(ivyc_s1::annot ann){
    ivyc_s1::cpp__expr res;
    {
        {
            ivyc_s1::cpp__ident loc__0;
            {
                loc__0 = ext__cpp__strident__make(__lit<str>("int"));
                res = ext__cpp__namedtype(loc__0, ann);
            }
        }
    }
    return res;
}
void ivyc_s1::ext__ivy__untyped__encode(const ivy__untyped& e, pretty& b){
    {
        ext__pretty__extend(b, __lit<str>("Cannot infer the type of this term:"));
        ext__pretty__extend(b, __lit<str>(" "));
        ext__pretty__newline(b);
        {
            ivy__pi self__COLON__ivy__pi;
            if (((e.e).tag == 3)) self__COLON__ivy__pi = ivyc_s1::ivy__expr::unwrap< ivyc_s1::ivy__pi >(e.e);
            if(((e.e).tag == 3)){
                ext__ivy__pi__encode(self__COLON__ivy__pi, b, 0);
            }
            else {
                {
                    ivy__app self__COLON__ivy__app;
                    if (((e.e).tag == 1)) self__COLON__ivy__app = ivyc_s1::ivy__expr::unwrap< ivyc_s1::ivy__app >(e.e);
                    if(((e.e).tag == 1)){
                        ext__ivy__app__encode(self__COLON__ivy__app, b, 0);
                    }
                    else {
                        {
                            ivy__symbol self__COLON__ivy__symbol;
                            if (((e.e).tag == 0)) self__COLON__ivy__symbol = ivyc_s1::ivy__expr::unwrap< ivyc_s1::ivy__symbol >(e.e);
                            if(((e.e).tag == 0)){
                                ext__ivy__symbol__encode(self__COLON__ivy__symbol, b, 0);
                            }
                            else {
                                ext__ivy__expr__encode(e.e, b, 0);
                            }
                        }
                    }
                }
            }
        }
        {
            ivy__verb loc__0;
    loc__0 = (ivy__verb)___ivy_choose(0,"loc:0",15518);
            {
                {
                    ivy__symbol self__COLON__ivy__symbol;
                    if (((e.t1).tag == 0)) self__COLON__ivy__symbol = ivyc_s1::ivy__expr::unwrap< ivyc_s1::ivy__symbol >(e.t1);
                    if(((e.t1).tag == 0)){
                        loc__0 = ext__ivy__symbol__get_verb(self__COLON__ivy__symbol);
                    }
                    else {
                        loc__0 = ext__ivy__expr__get_verb(e.t1);
                    }
                }
                if(!(loc__0 == ivy__verb__empty)){
                    {
                        ext__pretty__extend(b, __lit<str>(" "));
                        ext__pretty__newline(b);
                        ext__pretty__extend(b, __lit<str>("Incomplete type:"));
                        ext__pretty__extend(b, __lit<str>(" "));
                        {
                            ivy__pi self__COLON__ivy__pi;
                            if (((e.t1).tag == 3)) self__COLON__ivy__pi = ivyc_s1::ivy__expr::unwrap< ivyc_s1::ivy__pi >(e.t1);
                            if(((e.t1).tag == 3)){
                                ext__ivy__pi__encode(self__COLON__ivy__pi, b, 0);
                            }
                            else {
                                {
                                    ivy__app self__COLON__ivy__app;
                                    if (((e.t1).tag == 1)) self__COLON__ivy__app = ivyc_s1::ivy__expr::unwrap< ivyc_s1::ivy__app >(e.t1);
                                    if(((e.t1).tag == 1)){
                                        ext__ivy__app__encode(self__COLON__ivy__app, b, 0);
                                    }
                                    else {
                                        {
                                            ivy__symbol self__COLON__ivy__symbol;
                                            if (((e.t1).tag == 0)) self__COLON__ivy__symbol = ivyc_s1::ivy__expr::unwrap< ivyc_s1::ivy__symbol >(e.t1);
                                            if(((e.t1).tag == 0)){
                                                ext__ivy__symbol__encode(self__COLON__ivy__symbol, b, 0);
                                            }
                                            else {
                                                ext__ivy__expr__encode(e.t1, b, 0);
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
    }
}
ivyc_s1::ivy__stmt ivyc_s1::ext__ivy__sequence__typeinfer(const ivy__sequence& s, ivy__typeinferst& st){
    ivyc_s1::ivy__stmt ress;
    {
        ivy__sequence loc__res;
        {
            loc__res = s;
            if(((loc__res.lhs).tag == 0)){
                {
                    {
                        ivy__asgn self__COLON__ivy__asgn;
                        if (((loc__res.lhs).tag == 0)) self__COLON__ivy__asgn = ivyc_s1::ivy__stmt::unwrap< ivyc_s1::ivy__asgn >(loc__res.lhs);
                        if(((loc__res.lhs).tag == 0)){
                            loc__res.lhs = ext__ivy__asgn__typeinfer_desugar(self__COLON__ivy__asgn, false, st);
                        }
                        else {
                            loc__res.lhs = ext__ivy__stmt__typeinfer_desugar(loc__res.lhs, false, st);
                        }
                    }
                    {
                        vector__ivy__stmt__ loc__vsts;
                        {
                            loc__vsts = ext__ivy__desugar_asgn(loc__res.lhs);
                            {
                                unsigned long long loc__idx;
    loc__idx = (unsigned long long)___ivy_choose(0,"loc:idx",15521);
                                {
                                    loc__idx = vector__ivy__stmt____begin(loc__vsts);
                                    while((loc__idx < vector__ivy__stmt____end(loc__vsts))){
                                        {
                                            {
                                                ivyc_s1::ivy__expr loc__0;
                                                {
                                                    {
                                                        ivy__varst self__COLON__ivy__varst;
                                                        if (((vector__ivy__stmt____value(loc__vsts,loc__idx)).tag == 6)) self__COLON__ivy__varst = ivyc_s1::ivy__stmt::unwrap< ivyc_s1::ivy__varst >(vector__ivy__stmt____value(loc__vsts,loc__idx));
                                                        if(((vector__ivy__stmt____value(loc__vsts,loc__idx)).tag == 6)){
                                                            loc__0 = ext__ivy__varst__get_expr(self__COLON__ivy__varst);
                                                        }
                                                        else {
                                                            loc__0 = ext__ivy__stmt__get_expr(vector__ivy__stmt____value(loc__vsts,loc__idx));
                                                        }
                                                    }
                                                    ext__ivy__type_context__push(st.tc, loc__0);
                                                }
                                            }
                                            loc__idx = ext__vector__ivy__stmt____domain__next(loc__idx);
                                        }
                                    }
                                    {
                                        ivy__whilest self__COLON__ivy__whilest;
                                        if (((loc__res.rhs).tag == 4)) self__COLON__ivy__whilest = ivyc_s1::ivy__stmt::unwrap< ivyc_s1::ivy__whilest >(loc__res.rhs);
                                        if(((loc__res.rhs).tag == 4)){
                                            loc__res.rhs = ext__ivy__whilest__typeinfer(self__COLON__ivy__whilest, st);
                                        }
                                        else {
                                            {
                                                ivy__ifst self__COLON__ivy__ifst;
                                                if (((loc__res.rhs).tag == 3)) self__COLON__ivy__ifst = ivyc_s1::ivy__stmt::unwrap< ivyc_s1::ivy__ifst >(loc__res.rhs);
                                                if(((loc__res.rhs).tag == 3)){
                                                    loc__res.rhs = ext__ivy__ifst__typeinfer(self__COLON__ivy__ifst, st);
                                                }
                                                else {
                                                    {
                                                        ivy__sequence self__COLON__ivy__sequence;
                                                        if (((loc__res.rhs).tag == 1)) self__COLON__ivy__sequence = ivyc_s1::ivy__stmt::unwrap< ivyc_s1::ivy__sequence >(loc__res.rhs);
                                                        if(((loc__res.rhs).tag == 1)){
                                                            loc__res.rhs = ext__ivy__sequence__typeinfer(self__COLON__ivy__sequence, st);
                                                        }
                                                        else {
                                                            {
                                                                ivy__asgn self__COLON__ivy__asgn;
                                                                if (((loc__res.rhs).tag == 0)) self__COLON__ivy__asgn = ivyc_s1::ivy__stmt::unwrap< ivyc_s1::ivy__asgn >(loc__res.rhs);
                                                                if(((loc__res.rhs).tag == 0)){
                                                                    loc__res.rhs = ext__ivy__asgn__typeinfer(self__COLON__ivy__asgn, st);
                                                                }
                                                                else {
                                                                    loc__res.rhs = ext__ivy__stmt__typeinfer(loc__res.rhs, st);
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                    loc__idx = vector__ivy__stmt____begin(loc__vsts);
                                    while((loc__idx < vector__ivy__stmt____end(loc__vsts))){
                                        {
                                            ext__ivy__type_context__pop(st.tc);
                                            loc__idx = ext__vector__ivy__stmt____domain__next(loc__idx);
                                        }
                                    }
                                    ress = ivyc_s1::ivy__stmt(1, new ivyc_s1::ivy__stmt::twrap<ivyc_s1::ivy__sequence>(loc__res));
                                    if((0 < vector__ivy__stmt____end(loc__vsts))){
                                        {
                                            ext__vector__ivy__stmt____append(loc__vsts, ress);
                                            {
                                                ivyc_s1::annot loc__0;
                                                {
                                                    {
                                                        ivy__breakst self__COLON__ivy__breakst;
                                                        if (((loc__res.lhs).tag == 5)) self__COLON__ivy__breakst = ivyc_s1::ivy__stmt::unwrap< ivyc_s1::ivy__breakst >(loc__res.lhs);
                                                        if(((loc__res.lhs).tag == 5)){
                                                            loc__0 = ext__ivy__breakst__get_ann(self__COLON__ivy__breakst);
                                                        }
                                                        else {
                                                            {
                                                                ivy__whilest self__COLON__ivy__whilest;
                                                                if (((loc__res.lhs).tag == 4)) self__COLON__ivy__whilest = ivyc_s1::ivy__stmt::unwrap< ivyc_s1::ivy__whilest >(loc__res.lhs);
                                                                if(((loc__res.lhs).tag == 4)){
                                                                    loc__0 = ext__ivy__whilest__get_ann(self__COLON__ivy__whilest);
                                                                }
                                                                else {
                                                                    {
                                                                        ivy__ifst self__COLON__ivy__ifst;
                                                                        if (((loc__res.lhs).tag == 3)) self__COLON__ivy__ifst = ivyc_s1::ivy__stmt::unwrap< ivyc_s1::ivy__ifst >(loc__res.lhs);
                                                                        if(((loc__res.lhs).tag == 3)){
                                                                            loc__0 = ext__ivy__ifst__get_ann(self__COLON__ivy__ifst);
                                                                        }
                                                                        else {
                                                                            {
                                                                                ivy__skipst self__COLON__ivy__skipst;
                                                                                if (((loc__res.lhs).tag == 2)) self__COLON__ivy__skipst = ivyc_s1::ivy__stmt::unwrap< ivyc_s1::ivy__skipst >(loc__res.lhs);
                                                                                if(((loc__res.lhs).tag == 2)){
                                                                                    loc__0 = ext__ivy__skipst__get_ann(self__COLON__ivy__skipst);
                                                                                }
                                                                                else {
                                                                                    {
                                                                                        ivy__sequence self__COLON__ivy__sequence;
                                                                                        if (((loc__res.lhs).tag == 1)) self__COLON__ivy__sequence = ivyc_s1::ivy__stmt::unwrap< ivyc_s1::ivy__sequence >(loc__res.lhs);
                                                                                        if(((loc__res.lhs).tag == 1)){
                                                                                            loc__0 = ext__ivy__sequence__get_ann(self__COLON__ivy__sequence);
                                                                                        }
                                                                                        else {
                                                                                            {
                                                                                                ivy__asgn self__COLON__ivy__asgn;
                                                                                                if (((loc__res.lhs).tag == 0)) self__COLON__ivy__asgn = ivyc_s1::ivy__stmt::unwrap< ivyc_s1::ivy__asgn >(loc__res.lhs);
                                                                                                if(((loc__res.lhs).tag == 0)){
                                                                                                    loc__0 = ext__ivy__asgn__get_ann(self__COLON__ivy__asgn);
                                                                                                }
                                                                                                else {
                                                                                                    loc__0 = ext__ivy__stmt__get_ann(loc__res.lhs);
                                                                                                }
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                    ress = ext__ivy__sequence__fold_right(loc__vsts, loc__0);
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
            else {
                {
                    {
                        ivy__whilest self__COLON__ivy__whilest;
                        if (((loc__res.lhs).tag == 4)) self__COLON__ivy__whilest = ivyc_s1::ivy__stmt::unwrap< ivyc_s1::ivy__whilest >(loc__res.lhs);
                        if(((loc__res.lhs).tag == 4)){
                            loc__res.lhs = ext__ivy__whilest__typeinfer(self__COLON__ivy__whilest, st);
                        }
                        else {
                            {
                                ivy__ifst self__COLON__ivy__ifst;
                                if (((loc__res.lhs).tag == 3)) self__COLON__ivy__ifst = ivyc_s1::ivy__stmt::unwrap< ivyc_s1::ivy__ifst >(loc__res.lhs);
                                if(((loc__res.lhs).tag == 3)){
                                    loc__res.lhs = ext__ivy__ifst__typeinfer(self__COLON__ivy__ifst, st);
                                }
                                else {
                                    {
                                        ivy__sequence self__COLON__ivy__sequence;
                                        if (((loc__res.lhs).tag == 1)) self__COLON__ivy__sequence = ivyc_s1::ivy__stmt::unwrap< ivyc_s1::ivy__sequence >(loc__res.lhs);
                                        if(((loc__res.lhs).tag == 1)){
                                            loc__res.lhs = ext__ivy__sequence__typeinfer(self__COLON__ivy__sequence, st);
                                        }
                                        else {
                                            {
                                                ivy__asgn self__COLON__ivy__asgn;
                                                if (((loc__res.lhs).tag == 0)) self__COLON__ivy__asgn = ivyc_s1::ivy__stmt::unwrap< ivyc_s1::ivy__asgn >(loc__res.lhs);
                                                if(((loc__res.lhs).tag == 0)){
                                                    loc__res.lhs = ext__ivy__asgn__typeinfer(self__COLON__ivy__asgn, st);
                                                }
                                                else {
                                                    loc__res.lhs = ext__ivy__stmt__typeinfer(loc__res.lhs, st);
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                    if(((loc__res.lhs).tag == 6)){
                        {
                            {
                                ivyc_s1::ivy__expr loc__0;
                                {
                                    {
                                        ivy__varst self__COLON__ivy__varst;
                                        if (((loc__res.lhs).tag == 6)) self__COLON__ivy__varst = ivyc_s1::ivy__stmt::unwrap< ivyc_s1::ivy__varst >(loc__res.lhs);
                                        if(((loc__res.lhs).tag == 6)){
                                            loc__0 = ext__ivy__varst__get_expr(self__COLON__ivy__varst);
                                        }
                                        else {
                                            loc__0 = ext__ivy__stmt__get_expr(loc__res.lhs);
                                        }
                                    }
                                    ext__ivy__type_context__push(st.tc, loc__0);
                                }
                            }
                            {
                                ivy__whilest self__COLON__ivy__whilest;
                                if (((loc__res.rhs).tag == 4)) self__COLON__ivy__whilest = ivyc_s1::ivy__stmt::unwrap< ivyc_s1::ivy__whilest >(loc__res.rhs);
                                if(((loc__res.rhs).tag == 4)){
                                    loc__res.rhs = ext__ivy__whilest__typeinfer(self__COLON__ivy__whilest, st);
                                }
                                else {
                                    {
                                        ivy__ifst self__COLON__ivy__ifst;
                                        if (((loc__res.rhs).tag == 3)) self__COLON__ivy__ifst = ivyc_s1::ivy__stmt::unwrap< ivyc_s1::ivy__ifst >(loc__res.rhs);
                                        if(((loc__res.rhs).tag == 3)){
                                            loc__res.rhs = ext__ivy__ifst__typeinfer(self__COLON__ivy__ifst, st);
                                        }
                                        else {
                                            {
                                                ivy__sequence self__COLON__ivy__sequence;
                                                if (((loc__res.rhs).tag == 1)) self__COLON__ivy__sequence = ivyc_s1::ivy__stmt::unwrap< ivyc_s1::ivy__sequence >(loc__res.rhs);
                                                if(((loc__res.rhs).tag == 1)){
                                                    loc__res.rhs = ext__ivy__sequence__typeinfer(self__COLON__ivy__sequence, st);
                                                }
                                                else {
                                                    {
                                                        ivy__asgn self__COLON__ivy__asgn;
                                                        if (((loc__res.rhs).tag == 0)) self__COLON__ivy__asgn = ivyc_s1::ivy__stmt::unwrap< ivyc_s1::ivy__asgn >(loc__res.rhs);
                                                        if(((loc__res.rhs).tag == 0)){
                                                            loc__res.rhs = ext__ivy__asgn__typeinfer(self__COLON__ivy__asgn, st);
                                                        }
                                                        else {
                                                            loc__res.rhs = ext__ivy__stmt__typeinfer(loc__res.rhs, st);
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                            ext__ivy__type_context__pop(st.tc);
                        }
                    }
                    else {
                        {
                            {
                                ivy__whilest self__COLON__ivy__whilest;
                                if (((loc__res.rhs).tag == 4)) self__COLON__ivy__whilest = ivyc_s1::ivy__stmt::unwrap< ivyc_s1::ivy__whilest >(loc__res.rhs);
                                if(((loc__res.rhs).tag == 4)){
                                    loc__res.rhs = ext__ivy__whilest__typeinfer(self__COLON__ivy__whilest, st);
                                }
                                else {
                                    {
                                        ivy__ifst self__COLON__ivy__ifst;
                                        if (((loc__res.rhs).tag == 3)) self__COLON__ivy__ifst = ivyc_s1::ivy__stmt::unwrap< ivyc_s1::ivy__ifst >(loc__res.rhs);
                                        if(((loc__res.rhs).tag == 3)){
                                            loc__res.rhs = ext__ivy__ifst__typeinfer(self__COLON__ivy__ifst, st);
                                        }
                                        else {
                                            {
                                                ivy__sequence self__COLON__ivy__sequence;
                                                if (((loc__res.rhs).tag == 1)) self__COLON__ivy__sequence = ivyc_s1::ivy__stmt::unwrap< ivyc_s1::ivy__sequence >(loc__res.rhs);
                                                if(((loc__res.rhs).tag == 1)){
                                                    loc__res.rhs = ext__ivy__sequence__typeinfer(self__COLON__ivy__sequence, st);
                                                }
                                                else {
                                                    {
                                                        ivy__asgn self__COLON__ivy__asgn;
                                                        if (((loc__res.rhs).tag == 0)) self__COLON__ivy__asgn = ivyc_s1::ivy__stmt::unwrap< ivyc_s1::ivy__asgn >(loc__res.rhs);
                                                        if(((loc__res.rhs).tag == 0)){
                                                            loc__res.rhs = ext__ivy__asgn__typeinfer(self__COLON__ivy__asgn, st);
                                                        }
                                                        else {
                                                            loc__res.rhs = ext__ivy__stmt__typeinfer(loc__res.rhs, st);
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                    ress = ivyc_s1::ivy__stmt(1, new ivyc_s1::ivy__stmt::twrap<ivyc_s1::ivy__sequence>(loc__res));
                }
            }
        }
    }
    return ress;
}
void ivyc_s1::ext__ivy__add_derived_traits(cpp__structdecl& s){
    {
        {
            cpp__funcdecl loc__0;
    loc__0.ftype.base.is_const = (bool)___ivy_choose(0,"loc:0",15525);
    loc__0.ftype.base.is_ref = (bool)___ivy_choose(0,"loc:0",15525);
    loc__0.ftype.is_const = (bool)___ivy_choose(0,"loc:0",15525);
    loc__0.ftype.has_initializer = (bool)___ivy_choose(0,"loc:0",15525);
    loc__0.has_body = (bool)___ivy_choose(0,"loc:0",15525);
    loc__0.is_static = (bool)___ivy_choose(0,"loc:0",15525);
    loc__0.is_virtual = (bool)___ivy_choose(0,"loc:0",15525);
            {
                loc__0 = ext__ivy__make_cpp_cons(s);
                ext__vector__cpp__decl____append(s.members, ivyc_s1::cpp__decl(4, new ivyc_s1::cpp__decl::twrap<ivyc_s1::cpp__funcdecl>(loc__0)));
            }
        }
        {
            ivyc_s1::cpp__expr loc__0;
            {
                loc__0 = ext__cpp__symbol__makestr(__lit<str>("long long"), s.ann);
                ext__ivy__add_derived_cons(s, loc__0, false);
            }
        }
        cpp__structdecl __tmp1;
        __tmp1 = s; ext__ivy__add_derived_cons(__tmp1, s.super, true);
        s = __tmp1;
        ext__ivy__add_base_conversion(s);
    }
}
ivyc_s1::ivy__typespec ivyc_s1::ext__ivy__typespec__flat(ivyc_s1::ivy__typespec s, ivy__flatst& st){
    ivyc_s1::ivy__typespec res;
    {
    }
    return res;
}
unsigned long long ivyc_s1::ext__vector__cpp__ident____domain__next(unsigned long long x){
    unsigned long long y;
    y = (unsigned long long)___ivy_choose(0,"fml:y",0);
    {
        y = (x + 1);
    }
    return y;
}
void ivyc_s1::ext__cpp__namespacedecl__encode(const cpp__namespacedecl& s, pretty& b, int prio){
    {
        {
            annot_i self__COLON__annot_i;
            if (((s.ann).tag == 0)) self__COLON__annot_i = ivyc_s1::annot::unwrap< ivyc_s1::annot_i >(s.ann);
            if(((s.ann).tag == 0)){
                ext__annot_i__encode(self__COLON__annot_i, b);
            }
            else {
                ext__annot__encode(s.ann, b);
            }
        }
        ext__pretty__nest(b);
        ext__pretty__extend(b, __lit<str>("namespace"));
        ext__pretty__extend(b, __lit<str>(" "));
        {
            cpp__pi self__COLON__cpp__pi;
            if (((s.name).tag == 3)) self__COLON__cpp__pi = ivyc_s1::cpp__expr::unwrap< ivyc_s1::cpp__pi >(s.name);
            if(((s.name).tag == 3)){
                ext__cpp__pi__encode(self__COLON__cpp__pi, b, 0);
            }
            else {
                {
                    cpp__app self__COLON__cpp__app;
                    if (((s.name).tag == 1)) self__COLON__cpp__app = ivyc_s1::cpp__expr::unwrap< ivyc_s1::cpp__app >(s.name);
                    if(((s.name).tag == 1)){
                        ext__cpp__app__encode(self__COLON__cpp__app, b, 0);
                    }
                    else {
                        {
                            cpp__symbol self__COLON__cpp__symbol;
                            if (((s.name).tag == 0)) self__COLON__cpp__symbol = ivyc_s1::cpp__expr::unwrap< ivyc_s1::cpp__symbol >(s.name);
                            if(((s.name).tag == 0)){
                                ext__cpp__symbol__encode(self__COLON__cpp__symbol, b, 0);
                            }
                            else {
                                ext__cpp__expr__encode(s.name, b, 0);
                            }
                        }
                    }
                }
            }
        }
        ext__pretty__unnest(b);
        ext__pretty__newline(b);
        ext__pretty__extend(b, __lit<str>("{"));
        ext__pretty__nest(b);
        {
            unsigned long long loc__idx;
    loc__idx = (unsigned long long)___ivy_choose(0,"loc:idx",15527);
            {
                loc__idx = vector__cpp__decl____begin(s.members);
                while((loc__idx < vector__cpp__decl____end(s.members))){
                    {
                        ext__pretty__newline(b);
                        {
                            cpp__groupdc self__COLON__cpp__groupdc;
                            if (((vector__cpp__decl____value(s.members,loc__idx)).tag == 7)) self__COLON__cpp__groupdc = ivyc_s1::cpp__decl::unwrap< ivyc_s1::cpp__groupdc >(vector__cpp__decl____value(s.members,loc__idx));
                            if(((vector__cpp__decl____value(s.members,loc__idx)).tag == 7)){
                                ext__cpp__groupdc__encode(self__COLON__cpp__groupdc, b, 0);
                            }
                            else {
                                {
                                    cpp__namespacedecl self__COLON__cpp__namespacedecl;
                                    if (((vector__cpp__decl____value(s.members,loc__idx)).tag == 6)) self__COLON__cpp__namespacedecl = ivyc_s1::cpp__decl::unwrap< ivyc_s1::cpp__namespacedecl >(vector__cpp__decl____value(s.members,loc__idx));
                                    if(((vector__cpp__decl____value(s.members,loc__idx)).tag == 6)){
                                        ext__cpp__namespacedecl__encode(self__COLON__cpp__namespacedecl, b, 0);
                                    }
                                    else {
                                        {
                                            cpp__structdecl self__COLON__cpp__structdecl;
                                            if (((vector__cpp__decl____value(s.members,loc__idx)).tag == 5)) self__COLON__cpp__structdecl = ivyc_s1::cpp__decl::unwrap< ivyc_s1::cpp__structdecl >(vector__cpp__decl____value(s.members,loc__idx));
                                            if(((vector__cpp__decl____value(s.members,loc__idx)).tag == 5)){
                                                ext__cpp__structdecl__encode(self__COLON__cpp__structdecl, b, 0);
                                            }
                                            else {
                                                {
                                                    cpp__funcdecl self__COLON__cpp__funcdecl;
                                                    if (((vector__cpp__decl____value(s.members,loc__idx)).tag == 4)) self__COLON__cpp__funcdecl = ivyc_s1::cpp__decl::unwrap< ivyc_s1::cpp__funcdecl >(vector__cpp__decl____value(s.members,loc__idx));
                                                    if(((vector__cpp__decl____value(s.members,loc__idx)).tag == 4)){
                                                        ext__cpp__funcdecl__encode(self__COLON__cpp__funcdecl, b, 0);
                                                    }
                                                    else {
                                                        {
                                                            cpp__vardecl self__COLON__cpp__vardecl;
                                                            if (((vector__cpp__decl____value(s.members,loc__idx)).tag == 3)) self__COLON__cpp__vardecl = ivyc_s1::cpp__decl::unwrap< ivyc_s1::cpp__vardecl >(vector__cpp__decl____value(s.members,loc__idx));
                                                            if(((vector__cpp__decl____value(s.members,loc__idx)).tag == 3)){
                                                                ext__cpp__vardecl__encode(self__COLON__cpp__vardecl, b, 0);
                                                            }
                                                            else {
                                                                {
                                                                    cpp__enumdecl self__COLON__cpp__enumdecl;
                                                                    if (((vector__cpp__decl____value(s.members,loc__idx)).tag == 2)) self__COLON__cpp__enumdecl = ivyc_s1::cpp__decl::unwrap< ivyc_s1::cpp__enumdecl >(vector__cpp__decl____value(s.members,loc__idx));
                                                                    if(((vector__cpp__decl____value(s.members,loc__idx)).tag == 2)){
                                                                        ext__cpp__enumdecl__encode(self__COLON__cpp__enumdecl, b, 0);
                                                                    }
                                                                    else {
                                                                        {
                                                                            cpp__typedecl self__COLON__cpp__typedecl;
                                                                            if (((vector__cpp__decl____value(s.members,loc__idx)).tag == 1)) self__COLON__cpp__typedecl = ivyc_s1::cpp__decl::unwrap< ivyc_s1::cpp__typedecl >(vector__cpp__decl____value(s.members,loc__idx));
                                                                            if(((vector__cpp__decl____value(s.members,loc__idx)).tag == 1)){
                                                                                ext__cpp__typedecl__encode(self__COLON__cpp__typedecl, b, 0);
                                                                            }
                                                                            else {
                                                                                {
                                                                                    cpp__header self__COLON__cpp__header;
                                                                                    if (((vector__cpp__decl____value(s.members,loc__idx)).tag == 0)) self__COLON__cpp__header = ivyc_s1::cpp__decl::unwrap< ivyc_s1::cpp__header >(vector__cpp__decl____value(s.members,loc__idx));
                                                                                    if(((vector__cpp__decl____value(s.members,loc__idx)).tag == 0)){
                                                                                        ext__cpp__header__encode(self__COLON__cpp__header, b, 0);
                                                                                    }
                                                                                    else {
                                                                                        ext__cpp__decl__encode(vector__cpp__decl____value(s.members,loc__idx), b, 0);
                                                                                    }
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                        loc__idx = ext__vector__cpp__decl____domain__next(loc__idx);
                    }
                }
                ext__pretty__unnest(b);
                ext__pretty__newline(b);
                ext__pretty__extend(b, __lit<str>("}"));
                ext__pretty__newline(b);
            }
        }
    }
}
ivyc_s1::ivy__ident ivyc_s1::ext__ivy__strident__prefix(const ivy__strident& s, ivyc_s1::ivy__ident pref){
    ivyc_s1::ivy__ident res;
    {
        res = ext__ivy__dotident__make(pref, s);
    }
    return res;
}
void ivyc_s1::ext__ivy__add_base_conversion(cpp__structdecl& s){
    {
        {
            cpp__funcdecl loc__abc;
    loc__abc.ftype.base.is_const = (bool)___ivy_choose(0,"loc:abc",15531);
    loc__abc.ftype.base.is_ref = (bool)___ivy_choose(0,"loc:abc",15531);
    loc__abc.ftype.is_const = (bool)___ivy_choose(0,"loc:abc",15531);
    loc__abc.ftype.has_initializer = (bool)___ivy_choose(0,"loc:abc",15531);
    loc__abc.has_body = (bool)___ivy_choose(0,"loc:abc",15531);
    loc__abc.is_static = (bool)___ivy_choose(0,"loc:abc",15531);
    loc__abc.is_virtual = (bool)___ivy_choose(0,"loc:abc",15531);
            {
                {
                    str loc__op;
                    {
                        ext__str__extend(loc__op, __lit<str>("operator "));
                        {
                            ivyc_s1::cpp__ident loc__0;
                            str loc__1;
                            {
                                {
                                    cpp__symbol self__COLON__cpp__symbol;
                                    if (((s.super).tag == 0)) self__COLON__cpp__symbol = ivyc_s1::cpp__expr::unwrap< ivyc_s1::cpp__symbol >(s.super);
                                    if(((s.super).tag == 0)){
                                        loc__0 = ext__cpp__symbol__get_name(self__COLON__cpp__symbol);
                                    }
                                    else {
                                        loc__0 = ext__cpp__expr__get_name(s.super);
                                    }
                                }
                                {
                                    cpp__dotident self__COLON__cpp__dotident;
                                    if (((loc__0).tag == 2)) self__COLON__cpp__dotident = ivyc_s1::cpp__ident::unwrap< ivyc_s1::cpp__dotident >(loc__0);
                                    if(((loc__0).tag == 2)){
                                        loc__1 = ext__cpp__dotident__to_str(self__COLON__cpp__dotident);
                                    }
                                    else {
                                        {
                                            cpp__strident self__COLON__cpp__strident;
                                            if (((loc__0).tag == 0)) self__COLON__cpp__strident = ivyc_s1::cpp__ident::unwrap< ivyc_s1::cpp__strident >(loc__0);
                                            if(((loc__0).tag == 0)){
                                                loc__1 = ext__cpp__strident__to_str(self__COLON__cpp__strident);
                                            }
                                            else {
                                                loc__1 = ext__cpp__ident__to_str(loc__0);
                                            }
                                        }
                                    }
                                }
                                ext__str__extend(loc__op, loc__1);
                            }
                        }
                        loc__abc.ftype.base.name = ext__cpp__symbol__makestr(loc__op, s.ann);
                        loc__abc.ftype.is_const = true;
                        loc__abc.has_body = true;
                        {
                            ivyc_s1::cpp__expr loc__0;
                            {
                                loc__0 = ext__cpp__symbol__makestr(__lit<str>("(*this)"), s.ann);
                                loc__abc.body = ext__cpp__retst__make(loc__0, s.ann);
                            }
                        }
                        ext__vector__cpp__decl____append(s.members, ivyc_s1::cpp__decl(4, new ivyc_s1::cpp__decl::twrap<ivyc_s1::cpp__funcdecl>(loc__abc)));
                    }
                }
            }
        }
    }
}
void ivyc_s1::ext__cpp__simpletype__encode(const cpp__simpletype& s, pretty& b, int prio){
    {
        if(s.is_const){
            {
                ext__pretty__extend(b, __lit<str>("const"));
                ext__pretty__extend(b, __lit<str>(" "));
            }
        }
        {
            cpp__pi self__COLON__cpp__pi;
            if (((s._type).tag == 3)) self__COLON__cpp__pi = ivyc_s1::cpp__expr::unwrap< ivyc_s1::cpp__pi >(s._type);
            if(((s._type).tag == 3)){
                ext__cpp__pi__encode(self__COLON__cpp__pi, b, 0);
            }
            else {
                {
                    cpp__app self__COLON__cpp__app;
                    if (((s._type).tag == 1)) self__COLON__cpp__app = ivyc_s1::cpp__expr::unwrap< ivyc_s1::cpp__app >(s._type);
                    if(((s._type).tag == 1)){
                        ext__cpp__app__encode(self__COLON__cpp__app, b, 0);
                    }
                    else {
                        {
                            cpp__symbol self__COLON__cpp__symbol;
                            if (((s._type).tag == 0)) self__COLON__cpp__symbol = ivyc_s1::cpp__expr::unwrap< ivyc_s1::cpp__symbol >(s._type);
                            if(((s._type).tag == 0)){
                                ext__cpp__symbol__encode(self__COLON__cpp__symbol, b, 0);
                            }
                            else {
                                ext__cpp__expr__encode(s._type, b, 0);
                            }
                        }
                    }
                }
            }
        }
        ext__pretty__extend(b, __lit<str>(" "));
        if(s.is_ref){
            {
                ext__pretty__extend(b, __lit<str>("&"));
            }
        }
        {
            cpp__pi self__COLON__cpp__pi;
            if (((s.name).tag == 3)) self__COLON__cpp__pi = ivyc_s1::cpp__expr::unwrap< ivyc_s1::cpp__pi >(s.name);
            if(((s.name).tag == 3)){
                ext__cpp__pi__encode(self__COLON__cpp__pi, b, 99);
            }
            else {
                {
                    cpp__app self__COLON__cpp__app;
                    if (((s.name).tag == 1)) self__COLON__cpp__app = ivyc_s1::cpp__expr::unwrap< ivyc_s1::cpp__app >(s.name);
                    if(((s.name).tag == 1)){
                        ext__cpp__app__encode(self__COLON__cpp__app, b, 99);
                    }
                    else {
                        {
                            cpp__symbol self__COLON__cpp__symbol;
                            if (((s.name).tag == 0)) self__COLON__cpp__symbol = ivyc_s1::cpp__expr::unwrap< ivyc_s1::cpp__symbol >(s.name);
                            if(((s.name).tag == 0)){
                                ext__cpp__symbol__encode(self__COLON__cpp__symbol, b, 99);
                            }
                            else {
                                ext__cpp__expr__encode(s.name, b, 99);
                            }
                        }
                    }
                }
            }
        }
    }
}
ivyc_s1::cpp__expr ivyc_s1::ext__ivy__symbol__to_cpp(const ivy__symbol& s, ivy__tocppst& st){
    ivyc_s1::cpp__expr res;
    {
        cpp__symbol loc__t;
    loc__t.vrb = (cpp__verb)___ivy_choose(0,"loc:t",15532);
        {
            loc__t = ext__ivy__symbol__to_cpp_int(s, st);
            loc__t.ann = s.ann;
            res = ivyc_s1::cpp__expr(0, new ivyc_s1::cpp__expr::twrap<ivyc_s1::cpp__symbol>(loc__t));
        }
    }
    return res;
}
ivyc_s1::pstate ivyc_s1::ext__pstate__make(const str& s){
    ivyc_s1::pstate st;
    st.p = (unsigned long long)___ivy_choose(0,"fml:st",0);
    st.ann.line = (unsigned long long)___ivy_choose(0,"fml:st",0);
    st.ok = (bool)___ivy_choose(0,"fml:st",0);
    {
        st.b = s;
        st.p = str__begin(s);
        st.ok = true;
        ext__pstate__consume(st);
    }
    return st;
}
void ivyc_s1::ext__ivy__strident__encode(const ivy__strident& s, pretty& b, int prio){
    {
        ext__pretty__extend(b, s.val);
        if(false){
            if((0 < vector__ivy__ident____end(s.subscrs))){
                {
                    ext__pretty__extend(b, __lit<str>("< "));
                    {
                        unsigned long long loc__idx;
    loc__idx = (unsigned long long)___ivy_choose(0,"loc:idx",15533);
                        {
                            loc__idx = vector__ivy__ident____begin(s.subscrs);
                            while((loc__idx < vector__ivy__ident____end(s.subscrs))){
                                {
                                    if((0 < loc__idx)){
                                        {
                                            ext__pretty__extend(b, __lit<str>(","));
                                        }
                                    }
                                    {
                                        ivy__dotident self__COLON__ivy__dotident;
                                        if (((vector__ivy__ident____value(s.subscrs,loc__idx)).tag == 2)) self__COLON__ivy__dotident = ivyc_s1::ivy__ident::unwrap< ivyc_s1::ivy__dotident >(vector__ivy__ident____value(s.subscrs,loc__idx));
                                        if(((vector__ivy__ident____value(s.subscrs,loc__idx)).tag == 2)){
                                            ext__ivy__dotident__encode(self__COLON__ivy__dotident, b, 0);
                                        }
                                        else {
                                            {
                                                ivy__numident self__COLON__ivy__numident;
                                                if (((vector__ivy__ident____value(s.subscrs,loc__idx)).tag == 1)) self__COLON__ivy__numident = ivyc_s1::ivy__ident::unwrap< ivyc_s1::ivy__numident >(vector__ivy__ident____value(s.subscrs,loc__idx));
                                                if(((vector__ivy__ident____value(s.subscrs,loc__idx)).tag == 1)){
                                                    ext__ivy__numident__encode(self__COLON__ivy__numident, b, 0);
                                                }
                                                else {
                                                    {
                                                        ivy__strident self__COLON__ivy__strident;
                                                        if (((vector__ivy__ident____value(s.subscrs,loc__idx)).tag == 0)) self__COLON__ivy__strident = ivyc_s1::ivy__ident::unwrap< ivyc_s1::ivy__strident >(vector__ivy__ident____value(s.subscrs,loc__idx));
                                                        if(((vector__ivy__ident____value(s.subscrs,loc__idx)).tag == 0)){
                                                            ext__ivy__strident__encode(self__COLON__ivy__strident, b, 0);
                                                        }
                                                        else {
                                                            ext__ivy__ident__encode(vector__ivy__ident____value(s.subscrs,loc__idx), b, 0);
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                    loc__idx = ext__vector__ivy__ident____domain__next(loc__idx);
                                }
                            }
                            ext__pretty__extend(b, __lit<str>(" >"));
                        }
                    }
                }
            }
        }
        else {
            {
                unsigned long long loc__idx;
    loc__idx = (unsigned long long)___ivy_choose(0,"loc:idx",15534);
                {
                    loc__idx = vector__ivy__ident____begin(s.subscrs);
                    while((loc__idx < vector__ivy__ident____end(s.subscrs))){
                        {
                            ext__pretty__extend(b, __lit<str>("["));
                            {
                                ivy__dotident self__COLON__ivy__dotident;
                                if (((vector__ivy__ident____value(s.subscrs,loc__idx)).tag == 2)) self__COLON__ivy__dotident = ivyc_s1::ivy__ident::unwrap< ivyc_s1::ivy__dotident >(vector__ivy__ident____value(s.subscrs,loc__idx));
                                if(((vector__ivy__ident____value(s.subscrs,loc__idx)).tag == 2)){
                                    ext__ivy__dotident__encode(self__COLON__ivy__dotident, b, 0);
                                }
                                else {
                                    {
                                        ivy__numident self__COLON__ivy__numident;
                                        if (((vector__ivy__ident____value(s.subscrs,loc__idx)).tag == 1)) self__COLON__ivy__numident = ivyc_s1::ivy__ident::unwrap< ivyc_s1::ivy__numident >(vector__ivy__ident____value(s.subscrs,loc__idx));
                                        if(((vector__ivy__ident____value(s.subscrs,loc__idx)).tag == 1)){
                                            ext__ivy__numident__encode(self__COLON__ivy__numident, b, 0);
                                        }
                                        else {
                                            {
                                                ivy__strident self__COLON__ivy__strident;
                                                if (((vector__ivy__ident____value(s.subscrs,loc__idx)).tag == 0)) self__COLON__ivy__strident = ivyc_s1::ivy__ident::unwrap< ivyc_s1::ivy__strident >(vector__ivy__ident____value(s.subscrs,loc__idx));
                                                if(((vector__ivy__ident____value(s.subscrs,loc__idx)).tag == 0)){
                                                    ext__ivy__strident__encode(self__COLON__ivy__strident, b, 0);
                                                }
                                                else {
                                                    ext__ivy__ident__encode(vector__ivy__ident____value(s.subscrs,loc__idx), b, 0);
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                            ext__pretty__extend(b, __lit<str>("]"));
                            loc__idx = ext__vector__ivy__ident____domain__next(loc__idx);
                        }
                    }
                }
            }
        }
    }
}
void ivyc_s1::ext__cpp__breakst__encode(const cpp__breakst& s, pretty& b, int prio){
    {
        {
            annot_i self__COLON__annot_i;
            if (((s.ann).tag == 0)) self__COLON__annot_i = ivyc_s1::annot::unwrap< ivyc_s1::annot_i >(s.ann);
            if(((s.ann).tag == 0)){
                ext__annot_i__encode(self__COLON__annot_i, b);
            }
            else {
                ext__annot__encode(s.ann, b);
            }
        }
        if((1 < prio)){
            {
                ext__pretty__nest(b);
                ext__pretty__extend(b, __lit<str>("{"));
                ext__pretty__newline(b);
            }
        }
        ext__cpp__breakst__encode_int(s, b, prio);
        if((1 < prio)){
            {
                ext__pretty__unnest(b);
                ext__pretty__newline(b);
                ext__pretty__extend(b, __lit<str>("}"));
            }
        }
    }
}
ivyc_s1::ivy__expr ivyc_s1::ext__ivy__includedc__get_expr(const ivy__includedc& s){
    ivyc_s1::ivy__expr res;
    res = s.file;
    return res;
}
ivyc_s1::ivy__verb ivyc_s1::ext__ivy__app__app_verb(const ivy__app& s){
    ivyc_s1::ivy__verb res;
    res = (ivy__verb)___ivy_choose(0,"fml:res",0);
    {
        ivy__symbol self__COLON__ivy__symbol;
        if (((s.func).tag == 0)) self__COLON__ivy__symbol = ivyc_s1::ivy__expr::unwrap< ivyc_s1::ivy__symbol >(s.func);
        if(((s.func).tag == 0)){
            res = ext__ivy__symbol__get_verb(self__COLON__ivy__symbol);
        }
        else {
            res = ext__ivy__expr__get_verb(s.func);
        }
    }
    return res;
}
ivyc_s1::ivy__not_first_order ivyc_s1::ext__ivy__not_first_order__make(ivyc_s1::ivy__expr e, ivyc_s1::ivy__expr t1){
    ivyc_s1::ivy__not_first_order res;
    {
        res.e = e;
        res.t1 = t1;
    }
    return res;
}
ivyc_s1::vector__pretty__token__ ivyc_s1::ext__vector__pretty__token____empty(){
    ivyc_s1::vector__pretty__token__ a;
    {
        
    }
    return a;
}
void ivyc_s1::ext__ivy__decl__record_prototypes(ivyc_s1::ivy__decl s, ivy__tocppst& st){
    {
    }
}
ivyc_s1::ivy__ident ivyc_s1::ext__ivy__ident__flat(ivyc_s1::ivy__ident s, bool rhs, const ivy__flatst& st){
    ivyc_s1::ivy__ident res;
    res = s;
    return res;
}
void ivyc_s1::ext__ivy__type_context__set(ivy__type_context& s, ivyc_s1::ivy__expr typing){
    {
        {
            ivyc_s1::ivy__expr loc__0;
            ivyc_s1::ivy__ident loc__1;
            ivyc_s1::ivy__expr loc__2;
            {
                {
                    ivy__app self__COLON__ivy__app;
                    if (((typing).tag == 1)) self__COLON__ivy__app = ivyc_s1::ivy__expr::unwrap< ivyc_s1::ivy__app >(typing);
                    if(((typing).tag == 1)){
                        loc__0 = ext__ivy__app__get_arg(self__COLON__ivy__app, 0);
                    }
                    else {
                        loc__0 = ext__ivy__expr__get_arg(typing, 0);
                    }
                }
                {
                    ivy__symbol self__COLON__ivy__symbol;
                    if (((loc__0).tag == 0)) self__COLON__ivy__symbol = ivyc_s1::ivy__expr::unwrap< ivyc_s1::ivy__symbol >(loc__0);
                    if(((loc__0).tag == 0)){
                        loc__1 = ext__ivy__symbol__get_name(self__COLON__ivy__symbol);
                    }
                    else {
                        loc__1 = ext__ivy__expr__get_name(loc__0);
                    }
                }
                {
                    ivy__app self__COLON__ivy__app;
                    if (((typing).tag == 1)) self__COLON__ivy__app = ivyc_s1::ivy__expr::unwrap< ivyc_s1::ivy__app >(typing);
                    if(((typing).tag == 1)){
                        loc__2 = ext__ivy__app__get_arg(self__COLON__ivy__app, 1);
                    }
                    else {
                        loc__2 = ext__ivy__expr__get_arg(typing, 1);
                    }
                }
                ext__ivy__symeval__set(s.m, loc__1, loc__2);
            }
        }
    }
}
ivyc_s1::ivy__verb ivyc_s1::ext__ivy__expr__app_verb(ivyc_s1::ivy__expr s){
    ivyc_s1::ivy__verb res;
    res = (ivy__verb)___ivy_choose(0,"fml:res",0);
    {
    }
    return res;
}
ivyc_s1::ivy__wrong_number_params ivyc_s1::ext__ivy__wrong_number_params__make(unsigned long long n){
    ivyc_s1::ivy__wrong_number_params res;
    res.n = (unsigned long long)___ivy_choose(0,"fml:res",0);
    {
        res.n = n;
    }
    return res;
}
void ivyc_s1::ext__pretty__extend(pretty& self, const str& string){
    {
        pretty__token loc__tok;
    loc__tok.pair = (bool)___ivy_choose(0,"loc:tok",15536);
    loc__tok.tdepth = (unsigned long long)___ivy_choose(0,"loc:tok",15536);
    loc__tok.second = (unsigned long long)___ivy_choose(0,"loc:tok",15536);
        {
            loc__tok.pair = false;
            loc__tok.tdepth = self.depth;
            loc__tok.first = string;
            if(((string == self.whitespace))){
                {
                    loc__tok.pair = true;
                    loc__tok.second = str__end(string);
                }
            }
            else {
                ext__pretty__add_length(self, str__end(string), vector__pretty__token____end(self.tokens));
            }
            ext__vector__pretty__token____append(self.tokens, loc__tok);
            self.st.total = (self.st.total + str__end(string));
        }
    }
}
ivyc_s1::cpp__expr ivyc_s1::ext__cpp__symbol__make(ivyc_s1::cpp__ident name, ivyc_s1::annot ann){
    ivyc_s1::cpp__expr res;
    {
        cpp__symbol loc__s;
    loc__s.vrb = (cpp__verb)___ivy_choose(0,"loc:s",15537);
        {
            loc__s.name = name;
            loc__s.vrb = cpp__verb__none;
            loc__s.ann = ann;
            res = ivyc_s1::cpp__expr(0, new ivyc_s1::cpp__expr::twrap<ivyc_s1::cpp__symbol>(loc__s));
        }
    }
    return res;
}
ivyc_s1::vector__cpp__expr__ ivyc_s1::ext__cpp__app__get_args(const cpp__app& s){
    ivyc_s1::vector__cpp__expr__ res;
    res = s.args;
    return res;
}
ivyc_s1::ivy__ident_to_ident ivyc_s1::ext__ivy__prm_map(const vector__ivy__expr__& fml, const vector__ivy__expr__& act, ivyc_s1::annot ann){
    ivyc_s1::ivy__ident_to_ident res;
    if(!(vector__ivy__expr____end(fml) == vector__ivy__expr____end(act))){
        {
            {
                ivy__wrong_number_params loc__0;
    loc__0.n = (unsigned long long)___ivy_choose(0,"loc:0",15538);
                {
                    loc__0 = ext__ivy__wrong_number_params__make(vector__ivy__expr____end(fml));
                    ext__ivy__report_error(ivyc_s1::ivy__error(7, new ivyc_s1::ivy__error::twrap<ivyc_s1::ivy__wrong_number_params>(loc__0)), ann);
                }
            }
        }
    }
    else {
        {
            unsigned long long loc__idx;
    loc__idx = (unsigned long long)___ivy_choose(0,"loc:idx",15540);
            {
                loc__idx = vector__ivy__expr____begin(fml);
                while((loc__idx < vector__ivy__expr____end(fml))){
                    {
                        {
                            ivyc_s1::ivy__ident loc__0;
                            ivyc_s1::ivy__ident loc__1;
                            {
                                {
                                    ivy__symbol self__COLON__ivy__symbol;
                                    if (((vector__ivy__expr____value(fml,loc__idx)).tag == 0)) self__COLON__ivy__symbol = ivyc_s1::ivy__expr::unwrap< ivyc_s1::ivy__symbol >(vector__ivy__expr____value(fml,loc__idx));
                                    if(((vector__ivy__expr____value(fml,loc__idx)).tag == 0)){
                                        loc__0 = ext__ivy__symbol__get_name(self__COLON__ivy__symbol);
                                    }
                                    else {
                                        loc__0 = ext__ivy__expr__get_name(vector__ivy__expr____value(fml,loc__idx));
                                    }
                                }
                                {
                                    ivy__symbol self__COLON__ivy__symbol;
                                    if (((vector__ivy__expr____value(act,loc__idx)).tag == 0)) self__COLON__ivy__symbol = ivyc_s1::ivy__expr::unwrap< ivyc_s1::ivy__symbol >(vector__ivy__expr____value(act,loc__idx));
                                    if(((vector__ivy__expr____value(act,loc__idx)).tag == 0)){
                                        loc__1 = ext__ivy__symbol__get_name(self__COLON__ivy__symbol);
                                    }
                                    else {
                                        loc__1 = ext__ivy__expr__get_name(vector__ivy__expr____value(act,loc__idx));
                                    }
                                }
                                ext__ivy__ident_to_ident__set(res, loc__0, loc__1);
                            }
                        }
                        loc__idx = ext__vector__ivy__expr____domain__next(loc__idx);
                    }
                }
            }
        }
    }
    return res;
}
ivyc_s1::ivy__expr ivyc_s1::ext__ivy__get_dom0(ivyc_s1::ivy__expr ty){
    ivyc_s1::ivy__expr res;
    {
        {
            ivy__app self__COLON__ivy__app;
            if (((ty).tag == 1)) self__COLON__ivy__app = ivyc_s1::ivy__expr::unwrap< ivyc_s1::ivy__app >(ty);
            if(((ty).tag == 1)){
                res = ext__ivy__app__get_arg(self__COLON__ivy__app, 0);
            }
            else {
                res = ext__ivy__expr__get_arg(ty, 0);
            }
        }
        {
            bool loc__0;
    loc__0 = (bool)___ivy_choose(0,"loc:0",15542);
            {
                {
                    ivy__app self__COLON__ivy__app;
                    if (((res).tag == 1)) self__COLON__ivy__app = ivyc_s1::ivy__expr::unwrap< ivyc_s1::ivy__app >(res);
                    if(((res).tag == 1)){
                        loc__0 = ext__ivy__app__is(self__COLON__ivy__app, ivy__verb__times);
                    }
                    else {
                        loc__0 = ext__ivy__expr__is(res, ivy__verb__times);
                    }
                }
                {
                    bool loc__b;
    loc__b = (bool)___ivy_choose(0,"loc:b",15541);
                    {
                        loc__b = loc__0;
                        while(loc__b){
                            {
                                {
                                    ivy__app self__COLON__ivy__app;
                                    if (((res).tag == 1)) self__COLON__ivy__app = ivyc_s1::ivy__expr::unwrap< ivyc_s1::ivy__app >(res);
                                    if(((res).tag == 1)){
                                        res = ext__ivy__app__get_arg(self__COLON__ivy__app, 0);
                                    }
                                    else {
                                        res = ext__ivy__expr__get_arg(res, 0);
                                    }
                                }
                                {
                                    ivy__app self__COLON__ivy__app;
                                    if (((res).tag == 1)) self__COLON__ivy__app = ivyc_s1::ivy__expr::unwrap< ivyc_s1::ivy__app >(res);
                                    if(((res).tag == 1)){
                                        loc__b = ext__ivy__app__is(self__COLON__ivy__app, ivy__verb__times);
                                    }
                                    else {
                                        loc__b = ext__ivy__expr__is(res, ivy__verb__times);
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
    }
    return res;
}
void ivyc_s1::ext__annot_i__encode(const annot_i& s, pretty& b){
    {
        if((0 < vector__str____end(s.comments))){
            {
                ext__pretty__newline(b);
            }
        }
        {
            unsigned long long loc__idx;
    loc__idx = (unsigned long long)___ivy_choose(0,"loc:idx",15543);
            {
                loc__idx = vector__str____begin(s.comments);
                while((loc__idx < vector__str____end(s.comments))){
                    {
                        ext__pretty__extend(b, (b.cppstyle ? __lit<str>("//") : __lit<str>("#")));
                        ext__pretty__extend(b, vector__str____value(s.comments,loc__idx));
                        ext__pretty__newline(b);
                        loc__idx = ext__vector__str____domain__next(loc__idx);
                    }
                }
            }
        }
    }
}
ivyc_s1::ivy__stmt ivyc_s1::ext__ivy__whilest__flat(const ivy__whilest& s, ivy__flatst& st){
    ivyc_s1::ivy__stmt res;
    {
        {
            ivy__whilest loc__t;
            {
                loc__t = ext__ivy__whilest__flat_int(s, st);
                loc__t.ann = s.ann;
                res = ivyc_s1::ivy__stmt(4, new ivyc_s1::ivy__stmt::twrap<ivyc_s1::ivy__whilest>(loc__t));
            }
        }
    }
    return res;
}
bool ivyc_s1::ext__ivy__expr__has_numident(ivyc_s1::ivy__expr e){
    bool res;
    res = (bool)___ivy_choose(0,"fml:res",0);
    res = false;
    return res;
}
void ivyc_s1::ext__vector__ivy__access_path____append(vector__ivy__access_path__& a, const ivy__access_path& v){
    {

        a.push_back(v);
    }
}
bool ivyc_s1::ext__ivy__ident_set__mem(const ivy__ident_set& a, ivyc_s1::ivy__ident x){
    bool res;
    res = (bool)___ivy_choose(0,"fml:res",0);
    {

        ivy__ident_set::const_iterator it = a.find(x);
        res = (it != a.end());
    }
    return res;
}
unsigned long long ivyc_s1::ext__vector__cpp__expr____domain__next(unsigned long long x){
    unsigned long long y;
    y = (unsigned long long)___ivy_choose(0,"fml:y",0);
    {
        y = (x + 1);
    }
    return y;
}
unsigned long long ivyc_s1::ext__vector__cpp__simpletype____domain__next(unsigned long long x){
    unsigned long long y;
    y = (unsigned long long)___ivy_choose(0,"fml:y",0);
    {
        y = (x + 1);
    }
    return y;
}
ivyc_s1::ivy__strident ivyc_s1::ext__ivy__dotident__get_last(const ivy__dotident& s){
    ivyc_s1::ivy__strident res;
    res = s.member;
    return res;
}
void ivyc_s1::ext__cpp__sequence__encode(const cpp__sequence& s, pretty& b, int prio){
    {
        {
            annot_i self__COLON__annot_i;
            if (((s.ann).tag == 0)) self__COLON__annot_i = ivyc_s1::annot::unwrap< ivyc_s1::annot_i >(s.ann);
            if(((s.ann).tag == 0)){
                ext__annot_i__encode(self__COLON__annot_i, b);
            }
            else {
                ext__annot__encode(s.ann, b);
            }
        }
        if((0 < prio)){
            {
                ext__pretty__nest(b);
                ext__pretty__extend(b, __lit<str>("{"));
                ext__pretty__newline(b);
            }
        }
        ext__cpp__sequence__encode_int(s, b, prio);
        if((0 < prio)){
            {
                ext__pretty__unnest(b);
                ext__pretty__newline(b);
                ext__pretty__extend(b, __lit<str>("}"));
            }
        }
    }
}
ivyc_s1::vector__ivy__expr__ ivyc_s1::ext__ivy__expr__get_args(ivyc_s1::ivy__expr s){
    ivyc_s1::vector__ivy__expr__ res;
    {
    }
    return res;
}
ivyc_s1::annot ivyc_s1::ext__cpp__vardecl__get_ann(const cpp__vardecl& d){
    ivyc_s1::annot res;
    res = d.ann;
    return res;
}
ivyc_s1::ivy__stmt ivyc_s1::ext__ivy__sequence__fold_right(const vector__ivy__stmt__& args, ivyc_s1::annot ann){
    ivyc_s1::ivy__stmt res;
    if((0 < vector__ivy__stmt____end(args))){
        {
            unsigned long long loc__0;
    loc__0 = (unsigned long long)___ivy_choose(0,"loc:0",15546);
            {
                loc__0 = ext__vector__ivy__stmt____domain__prev(vector__ivy__stmt____end(args));
                {
                    unsigned long long loc__idx;
    loc__idx = (unsigned long long)___ivy_choose(0,"loc:idx",15545);
                    {
                        loc__idx = loc__0;
                        res = vector__ivy__stmt____value(args,loc__idx);
                        while((0 < loc__idx)){
                            {
                                loc__idx = ext__vector__ivy__stmt____domain__prev(loc__idx);
                                res = ext__ivy__sequence__make(vector__ivy__stmt____value(args,loc__idx), res, ann);
                            }
                        }
                    }
                }
            }
        }
    }
    return res;
}
ivyc_s1::vector__ivy__expr__ ivyc_s1::ext__vector__ivy__expr____empty(){
    ivyc_s1::vector__ivy__expr__ a;
    {
        
    }
    return a;
}
ivyc_s1::ivy__expr ivyc_s1::ext__ivy__symbol__reduce(const ivy__symbol& s, const ivy__symeval& smap){
    ivyc_s1::ivy__expr res;
    {
        {
            ivyc_s1::ivy__expr loc__e;
            {
                loc__e = ivyc_s1::ivy__expr(0, new ivyc_s1::ivy__expr::twrap<ivyc_s1::ivy__symbol>(s));
                ivyc_s1::ivy__expr __tmp2;
                __tmp2 = loc__e; ext__ivy__symeval__get(smap, s.name, __tmp2);
                res = __tmp2;
            }
        }
    }
    return res;
}
ivyc_s1::ivy__stmt ivyc_s1::ext__ivy__decl__get_body(ivyc_s1::ivy__decl s){
    ivyc_s1::ivy__stmt res;
    {
    }
    return res;
}
bool ivyc_s1::ext__cpp__app__is(const cpp__app& s, cpp__verb vrb){
    bool res;
    res = (bool)___ivy_choose(0,"fml:res",0);
    {
        {
            cpp__verb loc__0;
    loc__0 = (cpp__verb)___ivy_choose(0,"loc:0",15548);
            {
                {
                    cpp__symbol self__COLON__cpp__symbol;
                    if (((s.func).tag == 0)) self__COLON__cpp__symbol = ivyc_s1::cpp__expr::unwrap< ivyc_s1::cpp__symbol >(s.func);
                    if(((s.func).tag == 0)){
                        loc__0 = ext__cpp__symbol__get_verb(self__COLON__cpp__symbol);
                    }
                    else {
                        loc__0 = ext__cpp__expr__get_verb(s.func);
                    }
                }
                res = (loc__0 == vrb);
            }
        }
    }
    return res;
}
ivyc_s1::ivy__strident ivyc_s1::ext__ivy__ident__get_last(ivyc_s1::ivy__ident s){
    ivyc_s1::ivy__strident res;
    {
    }
    return res;
}
void ivyc_s1::ext__ivy__typespec__to_destrs(ivyc_s1::ivy__typespec s, ivy__flatst& st, ivyc_s1::ivy__expr ty){
    {
    }
}
ivyc_s1::vector__ivy__expr__ ivyc_s1::ext__ivy__app__get_args(const ivy__app& s){
    ivyc_s1::vector__ivy__expr__ res;
    res = s.args;
    return res;
}
ivyc_s1::cpp__decl ivyc_s1::ext__ivy__header__to_cpp(const ivy__header& s, ivy__tocppst& st){
    ivyc_s1::cpp__decl res;
    {
        cpp__header loc__t;
        {
            loc__t = ext__ivy__header__to_cpp_int(s, st);
            loc__t.ann = s.ann;
            res = ivyc_s1::cpp__decl(0, new ivyc_s1::cpp__decl::twrap<ivyc_s1::cpp__header>(loc__t));
        }
    }
    return res;
}
ivyc_s1::annot ivyc_s1::ext__ivy__skipst__get_ann(const ivy__skipst& s){
    ivyc_s1::annot res;
    res = s.ann;
    return res;
}
bool ivyc_s1::ext__ivy__local_tracker__mem(const ivy__local_tracker& s, ivyc_s1::ivy__ident id){
    bool res;
    res = (bool)___ivy_choose(0,"fml:res",0);
    {
        res = ext__ivy__push_pop_ident_set__mem(s.map, id);
    }
    return res;
}
void ivyc_s1::ext__ivy__add_eq_pred(cpp__structdecl& s){
    {
        {
            cpp__funcdecl loc__eq;
    loc__eq.ftype.base.is_const = (bool)___ivy_choose(0,"loc:eq",15562);
    loc__eq.ftype.base.is_ref = (bool)___ivy_choose(0,"loc:eq",15562);
    loc__eq.ftype.is_const = (bool)___ivy_choose(0,"loc:eq",15562);
    loc__eq.ftype.has_initializer = (bool)___ivy_choose(0,"loc:eq",15562);
    loc__eq.has_body = (bool)___ivy_choose(0,"loc:eq",15562);
    loc__eq.is_static = (bool)___ivy_choose(0,"loc:eq",15562);
    loc__eq.is_virtual = (bool)___ivy_choose(0,"loc:eq",15562);
            {
                loc__eq.ftype.base._type = ext__cpp__symbol__makestr(__lit<str>("ivy::native_bool"), s.ann);
                loc__eq.ftype.base.name = ext__cpp__symbol__makestr(__lit<str>("operator =="), s.ann);
                loc__eq.ftype.is_const = true;
                {
                    cpp__simpletype loc__eqarg0;
    loc__eqarg0.is_const = (bool)___ivy_choose(0,"loc:eqarg0",15561);
    loc__eqarg0.is_ref = (bool)___ivy_choose(0,"loc:eqarg0",15561);
                    {
                        loc__eqarg0._type = s.name;
                        loc__eqarg0.is_const = true;
                        loc__eqarg0.is_ref = true;
                        loc__eqarg0.name = ext__cpp__symbol__makestr(__lit<str>("other"), loc__eq.ann);
                        ext__vector__cpp__simpletype____append(loc__eq.ftype.args, loc__eqarg0);
                        loc__eq.has_body = true;
                        {
                            vector__cpp__expr__ loc__eqs;
                            {
                                {
                                    unsigned long long loc__idx;
    loc__idx = (unsigned long long)___ivy_choose(0,"loc:idx",15559);
                                    {
                                        loc__idx = vector__cpp__decl____begin(s.members);
                                        while((loc__idx < vector__cpp__decl____end(s.members))){
                                            {
                                                ivyc_s1::cpp__decl loc__d;
                                                {
                                                    loc__d = vector__cpp__decl____value(s.members,loc__idx);
                                                    if(((loc__d).tag == 3)){
                                                        {
                                                            {
                                                                ivyc_s1::cpp__expr loc__0;
                                                                {
                                                                    {
                                                                        cpp__vardecl self__COLON__cpp__vardecl;
                                                                        if (((loc__d).tag == 3)) self__COLON__cpp__vardecl = ivyc_s1::cpp__decl::unwrap< ivyc_s1::cpp__vardecl >(loc__d);
                                                                        if(((loc__d).tag == 3)){
                                                                            loc__0 = ext__cpp__vardecl__get_name(self__COLON__cpp__vardecl);
                                                                        }
                                                                        else {
                                                                            loc__0 = ext__cpp__decl__get_name(loc__d);
                                                                        }
                                                                    }
                                                                    {
                                                                        ivyc_s1::cpp__expr loc__f0;
                                                                        {
                                                                            loc__f0 = loc__0;
                                                                            {
                                                                                ivyc_s1::cpp__expr loc__0;
                                                                                ivyc_s1::cpp__expr loc__1;
                                                                                {
                                                                                    {
                                                                                        cpp__vardecl self__COLON__cpp__vardecl;
                                                                                        if (((loc__d).tag == 3)) self__COLON__cpp__vardecl = ivyc_s1::cpp__decl::unwrap< ivyc_s1::cpp__vardecl >(loc__d);
                                                                                        if(((loc__d).tag == 3)){
                                                                                            loc__0 = ext__cpp__vardecl__get_name(self__COLON__cpp__vardecl);
                                                                                        }
                                                                                        else {
                                                                                            loc__0 = ext__cpp__decl__get_name(loc__d);
                                                                                        }
                                                                                    }
                                                                                    loc__1 = ext__cpp__dot__make(loc__eqarg0.name, loc__0, s.ann);
                                                                                    {
                                                                                        ivyc_s1::cpp__expr loc__f1;
                                                                                        {
                                                                                            loc__f1 = loc__1;
                                                                                            {
                                                                                                ivyc_s1::cpp__expr loc__0;
                                                                                                {
                                                                                                    loc__0 = ext__cpp__equals__make(loc__f0, loc__f1, s.ann);
                                                                                                    {
                                                                                                        ivyc_s1::cpp__expr loc__e;
                                                                                                        {
                                                                                                            loc__e = loc__0;
                                                                                                            ext__vector__cpp__expr____append(loc__eqs, loc__e);
                                                                                                        }
                                                                                                    }
                                                                                                }
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                    loc__idx = ext__vector__cpp__decl____domain__next(loc__idx);
                                                }
                                            }
                                        }
                                        {
                                            ivyc_s1::cpp__expr loc__0;
                                            {
                                                loc__0 = ext__cpp__symbol__makestr(__lit<str>("true"), s.ann);
                                                {
                                                    ivyc_s1::cpp__expr loc__retexp;
                                                    {
                                                        loc__retexp = loc__0;
                                                        if((0 < vector__cpp__expr____end(loc__eqs))){
                                                            {
                                                                loc__retexp = ext__cpp__and__fold_left(loc__eqs, s.ann);
                                                            }
                                                        }
                                                        loc__eq.body = ext__cpp__retst__make(loc__retexp, s.ann);
                                                        ext__vector__cpp__decl____append(s.members, ivyc_s1::cpp__decl(4, new ivyc_s1::cpp__decl::twrap<ivyc_s1::cpp__funcdecl>(loc__eq)));
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
    }
}
ivyc_s1::ivy__stmt ivyc_s1::ext__ivy__stmt__typeinfer(ivyc_s1::ivy__stmt s, ivy__typeinferst& st){
    ivyc_s1::ivy__stmt res;
    res = s;
    return res;
}
void ivyc_s1::ext__ivy__error__encode(ivyc_s1::ivy__error e, pretty& b){
    ext__pretty__extend(b, __lit<str>("unknown error"));
}
ivyc_s1::ivy__expr ivyc_s1::ext__ivy__stmt__get_expr(ivyc_s1::ivy__stmt s){
    ivyc_s1::ivy__expr res;
    {
    }
    return res;
}
void ivyc_s1::ext__ivy__decl__defd(ivyc_s1::ivy__decl s, ivy__flatst& st){
    {
    }
}
ivyc_s1::ivy__expr ivyc_s1::ext__ivy__expr__curry(ivyc_s1::ivy__expr ty){
    ivyc_s1::ivy__expr res;
    {
        ivyc_s1::ivy__expr loc__0;
        vector__ivy__expr__ loc__1;
        {
            {
                ivy__app self__COLON__ivy__app;
                if (((ty).tag == 1)) self__COLON__ivy__app = ivyc_s1::ivy__expr::unwrap< ivyc_s1::ivy__app >(ty);
                if(((ty).tag == 1)){
                    loc__0 = ext__ivy__app__get_arg(self__COLON__ivy__app, 0);
                }
                else {
                    loc__0 = ext__ivy__expr__get_arg(ty, 0);
                }
            }
            loc__1 = ext__ivy__times__unfold_left(loc__0);
            {
                vector__ivy__expr__ loc__dom;
                {
                    loc__dom = loc__1;
                    {
                        vector__ivy__expr__ loc__dom2;
                        {
                            loc__dom2 = vector__ivy__expr____segment(loc__dom,1,vector__ivy__expr____end(loc__dom));
                            {
                                ivyc_s1::ivy__expr loc__0;
                                {
                                    {
                                        ivy__app self__COLON__ivy__app;
                                        if (((ty).tag == 1)) self__COLON__ivy__app = ivyc_s1::ivy__expr::unwrap< ivyc_s1::ivy__app >(ty);
                                        if(((ty).tag == 1)){
                                            loc__0 = ext__ivy__app__get_arg(self__COLON__ivy__app, 1);
                                        }
                                        else {
                                            loc__0 = ext__ivy__expr__get_arg(ty, 1);
                                        }
                                    }
                                    {
                                        ivyc_s1::ivy__expr loc__rng;
                                        {
                                            loc__rng = loc__0;
                                            {
                                                ivyc_s1::ivy__expr loc__0;
                                                ivyc_s1::annot loc__1;
                                                ivyc_s1::ivy__expr loc__2;
                                                ivyc_s1::annot loc__3;
                                                ivyc_s1::ivy__expr loc__4;
                                                {
                                                    {
                                                        ivy__app self__COLON__ivy__app;
                                                        if (((ty).tag == 1)) self__COLON__ivy__app = ivyc_s1::ivy__expr::unwrap< ivyc_s1::ivy__app >(ty);
                                                        if(((ty).tag == 1)){
                                                            loc__0 = ext__ivy__app__get_arg(self__COLON__ivy__app, 0);
                                                        }
                                                        else {
                                                            loc__0 = ext__ivy__expr__get_arg(ty, 0);
                                                        }
                                                    }
                                                    {
                                                        ivy__app self__COLON__ivy__app;
                                                        if (((loc__0).tag == 1)) self__COLON__ivy__app = ivyc_s1::ivy__expr::unwrap< ivyc_s1::ivy__app >(loc__0);
                                                        if(((loc__0).tag == 1)){
                                                            loc__1 = ext__ivy__app__get_ann(self__COLON__ivy__app);
                                                        }
                                                        else {
                                                            {
                                                                ivy__symbol self__COLON__ivy__symbol;
                                                                if (((loc__0).tag == 0)) self__COLON__ivy__symbol = ivyc_s1::ivy__expr::unwrap< ivyc_s1::ivy__symbol >(loc__0);
                                                                if(((loc__0).tag == 0)){
                                                                    loc__1 = ext__ivy__symbol__get_ann(self__COLON__ivy__symbol);
                                                                }
                                                                else {
                                                                    loc__1 = ext__ivy__expr__get_ann(loc__0);
                                                                }
                                                            }
                                                        }
                                                    }
                                                    loc__2 = ext__ivy__times__fold_left(loc__dom2, loc__1);
                                                    {
                                                        ivy__app self__COLON__ivy__app;
                                                        if (((ty).tag == 1)) self__COLON__ivy__app = ivyc_s1::ivy__expr::unwrap< ivyc_s1::ivy__app >(ty);
                                                        if(((ty).tag == 1)){
                                                            loc__3 = ext__ivy__app__get_ann(self__COLON__ivy__app);
                                                        }
                                                        else {
                                                            {
                                                                ivy__symbol self__COLON__ivy__symbol;
                                                                if (((ty).tag == 0)) self__COLON__ivy__symbol = ivyc_s1::ivy__expr::unwrap< ivyc_s1::ivy__symbol >(ty);
                                                                if(((ty).tag == 0)){
                                                                    loc__3 = ext__ivy__symbol__get_ann(self__COLON__ivy__symbol);
                                                                }
                                                                else {
                                                                    loc__3 = ext__ivy__expr__get_ann(ty);
                                                                }
                                                            }
                                                        }
                                                    }
                                                    loc__4 = ext__ivy__arrow__make(loc__2, loc__rng, loc__3);
                                                    {
                                                        ivyc_s1::ivy__expr loc__ty2;
                                                        {
                                                            loc__ty2 = ((vector__ivy__expr____end(loc__dom2) == 0) ? loc__rng : loc__4);
                                                            {
                                                                ivyc_s1::annot loc__0;
                                                                ivyc_s1::annot loc__1;
                                                                {
                                                                    {
                                                                        ivy__app self__COLON__ivy__app;
                                                                        if (((ty).tag == 1)) self__COLON__ivy__app = ivyc_s1::ivy__expr::unwrap< ivyc_s1::ivy__app >(ty);
                                                                        if(((ty).tag == 1)){
                                                                            loc__0 = ext__ivy__app__get_ann(self__COLON__ivy__app);
                                                                        }
                                                                        else {
                                                                            {
                                                                                ivy__symbol self__COLON__ivy__symbol;
                                                                                if (((ty).tag == 0)) self__COLON__ivy__symbol = ivyc_s1::ivy__expr::unwrap< ivyc_s1::ivy__symbol >(ty);
                                                                                if(((ty).tag == 0)){
                                                                                    loc__0 = ext__ivy__symbol__get_ann(self__COLON__ivy__symbol);
                                                                                }
                                                                                else {
                                                                                    loc__0 = ext__ivy__expr__get_ann(ty);
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                    {
                                                                        annot_i self__COLON__annot_i;
                                                                        if (((loc__0).tag == 0)) self__COLON__annot_i = ivyc_s1::annot::unwrap< ivyc_s1::annot_i >(loc__0);
                                                                        if(((loc__0).tag == 0)){
                                                                            loc__1 = ext__annot_i__strip(self__COLON__annot_i);
                                                                        }
                                                                        else {
                                                                            loc__1 = ext__annot__strip(loc__0);
                                                                        }
                                                                    }
                                                                    res = ext__ivy__arrow__make(vector__ivy__expr____value(loc__dom,0), loc__ty2, loc__1);
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
    }
    return res;
}
void ivyc_s1::ext__cpp__vardecl__encode(const cpp__vardecl& s, pretty& b, int prio){
    {
        {
            annot_i self__COLON__annot_i;
            if (((s.ann).tag == 0)) self__COLON__annot_i = ivyc_s1::annot::unwrap< ivyc_s1::annot_i >(s.ann);
            if(((s.ann).tag == 0)){
                ext__annot_i__encode(self__COLON__annot_i, b);
            }
            else {
                ext__annot__encode(s.ann, b);
            }
        }
        ext__pretty__nest(b);
        ext__cpp__simpletype__encode(s.vtype, b, 0);
        ext__pretty__extend(b, __lit<str>(";"));
        ext__pretty__unnest(b);
        ext__pretty__newline(b);
    }
}
bool ivyc_s1::ext__ivy__expr__occurs(ivyc_s1::ivy__expr e, ivyc_s1::ivy__ident n){
    bool res;
    res = (bool)___ivy_choose(0,"fml:res",0);
    res = false;
    return res;
}
void ivyc_s1::ext__vector__ivy__lvalue_count____set(vector__ivy__lvalue_count__& a, unsigned long long x, const ivy__lvalue_count& y){
    {

        if (0 <= x && x < (unsigned long long)a.size())
            a[x] = y;
    }
}
void ivyc_s1::ext__vector__pretty__state____append(vector__pretty__state__& a, const pretty__state& v){
    {

        a.push_back(v);
    }
}
bool ivyc_s1::ext__ivy__file__exist(const str& fname){
    bool ok;
    ok = (bool)___ivy_choose(0,"fml:ok",0);


    std::string fn;
    for (size_t i = 0; i < fname.size(); i++)
    fn.push_back(fname[i]);
    ok = ::access(fn.c_str(),F_OK) != -1;
    return ok;
}
void ivyc_s1::imp__ivy__decost__typeinf_show_str(const str& s){
    {
    }
}
ivyc_s1::ivy__expr ivyc_s1::ext__ivy__symbol__make(ivyc_s1::ivy__ident name, ivyc_s1::annot ann){
    ivyc_s1::ivy__expr res;
    {
        ivy__symbol loc__s;
    loc__s.vrb = (ivy__verb)___ivy_choose(0,"loc:s",15565);
        {
            loc__s.name = name;
            loc__s.vrb = ivy__verb__none;
            loc__s.ann = ann;
            res = ivyc_s1::ivy__expr(0, new ivyc_s1::ivy__expr::twrap<ivyc_s1::ivy__symbol>(loc__s));
        }
    }
    return res;
}
void ivyc_s1::ext__ivy__tocppst__wrap_stmt(ivy__tocppst& s, ivyc_s1::cpp__stmt code, ivyc_s1::annot ann, ivyc_s1::cpp__stmt& res){
    {
        ext__ivy__tocppst__add_stmt(s, code);
        ext__ivy__tocppst__get_code(s, ann, res);
    }
}
bool ivyc_s1::ext__ivy__is_logvar_name(const str& name){
    bool res;
    res = (bool)___ivy_choose(0,"fml:res",0);
    if(char__is_capital(str__value(name,0))){
        {
            res = true;
            {
                unsigned long long loc__0;
    loc__0 = (unsigned long long)___ivy_choose(0,"loc:0",15567);
                {
                    loc__0 = ext__pos__next(str__begin(name));
                    {
                        unsigned long long loc__idx;
    loc__idx = (unsigned long long)___ivy_choose(0,"loc:idx",15566);
                        {
                            loc__idx = loc__0;
                            while((res && (loc__idx < str__end(name)))){
                                res = char__is_digit(str__value(name,loc__idx));
                            }
                            loc__idx = ext__pos__next(loc__idx);
                        }
                    }
                }
            }
        }
    }
    return res;
}
ivyc_s1::ivy__ident ivyc_s1::ext__ivy__dotident__get_namesp(const ivy__dotident& s){
    ivyc_s1::ivy__ident res;
    {
        res = s.namesp;
    }
    return res;
}
void ivyc_s1::ext__cpp__functype__encode(const cpp__functype& s, pretty& b, int prio){
    {
        ext__cpp__simpletype__encode(s.base, b, 0);
        ext__pretty__extend(b, __lit<str>(" "));
        if((0 < vector__cpp__simpletype____end(s.args))){
            {
                ext__cpp__simpletype__tup__encode(s.args, b, 0);
            }
        }
        else {
            {
                ext__pretty__extend(b, __lit<str>("()"));
            }
        }
        if(s.is_const){
            {
                ext__pretty__extend(b, __lit<str>(" "));
                ext__pretty__extend(b, __lit<str>("const"));
            }
        }
        if(s.has_initializer){
            {
                ext__pretty__extend(b, __lit<str>(" "));
                ext__pretty__extend(b, __lit<str>(":"));
                ext__pretty__extend(b, __lit<str>(" "));
                {
                    cpp__pi self__COLON__cpp__pi;
                    if (((s.initializer).tag == 3)) self__COLON__cpp__pi = ivyc_s1::cpp__expr::unwrap< ivyc_s1::cpp__pi >(s.initializer);
                    if(((s.initializer).tag == 3)){
                        ext__cpp__pi__encode(self__COLON__cpp__pi, b, 0);
                    }
                    else {
                        {
                            cpp__app self__COLON__cpp__app;
                            if (((s.initializer).tag == 1)) self__COLON__cpp__app = ivyc_s1::cpp__expr::unwrap< ivyc_s1::cpp__app >(s.initializer);
                            if(((s.initializer).tag == 1)){
                                ext__cpp__app__encode(self__COLON__cpp__app, b, 0);
                            }
                            else {
                                {
                                    cpp__symbol self__COLON__cpp__symbol;
                                    if (((s.initializer).tag == 0)) self__COLON__cpp__symbol = ivyc_s1::cpp__expr::unwrap< ivyc_s1::cpp__symbol >(s.initializer);
                                    if(((s.initializer).tag == 0)){
                                        ext__cpp__symbol__encode(self__COLON__cpp__symbol, b, 0);
                                    }
                                    else {
                                        ext__cpp__expr__encode(s.initializer, b, 0);
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
    }
}
void ivyc_s1::ext__ivy__write_file(const str& name, const str& buf){
    {
        bool loc__0;
    loc__0 = (bool)___ivy_choose(0,"loc:0",15571);
        {
            loc__0 = ext__ivy__file__write(name, buf);
            {
                bool loc__ok;
    loc__ok = (bool)___ivy_choose(0,"loc:ok",15570);
                {
                    loc__ok = loc__0;
                    if(!loc__ok){
                        {
                            {
                                ivyc_s1::annot loc__ann;
                                {
                                    {
                                        ivy__cannot_write loc__0;
                                        {
                                            loc__0 = ext__ivy__cannot_write__make(name);
                                            ext__ivy__report_error(ivyc_s1::ivy__error(5, new ivyc_s1::ivy__error::twrap<ivyc_s1::ivy__cannot_write>(loc__0)), loc__ann);
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
    }
}
ivyc_s1::cpp__expr ivyc_s1::ext__ivy__make_from_string(ivyc_s1::cpp__expr ty, ivyc_s1::cpp__expr arg, ivyc_s1::annot ann){
    ivyc_s1::cpp__expr res;
    {
        {
            cpp__strident loc__id;
            {
                loc__id.val = __lit<str>("from_str");
                {
                    ivyc_s1::cpp__ident loc__0;
                    {
                        {
                            cpp__symbol self__COLON__cpp__symbol;
                            if (((ty).tag == 0)) self__COLON__cpp__symbol = ivyc_s1::cpp__expr::unwrap< ivyc_s1::cpp__symbol >(ty);
                            if(((ty).tag == 0)){
                                loc__0 = ext__cpp__symbol__get_name(self__COLON__cpp__symbol);
                            }
                            else {
                                loc__0 = ext__cpp__expr__get_name(ty);
                            }
                        }
                        ext__vector__cpp__ident____append(loc__id.subscrs, loc__0);
                    }
                }
                {
                    ivyc_s1::cpp__ident loc__0;
                    ivyc_s1::cpp__ident loc__1;
                    {
                        loc__0 = ext__cpp__strident__make(__lit<str>("ivy"));
                        loc__1 = ext__cpp__dotident__make(loc__0, loc__id);
                        {
                            ivyc_s1::cpp__ident loc__name;
                            {
                                loc__name = loc__1;
                                {
                                    ivyc_s1::cpp__expr loc__0;
                                    {
                                        loc__0 = ext__cpp__symbol__make(loc__name, ann);
                                        res = ext__cpp__app__make1(loc__0, arg, ann);
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
    }
    return res;
}
ivyc_s1::cpp__stmt ivyc_s1::ext__ivy__ifst__to_cpp(const ivy__ifst& s, ivy__tocppst& st){
    ivyc_s1::cpp__stmt resd;
    {
        {
            cpp__ifst loc__res;
            {
                loc__res.ann = s.ann;
                {
                    ivy__app self__COLON__ivy__app;
                    if (((s.cond).tag == 1)) self__COLON__ivy__app = ivyc_s1::ivy__expr::unwrap< ivyc_s1::ivy__app >(s.cond);
                    if(((s.cond).tag == 1)){
                        loc__res.cond = ext__ivy__app__to_cpp(self__COLON__ivy__app, st);
                    }
                    else {
                        {
                            ivy__symbol self__COLON__ivy__symbol;
                            if (((s.cond).tag == 0)) self__COLON__ivy__symbol = ivyc_s1::ivy__expr::unwrap< ivyc_s1::ivy__symbol >(s.cond);
                            if(((s.cond).tag == 0)){
                                loc__res.cond = ext__ivy__symbol__to_cpp(self__COLON__ivy__symbol, st);
                            }
                            else {
                                loc__res.cond = ext__ivy__expr__to_cpp(s.cond, st);
                            }
                        }
                    }
                }
                {
                    vector__cpp__stmt__ loc__code;
                    {
                        loc__code = st.code;
                        st.code = ext__vector__cpp__stmt____empty();
                        {
                            ivy__varst self__COLON__ivy__varst;
                            if (((s.thenst).tag == 6)) self__COLON__ivy__varst = ivyc_s1::ivy__stmt::unwrap< ivyc_s1::ivy__varst >(s.thenst);
                            if(((s.thenst).tag == 6)){
                                loc__res.thenst = ext__ivy__varst__to_cpp(self__COLON__ivy__varst, st);
                            }
                            else {
                                {
                                    ivy__whilest self__COLON__ivy__whilest;
                                    if (((s.thenst).tag == 4)) self__COLON__ivy__whilest = ivyc_s1::ivy__stmt::unwrap< ivyc_s1::ivy__whilest >(s.thenst);
                                    if(((s.thenst).tag == 4)){
                                        loc__res.thenst = ext__ivy__whilest__to_cpp(self__COLON__ivy__whilest, st);
                                    }
                                    else {
                                        {
                                            ivy__ifst self__COLON__ivy__ifst;
                                            if (((s.thenst).tag == 3)) self__COLON__ivy__ifst = ivyc_s1::ivy__stmt::unwrap< ivyc_s1::ivy__ifst >(s.thenst);
                                            if(((s.thenst).tag == 3)){
                                                loc__res.thenst = ext__ivy__ifst__to_cpp(self__COLON__ivy__ifst, st);
                                            }
                                            else {
                                                {
                                                    ivy__skipst self__COLON__ivy__skipst;
                                                    if (((s.thenst).tag == 2)) self__COLON__ivy__skipst = ivyc_s1::ivy__stmt::unwrap< ivyc_s1::ivy__skipst >(s.thenst);
                                                    if(((s.thenst).tag == 2)){
                                                        loc__res.thenst = ext__ivy__skipst__to_cpp(self__COLON__ivy__skipst, st);
                                                    }
                                                    else {
                                                        {
                                                            ivy__sequence self__COLON__ivy__sequence;
                                                            if (((s.thenst).tag == 1)) self__COLON__ivy__sequence = ivyc_s1::ivy__stmt::unwrap< ivyc_s1::ivy__sequence >(s.thenst);
                                                            if(((s.thenst).tag == 1)){
                                                                loc__res.thenst = ext__ivy__sequence__to_cpp(self__COLON__ivy__sequence, st);
                                                            }
                                                            else {
                                                                {
                                                                    ivy__asgn self__COLON__ivy__asgn;
                                                                    if (((s.thenst).tag == 0)) self__COLON__ivy__asgn = ivyc_s1::ivy__stmt::unwrap< ivyc_s1::ivy__asgn >(s.thenst);
                                                                    if(((s.thenst).tag == 0)){
                                                                        loc__res.thenst = ext__ivy__asgn__to_cpp(self__COLON__ivy__asgn, st);
                                                                    }
                                                                    else {
                                                                        loc__res.thenst = ext__ivy__stmt__to_cpp(s.thenst, st);
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                        {
                            ivy__varst self__COLON__ivy__varst;
                            if (((s.elsest).tag == 6)) self__COLON__ivy__varst = ivyc_s1::ivy__stmt::unwrap< ivyc_s1::ivy__varst >(s.elsest);
                            if(((s.elsest).tag == 6)){
                                loc__res.elsest = ext__ivy__varst__to_cpp(self__COLON__ivy__varst, st);
                            }
                            else {
                                {
                                    ivy__whilest self__COLON__ivy__whilest;
                                    if (((s.elsest).tag == 4)) self__COLON__ivy__whilest = ivyc_s1::ivy__stmt::unwrap< ivyc_s1::ivy__whilest >(s.elsest);
                                    if(((s.elsest).tag == 4)){
                                        loc__res.elsest = ext__ivy__whilest__to_cpp(self__COLON__ivy__whilest, st);
                                    }
                                    else {
                                        {
                                            ivy__ifst self__COLON__ivy__ifst;
                                            if (((s.elsest).tag == 3)) self__COLON__ivy__ifst = ivyc_s1::ivy__stmt::unwrap< ivyc_s1::ivy__ifst >(s.elsest);
                                            if(((s.elsest).tag == 3)){
                                                loc__res.elsest = ext__ivy__ifst__to_cpp(self__COLON__ivy__ifst, st);
                                            }
                                            else {
                                                {
                                                    ivy__skipst self__COLON__ivy__skipst;
                                                    if (((s.elsest).tag == 2)) self__COLON__ivy__skipst = ivyc_s1::ivy__stmt::unwrap< ivyc_s1::ivy__skipst >(s.elsest);
                                                    if(((s.elsest).tag == 2)){
                                                        loc__res.elsest = ext__ivy__skipst__to_cpp(self__COLON__ivy__skipst, st);
                                                    }
                                                    else {
                                                        {
                                                            ivy__sequence self__COLON__ivy__sequence;
                                                            if (((s.elsest).tag == 1)) self__COLON__ivy__sequence = ivyc_s1::ivy__stmt::unwrap< ivyc_s1::ivy__sequence >(s.elsest);
                                                            if(((s.elsest).tag == 1)){
                                                                loc__res.elsest = ext__ivy__sequence__to_cpp(self__COLON__ivy__sequence, st);
                                                            }
                                                            else {
                                                                {
                                                                    ivy__asgn self__COLON__ivy__asgn;
                                                                    if (((s.elsest).tag == 0)) self__COLON__ivy__asgn = ivyc_s1::ivy__stmt::unwrap< ivyc_s1::ivy__asgn >(s.elsest);
                                                                    if(((s.elsest).tag == 0)){
                                                                        loc__res.elsest = ext__ivy__asgn__to_cpp(self__COLON__ivy__asgn, st);
                                                                    }
                                                                    else {
                                                                        loc__res.elsest = ext__ivy__stmt__to_cpp(s.elsest, st);
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                        resd = ivyc_s1::cpp__stmt(3, new ivyc_s1::cpp__stmt::twrap<ivyc_s1::cpp__ifst>(loc__res));
                        st.code = loc__code;
                        ext__ivy__tocppst__wrap_stmt(st, resd, s.ann, resd);
                    }
                }
            }
        }
    }
    return resd;
}
ivyc_s1::ivy__decl ivyc_s1::ext__ivy__initdc__typeinfer(const ivy__initdc& s, ivy__typeinferst& st){
    ivyc_s1::ivy__decl res;
    {
        {
            ivy__initdc loc__t;
            {
                loc__t = ext__ivy__initdc__typeinfer_int(s, st);
                loc__t.ann = s.ann;
                res = ivyc_s1::ivy__decl(11, new ivyc_s1::ivy__decl::twrap<ivyc_s1::ivy__initdc>(loc__t));
            }
        }
    }
    return res;
}
void ivyc_s1::ext__ivy__lvalue_path(ivyc_s1::ivy__expr s, ivy__access_path& path, bool& ok){
    if(((s).tag == 0)){
        {
            ivy__verb loc__0;
    loc__0 = (ivy__verb)___ivy_choose(0,"loc:0",15581);
            {
                {
                    ivy__symbol self__COLON__ivy__symbol;
                    if (((s).tag == 0)) self__COLON__ivy__symbol = ivyc_s1::ivy__expr::unwrap< ivyc_s1::ivy__symbol >(s);
                    if(((s).tag == 0)){
                        loc__0 = ext__ivy__symbol__get_verb(self__COLON__ivy__symbol);
                    }
                    else {
                        loc__0 = ext__ivy__expr__get_verb(s);
                    }
                }
                if((loc__0 == ivy__verb__none)){
                    {
                        {
                            ivyc_s1::ivy__ident loc__0;
                            {
                                {
                                    ivy__symbol self__COLON__ivy__symbol;
                                    if (((s).tag == 0)) self__COLON__ivy__symbol = ivyc_s1::ivy__expr::unwrap< ivyc_s1::ivy__symbol >(s);
                                    if(((s).tag == 0)){
                                        loc__0 = ext__ivy__symbol__get_name(self__COLON__ivy__symbol);
                                    }
                                    else {
                                        loc__0 = ext__ivy__expr__get_name(s);
                                    }
                                }
                                ext__vector__ivy__ident____append(path.elems, loc__0);
                            }
                        }
                        ok = true;
                    }
                }
            }
        }
    }
    else {
        if(((s).tag == 1)){
            {
                bool loc__0;
    loc__0 = (bool)___ivy_choose(0,"loc:0",15588);
                {
                    {
                        ivy__app self__COLON__ivy__app;
                        if (((s).tag == 1)) self__COLON__ivy__app = ivyc_s1::ivy__expr::unwrap< ivyc_s1::ivy__app >(s);
                        if(((s).tag == 1)){
                            loc__0 = ext__ivy__app__is(self__COLON__ivy__app, ivy__verb__colon);
                        }
                        else {
                            loc__0 = ext__ivy__expr__is(s, ivy__verb__colon);
                        }
                    }
                    if(loc__0){
                        {
                            ivyc_s1::ivy__expr loc__0;
                            {
                                {
                                    ivy__app self__COLON__ivy__app;
                                    if (((s).tag == 1)) self__COLON__ivy__app = ivyc_s1::ivy__expr::unwrap< ivyc_s1::ivy__app >(s);
                                    if(((s).tag == 1)){
                                        loc__0 = ext__ivy__app__get_arg(self__COLON__ivy__app, 0);
                                    }
                                    else {
                                        loc__0 = ext__ivy__expr__get_arg(s, 0);
                                    }
                                }
                                ext__ivy__lvalue_path(loc__0, path, ok);
                            }
                        }
                    }
                    else {
                        {
                            bool loc__0;
    loc__0 = (bool)___ivy_choose(0,"loc:0",15587);
                            {
                                {
                                    ivy__app self__COLON__ivy__app;
                                    if (((s).tag == 1)) self__COLON__ivy__app = ivyc_s1::ivy__expr::unwrap< ivyc_s1::ivy__app >(s);
                                    if(((s).tag == 1)){
                                        loc__0 = ext__ivy__app__is(self__COLON__ivy__app, ivy__verb__dot);
                                    }
                                    else {
                                        loc__0 = ext__ivy__expr__is(s, ivy__verb__dot);
                                    }
                                }
                                if(loc__0){
                                    {
                                        {
                                            ivyc_s1::ivy__expr loc__0;
                                            {
                                                {
                                                    ivy__app self__COLON__ivy__app;
                                                    if (((s).tag == 1)) self__COLON__ivy__app = ivyc_s1::ivy__expr::unwrap< ivyc_s1::ivy__app >(s);
                                                    if(((s).tag == 1)){
                                                        loc__0 = ext__ivy__app__get_arg(self__COLON__ivy__app, 0);
                                                    }
                                                    else {
                                                        loc__0 = ext__ivy__expr__get_arg(s, 0);
                                                    }
                                                }
                                                ext__ivy__lvalue_path(loc__0, path, ok);
                                            }
                                        }
                                        if(ok){
                                            {
                                                {
                                                    ivyc_s1::ivy__expr loc__0;
                                                    ivyc_s1::ivy__expr loc__1;
                                                    ivyc_s1::ivy__ident loc__2;
                                                    {
                                                        {
                                                            ivy__app self__COLON__ivy__app;
                                                            if (((s).tag == 1)) self__COLON__ivy__app = ivyc_s1::ivy__expr::unwrap< ivyc_s1::ivy__app >(s);
                                                            if(((s).tag == 1)){
                                                                loc__0 = ext__ivy__app__get_arg(self__COLON__ivy__app, 1);
                                                            }
                                                            else {
                                                                loc__0 = ext__ivy__expr__get_arg(s, 1);
                                                            }
                                                        }
                                                        {
                                                            ivy__app self__COLON__ivy__app;
                                                            if (((loc__0).tag == 1)) self__COLON__ivy__app = ivyc_s1::ivy__expr::unwrap< ivyc_s1::ivy__app >(loc__0);
                                                            if(((loc__0).tag == 1)){
                                                                loc__1 = ext__ivy__app__get_arg(self__COLON__ivy__app, 0);
                                                            }
                                                            else {
                                                                loc__1 = ext__ivy__expr__get_arg(loc__0, 0);
                                                            }
                                                        }
                                                        {
                                                            ivy__symbol self__COLON__ivy__symbol;
                                                            if (((loc__1).tag == 0)) self__COLON__ivy__symbol = ivyc_s1::ivy__expr::unwrap< ivyc_s1::ivy__symbol >(loc__1);
                                                            if(((loc__1).tag == 0)){
                                                                loc__2 = ext__ivy__symbol__get_name(self__COLON__ivy__symbol);
                                                            }
                                                            else {
                                                                loc__2 = ext__ivy__expr__get_name(loc__1);
                                                            }
                                                        }
                                                        ext__vector__ivy__ident____append(path.elems, loc__2);
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                                else {
                                    {
                                        bool loc__0;
    loc__0 = (bool)___ivy_choose(0,"loc:0",15586);
                                        {
                                            {
                                                ivy__app self__COLON__ivy__app;
                                                if (((s).tag == 1)) self__COLON__ivy__app = ivyc_s1::ivy__expr::unwrap< ivyc_s1::ivy__app >(s);
                                                if(((s).tag == 1)){
                                                    loc__0 = ext__ivy__app__is(self__COLON__ivy__app, ivy__verb__none);
                                                }
                                                else {
                                                    loc__0 = ext__ivy__expr__is(s, ivy__verb__none);
                                                }
                                            }
                                            if(loc__0){
                                                {
                                                    {
                                                        ivyc_s1::ivy__expr loc__0;
                                                        {
                                                            {
                                                                ivy__app self__COLON__ivy__app;
                                                                if (((s).tag == 1)) self__COLON__ivy__app = ivyc_s1::ivy__expr::unwrap< ivyc_s1::ivy__app >(s);
                                                                if(((s).tag == 1)){
                                                                    loc__0 = ext__ivy__app__get_func(self__COLON__ivy__app);
                                                                }
                                                                else {
                                                                    loc__0 = ext__ivy__expr__get_func(s);
                                                                }
                                                            }
                                                            ext__ivy__lvalue_path(loc__0, path, ok);
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
    }
}
ivyc_s1::annot ivyc_s1::ext__annot__strip(ivyc_s1::annot s){
    ivyc_s1::annot res;
    {
    }
    return res;
}
void ivyc_s1::ext__cpp__ifst__encode(const cpp__ifst& s, pretty& b, int prio){
    {
        {
            annot_i self__COLON__annot_i;
            if (((s.ann).tag == 0)) self__COLON__annot_i = ivyc_s1::annot::unwrap< ivyc_s1::annot_i >(s.ann);
            if(((s.ann).tag == 0)){
                ext__annot_i__encode(self__COLON__annot_i, b);
            }
            else {
                ext__annot__encode(s.ann, b);
            }
        }
        if((1 < prio)){
            {
                ext__pretty__nest(b);
                ext__pretty__extend(b, __lit<str>("{"));
                ext__pretty__newline(b);
            }
        }
        ext__cpp__ifst__encode_int(s, b, prio);
        if((1 < prio)){
            {
                ext__pretty__unnest(b);
                ext__pretty__newline(b);
                ext__pretty__extend(b, __lit<str>("}"));
            }
        }
    }
}
void ivyc_s1::ext__ivy__syntax_error__encode(const ivy__syntax_error& e, pretty& b){
    {
        ext__pretty__extend(b, __lit<str>("Syntax error at token"));
        ext__pretty__extend(b, __lit<str>(" "));
        ext__pretty__extend(b, e.tok);
        ext__pretty__newline(b);
    }
}
ivyc_s1::str ivyc_s1::ext__ivy__expr__enc(ivyc_s1::ivy__expr e){
    ivyc_s1::str s;
    {
        pretty loc__0;
    loc__0.st.begin = (unsigned long long)___ivy_choose(0,"loc:0",15590);
    loc__0.st.total = (unsigned long long)___ivy_choose(0,"loc:0",15590);
    loc__0.maxline = (unsigned long long)___ivy_choose(0,"loc:0",15590);
    loc__0.indent = (unsigned long long)___ivy_choose(0,"loc:0",15590);
    loc__0.space = (unsigned long long)___ivy_choose(0,"loc:0",15590);
    loc__0.depth = (unsigned long long)___ivy_choose(0,"loc:0",15590);
    loc__0.cppstyle = (bool)___ivy_choose(0,"loc:0",15590);
        {
            loc__0 = ext__pretty__make(100, 4);
            {
                pretty loc__p;
    loc__p.st.begin = (unsigned long long)___ivy_choose(0,"loc:p",15589);
    loc__p.st.total = (unsigned long long)___ivy_choose(0,"loc:p",15589);
    loc__p.maxline = (unsigned long long)___ivy_choose(0,"loc:p",15589);
    loc__p.indent = (unsigned long long)___ivy_choose(0,"loc:p",15589);
    loc__p.space = (unsigned long long)___ivy_choose(0,"loc:p",15589);
    loc__p.depth = (unsigned long long)___ivy_choose(0,"loc:p",15589);
    loc__p.cppstyle = (bool)___ivy_choose(0,"loc:p",15589);
                {
                    loc__p = loc__0;
                    loc__p.cppstyle = false;
                    {
                        ivy__pi self__COLON__ivy__pi;
                        if (((e).tag == 3)) self__COLON__ivy__pi = ivyc_s1::ivy__expr::unwrap< ivyc_s1::ivy__pi >(e);
                        if(((e).tag == 3)){
                            ext__ivy__pi__encode(self__COLON__ivy__pi, loc__p, 0);
                        }
                        else {
                            {
                                ivy__app self__COLON__ivy__app;
                                if (((e).tag == 1)) self__COLON__ivy__app = ivyc_s1::ivy__expr::unwrap< ivyc_s1::ivy__app >(e);
                                if(((e).tag == 1)){
                                    ext__ivy__app__encode(self__COLON__ivy__app, loc__p, 0);
                                }
                                else {
                                    {
                                        ivy__symbol self__COLON__ivy__symbol;
                                        if (((e).tag == 0)) self__COLON__ivy__symbol = ivyc_s1::ivy__expr::unwrap< ivyc_s1::ivy__symbol >(e);
                                        if(((e).tag == 0)){
                                            ext__ivy__symbol__encode(self__COLON__ivy__symbol, loc__p, 0);
                                        }
                                        else {
                                            ext__ivy__expr__encode(e, loc__p, 0);
                                        }
                                    }
                                }
                            }
                        }
                    }
                    ext__pretty__flush(loc__p);
                    s = loc__p.output;
                }
            }
        }
    }
    return s;
}
void ivyc_s1::ext__cpp__prog__encode(const cpp__prog& s, pretty& b, int prio){
    {
        if(!true){
            ext__cpp__version__encode(s.vers, b);
        }
        ext__pretty__newline(b);
        {
            unsigned long long loc__idx;
    loc__idx = (unsigned long long)___ivy_choose(0,"loc:idx",15591);
            {
                loc__idx = vector__cpp__decl____begin(s.decls);
                while((loc__idx < vector__cpp__decl____end(s.decls))){
                    {
                        ext__pretty__newline(b);
                        {
                            cpp__groupdc self__COLON__cpp__groupdc;
                            if (((vector__cpp__decl____value(s.decls,loc__idx)).tag == 7)) self__COLON__cpp__groupdc = ivyc_s1::cpp__decl::unwrap< ivyc_s1::cpp__groupdc >(vector__cpp__decl____value(s.decls,loc__idx));
                            if(((vector__cpp__decl____value(s.decls,loc__idx)).tag == 7)){
                                ext__cpp__groupdc__encode(self__COLON__cpp__groupdc, b, 0);
                            }
                            else {
                                {
                                    cpp__namespacedecl self__COLON__cpp__namespacedecl;
                                    if (((vector__cpp__decl____value(s.decls,loc__idx)).tag == 6)) self__COLON__cpp__namespacedecl = ivyc_s1::cpp__decl::unwrap< ivyc_s1::cpp__namespacedecl >(vector__cpp__decl____value(s.decls,loc__idx));
                                    if(((vector__cpp__decl____value(s.decls,loc__idx)).tag == 6)){
                                        ext__cpp__namespacedecl__encode(self__COLON__cpp__namespacedecl, b, 0);
                                    }
                                    else {
                                        {
                                            cpp__structdecl self__COLON__cpp__structdecl;
                                            if (((vector__cpp__decl____value(s.decls,loc__idx)).tag == 5)) self__COLON__cpp__structdecl = ivyc_s1::cpp__decl::unwrap< ivyc_s1::cpp__structdecl >(vector__cpp__decl____value(s.decls,loc__idx));
                                            if(((vector__cpp__decl____value(s.decls,loc__idx)).tag == 5)){
                                                ext__cpp__structdecl__encode(self__COLON__cpp__structdecl, b, 0);
                                            }
                                            else {
                                                {
                                                    cpp__funcdecl self__COLON__cpp__funcdecl;
                                                    if (((vector__cpp__decl____value(s.decls,loc__idx)).tag == 4)) self__COLON__cpp__funcdecl = ivyc_s1::cpp__decl::unwrap< ivyc_s1::cpp__funcdecl >(vector__cpp__decl____value(s.decls,loc__idx));
                                                    if(((vector__cpp__decl____value(s.decls,loc__idx)).tag == 4)){
                                                        ext__cpp__funcdecl__encode(self__COLON__cpp__funcdecl, b, 0);
                                                    }
                                                    else {
                                                        {
                                                            cpp__vardecl self__COLON__cpp__vardecl;
                                                            if (((vector__cpp__decl____value(s.decls,loc__idx)).tag == 3)) self__COLON__cpp__vardecl = ivyc_s1::cpp__decl::unwrap< ivyc_s1::cpp__vardecl >(vector__cpp__decl____value(s.decls,loc__idx));
                                                            if(((vector__cpp__decl____value(s.decls,loc__idx)).tag == 3)){
                                                                ext__cpp__vardecl__encode(self__COLON__cpp__vardecl, b, 0);
                                                            }
                                                            else {
                                                                {
                                                                    cpp__enumdecl self__COLON__cpp__enumdecl;
                                                                    if (((vector__cpp__decl____value(s.decls,loc__idx)).tag == 2)) self__COLON__cpp__enumdecl = ivyc_s1::cpp__decl::unwrap< ivyc_s1::cpp__enumdecl >(vector__cpp__decl____value(s.decls,loc__idx));
                                                                    if(((vector__cpp__decl____value(s.decls,loc__idx)).tag == 2)){
                                                                        ext__cpp__enumdecl__encode(self__COLON__cpp__enumdecl, b, 0);
                                                                    }
                                                                    else {
                                                                        {
                                                                            cpp__typedecl self__COLON__cpp__typedecl;
                                                                            if (((vector__cpp__decl____value(s.decls,loc__idx)).tag == 1)) self__COLON__cpp__typedecl = ivyc_s1::cpp__decl::unwrap< ivyc_s1::cpp__typedecl >(vector__cpp__decl____value(s.decls,loc__idx));
                                                                            if(((vector__cpp__decl____value(s.decls,loc__idx)).tag == 1)){
                                                                                ext__cpp__typedecl__encode(self__COLON__cpp__typedecl, b, 0);
                                                                            }
                                                                            else {
                                                                                {
                                                                                    cpp__header self__COLON__cpp__header;
                                                                                    if (((vector__cpp__decl____value(s.decls,loc__idx)).tag == 0)) self__COLON__cpp__header = ivyc_s1::cpp__decl::unwrap< ivyc_s1::cpp__header >(vector__cpp__decl____value(s.decls,loc__idx));
                                                                                    if(((vector__cpp__decl____value(s.decls,loc__idx)).tag == 0)){
                                                                                        ext__cpp__header__encode(self__COLON__cpp__header, b, 0);
                                                                                    }
                                                                                    else {
                                                                                        ext__cpp__decl__encode(vector__cpp__decl____value(s.decls,loc__idx), b, 0);
                                                                                    }
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                        loc__idx = ext__vector__cpp__decl____domain__next(loc__idx);
                    }
                }
            }
        }
    }
}
bool ivyc_s1::ext__ivy__ident_to_cppclass__mem(const ivy__ident_to_cppclass& a, ivyc_s1::ivy__ident x){
    bool res;
    res = (bool)___ivy_choose(0,"fml:res",0);
    {

        ivy__ident_to_cppclass::const_iterator it = a.find(x);
        res = (it != a.end());
    }
    return res;
}
ivyc_s1::cpp__ident ivyc_s1::ext__cpp__ident__get_member(ivyc_s1::cpp__ident s){
    ivyc_s1::cpp__ident res;
    {
    }
    return res;
}
ivyc_s1::vector__str__ ivyc_s1::ext__vector__str____empty(){
    ivyc_s1::vector__str__ a;
    {
        
    }
    return a;
}
void ivyc_s1::ext__cpp__simpletype__tup__encode(const vector__cpp__simpletype__& s, pretty& b, int prio){
    if((0 < vector__cpp__simpletype____end(s))){
        {
            ext__pretty__extend(b, __lit<str>(" "));
            ext__pretty__extend(b, __lit<str>("("));
            ext__cpp__simpletype__encode(vector__cpp__simpletype____value(s,0), b, 0);
            {
                unsigned long long loc__0;
    loc__0 = (unsigned long long)___ivy_choose(0,"loc:0",15593);
                {
                    loc__0 = ext__vector__cpp__simpletype____domain__next(vector__cpp__simpletype____begin(s));
                    {
                        unsigned long long loc__idx;
    loc__idx = (unsigned long long)___ivy_choose(0,"loc:idx",15592);
                        {
                            loc__idx = loc__0;
                            while((loc__idx < vector__cpp__simpletype____end(s))){
                                {
                                    ext__pretty__extend(b, __lit<str>(","));
                                    ext__cpp__simpletype__encode(vector__cpp__simpletype____value(s,loc__idx), b, 0);
                                    loc__idx = ext__vector__cpp__simpletype____domain__next(loc__idx);
                                }
                            }
                            ext__pretty__extend(b, __lit<str>(")"));
                        }
                    }
                }
            }
        }
    }
}
unsigned long long ivyc_s1::ext__vector__ivy__decl____domain__prev(unsigned long long x){
    unsigned long long y;
    y = (unsigned long long)___ivy_choose(0,"fml:y",0);
    {
        unsigned long long __tmp3;
        __tmp3 = x;
        unsigned long long __tmp4;
        __tmp4 = 1;
        y = ( __tmp3 < __tmp4 ? 0 : __tmp3 - __tmp4);
    }
    return y;
}
ivyc_s1::ivy__stmt ivyc_s1::ext__ivy__ifst__typeinfer(const ivy__ifst& s, ivy__typeinferst& st){
    ivyc_s1::ivy__stmt res;
    {
        {
            ivy__ifst loc__t;
            {
                loc__t = ext__ivy__ifst__typeinfer_int(s, st);
                loc__t.ann = s.ann;
                res = ivyc_s1::ivy__stmt(3, new ivyc_s1::ivy__stmt::twrap<ivyc_s1::ivy__ifst>(loc__t));
            }
        }
    }
    return res;
}
bool ivyc_s1::ext__ivy__ident_to_instantiatedc__mem(const ivy__ident_to_instantiatedc& a, ivyc_s1::ivy__ident x){
    bool res;
    res = (bool)___ivy_choose(0,"fml:res",0);
    {

        ivy__ident_to_instantiatedc::const_iterator it = a.find(x);
        res = (it != a.end());
    }
    return res;
}
void ivyc_s1::ext__ivy__unown_path(const ivy__access_path& path, ivy__tocppst& st){
    {
        unsigned long long loc__idx;
    loc__idx = (unsigned long long)___ivy_choose(0,"loc:idx",15597);
        {
            loc__idx = vector__ivy__lvalue_count____begin(st.dead);
            while((loc__idx < vector__ivy__lvalue_count____end(st.dead))){
                {
                    ivy__lvalue_count loc__lc;
    loc__lc.cnt = (unsigned long long)___ivy_choose(0,"loc:lc",15596);
                    {
                        loc__lc = vector__ivy__lvalue_count____value(st.dead,loc__idx);
                        {
                            bool loc__0;
    loc__0 = (bool)___ivy_choose(0,"loc:0",15595);
                            {
                                loc__0 = ext__ivy__path_may_alias(path, loc__lc.path);
                                if(loc__0){
                                    {
                                        loc__lc.cnt = ext__pos__prev(loc__lc.cnt);
                                        ext__vector__ivy__lvalue_count____set(st.dead, loc__idx, loc__lc);
                                    }
                                }
                            }
                        }
                        loc__idx = ext__vector__ivy__lvalue_count____domain__next(loc__idx);
                    }
                }
            }
        }
    }
}
ivyc_s1::cpp__stmt ivyc_s1::ext__cpp__asgn__make(ivyc_s1::cpp__expr x, ivyc_s1::cpp__expr y, ivyc_s1::annot ann){
    ivyc_s1::cpp__stmt res;
    {
        {
            cpp__asgn loc__s;
            {
                loc__s.lhs = x;
                loc__s.rhs = y;
                loc__s.ann = ann;
                res = ivyc_s1::cpp__stmt(0, new ivyc_s1::cpp__stmt::twrap<ivyc_s1::cpp__asgn>(loc__s));
            }
        }
    }
    return res;
}
bool ivyc_s1::ext__ivy__expr__eq(ivyc_s1::ivy__expr e1, ivyc_s1::ivy__expr e2){
    bool res;
    res = (bool)___ivy_choose(0,"fml:res",0);
    if(((e1).tag == 0)){
        if(((e2).tag == 0)){
            {
                {
                    ivyc_s1::ivy__ident loc__0;
                    ivyc_s1::ivy__ident loc__1;
                    {
                        {
                            ivy__symbol self__COLON__ivy__symbol;
                            if (((e1).tag == 0)) self__COLON__ivy__symbol = ivyc_s1::ivy__expr::unwrap< ivyc_s1::ivy__symbol >(e1);
                            if(((e1).tag == 0)){
                                loc__0 = ext__ivy__symbol__get_name(self__COLON__ivy__symbol);
                            }
                            else {
                                loc__0 = ext__ivy__expr__get_name(e1);
                            }
                        }
                        {
                            ivy__symbol self__COLON__ivy__symbol;
                            if (((e2).tag == 0)) self__COLON__ivy__symbol = ivyc_s1::ivy__expr::unwrap< ivyc_s1::ivy__symbol >(e2);
                            if(((e2).tag == 0)){
                                loc__1 = ext__ivy__symbol__get_name(self__COLON__ivy__symbol);
                            }
                            else {
                                loc__1 = ext__ivy__expr__get_name(e2);
                            }
                        }
                        res = (loc__0 == loc__1);
                    }
                }
            }
        }
    }
    else {
        if(((e1).tag == 1)){
            {
                ivyc_s1::ivy__expr loc__0;
                ivyc_s1::ivy__expr loc__1;
                bool loc__2;
    loc__2 = (bool)___ivy_choose(0,"loc:2",15606);
                {
                    {
                        ivy__app self__COLON__ivy__app;
                        if (((e1).tag == 1)) self__COLON__ivy__app = ivyc_s1::ivy__expr::unwrap< ivyc_s1::ivy__app >(e1);
                        if(((e1).tag == 1)){
                            loc__0 = ext__ivy__app__get_func(self__COLON__ivy__app);
                        }
                        else {
                            loc__0 = ext__ivy__expr__get_func(e1);
                        }
                    }
                    {
                        ivy__app self__COLON__ivy__app;
                        if (((e2).tag == 1)) self__COLON__ivy__app = ivyc_s1::ivy__expr::unwrap< ivyc_s1::ivy__app >(e2);
                        if(((e2).tag == 1)){
                            loc__1 = ext__ivy__app__get_func(self__COLON__ivy__app);
                        }
                        else {
                            loc__1 = ext__ivy__expr__get_func(e2);
                        }
                    }
                    loc__2 = ext__ivy__expr__eq(loc__0, loc__1);
                    if(loc__2){
                        {
                            vector__ivy__expr__ loc__0;
                            {
                                {
                                    ivy__app self__COLON__ivy__app;
                                    if (((e1).tag == 1)) self__COLON__ivy__app = ivyc_s1::ivy__expr::unwrap< ivyc_s1::ivy__app >(e1);
                                    if(((e1).tag == 1)){
                                        loc__0 = ext__ivy__app__get_args(self__COLON__ivy__app);
                                    }
                                    else {
                                        loc__0 = ext__ivy__expr__get_args(e1);
                                    }
                                }
                                {
                                    vector__ivy__expr__ loc__args1;
                                    {
                                        loc__args1 = loc__0;
                                        {
                                            vector__ivy__expr__ loc__0;
                                            {
                                                {
                                                    ivy__app self__COLON__ivy__app;
                                                    if (((e2).tag == 1)) self__COLON__ivy__app = ivyc_s1::ivy__expr::unwrap< ivyc_s1::ivy__app >(e2);
                                                    if(((e2).tag == 1)){
                                                        loc__0 = ext__ivy__app__get_args(self__COLON__ivy__app);
                                                    }
                                                    else {
                                                        loc__0 = ext__ivy__expr__get_args(e2);
                                                    }
                                                }
                                                {
                                                    vector__ivy__expr__ loc__args2;
                                                    {
                                                        loc__args2 = loc__0;
                                                        if((vector__ivy__expr____end(loc__args1) == vector__ivy__expr____end(loc__args2))){
                                                            {
                                                                res = true;
                                                                {
                                                                    unsigned long long loc__idx;
    loc__idx = (unsigned long long)___ivy_choose(0,"loc:idx",15601);
                                                                    {
                                                                        loc__idx = vector__ivy__expr____begin(loc__args1);
                                                                        while((res && (loc__idx < vector__ivy__expr____end(loc__args1)))){
                                                                            {
                                                                                {
                                                                                    bool loc__0;
    loc__0 = (bool)___ivy_choose(0,"loc:0",15600);
                                                                                    {
                                                                                        loc__0 = ext__ivy__expr__eq(vector__ivy__expr____value(loc__args1,loc__idx), vector__ivy__expr____value(loc__args2,loc__idx));
                                                                                        if(!loc__0){
                                                                                            {
                                                                                                res = false;
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                }
                                                                                loc__idx = ext__vector__ivy__expr____domain__next(loc__idx);
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
    }
    return res;
}
ivyc_s1::ivy__expr ivyc_s1::ext__ivy__flat_formal(ivyc_s1::ivy__expr s, ivy__flatst& st){
    ivyc_s1::ivy__expr res;
    {
        res = s;
        {
            bool loc__0;
    loc__0 = (bool)___ivy_choose(0,"loc:0",15610);
            {
                {
                    ivy__app self__COLON__ivy__app;
                    if (((res).tag == 1)) self__COLON__ivy__app = ivyc_s1::ivy__expr::unwrap< ivyc_s1::ivy__app >(res);
                    if(((res).tag == 1)){
                        loc__0 = ext__ivy__app__is(self__COLON__ivy__app, ivy__verb__colon);
                    }
                    else {
                        loc__0 = ext__ivy__expr__is(res, ivy__verb__colon);
                    }
                }
                if(loc__0){
                    {
                        ivyc_s1::ivy__expr loc__ty;
                        {
                            {
                                ivyc_s1::ivy__expr loc__0;
                                {
                                    {
                                        ivy__app self__COLON__ivy__app;
                                        if (((res).tag == 1)) self__COLON__ivy__app = ivyc_s1::ivy__expr::unwrap< ivyc_s1::ivy__app >(res);
                                        if(((res).tag == 1)){
                                            loc__0 = ext__ivy__app__get_arg(self__COLON__ivy__app, 1);
                                        }
                                        else {
                                            loc__0 = ext__ivy__expr__get_arg(res, 1);
                                        }
                                    }
                                    {
                                        ivy__app self__COLON__ivy__app;
                                        if (((loc__0).tag == 1)) self__COLON__ivy__app = ivyc_s1::ivy__expr::unwrap< ivyc_s1::ivy__app >(loc__0);
                                        if(((loc__0).tag == 1)){
                                            loc__ty = ext__ivy__app__flat(self__COLON__ivy__app, st);
                                        }
                                        else {
                                            {
                                                ivy__symbol self__COLON__ivy__symbol;
                                                if (((loc__0).tag == 0)) self__COLON__ivy__symbol = ivyc_s1::ivy__expr::unwrap< ivyc_s1::ivy__symbol >(loc__0);
                                                if(((loc__0).tag == 0)){
                                                    loc__ty = ext__ivy__symbol__flat(self__COLON__ivy__symbol, st);
                                                }
                                                else {
                                                    loc__ty = ext__ivy__expr__flat(loc__0, st);
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                            {
                                ivyc_s1::ivy__expr loc__0;
                                ivyc_s1::annot loc__1;
                                {
                                    {
                                        ivy__app self__COLON__ivy__app;
                                        if (((res).tag == 1)) self__COLON__ivy__app = ivyc_s1::ivy__expr::unwrap< ivyc_s1::ivy__app >(res);
                                        if(((res).tag == 1)){
                                            loc__0 = ext__ivy__app__get_arg(self__COLON__ivy__app, 0);
                                        }
                                        else {
                                            loc__0 = ext__ivy__expr__get_arg(res, 0);
                                        }
                                    }
                                    {
                                        ivy__app self__COLON__ivy__app;
                                        if (((res).tag == 1)) self__COLON__ivy__app = ivyc_s1::ivy__expr::unwrap< ivyc_s1::ivy__app >(res);
                                        if(((res).tag == 1)){
                                            loc__1 = ext__ivy__app__get_ann(self__COLON__ivy__app);
                                        }
                                        else {
                                            {
                                                ivy__symbol self__COLON__ivy__symbol;
                                                if (((res).tag == 0)) self__COLON__ivy__symbol = ivyc_s1::ivy__expr::unwrap< ivyc_s1::ivy__symbol >(res);
                                                if(((res).tag == 0)){
                                                    loc__1 = ext__ivy__symbol__get_ann(self__COLON__ivy__symbol);
                                                }
                                                else {
                                                    loc__1 = ext__ivy__expr__get_ann(res);
                                                }
                                            }
                                        }
                                    }
                                    res = ext__ivy__colon__make(loc__0, loc__ty, loc__1);
                                }
                            }
                        }
                    }
                }
            }
        }
    }
    return res;
}
ivyc_s1::ivy__decl ivyc_s1::ext__ivy__groupdc__make(const vector__ivy__decl__& decls){
    ivyc_s1::ivy__decl res;
    {
        {
            ivy__groupdc loc__s;
            {
                loc__s.decls = decls;
                res = ivyc_s1::ivy__decl(1, new ivyc_s1::ivy__decl::twrap<ivyc_s1::ivy__groupdc>(loc__s));
            }
        }
    }
    return res;
}
bool ivyc_s1::ext__ivy__is_input_param(const ivy__actdc& s, ivyc_s1::ivy__expr p){
    bool res;
    res = (bool)___ivy_choose(0,"fml:res",0);
    {
        unsigned long long loc__idx;
    loc__idx = (unsigned long long)___ivy_choose(0,"loc:idx",15612);
        {
            loc__idx = vector__ivy__expr____begin(s.inputs);
            while((!res && (loc__idx < vector__ivy__expr____end(s.inputs)))){
                {
                    res = ext__ivy__expr__eq(vector__ivy__expr____value(s.inputs,loc__idx), p);
                    loc__idx = ext__vector__ivy__expr____domain__next(loc__idx);
                }
            }
        }
    }
    return res;
}
ivyc_s1::vector__ivy__expr__ ivyc_s1::ext__ivy__typespec__get_elems(ivyc_s1::ivy__typespec s){
    ivyc_s1::vector__ivy__expr__ res;
    {
    }
    return res;
}
ivyc_s1::annot ivyc_s1::ext__cpp__symbol__get_ann(const cpp__symbol& s){
    ivyc_s1::annot res;
    res = s.ann;
    return res;
}
ivyc_s1::ivy__ident ivyc_s1::ext__ivy__ident__get_namesp(ivyc_s1::ivy__ident s){
    ivyc_s1::ivy__ident res;
    {
    }
    return res;
}
void ivyc_s1::imp__ivy__report_cannot_infer(const str& s1, const str& s2){
    {
    }
}
ivyc_s1::ivy__expr ivyc_s1::ext__ivy__app__get_arg(const ivy__app& s, unsigned long long p){
    ivyc_s1::ivy__expr res;
    res = vector__ivy__expr____value(s.args,p);
    return res;
}
ivyc_s1::annot ivyc_s1::ext__cpp__typedecl__get_ann(const cpp__typedecl& d){
    ivyc_s1::annot res;
    res = d.ann;
    return res;
}
void ivyc_s1::ext__ivy__curly_tup__parse(pstate& st, int prio, vector__ivy__expr__& res){
    if((st.tok == __lit<str>("{"))){
        {
            ext__pstate__consume(st);
            {
                ivyc_s1::ivy__expr loc__s;
                {
                    ext__ivy__expr__parse(st, prio, loc__s);
                    ext__vector__ivy__expr____append(res, loc__s);
                    while((st.ok && (st.tok == __lit<str>(",")))){
                        {
                            ext__pstate__consume(st);
                            ext__ivy__expr__parse(st, prio, loc__s);
                            ext__vector__ivy__expr____append(res, loc__s);
                        }
                    }
                    if((st.ok && (st.tok == __lit<str>("}")))){
                        {
                            ext__pstate__consume(st);
                        }
                    }
                    else {
                        st.ok = false;
                    }
                }
            }
        }
    }
    else {
        st.ok = false;
    }
}
bool ivyc_s1::ext__ivy__push_pop_ident_set__mem(const ivy__push_pop_ident_set& s, ivyc_s1::ivy__ident id){
    bool res;
    res = (bool)___ivy_choose(0,"fml:res",0);
    res = ext__ivy__push_pop_ident_set__map_t__mem(s.map, id);
    return res;
}
ivyc_s1::ivy__expr ivyc_s1::ext__ivy__uncurry_func(ivyc_s1::ivy__expr func){
    ivyc_s1::ivy__expr res;
    {
        {
            ivyc_s1::ivy__expr loc__0;
            ivyc_s1::ivy__expr loc__1;
            {
                {
                    ivy__app self__COLON__ivy__app;
                    if (((func).tag == 1)) self__COLON__ivy__app = ivyc_s1::ivy__expr::unwrap< ivyc_s1::ivy__app >(func);
                    if(((func).tag == 1)){
                        loc__0 = ext__ivy__app__get_arg(self__COLON__ivy__app, 1);
                    }
                    else {
                        loc__0 = ext__ivy__expr__get_arg(func, 1);
                    }
                }
                {
                    ivy__app self__COLON__ivy__app;
                    if (((loc__0).tag == 1)) self__COLON__ivy__app = ivyc_s1::ivy__expr::unwrap< ivyc_s1::ivy__app >(loc__0);
                    if(((loc__0).tag == 1)){
                        loc__1 = ext__ivy__app__get_arg(self__COLON__ivy__app, 0);
                    }
                    else {
                        loc__1 = ext__ivy__expr__get_arg(loc__0, 0);
                    }
                }
                {
                    ivyc_s1::ivy__expr loc__ty;
                    {
                        loc__ty = loc__1;
                        {
                            ivyc_s1::ivy__ident loc__0;
                            ivyc_s1::ivy__expr loc__1;
                            ivyc_s1::ivy__ident loc__2;
                            ivyc_s1::ivy__ident loc__3;
                            {
                                {
                                    ivy__symbol self__COLON__ivy__symbol;
                                    if (((loc__ty).tag == 0)) self__COLON__ivy__symbol = ivyc_s1::ivy__expr::unwrap< ivyc_s1::ivy__symbol >(loc__ty);
                                    if(((loc__ty).tag == 0)){
                                        loc__0 = ext__ivy__symbol__get_name(self__COLON__ivy__symbol);
                                    }
                                    else {
                                        loc__0 = ext__ivy__expr__get_name(loc__ty);
                                    }
                                }
                                {
                                    ivy__app self__COLON__ivy__app;
                                    if (((func).tag == 1)) self__COLON__ivy__app = ivyc_s1::ivy__expr::unwrap< ivyc_s1::ivy__app >(func);
                                    if(((func).tag == 1)){
                                        loc__1 = ext__ivy__app__get_arg(self__COLON__ivy__app, 0);
                                    }
                                    else {
                                        loc__1 = ext__ivy__expr__get_arg(func, 0);
                                    }
                                }
                                {
                                    ivy__symbol self__COLON__ivy__symbol;
                                    if (((loc__1).tag == 0)) self__COLON__ivy__symbol = ivyc_s1::ivy__expr::unwrap< ivyc_s1::ivy__symbol >(loc__1);
                                    if(((loc__1).tag == 0)){
                                        loc__2 = ext__ivy__symbol__get_name(self__COLON__ivy__symbol);
                                    }
                                    else {
                                        loc__2 = ext__ivy__expr__get_name(loc__1);
                                    }
                                }
                                {
                                    ivy__dotident self__COLON__ivy__dotident;
                                    if (((loc__2).tag == 2)) self__COLON__ivy__dotident = ivyc_s1::ivy__ident::unwrap< ivyc_s1::ivy__dotident >(loc__2);
                                    if(((loc__2).tag == 2)){
                                        loc__3 = ext__ivy__dotident__prefix(self__COLON__ivy__dotident, loc__0);
                                    }
                                    else {
                                        {
                                            ivy__strident self__COLON__ivy__strident;
                                            if (((loc__2).tag == 0)) self__COLON__ivy__strident = ivyc_s1::ivy__ident::unwrap< ivyc_s1::ivy__strident >(loc__2);
                                            if(((loc__2).tag == 0)){
                                                loc__3 = ext__ivy__strident__prefix(self__COLON__ivy__strident, loc__0);
                                            }
                                            else {
                                                loc__3 = ext__ivy__ident__prefix(loc__2, loc__0);
                                            }
                                        }
                                    }
                                }
                                {
                                    ivyc_s1::ivy__ident loc__fid;
                                    {
                                        loc__fid = loc__3;
                                        {
                                            ivyc_s1::annot loc__0;
                                            ivyc_s1::ivy__expr loc__1;
                                            {
                                                {
                                                    ivy__app self__COLON__ivy__app;
                                                    if (((func).tag == 1)) self__COLON__ivy__app = ivyc_s1::ivy__expr::unwrap< ivyc_s1::ivy__app >(func);
                                                    if(((func).tag == 1)){
                                                        loc__0 = ext__ivy__app__get_ann(self__COLON__ivy__app);
                                                    }
                                                    else {
                                                        {
                                                            ivy__symbol self__COLON__ivy__symbol;
                                                            if (((func).tag == 0)) self__COLON__ivy__symbol = ivyc_s1::ivy__expr::unwrap< ivyc_s1::ivy__symbol >(func);
                                                            if(((func).tag == 0)){
                                                                loc__0 = ext__ivy__symbol__get_ann(self__COLON__ivy__symbol);
                                                            }
                                                            else {
                                                                loc__0 = ext__ivy__expr__get_ann(func);
                                                            }
                                                        }
                                                    }
                                                }
                                                loc__1 = ext__ivy__symbol__make(loc__fid, loc__0);
                                                {
                                                    ivyc_s1::ivy__expr loc__sym;
                                                    {
                                                        loc__sym = loc__1;
                                                        {
                                                            ivyc_s1::ivy__expr loc__0;
                                                            ivyc_s1::ivy__expr loc__1;
                                                            ivyc_s1::annot loc__2;
                                                            {
                                                                {
                                                                    ivy__app self__COLON__ivy__app;
                                                                    if (((func).tag == 1)) self__COLON__ivy__app = ivyc_s1::ivy__expr::unwrap< ivyc_s1::ivy__app >(func);
                                                                    if(((func).tag == 1)){
                                                                        loc__0 = ext__ivy__app__get_arg(self__COLON__ivy__app, 1);
                                                                    }
                                                                    else {
                                                                        loc__0 = ext__ivy__expr__get_arg(func, 1);
                                                                    }
                                                                }
                                                                loc__1 = ext__ivy__expr__uncurry(loc__0);
                                                                {
                                                                    ivy__app self__COLON__ivy__app;
                                                                    if (((func).tag == 1)) self__COLON__ivy__app = ivyc_s1::ivy__expr::unwrap< ivyc_s1::ivy__app >(func);
                                                                    if(((func).tag == 1)){
                                                                        loc__2 = ext__ivy__app__get_ann(self__COLON__ivy__app);
                                                                    }
                                                                    else {
                                                                        {
                                                                            ivy__symbol self__COLON__ivy__symbol;
                                                                            if (((func).tag == 0)) self__COLON__ivy__symbol = ivyc_s1::ivy__expr::unwrap< ivyc_s1::ivy__symbol >(func);
                                                                            if(((func).tag == 0)){
                                                                                loc__2 = ext__ivy__symbol__get_ann(self__COLON__ivy__symbol);
                                                                            }
                                                                            else {
                                                                                loc__2 = ext__ivy__expr__get_ann(func);
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                                res = ext__ivy__colon__make(loc__sym, loc__1, loc__2);
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
    }
    return res;
}
ivyc_s1::ivy__expr ivyc_s1::ext__ivy__app__flat(const ivy__app& s, ivy__flatst& st){
    ivyc_s1::ivy__expr res;
    {
        ivyc_s1::ivy__expr loc__arg0;
        {
            {
                ivy__app self__COLON__ivy__app;
                if (((vector__ivy__expr____value(s.args,0)).tag == 1)) self__COLON__ivy__app = ivyc_s1::ivy__expr::unwrap< ivyc_s1::ivy__app >(vector__ivy__expr____value(s.args,0));
                if(((vector__ivy__expr____value(s.args,0)).tag == 1)){
                    loc__arg0 = ext__ivy__app__flat(self__COLON__ivy__app, st);
                }
                else {
                    {
                        ivy__symbol self__COLON__ivy__symbol;
                        if (((vector__ivy__expr____value(s.args,0)).tag == 0)) self__COLON__ivy__symbol = ivyc_s1::ivy__expr::unwrap< ivyc_s1::ivy__symbol >(vector__ivy__expr____value(s.args,0));
                        if(((vector__ivy__expr____value(s.args,0)).tag == 0)){
                            loc__arg0 = ext__ivy__symbol__flat(self__COLON__ivy__symbol, st);
                        }
                        else {
                            loc__arg0 = ext__ivy__expr__flat(vector__ivy__expr____value(s.args,0), st);
                        }
                    }
                }
            }
            {
                bool loc__0;
    loc__0 = (bool)___ivy_choose(0,"loc:0",15628);
                {
                    loc__0 = ext__ivy__app__is(s, ivy__verb__dot);
                    if(loc__0){
                        {
                            ivyc_s1::ivy__ident loc__0;
                            ivyc_s1::ivy__ident loc__1;
                            {
                                {
                                    ivy__symbol self__COLON__ivy__symbol;
                                    if (((vector__ivy__expr____value(s.args,1)).tag == 0)) self__COLON__ivy__symbol = ivyc_s1::ivy__expr::unwrap< ivyc_s1::ivy__symbol >(vector__ivy__expr____value(s.args,1));
                                    if(((vector__ivy__expr____value(s.args,1)).tag == 0)){
                                        loc__0 = ext__ivy__symbol__get_name(self__COLON__ivy__symbol);
                                    }
                                    else {
                                        loc__0 = ext__ivy__expr__get_name(vector__ivy__expr____value(s.args,1));
                                    }
                                }
                                {
                                    ivy__dotident self__COLON__ivy__dotident;
                                    if (((loc__0).tag == 2)) self__COLON__ivy__dotident = ivyc_s1::ivy__ident::unwrap< ivyc_s1::ivy__dotident >(loc__0);
                                    if(((loc__0).tag == 2)){
                                        loc__1 = ext__ivy__dotident__flat(self__COLON__ivy__dotident, true, st);
                                    }
                                    else {
                                        {
                                            ivy__strident self__COLON__ivy__strident;
                                            if (((loc__0).tag == 0)) self__COLON__ivy__strident = ivyc_s1::ivy__ident::unwrap< ivyc_s1::ivy__strident >(loc__0);
                                            if(((loc__0).tag == 0)){
                                                loc__1 = ext__ivy__strident__flat(self__COLON__ivy__strident, true, st);
                                            }
                                            else {
                                                loc__1 = ext__ivy__ident__flat(loc__0, true, st);
                                            }
                                        }
                                    }
                                }
                                res = ext__ivy__applydot(loc__arg0, loc__1, s.ann, st);
                            }
                        }
                    }
                    else {
                        {
                            bool loc__0;
    loc__0 = (bool)___ivy_choose(0,"loc:0",15627);
                            {
                                loc__0 = ext__ivy__app__is(s, ivy__verb__varv);
                                if(loc__0){
                                    {
                                        res = ext__ivy__flat_formal(vector__ivy__expr____value(s.args,0), st);
                                        res = ext__ivy__varv__make(res, s.ann);
                                    }
                                }
                                else {
                                    {
                                        {
                                            vector__ivy__expr__ loc__args;
                                            {
                                                ext__vector__ivy__expr____append(loc__args, loc__arg0);
                                                {
                                                    unsigned long long loc__0;
    loc__0 = (unsigned long long)___ivy_choose(0,"loc:0",15625);
                                                    {
                                                        loc__0 = ext__vector__ivy__expr____domain__next(vector__ivy__expr____begin(s.args));
                                                        {
                                                            unsigned long long loc__idx;
    loc__idx = (unsigned long long)___ivy_choose(0,"loc:idx",15624);
                                                            {
                                                                loc__idx = loc__0;
                                                                while((loc__idx < vector__ivy__expr____end(s.args))){
                                                                    {
                                                                        ivyc_s1::ivy__expr loc__arg;
                                                                        {
                                                                            {
                                                                                ivy__app self__COLON__ivy__app;
                                                                                if (((vector__ivy__expr____value(s.args,loc__idx)).tag == 1)) self__COLON__ivy__app = ivyc_s1::ivy__expr::unwrap< ivyc_s1::ivy__app >(vector__ivy__expr____value(s.args,loc__idx));
                                                                                if(((vector__ivy__expr____value(s.args,loc__idx)).tag == 1)){
                                                                                    loc__arg = ext__ivy__app__flat(self__COLON__ivy__app, st);
                                                                                }
                                                                                else {
                                                                                    {
                                                                                        ivy__symbol self__COLON__ivy__symbol;
                                                                                        if (((vector__ivy__expr____value(s.args,loc__idx)).tag == 0)) self__COLON__ivy__symbol = ivyc_s1::ivy__expr::unwrap< ivyc_s1::ivy__symbol >(vector__ivy__expr____value(s.args,loc__idx));
                                                                                        if(((vector__ivy__expr____value(s.args,loc__idx)).tag == 0)){
                                                                                            loc__arg = ext__ivy__symbol__flat(self__COLON__ivy__symbol, st);
                                                                                        }
                                                                                        else {
                                                                                            loc__arg = ext__ivy__expr__flat(vector__ivy__expr____value(s.args,loc__idx), st);
                                                                                        }
                                                                                    }
                                                                                }
                                                                            }
                                                                            ext__vector__ivy__expr____append(loc__args, loc__arg);
                                                                            loc__idx = ext__vector__ivy__expr____domain__next(loc__idx);
                                                                        }
                                                                    }
                                                                }
                                                                {
                                                                    ivyc_s1::ivy__expr loc__func;
                                                                    {
                                                                        {
                                                                            ivy__app self__COLON__ivy__app;
                                                                            if (((s.func).tag == 1)) self__COLON__ivy__app = ivyc_s1::ivy__expr::unwrap< ivyc_s1::ivy__app >(s.func);
                                                                            if(((s.func).tag == 1)){
                                                                                loc__func = ext__ivy__app__flat(self__COLON__ivy__app, st);
                                                                            }
                                                                            else {
                                                                                {
                                                                                    ivy__symbol self__COLON__ivy__symbol;
                                                                                    if (((s.func).tag == 0)) self__COLON__ivy__symbol = ivyc_s1::ivy__expr::unwrap< ivyc_s1::ivy__symbol >(s.func);
                                                                                    if(((s.func).tag == 0)){
                                                                                        loc__func = ext__ivy__symbol__flat(self__COLON__ivy__symbol, st);
                                                                                    }
                                                                                    else {
                                                                                        loc__func = ext__ivy__expr__flat(s.func, st);
                                                                                    }
                                                                                }
                                                                            }
                                                                        }
                                                                        res = ext__ivy__app__make(loc__func, loc__args, s.ann);
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
    }
    return res;
}
ivyc_s1::ivy__expr ivyc_s1::ext__ivy__get_app(ivyc_s1::ivy__expr s, vector__ivy__expr__& args){
    ivyc_s1::ivy__expr func;
    {
        bool loc__0;
    loc__0 = (bool)___ivy_choose(0,"loc:0",15638);
        {
            {
                ivy__app self__COLON__ivy__app;
                if (((s).tag == 1)) self__COLON__ivy__app = ivyc_s1::ivy__expr::unwrap< ivyc_s1::ivy__app >(s);
                if(((s).tag == 1)){
                    loc__0 = ext__ivy__app__is(self__COLON__ivy__app, ivy__verb__dot);
                }
                else {
                    loc__0 = ext__ivy__expr__is(s, ivy__verb__dot);
                }
            }
            if(loc__0){
                {
                    {
                        ivyc_s1::ivy__expr loc__0;
                        {
                            {
                                ivy__app self__COLON__ivy__app;
                                if (((s).tag == 1)) self__COLON__ivy__app = ivyc_s1::ivy__expr::unwrap< ivyc_s1::ivy__app >(s);
                                if(((s).tag == 1)){
                                    loc__0 = ext__ivy__app__get_arg(self__COLON__ivy__app, 0);
                                }
                                else {
                                    loc__0 = ext__ivy__expr__get_arg(s, 0);
                                }
                            }
                            {
                                ivyc_s1::ivy__expr loc__lhs;
                                {
                                    loc__lhs = loc__0;
                                    {
                                        ivyc_s1::ivy__expr loc__0;
                                        {
                                            {
                                                ivy__app self__COLON__ivy__app;
                                                if (((loc__lhs).tag == 1)) self__COLON__ivy__app = ivyc_s1::ivy__expr::unwrap< ivyc_s1::ivy__app >(loc__lhs);
                                                if(((loc__lhs).tag == 1)){
                                                    loc__0 = ext__ivy__app__get_type(self__COLON__ivy__app);
                                                }
                                                else {
                                                    loc__0 = ext__ivy__expr__get_type(loc__lhs);
                                                }
                                            }
                                            {
                                                ivyc_s1::ivy__expr loc__ty;
                                                {
                                                    loc__ty = loc__0;
                                                    {
                                                        ivyc_s1::ivy__expr loc__0;
                                                        {
                                                            {
                                                                ivy__app self__COLON__ivy__app;
                                                                if (((s).tag == 1)) self__COLON__ivy__app = ivyc_s1::ivy__expr::unwrap< ivyc_s1::ivy__app >(s);
                                                                if(((s).tag == 1)){
                                                                    loc__0 = ext__ivy__app__get_arg(self__COLON__ivy__app, 1);
                                                                }
                                                                else {
                                                                    loc__0 = ext__ivy__expr__get_arg(s, 1);
                                                                }
                                                            }
                                                            func = ext__ivy__uncurry_func(loc__0);
                                                        }
                                                    }
                                                    ext__vector__ivy__expr____append(args, loc__lhs);
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
            else {
                {
                    {
                        ivy__app self__COLON__ivy__app;
                        if (((s).tag == 1)) self__COLON__ivy__app = ivyc_s1::ivy__expr::unwrap< ivyc_s1::ivy__app >(s);
                        if(((s).tag == 1)){
                            func = ext__ivy__app__get_func(self__COLON__ivy__app);
                        }
                        else {
                            func = ext__ivy__expr__get_func(s);
                        }
                    }
                    {
                        bool loc__0;
    loc__0 = (bool)___ivy_choose(0,"loc:0",15636);
                        {
                            {
                                ivy__app self__COLON__ivy__app;
                                if (((func).tag == 1)) self__COLON__ivy__app = ivyc_s1::ivy__expr::unwrap< ivyc_s1::ivy__app >(func);
                                if(((func).tag == 1)){
                                    loc__0 = ext__ivy__app__is(self__COLON__ivy__app, ivy__verb__dot);
                                }
                                else {
                                    loc__0 = ext__ivy__expr__is(func, ivy__verb__dot);
                                }
                            }
                            if(loc__0){
                                {
                                    {
                                        ivyc_s1::ivy__expr loc__tmp;
                                        {
                                            loc__tmp = func;
                                            func = ext__ivy__get_app(loc__tmp, args);
                                        }
                                    }
                                }
                            }
                        }
                    }
                    {
                        vector__ivy__expr__ loc__0;
                        {
                            {
                                ivy__app self__COLON__ivy__app;
                                if (((s).tag == 1)) self__COLON__ivy__app = ivyc_s1::ivy__expr::unwrap< ivyc_s1::ivy__app >(s);
                                if(((s).tag == 1)){
                                    loc__0 = ext__ivy__app__get_args(self__COLON__ivy__app);
                                }
                                else {
                                    loc__0 = ext__ivy__expr__get_args(s);
                                }
                            }
                            ext__vector__ivy__expr____extend(args, loc__0);
                        }
                    }
                }
            }
        }
    }
    return func;
}
void ivyc_s1::ext__ivy__ident_set__get(const ivy__ident_set& a, ivyc_s1::ivy__ident x, bool& y){
    {

        ivy__ident_set::const_iterator it = a.find(x);
        if (it != a.end())
            y = it->second;
    }
}
void ivyc_s1::ext__ivy__add_virtual_destructor(cpp__structdecl& s){
    {
        {
            cpp__funcdecl loc__0;
    loc__0.ftype.base.is_const = (bool)___ivy_choose(0,"loc:0",15639);
    loc__0.ftype.base.is_ref = (bool)___ivy_choose(0,"loc:0",15639);
    loc__0.ftype.is_const = (bool)___ivy_choose(0,"loc:0",15639);
    loc__0.ftype.has_initializer = (bool)___ivy_choose(0,"loc:0",15639);
    loc__0.has_body = (bool)___ivy_choose(0,"loc:0",15639);
    loc__0.is_static = (bool)___ivy_choose(0,"loc:0",15639);
    loc__0.is_virtual = (bool)___ivy_choose(0,"loc:0",15639);
            {
                loc__0 = ext__ivy__make_upcast_method(s);
                ext__vector__cpp__decl____append(s.members, ivyc_s1::cpp__decl(4, new ivyc_s1::cpp__decl::twrap<ivyc_s1::cpp__funcdecl>(loc__0)));
            }
        }
        {
            cpp__funcdecl loc__0;
    loc__0.ftype.base.is_const = (bool)___ivy_choose(0,"loc:0",15640);
    loc__0.ftype.base.is_ref = (bool)___ivy_choose(0,"loc:0",15640);
    loc__0.ftype.is_const = (bool)___ivy_choose(0,"loc:0",15640);
    loc__0.ftype.has_initializer = (bool)___ivy_choose(0,"loc:0",15640);
    loc__0.has_body = (bool)___ivy_choose(0,"loc:0",15640);
    loc__0.is_static = (bool)___ivy_choose(0,"loc:0",15640);
    loc__0.is_virtual = (bool)___ivy_choose(0,"loc:0",15640);
            {
                loc__0 = ext__ivy__make_virt_destr(s);
                ext__vector__cpp__decl____append(s.members, ivyc_s1::cpp__decl(4, new ivyc_s1::cpp__decl::twrap<ivyc_s1::cpp__funcdecl>(loc__0)));
            }
        }
    }
}
void ivyc_s1::ext__ivy__local_tracker__push_stmt(ivy__local_tracker& s, ivyc_s1::ivy__stmt stm){
    {
        ext__ivy__push_pop_ident_set__push(s.map);
        if(((stm).tag == 6)){
            {
                {
                    ivyc_s1::ivy__expr loc__0;
                    {
                        {
                            ivy__varst self__COLON__ivy__varst;
                            if (((stm).tag == 6)) self__COLON__ivy__varst = ivyc_s1::ivy__stmt::unwrap< ivyc_s1::ivy__varst >(stm);
                            if(((stm).tag == 6)){
                                loc__0 = ext__ivy__varst__get_expr(self__COLON__ivy__varst);
                            }
                            else {
                                loc__0 = ext__ivy__stmt__get_expr(stm);
                            }
                        }
                        ext__ivy__local_tracker__add_var(s, loc__0);
                    }
                }
            }
        }
    }
}
ivyc_s1::ivy__expr ivyc_s1::ext__ivy__applydot(ivyc_s1::ivy__expr arg, ivyc_s1::ivy__ident member, ivyc_s1::annot ann, const ivy__flatst& st){
    ivyc_s1::ivy__expr res;
    if(((arg).tag == 0)){
        {
            ivyc_s1::ivy__ident loc__0;
            ivyc_s1::ivy__ident loc__1;
            {
                {
                    ivy__symbol self__COLON__ivy__symbol;
                    if (((arg).tag == 0)) self__COLON__ivy__symbol = ivyc_s1::ivy__expr::unwrap< ivyc_s1::ivy__symbol >(arg);
                    if(((arg).tag == 0)){
                        loc__0 = ext__ivy__symbol__get_name(self__COLON__ivy__symbol);
                    }
                    else {
                        loc__0 = ext__ivy__expr__get_name(arg);
                    }
                }
                {
                    ivy__dotident self__COLON__ivy__dotident;
                    if (((member).tag == 2)) self__COLON__ivy__dotident = ivyc_s1::ivy__ident::unwrap< ivyc_s1::ivy__dotident >(member);
                    if(((member).tag == 2)){
                        loc__1 = ext__ivy__dotident__prefix(self__COLON__ivy__dotident, loc__0);
                    }
                    else {
                        {
                            ivy__strident self__COLON__ivy__strident;
                            if (((member).tag == 0)) self__COLON__ivy__strident = ivyc_s1::ivy__ident::unwrap< ivyc_s1::ivy__strident >(member);
                            if(((member).tag == 0)){
                                loc__1 = ext__ivy__strident__prefix(self__COLON__ivy__strident, loc__0);
                            }
                            else {
                                loc__1 = ext__ivy__ident__prefix(member, loc__0);
                            }
                        }
                    }
                }
                {
                    ivyc_s1::ivy__ident loc__name;
                    {
                        loc__name = loc__1;
                        {
                            ivyc_s1::ivy__ident loc__0;
                            bool loc__1;
    loc__1 = (bool)___ivy_choose(0,"loc:1",15643);
                            ivyc_s1::ivy__ident loc__2;
                            bool loc__3;
    loc__3 = (bool)___ivy_choose(0,"loc:3",15643);
                            ivyc_s1::ivy__ident loc__4;
                            bool loc__5;
    loc__5 = (bool)___ivy_choose(0,"loc:5",15643);
                            {
                                {
                                    ivy__symbol self__COLON__ivy__symbol;
                                    if (((arg).tag == 0)) self__COLON__ivy__symbol = ivyc_s1::ivy__expr::unwrap< ivyc_s1::ivy__symbol >(arg);
                                    if(((arg).tag == 0)){
                                        loc__0 = ext__ivy__symbol__get_name(self__COLON__ivy__symbol);
                                    }
                                    else {
                                        loc__0 = ext__ivy__expr__get_name(arg);
                                    }
                                }
                                bool __tmp5;
                                __tmp5 = false; ext__ivy__ident_set__get(st.defs, loc__0, __tmp5);
                                loc__1 = __tmp5;
                                {
                                    ivy__symbol self__COLON__ivy__symbol;
                                    if (((arg).tag == 0)) self__COLON__ivy__symbol = ivyc_s1::ivy__expr::unwrap< ivyc_s1::ivy__symbol >(arg);
                                    if(((arg).tag == 0)){
                                        loc__2 = ext__ivy__symbol__get_name(self__COLON__ivy__symbol);
                                    }
                                    else {
                                        loc__2 = ext__ivy__expr__get_name(arg);
                                    }
                                }
                                loc__3 = ext__ivy__ident_set__mem(st.locals, loc__2);
                                {
                                    ivy__symbol self__COLON__ivy__symbol;
                                    if (((arg).tag == 0)) self__COLON__ivy__symbol = ivyc_s1::ivy__expr::unwrap< ivyc_s1::ivy__symbol >(arg);
                                    if(((arg).tag == 0)){
                                        loc__4 = ext__ivy__symbol__get_name(self__COLON__ivy__symbol);
                                    }
                                    else {
                                        loc__4 = ext__ivy__expr__get_name(arg);
                                    }
                                }
                                loc__5 = ext__ivy__ident_set__mem(st.globals, loc__4);
                                if((st.absolute || st.defining || (loc__1 && !loc__3 && !loc__5))){
                                    {
                                        res = ext__ivy__symbol__make(loc__name, ann);
                                        ext__ivy__check_defined(loc__name, st, ann);
                                    }
                                }
                                else {
                                    {
                                        {
                                            ivyc_s1::ivy__expr loc__0;
                                            {
                                                loc__0 = ext__ivy__symbol__make(member, ann);
                                                res = ext__ivy__dot__make(arg, loc__0, ann);
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
    }
    else {
        {
            {
                ivyc_s1::ivy__expr loc__0;
                {
                    loc__0 = ext__ivy__symbol__make(member, ann);
                    res = ext__ivy__dot__make(arg, loc__0, ann);
                }
            }
        }
    }
    return res;
}
ivyc_s1::ivy__stmt ivyc_s1::ext__ivy__asgn__typeinfer_desugar(const ivy__asgn& s, bool desugar, ivy__typeinferst& st){
    ivyc_s1::ivy__stmt ress;
    {
        ivy__asgn loc__res;
        {
            loc__res = s;
            {
                bool loc__ok;
    loc__ok = (bool)___ivy_choose(0,"loc:ok",15653);
                {
                    loc__ok = true;
                    ext__ivy__bottom_up_type(loc__res.lhs, st, loc__ok);
                    ext__ivy__bottom_up_type(loc__res.rhs, st, loc__ok);
                    if(loc__ok){
                        {
                            {
                                bool loc__0;
    loc__0 = (bool)___ivy_choose(0,"loc:0",15650);
                                ivyc_s1::ivy__expr loc__1;
                                {
                                    {
                                        ivy__app self__COLON__ivy__app;
                                        if (((loc__res.lhs).tag == 1)) self__COLON__ivy__app = ivyc_s1::ivy__expr::unwrap< ivyc_s1::ivy__app >(loc__res.lhs);
                                        if(((loc__res.lhs).tag == 1)){
                                            loc__0 = ext__ivy__app__is_typed(self__COLON__ivy__app, ivy__verb__varv);
                                        }
                                        else {
                                            loc__0 = ext__ivy__expr__is_typed(loc__res.lhs, ivy__verb__varv);
                                        }
                                    }
                                    {
                                        ivy__app self__COLON__ivy__app;
                                        if (((loc__res.lhs).tag == 1)) self__COLON__ivy__app = ivyc_s1::ivy__expr::unwrap< ivyc_s1::ivy__app >(loc__res.lhs);
                                        if(((loc__res.lhs).tag == 1)){
                                            loc__1 = ext__ivy__app__get_arg(self__COLON__ivy__app, 0);
                                        }
                                        else {
                                            loc__1 = ext__ivy__expr__get_arg(loc__res.lhs, 0);
                                        }
                                    }
                                    {
                                        ivyc_s1::ivy__expr loc__lhs;
                                        {
                                            loc__lhs = (loc__0 ? loc__1 : loc__res.lhs);
                                            {
                                                bool loc__0;
    loc__0 = (bool)___ivy_choose(0,"loc:0",15648);
                                                {
                                                    {
                                                        ivy__app self__COLON__ivy__app;
                                                        if (((loc__lhs).tag == 1)) self__COLON__ivy__app = ivyc_s1::ivy__expr::unwrap< ivyc_s1::ivy__app >(loc__lhs);
                                                        if(((loc__lhs).tag == 1)){
                                                            loc__0 = ext__ivy__app__is(self__COLON__ivy__app, ivy__verb__colon);
                                                        }
                                                        else {
                                                            loc__0 = ext__ivy__expr__is(loc__lhs, ivy__verb__colon);
                                                        }
                                                    }
                                                    if(loc__0){
                                                        {
                                                            ivyc_s1::ivy__expr loc__0;
                                                            {
                                                                {
                                                                    ivy__app self__COLON__ivy__app;
                                                                    if (((loc__lhs).tag == 1)) self__COLON__ivy__app = ivyc_s1::ivy__expr::unwrap< ivyc_s1::ivy__app >(loc__lhs);
                                                                    if(((loc__lhs).tag == 1)){
                                                                        loc__0 = ext__ivy__app__get_arg(self__COLON__ivy__app, 1);
                                                                    }
                                                                    else {
                                                                        loc__0 = ext__ivy__expr__get_arg(loc__lhs, 1);
                                                                    }
                                                                }
                                                                ext__ivy__make_cast(loc__0, loc__res.rhs, st);
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                            ivyc_s1::ivy__expr __tmp6;
                                            ivyc_s1::ivy__expr __tmp7;
                                            __tmp6 = loc__res.lhs; __tmp7 = loc__res.rhs; ext__ivy__type_unify_exprs(__tmp6, __tmp7, st.tc.m);
                                            loc__res.lhs = __tmp6;
                                            loc__res.rhs = __tmp7;
                                        }
                                    }
                                }
                            }
                        }
                    }
                    ress = ivyc_s1::ivy__stmt(0, new ivyc_s1::ivy__stmt::twrap<ivyc_s1::ivy__asgn>(loc__res));
                    if(desugar){
                        {
                            vector__ivy__stmt__ loc__vsts;
                            {
                                loc__vsts = ext__ivy__desugar_asgn(ress);
                                if((0 < vector__ivy__stmt____end(loc__vsts))){
                                    {
                                        ext__vector__ivy__stmt____append(loc__vsts, ress);
                                        {
                                            ivyc_s1::annot loc__0;
                                            {
                                                {
                                                    ivy__app self__COLON__ivy__app;
                                                    if (((loc__res.lhs).tag == 1)) self__COLON__ivy__app = ivyc_s1::ivy__expr::unwrap< ivyc_s1::ivy__app >(loc__res.lhs);
                                                    if(((loc__res.lhs).tag == 1)){
                                                        loc__0 = ext__ivy__app__get_ann(self__COLON__ivy__app);
                                                    }
                                                    else {
                                                        {
                                                            ivy__symbol self__COLON__ivy__symbol;
                                                            if (((loc__res.lhs).tag == 0)) self__COLON__ivy__symbol = ivyc_s1::ivy__expr::unwrap< ivyc_s1::ivy__symbol >(loc__res.lhs);
                                                            if(((loc__res.lhs).tag == 0)){
                                                                loc__0 = ext__ivy__symbol__get_ann(self__COLON__ivy__symbol);
                                                            }
                                                            else {
                                                                loc__0 = ext__ivy__expr__get_ann(loc__res.lhs);
                                                            }
                                                        }
                                                    }
                                                }
                                                ress = ext__ivy__sequence__fold_right(loc__vsts, loc__0);
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
    }
    return ress;
}
ivyc_s1::ivy__header ivyc_s1::ext__ivy__header__flat_int(const ivy__header& s, ivy__flatst& st){
    ivyc_s1::ivy__header res;
    {
        res.filename = s.filename;
    }
    return res;
}
ivyc_s1::vector__cpp__expr__ ivyc_s1::ext__cpp__expr__get_args(ivyc_s1::cpp__expr s){
    ivyc_s1::vector__cpp__expr__ res;
    {
    }
    return res;
}
ivyc_s1::ivy__vardc ivyc_s1::ext__ivy__vardc__typeinfer_int(const ivy__vardc& s, ivy__typeinferst& st){
    ivyc_s1::ivy__vardc res;
    res.is_destructor = (bool)___ivy_choose(0,"fml:res",0);
    res.has_def = (bool)___ivy_choose(0,"fml:res",0);
    {
        res = s;
        if(res.has_def){
            {
                vector__ivy__expr__ loc__0;
                {
                    loc__0 = ext__ivy__get_func_params(res.typing);
                    {
                        vector__ivy__expr__ loc__prms;
                        {
                            loc__prms = loc__0;
                            ext__ivy__setup_formals(loc__prms, true, st);
                            {
                                bool loc__ok;
    loc__ok = (bool)___ivy_choose(0,"loc:ok",15658);
                                {
                                    loc__ok = true;
                                    ext__ivy__bottom_up_type(res.def, st, loc__ok);
                                    ext__ivy__setup_formals(loc__prms, false, st);
                                    if(loc__ok){
                                        {
                                            {
                                                bool loc__0;
    loc__0 = (bool)___ivy_choose(0,"loc:0",15656);
                                                {
                                                    {
                                                        ivy__app self__COLON__ivy__app;
                                                        if (((res.typing).tag == 1)) self__COLON__ivy__app = ivyc_s1::ivy__expr::unwrap< ivyc_s1::ivy__app >(res.typing);
                                                        if(((res.typing).tag == 1)){
                                                            loc__0 = ext__ivy__app__is(self__COLON__ivy__app, ivy__verb__colon);
                                                        }
                                                        else {
                                                            loc__0 = ext__ivy__expr__is(res.typing, ivy__verb__colon);
                                                        }
                                                    }
                                                    if(loc__0){
                                                        {
                                                            ivyc_s1::ivy__expr loc__0;
                                                            {
                                                                {
                                                                    ivy__app self__COLON__ivy__app;
                                                                    if (((res.typing).tag == 1)) self__COLON__ivy__app = ivyc_s1::ivy__expr::unwrap< ivyc_s1::ivy__app >(res.typing);
                                                                    if(((res.typing).tag == 1)){
                                                                        loc__0 = ext__ivy__app__get_arg(self__COLON__ivy__app, 1);
                                                                    }
                                                                    else {
                                                                        loc__0 = ext__ivy__expr__get_arg(res.typing, 1);
                                                                    }
                                                                }
                                                                ext__ivy__make_cast(loc__0, res.def, st);
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                            ivyc_s1::ivy__expr __tmp8;
                                            ivyc_s1::ivy__expr __tmp9;
                                            __tmp8 = res.typing; __tmp9 = res.def; ext__ivy__type_unify_exprs(__tmp8, __tmp9, st.tc.m);
                                            res.typing = __tmp8;
                                            res.def = __tmp9;
                                            {
                                                ivyc_s1::ivy__expr loc__0;
                                                {
                                                    ivyc_s1::ivy__expr __tmp10;
                                                    __tmp10 = res.typing; ext__ivy__canon_typing(__tmp10);
                                                    loc__0 = __tmp10;
                                                    ext__ivy__type_context__set(st.tc, loc__0);
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
    }
    return res;
}
ivyc_s1::cpp__expr ivyc_s1::ext__ivy__fix_variant_type(ivyc_s1::ivy__expr t, ivy__tocppst& st){
    ivyc_s1::cpp__expr res;
    {
        bool loc__0;
    loc__0 = (bool)___ivy_choose(0,"loc:0",15665);
        {
            loc__0 = ext__ivy__is_variant_type(t, st);
            if(loc__0){
                {
                    {
                        ivyc_s1::cpp__expr loc__cppty;
                        {
                            {
                                ivy__app self__COLON__ivy__app;
                                if (((t).tag == 1)) self__COLON__ivy__app = ivyc_s1::ivy__expr::unwrap< ivyc_s1::ivy__app >(t);
                                if(((t).tag == 1)){
                                    loc__cppty = ext__ivy__app__to_cpp(self__COLON__ivy__app, st);
                                }
                                else {
                                    {
                                        ivy__symbol self__COLON__ivy__symbol;
                                        if (((t).tag == 0)) self__COLON__ivy__symbol = ivyc_s1::ivy__expr::unwrap< ivyc_s1::ivy__symbol >(t);
                                        if(((t).tag == 0)){
                                            loc__cppty = ext__ivy__symbol__to_cpp(self__COLON__ivy__symbol, st);
                                        }
                                        else {
                                            loc__cppty = ext__ivy__expr__to_cpp(t, st);
                                        }
                                    }
                                }
                            }
                            {
                                cpp__strident loc__s;
                                {
                                    loc__s.val = __lit<str>("ptr");
                                    {
                                        ivyc_s1::cpp__ident loc__0;
                                        {
                                            {
                                                cpp__symbol self__COLON__cpp__symbol;
                                                if (((loc__cppty).tag == 0)) self__COLON__cpp__symbol = ivyc_s1::cpp__expr::unwrap< ivyc_s1::cpp__symbol >(loc__cppty);
                                                if(((loc__cppty).tag == 0)){
                                                    loc__0 = ext__cpp__symbol__get_name(self__COLON__cpp__symbol);
                                                }
                                                else {
                                                    loc__0 = ext__cpp__expr__get_name(loc__cppty);
                                                }
                                            }
                                            ext__vector__cpp__ident____append(loc__s.subscrs, loc__0);
                                        }
                                    }
                                    {
                                        ivyc_s1::cpp__ident loc__0;
                                        ivyc_s1::cpp__ident loc__1;
                                        ivyc_s1::annot loc__2;
                                        {
                                            loc__0 = ext__cpp__strident__make(__lit<str>("ivy"));
                                            loc__1 = ext__cpp__strident__prefix(loc__s, loc__0);
                                            {
                                                ivy__app self__COLON__ivy__app;
                                                if (((t).tag == 1)) self__COLON__ivy__app = ivyc_s1::ivy__expr::unwrap< ivyc_s1::ivy__app >(t);
                                                if(((t).tag == 1)){
                                                    loc__2 = ext__ivy__app__get_ann(self__COLON__ivy__app);
                                                }
                                                else {
                                                    {
                                                        ivy__symbol self__COLON__ivy__symbol;
                                                        if (((t).tag == 0)) self__COLON__ivy__symbol = ivyc_s1::ivy__expr::unwrap< ivyc_s1::ivy__symbol >(t);
                                                        if(((t).tag == 0)){
                                                            loc__2 = ext__ivy__symbol__get_ann(self__COLON__ivy__symbol);
                                                        }
                                                        else {
                                                            loc__2 = ext__ivy__expr__get_ann(t);
                                                        }
                                                    }
                                                }
                                            }
                                            res = ext__cpp__symbol__make(loc__1, loc__2);
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
            else {
                {
                    {
                        ivy__app self__COLON__ivy__app;
                        if (((t).tag == 1)) self__COLON__ivy__app = ivyc_s1::ivy__expr::unwrap< ivyc_s1::ivy__app >(t);
                        if(((t).tag == 1)){
                            res = ext__ivy__app__to_cpp(self__COLON__ivy__app, st);
                        }
                        else {
                            {
                                ivy__symbol self__COLON__ivy__symbol;
                                if (((t).tag == 0)) self__COLON__ivy__symbol = ivyc_s1::ivy__expr::unwrap< ivyc_s1::ivy__symbol >(t);
                                if(((t).tag == 0)){
                                    res = ext__ivy__symbol__to_cpp(self__COLON__ivy__symbol, st);
                                }
                                else {
                                    res = ext__ivy__expr__to_cpp(t, st);
                                }
                            }
                        }
                    }
                }
            }
        }
    }
    return res;
}
unsigned long long ivyc_s1::ext__vector__pretty__token____domain__next(unsigned long long x){
    unsigned long long y;
    y = (unsigned long long)___ivy_choose(0,"fml:y",0);
    {
        y = (x + 1);
    }
    return y;
}
ivyc_s1::ivy__prototype ivyc_s1::ext__ivy__actdc__get_proto(const ivy__actdc& s){
    ivyc_s1::ivy__prototype res;
    res.has_ret = (bool)___ivy_choose(0,"fml:res",0);
    res.ret.is_input = (bool)___ivy_choose(0,"fml:res",0);
    res.ret.inpos = (unsigned long long)___ivy_choose(0,"fml:res",0);
    res.ret.is_output = (bool)___ivy_choose(0,"fml:res",0);
    res.ret.outpos = (unsigned long long)___ivy_choose(0,"fml:res",0);
    res.ret.is_ref = (bool)___ivy_choose(0,"fml:res",0);
    res.ret.is_const = (bool)___ivy_choose(0,"fml:res",0);
    if(s.has_proto){
        res = s.proto;
    }
    else {
        {
            ivy__param_map loc__0;
            {
                loc__0 = ext__ivy__param_set(s.inputs);
                {
                    ivy__param_map loc__inps;
                    {
                        loc__inps = loc__0;
                        {
                            ivy__param_map loc__0;
                            {
                                loc__0 = ext__ivy__param_set(s.outputs);
                                {
                                    ivy__param_map loc__outs;
                                    {
                                        loc__outs = loc__0;
                                        {
                                            unsigned long long loc__idx;
    loc__idx = (unsigned long long)___ivy_choose(0,"loc:idx",15674);
                                            {
                                                loc__idx = vector__ivy__expr____begin(s.inputs);
                                                while((loc__idx < vector__ivy__expr____end(s.inputs))){
                                                    {
                                                        ivy__prototype_argument loc__arg;
    loc__arg.is_input = (bool)___ivy_choose(0,"loc:arg",15668);
    loc__arg.inpos = (unsigned long long)___ivy_choose(0,"loc:arg",15668);
    loc__arg.is_output = (bool)___ivy_choose(0,"loc:arg",15668);
    loc__arg.outpos = (unsigned long long)___ivy_choose(0,"loc:arg",15668);
    loc__arg.is_ref = (bool)___ivy_choose(0,"loc:arg",15668);
    loc__arg.is_const = (bool)___ivy_choose(0,"loc:arg",15668);
                                                        {
                                                            loc__arg.name = vector__ivy__expr____value(s.inputs,loc__idx);
                                                            {
                                                                ivyc_s1::ivy__expr loc__0;
                                                                ivyc_s1::ivy__ident loc__1;
                                                                {
                                                                    {
                                                                        ivy__app self__COLON__ivy__app;
                                                                        if (((loc__arg.name).tag == 1)) self__COLON__ivy__app = ivyc_s1::ivy__expr::unwrap< ivyc_s1::ivy__app >(loc__arg.name);
                                                                        if(((loc__arg.name).tag == 1)){
                                                                            loc__0 = ext__ivy__app__get_arg(self__COLON__ivy__app, 0);
                                                                        }
                                                                        else {
                                                                            loc__0 = ext__ivy__expr__get_arg(loc__arg.name, 0);
                                                                        }
                                                                    }
                                                                    {
                                                                        ivy__symbol self__COLON__ivy__symbol;
                                                                        if (((loc__0).tag == 0)) self__COLON__ivy__symbol = ivyc_s1::ivy__expr::unwrap< ivyc_s1::ivy__symbol >(loc__0);
                                                                        if(((loc__0).tag == 0)){
                                                                            loc__1 = ext__ivy__symbol__get_name(self__COLON__ivy__symbol);
                                                                        }
                                                                        else {
                                                                            loc__1 = ext__ivy__expr__get_name(loc__0);
                                                                        }
                                                                    }
                                                                    {
                                                                        ivyc_s1::ivy__ident loc__id;
                                                                        {
                                                                            loc__id = loc__1;
                                                                            loc__arg.is_input = true;
                                                                            loc__arg.inpos = loc__idx;
                                                                            loc__arg.is_output = ext__ivy__param_map__mem(loc__outs, loc__id);
                                                                            if(loc__arg.is_output){
                                                                                loc__arg.outpos = ivy__param_map__value(loc__outs,loc__id);
                                                                            }
                                                                            else {
                                                                                {
                                                                                    loc__arg.is_const = true;
                                                                                }
                                                                            }
                                                                            loc__arg.is_ref = true;
                                                                            ext__vector__ivy__prototype_argument____append(res.args, loc__arg);
                                                                            loc__idx = ext__vector__ivy__expr____domain__next(loc__idx);
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                                {
                                                    ivyc_s1::ivy__expr loc__0;
                                                    ivyc_s1::ivy__ident loc__1;
                                                    bool loc__2;
    loc__2 = (bool)___ivy_choose(0,"loc:2",15673);
                                                    {
                                                        {
                                                            ivy__app self__COLON__ivy__app;
                                                            if (((vector__ivy__expr____value(s.outputs,0)).tag == 1)) self__COLON__ivy__app = ivyc_s1::ivy__expr::unwrap< ivyc_s1::ivy__app >(vector__ivy__expr____value(s.outputs,0));
                                                            if(((vector__ivy__expr____value(s.outputs,0)).tag == 1)){
                                                                loc__0 = ext__ivy__app__get_arg(self__COLON__ivy__app, 0);
                                                            }
                                                            else {
                                                                loc__0 = ext__ivy__expr__get_arg(vector__ivy__expr____value(s.outputs,0), 0);
                                                            }
                                                        }
                                                        {
                                                            ivy__symbol self__COLON__ivy__symbol;
                                                            if (((loc__0).tag == 0)) self__COLON__ivy__symbol = ivyc_s1::ivy__expr::unwrap< ivyc_s1::ivy__symbol >(loc__0);
                                                            if(((loc__0).tag == 0)){
                                                                loc__1 = ext__ivy__symbol__get_name(self__COLON__ivy__symbol);
                                                            }
                                                            else {
                                                                loc__1 = ext__ivy__expr__get_name(loc__0);
                                                            }
                                                        }
                                                        loc__2 = ext__ivy__param_map__mem(loc__inps, loc__1);
                                                        if(((vector__ivy__expr____end(s.outputs) == 1) && !loc__2)){
                                                            {
                                                                res.has_ret = true;
                                                                res.ret.name = vector__ivy__expr____value(s.outputs,0);
                                                                res.ret.is_output = true;
                                                                res.ret.outpos = 0;
                                                            }
                                                        }
                                                        else {
                                                            {
                                                                loc__idx = 0;
                                                                while((loc__idx < vector__ivy__expr____end(s.outputs))){
                                                                    {
                                                                        ivy__prototype_argument loc__arg;
    loc__arg.is_input = (bool)___ivy_choose(0,"loc:arg",15672);
    loc__arg.inpos = (unsigned long long)___ivy_choose(0,"loc:arg",15672);
    loc__arg.is_output = (bool)___ivy_choose(0,"loc:arg",15672);
    loc__arg.outpos = (unsigned long long)___ivy_choose(0,"loc:arg",15672);
    loc__arg.is_ref = (bool)___ivy_choose(0,"loc:arg",15672);
    loc__arg.is_const = (bool)___ivy_choose(0,"loc:arg",15672);
                                                                        {
                                                                            loc__arg.name = vector__ivy__expr____value(s.outputs,loc__idx);
                                                                            {
                                                                                ivyc_s1::ivy__expr loc__0;
                                                                                ivyc_s1::ivy__ident loc__1;
                                                                                {
                                                                                    {
                                                                                        ivy__app self__COLON__ivy__app;
                                                                                        if (((loc__arg.name).tag == 1)) self__COLON__ivy__app = ivyc_s1::ivy__expr::unwrap< ivyc_s1::ivy__app >(loc__arg.name);
                                                                                        if(((loc__arg.name).tag == 1)){
                                                                                            loc__0 = ext__ivy__app__get_arg(self__COLON__ivy__app, 0);
                                                                                        }
                                                                                        else {
                                                                                            loc__0 = ext__ivy__expr__get_arg(loc__arg.name, 0);
                                                                                        }
                                                                                    }
                                                                                    {
                                                                                        ivy__symbol self__COLON__ivy__symbol;
                                                                                        if (((loc__0).tag == 0)) self__COLON__ivy__symbol = ivyc_s1::ivy__expr::unwrap< ivyc_s1::ivy__symbol >(loc__0);
                                                                                        if(((loc__0).tag == 0)){
                                                                                            loc__1 = ext__ivy__symbol__get_name(self__COLON__ivy__symbol);
                                                                                        }
                                                                                        else {
                                                                                            loc__1 = ext__ivy__expr__get_name(loc__0);
                                                                                        }
                                                                                    }
                                                                                    {
                                                                                        ivyc_s1::ivy__ident loc__id;
                                                                                        {
                                                                                            loc__id = loc__1;
                                                                                            {
                                                                                                bool loc__0;
    loc__0 = (bool)___ivy_choose(0,"loc:0",15669);
                                                                                                {
                                                                                                    loc__0 = ext__ivy__param_map__mem(loc__inps, loc__id);
                                                                                                    if(!loc__0){
                                                                                                        {
                                                                                                            loc__arg.is_output = true;
                                                                                                            loc__arg.outpos = loc__idx;
                                                                                                            loc__arg.is_ref = true;
                                                                                                            ext__vector__ivy__prototype_argument____append(res.args, loc__arg);
                                                                                                        }
                                                                                                    }
                                                                                                }
                                                                                            }
                                                                                            loc__idx = ext__vector__ivy__expr____domain__next(loc__idx);
                                                                                        }
                                                                                    }
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
    }
    return res;
}
ivyc_s1::ivy__initdc ivyc_s1::ext__ivy__initdc__flat_int(const ivy__initdc& s, ivy__flatst& st){
    ivyc_s1::ivy__initdc res;
    {
        {
            ivy__varst self__COLON__ivy__varst;
            if (((s.body).tag == 6)) self__COLON__ivy__varst = ivyc_s1::ivy__stmt::unwrap< ivyc_s1::ivy__varst >(s.body);
            if(((s.body).tag == 6)){
                res.body = ext__ivy__varst__flat(self__COLON__ivy__varst, st);
            }
            else {
                {
                    ivy__whilest self__COLON__ivy__whilest;
                    if (((s.body).tag == 4)) self__COLON__ivy__whilest = ivyc_s1::ivy__stmt::unwrap< ivyc_s1::ivy__whilest >(s.body);
                    if(((s.body).tag == 4)){
                        res.body = ext__ivy__whilest__flat(self__COLON__ivy__whilest, st);
                    }
                    else {
                        {
                            ivy__ifst self__COLON__ivy__ifst;
                            if (((s.body).tag == 3)) self__COLON__ivy__ifst = ivyc_s1::ivy__stmt::unwrap< ivyc_s1::ivy__ifst >(s.body);
                            if(((s.body).tag == 3)){
                                res.body = ext__ivy__ifst__flat(self__COLON__ivy__ifst, st);
                            }
                            else {
                                {
                                    ivy__sequence self__COLON__ivy__sequence;
                                    if (((s.body).tag == 1)) self__COLON__ivy__sequence = ivyc_s1::ivy__stmt::unwrap< ivyc_s1::ivy__sequence >(s.body);
                                    if(((s.body).tag == 1)){
                                        res.body = ext__ivy__sequence__flat(self__COLON__ivy__sequence, st);
                                    }
                                    else {
                                        {
                                            ivy__asgn self__COLON__ivy__asgn;
                                            if (((s.body).tag == 0)) self__COLON__ivy__asgn = ivyc_s1::ivy__stmt::unwrap< ivyc_s1::ivy__asgn >(s.body);
                                            if(((s.body).tag == 0)){
                                                res.body = ext__ivy__asgn__flat(self__COLON__ivy__asgn, st);
                                            }
                                            else {
                                                res.body = ext__ivy__stmt__flat(s.body, st);
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
    }
    return res;
}
ivyc_s1::ivy__instantiatedc ivyc_s1::ext__ivy__find_auto_inst(ivyc_s1::ivy__ident id, const ivy__flatst& st, bool& ok){
    ivyc_s1::ivy__instantiatedc idc;
    {
        ivyc_s1::ivy__ident loc__key;
        {
            {
                ivy__symeval loc__pmap;
                {
                    loc__key = ext__ivy__make_auto_key(id, true, loc__pmap);
                    {
                        bool loc__0;
    loc__0 = (bool)___ivy_choose(0,"loc:0",15680);
                        {
                            loc__0 = ext__ivy__ident_to_instantiatedc__mem(st.autodefs, loc__key);
                            if(loc__0){
                                {
                                    idc = ivy__ident_to_instantiatedc__value(st.autodefs,loc__key);
                                    {
                                        ivyc_s1::ivy__decl loc__foo;
                                        {
                                            loc__foo = ivyc_s1::ivy__decl(8, new ivyc_s1::ivy__decl::twrap<ivyc_s1::ivy__instantiatedc>(idc));
                                            ext__ivy__subst_vector(idc.prms, loc__pmap);
                                            ok = true;
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
    }
    return idc;
}
void ivyc_s1::ext__ivy__bottom_up_type(ivyc_s1::ivy__expr& e, const ivy__typeinferst& st, bool& ok){
    if(((e).tag == 0)){
        {
            ivy__verb loc__0;
    loc__0 = (ivy__verb)___ivy_choose(0,"loc:0",15689);
            ivy__verb loc__1;
    loc__1 = (ivy__verb)___ivy_choose(0,"loc:1",15689);
            {
                {
                    ivy__symbol self__COLON__ivy__symbol;
                    if (((e).tag == 0)) self__COLON__ivy__symbol = ivyc_s1::ivy__expr::unwrap< ivyc_s1::ivy__symbol >(e);
                    if(((e).tag == 0)){
                        loc__0 = ext__ivy__symbol__get_verb(self__COLON__ivy__symbol);
                    }
                    else {
                        loc__0 = ext__ivy__expr__get_verb(e);
                    }
                }
                {
                    ivy__symbol self__COLON__ivy__symbol;
                    if (((e).tag == 0)) self__COLON__ivy__symbol = ivyc_s1::ivy__expr::unwrap< ivyc_s1::ivy__symbol >(e);
                    if(((e).tag == 0)){
                        loc__1 = ext__ivy__symbol__get_verb(self__COLON__ivy__symbol);
                    }
                    else {
                        loc__1 = ext__ivy__expr__get_verb(e);
                    }
                }
                if(((loc__0 == ivy__verb__none) || (loc__1 == ivy__verb__logvar))){
                    {
                        ivyc_s1::ivy__ident loc__0;
                        {
                            {
                                ivy__symbol self__COLON__ivy__symbol;
                                if (((e).tag == 0)) self__COLON__ivy__symbol = ivyc_s1::ivy__expr::unwrap< ivyc_s1::ivy__symbol >(e);
                                if(((e).tag == 0)){
                                    loc__0 = ext__ivy__symbol__get_name(self__COLON__ivy__symbol);
                                }
                                else {
                                    loc__0 = ext__ivy__expr__get_name(e);
                                }
                            }
                            {
                                ivyc_s1::ivy__ident loc__name;
                                {
                                    loc__name = loc__0;
                                    {
                                        bool loc__0;
    loc__0 = (bool)___ivy_choose(0,"loc:0",15684);
                                        {
                                            loc__0 = ext__ivy__symeval__mem(st.tc.m, loc__name);
                                            if(loc__0){
                                                {
                                                    ivyc_s1::annot loc__0;
                                                    {
                                                        {
                                                            ivy__app self__COLON__ivy__app;
                                                            if (((e).tag == 1)) self__COLON__ivy__app = ivyc_s1::ivy__expr::unwrap< ivyc_s1::ivy__app >(e);
                                                            if(((e).tag == 1)){
                                                                loc__0 = ext__ivy__app__get_ann(self__COLON__ivy__app);
                                                            }
                                                            else {
                                                                {
                                                                    ivy__symbol self__COLON__ivy__symbol;
                                                                    if (((e).tag == 0)) self__COLON__ivy__symbol = ivyc_s1::ivy__expr::unwrap< ivyc_s1::ivy__symbol >(e);
                                                                    if(((e).tag == 0)){
                                                                        loc__0 = ext__ivy__symbol__get_ann(self__COLON__ivy__symbol);
                                                                    }
                                                                    else {
                                                                        loc__0 = ext__ivy__expr__get_ann(e);
                                                                    }
                                                                }
                                                            }
                                                        }
                                                        e = ext__ivy__colon__make(e, ivy__symeval__value(st.tc.m,loc__name), loc__0);
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
                else {
                    {
                        ivy__verb loc__0;
    loc__0 = (ivy__verb)___ivy_choose(0,"loc:0",15688);
                        {
                            {
                                ivy__symbol self__COLON__ivy__symbol;
                                if (((e).tag == 0)) self__COLON__ivy__symbol = ivyc_s1::ivy__expr::unwrap< ivyc_s1::ivy__symbol >(e);
                                if(((e).tag == 0)){
                                    loc__0 = ext__ivy__symbol__get_verb(self__COLON__ivy__symbol);
                                }
                                else {
                                    loc__0 = ext__ivy__expr__get_verb(e);
                                }
                            }
                            if((loc__0 == ivy__verb__empty)){
                                {
                                    ivyc_s1::annot loc__0;
                                    {
                                        {
                                            ivy__app self__COLON__ivy__app;
                                            if (((e).tag == 1)) self__COLON__ivy__app = ivyc_s1::ivy__expr::unwrap< ivyc_s1::ivy__app >(e);
                                            if(((e).tag == 1)){
                                                loc__0 = ext__ivy__app__get_ann(self__COLON__ivy__app);
                                            }
                                            else {
                                                {
                                                    ivy__symbol self__COLON__ivy__symbol;
                                                    if (((e).tag == 0)) self__COLON__ivy__symbol = ivyc_s1::ivy__expr::unwrap< ivyc_s1::ivy__symbol >(e);
                                                    if(((e).tag == 0)){
                                                        loc__0 = ext__ivy__symbol__get_ann(self__COLON__ivy__symbol);
                                                    }
                                                    else {
                                                        loc__0 = ext__ivy__expr__get_ann(e);
                                                    }
                                                }
                                            }
                                        }
                                        e = ext__ivy__colon__make(e, e, loc__0);
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
    }
    else {
        if(((e).tag == 1)){
            {
                bool loc__0;
    loc__0 = (bool)___ivy_choose(0,"loc:0",15724);
                {
                    {
                        ivy__app self__COLON__ivy__app;
                        if (((e).tag == 1)) self__COLON__ivy__app = ivyc_s1::ivy__expr::unwrap< ivyc_s1::ivy__app >(e);
                        if(((e).tag == 1)){
                            loc__0 = ext__ivy__app__is(self__COLON__ivy__app, ivy__verb__colon);
                        }
                        else {
                            loc__0 = ext__ivy__expr__is(e, ivy__verb__colon);
                        }
                    }
                    if(loc__0){
                        {
                            ivyc_s1::ivy__expr loc__arg;
                            {
                                {
                                    ivyc_s1::ivy__expr loc__0;
                                    {
                                        {
                                            ivy__app self__COLON__ivy__app;
                                            if (((e).tag == 1)) self__COLON__ivy__app = ivyc_s1::ivy__expr::unwrap< ivyc_s1::ivy__app >(e);
                                            if(((e).tag == 1)){
                                                loc__0 = ext__ivy__app__get_arg(self__COLON__ivy__app, 0);
                                            }
                                            else {
                                                loc__0 = ext__ivy__expr__get_arg(e, 0);
                                            }
                                        }
                                        ivyc_s1::ivy__expr __tmp11;
                                        __tmp11 = loc__0; ext__ivy__bottom_up_type(__tmp11, st, ok);
                                        loc__arg = __tmp11;
                                    }
                                }
                                {
                                    ivyc_s1::ivy__expr loc__0;
                                    ivyc_s1::annot loc__1;
                                    {
                                        {
                                            ivy__app self__COLON__ivy__app;
                                            if (((e).tag == 1)) self__COLON__ivy__app = ivyc_s1::ivy__expr::unwrap< ivyc_s1::ivy__app >(e);
                                            if(((e).tag == 1)){
                                                loc__0 = ext__ivy__app__get_arg(self__COLON__ivy__app, 1);
                                            }
                                            else {
                                                loc__0 = ext__ivy__expr__get_arg(e, 1);
                                            }
                                        }
                                        {
                                            ivy__app self__COLON__ivy__app;
                                            if (((e).tag == 1)) self__COLON__ivy__app = ivyc_s1::ivy__expr::unwrap< ivyc_s1::ivy__app >(e);
                                            if(((e).tag == 1)){
                                                loc__1 = ext__ivy__app__get_ann(self__COLON__ivy__app);
                                            }
                                            else {
                                                {
                                                    ivy__symbol self__COLON__ivy__symbol;
                                                    if (((e).tag == 0)) self__COLON__ivy__symbol = ivyc_s1::ivy__expr::unwrap< ivyc_s1::ivy__symbol >(e);
                                                    if(((e).tag == 0)){
                                                        loc__1 = ext__ivy__symbol__get_ann(self__COLON__ivy__symbol);
                                                    }
                                                    else {
                                                        loc__1 = ext__ivy__expr__get_ann(e);
                                                    }
                                                }
                                            }
                                        }
                                        e = ext__ivy__colon__make(loc__arg, loc__0, loc__1);
                                    }
                                }
                            }
                        }
                    }
                    else {
                        {
                            bool loc__0;
    loc__0 = (bool)___ivy_choose(0,"loc:0",15723);
                            {
                                {
                                    ivy__app self__COLON__ivy__app;
                                    if (((e).tag == 1)) self__COLON__ivy__app = ivyc_s1::ivy__expr::unwrap< ivyc_s1::ivy__app >(e);
                                    if(((e).tag == 1)){
                                        loc__0 = ext__ivy__app__is(self__COLON__ivy__app, ivy__verb__dot);
                                    }
                                    else {
                                        loc__0 = ext__ivy__expr__is(e, ivy__verb__dot);
                                    }
                                }
                                if(loc__0){
                                    {
                                        {
                                            ivyc_s1::ivy__expr loc__lhs;
                                            {
                                                {
                                                    ivyc_s1::ivy__expr loc__0;
                                                    {
                                                        {
                                                            ivy__app self__COLON__ivy__app;
                                                            if (((e).tag == 1)) self__COLON__ivy__app = ivyc_s1::ivy__expr::unwrap< ivyc_s1::ivy__app >(e);
                                                            if(((e).tag == 1)){
                                                                loc__0 = ext__ivy__app__get_arg(self__COLON__ivy__app, 0);
                                                            }
                                                            else {
                                                                loc__0 = ext__ivy__expr__get_arg(e, 0);
                                                            }
                                                        }
                                                        ivyc_s1::ivy__expr __tmp12;
                                                        __tmp12 = loc__0; ext__ivy__bottom_up_type(__tmp12, st, ok);
                                                        loc__lhs = __tmp12;
                                                    }
                                                }
                                                {
                                                    ivyc_s1::ivy__expr loc__0;
                                                    {
                                                        {
                                                            ivy__app self__COLON__ivy__app;
                                                            if (((e).tag == 1)) self__COLON__ivy__app = ivyc_s1::ivy__expr::unwrap< ivyc_s1::ivy__app >(e);
                                                            if(((e).tag == 1)){
                                                                loc__0 = ext__ivy__app__get_arg(self__COLON__ivy__app, 1);
                                                            }
                                                            else {
                                                                loc__0 = ext__ivy__expr__get_arg(e, 1);
                                                            }
                                                        }
                                                        {
                                                            ivyc_s1::ivy__expr loc__rhs;
                                                            {
                                                                loc__rhs = loc__0;
                                                                {
                                                                    ivyc_s1::annot loc__0;
                                                                    {
                                                                        {
                                                                            ivy__app self__COLON__ivy__app;
                                                                            if (((e).tag == 1)) self__COLON__ivy__app = ivyc_s1::ivy__expr::unwrap< ivyc_s1::ivy__app >(e);
                                                                            if(((e).tag == 1)){
                                                                                loc__0 = ext__ivy__app__get_ann(self__COLON__ivy__app);
                                                                            }
                                                                            else {
                                                                                {
                                                                                    ivy__symbol self__COLON__ivy__symbol;
                                                                                    if (((e).tag == 0)) self__COLON__ivy__symbol = ivyc_s1::ivy__expr::unwrap< ivyc_s1::ivy__symbol >(e);
                                                                                    if(((e).tag == 0)){
                                                                                        loc__0 = ext__ivy__symbol__get_ann(self__COLON__ivy__symbol);
                                                                                    }
                                                                                    else {
                                                                                        loc__0 = ext__ivy__expr__get_ann(e);
                                                                                    }
                                                                                }
                                                                            }
                                                                        }
                                                                        e = ext__ivy__dot__make(loc__lhs, loc__rhs, loc__0);
                                                                    }
                                                                }
                                                                {
                                                                    bool loc__0;
    loc__0 = (bool)___ivy_choose(0,"loc:0",15709);
                                                                    {
                                                                        {
                                                                            ivy__app self__COLON__ivy__app;
                                                                            if (((loc__lhs).tag == 1)) self__COLON__ivy__app = ivyc_s1::ivy__expr::unwrap< ivyc_s1::ivy__app >(loc__lhs);
                                                                            if(((loc__lhs).tag == 1)){
                                                                                loc__0 = ext__ivy__app__is(self__COLON__ivy__app, ivy__verb__colon);
                                                                            }
                                                                            else {
                                                                                loc__0 = ext__ivy__expr__is(loc__lhs, ivy__verb__colon);
                                                                            }
                                                                        }
                                                                        if(loc__0){
                                                                            {
                                                                                ivyc_s1::ivy__expr loc__0;
                                                                                {
                                                                                    {
                                                                                        ivy__app self__COLON__ivy__app;
                                                                                        if (((loc__lhs).tag == 1)) self__COLON__ivy__app = ivyc_s1::ivy__expr::unwrap< ivyc_s1::ivy__app >(loc__lhs);
                                                                                        if(((loc__lhs).tag == 1)){
                                                                                            loc__0 = ext__ivy__app__get_arg(self__COLON__ivy__app, 1);
                                                                                        }
                                                                                        else {
                                                                                            loc__0 = ext__ivy__expr__get_arg(loc__lhs, 1);
                                                                                        }
                                                                                    }
                                                                                    {
                                                                                        ivyc_s1::ivy__expr loc__ty;
                                                                                        {
                                                                                            loc__ty = loc__0;
                                                                                            if(((loc__ty).tag == 0)){
                                                                                                {
                                                                                                    ivyc_s1::ivy__ident loc__0;
                                                                                                    ivyc_s1::ivy__ident loc__1;
                                                                                                    ivyc_s1::ivy__ident loc__2;
                                                                                                    {
                                                                                                        {
                                                                                                            ivy__symbol self__COLON__ivy__symbol;
                                                                                                            if (((loc__ty).tag == 0)) self__COLON__ivy__symbol = ivyc_s1::ivy__expr::unwrap< ivyc_s1::ivy__symbol >(loc__ty);
                                                                                                            if(((loc__ty).tag == 0)){
                                                                                                                loc__0 = ext__ivy__symbol__get_name(self__COLON__ivy__symbol);
                                                                                                            }
                                                                                                            else {
                                                                                                                loc__0 = ext__ivy__expr__get_name(loc__ty);
                                                                                                            }
                                                                                                        }
                                                                                                        {
                                                                                                            ivy__symbol self__COLON__ivy__symbol;
                                                                                                            if (((loc__rhs).tag == 0)) self__COLON__ivy__symbol = ivyc_s1::ivy__expr::unwrap< ivyc_s1::ivy__symbol >(loc__rhs);
                                                                                                            if(((loc__rhs).tag == 0)){
                                                                                                                loc__1 = ext__ivy__symbol__get_name(self__COLON__ivy__symbol);
                                                                                                            }
                                                                                                            else {
                                                                                                                loc__1 = ext__ivy__expr__get_name(loc__rhs);
                                                                                                            }
                                                                                                        }
                                                                                                        {
                                                                                                            ivy__dotident self__COLON__ivy__dotident;
                                                                                                            if (((loc__1).tag == 2)) self__COLON__ivy__dotident = ivyc_s1::ivy__ident::unwrap< ivyc_s1::ivy__dotident >(loc__1);
                                                                                                            if(((loc__1).tag == 2)){
                                                                                                                loc__2 = ext__ivy__dotident__prefix(self__COLON__ivy__dotident, loc__0);
                                                                                                            }
                                                                                                            else {
                                                                                                                {
                                                                                                                    ivy__strident self__COLON__ivy__strident;
                                                                                                                    if (((loc__1).tag == 0)) self__COLON__ivy__strident = ivyc_s1::ivy__ident::unwrap< ivyc_s1::ivy__strident >(loc__1);
                                                                                                                    if(((loc__1).tag == 0)){
                                                                                                                        loc__2 = ext__ivy__strident__prefix(self__COLON__ivy__strident, loc__0);
                                                                                                                    }
                                                                                                                    else {
                                                                                                                        loc__2 = ext__ivy__ident__prefix(loc__1, loc__0);
                                                                                                                    }
                                                                                                                }
                                                                                                            }
                                                                                                        }
                                                                                                        {
                                                                                                            ivyc_s1::ivy__ident loc__name;
                                                                                                            {
                                                                                                                loc__name = loc__2;
                                                                                                                {
                                                                                                                    bool loc__0;
    loc__0 = (bool)___ivy_choose(0,"loc:0",15702);
                                                                                                                    {
                                                                                                                        loc__0 = ext__ivy__symeval__mem(st.tc.m, loc__name);
                                                                                                                        if(loc__0){
                                                                                                                            {
                                                                                                                                ivyc_s1::ivy__expr loc__0;
                                                                                                                                {
                                                                                                                                    loc__0 = ext__ivy__expr__curry(ivy__symeval__value(st.tc.m,loc__name));
                                                                                                                                    {
                                                                                                                                        ivyc_s1::ivy__expr loc__fty;
                                                                                                                                        {
                                                                                                                                            loc__fty = loc__0;
                                                                                                                                            {
                                                                                                                                                ivyc_s1::annot loc__0;
                                                                                                                                                {
                                                                                                                                                    {
                                                                                                                                                        ivy__app self__COLON__ivy__app;
                                                                                                                                                        if (((loc__rhs).tag == 1)) self__COLON__ivy__app = ivyc_s1::ivy__expr::unwrap< ivyc_s1::ivy__app >(loc__rhs);
                                                                                                                                                        if(((loc__rhs).tag == 1)){
                                                                                                                                                            loc__0 = ext__ivy__app__get_ann(self__COLON__ivy__app);
                                                                                                                                                        }
                                                                                                                                                        else {
                                                                                                                                                            {
                                                                                                                                                                ivy__symbol self__COLON__ivy__symbol;
                                                                                                                                                                if (((loc__rhs).tag == 0)) self__COLON__ivy__symbol = ivyc_s1::ivy__expr::unwrap< ivyc_s1::ivy__symbol >(loc__rhs);
                                                                                                                                                                if(((loc__rhs).tag == 0)){
                                                                                                                                                                    loc__0 = ext__ivy__symbol__get_ann(self__COLON__ivy__symbol);
                                                                                                                                                                }
                                                                                                                                                                else {
                                                                                                                                                                    loc__0 = ext__ivy__expr__get_ann(loc__rhs);
                                                                                                                                                                }
                                                                                                                                                            }
                                                                                                                                                        }
                                                                                                                                                    }
                                                                                                                                                    loc__rhs = ext__ivy__colon__make(loc__rhs, loc__fty, loc__0);
                                                                                                                                                }
                                                                                                                                            }
                                                                                                                                            {
                                                                                                                                                ivyc_s1::annot loc__0;
                                                                                                                                                {
                                                                                                                                                    {
                                                                                                                                                        ivy__app self__COLON__ivy__app;
                                                                                                                                                        if (((e).tag == 1)) self__COLON__ivy__app = ivyc_s1::ivy__expr::unwrap< ivyc_s1::ivy__app >(e);
                                                                                                                                                        if(((e).tag == 1)){
                                                                                                                                                            loc__0 = ext__ivy__app__get_ann(self__COLON__ivy__app);
                                                                                                                                                        }
                                                                                                                                                        else {
                                                                                                                                                            {
                                                                                                                                                                ivy__symbol self__COLON__ivy__symbol;
                                                                                                                                                                if (((e).tag == 0)) self__COLON__ivy__symbol = ivyc_s1::ivy__expr::unwrap< ivyc_s1::ivy__symbol >(e);
                                                                                                                                                                if(((e).tag == 0)){
                                                                                                                                                                    loc__0 = ext__ivy__symbol__get_ann(self__COLON__ivy__symbol);
                                                                                                                                                                }
                                                                                                                                                                else {
                                                                                                                                                                    loc__0 = ext__ivy__expr__get_ann(e);
                                                                                                                                                                }
                                                                                                                                                            }
                                                                                                                                                        }
                                                                                                                                                    }
                                                                                                                                                    e = ext__ivy__dot__make(loc__lhs, loc__rhs, loc__0);
                                                                                                                                                }
                                                                                                                                            }
                                                                                                                                            {
                                                                                                                                                bool loc__0;
    loc__0 = (bool)___ivy_choose(0,"loc:0",15698);
                                                                                                                                                {
                                                                                                                                                    {
                                                                                                                                                        ivy__app self__COLON__ivy__app;
                                                                                                                                                        if (((loc__fty).tag == 1)) self__COLON__ivy__app = ivyc_s1::ivy__expr::unwrap< ivyc_s1::ivy__app >(loc__fty);
                                                                                                                                                        if(((loc__fty).tag == 1)){
                                                                                                                                                            loc__0 = ext__ivy__app__is(self__COLON__ivy__app, ivy__verb__arrow);
                                                                                                                                                        }
                                                                                                                                                        else {
                                                                                                                                                            loc__0 = ext__ivy__expr__is(loc__fty, ivy__verb__arrow);
                                                                                                                                                        }
                                                                                                                                                    }
                                                                                                                                                    if(loc__0){
                                                                                                                                                        {
                                                                                                                                                            ivyc_s1::ivy__expr loc__0;
                                                                                                                                                            ivyc_s1::annot loc__1;
                                                                                                                                                            {
                                                                                                                                                                {
                                                                                                                                                                    ivy__app self__COLON__ivy__app;
                                                                                                                                                                    if (((loc__fty).tag == 1)) self__COLON__ivy__app = ivyc_s1::ivy__expr::unwrap< ivyc_s1::ivy__app >(loc__fty);
                                                                                                                                                                    if(((loc__fty).tag == 1)){
                                                                                                                                                                        loc__0 = ext__ivy__app__get_arg(self__COLON__ivy__app, 1);
                                                                                                                                                                    }
                                                                                                                                                                    else {
                                                                                                                                                                        loc__0 = ext__ivy__expr__get_arg(loc__fty, 1);
                                                                                                                                                                    }
                                                                                                                                                                }
                                                                                                                                                                {
                                                                                                                                                                    ivy__app self__COLON__ivy__app;
                                                                                                                                                                    if (((e).tag == 1)) self__COLON__ivy__app = ivyc_s1::ivy__expr::unwrap< ivyc_s1::ivy__app >(e);
                                                                                                                                                                    if(((e).tag == 1)){
                                                                                                                                                                        loc__1 = ext__ivy__app__get_ann(self__COLON__ivy__app);
                                                                                                                                                                    }
                                                                                                                                                                    else {
                                                                                                                                                                        {
                                                                                                                                                                            ivy__symbol self__COLON__ivy__symbol;
                                                                                                                                                                            if (((e).tag == 0)) self__COLON__ivy__symbol = ivyc_s1::ivy__expr::unwrap< ivyc_s1::ivy__symbol >(e);
                                                                                                                                                                            if(((e).tag == 0)){
                                                                                                                                                                                loc__1 = ext__ivy__symbol__get_ann(self__COLON__ivy__symbol);
                                                                                                                                                                            }
                                                                                                                                                                            else {
                                                                                                                                                                                loc__1 = ext__ivy__expr__get_ann(e);
                                                                                                                                                                            }
                                                                                                                                                                        }
                                                                                                                                                                    }
                                                                                                                                                                }
                                                                                                                                                                e = ext__ivy__colon__make(e, loc__0, loc__1);
                                                                                                                                                            }
                                                                                                                                                        }
                                                                                                                                                    }
                                                                                                                                                }
                                                                                                                                            }
                                                                                                                                        }
                                                                                                                                    }
                                                                                                                                }
                                                                                                                            }
                                                                                                                        }
                                                                                                                        else {
                                                                                                                            {
                                                                                                                                {
                                                                                                                                    ivy__undefined loc__0;
                                                                                                                                    ivyc_s1::annot loc__1;
                                                                                                                                    {
                                                                                                                                        loc__0 = ext__ivy__undefined__make(loc__name);
                                                                                                                                        {
                                                                                                                                            ivy__app self__COLON__ivy__app;
                                                                                                                                            if (((e).tag == 1)) self__COLON__ivy__app = ivyc_s1::ivy__expr::unwrap< ivyc_s1::ivy__app >(e);
                                                                                                                                            if(((e).tag == 1)){
                                                                                                                                                loc__1 = ext__ivy__app__get_ann(self__COLON__ivy__app);
                                                                                                                                            }
                                                                                                                                            else {
                                                                                                                                                {
                                                                                                                                                    ivy__symbol self__COLON__ivy__symbol;
                                                                                                                                                    if (((e).tag == 0)) self__COLON__ivy__symbol = ivyc_s1::ivy__expr::unwrap< ivyc_s1::ivy__symbol >(e);
                                                                                                                                                    if(((e).tag == 0)){
                                                                                                                                                        loc__1 = ext__ivy__symbol__get_ann(self__COLON__ivy__symbol);
                                                                                                                                                    }
                                                                                                                                                    else {
                                                                                                                                                        loc__1 = ext__ivy__expr__get_ann(e);
                                                                                                                                                    }
                                                                                                                                                }
                                                                                                                                            }
                                                                                                                                        }
                                                                                                                                        ext__ivy__report_error(ivyc_s1::ivy__error(6, new ivyc_s1::ivy__error::twrap<ivyc_s1::ivy__undefined>(loc__0)), loc__1);
                                                                                                                                    }
                                                                                                                                }
                                                                                                                                ok = false;
                                                                                                                            }
                                                                                                                        }
                                                                                                                    }
                                                                                                                }
                                                                                                            }
                                                                                                        }
                                                                                                    }
                                                                                                }
                                                                                            }
                                                                                            else {
                                                                                                {
                                                                                                    {
                                                                                                        ivy__not_first_order loc__0;
                                                                                                        ivyc_s1::annot loc__1;
                                                                                                        {
                                                                                                            loc__0 = ext__ivy__not_first_order__make(loc__lhs, loc__ty);
                                                                                                            {
                                                                                                                ivy__app self__COLON__ivy__app;
                                                                                                                if (((loc__lhs).tag == 1)) self__COLON__ivy__app = ivyc_s1::ivy__expr::unwrap< ivyc_s1::ivy__app >(loc__lhs);
                                                                                                                if(((loc__lhs).tag == 1)){
                                                                                                                    loc__1 = ext__ivy__app__get_ann(self__COLON__ivy__app);
                                                                                                                }
                                                                                                                else {
                                                                                                                    {
                                                                                                                        ivy__symbol self__COLON__ivy__symbol;
                                                                                                                        if (((loc__lhs).tag == 0)) self__COLON__ivy__symbol = ivyc_s1::ivy__expr::unwrap< ivyc_s1::ivy__symbol >(loc__lhs);
                                                                                                                        if(((loc__lhs).tag == 0)){
                                                                                                                            loc__1 = ext__ivy__symbol__get_ann(self__COLON__ivy__symbol);
                                                                                                                        }
                                                                                                                        else {
                                                                                                                            loc__1 = ext__ivy__expr__get_ann(loc__lhs);
                                                                                                                        }
                                                                                                                    }
                                                                                                                }
                                                                                                            }
                                                                                                            ext__ivy__report_error(ivyc_s1::ivy__error(3, new ivyc_s1::ivy__error::twrap<ivyc_s1::ivy__not_first_order>(loc__0)), loc__1);
                                                                                                        }
                                                                                                    }
                                                                                                    ok = false;
                                                                                                }
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                }
                                                                            }
                                                                        }
                                                                        else {
                                                                            {
                                                                                {
                                                                                    ivyc_s1::annot loc__0;
                                                                                    ivyc_s1::ivy__expr loc__1;
                                                                                    ivy__untyped loc__2;
                                                                                    ivyc_s1::annot loc__3;
                                                                                    {
                                                                                        {
                                                                                            ivy__app self__COLON__ivy__app;
                                                                                            if (((loc__lhs).tag == 1)) self__COLON__ivy__app = ivyc_s1::ivy__expr::unwrap< ivyc_s1::ivy__app >(loc__lhs);
                                                                                            if(((loc__lhs).tag == 1)){
                                                                                                loc__0 = ext__ivy__app__get_ann(self__COLON__ivy__app);
                                                                                            }
                                                                                            else {
                                                                                                {
                                                                                                    ivy__symbol self__COLON__ivy__symbol;
                                                                                                    if (((loc__lhs).tag == 0)) self__COLON__ivy__symbol = ivyc_s1::ivy__expr::unwrap< ivyc_s1::ivy__symbol >(loc__lhs);
                                                                                                    if(((loc__lhs).tag == 0)){
                                                                                                        loc__0 = ext__ivy__symbol__get_ann(self__COLON__ivy__symbol);
                                                                                                    }
                                                                                                    else {
                                                                                                        loc__0 = ext__ivy__expr__get_ann(loc__lhs);
                                                                                                    }
                                                                                                }
                                                                                            }
                                                                                        }
                                                                                        loc__1 = ext__ivy__empty__make(loc__0);
                                                                                        loc__2 = ext__ivy__untyped__make(loc__lhs, loc__1);
                                                                                        {
                                                                                            ivy__app self__COLON__ivy__app;
                                                                                            if (((loc__lhs).tag == 1)) self__COLON__ivy__app = ivyc_s1::ivy__expr::unwrap< ivyc_s1::ivy__app >(loc__lhs);
                                                                                            if(((loc__lhs).tag == 1)){
                                                                                                loc__3 = ext__ivy__app__get_ann(self__COLON__ivy__app);
                                                                                            }
                                                                                            else {
                                                                                                {
                                                                                                    ivy__symbol self__COLON__ivy__symbol;
                                                                                                    if (((loc__lhs).tag == 0)) self__COLON__ivy__symbol = ivyc_s1::ivy__expr::unwrap< ivyc_s1::ivy__symbol >(loc__lhs);
                                                                                                    if(((loc__lhs).tag == 0)){
                                                                                                        loc__3 = ext__ivy__symbol__get_ann(self__COLON__ivy__symbol);
                                                                                                    }
                                                                                                    else {
                                                                                                        loc__3 = ext__ivy__expr__get_ann(loc__lhs);
                                                                                                    }
                                                                                                }
                                                                                            }
                                                                                        }
                                                                                        ext__ivy__report_error(ivyc_s1::ivy__error(2, new ivyc_s1::ivy__error::twrap<ivyc_s1::ivy__untyped>(loc__2)), loc__3);
                                                                                    }
                                                                                }
                                                                                ok = false;
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                                else {
                                    {
                                        ivyc_s1::ivy__expr loc__func;
                                        {
                                            {
                                                ivyc_s1::ivy__expr loc__0;
                                                {
                                                    {
                                                        ivy__app self__COLON__ivy__app;
                                                        if (((e).tag == 1)) self__COLON__ivy__app = ivyc_s1::ivy__expr::unwrap< ivyc_s1::ivy__app >(e);
                                                        if(((e).tag == 1)){
                                                            loc__0 = ext__ivy__app__get_func(self__COLON__ivy__app);
                                                        }
                                                        else {
                                                            loc__0 = ext__ivy__expr__get_func(e);
                                                        }
                                                    }
                                                    ivyc_s1::ivy__expr __tmp13;
                                                    __tmp13 = loc__0; ext__ivy__bottom_up_type(__tmp13, st, ok);
                                                    loc__func = __tmp13;
                                                }
                                            }
                                            {
                                                vector__ivy__expr__ loc__args;
                                                {
                                                    {
                                                        vector__ivy__expr__ loc__0;
                                                        {
                                                            {
                                                                ivy__app self__COLON__ivy__app;
                                                                if (((e).tag == 1)) self__COLON__ivy__app = ivyc_s1::ivy__expr::unwrap< ivyc_s1::ivy__app >(e);
                                                                if(((e).tag == 1)){
                                                                    loc__0 = ext__ivy__app__get_args(self__COLON__ivy__app);
                                                                }
                                                                else {
                                                                    loc__0 = ext__ivy__expr__get_args(e);
                                                                }
                                                            }
                                                            vector__ivy__expr__ __tmp14;
                                                            __tmp14 = loc__0; ext__ivy__bottom_up_types(__tmp14, loc__func, st, ok);
                                                            loc__args = __tmp14;
                                                        }
                                                    }
                                                    {
                                                        ivyc_s1::annot loc__0;
                                                        {
                                                            {
                                                                ivy__app self__COLON__ivy__app;
                                                                if (((e).tag == 1)) self__COLON__ivy__app = ivyc_s1::ivy__expr::unwrap< ivyc_s1::ivy__app >(e);
                                                                if(((e).tag == 1)){
                                                                    loc__0 = ext__ivy__app__get_ann(self__COLON__ivy__app);
                                                                }
                                                                else {
                                                                    {
                                                                        ivy__symbol self__COLON__ivy__symbol;
                                                                        if (((e).tag == 0)) self__COLON__ivy__symbol = ivyc_s1::ivy__expr::unwrap< ivyc_s1::ivy__symbol >(e);
                                                                        if(((e).tag == 0)){
                                                                            loc__0 = ext__ivy__symbol__get_ann(self__COLON__ivy__symbol);
                                                                        }
                                                                        else {
                                                                            loc__0 = ext__ivy__expr__get_ann(e);
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                            e = ext__ivy__app__make(loc__func, loc__args, loc__0);
                                                        }
                                                    }
                                                    {
                                                        bool loc__0;
    loc__0 = (bool)___ivy_choose(0,"loc:0",15720);
                                                        {
                                                            {
                                                                ivy__app self__COLON__ivy__app;
                                                                if (((loc__func).tag == 1)) self__COLON__ivy__app = ivyc_s1::ivy__expr::unwrap< ivyc_s1::ivy__app >(loc__func);
                                                                if(((loc__func).tag == 1)){
                                                                    loc__0 = ext__ivy__app__is(self__COLON__ivy__app, ivy__verb__colon);
                                                                }
                                                                else {
                                                                    loc__0 = ext__ivy__expr__is(loc__func, ivy__verb__colon);
                                                                }
                                                            }
                                                            if(loc__0){
                                                                {
                                                                    ivyc_s1::ivy__expr loc__0;
                                                                    {
                                                                        {
                                                                            ivy__app self__COLON__ivy__app;
                                                                            if (((loc__func).tag == 1)) self__COLON__ivy__app = ivyc_s1::ivy__expr::unwrap< ivyc_s1::ivy__app >(loc__func);
                                                                            if(((loc__func).tag == 1)){
                                                                                loc__0 = ext__ivy__app__get_arg(self__COLON__ivy__app, 1);
                                                                            }
                                                                            else {
                                                                                loc__0 = ext__ivy__expr__get_arg(loc__func, 1);
                                                                            }
                                                                        }
                                                                        {
                                                                            ivyc_s1::ivy__expr loc__ty;
                                                                            {
                                                                                loc__ty = loc__0;
                                                                                {
                                                                                    bool loc__0;
    loc__0 = (bool)___ivy_choose(0,"loc:0",15717);
                                                                                    {
                                                                                        {
                                                                                            ivy__app self__COLON__ivy__app;
                                                                                            if (((loc__ty).tag == 1)) self__COLON__ivy__app = ivyc_s1::ivy__expr::unwrap< ivyc_s1::ivy__app >(loc__ty);
                                                                                            if(((loc__ty).tag == 1)){
                                                                                                loc__0 = ext__ivy__app__is(self__COLON__ivy__app, ivy__verb__arrow);
                                                                                            }
                                                                                            else {
                                                                                                loc__0 = ext__ivy__expr__is(loc__ty, ivy__verb__arrow);
                                                                                            }
                                                                                        }
                                                                                        if(loc__0){
                                                                                            {
                                                                                                ivyc_s1::ivy__expr loc__0;
                                                                                                ivyc_s1::annot loc__1;
                                                                                                {
                                                                                                    {
                                                                                                        ivy__app self__COLON__ivy__app;
                                                                                                        if (((loc__ty).tag == 1)) self__COLON__ivy__app = ivyc_s1::ivy__expr::unwrap< ivyc_s1::ivy__app >(loc__ty);
                                                                                                        if(((loc__ty).tag == 1)){
                                                                                                            loc__0 = ext__ivy__app__get_arg(self__COLON__ivy__app, 1);
                                                                                                        }
                                                                                                        else {
                                                                                                            loc__0 = ext__ivy__expr__get_arg(loc__ty, 1);
                                                                                                        }
                                                                                                    }
                                                                                                    {
                                                                                                        ivy__app self__COLON__ivy__app;
                                                                                                        if (((e).tag == 1)) self__COLON__ivy__app = ivyc_s1::ivy__expr::unwrap< ivyc_s1::ivy__app >(e);
                                                                                                        if(((e).tag == 1)){
                                                                                                            loc__1 = ext__ivy__app__get_ann(self__COLON__ivy__app);
                                                                                                        }
                                                                                                        else {
                                                                                                            {
                                                                                                                ivy__symbol self__COLON__ivy__symbol;
                                                                                                                if (((e).tag == 0)) self__COLON__ivy__symbol = ivyc_s1::ivy__expr::unwrap< ivyc_s1::ivy__symbol >(e);
                                                                                                                if(((e).tag == 0)){
                                                                                                                    loc__1 = ext__ivy__symbol__get_ann(self__COLON__ivy__symbol);
                                                                                                                }
                                                                                                                else {
                                                                                                                    loc__1 = ext__ivy__expr__get_ann(e);
                                                                                                                }
                                                                                                            }
                                                                                                        }
                                                                                                    }
                                                                                                    e = ext__ivy__colon__make(e, loc__0, loc__1);
                                                                                                }
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
    }
}
ivyc_s1::annot ivyc_s1::ext__cpp__funcdecl__get_ann(const cpp__funcdecl& d){
    ivyc_s1::annot res;
    res = d.ann;
    return res;
}
void ivyc_s1::ext__ivy__strident__parse(pstate& st, ivy__strident& id){
    if((st.ok && !(str__end(st.tok) == 0))){
        {
            id.val = st.tok;
            ext__pstate__consume(st);
            while((st.ok && (st.tok == __lit<str>("[")))){
                {
                    ext__pstate__consume(st);
                    {
                        ivy__strident loc__mid;
                        {
                            ext__ivy__strident__parse(st, loc__mid);
                            {
                                ivyc_s1::ivy__ident loc__sid;
                                {
                                    loc__sid = ivyc_s1::ivy__ident(0, new ivyc_s1::ivy__ident::twrap<ivyc_s1::ivy__strident>(loc__mid));
                                    while((st.ok && (st.tok == __lit<str>(".")))){
                                        {
                                            ext__pstate__consume(st);
                                            ext__ivy__strident__parse(st, loc__mid);
                                            loc__sid = ext__ivy__dotident__make(loc__sid, loc__mid);
                                        }
                                    }
                                    if((st.ok && (st.tok == __lit<str>("]")))){
                                        {
                                            ext__pstate__consume(st);
                                            ext__vector__ivy__ident____append(id.subscrs, loc__sid);
                                        }
                                    }
                                    else {
                                        st.ok = false;
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
    }
    else {
        st.ok = false;
    }
}
ivyc_s1::ivy__stmt ivyc_s1::ext__ivy__sequence__make(ivyc_s1::ivy__stmt x, ivyc_s1::ivy__stmt y, ivyc_s1::annot ann){
    ivyc_s1::ivy__stmt res;
    {
        {
            ivy__sequence loc__s;
            {
                loc__s.lhs = x;
                loc__s.rhs = y;
                loc__s.ann = ann;
                res = ivyc_s1::ivy__stmt(1, new ivyc_s1::ivy__stmt::twrap<ivyc_s1::ivy__sequence>(loc__s));
            }
        }
    }
    return res;
}
ivyc_s1::cpp__stmt ivyc_s1::ext__ivy__stmt__to_cpp(ivyc_s1::ivy__stmt s, ivy__tocppst& st){
    ivyc_s1::cpp__stmt res;
    {
    }
    return res;
}
void ivyc_s1::ext__ivy__decl__parse(pstate& st, int prio, ivyc_s1::ivy__decl& res){
    if((st.tok == __lit<str>("{"))){
        {
            ext__pstate__consume(st);
            {
                ivy__groupdc loc__s;
                {
                    ext__pstate__get_ann(st, loc__s.ann);
                    if((st.tok == __lit<str>("..."))){
                        ext__pstate__consume(st);
                    }
                    ext__ivy__decl__parse_list(st, 0, loc__s.decls);
                    if((st.tok == __lit<str>("}"))){
                        {
                            ext__pstate__consume(st);
                        }
                    }
                    else {
                        st.ok = false;
                    }
                    res = ivyc_s1::ivy__decl(1, new ivyc_s1::ivy__decl::twrap<ivyc_s1::ivy__groupdc>(loc__s));
                }
            }
        }
    }
    else {
        if((st.tok == __lit<str>("action"))){
            ext__ivy__parse_action(st, prio, ivy__action_kind__internal, res);
        }
        else {
            if((st.tok == __lit<str>("type"))){
                {
                    ext__pstate__consume(st);
                    {
                        ivy__typedc loc__s;
    loc__s.has_super = (bool)___ivy_choose(0,"loc:s",15961);
    loc__s.has_spec = (bool)___ivy_choose(0,"loc:s",15961);
                        {
                            ext__pstate__get_ann(st, loc__s.ann);
                            ext__ivy__expr__parse(st, ivy__verb_to_prio[ivy__verb__equals], loc__s.sort);
                            if((st.ok && (st.tok == __lit<str>("=")))){
                                {
                                    ext__pstate__consume(st);
                                    loc__s.has_spec = true;
                                    ext__ivy__typespec__parse(st, 0, loc__s.spec);
                                }
                            }
                            res = ivyc_s1::ivy__decl(2, new ivyc_s1::ivy__decl::twrap<ivyc_s1::ivy__typedc>(loc__s));
                        }
                    }
                }
            }
            else {
                if(((st.tok == __lit<str>("var")) || (st.tok == __lit<str>("destructor")) || (st.tok == __lit<str>("function")))){
                    {
                        ivy__vardc loc__s;
    loc__s.is_destructor = (bool)___ivy_choose(0,"loc:s",15962);
    loc__s.has_def = (bool)___ivy_choose(0,"loc:s",15962);
                        {
                            loc__s.is_destructor = (st.tok == __lit<str>("destructor"));
                            ext__pstate__consume(st);
                            ext__pstate__get_ann(st, loc__s.ann);
                            ext__ivy__expr__parse(st, ivy__verb_to_prio[ivy__verb__equals], loc__s.typing);
                            if((st.ok && (st.tok == __lit<str>("=")))){
                                {
                                    ext__pstate__consume(st);
                                    loc__s.has_def = true;
                                    ext__ivy__expr__parse(st, 0, loc__s.def);
                                }
                            }
                            res = ivyc_s1::ivy__decl(3, new ivyc_s1::ivy__decl::twrap<ivyc_s1::ivy__vardc>(loc__s));
                        }
                    }
                }
                else {
                    if((st.tok == __lit<str>("header"))){
                        {
                            ivy__header loc__s;
                            {
                                ext__pstate__get_ann(st, loc__s.ann);
                                ext__pstate__consume(st);
                                if((st.ok && (0 < str__end(st.tok)) && (str__value(st.tok,0) == 34))){
                                    {
                                        loc__s.filename = st.tok;
                                        ext__pstate__consume(st);
                                    }
                                }
                                else {
                                    st.ok = false;
                                }
                                res = ivyc_s1::ivy__decl(4, new ivyc_s1::ivy__decl::twrap<ivyc_s1::ivy__header>(loc__s));
                            }
                        }
                    }
                    else {
                        if((st.tok == __lit<str>("interpret"))){
                            {
                                ivy__interpdc loc__s;
                                {
                                    ext__pstate__get_ann(st, loc__s.ann);
                                    ext__pstate__consume(st);
                                    if((st.ok && (0 < str__end(st.tok)))){
                                        {
                                            ext__ivy__expr__parse(st, ivy__verb_to_prio[ivy__verb__arrow], loc__s.itype);
                                            if((st.ok && (st.tok == __lit<str>("->")))){
                                                {
                                                    ext__pstate__consume(st);
                                                    ext__ivy__expr__parse(st, 0, loc__s.ctype);
                                                }
                                            }
                                            else {
                                                st.ok = false;
                                            }
                                        }
                                    }
                                    else {
                                        st.ok = false;
                                    }
                                    res = ivyc_s1::ivy__decl(5, new ivyc_s1::ivy__decl::twrap<ivyc_s1::ivy__interpdc>(loc__s));
                                }
                            }
                        }
                        else {
                            if((st.tok == __lit<str>("include"))){
                                {
                                    ivy__includedc loc__s;
                                    {
                                        ext__pstate__get_ann(st, loc__s.ann);
                                        ext__pstate__consume(st);
                                        ext__ivy__expr__parse(st, 0, loc__s.file);
                                        res = ivyc_s1::ivy__decl(6, new ivyc_s1::ivy__decl::twrap<ivyc_s1::ivy__includedc>(loc__s));
                                    }
                                }
                            }
                            else {
                                if((st.tok == __lit<str>("module"))){
                                    {
                                        {
                                            ivy__moduledc loc__s;
                                            {
                                                ext__pstate__get_ann(st, loc__s.ann);
                                                ext__pstate__consume(st);
                                                ext__ivy__expr__parse(st, 99, loc__s.name);
                                                if((st.ok && (st.tok == __lit<str>("(")))){
                                                    {
                                                        ext__ivy__expr__tup__parse(st, 1, loc__s.prms);
                                                    }
                                                }
                                                if((st.ok && (st.tok == __lit<str>("=")))){
                                                    {
                                                        ext__pstate__consume(st);
                                                        ext__ivy__decl__parse(st, 0, loc__s.body);
                                                    }
                                                }
                                                else {
                                                    st.ok = false;
                                                }
                                                res = ivyc_s1::ivy__decl(7, new ivyc_s1::ivy__decl::twrap<ivyc_s1::ivy__moduledc>(loc__s));
                                            }
                                        }
                                    }
                                }
                                else {
                                    if((st.tok == __lit<str>("instantiate"))){
                                        {
                                            ivy__instantiatedc loc__s;
                                            {
                                                ext__pstate__get_ann(st, loc__s.ann);
                                                ext__pstate__consume(st);
                                                ext__ivy__expr__parse(st, 99, loc__s.name);
                                                if((st.ok && (st.tok == __lit<str>("(")))){
                                                    {
                                                        ext__ivy__expr__tup__parse(st, 1, loc__s.prms);
                                                    }
                                                }
                                                res = ivyc_s1::ivy__decl(8, new ivyc_s1::ivy__decl::twrap<ivyc_s1::ivy__instantiatedc>(loc__s));
                                            }
                                        }
                                    }
                                    else {
                                        if((st.tok == __lit<str>("object"))){
                                            {
                                                ivy__objectdc loc__s;
                                                {
                                                    ext__pstate__get_ann(st, loc__s.ann);
                                                    ext__pstate__consume(st);
                                                    ext__ivy__expr__parse(st, 99, loc__s.name);
                                                    if((st.ok && (st.tok == __lit<str>("=")))){
                                                        {
                                                            ext__pstate__consume(st);
                                                        }
                                                    }
                                                    if((st.ok && (st.tok == __lit<str>("{")))){
                                                        {
                                                            ext__ivy__decl__parse(st, 0, loc__s.body);
                                                        }
                                                    }
                                                    res = ivyc_s1::ivy__decl(9, new ivyc_s1::ivy__decl::twrap<ivyc_s1::ivy__objectdc>(loc__s));
                                                }
                                            }
                                        }
                                        else {
                                            if(((st.tok == __lit<str>("instance")) || (st.tok == __lit<str>("autoinstance")))){
                                                {
                                                    ivy__instancedc loc__s;
    loc__s.is_auto = (bool)___ivy_choose(0,"loc:s",15969);
                                                    {
                                                        loc__s.is_auto = (st.tok == __lit<str>("autoinstance"));
                                                        ext__pstate__get_ann(st, loc__s.ann);
                                                        ext__pstate__consume(st);
                                                        ext__ivy__expr__parse(st, 99, loc__s.objname);
                                                        if((st.ok && (st.tok == __lit<str>(":")))){
                                                            {
                                                                ext__pstate__consume(st);
                                                            }
                                                        }
                                                        if(st.ok){
                                                            ext__ivy__expr__parse(st, 99, loc__s.modname);
                                                        }
                                                        if((st.ok && (st.tok == __lit<str>("(")))){
                                                            {
                                                                ext__ivy__expr__tup__parse(st, 1, loc__s.prms);
                                                            }
                                                        }
                                                        res = ivyc_s1::ivy__decl(10, new ivyc_s1::ivy__decl::twrap<ivyc_s1::ivy__instancedc>(loc__s));
                                                    }
                                                }
                                            }
                                            else {
                                                if((st.tok == __lit<str>("variant"))){
                                                    {
                                                        ext__pstate__consume(st);
                                                        {
                                                            ivy__typedc loc__s;
    loc__s.has_super = (bool)___ivy_choose(0,"loc:s",15970);
    loc__s.has_spec = (bool)___ivy_choose(0,"loc:s",15970);
                                                            {
                                                                loc__s.has_super = true;
                                                                ext__pstate__get_ann(st, loc__s.ann);
                                                                ext__ivy__expr__parse(st, 0, loc__s.sort);
                                                                if((st.ok && (st.tok == __lit<str>("of")))){
                                                                    ext__pstate__consume(st);
                                                                }
                                                                else {
                                                                    st.ok = false;
                                                                }
                                                                ext__ivy__expr__parse(st, ivy__verb_to_prio[ivy__verb__equals], loc__s.super);
                                                                if((st.ok && (st.tok == __lit<str>("=")))){
                                                                    {
                                                                        ext__pstate__consume(st);
                                                                        loc__s.has_spec = true;
                                                                        ext__ivy__typespec__parse(st, 0, loc__s.spec);
                                                                    }
                                                                }
                                                                res = ivyc_s1::ivy__decl(2, new ivyc_s1::ivy__decl::twrap<ivyc_s1::ivy__typedc>(loc__s));
                                                            }
                                                        }
                                                    }
                                                }
                                                else {
                                                    if((st.tok == __lit<str>("extern"))){
                                                        {
                                                            ext__pstate__consume(st);
                                                            ext__ivy__parse_action(st, prio, ivy__action_kind__external, res);
                                                        }
                                                    }
                                                    else {
                                                        if((st.tok == __lit<str>("import"))){
                                                            {
                                                                ext__pstate__consume(st);
                                                                ext__ivy__parse_action(st, prio, ivy__action_kind__imported, res);
                                                            }
                                                        }
                                                        else {
                                                            if((st.tok == __lit<str>("export"))){
                                                                {
                                                                    ext__pstate__consume(st);
                                                                    ext__ivy__parse_action(st, prio, ivy__action_kind__exported, res);
                                                                }
                                                            }
                                                            else {
                                                                if((st.tok == __lit<str>("init"))){
                                                                    {
                                                                        {
                                                                            ivy__initdc loc__s;
                                                                            {
                                                                                ext__pstate__get_ann(st, loc__s.ann);
                                                                                ext__pstate__consume(st);
                                                                                if((st.tok == __lit<str>("{"))){
                                                                                    {
                                                                                        ext__ivy__stmt__parse(st, 1, loc__s.body);
                                                                                    }
                                                                                }
                                                                                else {
                                                                                    st.ok = false;
                                                                                }
                                                                                res = ivyc_s1::ivy__decl(11, new ivyc_s1::ivy__decl::twrap<ivyc_s1::ivy__initdc>(loc__s));
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                                else {
                                                                    if((st.tok == __lit<str>("after"))){
                                                                        {
                                                                            {
                                                                                ivy__initdc loc__s;
                                                                                {
                                                                                    ext__pstate__get_ann(st, loc__s.ann);
                                                                                    ext__pstate__consume(st);
                                                                                    if((st.tok == __lit<str>("init"))){
                                                                                        {
                                                                                            ext__pstate__consume(st);
                                                                                        }
                                                                                    }
                                                                                    else {
                                                                                        st.ok = false;
                                                                                    }
                                                                                    if((st.ok && (st.tok == __lit<str>("{")))){
                                                                                        {
                                                                                            ext__ivy__stmt__parse(st, 1, loc__s.body);
                                                                                        }
                                                                                    }
                                                                                    else {
                                                                                        st.ok = false;
                                                                                    }
                                                                                    res = ivyc_s1::ivy__decl(11, new ivyc_s1::ivy__decl::twrap<ivyc_s1::ivy__initdc>(loc__s));
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                    else {
                                                                        st.ok = false;
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
    }
}
void ivyc_s1::ext__ivy__ident_to_moduledc__set(ivy__ident_to_moduledc& a, ivyc_s1::ivy__ident x, const ivy__moduledc& y){
    {

        a[x] = y;
    }
}
ivyc_s1::ivy__decl ivyc_s1::ext__ivy__decl__typeinfer(ivyc_s1::ivy__decl s, ivy__typeinferst& st){
    ivyc_s1::ivy__decl res;
    {
        res = s;
    }
    return res;
}
ivyc_s1::ivy__expr ivyc_s1::ext__ivy__expr__get_type(ivyc_s1::ivy__expr s){
    ivyc_s1::ivy__expr res;
    {
    }
    return res;
}
void ivyc_s1::ext__vector__cpp__ident____append(vector__cpp__ident__& a, ivyc_s1::cpp__ident v){
    {

        a.push_back(v);
    }
}
bool ivyc_s1::ext__ivy__is_subtype(ivyc_s1::ivy__expr rhsty, ivyc_s1::ivy__expr lhsty, const ivy__typeinferst& st){
    bool res;
    res = (bool)___ivy_choose(0,"fml:res",0);
    {
        bool loc__0;
    loc__0 = (bool)___ivy_choose(0,"loc:0",15731);
        {
            {
                ivy__app self__COLON__ivy__app;
                if (((rhsty).tag == 1)) self__COLON__ivy__app = ivyc_s1::ivy__expr::unwrap< ivyc_s1::ivy__app >(rhsty);
                if(((rhsty).tag == 1)){
                    loc__0 = ext__ivy__app__is(self__COLON__ivy__app, ivy__verb__comma);
                }
                else {
                    loc__0 = ext__ivy__expr__is(rhsty, ivy__verb__comma);
                }
            }
            if(loc__0){
                {
                    bool loc__0;
    loc__0 = (bool)___ivy_choose(0,"loc:0",15729);
                    {
                        {
                            ivy__app self__COLON__ivy__app;
                            if (((lhsty).tag == 1)) self__COLON__ivy__app = ivyc_s1::ivy__expr::unwrap< ivyc_s1::ivy__app >(lhsty);
                            if(((lhsty).tag == 1)){
                                loc__0 = ext__ivy__app__is(self__COLON__ivy__app, ivy__verb__comma);
                            }
                            else {
                                loc__0 = ext__ivy__expr__is(lhsty, ivy__verb__comma);
                            }
                        }
                        if(loc__0){
                            {
                                ivyc_s1::ivy__expr loc__0;
                                ivyc_s1::ivy__expr loc__1;
                                bool loc__2;
    loc__2 = (bool)___ivy_choose(0,"loc:2",15728);
                                ivyc_s1::ivy__expr loc__3;
                                ivyc_s1::ivy__expr loc__4;
                                bool loc__5;
    loc__5 = (bool)___ivy_choose(0,"loc:5",15728);
                                {
                                    {
                                        ivy__app self__COLON__ivy__app;
                                        if (((rhsty).tag == 1)) self__COLON__ivy__app = ivyc_s1::ivy__expr::unwrap< ivyc_s1::ivy__app >(rhsty);
                                        if(((rhsty).tag == 1)){
                                            loc__0 = ext__ivy__app__get_arg(self__COLON__ivy__app, 0);
                                        }
                                        else {
                                            loc__0 = ext__ivy__expr__get_arg(rhsty, 0);
                                        }
                                    }
                                    {
                                        ivy__app self__COLON__ivy__app;
                                        if (((lhsty).tag == 1)) self__COLON__ivy__app = ivyc_s1::ivy__expr::unwrap< ivyc_s1::ivy__app >(lhsty);
                                        if(((lhsty).tag == 1)){
                                            loc__1 = ext__ivy__app__get_arg(self__COLON__ivy__app, 0);
                                        }
                                        else {
                                            loc__1 = ext__ivy__expr__get_arg(lhsty, 0);
                                        }
                                    }
                                    loc__2 = ext__ivy__is_subtype(loc__0, loc__1, st);
                                    {
                                        ivy__app self__COLON__ivy__app;
                                        if (((rhsty).tag == 1)) self__COLON__ivy__app = ivyc_s1::ivy__expr::unwrap< ivyc_s1::ivy__app >(rhsty);
                                        if(((rhsty).tag == 1)){
                                            loc__3 = ext__ivy__app__get_arg(self__COLON__ivy__app, 1);
                                        }
                                        else {
                                            loc__3 = ext__ivy__expr__get_arg(rhsty, 1);
                                        }
                                    }
                                    {
                                        ivy__app self__COLON__ivy__app;
                                        if (((lhsty).tag == 1)) self__COLON__ivy__app = ivyc_s1::ivy__expr::unwrap< ivyc_s1::ivy__app >(lhsty);
                                        if(((lhsty).tag == 1)){
                                            loc__4 = ext__ivy__app__get_arg(self__COLON__ivy__app, 1);
                                        }
                                        else {
                                            loc__4 = ext__ivy__expr__get_arg(lhsty, 1);
                                        }
                                    }
                                    loc__5 = ext__ivy__is_subtype(loc__3, loc__4, st);
                                    res = (loc__2 && loc__5);
                                }
                            }
                        }
                    }
                }
            }
            else {
                {
                    bool loc__0;
    loc__0 = (bool)___ivy_choose(0,"loc:0",15730);
                    {
                        {
                            ivy__app self__COLON__ivy__app;
                            if (((lhsty).tag == 1)) self__COLON__ivy__app = ivyc_s1::ivy__expr::unwrap< ivyc_s1::ivy__app >(lhsty);
                            if(((lhsty).tag == 1)){
                                loc__0 = ext__ivy__app__is(self__COLON__ivy__app, ivy__verb__comma);
                            }
                            else {
                                loc__0 = ext__ivy__expr__is(lhsty, ivy__verb__comma);
                            }
                        }
                        if(!loc__0){
                            res = ext__ivy__subtypes__is_subtype(st.subtype_rel, rhsty, lhsty);
                        }
                    }
                }
            }
        }
    }
    return res;
}
void ivyc_s1::ext__ivy__tocppst__add_member(ivy__tocppst& s, ivyc_s1::ivy__ident namesp, ivyc_s1::ivy__decl member){
    {
        {
            vector__ivy__decl__ loc__emp;
            {
                {
                    vector__ivy__decl__ loc__0;
                    vector__ivy__decl__ loc__1;
                    {
                        vector__ivy__decl__ __tmp15;
                        __tmp15 = loc__emp; ext__ivy__ident_to_declvec__get(s.members, namesp, __tmp15);
                        loc__0 = __tmp15;
                        vector__ivy__decl__ __tmp16;
                        __tmp16 = loc__0; ext__vector__ivy__decl____append(__tmp16, member);
                        loc__1 = __tmp16;
                        ext__ivy__ident_to_declvec__set(s.members, namesp, loc__1);
                    }
                }
            }
        }
    }
}
ivyc_s1::ivy__expr ivyc_s1::ext__ivy__expr__get_arg(ivyc_s1::ivy__expr s, unsigned long long p){
    ivyc_s1::ivy__expr res;
    {
    }
    return res;
}
ivyc_s1::ivy__vardc ivyc_s1::ext__ivy__vardc__flat_int(const ivy__vardc& s, ivy__flatst& st){
    ivyc_s1::ivy__vardc res;
    res.is_destructor = (bool)___ivy_choose(0,"fml:res",0);
    res.has_def = (bool)___ivy_choose(0,"fml:res",0);
    {
        ext__ivy__auto_flat(s.typing, st);
        res.is_destructor = s.is_destructor;
        {
            ivy__app self__COLON__ivy__app;
            if (((s.typing).tag == 1)) self__COLON__ivy__app = ivyc_s1::ivy__expr::unwrap< ivyc_s1::ivy__app >(s.typing);
            if(((s.typing).tag == 1)){
                res.typing = ext__ivy__app__flat(self__COLON__ivy__app, st);
            }
            else {
                {
                    ivy__symbol self__COLON__ivy__symbol;
                    if (((s.typing).tag == 0)) self__COLON__ivy__symbol = ivyc_s1::ivy__expr::unwrap< ivyc_s1::ivy__symbol >(s.typing);
                    if(((s.typing).tag == 0)){
                        res.typing = ext__ivy__symbol__flat(self__COLON__ivy__symbol, st);
                    }
                    else {
                        res.typing = ext__ivy__expr__flat(s.typing, st);
                    }
                }
            }
        }
        res.has_def = s.has_def;
        if(res.has_def){
            {
                {
                    ivy__app self__COLON__ivy__app;
                    if (((s.def).tag == 1)) self__COLON__ivy__app = ivyc_s1::ivy__expr::unwrap< ivyc_s1::ivy__app >(s.def);
                    if(((s.def).tag == 1)){
                        res.def = ext__ivy__app__flat(self__COLON__ivy__app, st);
                    }
                    else {
                        {
                            ivy__symbol self__COLON__ivy__symbol;
                            if (((s.def).tag == 0)) self__COLON__ivy__symbol = ivyc_s1::ivy__expr::unwrap< ivyc_s1::ivy__symbol >(s.def);
                            if(((s.def).tag == 0)){
                                res.def = ext__ivy__symbol__flat(self__COLON__ivy__symbol, st);
                            }
                            else {
                                res.def = ext__ivy__expr__flat(s.def, st);
                            }
                        }
                    }
                }
            }
        }
        else {
            ext__ivy__canon_typing(res.typing);
        }
    }
    return res;
}
void ivyc_s1::ext__ivy__ident_to_cppclass__set(ivy__ident_to_cppclass& a, ivyc_s1::ivy__ident x, ivyc_s1::ivy__expr y){
    {

        a[x] = y;
    }
}
bool ivyc_s1::ext__ivy__symbol__occurs(const ivy__symbol& e, ivyc_s1::ivy__ident n){
    bool res;
    res = (bool)___ivy_choose(0,"fml:res",0);
    res = (e.name == n);
    return res;
}
ivyc_s1::ivy__expr ivyc_s1::ext__ivy__asgn__get_rhs(const ivy__asgn& s){
    ivyc_s1::ivy__expr res;
    {
        res = s.rhs;
    }
    return res;
}
unsigned long long ivyc_s1::ext__vector__ivy__stmt____domain__prev(unsigned long long x){
    unsigned long long y;
    y = (unsigned long long)___ivy_choose(0,"fml:y",0);
    {
        unsigned long long __tmp17;
        __tmp17 = x;
        unsigned long long __tmp18;
        __tmp18 = 1;
        y = ( __tmp17 < __tmp18 ? 0 : __tmp17 - __tmp18);
    }
    return y;
}
void ivyc_s1::ext__ivy__make_cast(ivyc_s1::ivy__expr lhsty, ivyc_s1::ivy__expr& rhs, const ivy__typeinferst& st){
    {
        bool loc__0;
    loc__0 = (bool)___ivy_choose(0,"loc:0",15753);
        {
            {
                ivy__app self__COLON__ivy__app;
                if (((rhs).tag == 1)) self__COLON__ivy__app = ivyc_s1::ivy__expr::unwrap< ivyc_s1::ivy__app >(rhs);
                if(((rhs).tag == 1)){
                    loc__0 = ext__ivy__app__is(self__COLON__ivy__app, ivy__verb__colon);
                }
                else {
                    loc__0 = ext__ivy__expr__is(rhs, ivy__verb__colon);
                }
            }
            if(loc__0){
                {
                    ivyc_s1::ivy__expr loc__0;
                    {
                        {
                            ivy__app self__COLON__ivy__app;
                            if (((rhs).tag == 1)) self__COLON__ivy__app = ivyc_s1::ivy__expr::unwrap< ivyc_s1::ivy__app >(rhs);
                            if(((rhs).tag == 1)){
                                loc__0 = ext__ivy__app__get_arg(self__COLON__ivy__app, 1);
                            }
                            else {
                                loc__0 = ext__ivy__expr__get_arg(rhs, 1);
                            }
                        }
                        {
                            ivyc_s1::ivy__expr loc__rhsty;
                            {
                                loc__rhsty = loc__0;
                                {
                                    bool loc__0;
    loc__0 = (bool)___ivy_choose(0,"loc:0",15750);
                                    {
                                        loc__0 = ext__ivy__expr__eq(lhsty, loc__rhsty);
                                        if(!loc__0){
                                            {
                                                {
                                                    bool loc__0;
    loc__0 = (bool)___ivy_choose(0,"loc:0",15744);
                                                    {
                                                        loc__0 = ext__ivy__is_subtype(loc__rhsty, lhsty, st);
                                                        if(!loc__0){
                                                            {
                                                                {
                                                                    ivy__type_conversion loc__0;
                                                                    ivyc_s1::annot loc__1;
                                                                    {
                                                                        loc__0 = ext__ivy__type_conversion__make(rhs, loc__rhsty, lhsty);
                                                                        {
                                                                            ivy__app self__COLON__ivy__app;
                                                                            if (((rhs).tag == 1)) self__COLON__ivy__app = ivyc_s1::ivy__expr::unwrap< ivyc_s1::ivy__app >(rhs);
                                                                            if(((rhs).tag == 1)){
                                                                                loc__1 = ext__ivy__app__get_ann(self__COLON__ivy__app);
                                                                            }
                                                                            else {
                                                                                {
                                                                                    ivy__symbol self__COLON__ivy__symbol;
                                                                                    if (((rhs).tag == 0)) self__COLON__ivy__symbol = ivyc_s1::ivy__expr::unwrap< ivyc_s1::ivy__symbol >(rhs);
                                                                                    if(((rhs).tag == 0)){
                                                                                        loc__1 = ext__ivy__symbol__get_ann(self__COLON__ivy__symbol);
                                                                                    }
                                                                                    else {
                                                                                        loc__1 = ext__ivy__expr__get_ann(rhs);
                                                                                    }
                                                                                }
                                                                            }
                                                                        }
                                                                        ext__ivy__report_error(ivyc_s1::ivy__error(1, new ivyc_s1::ivy__error::twrap<ivyc_s1::ivy__type_conversion>(loc__0)), loc__1);
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                                {
                                                    ivyc_s1::annot loc__0;
                                                    ivyc_s1::ivy__expr loc__1;
                                                    {
                                                        {
                                                            ivy__app self__COLON__ivy__app;
                                                            if (((rhs).tag == 1)) self__COLON__ivy__app = ivyc_s1::ivy__expr::unwrap< ivyc_s1::ivy__app >(rhs);
                                                            if(((rhs).tag == 1)){
                                                                loc__0 = ext__ivy__app__get_ann(self__COLON__ivy__app);
                                                            }
                                                            else {
                                                                {
                                                                    ivy__symbol self__COLON__ivy__symbol;
                                                                    if (((rhs).tag == 0)) self__COLON__ivy__symbol = ivyc_s1::ivy__expr::unwrap< ivyc_s1::ivy__symbol >(rhs);
                                                                    if(((rhs).tag == 0)){
                                                                        loc__0 = ext__ivy__symbol__get_ann(self__COLON__ivy__symbol);
                                                                    }
                                                                    else {
                                                                        loc__0 = ext__ivy__expr__get_ann(rhs);
                                                                    }
                                                                }
                                                            }
                                                        }
                                                        loc__1 = ext__ivy__arrow__make(loc__rhsty, lhsty, loc__0);
                                                        {
                                                            ivyc_s1::ivy__expr loc__castty;
                                                            {
                                                                loc__castty = loc__1;
                                                                {
                                                                    ivyc_s1::annot loc__0;
                                                                    ivyc_s1::ivy__expr loc__1;
                                                                    ivyc_s1::annot loc__2;
                                                                    ivyc_s1::ivy__expr loc__3;
                                                                    {
                                                                        {
                                                                            ivy__app self__COLON__ivy__app;
                                                                            if (((rhs).tag == 1)) self__COLON__ivy__app = ivyc_s1::ivy__expr::unwrap< ivyc_s1::ivy__app >(rhs);
                                                                            if(((rhs).tag == 1)){
                                                                                loc__0 = ext__ivy__app__get_ann(self__COLON__ivy__app);
                                                                            }
                                                                            else {
                                                                                {
                                                                                    ivy__symbol self__COLON__ivy__symbol;
                                                                                    if (((rhs).tag == 0)) self__COLON__ivy__symbol = ivyc_s1::ivy__expr::unwrap< ivyc_s1::ivy__symbol >(rhs);
                                                                                    if(((rhs).tag == 0)){
                                                                                        loc__0 = ext__ivy__symbol__get_ann(self__COLON__ivy__symbol);
                                                                                    }
                                                                                    else {
                                                                                        loc__0 = ext__ivy__expr__get_ann(rhs);
                                                                                    }
                                                                                }
                                                                            }
                                                                        }
                                                                        loc__1 = ext__ivy__symbol__makestr(__lit<str>("cast"), loc__0);
                                                                        {
                                                                            ivy__app self__COLON__ivy__app;
                                                                            if (((rhs).tag == 1)) self__COLON__ivy__app = ivyc_s1::ivy__expr::unwrap< ivyc_s1::ivy__app >(rhs);
                                                                            if(((rhs).tag == 1)){
                                                                                loc__2 = ext__ivy__app__get_ann(self__COLON__ivy__app);
                                                                            }
                                                                            else {
                                                                                {
                                                                                    ivy__symbol self__COLON__ivy__symbol;
                                                                                    if (((rhs).tag == 0)) self__COLON__ivy__symbol = ivyc_s1::ivy__expr::unwrap< ivyc_s1::ivy__symbol >(rhs);
                                                                                    if(((rhs).tag == 0)){
                                                                                        loc__2 = ext__ivy__symbol__get_ann(self__COLON__ivy__symbol);
                                                                                    }
                                                                                    else {
                                                                                        loc__2 = ext__ivy__expr__get_ann(rhs);
                                                                                    }
                                                                                }
                                                                            }
                                                                        }
                                                                        loc__3 = ext__ivy__colon__make(loc__1, loc__castty, loc__2);
                                                                        {
                                                                            ivyc_s1::ivy__expr loc__castop;
                                                                            {
                                                                                loc__castop = loc__3;
                                                                                {
                                                                                    ivyc_s1::annot loc__0;
                                                                                    {
                                                                                        {
                                                                                            ivy__app self__COLON__ivy__app;
                                                                                            if (((rhs).tag == 1)) self__COLON__ivy__app = ivyc_s1::ivy__expr::unwrap< ivyc_s1::ivy__app >(rhs);
                                                                                            if(((rhs).tag == 1)){
                                                                                                loc__0 = ext__ivy__app__get_ann(self__COLON__ivy__app);
                                                                                            }
                                                                                            else {
                                                                                                {
                                                                                                    ivy__symbol self__COLON__ivy__symbol;
                                                                                                    if (((rhs).tag == 0)) self__COLON__ivy__symbol = ivyc_s1::ivy__expr::unwrap< ivyc_s1::ivy__symbol >(rhs);
                                                                                                    if(((rhs).tag == 0)){
                                                                                                        loc__0 = ext__ivy__symbol__get_ann(self__COLON__ivy__symbol);
                                                                                                    }
                                                                                                    else {
                                                                                                        loc__0 = ext__ivy__expr__get_ann(rhs);
                                                                                                    }
                                                                                                }
                                                                                            }
                                                                                        }
                                                                                        rhs = ext__ivy__app__make1(loc__castop, rhs, loc__0);
                                                                                    }
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
    }
}
void ivyc_s1::ext__ivy__objectdc__flat(const ivy__objectdc& s, ivy__flatst& st){
    {
        {
            bool loc__old_has_root;
    loc__old_has_root = (bool)___ivy_choose(0,"loc:old_has_root",15757);
            {
                loc__old_has_root = st.has_root;
                {
                    ivyc_s1::ivy__ident loc__old_root;
                    {
                        loc__old_root = st.root;
                        ext__ivy__set_root(st, s.name);
                        {
                            ivy__objectdc loc__odc;
                            {
                                {
                                    ivyc_s1::annot loc__0;
                                    {
                                        {
                                            ivy__app self__COLON__ivy__app;
                                            if (((s.name).tag == 1)) self__COLON__ivy__app = ivyc_s1::ivy__expr::unwrap< ivyc_s1::ivy__app >(s.name);
                                            if(((s.name).tag == 1)){
                                                loc__0 = ext__ivy__app__get_ann(self__COLON__ivy__app);
                                            }
                                            else {
                                                {
                                                    ivy__symbol self__COLON__ivy__symbol;
                                                    if (((s.name).tag == 0)) self__COLON__ivy__symbol = ivyc_s1::ivy__expr::unwrap< ivyc_s1::ivy__symbol >(s.name);
                                                    if(((s.name).tag == 0)){
                                                        loc__0 = ext__ivy__symbol__get_ann(self__COLON__ivy__symbol);
                                                    }
                                                    else {
                                                        loc__0 = ext__ivy__expr__get_ann(s.name);
                                                    }
                                                }
                                            }
                                        }
                                        loc__odc.name = ext__ivy__symbol__make(st.root, loc__0);
                                    }
                                }
                                loc__odc.ann = s.ann;
                                ext__vector__ivy__decl____append(st.decls, ivyc_s1::ivy__decl(9, new ivyc_s1::ivy__decl::twrap<ivyc_s1::ivy__objectdc>(loc__odc)));
                                {
                                    ivy__initdc self__COLON__ivy__initdc;
                                    if (((s.body).tag == 11)) self__COLON__ivy__initdc = ivyc_s1::ivy__decl::unwrap< ivyc_s1::ivy__initdc >(s.body);
                                    if(((s.body).tag == 11)){
                                        ext__ivy__initdc__flat(self__COLON__ivy__initdc, st);
                                    }
                                    else {
                                        {
                                            ivy__instancedc self__COLON__ivy__instancedc;
                                            if (((s.body).tag == 10)) self__COLON__ivy__instancedc = ivyc_s1::ivy__decl::unwrap< ivyc_s1::ivy__instancedc >(s.body);
                                            if(((s.body).tag == 10)){
                                                ext__ivy__instancedc__flat(self__COLON__ivy__instancedc, st);
                                            }
                                            else {
                                                {
                                                    ivy__objectdc self__COLON__ivy__objectdc;
                                                    if (((s.body).tag == 9)) self__COLON__ivy__objectdc = ivyc_s1::ivy__decl::unwrap< ivyc_s1::ivy__objectdc >(s.body);
                                                    if(((s.body).tag == 9)){
                                                        ext__ivy__objectdc__flat(self__COLON__ivy__objectdc, st);
                                                    }
                                                    else {
                                                        {
                                                            ivy__instantiatedc self__COLON__ivy__instantiatedc;
                                                            if (((s.body).tag == 8)) self__COLON__ivy__instantiatedc = ivyc_s1::ivy__decl::unwrap< ivyc_s1::ivy__instantiatedc >(s.body);
                                                            if(((s.body).tag == 8)){
                                                                ext__ivy__instantiatedc__flat(self__COLON__ivy__instantiatedc, st);
                                                            }
                                                            else {
                                                                {
                                                                    ivy__interpdc self__COLON__ivy__interpdc;
                                                                    if (((s.body).tag == 5)) self__COLON__ivy__interpdc = ivyc_s1::ivy__decl::unwrap< ivyc_s1::ivy__interpdc >(s.body);
                                                                    if(((s.body).tag == 5)){
                                                                        ext__ivy__interpdc__flat(self__COLON__ivy__interpdc, st);
                                                                    }
                                                                    else {
                                                                        {
                                                                            ivy__header self__COLON__ivy__header;
                                                                            if (((s.body).tag == 4)) self__COLON__ivy__header = ivyc_s1::ivy__decl::unwrap< ivyc_s1::ivy__header >(s.body);
                                                                            if(((s.body).tag == 4)){
                                                                                ext__ivy__header__flat(self__COLON__ivy__header, st);
                                                                            }
                                                                            else {
                                                                                {
                                                                                    ivy__vardc self__COLON__ivy__vardc;
                                                                                    if (((s.body).tag == 3)) self__COLON__ivy__vardc = ivyc_s1::ivy__decl::unwrap< ivyc_s1::ivy__vardc >(s.body);
                                                                                    if(((s.body).tag == 3)){
                                                                                        ext__ivy__vardc__flat(self__COLON__ivy__vardc, st);
                                                                                    }
                                                                                    else {
                                                                                        {
                                                                                            ivy__typedc self__COLON__ivy__typedc;
                                                                                            if (((s.body).tag == 2)) self__COLON__ivy__typedc = ivyc_s1::ivy__decl::unwrap< ivyc_s1::ivy__typedc >(s.body);
                                                                                            if(((s.body).tag == 2)){
                                                                                                ext__ivy__typedc__flat(self__COLON__ivy__typedc, st);
                                                                                            }
                                                                                            else {
                                                                                                {
                                                                                                    ivy__groupdc self__COLON__ivy__groupdc;
                                                                                                    if (((s.body).tag == 1)) self__COLON__ivy__groupdc = ivyc_s1::ivy__decl::unwrap< ivyc_s1::ivy__groupdc >(s.body);
                                                                                                    if(((s.body).tag == 1)){
                                                                                                        ext__ivy__groupdc__flat(self__COLON__ivy__groupdc, st);
                                                                                                    }
                                                                                                    else {
                                                                                                        {
                                                                                                            ivy__actdc self__COLON__ivy__actdc;
                                                                                                            if (((s.body).tag == 0)) self__COLON__ivy__actdc = ivyc_s1::ivy__decl::unwrap< ivyc_s1::ivy__actdc >(s.body);
                                                                                                            if(((s.body).tag == 0)){
                                                                                                                ext__ivy__actdc__flat(self__COLON__ivy__actdc, st);
                                                                                                            }
                                                                                                            else {
                                                                                                                ext__ivy__decl__flat(s.body, st);
                                                                                                            }
                                                                                                        }
                                                                                                    }
                                                                                                }
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                                st.has_root = loc__old_has_root;
                                st.root = loc__old_root;
                            }
                        }
                    }
                }
            }
        }
    }
}
ivyc_s1::cpp__stmt ivyc_s1::ext__cpp__ifst__make(ivyc_s1::cpp__expr cond, ivyc_s1::cpp__stmt thenst, ivyc_s1::cpp__stmt elsest, ivyc_s1::annot ann){
    ivyc_s1::cpp__stmt res;
    {
        {
            cpp__ifst loc__s;
            {
                loc__s.cond = cond;
                loc__s.thenst = elsest;
                loc__s.elsest = elsest;
                loc__s.ann = ann;
                res = ivyc_s1::cpp__stmt(3, new ivyc_s1::cpp__stmt::twrap<ivyc_s1::cpp__ifst>(loc__s));
            }
        }
    }
    return res;
}
void ivyc_s1::ext__ivy__decl__flat(ivyc_s1::ivy__decl s, ivy__flatst& st){
    {
    }
}
void ivyc_s1::ext__cpp__numident__encode(const cpp__numident& s, pretty& b, int prio){
    {
        ext__pretty__extend(b, __lit<str>("["));
        {
            str loc__0;
            {
                loc__0 = ext__pos__to_str(s.val);
                ext__pretty__extend(b, loc__0);
            }
        }
        ext__pretty__extend(b, __lit<str>("]"));
    }
}
ivyc_s1::ivy__ident ivyc_s1::ext__ivy__numident__make(unsigned long long val){
    ivyc_s1::ivy__ident res;
    {
        ivy__numident loc__s;
    loc__s.val = (unsigned long long)___ivy_choose(0,"loc:s",15760);
        {
            loc__s.val = val;
            res = ivyc_s1::ivy__ident(1, new ivyc_s1::ivy__ident::twrap<ivyc_s1::ivy__numident>(loc__s));
        }
    }
    return res;
}
ivyc_s1::ivy__verb ivyc_s1::ext__ivy__verb_from_name(const str& name){
    ivyc_s1::ivy__verb vrb;
    vrb = (ivy__verb)___ivy_choose(0,"fml:vrb",0);
    if(char__is_digit(str__value(name,0))){
        vrb = ivy__verb__numeral;
    }
    else {
        if((str__value(name,0) == 34)){
            vrb = ivy__verb__string;
        }
        else {
            {
                bool loc__0;
    loc__0 = (bool)___ivy_choose(0,"loc:0",15761);
                {
                    loc__0 = ext__ivy__is_logvar_name(name);
                    if(loc__0){
                        {
                            vrb = ivy__verb__logvar;
                        }
                    }
                    else {
                        {
                            vrb = ivy__str_to_verb[name];
                        }
                    }
                }
            }
        }
    }
    return vrb;
}
ivyc_s1::ivy__moduledc ivyc_s1::ext__ivy__ident_to_moduledc__get_def(const ivy__ident_to_moduledc& m, ivyc_s1::ivy__ident x, ivyc_s1::annot ann){
    ivyc_s1::ivy__moduledc y;
    {
        bool loc__0;
    loc__0 = (bool)___ivy_choose(0,"loc:0",15765);
        {
            loc__0 = ext__ivy__ident_to_moduledc__mem(m, x);
            if(!loc__0){
                {
                    {
                        ivy__undefined loc__0;
                        {
                            loc__0 = ext__ivy__undefined__make(x);
                            ext__ivy__report_error(ivyc_s1::ivy__error(6, new ivyc_s1::ivy__error::twrap<ivyc_s1::ivy__undefined>(loc__0)), ann);
                        }
                    }
                }
            }
            else {
                ext__ivy__ident_to_moduledc__get(m, x, y);
            }
        }
    }
    return y;
}
void ivyc_s1::ext__parse_error(unsigned long long p, const str& tok){
    imp__parse_error(p, tok);
}
ivyc_s1::ivy__expr ivyc_s1::ext__ivy__varv__make(ivyc_s1::ivy__expr arg, ivyc_s1::annot ann){
    ivyc_s1::ivy__expr res;
    {
        ivy__app loc__s;
        {
            loc__s.func = ext__ivy__symbol__makestr(__lit<str>("var"), ann);
            ext__vector__ivy__expr____append(loc__s.args, arg);
            loc__s.ann = ann;
            res = ivyc_s1::ivy__expr(1, new ivyc_s1::ivy__expr::twrap<ivyc_s1::ivy__app>(loc__s));
        }
    }
    return res;
}
void ivyc_s1::ext__ivy__auto_defd_rec(ivyc_s1::ivy__expr s, ivy__flatst& st){
    {
        {
            bool loc__0;
    loc__0 = (bool)___ivy_choose(0,"loc:0",15768);
            {
                {
                    ivy__app self__COLON__ivy__app;
                    if (((s).tag == 1)) self__COLON__ivy__app = ivyc_s1::ivy__expr::unwrap< ivyc_s1::ivy__app >(s);
                    if(((s).tag == 1)){
                        loc__0 = ext__ivy__app__is(self__COLON__ivy__app, ivy__verb__dot);
                    }
                    else {
                        loc__0 = ext__ivy__expr__is(s, ivy__verb__dot);
                    }
                }
                if(loc__0){
                    {
                        {
                            ivyc_s1::ivy__expr loc__0;
                            {
                                {
                                    ivy__app self__COLON__ivy__app;
                                    if (((s).tag == 1)) self__COLON__ivy__app = ivyc_s1::ivy__expr::unwrap< ivyc_s1::ivy__app >(s);
                                    if(((s).tag == 1)){
                                        loc__0 = ext__ivy__app__get_arg(self__COLON__ivy__app, 0);
                                    }
                                    else {
                                        loc__0 = ext__ivy__expr__get_arg(s, 0);
                                    }
                                }
                                ext__ivy__auto_defd_rec(loc__0, st);
                            }
                        }
                    }
                }
            }
        }
        {
            bool loc__0;
    loc__0 = (bool)___ivy_choose(0,"loc:0",15778);
            {
                {
                    ivy__app self__COLON__ivy__app;
                    if (((s).tag == 1)) self__COLON__ivy__app = ivyc_s1::ivy__expr::unwrap< ivyc_s1::ivy__app >(s);
                    if(((s).tag == 1)){
                        loc__0 = ext__ivy__app__is(self__COLON__ivy__app, ivy__verb__dot);
                    }
                    else {
                        loc__0 = ext__ivy__expr__is(s, ivy__verb__dot);
                    }
                }
                if((loc__0 || ((s).tag == 0))){
                    {
                        ivyc_s1::ivy__expr loc__e;
                        {
                            st.no_undefined = true;
                            {
                                ivy__app self__COLON__ivy__app;
                                if (((s).tag == 1)) self__COLON__ivy__app = ivyc_s1::ivy__expr::unwrap< ivyc_s1::ivy__app >(s);
                                if(((s).tag == 1)){
                                    loc__e = ext__ivy__app__flat(self__COLON__ivy__app, st);
                                }
                                else {
                                    {
                                        ivy__symbol self__COLON__ivy__symbol;
                                        if (((s).tag == 0)) self__COLON__ivy__symbol = ivyc_s1::ivy__expr::unwrap< ivyc_s1::ivy__symbol >(s);
                                        if(((s).tag == 0)){
                                            loc__e = ext__ivy__symbol__flat(self__COLON__ivy__symbol, st);
                                        }
                                        else {
                                            loc__e = ext__ivy__expr__flat(s, st);
                                        }
                                    }
                                }
                            }
                            st.no_undefined = false;
                            {
                                ivyc_s1::ivy__ident loc__0;
                                {
                                    {
                                        ivy__symbol self__COLON__ivy__symbol;
                                        if (((loc__e).tag == 0)) self__COLON__ivy__symbol = ivyc_s1::ivy__expr::unwrap< ivyc_s1::ivy__symbol >(loc__e);
                                        if(((loc__e).tag == 0)){
                                            loc__0 = ext__ivy__symbol__get_name(self__COLON__ivy__symbol);
                                        }
                                        else {
                                            loc__0 = ext__ivy__expr__get_name(loc__e);
                                        }
                                    }
                                    {
                                        ivyc_s1::ivy__ident loc__id;
                                        {
                                            loc__id = loc__0;
                                            {
                                                bool loc__0;
    loc__0 = (bool)___ivy_choose(0,"loc:0",15774);
                                                {
                                                    loc__0 = ext__ivy__ident_set__mem(st.defs, loc__id);
                                                    if(!loc__0){
                                                        {
                                                            bool loc__ok;
    loc__ok = (bool)___ivy_choose(0,"loc:ok",15773);
                                                            {
                                                                {
                                                                    ivy__instantiatedc loc__idc;
                                                                    {
                                                                        loc__idc = ext__ivy__find_auto_inst(loc__id, st, loc__ok);
                                                                        if(loc__ok){
                                                                            {
                                                                                ext__ivy__ident_set__set(st.defs, loc__id, true);
                                                                                {
                                                                                    ivy__objectdc loc__odc;
                                                                                    {
                                                                                        loc__odc.name = ext__ivy__symbol__make(loc__id, loc__idc.ann);
                                                                                        loc__odc.ann = loc__idc.ann;
                                                                                        ext__vector__ivy__decl____append(st.decls, ivyc_s1::ivy__decl(9, new ivyc_s1::ivy__decl::twrap<ivyc_s1::ivy__objectdc>(loc__odc)));
                                                                                        ext__ivy__ident_set__set(st.autos_pending, loc__id, true);
                                                                                        {
                                                                                            bool loc__old_has_root;
    loc__old_has_root = (bool)___ivy_choose(0,"loc:old_has_root",15770);
                                                                                            {
                                                                                                loc__old_has_root = st.has_root;
                                                                                                {
                                                                                                    ivyc_s1::ivy__ident loc__old_root;
                                                                                                    {
                                                                                                        loc__old_root = st.root;
                                                                                                        st.has_root = true;
                                                                                                        st.root = loc__id;
                                                                                                        ext__ivy__instantiatedc__defd(loc__idc, st);
                                                                                                        st.has_root = loc__old_has_root;
                                                                                                        st.root = loc__old_root;
                                                                                                    }
                                                                                                }
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
    }
}
ivyc_s1::cpp__ident ivyc_s1::ext__cpp__strident__make1(const str& val, ivyc_s1::cpp__ident arg){
    ivyc_s1::cpp__ident res;
    {
        cpp__strident loc__s;
        {
            loc__s.val = val;
            ext__vector__cpp__ident____append(loc__s.subscrs, arg);
            res = ivyc_s1::cpp__ident(0, new ivyc_s1::cpp__ident::twrap<ivyc_s1::cpp__strident>(loc__s));
        }
    }
    return res;
}
void ivyc_s1::ext__vector__ivy__expr____reverse(vector__ivy__expr__& a){
    {

        for (unsigned i = 0; i < a.size()/2; i++) {
            std::swap(a[i],a[a.size()-i-1]);
        }
    }
}
ivyc_s1::cpp__strident ivyc_s1::ext__ivy__strident_to_cpp(const ivy__strident& s, bool native){
    ivyc_s1::cpp__strident t;
    {
        if((!native && ivy__cpp_reserved_word[s.val])){
            {
                t.val = __lit<str>("__");
                ext__str__extend(t.val, s.val);
            }
        }
        else {
            {
                t.val = s.val;
            }
        }
        {
            unsigned long long loc__idx;
    loc__idx = (unsigned long long)___ivy_choose(0,"loc:idx",15783);
            {
                loc__idx = vector__ivy__ident____begin(s.subscrs);
                while((loc__idx < vector__ivy__ident____end(s.subscrs))){
                    {
                        ivyc_s1::cpp__ident loc__0;
                        {
                            {
                                ivy__dotident self__COLON__ivy__dotident;
                                if (((vector__ivy__ident____value(s.subscrs,loc__idx)).tag == 2)) self__COLON__ivy__dotident = ivyc_s1::ivy__ident::unwrap< ivyc_s1::ivy__dotident >(vector__ivy__ident____value(s.subscrs,loc__idx));
                                if(((vector__ivy__ident____value(s.subscrs,loc__idx)).tag == 2)){
                                    loc__0 = ext__ivy__dotident__to_cpp(self__COLON__ivy__dotident, native);
                                }
                                else {
                                    {
                                        ivy__strident self__COLON__ivy__strident;
                                        if (((vector__ivy__ident____value(s.subscrs,loc__idx)).tag == 0)) self__COLON__ivy__strident = ivyc_s1::ivy__ident::unwrap< ivyc_s1::ivy__strident >(vector__ivy__ident____value(s.subscrs,loc__idx));
                                        if(((vector__ivy__ident____value(s.subscrs,loc__idx)).tag == 0)){
                                            loc__0 = ext__ivy__strident__to_cpp(self__COLON__ivy__strident, native);
                                        }
                                        else {
                                            loc__0 = ext__ivy__ident__to_cpp(vector__ivy__ident____value(s.subscrs,loc__idx), native);
                                        }
                                    }
                                }
                            }
                            {
                                ivyc_s1::cpp__ident loc__subs;
                                {
                                    loc__subs = loc__0;
                                    if(native){
                                        {
                                            ext__vector__cpp__ident____append(t.subscrs, loc__subs);
                                        }
                                    }
                                    else {
                                        {
                                            ext__str__extend(t.val, __lit<str>("__"));
                                            {
                                                str loc__0;
                                                {
                                                    loc__0 = ext__ivy__mangle(loc__subs);
                                                    ext__str__extend(t.val, loc__0);
                                                }
                                            }
                                        }
                                    }
                                    loc__idx = ext__vector__ivy__ident____domain__next(loc__idx);
                                }
                            }
                        }
                    }
                }
            }
        }
    }
    return t;
}
void ivyc_s1::ext__vector__cpp__simpletype____append(vector__cpp__simpletype__& a, const cpp__simpletype& v){
    {

        a.push_back(v);
    }
}
ivyc_s1::ivy__expr ivyc_s1::ext__ivy__times__fold_left(const vector__ivy__expr__& args, ivyc_s1::annot ann){
    ivyc_s1::ivy__expr res;
    if((0 < vector__ivy__expr____end(args))){
        {
            res = vector__ivy__expr____value(args,0);
            {
                unsigned long long loc__0;
    loc__0 = (unsigned long long)___ivy_choose(0,"loc:0",15785);
                {
                    loc__0 = ext__vector__ivy__expr____domain__next(vector__ivy__expr____begin(args));
                    {
                        unsigned long long loc__idx;
    loc__idx = (unsigned long long)___ivy_choose(0,"loc:idx",15784);
                        {
                            loc__idx = loc__0;
                            while((loc__idx < vector__ivy__expr____end(args))){
                                {
                                    res = ext__ivy__times__make(res, vector__ivy__expr____value(args,loc__idx), ann);
                                    loc__idx = ext__vector__ivy__expr____domain__next(loc__idx);
                                }
                            }
                        }
                    }
                }
            }
        }
    }
    else {
        {
            res = ext__ivy__empty__make(ann);
        }
    }
    return res;
}
ivyc_s1::ivy__expr ivyc_s1::ext__ivy__symbol__type_fill_in(const ivy__symbol& e, ivy__decost& st){
    ivyc_s1::ivy__expr res;
    {
        ivyc_s1::ivy__expr loc__ee;
        {
            loc__ee = ivyc_s1::ivy__expr(0, new ivyc_s1::ivy__expr::twrap<ivyc_s1::ivy__symbol>(e));
            ext__ivy__decost__find(st, loc__ee, res);
            if(!(res == loc__ee)){
                {
                    ivy__app self__COLON__ivy__app;
                    if (((res).tag == 1)) self__COLON__ivy__app = ivyc_s1::ivy__expr::unwrap< ivyc_s1::ivy__app >(res);
                    if(((res).tag == 1)){
                        res = ext__ivy__app__type_fill_in(self__COLON__ivy__app, st);
                    }
                    else {
                        {
                            ivy__symbol self__COLON__ivy__symbol;
                            if (((res).tag == 0)) self__COLON__ivy__symbol = ivyc_s1::ivy__expr::unwrap< ivyc_s1::ivy__symbol >(res);
                            if(((res).tag == 0)){
                                res = ext__ivy__symbol__type_fill_in(self__COLON__ivy__symbol, st);
                            }
                            else {
                                res = ext__ivy__expr__type_fill_in(res, st);
                            }
                        }
                    }
                }
            }
        }
    }
    return res;
}
void ivyc_s1::ext__cpp__expr__encode(ivyc_s1::cpp__expr s, pretty& b, int prio){
    {
    }
}
void ivyc_s1::ext__cpp__pi__encode(const cpp__pi& s, pretty& b, int prio){
    {
        {
            annot_i self__COLON__annot_i;
            if (((s.ann).tag == 0)) self__COLON__annot_i = ivyc_s1::annot::unwrap< ivyc_s1::annot_i >(s.ann);
            if(((s.ann).tag == 0)){
                ext__annot_i__encode(self__COLON__annot_i, b);
            }
            else {
                ext__annot__encode(s.ann, b);
            }
        }
        ext__pretty__nest(b);
        ext__pretty__extend(b, __lit<str>("pi"));
        ext__pretty__extend(b, __lit<str>(" "));
        ext__cpp__expr__tup__encode(s.vars, b, 0);
        ext__pretty__extend(b, __lit<str>("."));
        ext__pretty__extend(b, __lit<str>(" "));
        {
            cpp__pi self__COLON__cpp__pi;
            if (((s.body).tag == 3)) self__COLON__cpp__pi = ivyc_s1::cpp__expr::unwrap< ivyc_s1::cpp__pi >(s.body);
            if(((s.body).tag == 3)){
                ext__cpp__pi__encode(self__COLON__cpp__pi, b, 0);
            }
            else {
                {
                    cpp__app self__COLON__cpp__app;
                    if (((s.body).tag == 1)) self__COLON__cpp__app = ivyc_s1::cpp__expr::unwrap< ivyc_s1::cpp__app >(s.body);
                    if(((s.body).tag == 1)){
                        ext__cpp__app__encode(self__COLON__cpp__app, b, 0);
                    }
                    else {
                        {
                            cpp__symbol self__COLON__cpp__symbol;
                            if (((s.body).tag == 0)) self__COLON__cpp__symbol = ivyc_s1::cpp__expr::unwrap< ivyc_s1::cpp__symbol >(s.body);
                            if(((s.body).tag == 0)){
                                ext__cpp__symbol__encode(self__COLON__cpp__symbol, b, 0);
                            }
                            else {
                                ext__cpp__expr__encode(s.body, b, 0);
                            }
                        }
                    }
                }
            }
        }
        ext__pretty__extend(b, __lit<str>(";"));
        ext__pretty__unnest(b);
    }
}
ivyc_s1::cpp__expr ivyc_s1::ext__ivy__expr__to_cpp(ivyc_s1::ivy__expr s, ivy__tocppst& st){
    ivyc_s1::cpp__expr res;
    {
    }
    return res;
}
ivyc_s1::cpp__ident ivyc_s1::ext__cpp__strident__make(const str& val){
    ivyc_s1::cpp__ident res;
    {
        cpp__strident loc__s;
        {
            loc__s.val = val;
            res = ivyc_s1::cpp__ident(0, new ivyc_s1::cpp__ident::twrap<ivyc_s1::cpp__strident>(loc__s));
        }
    }
    return res;
}
ivyc_s1::cpp__expr ivyc_s1::ext__cpp__comma__fold_left(const vector__cpp__expr__& args, ivyc_s1::annot ann){
    ivyc_s1::cpp__expr res;
    if((0 < vector__cpp__expr____end(args))){
        {
            res = vector__cpp__expr____value(args,0);
            {
                unsigned long long loc__0;
    loc__0 = (unsigned long long)___ivy_choose(0,"loc:0",15790);
                {
                    loc__0 = ext__vector__cpp__expr____domain__next(vector__cpp__expr____begin(args));
                    {
                        unsigned long long loc__idx;
    loc__idx = (unsigned long long)___ivy_choose(0,"loc:idx",15789);
                        {
                            loc__idx = loc__0;
                            while((loc__idx < vector__cpp__expr____end(args))){
                                {
                                    res = ext__cpp__comma__make(res, vector__cpp__expr____value(args,loc__idx), ann);
                                    loc__idx = ext__vector__cpp__expr____domain__next(loc__idx);
                                }
                            }
                        }
                    }
                }
            }
        }
    }
    else {
        {
            res = ext__cpp__empty__make(ann);
        }
    }
    return res;
}
void ivyc_s1::ext__cpp__ident__encode(ivyc_s1::cpp__ident s, pretty& b, int prio){
    {
    }
}
void ivyc_s1::ext__vector__pretty__token____set(vector__pretty__token__& a, unsigned long long x, const pretty__token& y){
    {

        if (0 <= x && x < (unsigned long long)a.size())
            a[x] = y;
    }
}
void ivyc_s1::ext__vector__pos____append(vector__pos__& a, unsigned long long v){
    {

        a.push_back(v);
    }
}
void ivyc_s1::ext__cpp__retst__encode(const cpp__retst& s, pretty& b, int prio){
    {
        {
            annot_i self__COLON__annot_i;
            if (((s.ann).tag == 0)) self__COLON__annot_i = ivyc_s1::annot::unwrap< ivyc_s1::annot_i >(s.ann);
            if(((s.ann).tag == 0)){
                ext__annot_i__encode(self__COLON__annot_i, b);
            }
            else {
                ext__annot__encode(s.ann, b);
            }
        }
        if((1 < prio)){
            {
                ext__pretty__nest(b);
                ext__pretty__extend(b, __lit<str>("{"));
                ext__pretty__newline(b);
            }
        }
        ext__cpp__retst__encode_int(s, b, prio);
        if((1 < prio)){
            {
                ext__pretty__unnest(b);
                ext__pretty__newline(b);
                ext__pretty__extend(b, __lit<str>("}"));
            }
        }
    }
}
void ivyc_s1::ext__ivy__file__read(const str& fname, str& b, bool& ok){


    std::string fn;
    for (size_t i = 0; i < fname.size(); i++)
        fn.push_back(fname[i]);
    int fd = ::open(fn.c_str(),0);
    if (fd < 0) {
        ok = false;
    } else {
        std::vector<char> tmp;
        tmp.resize(2048);
        int len;
        while ((len = ::read(fd,&tmp[0],2048)) > 0) {
            for (size_t i = 0; i < len; i++)
                b.push_back(tmp[i]);
        }
        ok = (len >= 0);
        ::close(fd);
    }
}
void ivyc_s1::ext__ivy__app__encode(const ivy__app& s, pretty& b, int prio){
    {
        {
            annot_i self__COLON__annot_i;
            if (((s.ann).tag == 0)) self__COLON__annot_i = ivyc_s1::annot::unwrap< ivyc_s1::annot_i >(s.ann);
            if(((s.ann).tag == 0)){
                ext__annot_i__encode(self__COLON__annot_i, b);
            }
            else {
                ext__annot__encode(s.ann, b);
            }
        }
        {
            ivy__verb loc__0;
    loc__0 = (ivy__verb)___ivy_choose(0,"loc:0",15793);
            {
                {
                    ivy__symbol self__COLON__ivy__symbol;
                    if (((s.func).tag == 0)) self__COLON__ivy__symbol = ivyc_s1::ivy__expr::unwrap< ivyc_s1::ivy__symbol >(s.func);
                    if(((s.func).tag == 0)){
                        loc__0 = ext__ivy__symbol__get_verb(self__COLON__ivy__symbol);
                    }
                    else {
                        loc__0 = ext__ivy__expr__get_verb(s.func);
                    }
                }
                {
                    ivy__verb loc__vrb;
    loc__vrb = (ivy__verb)___ivy_choose(0,"loc:vrb",15792);
                    {
                        loc__vrb = loc__0;
                        if(!(loc__vrb == ivy__verb__none)){
                            {
                                int loc__opprio;
    loc__opprio = (int)___ivy_choose(0,"loc:opprio",15791);
                                {
                                    loc__opprio = ivy__verb_to_prio[loc__vrb];
                                    if((loc__opprio < prio)){
                                        {
                                            ext__pretty__nest(b);
                                            ext__pretty__extend(b, __lit<str>("("));
                                        }
                                    }
                                    if((vector__ivy__expr____end(s.args) == 1)){
                                        {
                                            ext__pretty__extend(b, ivy__verb_to_str[loc__vrb]);
                                            ext__pretty__extend(b, __lit<str>(" "));
                                            {
                                                ivy__pi self__COLON__ivy__pi;
                                                if (((vector__ivy__expr____value(s.args,0)).tag == 3)) self__COLON__ivy__pi = ivyc_s1::ivy__expr::unwrap< ivyc_s1::ivy__pi >(vector__ivy__expr____value(s.args,0));
                                                if(((vector__ivy__expr____value(s.args,0)).tag == 3)){
                                                    ext__ivy__pi__encode(self__COLON__ivy__pi, b, loc__opprio);
                                                }
                                                else {
                                                    {
                                                        ivy__app self__COLON__ivy__app;
                                                        if (((vector__ivy__expr____value(s.args,0)).tag == 1)) self__COLON__ivy__app = ivyc_s1::ivy__expr::unwrap< ivyc_s1::ivy__app >(vector__ivy__expr____value(s.args,0));
                                                        if(((vector__ivy__expr____value(s.args,0)).tag == 1)){
                                                            ext__ivy__app__encode(self__COLON__ivy__app, b, loc__opprio);
                                                        }
                                                        else {
                                                            {
                                                                ivy__symbol self__COLON__ivy__symbol;
                                                                if (((vector__ivy__expr____value(s.args,0)).tag == 0)) self__COLON__ivy__symbol = ivyc_s1::ivy__expr::unwrap< ivyc_s1::ivy__symbol >(vector__ivy__expr____value(s.args,0));
                                                                if(((vector__ivy__expr____value(s.args,0)).tag == 0)){
                                                                    ext__ivy__symbol__encode(self__COLON__ivy__symbol, b, loc__opprio);
                                                                }
                                                                else {
                                                                    ext__ivy__expr__encode(vector__ivy__expr____value(s.args,0), b, loc__opprio);
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                    else {
                                        {
                                            {
                                                ivy__pi self__COLON__ivy__pi;
                                                if (((vector__ivy__expr____value(s.args,0)).tag == 3)) self__COLON__ivy__pi = ivyc_s1::ivy__expr::unwrap< ivyc_s1::ivy__pi >(vector__ivy__expr____value(s.args,0));
                                                if(((vector__ivy__expr____value(s.args,0)).tag == 3)){
                                                    ext__ivy__pi__encode(self__COLON__ivy__pi, b, loc__opprio);
                                                }
                                                else {
                                                    {
                                                        ivy__app self__COLON__ivy__app;
                                                        if (((vector__ivy__expr____value(s.args,0)).tag == 1)) self__COLON__ivy__app = ivyc_s1::ivy__expr::unwrap< ivyc_s1::ivy__app >(vector__ivy__expr____value(s.args,0));
                                                        if(((vector__ivy__expr____value(s.args,0)).tag == 1)){
                                                            ext__ivy__app__encode(self__COLON__ivy__app, b, loc__opprio);
                                                        }
                                                        else {
                                                            {
                                                                ivy__symbol self__COLON__ivy__symbol;
                                                                if (((vector__ivy__expr____value(s.args,0)).tag == 0)) self__COLON__ivy__symbol = ivyc_s1::ivy__expr::unwrap< ivyc_s1::ivy__symbol >(vector__ivy__expr____value(s.args,0));
                                                                if(((vector__ivy__expr____value(s.args,0)).tag == 0)){
                                                                    ext__ivy__symbol__encode(self__COLON__ivy__symbol, b, loc__opprio);
                                                                }
                                                                else {
                                                                    ext__ivy__expr__encode(vector__ivy__expr____value(s.args,0), b, loc__opprio);
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                            ext__pretty__extend(b, __lit<str>(" "));
                                            ext__pretty__extend(b, ivy__verb_to_str[loc__vrb]);
                                            ext__pretty__extend(b, __lit<str>(" "));
                                            {
                                                ivy__pi self__COLON__ivy__pi;
                                                if (((vector__ivy__expr____value(s.args,1)).tag == 3)) self__COLON__ivy__pi = ivyc_s1::ivy__expr::unwrap< ivyc_s1::ivy__pi >(vector__ivy__expr____value(s.args,1));
                                                if(((vector__ivy__expr____value(s.args,1)).tag == 3)){
                                                    ext__ivy__pi__encode(self__COLON__ivy__pi, b, (loc__opprio + 1));
                                                }
                                                else {
                                                    {
                                                        ivy__app self__COLON__ivy__app;
                                                        if (((vector__ivy__expr____value(s.args,1)).tag == 1)) self__COLON__ivy__app = ivyc_s1::ivy__expr::unwrap< ivyc_s1::ivy__app >(vector__ivy__expr____value(s.args,1));
                                                        if(((vector__ivy__expr____value(s.args,1)).tag == 1)){
                                                            ext__ivy__app__encode(self__COLON__ivy__app, b, (loc__opprio + 1));
                                                        }
                                                        else {
                                                            {
                                                                ivy__symbol self__COLON__ivy__symbol;
                                                                if (((vector__ivy__expr____value(s.args,1)).tag == 0)) self__COLON__ivy__symbol = ivyc_s1::ivy__expr::unwrap< ivyc_s1::ivy__symbol >(vector__ivy__expr____value(s.args,1));
                                                                if(((vector__ivy__expr____value(s.args,1)).tag == 0)){
                                                                    ext__ivy__symbol__encode(self__COLON__ivy__symbol, b, (loc__opprio + 1));
                                                                }
                                                                else {
                                                                    ext__ivy__expr__encode(vector__ivy__expr____value(s.args,1), b, (loc__opprio + 1));
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                            if((loc__vrb == ivy__verb__ite)){
                                                {
                                                    ext__pretty__extend(b, __lit<str>(" "));
                                                    ext__pretty__extend(b, (false ? __lit<str>(":") : __lit<str>("else")));
                                                    ext__pretty__extend(b, __lit<str>(" "));
                                                    {
                                                        ivy__pi self__COLON__ivy__pi;
                                                        if (((vector__ivy__expr____value(s.args,2)).tag == 3)) self__COLON__ivy__pi = ivyc_s1::ivy__expr::unwrap< ivyc_s1::ivy__pi >(vector__ivy__expr____value(s.args,2));
                                                        if(((vector__ivy__expr____value(s.args,2)).tag == 3)){
                                                            ext__ivy__pi__encode(self__COLON__ivy__pi, b, (loc__opprio + 1));
                                                        }
                                                        else {
                                                            {
                                                                ivy__app self__COLON__ivy__app;
                                                                if (((vector__ivy__expr____value(s.args,2)).tag == 1)) self__COLON__ivy__app = ivyc_s1::ivy__expr::unwrap< ivyc_s1::ivy__app >(vector__ivy__expr____value(s.args,2));
                                                                if(((vector__ivy__expr____value(s.args,2)).tag == 1)){
                                                                    ext__ivy__app__encode(self__COLON__ivy__app, b, (loc__opprio + 1));
                                                                }
                                                                else {
                                                                    {
                                                                        ivy__symbol self__COLON__ivy__symbol;
                                                                        if (((vector__ivy__expr____value(s.args,2)).tag == 0)) self__COLON__ivy__symbol = ivyc_s1::ivy__expr::unwrap< ivyc_s1::ivy__symbol >(vector__ivy__expr____value(s.args,2));
                                                                        if(((vector__ivy__expr____value(s.args,2)).tag == 0)){
                                                                            ext__ivy__symbol__encode(self__COLON__ivy__symbol, b, (loc__opprio + 1));
                                                                        }
                                                                        else {
                                                                            ext__ivy__expr__encode(vector__ivy__expr____value(s.args,2), b, (loc__opprio + 1));
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                    if((loc__opprio < prio)){
                                        {
                                            ext__pretty__extend(b, __lit<str>(")"));
                                            ext__pretty__unnest(b);
                                        }
                                    }
                                }
                            }
                        }
                        else {
                            {
                                ext__pretty__nest(b);
                                {
                                    ivy__pi self__COLON__ivy__pi;
                                    if (((s.func).tag == 3)) self__COLON__ivy__pi = ivyc_s1::ivy__expr::unwrap< ivyc_s1::ivy__pi >(s.func);
                                    if(((s.func).tag == 3)){
                                        ext__ivy__pi__encode(self__COLON__ivy__pi, b, 99);
                                    }
                                    else {
                                        {
                                            ivy__app self__COLON__ivy__app;
                                            if (((s.func).tag == 1)) self__COLON__ivy__app = ivyc_s1::ivy__expr::unwrap< ivyc_s1::ivy__app >(s.func);
                                            if(((s.func).tag == 1)){
                                                ext__ivy__app__encode(self__COLON__ivy__app, b, 99);
                                            }
                                            else {
                                                {
                                                    ivy__symbol self__COLON__ivy__symbol;
                                                    if (((s.func).tag == 0)) self__COLON__ivy__symbol = ivyc_s1::ivy__expr::unwrap< ivyc_s1::ivy__symbol >(s.func);
                                                    if(((s.func).tag == 0)){
                                                        ext__ivy__symbol__encode(self__COLON__ivy__symbol, b, 99);
                                                    }
                                                    else {
                                                        ext__ivy__expr__encode(s.func, b, 99);
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                                if((vector__ivy__expr____end(s.args) == 0)){
                                    ext__pretty__extend(b, __lit<str>("()"));
                                }
                                else {
                                    {
                                        ext__ivy__expr__tup__encode(s.args, b, 0);
                                    }
                                }
                                ext__pretty__unnest(b);
                            }
                        }
                    }
                }
            }
        }
    }
}
void ivyc_s1::ext__ivy__typespec__defd(ivyc_s1::ivy__typespec s, ivy__flatst& st, ivyc_s1::ivy__ident id){
    {
    }
}
void ivyc_s1::ext__get_annot(pstate& st){
    {
        ext__skip_space(st);
        while(((st.p < str__end(st.b)) && (str__value(st.b,st.p) == 35))){
            {
                st.p = ext__pos__next(st.p);
                {
                    str loc__comment;
                    {
                        ext__get_line(st, loc__comment);
                        ext__vector__str____append(st.ann.comments, loc__comment);
                        ext__skip_space(st);
                    }
                }
            }
        }
    }
}
bool ivyc_s1::ext__ivy__is_cpp_this(ivyc_s1::cpp__expr s){
    bool res;
    res = (bool)___ivy_choose(0,"fml:res",0);
    if(((s).tag == 0)){
        {
            {
                ivyc_s1::cpp__ident loc__0;
                str loc__1;
                {
                    {
                        cpp__symbol self__COLON__cpp__symbol;
                        if (((s).tag == 0)) self__COLON__cpp__symbol = ivyc_s1::cpp__expr::unwrap< ivyc_s1::cpp__symbol >(s);
                        if(((s).tag == 0)){
                            loc__0 = ext__cpp__symbol__get_name(self__COLON__cpp__symbol);
                        }
                        else {
                            loc__0 = ext__cpp__expr__get_name(s);
                        }
                    }
                    {
                        cpp__dotident self__COLON__cpp__dotident;
                        if (((loc__0).tag == 2)) self__COLON__cpp__dotident = ivyc_s1::cpp__ident::unwrap< ivyc_s1::cpp__dotident >(loc__0);
                        if(((loc__0).tag == 2)){
                            loc__1 = ext__cpp__dotident__to_str(self__COLON__cpp__dotident);
                        }
                        else {
                            {
                                cpp__strident self__COLON__cpp__strident;
                                if (((loc__0).tag == 0)) self__COLON__cpp__strident = ivyc_s1::cpp__ident::unwrap< ivyc_s1::cpp__strident >(loc__0);
                                if(((loc__0).tag == 0)){
                                    loc__1 = ext__cpp__strident__to_str(self__COLON__cpp__strident);
                                }
                                else {
                                    loc__1 = ext__cpp__ident__to_str(loc__0);
                                }
                            }
                        }
                    }
                    res = (loc__1 == __lit<str>("(*this)"));
                }
            }
        }
    }
    return res;
}
ivyc_s1::ivy__expr ivyc_s1::ext__ivy__decl__get_expr(ivyc_s1::ivy__decl s){
    ivyc_s1::ivy__expr res;
    {
    }
    return res;
}
ivyc_s1::annot ivyc_s1::ext__ivy__app__get_ann(const ivy__app& s){
    ivyc_s1::annot res;
    res = s.ann;
    return res;
}
ivyc_s1::ivy__expr ivyc_s1::ext__ivy__asgn__get_lhs(const ivy__asgn& s){
    ivyc_s1::ivy__expr res;
    {
        res = s.lhs;
    }
    return res;
}
bool ivyc_s1::ext__ivy__push_pop_ident_set__map_t__mem(const ivy__push_pop_ident_set__map_t& a, ivyc_s1::ivy__ident x){
    bool res;
    res = (bool)___ivy_choose(0,"fml:res",0);
    {

        ivy__push_pop_ident_set__map_t::const_iterator it = a.find(x);
        res = (it != a.end());
    }
    return res;
}
ivyc_s1::ivy__untyped ivyc_s1::ext__ivy__untyped__make(ivyc_s1::ivy__expr e, ivyc_s1::ivy__expr t1){
    ivyc_s1::ivy__untyped res;
    {
        res.e = e;
        res.t1 = t1;
    }
    return res;
}
ivyc_s1::str ivyc_s1::ext__cpp__ident__to_str(ivyc_s1::cpp__ident s){
    ivyc_s1::str res;
    {
    }
    return res;
}
void ivyc_s1::ext__ivy__type_conversion__encode(const ivy__type_conversion& e, pretty& b){
    {
        ext__pretty__extend(b, __lit<str>("Cannot cast the expression"));
        ext__pretty__extend(b, __lit<str>(" "));
        {
            ivy__pi self__COLON__ivy__pi;
            if (((e.e).tag == 3)) self__COLON__ivy__pi = ivyc_s1::ivy__expr::unwrap< ivyc_s1::ivy__pi >(e.e);
            if(((e.e).tag == 3)){
                ext__ivy__pi__encode(self__COLON__ivy__pi, b, 0);
            }
            else {
                {
                    ivy__app self__COLON__ivy__app;
                    if (((e.e).tag == 1)) self__COLON__ivy__app = ivyc_s1::ivy__expr::unwrap< ivyc_s1::ivy__app >(e.e);
                    if(((e.e).tag == 1)){
                        ext__ivy__app__encode(self__COLON__ivy__app, b, 0);
                    }
                    else {
                        {
                            ivy__symbol self__COLON__ivy__symbol;
                            if (((e.e).tag == 0)) self__COLON__ivy__symbol = ivyc_s1::ivy__expr::unwrap< ivyc_s1::ivy__symbol >(e.e);
                            if(((e.e).tag == 0)){
                                ext__ivy__symbol__encode(self__COLON__ivy__symbol, b, 0);
                            }
                            else {
                                ext__ivy__expr__encode(e.e, b, 0);
                            }
                        }
                    }
                }
            }
        }
        ext__pretty__extend(b, __lit<str>(" "));
        ext__pretty__extend(b, __lit<str>("of type"));
        ext__pretty__extend(b, __lit<str>(" "));
        {
            ivy__pi self__COLON__ivy__pi;
            if (((e.t1).tag == 3)) self__COLON__ivy__pi = ivyc_s1::ivy__expr::unwrap< ivyc_s1::ivy__pi >(e.t1);
            if(((e.t1).tag == 3)){
                ext__ivy__pi__encode(self__COLON__ivy__pi, b, 0);
            }
            else {
                {
                    ivy__app self__COLON__ivy__app;
                    if (((e.t1).tag == 1)) self__COLON__ivy__app = ivyc_s1::ivy__expr::unwrap< ivyc_s1::ivy__app >(e.t1);
                    if(((e.t1).tag == 1)){
                        ext__ivy__app__encode(self__COLON__ivy__app, b, 0);
                    }
                    else {
                        {
                            ivy__symbol self__COLON__ivy__symbol;
                            if (((e.t1).tag == 0)) self__COLON__ivy__symbol = ivyc_s1::ivy__expr::unwrap< ivyc_s1::ivy__symbol >(e.t1);
                            if(((e.t1).tag == 0)){
                                ext__ivy__symbol__encode(self__COLON__ivy__symbol, b, 0);
                            }
                            else {
                                ext__ivy__expr__encode(e.t1, b, 0);
                            }
                        }
                    }
                }
            }
        }
        ext__pretty__extend(b, __lit<str>(" "));
        ext__pretty__extend(b, __lit<str>("to type"));
        ext__pretty__extend(b, __lit<str>(" "));
        {
            ivy__pi self__COLON__ivy__pi;
            if (((e.t2).tag == 3)) self__COLON__ivy__pi = ivyc_s1::ivy__expr::unwrap< ivyc_s1::ivy__pi >(e.t2);
            if(((e.t2).tag == 3)){
                ext__ivy__pi__encode(self__COLON__ivy__pi, b, 0);
            }
            else {
                {
                    ivy__app self__COLON__ivy__app;
                    if (((e.t2).tag == 1)) self__COLON__ivy__app = ivyc_s1::ivy__expr::unwrap< ivyc_s1::ivy__app >(e.t2);
                    if(((e.t2).tag == 1)){
                        ext__ivy__app__encode(self__COLON__ivy__app, b, 0);
                    }
                    else {
                        {
                            ivy__symbol self__COLON__ivy__symbol;
                            if (((e.t2).tag == 0)) self__COLON__ivy__symbol = ivyc_s1::ivy__expr::unwrap< ivyc_s1::ivy__symbol >(e.t2);
                            if(((e.t2).tag == 0)){
                                ext__ivy__symbol__encode(self__COLON__ivy__symbol, b, 0);
                            }
                            else {
                                ext__ivy__expr__encode(e.t2, b, 0);
                            }
                        }
                    }
                }
            }
        }
    }
}
ivyc_s1::ivy__verb ivyc_s1::ext__ivy__strident__get_verb(const ivy__strident& s){
    ivyc_s1::ivy__verb vrb;
    vrb = (ivy__verb)___ivy_choose(0,"fml:vrb",0);
    vrb = ext__ivy__verb_from_name(s.val);
    return vrb;
}
void ivyc_s1::ext__pretty__newline(pretty& self){
    {
        {
            pretty__token loc__tok;
    loc__tok.pair = (bool)___ivy_choose(0,"loc:tok",15798);
    loc__tok.tdepth = (unsigned long long)___ivy_choose(0,"loc:tok",15798);
    loc__tok.second = (unsigned long long)___ivy_choose(0,"loc:tok",15798);
            {
                loc__tok.pair = true;
                loc__tok.tdepth = self.depth;
                loc__tok.second = (self.maxline + 1);
                ext__vector__pretty__token____append(self.tokens, loc__tok);
            }
        }
    }
}
void ivyc_s1::ext__ivy__subst_vector(vector__ivy__expr__& v, const ivy__symeval& smap){
    {
        unsigned long long loc__idx;
    loc__idx = (unsigned long long)___ivy_choose(0,"loc:idx",15800);
        {
            loc__idx = vector__ivy__expr____begin(v);
            while((loc__idx < vector__ivy__expr____end(v))){
                {
                    {
                        ivyc_s1::ivy__expr loc__0;
                        {
                            {
                                ivy__app self__COLON__ivy__app;
                                if (((vector__ivy__expr____value(v,loc__idx)).tag == 1)) self__COLON__ivy__app = ivyc_s1::ivy__expr::unwrap< ivyc_s1::ivy__app >(vector__ivy__expr____value(v,loc__idx));
                                if(((vector__ivy__expr____value(v,loc__idx)).tag == 1)){
                                    loc__0 = ext__ivy__app__reduce(self__COLON__ivy__app, smap);
                                }
                                else {
                                    {
                                        ivy__symbol self__COLON__ivy__symbol;
                                        if (((vector__ivy__expr____value(v,loc__idx)).tag == 0)) self__COLON__ivy__symbol = ivyc_s1::ivy__expr::unwrap< ivyc_s1::ivy__symbol >(vector__ivy__expr____value(v,loc__idx));
                                        if(((vector__ivy__expr____value(v,loc__idx)).tag == 0)){
                                            loc__0 = ext__ivy__symbol__reduce(self__COLON__ivy__symbol, smap);
                                        }
                                        else {
                                            loc__0 = ext__ivy__expr__reduce(vector__ivy__expr____value(v,loc__idx), smap);
                                        }
                                    }
                                }
                            }
                            ext__vector__ivy__expr____set(v, loc__idx, loc__0);
                        }
                    }
                    loc__idx = ext__vector__ivy__expr____domain__next(loc__idx);
                }
            }
        }
    }
}
ivyc_s1::ivy__expr ivyc_s1::ext__ivy__expr__dec(const str& s){
    ivyc_s1::ivy__expr e;
    {
        pstate loc__0;
    loc__0.p = (unsigned long long)___ivy_choose(0,"loc:0",15802);
    loc__0.ann.line = (unsigned long long)___ivy_choose(0,"loc:0",15802);
    loc__0.ok = (bool)___ivy_choose(0,"loc:0",15802);
        {
            loc__0 = ext__pstate__make(s);
            {
                pstate loc__st;
    loc__st.p = (unsigned long long)___ivy_choose(0,"loc:st",15801);
    loc__st.ann.line = (unsigned long long)___ivy_choose(0,"loc:st",15801);
    loc__st.ok = (bool)___ivy_choose(0,"loc:st",15801);
                {
                    loc__st = loc__0;
                    ext__ivy__expr__parse(loc__st, 0, e);
                    if((!loc__st.ok || !(str__end(loc__st.tok) == 0))){
                        {
                            ext__parse_error(loc__st.ann.line, loc__st.tok);
                        }
                    }
                }
            }
        }
    }
    return e;
}
void ivyc_s1::ext__ivy__prog__parse_to(pstate& st, int prio, ivy__prog& res){
    {
        if(!false){
            {
                if((0 < vector__str____end(st.ann.comments))){
                    {
                        pstate loc__0;
    loc__0.p = (unsigned long long)___ivy_choose(0,"loc:0",15804);
    loc__0.ann.line = (unsigned long long)___ivy_choose(0,"loc:0",15804);
    loc__0.ok = (bool)___ivy_choose(0,"loc:0",15804);
                        {
                            loc__0 = ext__pstate__make(vector__str____value(st.ann.comments,0));
                            {
                                pstate loc__vst;
    loc__vst.p = (unsigned long long)___ivy_choose(0,"loc:vst",15803);
    loc__vst.ann.line = (unsigned long long)___ivy_choose(0,"loc:vst",15803);
    loc__vst.ok = (bool)___ivy_choose(0,"loc:vst",15803);
                                {
                                    loc__vst = loc__0;
                                    ext__ivy__version__parse(loc__vst, 0, res.vers);
                                    st.ok = loc__vst.ok;
                                    st.ann.comments = vector__str____segment(st.ann.comments,1,vector__str____end(st.ann.comments));
                                }
                            }
                        }
                    }
                }
                else {
                    st.ok = false;
                }
            }
        }
        while((st.ok && (0 < str__end(st.tok)))){
            {
                {
                    ivyc_s1::ivy__decl loc__dcl;
                    {
                        ext__ivy__decl__parse(st, 0, loc__dcl);
                        ext__vector__ivy__decl____append(res.decls, loc__dcl);
                    }
                }
            }
        }
    }
}
ivyc_s1::ivy__ifst ivyc_s1::ext__ivy__ifst__typeinfer_int(const ivy__ifst& s, ivy__typeinferst& st){
    ivyc_s1::ivy__ifst res;
    {
        res = s;
        {
            bool loc__ok;
    loc__ok = (bool)___ivy_choose(0,"loc:ok",15809);
            {
                loc__ok = true;
                ext__ivy__bottom_up_type(res.cond, st, loc__ok);
                if(loc__ok){
                    {
                        {
                            ivyc_s1::ivy__expr loc__0;
                            {
                                loc__0 = ext__ivy__symbol__makestr(__lit<str>("bool"), s.ann);
                                ext__ivy__type_infer_known(res.cond, loc__0, st.tc.m);
                            }
                        }
                    }
                }
                {
                    ivyc_s1::ivy__stmt loc__ts;
                    {
                        {
                            ivy__whilest self__COLON__ivy__whilest;
                            if (((res.thenst).tag == 4)) self__COLON__ivy__whilest = ivyc_s1::ivy__stmt::unwrap< ivyc_s1::ivy__whilest >(res.thenst);
                            if(((res.thenst).tag == 4)){
                                loc__ts = ext__ivy__whilest__typeinfer(self__COLON__ivy__whilest, st);
                            }
                            else {
                                {
                                    ivy__ifst self__COLON__ivy__ifst;
                                    if (((res.thenst).tag == 3)) self__COLON__ivy__ifst = ivyc_s1::ivy__stmt::unwrap< ivyc_s1::ivy__ifst >(res.thenst);
                                    if(((res.thenst).tag == 3)){
                                        loc__ts = ext__ivy__ifst__typeinfer(self__COLON__ivy__ifst, st);
                                    }
                                    else {
                                        {
                                            ivy__sequence self__COLON__ivy__sequence;
                                            if (((res.thenst).tag == 1)) self__COLON__ivy__sequence = ivyc_s1::ivy__stmt::unwrap< ivyc_s1::ivy__sequence >(res.thenst);
                                            if(((res.thenst).tag == 1)){
                                                loc__ts = ext__ivy__sequence__typeinfer(self__COLON__ivy__sequence, st);
                                            }
                                            else {
                                                {
                                                    ivy__asgn self__COLON__ivy__asgn;
                                                    if (((res.thenst).tag == 0)) self__COLON__ivy__asgn = ivyc_s1::ivy__stmt::unwrap< ivyc_s1::ivy__asgn >(res.thenst);
                                                    if(((res.thenst).tag == 0)){
                                                        loc__ts = ext__ivy__asgn__typeinfer(self__COLON__ivy__asgn, st);
                                                    }
                                                    else {
                                                        loc__ts = ext__ivy__stmt__typeinfer(res.thenst, st);
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                        res.thenst = loc__ts;
                        {
                            ivyc_s1::ivy__stmt loc__es;
                            {
                                {
                                    ivy__whilest self__COLON__ivy__whilest;
                                    if (((res.elsest).tag == 4)) self__COLON__ivy__whilest = ivyc_s1::ivy__stmt::unwrap< ivyc_s1::ivy__whilest >(res.elsest);
                                    if(((res.elsest).tag == 4)){
                                        loc__es = ext__ivy__whilest__typeinfer(self__COLON__ivy__whilest, st);
                                    }
                                    else {
                                        {
                                            ivy__ifst self__COLON__ivy__ifst;
                                            if (((res.elsest).tag == 3)) self__COLON__ivy__ifst = ivyc_s1::ivy__stmt::unwrap< ivyc_s1::ivy__ifst >(res.elsest);
                                            if(((res.elsest).tag == 3)){
                                                loc__es = ext__ivy__ifst__typeinfer(self__COLON__ivy__ifst, st);
                                            }
                                            else {
                                                {
                                                    ivy__sequence self__COLON__ivy__sequence;
                                                    if (((res.elsest).tag == 1)) self__COLON__ivy__sequence = ivyc_s1::ivy__stmt::unwrap< ivyc_s1::ivy__sequence >(res.elsest);
                                                    if(((res.elsest).tag == 1)){
                                                        loc__es = ext__ivy__sequence__typeinfer(self__COLON__ivy__sequence, st);
                                                    }
                                                    else {
                                                        {
                                                            ivy__asgn self__COLON__ivy__asgn;
                                                            if (((res.elsest).tag == 0)) self__COLON__ivy__asgn = ivyc_s1::ivy__stmt::unwrap< ivyc_s1::ivy__asgn >(res.elsest);
                                                            if(((res.elsest).tag == 0)){
                                                                loc__es = ext__ivy__asgn__typeinfer(self__COLON__ivy__asgn, st);
                                                            }
                                                            else {
                                                                loc__es = ext__ivy__stmt__typeinfer(res.elsest, st);
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                                res.elsest = loc__es;
                            }
                        }
                    }
                }
            }
        }
    }
    return res;
}
ivyc_s1::ivy__decl ivyc_s1::ext__ivy__instantiatedc__make(ivyc_s1::ivy__expr name, const vector__ivy__expr__& prms, ivyc_s1::annot ann){
    ivyc_s1::ivy__decl res;
    {
        {
            ivy__instantiatedc loc__s;
            {
                loc__s.name = name;
                loc__s.prms = prms;
                loc__s.ann = ann;
                res = ivyc_s1::ivy__decl(8, new ivyc_s1::ivy__decl::twrap<ivyc_s1::ivy__instantiatedc>(loc__s));
            }
        }
    }
    return res;
}
void ivyc_s1::ext__skip_space(pstate& st){
    while(((st.p < str__end(st.b)) && char__is_white(str__value(st.b,st.p)))){
        {
            if((str__value(st.b,st.p) == 10)){
                st.ann.line = ext__pos__next(st.ann.line);
            }
            st.p = ext__pos__next(st.p);
        }
    }
}
ivyc_s1::cpp__stmt ivyc_s1::ext__cpp__varst__make(ivyc_s1::cpp__expr _type, ivyc_s1::cpp__expr name, ivyc_s1::annot ann){
    ivyc_s1::cpp__stmt res;
    {
        {
            cpp__varst loc__s;
    loc__s.vtype.is_const = (bool)___ivy_choose(0,"loc:s",15811);
    loc__s.vtype.is_ref = (bool)___ivy_choose(0,"loc:s",15811);
            {
                loc__s.vtype._type = _type;
                loc__s.vtype.name = name;
                loc__s.ann = ann;
                res = ivyc_s1::cpp__stmt(6, new ivyc_s1::cpp__stmt::twrap<ivyc_s1::cpp__varst>(loc__s));
            }
        }
    }
    return res;
}
ivyc_s1::cpp__decl ivyc_s1::ext__ivy__actdc__to_cpp(const ivy__actdc& s, ivy__tocppst& st){
    ivyc_s1::cpp__decl resd;
    {
        cpp__funcdecl loc__res;
    loc__res.ftype.base.is_const = (bool)___ivy_choose(0,"loc:res",15838);
    loc__res.ftype.base.is_ref = (bool)___ivy_choose(0,"loc:res",15838);
    loc__res.ftype.is_const = (bool)___ivy_choose(0,"loc:res",15838);
    loc__res.ftype.has_initializer = (bool)___ivy_choose(0,"loc:res",15838);
    loc__res.has_body = (bool)___ivy_choose(0,"loc:res",15838);
    loc__res.is_static = (bool)___ivy_choose(0,"loc:res",15838);
    loc__res.is_virtual = (bool)___ivy_choose(0,"loc:res",15838);
        {
            loc__res.ann = s.ann;
            {
                ivyc_s1::ivy__ident loc__0;
                {
                    {
                        ivy__symbol self__COLON__ivy__symbol;
                        if (((s.name).tag == 0)) self__COLON__ivy__symbol = ivyc_s1::ivy__expr::unwrap< ivyc_s1::ivy__symbol >(s.name);
                        if(((s.name).tag == 0)){
                            loc__0 = ext__ivy__symbol__get_name(self__COLON__ivy__symbol);
                        }
                        else {
                            loc__0 = ext__ivy__expr__get_name(s.name);
                        }
                    }
                    {
                        ivy__prototype loc__proto;
    loc__proto.has_ret = (bool)___ivy_choose(0,"loc:proto",15836);
    loc__proto.ret.is_input = (bool)___ivy_choose(0,"loc:proto",15836);
    loc__proto.ret.inpos = (unsigned long long)___ivy_choose(0,"loc:proto",15836);
    loc__proto.ret.is_output = (bool)___ivy_choose(0,"loc:proto",15836);
    loc__proto.ret.outpos = (unsigned long long)___ivy_choose(0,"loc:proto",15836);
    loc__proto.ret.is_ref = (bool)___ivy_choose(0,"loc:proto",15836);
    loc__proto.ret.is_const = (bool)___ivy_choose(0,"loc:proto",15836);
                        {
                            loc__proto = ivy__ident_to_prototype__value(st.protos,loc__0);
                            {
                                bool loc__has_output;
    loc__has_output = (bool)___ivy_choose(0,"loc:has_output",15835);
                                {
                                    loc__has_output = loc__proto.has_ret;
                                    if(loc__has_output){
                                        {
                                            {
                                                ivyc_s1::ivy__expr loc__0;
                                                {
                                                    {
                                                        ivy__app self__COLON__ivy__app;
                                                        if (((vector__ivy__expr____value(s.outputs,loc__proto.ret.outpos)).tag == 1)) self__COLON__ivy__app = ivyc_s1::ivy__expr::unwrap< ivyc_s1::ivy__app >(vector__ivy__expr____value(s.outputs,loc__proto.ret.outpos));
                                                        if(((vector__ivy__expr____value(s.outputs,loc__proto.ret.outpos)).tag == 1)){
                                                            loc__0 = ext__ivy__app__get_arg(self__COLON__ivy__app, 1);
                                                        }
                                                        else {
                                                            loc__0 = ext__ivy__expr__get_arg(vector__ivy__expr____value(s.outputs,loc__proto.ret.outpos), 1);
                                                        }
                                                    }
                                                    loc__res.ftype.base._type = ext__ivy__fix_variant_type(loc__0, st);
                                                }
                                            }
                                        }
                                    }
                                    else {
                                        {
                                            loc__res.ftype.base._type = ext__cpp__voidtype(s.ann);
                                        }
                                    }
                                    {
                                        bool loc__cprot;
    loc__cprot = (bool)___ivy_choose(0,"loc:cprot",15834);
                                        {
                                            loc__cprot = st.proto_only;
                                            {
                                                bool loc__0;
    loc__0 = (bool)___ivy_choose(0,"loc:0",15833);
                                                {
                                                    loc__0 = ext__ivy__actdc__is_member(s);
                                                    {
                                                        bool loc__is_member;
    loc__is_member = (bool)___ivy_choose(0,"loc:is_member",15832);
                                                        {
                                                            loc__is_member = loc__0;
                                                            {
                                                                ivyc_s1::cpp__expr loc__full_name;
                                                                {
                                                                    loc__full_name = ext__ivy__full_action_name(s.name, loc__is_member, st);
                                                                    {
                                                                        ivyc_s1::cpp__expr loc__0;
                                                                        {
                                                                            ivyc_s1::cpp__expr __tmp19;
                                                                            __tmp19 = loc__full_name; ext__ivy__member_name(__tmp19);
                                                                            loc__0 = __tmp19;
                                                                            loc__res.ftype.base.name = ((loc__cprot || st.in_class) ? loc__0 : loc__full_name);
                                                                        }
                                                                    }
                                                                    {
                                                                        unsigned long long loc__idx;
    loc__idx = (unsigned long long)___ivy_choose(0,"loc:idx",15830);
                                                                        {
                                                                            loc__idx = vector__ivy__prototype_argument____begin(loc__proto.args);
                                                                            st.is_member = loc__is_member;
                                                                            if(st.is_member){
                                                                                {
                                                                                    loc__idx = ext__vector__ivy__prototype_argument____domain__next(loc__idx);
                                                                                    {
                                                                                        ivyc_s1::ivy__expr loc__0;
                                                                                        {
                                                                                            {
                                                                                                ivy__app self__COLON__ivy__app;
                                                                                                if (((vector__ivy__prototype_argument____value(loc__proto.args,0).name).tag == 1)) self__COLON__ivy__app = ivyc_s1::ivy__expr::unwrap< ivyc_s1::ivy__app >(vector__ivy__prototype_argument____value(loc__proto.args,0).name);
                                                                                                if(((vector__ivy__prototype_argument____value(loc__proto.args,0).name).tag == 1)){
                                                                                                    loc__0 = ext__ivy__app__get_arg(self__COLON__ivy__app, 0);
                                                                                                }
                                                                                                else {
                                                                                                    loc__0 = ext__ivy__expr__get_arg(vector__ivy__prototype_argument____value(loc__proto.args,0).name, 0);
                                                                                                }
                                                                                            }
                                                                                            {
                                                                                                ivy__symbol self__COLON__ivy__symbol;
                                                                                                if (((loc__0).tag == 0)) self__COLON__ivy__symbol = ivyc_s1::ivy__expr::unwrap< ivyc_s1::ivy__symbol >(loc__0);
                                                                                                if(((loc__0).tag == 0)){
                                                                                                    st.this_ident = ext__ivy__symbol__get_name(self__COLON__ivy__symbol);
                                                                                                }
                                                                                                else {
                                                                                                    st.this_ident = ext__ivy__expr__get_name(loc__0);
                                                                                                }
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                    loc__res.ftype.is_const = vector__ivy__prototype_argument____value(loc__proto.args,0).is_const;
                                                                                    {
                                                                                        ivyc_s1::ivy__expr loc__0;
                                                                                        bool loc__1;
    loc__1 = (bool)___ivy_choose(0,"loc:1",15815);
                                                                                        {
                                                                                            {
                                                                                                ivy__app self__COLON__ivy__app;
                                                                                                if (((vector__ivy__prototype_argument____value(loc__proto.args,0).name).tag == 1)) self__COLON__ivy__app = ivyc_s1::ivy__expr::unwrap< ivyc_s1::ivy__app >(vector__ivy__prototype_argument____value(loc__proto.args,0).name);
                                                                                                if(((vector__ivy__prototype_argument____value(loc__proto.args,0).name).tag == 1)){
                                                                                                    loc__0 = ext__ivy__app__get_arg(self__COLON__ivy__app, 1);
                                                                                                }
                                                                                                else {
                                                                                                    loc__0 = ext__ivy__expr__get_arg(vector__ivy__prototype_argument____value(loc__proto.args,0).name, 1);
                                                                                                }
                                                                                            }
                                                                                            loc__1 = ext__ivy__is_variant_type(loc__0, st);
                                                                                            if((loc__cprot && loc__1)){
                                                                                                loc__res.is_virtual = true;
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                }
                                                                            }
                                                                            ext__ivy__local_tracker__push(st.locals);
                                                                            while((loc__idx < vector__ivy__prototype_argument____end(loc__proto.args))){
                                                                                {
                                                                                    ivy__prototype_argument loc__parg;
    loc__parg.is_input = (bool)___ivy_choose(0,"loc:parg",15820);
    loc__parg.inpos = (unsigned long long)___ivy_choose(0,"loc:parg",15820);
    loc__parg.is_output = (bool)___ivy_choose(0,"loc:parg",15820);
    loc__parg.outpos = (unsigned long long)___ivy_choose(0,"loc:parg",15820);
    loc__parg.is_ref = (bool)___ivy_choose(0,"loc:parg",15820);
    loc__parg.is_const = (bool)___ivy_choose(0,"loc:parg",15820);
                                                                                    {
                                                                                        loc__parg = vector__ivy__prototype_argument____value(loc__proto.args,loc__idx);
                                                                                        {
                                                                                            ivyc_s1::ivy__expr loc__arg;
                                                                                            {
                                                                                                loc__arg = loc__parg.name;
                                                                                                {
                                                                                                    cpp__simpletype loc__argt;
    loc__argt.is_const = (bool)___ivy_choose(0,"loc:argt",15818);
    loc__argt.is_ref = (bool)___ivy_choose(0,"loc:argt",15818);
                                                                                                    {
                                                                                                        loc__argt.is_const = loc__parg.is_const;
                                                                                                        loc__argt.is_ref = loc__parg.is_ref;
                                                                                                        {
                                                                                                            ivyc_s1::ivy__expr loc__0;
                                                                                                            {
                                                                                                                {
                                                                                                                    ivy__app self__COLON__ivy__app;
                                                                                                                    if (((loc__arg).tag == 1)) self__COLON__ivy__app = ivyc_s1::ivy__expr::unwrap< ivyc_s1::ivy__app >(loc__arg);
                                                                                                                    if(((loc__arg).tag == 1)){
                                                                                                                        loc__0 = ext__ivy__app__get_arg(self__COLON__ivy__app, 1);
                                                                                                                    }
                                                                                                                    else {
                                                                                                                        loc__0 = ext__ivy__expr__get_arg(loc__arg, 1);
                                                                                                                    }
                                                                                                                }
                                                                                                                loc__argt._type = ext__ivy__fix_variant_type(loc__0, st);
                                                                                                            }
                                                                                                        }
                                                                                                        ext__ivy__local_tracker__add_var(st.locals, loc__arg);
                                                                                                        {
                                                                                                            ivyc_s1::ivy__expr loc__0;
                                                                                                            {
                                                                                                                {
                                                                                                                    ivy__app self__COLON__ivy__app;
                                                                                                                    if (((loc__arg).tag == 1)) self__COLON__ivy__app = ivyc_s1::ivy__expr::unwrap< ivyc_s1::ivy__app >(loc__arg);
                                                                                                                    if(((loc__arg).tag == 1)){
                                                                                                                        loc__0 = ext__ivy__app__get_arg(self__COLON__ivy__app, 0);
                                                                                                                    }
                                                                                                                    else {
                                                                                                                        loc__0 = ext__ivy__expr__get_arg(loc__arg, 0);
                                                                                                                    }
                                                                                                                }
                                                                                                                {
                                                                                                                    ivy__app self__COLON__ivy__app;
                                                                                                                    if (((loc__0).tag == 1)) self__COLON__ivy__app = ivyc_s1::ivy__expr::unwrap< ivyc_s1::ivy__app >(loc__0);
                                                                                                                    if(((loc__0).tag == 1)){
                                                                                                                        loc__argt.name = ext__ivy__app__to_cpp(self__COLON__ivy__app, st);
                                                                                                                    }
                                                                                                                    else {
                                                                                                                        {
                                                                                                                            ivy__symbol self__COLON__ivy__symbol;
                                                                                                                            if (((loc__0).tag == 0)) self__COLON__ivy__symbol = ivyc_s1::ivy__expr::unwrap< ivyc_s1::ivy__symbol >(loc__0);
                                                                                                                            if(((loc__0).tag == 0)){
                                                                                                                                loc__argt.name = ext__ivy__symbol__to_cpp(self__COLON__ivy__symbol, st);
                                                                                                                            }
                                                                                                                            else {
                                                                                                                                loc__argt.name = ext__ivy__expr__to_cpp(loc__0, st);
                                                                                                                            }
                                                                                                                        }
                                                                                                                    }
                                                                                                                }
                                                                                                            }
                                                                                                        }
                                                                                                        ext__vector__cpp__simpletype____append(loc__res.ftype.args, loc__argt);
                                                                                                        loc__idx = ext__vector__ivy__prototype_argument____domain__next(loc__idx);
                                                                                                    }
                                                                                                }
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                }
                                                                            }
                                                                            loc__res.has_body = !loc__cprot;
                                                                            if(loc__res.has_body){
                                                                                {
                                                                                    if(s.has_body){
                                                                                        {
                                                                                            {
                                                                                                ivyc_s1::cpp__stmt loc__body;
                                                                                                {
                                                                                                    {
                                                                                                        ivy__varst self__COLON__ivy__varst;
                                                                                                        if (((s.body).tag == 6)) self__COLON__ivy__varst = ivyc_s1::ivy__stmt::unwrap< ivyc_s1::ivy__varst >(s.body);
                                                                                                        if(((s.body).tag == 6)){
                                                                                                            loc__body = ext__ivy__varst__to_cpp(self__COLON__ivy__varst, st);
                                                                                                        }
                                                                                                        else {
                                                                                                            {
                                                                                                                ivy__whilest self__COLON__ivy__whilest;
                                                                                                                if (((s.body).tag == 4)) self__COLON__ivy__whilest = ivyc_s1::ivy__stmt::unwrap< ivyc_s1::ivy__whilest >(s.body);
                                                                                                                if(((s.body).tag == 4)){
                                                                                                                    loc__body = ext__ivy__whilest__to_cpp(self__COLON__ivy__whilest, st);
                                                                                                                }
                                                                                                                else {
                                                                                                                    {
                                                                                                                        ivy__ifst self__COLON__ivy__ifst;
                                                                                                                        if (((s.body).tag == 3)) self__COLON__ivy__ifst = ivyc_s1::ivy__stmt::unwrap< ivyc_s1::ivy__ifst >(s.body);
                                                                                                                        if(((s.body).tag == 3)){
                                                                                                                            loc__body = ext__ivy__ifst__to_cpp(self__COLON__ivy__ifst, st);
                                                                                                                        }
                                                                                                                        else {
                                                                                                                            {
                                                                                                                                ivy__skipst self__COLON__ivy__skipst;
                                                                                                                                if (((s.body).tag == 2)) self__COLON__ivy__skipst = ivyc_s1::ivy__stmt::unwrap< ivyc_s1::ivy__skipst >(s.body);
                                                                                                                                if(((s.body).tag == 2)){
                                                                                                                                    loc__body = ext__ivy__skipst__to_cpp(self__COLON__ivy__skipst, st);
                                                                                                                                }
                                                                                                                                else {
                                                                                                                                    {
                                                                                                                                        ivy__sequence self__COLON__ivy__sequence;
                                                                                                                                        if (((s.body).tag == 1)) self__COLON__ivy__sequence = ivyc_s1::ivy__stmt::unwrap< ivyc_s1::ivy__sequence >(s.body);
                                                                                                                                        if(((s.body).tag == 1)){
                                                                                                                                            loc__body = ext__ivy__sequence__to_cpp(self__COLON__ivy__sequence, st);
                                                                                                                                        }
                                                                                                                                        else {
                                                                                                                                            {
                                                                                                                                                ivy__asgn self__COLON__ivy__asgn;
                                                                                                                                                if (((s.body).tag == 0)) self__COLON__ivy__asgn = ivyc_s1::ivy__stmt::unwrap< ivyc_s1::ivy__asgn >(s.body);
                                                                                                                                                if(((s.body).tag == 0)){
                                                                                                                                                    loc__body = ext__ivy__asgn__to_cpp(self__COLON__ivy__asgn, st);
                                                                                                                                                }
                                                                                                                                                else {
                                                                                                                                                    loc__body = ext__ivy__stmt__to_cpp(s.body, st);
                                                                                                                                                }
                                                                                                                                            }
                                                                                                                                        }
                                                                                                                                    }
                                                                                                                                }
                                                                                                                            }
                                                                                                                        }
                                                                                                                    }
                                                                                                                }
                                                                                                            }
                                                                                                        }
                                                                                                    }
                                                                                                    loc__res.body = loc__body;
                                                                                                }
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                    else {
                                                                                        {
                                                                                            loc__res.body = ext__cpp__skipst__make(s.ann);
                                                                                        }
                                                                                    }
                                                                                    if(loc__has_output){
                                                                                        {
                                                                                            ivyc_s1::cpp__expr loc__rvar;
                                                                                            {
                                                                                                {
                                                                                                    ivyc_s1::ivy__expr loc__0;
                                                                                                    {
                                                                                                        {
                                                                                                            ivy__app self__COLON__ivy__app;
                                                                                                            if (((vector__ivy__expr____value(s.outputs,0)).tag == 1)) self__COLON__ivy__app = ivyc_s1::ivy__expr::unwrap< ivyc_s1::ivy__app >(vector__ivy__expr____value(s.outputs,0));
                                                                                                            if(((vector__ivy__expr____value(s.outputs,0)).tag == 1)){
                                                                                                                loc__0 = ext__ivy__app__get_arg(self__COLON__ivy__app, 0);
                                                                                                            }
                                                                                                            else {
                                                                                                                loc__0 = ext__ivy__expr__get_arg(vector__ivy__expr____value(s.outputs,0), 0);
                                                                                                            }
                                                                                                        }
                                                                                                        {
                                                                                                            ivy__app self__COLON__ivy__app;
                                                                                                            if (((loc__0).tag == 1)) self__COLON__ivy__app = ivyc_s1::ivy__expr::unwrap< ivyc_s1::ivy__app >(loc__0);
                                                                                                            if(((loc__0).tag == 1)){
                                                                                                                loc__rvar = ext__ivy__app__to_cpp(self__COLON__ivy__app, st);
                                                                                                            }
                                                                                                            else {
                                                                                                                {
                                                                                                                    ivy__symbol self__COLON__ivy__symbol;
                                                                                                                    if (((loc__0).tag == 0)) self__COLON__ivy__symbol = ivyc_s1::ivy__expr::unwrap< ivyc_s1::ivy__symbol >(loc__0);
                                                                                                                    if(((loc__0).tag == 0)){
                                                                                                                        loc__rvar = ext__ivy__symbol__to_cpp(self__COLON__ivy__symbol, st);
                                                                                                                    }
                                                                                                                    else {
                                                                                                                        loc__rvar = ext__ivy__expr__to_cpp(loc__0, st);
                                                                                                                    }
                                                                                                                }
                                                                                                            }
                                                                                                        }
                                                                                                    }
                                                                                                }
                                                                                                {
                                                                                                    ivyc_s1::cpp__stmt loc__0;
                                                                                                    {
                                                                                                        loc__0 = ext__cpp__retst__make(loc__rvar, s.ann);
                                                                                                        {
                                                                                                            ivyc_s1::cpp__stmt loc__ret;
                                                                                                            {
                                                                                                                loc__ret = loc__0;
                                                                                                                loc__res.body = ext__cpp__sequence__make(loc__res.body, loc__ret, s.ann);
                                                                                                                {
                                                                                                                    bool loc__0;
    loc__0 = (bool)___ivy_choose(0,"loc:0",15825);
                                                                                                                    {
                                                                                                                        loc__0 = ext__ivy__is_input_param(s, vector__ivy__expr____value(s.outputs,0));
                                                                                                                        if(!loc__0){
                                                                                                                            {
                                                                                                                                {
                                                                                                                                    ivyc_s1::cpp__stmt loc__0;
                                                                                                                                    {
                                                                                                                                        loc__0 = ext__cpp__varst__make(loc__res.ftype.base._type, loc__rvar, s.ann);
                                                                                                                                        {
                                                                                                                                            ivyc_s1::cpp__stmt loc__vs;
                                                                                                                                            {
                                                                                                                                                loc__vs = loc__0;
                                                                                                                                                loc__res.body = ext__cpp__sequence__make(loc__vs, loc__res.body, s.ann);
                                                                                                                                            }
                                                                                                                                        }
                                                                                                                                    }
                                                                                                                                }
                                                                                                                            }
                                                                                                                        }
                                                                                                                    }
                                                                                                                }
                                                                                                            }
                                                                                                        }
                                                                                                    }
                                                                                                }
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                }
                                                                            }
                                                                            ext__ivy__local_tracker__pop(st.locals);
                                                                            st.is_member = false;
                                                                            resd = ivyc_s1::cpp__decl(4, new ivyc_s1::cpp__decl::twrap<ivyc_s1::cpp__funcdecl>(loc__res));
                                                                            if((!st.in_class && loc__cprot)){
                                                                                {
                                                                                    {
                                                                                        ivyc_s1::ivy__ident loc__0;
                                                                                        {
                                                                                            {
                                                                                                ivy__symbol self__COLON__ivy__symbol;
                                                                                                if (((s.name).tag == 0)) self__COLON__ivy__symbol = ivyc_s1::ivy__expr::unwrap< ivyc_s1::ivy__symbol >(s.name);
                                                                                                if(((s.name).tag == 0)){
                                                                                                    loc__0 = ext__ivy__symbol__get_name(self__COLON__ivy__symbol);
                                                                                                }
                                                                                                else {
                                                                                                    loc__0 = ext__ivy__expr__get_name(s.name);
                                                                                                }
                                                                                            }
                                                                                            ext__ivy__add_namespaces(resd, loc__0);
                                                                                        }
                                                                                    }
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
    }
    return resd;
}
void ivyc_s1::ext__ivy__vardc__build_global_types(const ivy__vardc& s, ivy__global_types& st){
    {
        bool loc__0;
    loc__0 = (bool)___ivy_choose(0,"loc:0",15846);
        {
            loc__0 = ext__ivy__is_typing_complete(s.typing);
            if(loc__0){
                {
                    {
                        ivyc_s1::ivy__expr loc__0;
                        {
                            ivyc_s1::ivy__expr __tmp20;
                            __tmp20 = s.typing; ext__ivy__canon_typing(__tmp20);
                            loc__0 = __tmp20;
                            {
                                ivyc_s1::ivy__expr loc__typing;
                                {
                                    loc__typing = loc__0;
                                    {
                                        str loc__0;
                                        {
                                            loc__0 = ext__ivy__expr__enc(loc__typing);
                                            {
                                                str loc__thing;
                                                {
                                                    loc__thing = loc__0;
                                                    {
                                                        ivyc_s1::ivy__expr loc__0;
                                                        {
                                                            {
                                                                ivy__app self__COLON__ivy__app;
                                                                if (((loc__typing).tag == 1)) self__COLON__ivy__app = ivyc_s1::ivy__expr::unwrap< ivyc_s1::ivy__app >(loc__typing);
                                                                if(((loc__typing).tag == 1)){
                                                                    loc__0 = ext__ivy__app__get_arg(self__COLON__ivy__app, 1);
                                                                }
                                                                else {
                                                                    loc__0 = ext__ivy__expr__get_arg(loc__typing, 1);
                                                                }
                                                            }
                                                            {
                                                                ivyc_s1::ivy__expr loc__ty;
                                                                {
                                                                    loc__ty = loc__0;
                                                                    if((s.is_destructor && st.curried)){
                                                                        {
                                                                            loc__ty = ext__ivy__expr__curry(loc__ty);
                                                                        }
                                                                    }
                                                                    {
                                                                        ivyc_s1::ivy__expr loc__0;
                                                                        ivyc_s1::ivy__ident loc__1;
                                                                        {
                                                                            {
                                                                                ivy__app self__COLON__ivy__app;
                                                                                if (((loc__typing).tag == 1)) self__COLON__ivy__app = ivyc_s1::ivy__expr::unwrap< ivyc_s1::ivy__app >(loc__typing);
                                                                                if(((loc__typing).tag == 1)){
                                                                                    loc__0 = ext__ivy__app__get_arg(self__COLON__ivy__app, 0);
                                                                                }
                                                                                else {
                                                                                    loc__0 = ext__ivy__expr__get_arg(loc__typing, 0);
                                                                                }
                                                                            }
                                                                            {
                                                                                ivy__symbol self__COLON__ivy__symbol;
                                                                                if (((loc__0).tag == 0)) self__COLON__ivy__symbol = ivyc_s1::ivy__expr::unwrap< ivyc_s1::ivy__symbol >(loc__0);
                                                                                if(((loc__0).tag == 0)){
                                                                                    loc__1 = ext__ivy__symbol__get_name(self__COLON__ivy__symbol);
                                                                                }
                                                                                else {
                                                                                    loc__1 = ext__ivy__expr__get_name(loc__0);
                                                                                }
                                                                            }
                                                                            ext__ivy__symeval__set(st.type_of, loc__1, loc__ty);
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
    }
}
bool ivyc_s1::ext__ivy__is_variant_type(ivyc_s1::ivy__expr t, const ivy__tocppst& st){
    bool res;
    res = (bool)___ivy_choose(0,"fml:res",0);
    if(((t).tag == 0)){
        {
            ivyc_s1::ivy__ident loc__0;
            bool loc__1;
    loc__1 = (bool)___ivy_choose(0,"loc:1",15847);
            {
                {
                    ivy__symbol self__COLON__ivy__symbol;
                    if (((t).tag == 0)) self__COLON__ivy__symbol = ivyc_s1::ivy__expr::unwrap< ivyc_s1::ivy__symbol >(t);
                    if(((t).tag == 0)){
                        loc__0 = ext__ivy__symbol__get_name(self__COLON__ivy__symbol);
                    }
                    else {
                        loc__0 = ext__ivy__expr__get_name(t);
                    }
                }
                loc__1 = ext__ivy__ident_to_exprs__mem(st.subtype_rel.subtypes_of, loc__0);
                if(loc__1){
                    {
                        res = true;
                    }
                }
            }
        }
    }
    return res;
}
void ivyc_s1::ext__cpp__version__encode(const cpp__version& s, pretty& b){
    {
        ext__pretty__extend(b, __lit<str>("#lang ivy"));
        {
            unsigned long long loc__idx;
    loc__idx = (unsigned long long)___ivy_choose(0,"loc:idx",15849);
            {
                loc__idx = vector__pos____begin(s.nums);
                while((loc__idx < vector__pos____end(s.nums))){
                    {
                        if((vector__pos____begin(s.nums) < loc__idx)){
                            ext__pretty__extend(b, __lit<str>("."));
                        }
                        {
                            str loc__0;
                            {
                                loc__0 = ext__pos__to_str(vector__pos____value(s.nums,loc__idx));
                                ext__pretty__extend(b, loc__0);
                            }
                        }
                        loc__idx = ext__vector__pos____domain__next(loc__idx);
                    }
                }
            }
        }
    }
}
ivyc_s1::cpp__header ivyc_s1::ext__ivy__header__to_cpp_int(const ivy__header& s, ivy__tocppst& st){
    ivyc_s1::cpp__header res;
    res.filename = s.filename;
    return res;
}
ivyc_s1::annot ivyc_s1::ext__ivy__asgn__get_ann(const ivy__asgn& s){
    ivyc_s1::annot res;
    res = s.ann;
    return res;
}
void ivyc_s1::ext__ivy__auto_flat_rec(ivyc_s1::ivy__expr s, ivy__flatst& st){
    {
        {
            bool loc__0;
    loc__0 = (bool)___ivy_choose(0,"loc:0",15733);
            {
                {
                    ivy__app self__COLON__ivy__app;
                    if (((s).tag == 1)) self__COLON__ivy__app = ivyc_s1::ivy__expr::unwrap< ivyc_s1::ivy__app >(s);
                    if(((s).tag == 1)){
                        loc__0 = ext__ivy__app__is(self__COLON__ivy__app, ivy__verb__dot);
                    }
                    else {
                        loc__0 = ext__ivy__expr__is(s, ivy__verb__dot);
                    }
                }
                if(loc__0){
                    {
                        {
                            ivyc_s1::ivy__expr loc__0;
                            {
                                {
                                    ivy__app self__COLON__ivy__app;
                                    if (((s).tag == 1)) self__COLON__ivy__app = ivyc_s1::ivy__expr::unwrap< ivyc_s1::ivy__app >(s);
                                    if(((s).tag == 1)){
                                        loc__0 = ext__ivy__app__get_arg(self__COLON__ivy__app, 0);
                                    }
                                    else {
                                        loc__0 = ext__ivy__expr__get_arg(s, 0);
                                    }
                                }
                                ext__ivy__auto_flat_rec(loc__0, st);
                            }
                        }
                    }
                }
            }
        }
        {
            bool loc__0;
    loc__0 = (bool)___ivy_choose(0,"loc:0",15742);
            {
                {
                    ivy__app self__COLON__ivy__app;
                    if (((s).tag == 1)) self__COLON__ivy__app = ivyc_s1::ivy__expr::unwrap< ivyc_s1::ivy__app >(s);
                    if(((s).tag == 1)){
                        loc__0 = ext__ivy__app__is(self__COLON__ivy__app, ivy__verb__dot);
                    }
                    else {
                        loc__0 = ext__ivy__expr__is(s, ivy__verb__dot);
                    }
                }
                if((loc__0 || ((s).tag == 0))){
                    {
                        ivyc_s1::ivy__expr loc__e;
                        {
                            st.no_undefined = true;
                            {
                                ivy__app self__COLON__ivy__app;
                                if (((s).tag == 1)) self__COLON__ivy__app = ivyc_s1::ivy__expr::unwrap< ivyc_s1::ivy__app >(s);
                                if(((s).tag == 1)){
                                    loc__e = ext__ivy__app__flat(self__COLON__ivy__app, st);
                                }
                                else {
                                    {
                                        ivy__symbol self__COLON__ivy__symbol;
                                        if (((s).tag == 0)) self__COLON__ivy__symbol = ivyc_s1::ivy__expr::unwrap< ivyc_s1::ivy__symbol >(s);
                                        if(((s).tag == 0)){
                                            loc__e = ext__ivy__symbol__flat(self__COLON__ivy__symbol, st);
                                        }
                                        else {
                                            loc__e = ext__ivy__expr__flat(s, st);
                                        }
                                    }
                                }
                            }
                            st.no_undefined = false;
                            {
                                ivyc_s1::ivy__ident loc__0;
                                {
                                    {
                                        ivy__symbol self__COLON__ivy__symbol;
                                        if (((loc__e).tag == 0)) self__COLON__ivy__symbol = ivyc_s1::ivy__expr::unwrap< ivyc_s1::ivy__symbol >(loc__e);
                                        if(((loc__e).tag == 0)){
                                            loc__0 = ext__ivy__symbol__get_name(self__COLON__ivy__symbol);
                                        }
                                        else {
                                            loc__0 = ext__ivy__expr__get_name(loc__e);
                                        }
                                    }
                                    {
                                        ivyc_s1::ivy__ident loc__id;
                                        {
                                            loc__id = loc__0;
                                            {
                                                bool loc__0;
    loc__0 = (bool)___ivy_choose(0,"loc:0",15738);
                                                {
                                                    loc__0 = ext__ivy__ident_set__mem(st.autos_pending, loc__id);
                                                    if(loc__0){
                                                        {
                                                            ext__ivy__ident_set__remove(st.autos_pending, loc__id);
                                                            {
                                                                bool loc__ok;
    loc__ok = (bool)___ivy_choose(0,"loc:ok",15737);
                                                                {
                                                                    {
                                                                        ivy__instantiatedc loc__idc;
                                                                        {
                                                                            loc__idc = ext__ivy__find_auto_inst(loc__id, st, loc__ok);
                                                                            if(loc__ok){
                                                                                {
                                                                                    {
                                                                                        bool loc__old_has_root;
    loc__old_has_root = (bool)___ivy_choose(0,"loc:old_has_root",15735);
                                                                                        {
                                                                                            loc__old_has_root = st.has_root;
                                                                                            {
                                                                                                ivyc_s1::ivy__ident loc__old_root;
                                                                                                {
                                                                                                    loc__old_root = st.root;
                                                                                                    st.has_root = true;
                                                                                                    st.root = loc__id;
                                                                                                    ext__ivy__instantiatedc__flat(loc__idc, st);
                                                                                                    st.has_root = loc__old_has_root;
                                                                                                    st.root = loc__old_root;
                                                                                                }
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
    }
}
void ivyc_s1::ext__ivy__make_temp(ivy__tocppst& s, ivyc_s1::ivy__expr ty, ivyc_s1::annot ann, ivyc_s1::cpp__expr& res){
    {
        {
            str loc__name;
            {
                loc__name = __lit<str>("__tmp");
                {
                    str loc__0;
                    {
                        loc__0 = ext__pos__to_str(s.counter);
                        ext__str__extend(loc__name, loc__0);
                    }
                }
                s.counter = ext__pos__next(s.counter);
                res = ext__cpp__symbol__makestr(loc__name, ann);
                {
                    cpp__varst loc__vst;
    loc__vst.vtype.is_const = (bool)___ivy_choose(0,"loc:vst",15852);
    loc__vst.vtype.is_ref = (bool)___ivy_choose(0,"loc:vst",15852);
                    {
                        loc__vst.vtype._type = ext__ivy__fix_variant_type(ty, s);
                        loc__vst.vtype.name = res;
                        loc__vst.ann = ann;
                        {
                            ivyc_s1::cpp__stmt loc__vstt;
                            {
                                loc__vstt = ivyc_s1::cpp__stmt(6, new ivyc_s1::cpp__stmt::twrap<ivyc_s1::cpp__varst>(loc__vst));
                                ext__ivy__tocppst__add_stmt(s, loc__vstt);
                            }
                        }
                    }
                }
            }
        }
    }
}
ivyc_s1::cpp__expr ivyc_s1::ext__cpp__plus__fold_left(const vector__cpp__expr__& args, ivyc_s1::annot ann){
    ivyc_s1::cpp__expr res;
    if((0 < vector__cpp__expr____end(args))){
        {
            res = vector__cpp__expr____value(args,0);
            {
                unsigned long long loc__0;
    loc__0 = (unsigned long long)___ivy_choose(0,"loc:0",15987);
                {
                    loc__0 = ext__vector__cpp__expr____domain__next(vector__cpp__expr____begin(args));
                    {
                        unsigned long long loc__idx;
    loc__idx = (unsigned long long)___ivy_choose(0,"loc:idx",15986);
                        {
                            loc__idx = loc__0;
                            while((loc__idx < vector__cpp__expr____end(args))){
                                {
                                    res = ext__cpp__plus__make(res, vector__cpp__expr____value(args,loc__idx), ann);
                                    loc__idx = ext__vector__cpp__expr____domain__next(loc__idx);
                                }
                            }
                        }
                    }
                }
            }
        }
    }
    else {
        {
            res = ext__cpp__empty__make(ann);
        }
    }
    return res;
}
unsigned long long ivyc_s1::ext__pos__prev(unsigned long long x){
    unsigned long long y;
    y = (unsigned long long)___ivy_choose(0,"fml:y",0);
    {
        unsigned long long __tmp21;
        __tmp21 = x;
        unsigned long long __tmp22;
        __tmp22 = 1;
        y = ( __tmp21 < __tmp22 ? 0 : __tmp21 - __tmp22);
    }
    return y;
}
void ivyc_s1::ext__ivy__push_pop_ident_set__set(ivy__push_pop_ident_set& s, ivyc_s1::ivy__ident id, bool v){
    {
        {
            bool loc__0;
    loc__0 = (bool)___ivy_choose(0,"loc:0",15858);
            {
                loc__0 = ext__ivy__push_pop_ident_set__map_t__mem(s.map, id);
                if(!loc__0){
                    {
                        ext__ivy__push_pop_ident_set__vec_t__append(s.del, id);
                    }
                }
            }
        }
        ext__ivy__push_pop_ident_set__map_t__set(s.map, id, v);
    }
}
ivyc_s1::ivy__expr ivyc_s1::ext__ivy__expr__uncurry(ivyc_s1::ivy__expr ty){
    ivyc_s1::ivy__expr res;
    {
        {
            ivyc_s1::ivy__expr loc__0;
            vector__ivy__expr__ loc__1;
            {
                {
                    ivy__app self__COLON__ivy__app;
                    if (((ty).tag == 1)) self__COLON__ivy__app = ivyc_s1::ivy__expr::unwrap< ivyc_s1::ivy__app >(ty);
                    if(((ty).tag == 1)){
                        loc__0 = ext__ivy__app__get_arg(self__COLON__ivy__app, 0);
                    }
                    else {
                        loc__0 = ext__ivy__expr__get_arg(ty, 0);
                    }
                }
                loc__1 = ext__ivy__times__unfold_left(loc__0);
                {
                    vector__ivy__expr__ loc__dom;
                    {
                        loc__dom = loc__1;
                        {
                            ivyc_s1::ivy__expr loc__0;
                            {
                                {
                                    ivy__app self__COLON__ivy__app;
                                    if (((ty).tag == 1)) self__COLON__ivy__app = ivyc_s1::ivy__expr::unwrap< ivyc_s1::ivy__app >(ty);
                                    if(((ty).tag == 1)){
                                        loc__0 = ext__ivy__app__get_arg(self__COLON__ivy__app, 1);
                                    }
                                    else {
                                        loc__0 = ext__ivy__expr__get_arg(ty, 1);
                                    }
                                }
                                {
                                    ivyc_s1::ivy__expr loc__rng;
                                    {
                                        loc__rng = loc__0;
                                        {
                                            bool loc__0;
    loc__0 = (bool)___ivy_choose(0,"loc:0",15861);
                                            {
                                                {
                                                    ivy__app self__COLON__ivy__app;
                                                    if (((loc__rng).tag == 1)) self__COLON__ivy__app = ivyc_s1::ivy__expr::unwrap< ivyc_s1::ivy__app >(loc__rng);
                                                    if(((loc__rng).tag == 1)){
                                                        loc__0 = ext__ivy__app__is(self__COLON__ivy__app, ivy__verb__arrow);
                                                    }
                                                    else {
                                                        loc__0 = ext__ivy__expr__is(loc__rng, ivy__verb__arrow);
                                                    }
                                                }
                                                if(loc__0){
                                                    {
                                                        {
                                                            ivyc_s1::ivy__expr loc__0;
                                                            vector__ivy__expr__ loc__1;
                                                            {
                                                                {
                                                                    ivy__app self__COLON__ivy__app;
                                                                    if (((loc__rng).tag == 1)) self__COLON__ivy__app = ivyc_s1::ivy__expr::unwrap< ivyc_s1::ivy__app >(loc__rng);
                                                                    if(((loc__rng).tag == 1)){
                                                                        loc__0 = ext__ivy__app__get_arg(self__COLON__ivy__app, 0);
                                                                    }
                                                                    else {
                                                                        loc__0 = ext__ivy__expr__get_arg(loc__rng, 0);
                                                                    }
                                                                }
                                                                loc__1 = ext__ivy__times__unfold_left(loc__0);
                                                                {
                                                                    vector__ivy__expr__ loc__dom2;
                                                                    {
                                                                        loc__dom2 = loc__1;
                                                                        ext__vector__ivy__expr____extend(loc__dom, loc__dom2);
                                                                        {
                                                                            ivy__app self__COLON__ivy__app;
                                                                            if (((loc__rng).tag == 1)) self__COLON__ivy__app = ivyc_s1::ivy__expr::unwrap< ivyc_s1::ivy__app >(loc__rng);
                                                                            if(((loc__rng).tag == 1)){
                                                                                loc__rng = ext__ivy__app__get_arg(self__COLON__ivy__app, 1);
                                                                            }
                                                                            else {
                                                                                loc__rng = ext__ivy__expr__get_arg(loc__rng, 1);
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                        {
                                            ivyc_s1::annot loc__0;
                                            ivyc_s1::ivy__expr loc__1;
                                            ivyc_s1::annot loc__2;
                                            {
                                                {
                                                    ivy__app self__COLON__ivy__app;
                                                    if (((ty).tag == 1)) self__COLON__ivy__app = ivyc_s1::ivy__expr::unwrap< ivyc_s1::ivy__app >(ty);
                                                    if(((ty).tag == 1)){
                                                        loc__0 = ext__ivy__app__get_ann(self__COLON__ivy__app);
                                                    }
                                                    else {
                                                        {
                                                            ivy__symbol self__COLON__ivy__symbol;
                                                            if (((ty).tag == 0)) self__COLON__ivy__symbol = ivyc_s1::ivy__expr::unwrap< ivyc_s1::ivy__symbol >(ty);
                                                            if(((ty).tag == 0)){
                                                                loc__0 = ext__ivy__symbol__get_ann(self__COLON__ivy__symbol);
                                                            }
                                                            else {
                                                                loc__0 = ext__ivy__expr__get_ann(ty);
                                                            }
                                                        }
                                                    }
                                                }
                                                loc__1 = ext__ivy__times__fold_left(loc__dom, loc__0);
                                                {
                                                    ivy__app self__COLON__ivy__app;
                                                    if (((ty).tag == 1)) self__COLON__ivy__app = ivyc_s1::ivy__expr::unwrap< ivyc_s1::ivy__app >(ty);
                                                    if(((ty).tag == 1)){
                                                        loc__2 = ext__ivy__app__get_ann(self__COLON__ivy__app);
                                                    }
                                                    else {
                                                        {
                                                            ivy__symbol self__COLON__ivy__symbol;
                                                            if (((ty).tag == 0)) self__COLON__ivy__symbol = ivyc_s1::ivy__expr::unwrap< ivyc_s1::ivy__symbol >(ty);
                                                            if(((ty).tag == 0)){
                                                                loc__2 = ext__ivy__symbol__get_ann(self__COLON__ivy__symbol);
                                                            }
                                                            else {
                                                                loc__2 = ext__ivy__expr__get_ann(ty);
                                                            }
                                                        }
                                                    }
                                                }
                                                res = ext__ivy__arrow__make(loc__1, loc__rng, loc__2);
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
    }
    return res;
}
ivyc_s1::cpp__expr ivyc_s1::ext__ivy__make_std_tpl(const str& tpl, const str& ty, ivyc_s1::annot ann){
    ivyc_s1::cpp__expr res;
    {
        {
            cpp__strident loc__vid;
            {
                loc__vid.val = tpl;
                {
                    ivyc_s1::cpp__ident loc__0;
                    {
                        loc__0 = ext__cpp__strident__make(ty);
                        ext__vector__cpp__ident____append(loc__vid.subscrs, loc__0);
                    }
                }
                {
                    ivyc_s1::cpp__ident loc__0;
                    ivyc_s1::cpp__ident loc__1;
                    {
                        loc__0 = ext__cpp__strident__make(__lit<str>("ivy"));
                        loc__1 = ext__cpp__dotident__make(loc__0, loc__vid);
                        {
                            ivyc_s1::cpp__ident loc__tname;
                            {
                                loc__tname = loc__1;
                                res = ext__cpp__symbol__make(loc__tname, ann);
                            }
                        }
                    }
                }
            }
        }
    }
    return res;
}
void ivyc_s1::ext__cpp__skipst__encode(const cpp__skipst& s, pretty& b, int prio){
    {
        {
            annot_i self__COLON__annot_i;
            if (((s.ann).tag == 0)) self__COLON__annot_i = ivyc_s1::annot::unwrap< ivyc_s1::annot_i >(s.ann);
            if(((s.ann).tag == 0)){
                ext__annot_i__encode(self__COLON__annot_i, b);
            }
            else {
                ext__annot__encode(s.ann, b);
            }
        }
        ext__pretty__extend(b, __lit<str>("{"));
        ext__pretty__extend(b, __lit<str>("}"));
    }
}
void ivyc_s1::ext__ivy__instancedc__flat(const ivy__instancedc& s, ivy__flatst& st){
    if(!s.is_auto){
        {
            {
                ivyc_s1::ivy__decl loc__0;
                {
                    loc__0 = ext__ivy__instancedc__desugar(s);
                    {
                        ivyc_s1::ivy__decl loc__ds;
                        {
                            loc__ds = loc__0;
                            {
                                ivy__initdc self__COLON__ivy__initdc;
                                if (((loc__ds).tag == 11)) self__COLON__ivy__initdc = ivyc_s1::ivy__decl::unwrap< ivyc_s1::ivy__initdc >(loc__ds);
                                if(((loc__ds).tag == 11)){
                                    ext__ivy__initdc__flat(self__COLON__ivy__initdc, st);
                                }
                                else {
                                    {
                                        ivy__instancedc self__COLON__ivy__instancedc;
                                        if (((loc__ds).tag == 10)) self__COLON__ivy__instancedc = ivyc_s1::ivy__decl::unwrap< ivyc_s1::ivy__instancedc >(loc__ds);
                                        if(((loc__ds).tag == 10)){
                                            ext__ivy__instancedc__flat(self__COLON__ivy__instancedc, st);
                                        }
                                        else {
                                            {
                                                ivy__objectdc self__COLON__ivy__objectdc;
                                                if (((loc__ds).tag == 9)) self__COLON__ivy__objectdc = ivyc_s1::ivy__decl::unwrap< ivyc_s1::ivy__objectdc >(loc__ds);
                                                if(((loc__ds).tag == 9)){
                                                    ext__ivy__objectdc__flat(self__COLON__ivy__objectdc, st);
                                                }
                                                else {
                                                    {
                                                        ivy__instantiatedc self__COLON__ivy__instantiatedc;
                                                        if (((loc__ds).tag == 8)) self__COLON__ivy__instantiatedc = ivyc_s1::ivy__decl::unwrap< ivyc_s1::ivy__instantiatedc >(loc__ds);
                                                        if(((loc__ds).tag == 8)){
                                                            ext__ivy__instantiatedc__flat(self__COLON__ivy__instantiatedc, st);
                                                        }
                                                        else {
                                                            {
                                                                ivy__interpdc self__COLON__ivy__interpdc;
                                                                if (((loc__ds).tag == 5)) self__COLON__ivy__interpdc = ivyc_s1::ivy__decl::unwrap< ivyc_s1::ivy__interpdc >(loc__ds);
                                                                if(((loc__ds).tag == 5)){
                                                                    ext__ivy__interpdc__flat(self__COLON__ivy__interpdc, st);
                                                                }
                                                                else {
                                                                    {
                                                                        ivy__header self__COLON__ivy__header;
                                                                        if (((loc__ds).tag == 4)) self__COLON__ivy__header = ivyc_s1::ivy__decl::unwrap< ivyc_s1::ivy__header >(loc__ds);
                                                                        if(((loc__ds).tag == 4)){
                                                                            ext__ivy__header__flat(self__COLON__ivy__header, st);
                                                                        }
                                                                        else {
                                                                            {
                                                                                ivy__vardc self__COLON__ivy__vardc;
                                                                                if (((loc__ds).tag == 3)) self__COLON__ivy__vardc = ivyc_s1::ivy__decl::unwrap< ivyc_s1::ivy__vardc >(loc__ds);
                                                                                if(((loc__ds).tag == 3)){
                                                                                    ext__ivy__vardc__flat(self__COLON__ivy__vardc, st);
                                                                                }
                                                                                else {
                                                                                    {
                                                                                        ivy__typedc self__COLON__ivy__typedc;
                                                                                        if (((loc__ds).tag == 2)) self__COLON__ivy__typedc = ivyc_s1::ivy__decl::unwrap< ivyc_s1::ivy__typedc >(loc__ds);
                                                                                        if(((loc__ds).tag == 2)){
                                                                                            ext__ivy__typedc__flat(self__COLON__ivy__typedc, st);
                                                                                        }
                                                                                        else {
                                                                                            {
                                                                                                ivy__groupdc self__COLON__ivy__groupdc;
                                                                                                if (((loc__ds).tag == 1)) self__COLON__ivy__groupdc = ivyc_s1::ivy__decl::unwrap< ivyc_s1::ivy__groupdc >(loc__ds);
                                                                                                if(((loc__ds).tag == 1)){
                                                                                                    ext__ivy__groupdc__flat(self__COLON__ivy__groupdc, st);
                                                                                                }
                                                                                                else {
                                                                                                    {
                                                                                                        ivy__actdc self__COLON__ivy__actdc;
                                                                                                        if (((loc__ds).tag == 0)) self__COLON__ivy__actdc = ivyc_s1::ivy__decl::unwrap< ivyc_s1::ivy__actdc >(loc__ds);
                                                                                                        if(((loc__ds).tag == 0)){
                                                                                                            ext__ivy__actdc__flat(self__COLON__ivy__actdc, st);
                                                                                                        }
                                                                                                        else {
                                                                                                            ext__ivy__decl__flat(loc__ds, st);
                                                                                                        }
                                                                                                    }
                                                                                                }
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
    }
}
bool ivyc_s1::ext__ivy__func_is_member(ivyc_s1::ivy__expr func){
    bool res;
    res = (bool)___ivy_choose(0,"fml:res",0);
    {
        ivyc_s1::ivy__expr loc__0;
        {
            {
                ivy__app self__COLON__ivy__app;
                if (((func).tag == 1)) self__COLON__ivy__app = ivyc_s1::ivy__expr::unwrap< ivyc_s1::ivy__app >(func);
                if(((func).tag == 1)){
                    loc__0 = ext__ivy__app__get_arg(self__COLON__ivy__app, 1);
                }
                else {
                    loc__0 = ext__ivy__expr__get_arg(func, 1);
                }
            }
            {
                ivyc_s1::ivy__expr loc__ty;
                {
                    loc__ty = loc__0;
                    {
                        bool loc__0;
    loc__0 = (bool)___ivy_choose(0,"loc:0",15878);
                        {
                            {
                                ivy__app self__COLON__ivy__app;
                                if (((loc__ty).tag == 1)) self__COLON__ivy__app = ivyc_s1::ivy__expr::unwrap< ivyc_s1::ivy__app >(loc__ty);
                                if(((loc__ty).tag == 1)){
                                    loc__0 = ext__ivy__app__is(self__COLON__ivy__app, ivy__verb__arrow);
                                }
                                else {
                                    loc__0 = ext__ivy__expr__is(loc__ty, ivy__verb__arrow);
                                }
                            }
                            if(loc__0){
                                {
                                    ivyc_s1::ivy__expr loc__0;
                                    ivyc_s1::ivy__ident loc__1;
                                    {
                                        {
                                            ivy__app self__COLON__ivy__app;
                                            if (((func).tag == 1)) self__COLON__ivy__app = ivyc_s1::ivy__expr::unwrap< ivyc_s1::ivy__app >(func);
                                            if(((func).tag == 1)){
                                                loc__0 = ext__ivy__app__get_arg(self__COLON__ivy__app, 0);
                                            }
                                            else {
                                                loc__0 = ext__ivy__expr__get_arg(func, 0);
                                            }
                                        }
                                        {
                                            ivy__symbol self__COLON__ivy__symbol;
                                            if (((loc__0).tag == 0)) self__COLON__ivy__symbol = ivyc_s1::ivy__expr::unwrap< ivyc_s1::ivy__symbol >(loc__0);
                                            if(((loc__0).tag == 0)){
                                                loc__1 = ext__ivy__symbol__get_name(self__COLON__ivy__symbol);
                                            }
                                            else {
                                                loc__1 = ext__ivy__expr__get_name(loc__0);
                                            }
                                        }
                                        {
                                            ivyc_s1::ivy__ident loc__fid;
                                            {
                                                loc__fid = loc__1;
                                                if(((loc__fid).tag == 2)){
                                                    {
                                                        {
                                                            ivyc_s1::ivy__expr loc__0;
                                                            {
                                                                loc__0 = ext__ivy__get_dom0(loc__ty);
                                                                {
                                                                    ivyc_s1::ivy__expr loc__dom;
                                                                    {
                                                                        loc__dom = loc__0;
                                                                        {
                                                                            ivyc_s1::ivy__ident loc__0;
                                                                            ivyc_s1::ivy__ident loc__1;
                                                                            {
                                                                                {
                                                                                    ivy__dotident self__COLON__ivy__dotident;
                                                                                    if (((loc__fid).tag == 2)) self__COLON__ivy__dotident = ivyc_s1::ivy__ident::unwrap< ivyc_s1::ivy__dotident >(loc__fid);
                                                                                    if(((loc__fid).tag == 2)){
                                                                                        loc__0 = ext__ivy__dotident__get_namesp(self__COLON__ivy__dotident);
                                                                                    }
                                                                                    else {
                                                                                        loc__0 = ext__ivy__ident__get_namesp(loc__fid);
                                                                                    }
                                                                                }
                                                                                {
                                                                                    ivy__symbol self__COLON__ivy__symbol;
                                                                                    if (((loc__dom).tag == 0)) self__COLON__ivy__symbol = ivyc_s1::ivy__expr::unwrap< ivyc_s1::ivy__symbol >(loc__dom);
                                                                                    if(((loc__dom).tag == 0)){
                                                                                        loc__1 = ext__ivy__symbol__get_name(self__COLON__ivy__symbol);
                                                                                    }
                                                                                    else {
                                                                                        loc__1 = ext__ivy__expr__get_name(loc__dom);
                                                                                    }
                                                                                }
                                                                                res = (loc__0 == loc__1);
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
    }
    return res;
}
void ivyc_s1::ext__ivy__vardc__defd(const ivy__vardc& s, ivy__flatst& st){
    {
        ext__ivy__auto_defd(s.typing, st);
        {
            ivyc_s1::ivy__expr loc__0;
            {
                loc__0 = ext__ivy__get_typed_symbol(s.typing);
                ext__ivy__add_def(loc__0, st, true);
            }
        }
    }
}
ivyc_s1::cpp__verb ivyc_s1::ext__cpp__symbol__get_verb(const cpp__symbol& s){
    ivyc_s1::cpp__verb res;
    res = (cpp__verb)___ivy_choose(0,"fml:res",0);
    {
        res = s.vrb;
    }
    return res;
}
ivyc_s1::str ivyc_s1::ext__pos__to_str(unsigned long long num){
    ivyc_s1::str res;
    {
        unsigned long long loc__x;
    loc__x = (unsigned long long)___ivy_choose(0,"loc:x",15886);
        {
            loc__x = num;
            if((loc__x < 0)){
                {
                    ext__str__extend(res, __lit<str>("-"));
                    unsigned long long __tmp23;
                    __tmp23 = 0;
                    unsigned long long __tmp24;
                    __tmp24 = loc__x;
                    loc__x = ( __tmp23 < __tmp24 ? 0 : __tmp23 - __tmp24);
                }
            }
            if((loc__x == 0)){
                {
                    ext__str__extend(res, __lit<str>("0"));
                }
            }
            else {
                {
                    str loc__tmp;
                    {
                        while((0 < loc__x)){
                            {
                                {
                                    unsigned long long loc__y;
    loc__y = (unsigned long long)___ivy_choose(0,"loc:y",15883);
                                    {
                                        unsigned long long __tmp25;
                                        __tmp25 = loc__x;
                                        unsigned long long __tmp26;
                                        __tmp26 = ((loc__x / 10) * 10);
                                        loc__y = ( __tmp25 < __tmp26 ? 0 : __tmp25 - __tmp26);
                                        {
                                            int loc__digit;
    loc__digit = (int)___ivy_choose(0,"loc:digit",15882);
                                            {
                                                loc__digit = 48;
                                                while((0 < loc__y)){
                                                    {
                                                        unsigned long long __tmp27;
                                                        __tmp27 = loc__y;
                                                        unsigned long long __tmp28;
                                                        __tmp28 = 1;
                                                        loc__y = ( __tmp27 < __tmp28 ? 0 : __tmp27 - __tmp28);
                                                        loc__digit = (loc__digit + 1);
                                                    }
                                                }
                                                ext__str__append(loc__tmp, loc__digit);
                                                loc__x = (loc__x / 10);
                                            }
                                        }
                                    }
                                }
                            }
                        }
                        {
                            unsigned long long loc__idx;
    loc__idx = (unsigned long long)___ivy_choose(0,"loc:idx",15884);
                            {
                                loc__idx = str__end(loc__tmp);
                                while((str__begin(loc__tmp) < loc__idx)){
                                    {
                                        loc__idx = ext__pos__prev(loc__idx);
                                        ext__str__append(res, str__value(loc__tmp,loc__idx));
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
    }
    return res;
}
void ivyc_s1::ext__ivy__report_cannot_infer(const str& s1, const str& s2){
    imp__ivy__report_cannot_infer(s1, s2);
}
ivyc_s1::ivy__expr ivyc_s1::ext__ivy__dot__make(ivyc_s1::ivy__expr lhs, ivyc_s1::ivy__expr rhs, ivyc_s1::annot ann){
    ivyc_s1::ivy__expr res;
    {
        ivy__app loc__s;
        {
            loc__s.func = ext__ivy__symbol__makestr(__lit<str>("."), ann);
            ext__vector__ivy__expr____append(loc__s.args, lhs);
            ext__vector__ivy__expr____append(loc__s.args, rhs);
            loc__s.ann = ann;
            res = ivyc_s1::ivy__expr(1, new ivyc_s1::ivy__expr::twrap<ivyc_s1::ivy__app>(loc__s));
        }
    }
    return res;
}
void ivyc_s1::ext__vector__str____append(vector__str__& a, const str& v){
    {

        a.push_back(v);
    }
}
bool ivyc_s1::ext__ivy__actdc__is_member(const ivy__actdc& s){
    bool res;
    res = (bool)___ivy_choose(0,"fml:res",0);
    {
        {
            ivyc_s1::ivy__ident loc__0;
            ivyc_s1::ivy__ident loc__1;
            ivyc_s1::ivy__ident loc__2;
            ivyc_s1::ivy__ident loc__3;
            {
                {
                    ivy__symbol self__COLON__ivy__symbol;
                    if (((s.name).tag == 0)) self__COLON__ivy__symbol = ivyc_s1::ivy__expr::unwrap< ivyc_s1::ivy__symbol >(s.name);
                    if(((s.name).tag == 0)){
                        loc__0 = ext__ivy__symbol__get_name(self__COLON__ivy__symbol);
                    }
                    else {
                        loc__0 = ext__ivy__expr__get_name(s.name);
                    }
                }
                loc__1 = ext__ivy__actdc__member_type(s);
                {
                    ivy__symbol self__COLON__ivy__symbol;
                    if (((s.name).tag == 0)) self__COLON__ivy__symbol = ivyc_s1::ivy__expr::unwrap< ivyc_s1::ivy__symbol >(s.name);
                    if(((s.name).tag == 0)){
                        loc__2 = ext__ivy__symbol__get_name(self__COLON__ivy__symbol);
                    }
                    else {
                        loc__2 = ext__ivy__expr__get_name(s.name);
                    }
                }
                {
                    ivy__dotident self__COLON__ivy__dotident;
                    if (((loc__2).tag == 2)) self__COLON__ivy__dotident = ivyc_s1::ivy__ident::unwrap< ivyc_s1::ivy__dotident >(loc__2);
                    if(((loc__2).tag == 2)){
                        loc__3 = ext__ivy__dotident__get_namesp(self__COLON__ivy__dotident);
                    }
                    else {
                        loc__3 = ext__ivy__ident__get_namesp(loc__2);
                    }
                }
                res = (((loc__0).tag == 2) && (0 < vector__ivy__expr____end(s.inputs)) && (loc__1 == loc__3));
            }
        }
    }
    return res;
}
ivyc_s1::ivy__decl ivyc_s1::ext__ivy__objectdc__make(ivyc_s1::ivy__expr name, ivyc_s1::ivy__decl body, ivyc_s1::annot ann){
    ivyc_s1::ivy__decl res;
    {
        {
            ivy__objectdc loc__s;
            {
                loc__s.name = name;
                loc__s.body = body;
                loc__s.ann = ann;
                res = ivyc_s1::ivy__decl(9, new ivyc_s1::ivy__decl::twrap<ivyc_s1::ivy__objectdc>(loc__s));
            }
        }
    }
    return res;
}
void ivyc_s1::ext__ivy__kill_lvalue(ivyc_s1::ivy__expr e, ivy__tocppst& st, const vector__ivy__access_path__& paths){
    {
        ivy__access_path loc__path;
        {
            {
                bool loc__ok;
    loc__ok = (bool)___ivy_choose(0,"loc:ok",15894);
                {
                    ext__ivy__lvalue_path(e, loc__path, loc__ok);
                    if(loc__ok){
                        {
                            {
                                unsigned long long loc__alias_count;
    loc__alias_count = (unsigned long long)___ivy_choose(0,"loc:alias_count",15893);
                                {
                                    loc__alias_count = 0;
                                    {
                                        unsigned long long loc__idx;
    loc__idx = (unsigned long long)___ivy_choose(0,"loc:idx",15892);
                                        {
                                            loc__idx = vector__ivy__access_path____begin(paths);
                                            while((loc__idx < vector__ivy__access_path____end(paths))){
                                                {
                                                    {
                                                        bool loc__0;
    loc__0 = (bool)___ivy_choose(0,"loc:0",15890);
                                                        {
                                                            loc__0 = ext__ivy__path_may_alias(loc__path, vector__ivy__access_path____value(paths,loc__idx));
                                                            if(loc__0){
                                                                {
                                                                    loc__alias_count = ext__pos__next(loc__alias_count);
                                                                }
                                                            }
                                                        }
                                                    }
                                                    loc__idx = ext__vector__ivy__access_path____domain__next(loc__idx);
                                                }
                                            }
                                            {
                                                ivy__lvalue_count loc__lc;
    loc__lc.cnt = (unsigned long long)___ivy_choose(0,"loc:lc",15891);
                                                {
                                                    {
                                                        ivy__app self__COLON__ivy__app;
                                                        if (((e).tag == 1)) self__COLON__ivy__app = ivyc_s1::ivy__expr::unwrap< ivyc_s1::ivy__app >(e);
                                                        if(((e).tag == 1)){
                                                            loc__lc.lvalue = ext__ivy__app__to_cpp(self__COLON__ivy__app, st);
                                                        }
                                                        else {
                                                            {
                                                                ivy__symbol self__COLON__ivy__symbol;
                                                                if (((e).tag == 0)) self__COLON__ivy__symbol = ivyc_s1::ivy__expr::unwrap< ivyc_s1::ivy__symbol >(e);
                                                                if(((e).tag == 0)){
                                                                    loc__lc.lvalue = ext__ivy__symbol__to_cpp(self__COLON__ivy__symbol, st);
                                                                }
                                                                else {
                                                                    loc__lc.lvalue = ext__ivy__expr__to_cpp(e, st);
                                                                }
                                                            }
                                                        }
                                                    }
                                                    loc__lc.path = loc__path;
                                                    loc__lc.cnt = loc__alias_count;
                                                    ext__vector__ivy__lvalue_count____append(st.dead, loc__lc);
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
    }
}
void ivyc_s1::ext__ivy__actdc__defd(const ivy__actdc& s, ivy__flatst& st){
    {
        if((s.kind == ivy__action_kind__external)){
            {
                st.absolute = true;
            }
        }
        ext__ivy__add_def(s.name, st, false);
        st.absolute = false;
    }
}
void ivyc_s1::ext__ivy__canon_typing(ivyc_s1::ivy__expr& typing){
    {
        bool loc__0;
    loc__0 = (bool)___ivy_choose(0,"loc:0",15909);
        {
            {
                ivy__app self__COLON__ivy__app;
                if (((typing).tag == 1)) self__COLON__ivy__app = ivyc_s1::ivy__expr::unwrap< ivyc_s1::ivy__app >(typing);
                if(((typing).tag == 1)){
                    loc__0 = ext__ivy__app__is(self__COLON__ivy__app, ivy__verb__colon);
                }
                else {
                    loc__0 = ext__ivy__expr__is(typing, ivy__verb__colon);
                }
            }
            if(loc__0){
                {
                    ivyc_s1::ivy__expr loc__0;
                    {
                        {
                            ivy__app self__COLON__ivy__app;
                            if (((typing).tag == 1)) self__COLON__ivy__app = ivyc_s1::ivy__expr::unwrap< ivyc_s1::ivy__app >(typing);
                            if(((typing).tag == 1)){
                                loc__0 = ext__ivy__app__get_arg(self__COLON__ivy__app, 0);
                            }
                            else {
                                loc__0 = ext__ivy__expr__get_arg(typing, 0);
                            }
                        }
                        {
                            ivyc_s1::ivy__expr loc__lhs;
                            {
                                loc__lhs = loc__0;
                                if(((loc__lhs).tag == 1)){
                                    {
                                        vector__ivy__expr__ loc__0;
                                        {
                                            {
                                                ivy__app self__COLON__ivy__app;
                                                if (((loc__lhs).tag == 1)) self__COLON__ivy__app = ivyc_s1::ivy__expr::unwrap< ivyc_s1::ivy__app >(loc__lhs);
                                                if(((loc__lhs).tag == 1)){
                                                    loc__0 = ext__ivy__app__get_args(self__COLON__ivy__app);
                                                }
                                                else {
                                                    loc__0 = ext__ivy__expr__get_args(loc__lhs);
                                                }
                                            }
                                            {
                                                vector__ivy__expr__ loc__args;
                                                {
                                                    loc__args = loc__0;
                                                    {
                                                        vector__ivy__expr__ loc__dom;
                                                        {
                                                            {
                                                                unsigned long long loc__idx;
    loc__idx = (unsigned long long)___ivy_choose(0,"loc:idx",15902);
                                                                {
                                                                    loc__idx = vector__ivy__expr____begin(loc__args);
                                                                    while((loc__idx < vector__ivy__expr____end(loc__args))){
                                                                        {
                                                                            {
                                                                                ivyc_s1::ivy__expr loc__0;
                                                                                {
                                                                                    {
                                                                                        ivy__app self__COLON__ivy__app;
                                                                                        if (((vector__ivy__expr____value(loc__args,loc__idx)).tag == 1)) self__COLON__ivy__app = ivyc_s1::ivy__expr::unwrap< ivyc_s1::ivy__app >(vector__ivy__expr____value(loc__args,loc__idx));
                                                                                        if(((vector__ivy__expr____value(loc__args,loc__idx)).tag == 1)){
                                                                                            loc__0 = ext__ivy__app__get_arg(self__COLON__ivy__app, 1);
                                                                                        }
                                                                                        else {
                                                                                            loc__0 = ext__ivy__expr__get_arg(vector__ivy__expr____value(loc__args,loc__idx), 1);
                                                                                        }
                                                                                    }
                                                                                    ext__vector__ivy__expr____append(loc__dom, loc__0);
                                                                                }
                                                                            }
                                                                            loc__idx = ext__vector__ivy__expr____domain__next(loc__idx);
                                                                        }
                                                                    }
                                                                    {
                                                                        ivyc_s1::annot loc__0;
                                                                        ivyc_s1::ivy__expr loc__1;
                                                                        {
                                                                            {
                                                                                ivy__app self__COLON__ivy__app;
                                                                                if (((loc__lhs).tag == 1)) self__COLON__ivy__app = ivyc_s1::ivy__expr::unwrap< ivyc_s1::ivy__app >(loc__lhs);
                                                                                if(((loc__lhs).tag == 1)){
                                                                                    loc__0 = ext__ivy__app__get_ann(self__COLON__ivy__app);
                                                                                }
                                                                                else {
                                                                                    {
                                                                                        ivy__symbol self__COLON__ivy__symbol;
                                                                                        if (((loc__lhs).tag == 0)) self__COLON__ivy__symbol = ivyc_s1::ivy__expr::unwrap< ivyc_s1::ivy__symbol >(loc__lhs);
                                                                                        if(((loc__lhs).tag == 0)){
                                                                                            loc__0 = ext__ivy__symbol__get_ann(self__COLON__ivy__symbol);
                                                                                        }
                                                                                        else {
                                                                                            loc__0 = ext__ivy__expr__get_ann(loc__lhs);
                                                                                        }
                                                                                    }
                                                                                }
                                                                            }
                                                                            loc__1 = ext__ivy__times__fold_left(loc__dom, loc__0);
                                                                            {
                                                                                ivyc_s1::ivy__expr loc__domty;
                                                                                {
                                                                                    loc__domty = loc__1;
                                                                                    {
                                                                                        ivyc_s1::ivy__expr loc__0;
                                                                                        ivyc_s1::annot loc__1;
                                                                                        ivyc_s1::ivy__expr loc__2;
                                                                                        {
                                                                                            {
                                                                                                ivy__app self__COLON__ivy__app;
                                                                                                if (((typing).tag == 1)) self__COLON__ivy__app = ivyc_s1::ivy__expr::unwrap< ivyc_s1::ivy__app >(typing);
                                                                                                if(((typing).tag == 1)){
                                                                                                    loc__0 = ext__ivy__app__get_arg(self__COLON__ivy__app, 1);
                                                                                                }
                                                                                                else {
                                                                                                    loc__0 = ext__ivy__expr__get_arg(typing, 1);
                                                                                                }
                                                                                            }
                                                                                            {
                                                                                                ivy__app self__COLON__ivy__app;
                                                                                                if (((typing).tag == 1)) self__COLON__ivy__app = ivyc_s1::ivy__expr::unwrap< ivyc_s1::ivy__app >(typing);
                                                                                                if(((typing).tag == 1)){
                                                                                                    loc__1 = ext__ivy__app__get_ann(self__COLON__ivy__app);
                                                                                                }
                                                                                                else {
                                                                                                    {
                                                                                                        ivy__symbol self__COLON__ivy__symbol;
                                                                                                        if (((typing).tag == 0)) self__COLON__ivy__symbol = ivyc_s1::ivy__expr::unwrap< ivyc_s1::ivy__symbol >(typing);
                                                                                                        if(((typing).tag == 0)){
                                                                                                            loc__1 = ext__ivy__symbol__get_ann(self__COLON__ivy__symbol);
                                                                                                        }
                                                                                                        else {
                                                                                                            loc__1 = ext__ivy__expr__get_ann(typing);
                                                                                                        }
                                                                                                    }
                                                                                                }
                                                                                            }
                                                                                            loc__2 = ext__ivy__arrow__make(loc__domty, loc__0, loc__1);
                                                                                            {
                                                                                                ivyc_s1::ivy__expr loc__ty;
                                                                                                {
                                                                                                    loc__ty = loc__2;
                                                                                                    {
                                                                                                        ivyc_s1::ivy__expr loc__0;
                                                                                                        ivyc_s1::ivy__expr loc__1;
                                                                                                        ivyc_s1::annot loc__2;
                                                                                                        {
                                                                                                            {
                                                                                                                ivy__app self__COLON__ivy__app;
                                                                                                                if (((loc__lhs).tag == 1)) self__COLON__ivy__app = ivyc_s1::ivy__expr::unwrap< ivyc_s1::ivy__app >(loc__lhs);
                                                                                                                if(((loc__lhs).tag == 1)){
                                                                                                                    loc__0 = ext__ivy__app__get_func(self__COLON__ivy__app);
                                                                                                                }
                                                                                                                else {
                                                                                                                    loc__0 = ext__ivy__expr__get_func(loc__lhs);
                                                                                                                }
                                                                                                            }
                                                                                                            loc__1 = ext__ivy__expr__uncurry(loc__ty);
                                                                                                            {
                                                                                                                ivy__app self__COLON__ivy__app;
                                                                                                                if (((typing).tag == 1)) self__COLON__ivy__app = ivyc_s1::ivy__expr::unwrap< ivyc_s1::ivy__app >(typing);
                                                                                                                if(((typing).tag == 1)){
                                                                                                                    loc__2 = ext__ivy__app__get_ann(self__COLON__ivy__app);
                                                                                                                }
                                                                                                                else {
                                                                                                                    {
                                                                                                                        ivy__symbol self__COLON__ivy__symbol;
                                                                                                                        if (((typing).tag == 0)) self__COLON__ivy__symbol = ivyc_s1::ivy__expr::unwrap< ivyc_s1::ivy__symbol >(typing);
                                                                                                                        if(((typing).tag == 0)){
                                                                                                                            loc__2 = ext__ivy__symbol__get_ann(self__COLON__ivy__symbol);
                                                                                                                        }
                                                                                                                        else {
                                                                                                                            loc__2 = ext__ivy__expr__get_ann(typing);
                                                                                                                        }
                                                                                                                    }
                                                                                                                }
                                                                                                            }
                                                                                                            typing = ext__ivy__colon__make(loc__0, loc__1, loc__2);
                                                                                                        }
                                                                                                    }
                                                                                                }
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
            else {
                if(((typing).tag == 1)){
                    {
                        {
                            ivyc_s1::ivy__expr loc__0;
                            {
                                {
                                    ivy__app self__COLON__ivy__app;
                                    if (((typing).tag == 1)) self__COLON__ivy__app = ivyc_s1::ivy__expr::unwrap< ivyc_s1::ivy__app >(typing);
                                    if(((typing).tag == 1)){
                                        loc__0 = ext__ivy__app__get_func(self__COLON__ivy__app);
                                    }
                                    else {
                                        loc__0 = ext__ivy__expr__get_func(typing);
                                    }
                                }
                                ivyc_s1::ivy__expr __tmp29;
                                __tmp29 = loc__0; ext__ivy__canon_typing(__tmp29);
                                typing = __tmp29;
                            }
                        }
                    }
                }
            }
        }
    }
}
bool ivyc_s1::ext__ivy__app__has_numident(const ivy__app& s){
    bool res;
    res = (bool)___ivy_choose(0,"fml:res",0);
    {
        {
            ivy__app self__COLON__ivy__app;
            if (((s.func).tag == 1)) self__COLON__ivy__app = ivyc_s1::ivy__expr::unwrap< ivyc_s1::ivy__app >(s.func);
            if(((s.func).tag == 1)){
                res = ext__ivy__app__has_numident(self__COLON__ivy__app);
            }
            else {
                {
                    ivy__symbol self__COLON__ivy__symbol;
                    if (((s.func).tag == 0)) self__COLON__ivy__symbol = ivyc_s1::ivy__expr::unwrap< ivyc_s1::ivy__symbol >(s.func);
                    if(((s.func).tag == 0)){
                        res = ext__ivy__symbol__has_numident(self__COLON__ivy__symbol);
                    }
                    else {
                        res = ext__ivy__expr__has_numident(s.func);
                    }
                }
            }
        }
        {
            unsigned long long loc__idx;
    loc__idx = (unsigned long long)___ivy_choose(0,"loc:idx",15911);
            {
                loc__idx = vector__ivy__expr____begin(s.args);
                while((loc__idx < vector__ivy__expr____end(s.args))){
                    {
                        {
                            bool loc__0;
    loc__0 = (bool)___ivy_choose(0,"loc:0",15910);
                            {
                                {
                                    ivy__app self__COLON__ivy__app;
                                    if (((vector__ivy__expr____value(s.args,loc__idx)).tag == 1)) self__COLON__ivy__app = ivyc_s1::ivy__expr::unwrap< ivyc_s1::ivy__app >(vector__ivy__expr____value(s.args,loc__idx));
                                    if(((vector__ivy__expr____value(s.args,loc__idx)).tag == 1)){
                                        loc__0 = ext__ivy__app__has_numident(self__COLON__ivy__app);
                                    }
                                    else {
                                        {
                                            ivy__symbol self__COLON__ivy__symbol;
                                            if (((vector__ivy__expr____value(s.args,loc__idx)).tag == 0)) self__COLON__ivy__symbol = ivyc_s1::ivy__expr::unwrap< ivyc_s1::ivy__symbol >(vector__ivy__expr____value(s.args,loc__idx));
                                            if(((vector__ivy__expr____value(s.args,loc__idx)).tag == 0)){
                                                loc__0 = ext__ivy__symbol__has_numident(self__COLON__ivy__symbol);
                                            }
                                            else {
                                                loc__0 = ext__ivy__expr__has_numident(vector__ivy__expr____value(s.args,loc__idx));
                                            }
                                        }
                                    }
                                }
                                res = (res || loc__0);
                            }
                        }
                        loc__idx = ext__vector__ivy__expr____domain__next(loc__idx);
                    }
                }
            }
        }
    }
    return res;
}
void ivyc_s1::ext__ivy__report_error(ivyc_s1::ivy__error e, ivyc_s1::annot ann){
    {
        {
            pretty loc__0;
    loc__0.st.begin = (unsigned long long)___ivy_choose(0,"loc:0",15990);
    loc__0.st.total = (unsigned long long)___ivy_choose(0,"loc:0",15990);
    loc__0.maxline = (unsigned long long)___ivy_choose(0,"loc:0",15990);
    loc__0.indent = (unsigned long long)___ivy_choose(0,"loc:0",15990);
    loc__0.space = (unsigned long long)___ivy_choose(0,"loc:0",15990);
    loc__0.depth = (unsigned long long)___ivy_choose(0,"loc:0",15990);
    loc__0.cppstyle = (bool)___ivy_choose(0,"loc:0",15990);
            {
                loc__0 = ext__pretty__make(100, 4);
                {
                    pretty loc__b;
    loc__b.st.begin = (unsigned long long)___ivy_choose(0,"loc:b",15989);
    loc__b.st.total = (unsigned long long)___ivy_choose(0,"loc:b",15989);
    loc__b.maxline = (unsigned long long)___ivy_choose(0,"loc:b",15989);
    loc__b.indent = (unsigned long long)___ivy_choose(0,"loc:b",15989);
    loc__b.space = (unsigned long long)___ivy_choose(0,"loc:b",15989);
    loc__b.depth = (unsigned long long)___ivy_choose(0,"loc:b",15989);
    loc__b.cppstyle = (bool)___ivy_choose(0,"loc:b",15989);
                    {
                        loc__b = loc__0;
                        {
                            str loc__0;
                            {
                                {
                                    annot_i self__COLON__annot_i;
                                    if (((ann).tag == 0)) self__COLON__annot_i = ivyc_s1::annot::unwrap< ivyc_s1::annot_i >(ann);
                                    if(((ann).tag == 0)){
                                        loc__0 = ext__annot_i__to_str(self__COLON__annot_i);
                                    }
                                    else {
                                        loc__0 = ext__annot__to_str(ann);
                                    }
                                }
                                ext__pretty__extend(loc__b, loc__0);
                            }
                        }
                        ext__pretty__extend(loc__b, __lit<str>(":"));
                        ext__pretty__extend(loc__b, __lit<str>(" "));
                        {
                            ivy__syntax_error self__COLON__ivy__syntax_error;
                            if (((e).tag == 8)) self__COLON__ivy__syntax_error = ivyc_s1::ivy__error::unwrap< ivyc_s1::ivy__syntax_error >(e);
                            if(((e).tag == 8)){
                                ext__ivy__syntax_error__encode(self__COLON__ivy__syntax_error, loc__b);
                            }
                            else {
                                {
                                    ivy__wrong_number_params self__COLON__ivy__wrong_number_params;
                                    if (((e).tag == 7)) self__COLON__ivy__wrong_number_params = ivyc_s1::ivy__error::unwrap< ivyc_s1::ivy__wrong_number_params >(e);
                                    if(((e).tag == 7)){
                                        ext__ivy__wrong_number_params__encode(self__COLON__ivy__wrong_number_params, loc__b);
                                    }
                                    else {
                                        {
                                            ivy__undefined self__COLON__ivy__undefined;
                                            if (((e).tag == 6)) self__COLON__ivy__undefined = ivyc_s1::ivy__error::unwrap< ivyc_s1::ivy__undefined >(e);
                                            if(((e).tag == 6)){
                                                ext__ivy__undefined__encode(self__COLON__ivy__undefined, loc__b);
                                            }
                                            else {
                                                {
                                                    ivy__cannot_write self__COLON__ivy__cannot_write;
                                                    if (((e).tag == 5)) self__COLON__ivy__cannot_write = ivyc_s1::ivy__error::unwrap< ivyc_s1::ivy__cannot_write >(e);
                                                    if(((e).tag == 5)){
                                                        ext__ivy__cannot_write__encode(self__COLON__ivy__cannot_write, loc__b);
                                                    }
                                                    else {
                                                        {
                                                            ivy__file_not_found self__COLON__ivy__file_not_found;
                                                            if (((e).tag == 4)) self__COLON__ivy__file_not_found = ivyc_s1::ivy__error::unwrap< ivyc_s1::ivy__file_not_found >(e);
                                                            if(((e).tag == 4)){
                                                                ext__ivy__file_not_found__encode(self__COLON__ivy__file_not_found, loc__b);
                                                            }
                                                            else {
                                                                {
                                                                    ivy__not_first_order self__COLON__ivy__not_first_order;
                                                                    if (((e).tag == 3)) self__COLON__ivy__not_first_order = ivyc_s1::ivy__error::unwrap< ivyc_s1::ivy__not_first_order >(e);
                                                                    if(((e).tag == 3)){
                                                                        ext__ivy__not_first_order__encode(self__COLON__ivy__not_first_order, loc__b);
                                                                    }
                                                                    else {
                                                                        {
                                                                            ivy__untyped self__COLON__ivy__untyped;
                                                                            if (((e).tag == 2)) self__COLON__ivy__untyped = ivyc_s1::ivy__error::unwrap< ivyc_s1::ivy__untyped >(e);
                                                                            if(((e).tag == 2)){
                                                                                ext__ivy__untyped__encode(self__COLON__ivy__untyped, loc__b);
                                                                            }
                                                                            else {
                                                                                {
                                                                                    ivy__type_conversion self__COLON__ivy__type_conversion;
                                                                                    if (((e).tag == 1)) self__COLON__ivy__type_conversion = ivyc_s1::ivy__error::unwrap< ivyc_s1::ivy__type_conversion >(e);
                                                                                    if(((e).tag == 1)){
                                                                                        ext__ivy__type_conversion__encode(self__COLON__ivy__type_conversion, loc__b);
                                                                                    }
                                                                                    else {
                                                                                        {
                                                                                            ivy__type_clash self__COLON__ivy__type_clash;
                                                                                            if (((e).tag == 0)) self__COLON__ivy__type_clash = ivyc_s1::ivy__error::unwrap< ivyc_s1::ivy__type_clash >(e);
                                                                                            if(((e).tag == 0)){
                                                                                                ext__ivy__type_clash__encode(self__COLON__ivy__type_clash, loc__b);
                                                                                            }
                                                                                            else {
                                                                                                ext__ivy__error__encode(e, loc__b);
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                        ext__pretty__flush(loc__b);
                        ext__stdio__write(loc__b.output);
                        ext__vector__ivy__error____append(ivy__errors, e);
                    }
                }
            }
        }
    }
}
void ivyc_s1::ext__ivy__find_ident(ivyc_s1::ivy__ident root, ivyc_s1::ivy__ident& s, const ivy__flatst& st){
    {
        ivyc_s1::ivy__ident loc__0;
        {
            {
                ivy__dotident self__COLON__ivy__dotident;
                if (((s).tag == 2)) self__COLON__ivy__dotident = ivyc_s1::ivy__ident::unwrap< ivyc_s1::ivy__dotident >(s);
                if(((s).tag == 2)){
                    loc__0 = ext__ivy__dotident__prefix(self__COLON__ivy__dotident, root);
                }
                else {
                    {
                        ivy__strident self__COLON__ivy__strident;
                        if (((s).tag == 0)) self__COLON__ivy__strident = ivyc_s1::ivy__ident::unwrap< ivyc_s1::ivy__strident >(s);
                        if(((s).tag == 0)){
                            loc__0 = ext__ivy__strident__prefix(self__COLON__ivy__strident, root);
                        }
                        else {
                            loc__0 = ext__ivy__ident__prefix(s, root);
                        }
                    }
                }
            }
            {
                ivyc_s1::ivy__ident loc__cand;
                {
                    loc__cand = loc__0;
                    {
                        bool loc__0;
    loc__0 = (bool)___ivy_choose(0,"loc:0",16396);
                        {
                            loc__0 = ext__ivy__ident_set__mem(st.defs, loc__cand);
                            if(loc__0){
                                s = loc__cand;
                            }
                            else {
                                if(((root).tag == 2)){
                                    {
                                        ivyc_s1::ivy__ident loc__0;
                                        {
                                            {
                                                ivy__dotident self__COLON__ivy__dotident;
                                                if (((root).tag == 2)) self__COLON__ivy__dotident = ivyc_s1::ivy__ident::unwrap< ivyc_s1::ivy__dotident >(root);
                                                if(((root).tag == 2)){
                                                    loc__0 = ext__ivy__dotident__get_namesp(self__COLON__ivy__dotident);
                                                }
                                                else {
                                                    loc__0 = ext__ivy__ident__get_namesp(root);
                                                }
                                            }
                                            ext__ivy__find_ident(loc__0, s, st);
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
    }
}
ivyc_s1::ivy__ident ivyc_s1::ext__ivy__dotident__make(ivyc_s1::ivy__ident namesp, const ivy__strident& member){
    ivyc_s1::ivy__ident res;
    {
        ivy__dotident loc__s;
        {
            loc__s.namesp = namesp;
            loc__s.member = member;
            res = ivyc_s1::ivy__ident(2, new ivyc_s1::ivy__ident::twrap<ivyc_s1::ivy__dotident>(loc__s));
        }
    }
    return res;
}
void ivyc_s1::ext__ivy__prog__typeinfer(ivy__prog& p){
    {
        {
            ivy__typeinferst loc__st;
            {
                loc__st.subtype_rel = ext__ivy__prog__get_subtypes(p);
                {
                    ivy__global_types loc__0;
    loc__0.curried = (bool)___ivy_choose(0,"loc:0",15927);
                    {
                        loc__0 = ext__ivy__prog__get_global_types(p, false);
                        {
                            ivy__global_types loc__gt;
    loc__gt.curried = (bool)___ivy_choose(0,"loc:gt",15926);
                            {
                                loc__gt = loc__0;
                                loc__st.tc.m = loc__gt.type_of;
                                {
                                    unsigned long long loc__idx;
    loc__idx = (unsigned long long)___ivy_choose(0,"loc:idx",15925);
                                    {
                                        loc__idx = vector__ivy__decl____begin(p.decls);
                                        while((loc__idx < vector__ivy__decl____end(p.decls))){
                                            {
                                                {
                                                    ivyc_s1::ivy__decl loc__d;
                                                    {
                                                        {
                                                            ivy__initdc self__COLON__ivy__initdc;
                                                            if (((vector__ivy__decl____value(p.decls,loc__idx)).tag == 11)) self__COLON__ivy__initdc = ivyc_s1::ivy__decl::unwrap< ivyc_s1::ivy__initdc >(vector__ivy__decl____value(p.decls,loc__idx));
                                                            if(((vector__ivy__decl____value(p.decls,loc__idx)).tag == 11)){
                                                                loc__d = ext__ivy__initdc__typeinfer(self__COLON__ivy__initdc, loc__st);
                                                            }
                                                            else {
                                                                {
                                                                    ivy__vardc self__COLON__ivy__vardc;
                                                                    if (((vector__ivy__decl____value(p.decls,loc__idx)).tag == 3)) self__COLON__ivy__vardc = ivyc_s1::ivy__decl::unwrap< ivyc_s1::ivy__vardc >(vector__ivy__decl____value(p.decls,loc__idx));
                                                                    if(((vector__ivy__decl____value(p.decls,loc__idx)).tag == 3)){
                                                                        loc__d = ext__ivy__vardc__typeinfer(self__COLON__ivy__vardc, loc__st);
                                                                    }
                                                                    else {
                                                                        {
                                                                            ivy__actdc self__COLON__ivy__actdc;
                                                                            if (((vector__ivy__decl____value(p.decls,loc__idx)).tag == 0)) self__COLON__ivy__actdc = ivyc_s1::ivy__decl::unwrap< ivyc_s1::ivy__actdc >(vector__ivy__decl____value(p.decls,loc__idx));
                                                                            if(((vector__ivy__decl____value(p.decls,loc__idx)).tag == 0)){
                                                                                loc__d = ext__ivy__actdc__typeinfer(self__COLON__ivy__actdc, loc__st);
                                                                            }
                                                                            else {
                                                                                loc__d = ext__ivy__decl__typeinfer(vector__ivy__decl____value(p.decls,loc__idx), loc__st);
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                        ext__vector__ivy__decl____set(p.decls, loc__idx, loc__d);
                                                        loc__idx = ext__vector__ivy__decl____domain__next(loc__idx);
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
    }
}
void ivyc_s1::ext__ivy__not_first_order__encode(const ivy__not_first_order& e, pretty& b){
    {
        ext__pretty__extend(b, __lit<str>("Expression should have simple type:"));
        ext__pretty__newline(b);
        {
            ivy__pi self__COLON__ivy__pi;
            if (((e.e).tag == 3)) self__COLON__ivy__pi = ivyc_s1::ivy__expr::unwrap< ivyc_s1::ivy__pi >(e.e);
            if(((e.e).tag == 3)){
                ext__ivy__pi__encode(self__COLON__ivy__pi, b, 0);
            }
            else {
                {
                    ivy__app self__COLON__ivy__app;
                    if (((e.e).tag == 1)) self__COLON__ivy__app = ivyc_s1::ivy__expr::unwrap< ivyc_s1::ivy__app >(e.e);
                    if(((e.e).tag == 1)){
                        ext__ivy__app__encode(self__COLON__ivy__app, b, 0);
                    }
                    else {
                        {
                            ivy__symbol self__COLON__ivy__symbol;
                            if (((e.e).tag == 0)) self__COLON__ivy__symbol = ivyc_s1::ivy__expr::unwrap< ivyc_s1::ivy__symbol >(e.e);
                            if(((e.e).tag == 0)){
                                ext__ivy__symbol__encode(self__COLON__ivy__symbol, b, 0);
                            }
                            else {
                                ext__ivy__expr__encode(e.e, b, 0);
                            }
                        }
                    }
                }
            }
        }
        ext__pretty__newline(b);
        ext__pretty__extend(b, __lit<str>("Actual type:"));
        ext__pretty__extend(b, __lit<str>(" "));
        {
            ivy__pi self__COLON__ivy__pi;
            if (((e.t1).tag == 3)) self__COLON__ivy__pi = ivyc_s1::ivy__expr::unwrap< ivyc_s1::ivy__pi >(e.t1);
            if(((e.t1).tag == 3)){
                ext__ivy__pi__encode(self__COLON__ivy__pi, b, 0);
            }
            else {
                {
                    ivy__app self__COLON__ivy__app;
                    if (((e.t1).tag == 1)) self__COLON__ivy__app = ivyc_s1::ivy__expr::unwrap< ivyc_s1::ivy__app >(e.t1);
                    if(((e.t1).tag == 1)){
                        ext__ivy__app__encode(self__COLON__ivy__app, b, 0);
                    }
                    else {
                        {
                            ivy__symbol self__COLON__ivy__symbol;
                            if (((e.t1).tag == 0)) self__COLON__ivy__symbol = ivyc_s1::ivy__expr::unwrap< ivyc_s1::ivy__symbol >(e.t1);
                            if(((e.t1).tag == 0)){
                                ext__ivy__symbol__encode(self__COLON__ivy__symbol, b, 0);
                            }
                            else {
                                ext__ivy__expr__encode(e.t1, b, 0);
                            }
                        }
                    }
                }
            }
        }
    }
}
bool ivyc_s1::ext__ivy__expr__is_typed(ivyc_s1::ivy__expr s, ivy__verb vrb){
    bool res;
    res = (bool)___ivy_choose(0,"fml:res",0);
    {
        res = false;
    }
    return res;
}
ivyc_s1::ivy__expr ivyc_s1::ext__ivy__varst__get_expr(const ivy__varst& s){
    ivyc_s1::ivy__expr res;
    {
        res = s.name;
    }
    return res;
}
ivyc_s1::cpp__expr ivyc_s1::ext__ivy__call_to_cpp(ivyc_s1::ivy__expr func, const vector__ivy__expr__& inputs, ivyc_s1::annot ann, ivy__tocppst& st){
    ivyc_s1::cpp__expr res;
    {
        ivyc_s1::ivy__expr loc__0;
        ivyc_s1::ivy__ident loc__1;
        {
            {
                ivy__app self__COLON__ivy__app;
                if (((func).tag == 1)) self__COLON__ivy__app = ivyc_s1::ivy__expr::unwrap< ivyc_s1::ivy__app >(func);
                if(((func).tag == 1)){
                    loc__0 = ext__ivy__app__get_arg(self__COLON__ivy__app, 0);
                }
                else {
                    loc__0 = ext__ivy__expr__get_arg(func, 0);
                }
            }
            {
                ivy__symbol self__COLON__ivy__symbol;
                if (((loc__0).tag == 0)) self__COLON__ivy__symbol = ivyc_s1::ivy__expr::unwrap< ivyc_s1::ivy__symbol >(loc__0);
                if(((loc__0).tag == 0)){
                    loc__1 = ext__ivy__symbol__get_name(self__COLON__ivy__symbol);
                }
                else {
                    loc__1 = ext__ivy__expr__get_name(loc__0);
                }
            }
            {
                ivy__prototype loc__proto;
    loc__proto.has_ret = (bool)___ivy_choose(0,"loc:proto",15958);
    loc__proto.ret.is_input = (bool)___ivy_choose(0,"loc:proto",15958);
    loc__proto.ret.inpos = (unsigned long long)___ivy_choose(0,"loc:proto",15958);
    loc__proto.ret.is_output = (bool)___ivy_choose(0,"loc:proto",15958);
    loc__proto.ret.outpos = (unsigned long long)___ivy_choose(0,"loc:proto",15958);
    loc__proto.ret.is_ref = (bool)___ivy_choose(0,"loc:proto",15958);
    loc__proto.ret.is_const = (bool)___ivy_choose(0,"loc:proto",15958);
                {
                    loc__proto = ivy__ident_to_prototype__value(st.protos,loc__1);
                    {
                        vector__cpp__expr__ loc__inpvals;
                        {
                            {
                                unsigned long long loc__idx;
    loc__idx = (unsigned long long)___ivy_choose(0,"loc:idx",15956);
                                {
                                    loc__idx = vector__ivy__prototype_argument____begin(loc__proto.args);
                                    while((loc__idx < vector__ivy__prototype_argument____end(loc__proto.args))){
                                        {
                                            ivyc_s1::cpp__expr loc__inp;
                                            {
                                                {
                                                    ivy__prototype_argument loc__parg;
    loc__parg.is_input = (bool)___ivy_choose(0,"loc:parg",15937);
    loc__parg.inpos = (unsigned long long)___ivy_choose(0,"loc:parg",15937);
    loc__parg.is_output = (bool)___ivy_choose(0,"loc:parg",15937);
    loc__parg.outpos = (unsigned long long)___ivy_choose(0,"loc:parg",15937);
    loc__parg.is_ref = (bool)___ivy_choose(0,"loc:parg",15937);
    loc__parg.is_const = (bool)___ivy_choose(0,"loc:parg",15937);
                                                    {
                                                        loc__parg = vector__ivy__prototype_argument____value(loc__proto.args,loc__idx);
                                                        if(loc__parg.is_input){
                                                            {
                                                                {
                                                                    vector__ivy__expr__ loc__save_outputs;
                                                                    {
                                                                        loc__save_outputs = st.outputs;
                                                                        st.outputs = ext__vector__ivy__expr____empty();
                                                                        {
                                                                            ivy__app self__COLON__ivy__app;
                                                                            if (((vector__ivy__expr____value(inputs,loc__parg.inpos)).tag == 1)) self__COLON__ivy__app = ivyc_s1::ivy__expr::unwrap< ivyc_s1::ivy__app >(vector__ivy__expr____value(inputs,loc__parg.inpos));
                                                                            if(((vector__ivy__expr____value(inputs,loc__parg.inpos)).tag == 1)){
                                                                                loc__inp = ext__ivy__app__to_cpp(self__COLON__ivy__app, st);
                                                                            }
                                                                            else {
                                                                                {
                                                                                    ivy__symbol self__COLON__ivy__symbol;
                                                                                    if (((vector__ivy__expr____value(inputs,loc__parg.inpos)).tag == 0)) self__COLON__ivy__symbol = ivyc_s1::ivy__expr::unwrap< ivyc_s1::ivy__symbol >(vector__ivy__expr____value(inputs,loc__parg.inpos));
                                                                                    if(((vector__ivy__expr____value(inputs,loc__parg.inpos)).tag == 0)){
                                                                                        loc__inp = ext__ivy__symbol__to_cpp(self__COLON__ivy__symbol, st);
                                                                                    }
                                                                                    else {
                                                                                        loc__inp = ext__ivy__expr__to_cpp(vector__ivy__expr____value(inputs,loc__parg.inpos), st);
                                                                                    }
                                                                                }
                                                                            }
                                                                        }
                                                                        st.outputs = loc__save_outputs;
                                                                    }
                                                                }
                                                            }
                                                        }
                                                        ext__vector__cpp__expr____append(loc__inpvals, loc__inp);
                                                        loc__idx = ext__vector__ivy__prototype_argument____domain__next(loc__idx);
                                                    }
                                                }
                                            }
                                        }
                                    }
                                    {
                                        vector__cpp__expr__ loc__args;
                                        {
                                            loc__idx = vector__ivy__prototype_argument____begin(loc__proto.args);
                                            {
                                                vector__cpp__stmt__ loc__rets;
                                                {
                                                    {
                                                        vector__cpp__expr__ loc__ret_vals;
                                                        {
                                                            {
                                                                unsigned long long loc__kdx;
    loc__kdx = (unsigned long long)___ivy_choose(0,"loc:kdx",15952);
                                                                {
                                                                    loc__kdx = vector__cpp__expr____begin(loc__inpvals);
                                                                    while((loc__idx < vector__ivy__prototype_argument____end(loc__proto.args))){
                                                                        {
                                                                            ivy__prototype_argument loc__parg;
    loc__parg.is_input = (bool)___ivy_choose(0,"loc:parg",15949);
    loc__parg.inpos = (unsigned long long)___ivy_choose(0,"loc:parg",15949);
    loc__parg.is_output = (bool)___ivy_choose(0,"loc:parg",15949);
    loc__parg.outpos = (unsigned long long)___ivy_choose(0,"loc:parg",15949);
    loc__parg.is_ref = (bool)___ivy_choose(0,"loc:parg",15949);
    loc__parg.is_const = (bool)___ivy_choose(0,"loc:parg",15949);
                                                                            {
                                                                                loc__parg = vector__ivy__prototype_argument____value(loc__proto.args,loc__idx);
                                                                                {
                                                                                    ivyc_s1::cpp__expr loc__inp;
                                                                                    {
                                                                                        loc__inp = vector__cpp__expr____value(loc__inpvals,loc__kdx);
                                                                                        {
                                                                                            ivyc_s1::cpp__expr loc__out;
                                                                                            {
                                                                                                if((loc__parg.is_output && (0 < vector__ivy__expr____end(st.outputs)))){
                                                                                                    {
                                                                                                        {
                                                                                                            ivy__app self__COLON__ivy__app;
                                                                                                            if (((vector__ivy__expr____value(st.outputs,loc__parg.outpos)).tag == 1)) self__COLON__ivy__app = ivyc_s1::ivy__expr::unwrap< ivyc_s1::ivy__app >(vector__ivy__expr____value(st.outputs,loc__parg.outpos));
                                                                                                            if(((vector__ivy__expr____value(st.outputs,loc__parg.outpos)).tag == 1)){
                                                                                                                loc__out = ext__ivy__app__to_cpp(self__COLON__ivy__app, st);
                                                                                                            }
                                                                                                            else {
                                                                                                                {
                                                                                                                    ivy__symbol self__COLON__ivy__symbol;
                                                                                                                    if (((vector__ivy__expr____value(st.outputs,loc__parg.outpos)).tag == 0)) self__COLON__ivy__symbol = ivyc_s1::ivy__expr::unwrap< ivyc_s1::ivy__symbol >(vector__ivy__expr____value(st.outputs,loc__parg.outpos));
                                                                                                                    if(((vector__ivy__expr____value(st.outputs,loc__parg.outpos)).tag == 0)){
                                                                                                                        loc__out = ext__ivy__symbol__to_cpp(self__COLON__ivy__symbol, st);
                                                                                                                    }
                                                                                                                    else {
                                                                                                                        loc__out = ext__ivy__expr__to_cpp(vector__ivy__expr____value(st.outputs,loc__parg.outpos), st);
                                                                                                                    }
                                                                                                                }
                                                                                                            }
                                                                                                        }
                                                                                                        {
                                                                                                            bool loc__0;
    loc__0 = (bool)___ivy_choose(0,"loc:0",15942);
                                                                                                            {
                                                                                                                loc__0 = ext__ivy__is_dead(loc__out, st, (loc__parg.is_input ? 1 : 0));
                                                                                                                if(!loc__0){
                                                                                                                    {
                                                                                                                        {
                                                                                                                            ivyc_s1::cpp__expr loc__orig;
                                                                                                                            {
                                                                                                                                loc__orig = loc__out;
                                                                                                                                {
                                                                                                                                    ivyc_s1::ivy__expr loc__0;
                                                                                                                                    {
                                                                                                                                        {
                                                                                                                                            ivy__app self__COLON__ivy__app;
                                                                                                                                            if (((loc__parg.name).tag == 1)) self__COLON__ivy__app = ivyc_s1::ivy__expr::unwrap< ivyc_s1::ivy__app >(loc__parg.name);
                                                                                                                                            if(((loc__parg.name).tag == 1)){
                                                                                                                                                loc__0 = ext__ivy__app__get_arg(self__COLON__ivy__app, 1);
                                                                                                                                            }
                                                                                                                                            else {
                                                                                                                                                loc__0 = ext__ivy__expr__get_arg(loc__parg.name, 1);
                                                                                                                                            }
                                                                                                                                        }
                                                                                                                                        ext__ivy__make_temp(st, loc__0, ann, loc__out);
                                                                                                                                    }
                                                                                                                                }
                                                                                                                                {
                                                                                                                                    ivyc_s1::cpp__stmt loc__0;
                                                                                                                                    {
                                                                                                                                        loc__0 = ext__cpp__asgn__make(loc__orig, loc__out, ann);
                                                                                                                                        ext__vector__cpp__stmt____append(loc__rets, loc__0);
                                                                                                                                    }
                                                                                                                                }
                                                                                                                            }
                                                                                                                        }
                                                                                                                    }
                                                                                                                }
                                                                                                            }
                                                                                                        }
                                                                                                    }
                                                                                                }
                                                                                                else {
                                                                                                    if((loc__parg.is_ref && !loc__parg.is_const)){
                                                                                                        {
                                                                                                            {
                                                                                                                bool loc__0;
    loc__0 = (bool)___ivy_choose(0,"loc:0",15944);
                                                                                                                {
                                                                                                                    loc__0 = ext__ivy__is_dead(loc__inp, st, 1);
                                                                                                                    if(loc__0){
                                                                                                                        {
                                                                                                                            loc__out = loc__inp;
                                                                                                                        }
                                                                                                                    }
                                                                                                                    else {
                                                                                                                        {
                                                                                                                            {
                                                                                                                                ivyc_s1::ivy__expr loc__0;
                                                                                                                                {
                                                                                                                                    {
                                                                                                                                        ivy__app self__COLON__ivy__app;
                                                                                                                                        if (((loc__parg.name).tag == 1)) self__COLON__ivy__app = ivyc_s1::ivy__expr::unwrap< ivyc_s1::ivy__app >(loc__parg.name);
                                                                                                                                        if(((loc__parg.name).tag == 1)){
                                                                                                                                            loc__0 = ext__ivy__app__get_arg(self__COLON__ivy__app, 1);
                                                                                                                                        }
                                                                                                                                        else {
                                                                                                                                            loc__0 = ext__ivy__expr__get_arg(loc__parg.name, 1);
                                                                                                                                        }
                                                                                                                                    }
                                                                                                                                    ext__ivy__make_temp(st, loc__0, ann, loc__out);
                                                                                                                                }
                                                                                                                            }
                                                                                                                        }
                                                                                                                    }
                                                                                                                }
                                                                                                            }
                                                                                                            ext__vector__cpp__expr____append(loc__ret_vals, loc__out);
                                                                                                        }
                                                                                                    }
                                                                                                }
                                                                                                {
                                                                                                    bool loc__0;
    loc__0 = (bool)___ivy_choose(0,"loc:0",15946);
                                                                                                    {
                                                                                                        loc__0 = ext__cpp__expr__eq(loc__inp, loc__out);
                                                                                                        if((loc__parg.is_input && loc__parg.is_ref && !loc__parg.is_const && !loc__0)){
                                                                                                            {
                                                                                                                {
                                                                                                                    ivyc_s1::cpp__stmt loc__0;
                                                                                                                    {
                                                                                                                        loc__0 = ext__cpp__asgn__make(loc__out, loc__inp, ann);
                                                                                                                        ext__ivy__tocppst__add_stmt(st, loc__0);
                                                                                                                    }
                                                                                                                }
                                                                                                                loc__inp = loc__out;
                                                                                                            }
                                                                                                        }
                                                                                                        else {
                                                                                                            if(loc__parg.is_output){
                                                                                                                loc__inp = loc__out;
                                                                                                            }
                                                                                                        }
                                                                                                    }
                                                                                                }
                                                                                                ext__vector__cpp__expr____append(loc__args, loc__inp);
                                                                                                loc__idx = ext__vector__ivy__prototype_argument____domain__next(loc__idx);
                                                                                                loc__kdx = ext__vector__cpp__expr____domain__next(loc__kdx);
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                    res = ext__ivy__make_cpp_call(func, loc__args, ann, st);
                                                                    ext__ivy__unown_func_args(inputs, st);
                                                                    if(((0 < vector__cpp__expr____end(loc__ret_vals)) || (0 < vector__cpp__stmt____end(loc__rets)) || !loc__proto.has_ret)){
                                                                        {
                                                                            {
                                                                                ivyc_s1::cpp__expr loc__0;
                                                                                ivyc_s1::cpp__stmt loc__1;
                                                                                {
                                                                                    loc__0 = ext__cpp__empty__make(ann);
                                                                                    loc__1 = ext__cpp__asgn__make(loc__0, res, ann);
                                                                                    ext__ivy__tocppst__add_stmt(st, loc__1);
                                                                                }
                                                                            }
                                                                            {
                                                                                unsigned long long loc__jdx;
    loc__jdx = (unsigned long long)___ivy_choose(0,"loc:jdx",15951);
                                                                                {
                                                                                    loc__jdx = vector__cpp__stmt____begin(loc__rets);
                                                                                    while((loc__jdx < vector__cpp__stmt____end(loc__rets))){
                                                                                        {
                                                                                            ext__ivy__tocppst__add_stmt(st, vector__cpp__stmt____value(loc__rets,loc__jdx));
                                                                                            loc__jdx = ext__vector__cpp__stmt____domain__next(loc__jdx);
                                                                                        }
                                                                                    }
                                                                                    res = ext__cpp__comma__fold_left(loc__ret_vals, ann);
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
    }
    return res;
}
unsigned long long ivyc_s1::ext__vector__ivy__stmt____domain__next(unsigned long long x){
    unsigned long long y;
    y = (unsigned long long)___ivy_choose(0,"fml:y",0);
    {
        y = (x + 1);
    }
    return y;
}
void ivyc_s1::ext__ivy__cannot_infer(ivyc_s1::ivy__expr e, ivyc_s1::ivy__expr t){
    {
        str loc__0;
        str loc__1;
        {
            loc__0 = ext__ivy__expr__enc(e);
            loc__1 = ext__ivy__expr__enc(t);
            ext__ivy__report_cannot_infer(loc__0, loc__1);
        }
    }
}
ivyc_s1::vector__ivy__expr__ ivyc_s1::ext__ivy__enumspec__get_elems(const ivy__enumspec& s){
    ivyc_s1::vector__ivy__expr__ res;
    res = s.constructors;
    return res;
}
ivyc_s1::cpp__stmt ivyc_s1::ext__ivy__sequence__to_cpp(const ivy__sequence& s, ivy__tocppst& st){
    ivyc_s1::cpp__stmt resd;
    {
        {
            cpp__sequence loc__res;
            {
                loc__res.ann = s.ann;
                ext__ivy__local_tracker__push_stmt(st.locals, s.lhs);
                {
                    ivy__varst self__COLON__ivy__varst;
                    if (((s.lhs).tag == 6)) self__COLON__ivy__varst = ivyc_s1::ivy__stmt::unwrap< ivyc_s1::ivy__varst >(s.lhs);
                    if(((s.lhs).tag == 6)){
                        loc__res.lhs = ext__ivy__varst__to_cpp(self__COLON__ivy__varst, st);
                    }
                    else {
                        {
                            ivy__whilest self__COLON__ivy__whilest;
                            if (((s.lhs).tag == 4)) self__COLON__ivy__whilest = ivyc_s1::ivy__stmt::unwrap< ivyc_s1::ivy__whilest >(s.lhs);
                            if(((s.lhs).tag == 4)){
                                loc__res.lhs = ext__ivy__whilest__to_cpp(self__COLON__ivy__whilest, st);
                            }
                            else {
                                {
                                    ivy__ifst self__COLON__ivy__ifst;
                                    if (((s.lhs).tag == 3)) self__COLON__ivy__ifst = ivyc_s1::ivy__stmt::unwrap< ivyc_s1::ivy__ifst >(s.lhs);
                                    if(((s.lhs).tag == 3)){
                                        loc__res.lhs = ext__ivy__ifst__to_cpp(self__COLON__ivy__ifst, st);
                                    }
                                    else {
                                        {
                                            ivy__skipst self__COLON__ivy__skipst;
                                            if (((s.lhs).tag == 2)) self__COLON__ivy__skipst = ivyc_s1::ivy__stmt::unwrap< ivyc_s1::ivy__skipst >(s.lhs);
                                            if(((s.lhs).tag == 2)){
                                                loc__res.lhs = ext__ivy__skipst__to_cpp(self__COLON__ivy__skipst, st);
                                            }
                                            else {
                                                {
                                                    ivy__sequence self__COLON__ivy__sequence;
                                                    if (((s.lhs).tag == 1)) self__COLON__ivy__sequence = ivyc_s1::ivy__stmt::unwrap< ivyc_s1::ivy__sequence >(s.lhs);
                                                    if(((s.lhs).tag == 1)){
                                                        loc__res.lhs = ext__ivy__sequence__to_cpp(self__COLON__ivy__sequence, st);
                                                    }
                                                    else {
                                                        {
                                                            ivy__asgn self__COLON__ivy__asgn;
                                                            if (((s.lhs).tag == 0)) self__COLON__ivy__asgn = ivyc_s1::ivy__stmt::unwrap< ivyc_s1::ivy__asgn >(s.lhs);
                                                            if(((s.lhs).tag == 0)){
                                                                loc__res.lhs = ext__ivy__asgn__to_cpp(self__COLON__ivy__asgn, st);
                                                            }
                                                            else {
                                                                loc__res.lhs = ext__ivy__stmt__to_cpp(s.lhs, st);
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
                {
                    ivy__varst self__COLON__ivy__varst;
                    if (((s.rhs).tag == 6)) self__COLON__ivy__varst = ivyc_s1::ivy__stmt::unwrap< ivyc_s1::ivy__varst >(s.rhs);
                    if(((s.rhs).tag == 6)){
                        loc__res.rhs = ext__ivy__varst__to_cpp(self__COLON__ivy__varst, st);
                    }
                    else {
                        {
                            ivy__whilest self__COLON__ivy__whilest;
                            if (((s.rhs).tag == 4)) self__COLON__ivy__whilest = ivyc_s1::ivy__stmt::unwrap< ivyc_s1::ivy__whilest >(s.rhs);
                            if(((s.rhs).tag == 4)){
                                loc__res.rhs = ext__ivy__whilest__to_cpp(self__COLON__ivy__whilest, st);
                            }
                            else {
                                {
                                    ivy__ifst self__COLON__ivy__ifst;
                                    if (((s.rhs).tag == 3)) self__COLON__ivy__ifst = ivyc_s1::ivy__stmt::unwrap< ivyc_s1::ivy__ifst >(s.rhs);
                                    if(((s.rhs).tag == 3)){
                                        loc__res.rhs = ext__ivy__ifst__to_cpp(self__COLON__ivy__ifst, st);
                                    }
                                    else {
                                        {
                                            ivy__skipst self__COLON__ivy__skipst;
                                            if (((s.rhs).tag == 2)) self__COLON__ivy__skipst = ivyc_s1::ivy__stmt::unwrap< ivyc_s1::ivy__skipst >(s.rhs);
                                            if(((s.rhs).tag == 2)){
                                                loc__res.rhs = ext__ivy__skipst__to_cpp(self__COLON__ivy__skipst, st);
                                            }
                                            else {
                                                {
                                                    ivy__sequence self__COLON__ivy__sequence;
                                                    if (((s.rhs).tag == 1)) self__COLON__ivy__sequence = ivyc_s1::ivy__stmt::unwrap< ivyc_s1::ivy__sequence >(s.rhs);
                                                    if(((s.rhs).tag == 1)){
                                                        loc__res.rhs = ext__ivy__sequence__to_cpp(self__COLON__ivy__sequence, st);
                                                    }
                                                    else {
                                                        {
                                                            ivy__asgn self__COLON__ivy__asgn;
                                                            if (((s.rhs).tag == 0)) self__COLON__ivy__asgn = ivyc_s1::ivy__stmt::unwrap< ivyc_s1::ivy__asgn >(s.rhs);
                                                            if(((s.rhs).tag == 0)){
                                                                loc__res.rhs = ext__ivy__asgn__to_cpp(self__COLON__ivy__asgn, st);
                                                            }
                                                            else {
                                                                loc__res.rhs = ext__ivy__stmt__to_cpp(s.rhs, st);
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
                ext__ivy__local_tracker__pop(st.locals);
                resd = ivyc_s1::cpp__stmt(1, new ivyc_s1::cpp__stmt::twrap<ivyc_s1::cpp__sequence>(loc__res));
            }
        }
    }
    return resd;
}
unsigned long long ivyc_s1::ext__vector__cpp__decl____domain__next(unsigned long long x){
    unsigned long long y;
    y = (unsigned long long)___ivy_choose(0,"fml:y",0);
    {
        y = (x + 1);
    }
    return y;
}
void ivyc_s1::ext__cpp__sequence__encode_int(const cpp__sequence& s, pretty& b, int prio){
    {
        {
            cpp__retst self__COLON__cpp__retst;
            if (((s.lhs).tag == 7)) self__COLON__cpp__retst = ivyc_s1::cpp__stmt::unwrap< ivyc_s1::cpp__retst >(s.lhs);
            if(((s.lhs).tag == 7)){
                ext__cpp__retst__encode(self__COLON__cpp__retst, b, 1);
            }
            else {
                {
                    cpp__varst self__COLON__cpp__varst;
                    if (((s.lhs).tag == 6)) self__COLON__cpp__varst = ivyc_s1::cpp__stmt::unwrap< ivyc_s1::cpp__varst >(s.lhs);
                    if(((s.lhs).tag == 6)){
                        ext__cpp__varst__encode(self__COLON__cpp__varst, b, 1);
                    }
                    else {
                        {
                            cpp__breakst self__COLON__cpp__breakst;
                            if (((s.lhs).tag == 5)) self__COLON__cpp__breakst = ivyc_s1::cpp__stmt::unwrap< ivyc_s1::cpp__breakst >(s.lhs);
                            if(((s.lhs).tag == 5)){
                                ext__cpp__breakst__encode(self__COLON__cpp__breakst, b, 1);
                            }
                            else {
                                {
                                    cpp__whilest self__COLON__cpp__whilest;
                                    if (((s.lhs).tag == 4)) self__COLON__cpp__whilest = ivyc_s1::cpp__stmt::unwrap< ivyc_s1::cpp__whilest >(s.lhs);
                                    if(((s.lhs).tag == 4)){
                                        ext__cpp__whilest__encode(self__COLON__cpp__whilest, b, 1);
                                    }
                                    else {
                                        {
                                            cpp__ifst self__COLON__cpp__ifst;
                                            if (((s.lhs).tag == 3)) self__COLON__cpp__ifst = ivyc_s1::cpp__stmt::unwrap< ivyc_s1::cpp__ifst >(s.lhs);
                                            if(((s.lhs).tag == 3)){
                                                ext__cpp__ifst__encode(self__COLON__cpp__ifst, b, 1);
                                            }
                                            else {
                                                {
                                                    cpp__skipst self__COLON__cpp__skipst;
                                                    if (((s.lhs).tag == 2)) self__COLON__cpp__skipst = ivyc_s1::cpp__stmt::unwrap< ivyc_s1::cpp__skipst >(s.lhs);
                                                    if(((s.lhs).tag == 2)){
                                                        ext__cpp__skipst__encode(self__COLON__cpp__skipst, b, 1);
                                                    }
                                                    else {
                                                        {
                                                            cpp__sequence self__COLON__cpp__sequence;
                                                            if (((s.lhs).tag == 1)) self__COLON__cpp__sequence = ivyc_s1::cpp__stmt::unwrap< ivyc_s1::cpp__sequence >(s.lhs);
                                                            if(((s.lhs).tag == 1)){
                                                                ext__cpp__sequence__encode(self__COLON__cpp__sequence, b, 1);
                                                            }
                                                            else {
                                                                {
                                                                    cpp__asgn self__COLON__cpp__asgn;
                                                                    if (((s.lhs).tag == 0)) self__COLON__cpp__asgn = ivyc_s1::cpp__stmt::unwrap< ivyc_s1::cpp__asgn >(s.lhs);
                                                                    if(((s.lhs).tag == 0)){
                                                                        ext__cpp__asgn__encode(self__COLON__cpp__asgn, b, 1);
                                                                    }
                                                                    else {
                                                                        ext__cpp__stmt__encode(s.lhs, b, 1);
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
        ext__pretty__newline(b);
        {
            cpp__retst self__COLON__cpp__retst;
            if (((s.rhs).tag == 7)) self__COLON__cpp__retst = ivyc_s1::cpp__stmt::unwrap< ivyc_s1::cpp__retst >(s.rhs);
            if(((s.rhs).tag == 7)){
                ext__cpp__retst__encode(self__COLON__cpp__retst, b, 0);
            }
            else {
                {
                    cpp__varst self__COLON__cpp__varst;
                    if (((s.rhs).tag == 6)) self__COLON__cpp__varst = ivyc_s1::cpp__stmt::unwrap< ivyc_s1::cpp__varst >(s.rhs);
                    if(((s.rhs).tag == 6)){
                        ext__cpp__varst__encode(self__COLON__cpp__varst, b, 0);
                    }
                    else {
                        {
                            cpp__breakst self__COLON__cpp__breakst;
                            if (((s.rhs).tag == 5)) self__COLON__cpp__breakst = ivyc_s1::cpp__stmt::unwrap< ivyc_s1::cpp__breakst >(s.rhs);
                            if(((s.rhs).tag == 5)){
                                ext__cpp__breakst__encode(self__COLON__cpp__breakst, b, 0);
                            }
                            else {
                                {
                                    cpp__whilest self__COLON__cpp__whilest;
                                    if (((s.rhs).tag == 4)) self__COLON__cpp__whilest = ivyc_s1::cpp__stmt::unwrap< ivyc_s1::cpp__whilest >(s.rhs);
                                    if(((s.rhs).tag == 4)){
                                        ext__cpp__whilest__encode(self__COLON__cpp__whilest, b, 0);
                                    }
                                    else {
                                        {
                                            cpp__ifst self__COLON__cpp__ifst;
                                            if (((s.rhs).tag == 3)) self__COLON__cpp__ifst = ivyc_s1::cpp__stmt::unwrap< ivyc_s1::cpp__ifst >(s.rhs);
                                            if(((s.rhs).tag == 3)){
                                                ext__cpp__ifst__encode(self__COLON__cpp__ifst, b, 0);
                                            }
                                            else {
                                                {
                                                    cpp__skipst self__COLON__cpp__skipst;
                                                    if (((s.rhs).tag == 2)) self__COLON__cpp__skipst = ivyc_s1::cpp__stmt::unwrap< ivyc_s1::cpp__skipst >(s.rhs);
                                                    if(((s.rhs).tag == 2)){
                                                        ext__cpp__skipst__encode(self__COLON__cpp__skipst, b, 0);
                                                    }
                                                    else {
                                                        {
                                                            cpp__sequence self__COLON__cpp__sequence;
                                                            if (((s.rhs).tag == 1)) self__COLON__cpp__sequence = ivyc_s1::cpp__stmt::unwrap< ivyc_s1::cpp__sequence >(s.rhs);
                                                            if(((s.rhs).tag == 1)){
                                                                ext__cpp__sequence__encode(self__COLON__cpp__sequence, b, 0);
                                                            }
                                                            else {
                                                                {
                                                                    cpp__asgn self__COLON__cpp__asgn;
                                                                    if (((s.rhs).tag == 0)) self__COLON__cpp__asgn = ivyc_s1::cpp__stmt::unwrap< ivyc_s1::cpp__asgn >(s.rhs);
                                                                    if(((s.rhs).tag == 0)){
                                                                        ext__cpp__asgn__encode(self__COLON__cpp__asgn, b, 0);
                                                                    }
                                                                    else {
                                                                        ext__cpp__stmt__encode(s.rhs, b, 0);
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
    }
}
ivyc_s1::str ivyc_s1::ext__ivy__dotident__to_str(const ivy__dotident& s){
    ivyc_s1::str res;
    {
        {
            ivy__dotident self__COLON__ivy__dotident;
            if (((s.namesp).tag == 2)) self__COLON__ivy__dotident = ivyc_s1::ivy__ident::unwrap< ivyc_s1::ivy__dotident >(s.namesp);
            if(((s.namesp).tag == 2)){
                res = ext__ivy__dotident__to_str(self__COLON__ivy__dotident);
            }
            else {
                {
                    ivy__strident self__COLON__ivy__strident;
                    if (((s.namesp).tag == 0)) self__COLON__ivy__strident = ivyc_s1::ivy__ident::unwrap< ivyc_s1::ivy__strident >(s.namesp);
                    if(((s.namesp).tag == 0)){
                        res = ext__ivy__strident__to_str(self__COLON__ivy__strident);
                    }
                    else {
                        res = ext__ivy__ident__to_str(s.namesp);
                    }
                }
            }
        }
        ext__str__extend(res, (false ? __lit<str>("::") : __lit<str>(".")));
        {
            str loc__0;
            {
                loc__0 = ext__ivy__strident__to_str(s.member);
                ext__str__extend(res, loc__0);
            }
        }
    }
    return res;
}
void ivyc_s1::ext__ivy__type_clash__encode(const ivy__type_clash& e, pretty& b){
    {
        ext__pretty__extend(b, __lit<str>("Cannot unify types"));
        ext__pretty__extend(b, __lit<str>(" "));
        {
            ivy__pi self__COLON__ivy__pi;
            if (((e.t1).tag == 3)) self__COLON__ivy__pi = ivyc_s1::ivy__expr::unwrap< ivyc_s1::ivy__pi >(e.t1);
            if(((e.t1).tag == 3)){
                ext__ivy__pi__encode(self__COLON__ivy__pi, b, 0);
            }
            else {
                {
                    ivy__app self__COLON__ivy__app;
                    if (((e.t1).tag == 1)) self__COLON__ivy__app = ivyc_s1::ivy__expr::unwrap< ivyc_s1::ivy__app >(e.t1);
                    if(((e.t1).tag == 1)){
                        ext__ivy__app__encode(self__COLON__ivy__app, b, 0);
                    }
                    else {
                        {
                            ivy__symbol self__COLON__ivy__symbol;
                            if (((e.t1).tag == 0)) self__COLON__ivy__symbol = ivyc_s1::ivy__expr::unwrap< ivyc_s1::ivy__symbol >(e.t1);
                            if(((e.t1).tag == 0)){
                                ext__ivy__symbol__encode(self__COLON__ivy__symbol, b, 0);
                            }
                            else {
                                ext__ivy__expr__encode(e.t1, b, 0);
                            }
                        }
                    }
                }
            }
        }
        ext__pretty__extend(b, __lit<str>(" "));
        ext__pretty__extend(b, __lit<str>("and"));
        ext__pretty__extend(b, __lit<str>(" "));
        {
            ivy__pi self__COLON__ivy__pi;
            if (((e.t2).tag == 3)) self__COLON__ivy__pi = ivyc_s1::ivy__expr::unwrap< ivyc_s1::ivy__pi >(e.t2);
            if(((e.t2).tag == 3)){
                ext__ivy__pi__encode(self__COLON__ivy__pi, b, 0);
            }
            else {
                {
                    ivy__app self__COLON__ivy__app;
                    if (((e.t2).tag == 1)) self__COLON__ivy__app = ivyc_s1::ivy__expr::unwrap< ivyc_s1::ivy__app >(e.t2);
                    if(((e.t2).tag == 1)){
                        ext__ivy__app__encode(self__COLON__ivy__app, b, 0);
                    }
                    else {
                        {
                            ivy__symbol self__COLON__ivy__symbol;
                            if (((e.t2).tag == 0)) self__COLON__ivy__symbol = ivyc_s1::ivy__expr::unwrap< ivyc_s1::ivy__symbol >(e.t2);
                            if(((e.t2).tag == 0)){
                                ext__ivy__symbol__encode(self__COLON__ivy__symbol, b, 0);
                            }
                            else {
                                ext__ivy__expr__encode(e.t2, b, 0);
                            }
                        }
                    }
                }
            }
        }
        ext__pretty__extend(b, __lit<str>(" "));
        ext__pretty__extend(b, __lit<str>("when typing this expression:"));
        ext__pretty__extend(b, __lit<str>(" "));
        ext__pretty__newline(b);
        {
            ivy__pi self__COLON__ivy__pi;
            if (((e.e).tag == 3)) self__COLON__ivy__pi = ivyc_s1::ivy__expr::unwrap< ivyc_s1::ivy__pi >(e.e);
            if(((e.e).tag == 3)){
                ext__ivy__pi__encode(self__COLON__ivy__pi, b, 0);
            }
            else {
                {
                    ivy__app self__COLON__ivy__app;
                    if (((e.e).tag == 1)) self__COLON__ivy__app = ivyc_s1::ivy__expr::unwrap< ivyc_s1::ivy__app >(e.e);
                    if(((e.e).tag == 1)){
                        ext__ivy__app__encode(self__COLON__ivy__app, b, 0);
                    }
                    else {
                        {
                            ivy__symbol self__COLON__ivy__symbol;
                            if (((e.e).tag == 0)) self__COLON__ivy__symbol = ivyc_s1::ivy__expr::unwrap< ivyc_s1::ivy__symbol >(e.e);
                            if(((e.e).tag == 0)){
                                ext__ivy__symbol__encode(self__COLON__ivy__symbol, b, 0);
                            }
                            else {
                                ext__ivy__expr__encode(e.e, b, 0);
                            }
                        }
                    }
                }
            }
        }
    }
}
ivyc_s1::ivy__ident ivyc_s1::ext__ivy__ident__prefix(ivyc_s1::ivy__ident s, ivyc_s1::ivy__ident pref){
    ivyc_s1::ivy__ident res;
    res = s;
    return res;
}
ivyc_s1::cpp__expr ivyc_s1::ext__ivy__function_type(ivyc_s1::ivy__expr ty, ivy__tocppst& st){
    ivyc_s1::cpp__expr res;
    if(((ty).tag == 1)){
        {
            ivyc_s1::ivy__expr loc__0;
            vector__ivy__expr__ loc__1;
            ivyc_s1::ivy__expr loc__2;
            {
                {
                    ivy__app self__COLON__ivy__app;
                    if (((ty).tag == 1)) self__COLON__ivy__app = ivyc_s1::ivy__expr::unwrap< ivyc_s1::ivy__app >(ty);
                    if(((ty).tag == 1)){
                        loc__0 = ext__ivy__app__get_arg(self__COLON__ivy__app, 0);
                    }
                    else {
                        loc__0 = ext__ivy__expr__get_arg(ty, 0);
                    }
                }
                loc__1 = ext__ivy__times__unfold_left(loc__0);
                {
                    ivy__app self__COLON__ivy__app;
                    if (((ty).tag == 1)) self__COLON__ivy__app = ivyc_s1::ivy__expr::unwrap< ivyc_s1::ivy__app >(ty);
                    if(((ty).tag == 1)){
                        loc__2 = ext__ivy__app__get_arg(self__COLON__ivy__app, 1);
                    }
                    else {
                        loc__2 = ext__ivy__expr__get_arg(ty, 1);
                    }
                }
                res = ext__ivy__make_md_vector_type(loc__1, loc__2, st);
            }
        }
    }
    else {
        {
            ivy__app self__COLON__ivy__app;
            if (((ty).tag == 1)) self__COLON__ivy__app = ivyc_s1::ivy__expr::unwrap< ivyc_s1::ivy__app >(ty);
            if(((ty).tag == 1)){
                res = ext__ivy__app__to_cpp(self__COLON__ivy__app, st);
            }
            else {
                {
                    ivy__symbol self__COLON__ivy__symbol;
                    if (((ty).tag == 0)) self__COLON__ivy__symbol = ivyc_s1::ivy__expr::unwrap< ivyc_s1::ivy__symbol >(ty);
                    if(((ty).tag == 0)){
                        res = ext__ivy__symbol__to_cpp(self__COLON__ivy__symbol, st);
                    }
                    else {
                        res = ext__ivy__expr__to_cpp(ty, st);
                    }
                }
            }
        }
    }
    return res;
}
bool ivyc_s1::ext__ivy__is_dead(ivyc_s1::cpp__expr e, const ivy__tocppst& st, unsigned long long cnt){
    bool res;
    res = (bool)___ivy_choose(0,"fml:res",0);
    {
        unsigned long long loc__idx;
    loc__idx = (unsigned long long)___ivy_choose(0,"loc:idx",15979);
        {
            loc__idx = vector__ivy__lvalue_count____begin(st.dead);
            while((!res && (loc__idx < vector__ivy__lvalue_count____end(st.dead)))){
                {
                    ivy__lvalue_count loc__d;
    loc__d.cnt = (unsigned long long)___ivy_choose(0,"loc:d",15978);
                    {
                        loc__d = vector__ivy__lvalue_count____value(st.dead,loc__idx);
                        {
                            bool loc__0;
    loc__0 = (bool)___ivy_choose(0,"loc:0",15977);
                            {
                                loc__0 = ext__cpp__expr__eq(e, loc__d.lvalue);
                                res = (loc__0 && ((loc__d.cnt < cnt) || (loc__d.cnt == cnt)));
                            }
                        }
                        loc__idx = ext__vector__ivy__lvalue_count____domain__next(loc__idx);
                    }
                }
            }
        }
    }
    return res;
}
ivyc_s1::ivy__ident ivyc_s1::ext__ivy__strident__flat(const ivy__strident& s, bool rhs, const ivy__flatst& st){
    ivyc_s1::ivy__ident res;
    {
        ivy__strident loc__s2;
        {
            loc__s2 = s;
            {
                unsigned long long loc__idx;
    loc__idx = (unsigned long long)___ivy_choose(0,"loc:idx",15981);
                {
                    loc__idx = vector__ivy__ident____begin(loc__s2.subscrs);
                    while((loc__idx < vector__ivy__ident____end(loc__s2.subscrs))){
                        {
                            ivyc_s1::ivy__ident loc__t;
                            {
                                loc__t = vector__ivy__ident____value(loc__s2.subscrs,loc__idx);
                                {
                                    ivy__dotident self__COLON__ivy__dotident;
                                    if (((loc__t).tag == 2)) self__COLON__ivy__dotident = ivyc_s1::ivy__ident::unwrap< ivyc_s1::ivy__dotident >(loc__t);
                                    if(((loc__t).tag == 2)){
                                        loc__t = ext__ivy__dotident__flat(self__COLON__ivy__dotident, false, st);
                                    }
                                    else {
                                        {
                                            ivy__strident self__COLON__ivy__strident;
                                            if (((loc__t).tag == 0)) self__COLON__ivy__strident = ivyc_s1::ivy__ident::unwrap< ivyc_s1::ivy__strident >(loc__t);
                                            if(((loc__t).tag == 0)){
                                                loc__t = ext__ivy__strident__flat(self__COLON__ivy__strident, false, st);
                                            }
                                            else {
                                                loc__t = ext__ivy__ident__flat(loc__t, false, st);
                                            }
                                        }
                                    }
                                }
                                ext__vector__ivy__ident____set(loc__s2.subscrs, loc__idx, loc__t);
                                loc__idx = ext__vector__ivy__ident____domain__next(loc__idx);
                            }
                        }
                    }
                    if((st.has_root && (loc__s2.val == __lit<str>("this")) && (vector__ivy__ident____end(loc__s2.subscrs) == 0))){
                        res = st.root;
                    }
                    else {
                        {
                            res = ivyc_s1::ivy__ident(0, new ivyc_s1::ivy__ident::twrap<ivyc_s1::ivy__strident>(loc__s2));
                            if(!rhs){
                                {
                                    ivyc_s1::ivy__ident __tmp30;
                                    __tmp30 = res; ext__ivy__ident_to_ident__get(st.prmvals, res, __tmp30);
                                    res = __tmp30;
                                    if(st.has_root){
                                        if(st.defining){
                                            {
                                                ivy__dotident self__COLON__ivy__dotident;
                                                if (((res).tag == 2)) self__COLON__ivy__dotident = ivyc_s1::ivy__ident::unwrap< ivyc_s1::ivy__dotident >(res);
                                                if(((res).tag == 2)){
                                                    res = ext__ivy__dotident__prefix(self__COLON__ivy__dotident, st.root);
                                                }
                                                else {
                                                    {
                                                        ivy__strident self__COLON__ivy__strident;
                                                        if (((res).tag == 0)) self__COLON__ivy__strident = ivyc_s1::ivy__ident::unwrap< ivyc_s1::ivy__strident >(res);
                                                        if(((res).tag == 0)){
                                                            res = ext__ivy__strident__prefix(self__COLON__ivy__strident, st.root);
                                                        }
                                                        else {
                                                            res = ext__ivy__ident__prefix(res, st.root);
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                        else {
                                            {
                                                ext__ivy__find_ident(st.root, res, st);
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
    }
    return res;
}
ivyc_s1::ivy__typespec ivyc_s1::ext__ivy__enumspec__flat(const ivy__enumspec& s, ivy__flatst& st){
    ivyc_s1::ivy__typespec res;
    {
        {
            ivy__enumspec loc__t;
            {
                loc__t = s;
                {
                    unsigned long long loc__idx;
    loc__idx = (unsigned long long)___ivy_choose(0,"loc:idx",15984);
                    {
                        loc__idx = vector__ivy__expr____begin(loc__t.constructors);
                        while((loc__idx < vector__ivy__expr____end(loc__t.constructors))){
                            {
                                {
                                    ivyc_s1::ivy__expr loc__e;
                                    {
                                        loc__e = vector__ivy__expr____value(loc__t.constructors,loc__idx);
                                        {
                                            ivy__app self__COLON__ivy__app;
                                            if (((loc__e).tag == 1)) self__COLON__ivy__app = ivyc_s1::ivy__expr::unwrap< ivyc_s1::ivy__app >(loc__e);
                                            if(((loc__e).tag == 1)){
                                                loc__e = ext__ivy__app__flat(self__COLON__ivy__app, st);
                                            }
                                            else {
                                                {
                                                    ivy__symbol self__COLON__ivy__symbol;
                                                    if (((loc__e).tag == 0)) self__COLON__ivy__symbol = ivyc_s1::ivy__expr::unwrap< ivyc_s1::ivy__symbol >(loc__e);
                                                    if(((loc__e).tag == 0)){
                                                        loc__e = ext__ivy__symbol__flat(self__COLON__ivy__symbol, st);
                                                    }
                                                    else {
                                                        loc__e = ext__ivy__expr__flat(loc__e, st);
                                                    }
                                                }
                                            }
                                        }
                                        ext__vector__ivy__expr____set(loc__t.constructors, loc__idx, loc__e);
                                        loc__idx = ext__vector__ivy__expr____domain__next(loc__idx);
                                    }
                                }
                            }
                        }
                        res = ivyc_s1::ivy__typespec(0, new ivyc_s1::ivy__typespec::twrap<ivyc_s1::ivy__enumspec>(loc__t));
                    }
                }
            }
        }
    }
    return res;
}
void ivyc_s1::ext__ivy__enumspec__defd(const ivy__enumspec& s, ivy__flatst& st, ivyc_s1::ivy__ident id){
    {
        unsigned long long loc__idx;
    loc__idx = (unsigned long long)___ivy_choose(0,"loc:idx",15854);
        {
            loc__idx = vector__ivy__expr____begin(s.constructors);
            while((loc__idx < vector__ivy__expr____end(s.constructors))){
                {
                    ext__ivy__add_def(vector__ivy__expr____value(s.constructors,loc__idx), st, false);
                    loc__idx = ext__vector__ivy__expr____domain__next(loc__idx);
                }
            }
        }
    }
}
void ivyc_s1::ext__ivy__tocppst__get_code(ivy__tocppst& s, ivyc_s1::annot ann, ivyc_s1::cpp__stmt& res){
    {
        res = ext__cpp__sequence__fold_right(s.code, ann);
        s.code = ext__vector__cpp__stmt____empty();
    }
}
unsigned long long ivyc_s1::ext__vector__ivy__decl____domain__next(unsigned long long x){
    unsigned long long y;
    y = (unsigned long long)___ivy_choose(0,"fml:y",0);
    {
        y = (x + 1);
    }
    return y;
}
ivyc_s1::ivy__stmt ivyc_s1::ext__ivy__skipst__make(ivyc_s1::annot ann){
    ivyc_s1::ivy__stmt res;
    {
        {
            ivy__skipst loc__s;
            {
                loc__s.ann = ann;
                res = ivyc_s1::ivy__stmt(2, new ivyc_s1::ivy__stmt::twrap<ivyc_s1::ivy__skipst>(loc__s));
            }
        }
    }
    return res;
}
void ivyc_s1::ext__cpp__curly_tup__encode(const vector__cpp__expr__& s, pretty& b, int prio){
    if((0 < vector__cpp__expr____end(s))){
        {
            ext__pretty__extend(b, __lit<str>(" "));
            ext__pretty__extend(b, __lit<str>("{"));
            {
                cpp__pi self__COLON__cpp__pi;
                if (((vector__cpp__expr____value(s,0)).tag == 3)) self__COLON__cpp__pi = ivyc_s1::cpp__expr::unwrap< ivyc_s1::cpp__pi >(vector__cpp__expr____value(s,0));
                if(((vector__cpp__expr____value(s,0)).tag == 3)){
                    ext__cpp__pi__encode(self__COLON__cpp__pi, b, 0);
                }
                else {
                    {
                        cpp__app self__COLON__cpp__app;
                        if (((vector__cpp__expr____value(s,0)).tag == 1)) self__COLON__cpp__app = ivyc_s1::cpp__expr::unwrap< ivyc_s1::cpp__app >(vector__cpp__expr____value(s,0));
                        if(((vector__cpp__expr____value(s,0)).tag == 1)){
                            ext__cpp__app__encode(self__COLON__cpp__app, b, 0);
                        }
                        else {
                            {
                                cpp__symbol self__COLON__cpp__symbol;
                                if (((vector__cpp__expr____value(s,0)).tag == 0)) self__COLON__cpp__symbol = ivyc_s1::cpp__expr::unwrap< ivyc_s1::cpp__symbol >(vector__cpp__expr____value(s,0));
                                if(((vector__cpp__expr____value(s,0)).tag == 0)){
                                    ext__cpp__symbol__encode(self__COLON__cpp__symbol, b, 0);
                                }
                                else {
                                    ext__cpp__expr__encode(vector__cpp__expr____value(s,0), b, 0);
                                }
                            }
                        }
                    }
                }
            }
            {
                unsigned long long loc__0;
    loc__0 = (unsigned long long)___ivy_choose(0,"loc:0",15993);
                {
                    loc__0 = ext__vector__cpp__expr____domain__next(vector__cpp__expr____begin(s));
                    {
                        unsigned long long loc__idx;
    loc__idx = (unsigned long long)___ivy_choose(0,"loc:idx",15992);
                        {
                            loc__idx = loc__0;
                            while((loc__idx < vector__cpp__expr____end(s))){
                                {
                                    ext__pretty__extend(b, __lit<str>(","));
                                    {
                                        cpp__pi self__COLON__cpp__pi;
                                        if (((vector__cpp__expr____value(s,loc__idx)).tag == 3)) self__COLON__cpp__pi = ivyc_s1::cpp__expr::unwrap< ivyc_s1::cpp__pi >(vector__cpp__expr____value(s,loc__idx));
                                        if(((vector__cpp__expr____value(s,loc__idx)).tag == 3)){
                                            ext__cpp__pi__encode(self__COLON__cpp__pi, b, 0);
                                        }
                                        else {
                                            {
                                                cpp__app self__COLON__cpp__app;
                                                if (((vector__cpp__expr____value(s,loc__idx)).tag == 1)) self__COLON__cpp__app = ivyc_s1::cpp__expr::unwrap< ivyc_s1::cpp__app >(vector__cpp__expr____value(s,loc__idx));
                                                if(((vector__cpp__expr____value(s,loc__idx)).tag == 1)){
                                                    ext__cpp__app__encode(self__COLON__cpp__app, b, 0);
                                                }
                                                else {
                                                    {
                                                        cpp__symbol self__COLON__cpp__symbol;
                                                        if (((vector__cpp__expr____value(s,loc__idx)).tag == 0)) self__COLON__cpp__symbol = ivyc_s1::cpp__expr::unwrap< ivyc_s1::cpp__symbol >(vector__cpp__expr____value(s,loc__idx));
                                                        if(((vector__cpp__expr____value(s,loc__idx)).tag == 0)){
                                                            ext__cpp__symbol__encode(self__COLON__cpp__symbol, b, 0);
                                                        }
                                                        else {
                                                            ext__cpp__expr__encode(vector__cpp__expr____value(s,loc__idx), b, 0);
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                    loc__idx = ext__vector__cpp__expr____domain__next(loc__idx);
                                }
                            }
                            ext__pretty__extend(b, __lit<str>("}"));
                        }
                    }
                }
            }
        }
    }
}
void ivyc_s1::ext__ivy__typedc__reg_member(const ivy__typedc& s, ivy__tocppst& st){
    if(s.has_spec){
        if(((s.spec).tag == 0)){
            {
                vector__ivy__expr__ loc__0;
                {
                    {
                        ivy__structspec self__COLON__ivy__structspec;
                        if (((s.spec).tag == 1)) self__COLON__ivy__structspec = ivyc_s1::ivy__typespec::unwrap< ivyc_s1::ivy__structspec >(s.spec);
                        if(((s.spec).tag == 1)){
                            loc__0 = ext__ivy__structspec__get_elems(self__COLON__ivy__structspec);
                        }
                        else {
                            {
                                ivy__enumspec self__COLON__ivy__enumspec;
                                if (((s.spec).tag == 0)) self__COLON__ivy__enumspec = ivyc_s1::ivy__typespec::unwrap< ivyc_s1::ivy__enumspec >(s.spec);
                                if(((s.spec).tag == 0)){
                                    loc__0 = ext__ivy__enumspec__get_elems(self__COLON__ivy__enumspec);
                                }
                                else {
                                    loc__0 = ext__ivy__typespec__get_elems(s.spec);
                                }
                            }
                        }
                    }
                    {
                        vector__ivy__expr__ loc__conss;
                        {
                            loc__conss = loc__0;
                            {
                                unsigned long long loc__idx;
    loc__idx = (unsigned long long)___ivy_choose(0,"loc:idx",15996);
                                {
                                    loc__idx = vector__ivy__expr____begin(loc__conss);
                                    while((loc__idx < vector__ivy__expr____end(loc__conss))){
                                        {
                                            ivyc_s1::ivy__expr loc__cons;
                                            {
                                                loc__cons = vector__ivy__expr____value(loc__conss,loc__idx);
                                                {
                                                    ivyc_s1::ivy__ident loc__0;
                                                    {
                                                        {
                                                            ivy__symbol self__COLON__ivy__symbol;
                                                            if (((loc__cons).tag == 0)) self__COLON__ivy__symbol = ivyc_s1::ivy__expr::unwrap< ivyc_s1::ivy__symbol >(loc__cons);
                                                            if(((loc__cons).tag == 0)){
                                                                loc__0 = ext__ivy__symbol__get_name(self__COLON__ivy__symbol);
                                                            }
                                                            else {
                                                                loc__0 = ext__ivy__expr__get_name(loc__cons);
                                                            }
                                                        }
                                                        ext__ivy__ident_set__set(st.constructors, loc__0, true);
                                                    }
                                                }
                                                loc__idx = ext__vector__ivy__expr____domain__next(loc__idx);
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
    }
}
ivyc_s1::ivy__initdc ivyc_s1::ext__ivy__initdc__typeinfer_int(const ivy__initdc& s, ivy__typeinferst& st){
    ivyc_s1::ivy__initdc res;
    {
        {
            ivy__whilest self__COLON__ivy__whilest;
            if (((s.body).tag == 4)) self__COLON__ivy__whilest = ivyc_s1::ivy__stmt::unwrap< ivyc_s1::ivy__whilest >(s.body);
            if(((s.body).tag == 4)){
                res.body = ext__ivy__whilest__typeinfer(self__COLON__ivy__whilest, st);
            }
            else {
                {
                    ivy__ifst self__COLON__ivy__ifst;
                    if (((s.body).tag == 3)) self__COLON__ivy__ifst = ivyc_s1::ivy__stmt::unwrap< ivyc_s1::ivy__ifst >(s.body);
                    if(((s.body).tag == 3)){
                        res.body = ext__ivy__ifst__typeinfer(self__COLON__ivy__ifst, st);
                    }
                    else {
                        {
                            ivy__sequence self__COLON__ivy__sequence;
                            if (((s.body).tag == 1)) self__COLON__ivy__sequence = ivyc_s1::ivy__stmt::unwrap< ivyc_s1::ivy__sequence >(s.body);
                            if(((s.body).tag == 1)){
                                res.body = ext__ivy__sequence__typeinfer(self__COLON__ivy__sequence, st);
                            }
                            else {
                                {
                                    ivy__asgn self__COLON__ivy__asgn;
                                    if (((s.body).tag == 0)) self__COLON__ivy__asgn = ivyc_s1::ivy__stmt::unwrap< ivyc_s1::ivy__asgn >(s.body);
                                    if(((s.body).tag == 0)){
                                        res.body = ext__ivy__asgn__typeinfer(self__COLON__ivy__asgn, st);
                                    }
                                    else {
                                        res.body = ext__ivy__stmt__typeinfer(s.body, st);
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
    }
    return res;
}
void ivyc_s1::ext__ivy__elidest__map__set(ivy__elidest__map& a, ivyc_s1::ivy__ident x, bool y){
    {

        a[x] = y;
    }
}
void ivyc_s1::ext__ivy__set_root(ivy__flatst& st, ivyc_s1::ivy__expr s){
    {
        {
            ivyc_s1::ivy__ident loc__0;
            ivyc_s1::ivy__ident loc__1;
            ivyc_s1::ivy__ident loc__2;
            {
                {
                    ivy__symbol self__COLON__ivy__symbol;
                    if (((s).tag == 0)) self__COLON__ivy__symbol = ivyc_s1::ivy__expr::unwrap< ivyc_s1::ivy__symbol >(s);
                    if(((s).tag == 0)){
                        loc__0 = ext__ivy__symbol__get_name(self__COLON__ivy__symbol);
                    }
                    else {
                        loc__0 = ext__ivy__expr__get_name(s);
                    }
                }
                {
                    ivy__dotident self__COLON__ivy__dotident;
                    if (((loc__0).tag == 2)) self__COLON__ivy__dotident = ivyc_s1::ivy__ident::unwrap< ivyc_s1::ivy__dotident >(loc__0);
                    if(((loc__0).tag == 2)){
                        loc__1 = ext__ivy__dotident__prefix(self__COLON__ivy__dotident, st.root);
                    }
                    else {
                        {
                            ivy__strident self__COLON__ivy__strident;
                            if (((loc__0).tag == 0)) self__COLON__ivy__strident = ivyc_s1::ivy__ident::unwrap< ivyc_s1::ivy__strident >(loc__0);
                            if(((loc__0).tag == 0)){
                                loc__1 = ext__ivy__strident__prefix(self__COLON__ivy__strident, st.root);
                            }
                            else {
                                loc__1 = ext__ivy__ident__prefix(loc__0, st.root);
                            }
                        }
                    }
                }
                {
                    ivy__symbol self__COLON__ivy__symbol;
                    if (((s).tag == 0)) self__COLON__ivy__symbol = ivyc_s1::ivy__expr::unwrap< ivyc_s1::ivy__symbol >(s);
                    if(((s).tag == 0)){
                        loc__2 = ext__ivy__symbol__get_name(self__COLON__ivy__symbol);
                    }
                    else {
                        loc__2 = ext__ivy__expr__get_name(s);
                    }
                }
                st.root = (st.has_root ? loc__1 : loc__2);
            }
        }
        st.has_root = true;
    }
}
ivyc_s1::pretty ivyc_s1::ext__pretty__make(unsigned long long maxline, unsigned long long indent){
    ivyc_s1::pretty res;
    res.st.begin = (unsigned long long)___ivy_choose(0,"fml:res",0);
    res.st.total = (unsigned long long)___ivy_choose(0,"fml:res",0);
    res.maxline = (unsigned long long)___ivy_choose(0,"fml:res",0);
    res.indent = (unsigned long long)___ivy_choose(0,"fml:res",0);
    res.space = (unsigned long long)___ivy_choose(0,"fml:res",0);
    res.depth = (unsigned long long)___ivy_choose(0,"fml:res",0);
    res.cppstyle = (bool)___ivy_choose(0,"fml:res",0);
    {
        res.maxline = maxline;
        res.indent = indent;
        res.whitespace = __lit<str>(" ");
        res.space = maxline;
        ext__vector__pos____append(res.stack, maxline);
    }
    return res;
}
ivyc_s1::cpp__skipst ivyc_s1::ext__ivy__skipst__to_cpp_int(const ivy__skipst& s, ivy__tocppst& st){
    ivyc_s1::cpp__skipst res;
    {
    }
    return res;
}
ivyc_s1::cpp__expr ivyc_s1::ext__cpp__decl__get_type(ivyc_s1::cpp__decl d){
    ivyc_s1::cpp__expr res;
    {
    }
    return res;
}
void ivyc_s1::ext__vector__ivy__decl____set(vector__ivy__decl__& a, unsigned long long x, ivyc_s1::ivy__decl y){
    {

        if (0 <= x && x < (unsigned long long)a.size())
            a[x] = y;
    }
}
ivyc_s1::ivy__file_not_found ivyc_s1::ext__ivy__file_not_found__make(const str& n){
    ivyc_s1::ivy__file_not_found res;
    {
        res.n = n;
    }
    return res;
}
void ivyc_s1::ext__ivy__decost__newvar(ivy__decost& s, ivyc_s1::annot ann, ivyc_s1::ivy__expr& res){
    {
        res = ext__ivy__symbol__makenum(s.counter, ann);
        s.counter = ext__pos__next(s.counter);
    }
}
void ivyc_s1::ext__cpp__varst__encode(const cpp__varst& s, pretty& b, int prio){
    {
        {
            annot_i self__COLON__annot_i;
            if (((s.ann).tag == 0)) self__COLON__annot_i = ivyc_s1::annot::unwrap< ivyc_s1::annot_i >(s.ann);
            if(((s.ann).tag == 0)){
                ext__annot_i__encode(self__COLON__annot_i, b);
            }
            else {
                ext__annot__encode(s.ann, b);
            }
        }
        if((1 < prio)){
            {
                ext__pretty__nest(b);
                ext__pretty__extend(b, __lit<str>("{"));
                ext__pretty__newline(b);
            }
        }
        ext__cpp__varst__encode_int(s, b, prio);
        if((1 < prio)){
            {
                ext__pretty__unnest(b);
                ext__pretty__newline(b);
                ext__pretty__extend(b, __lit<str>("}"));
            }
        }
    }
}
void ivyc_s1::ext__ivy__instancedc__defd(const ivy__instancedc& s, ivy__flatst& st){
    if(s.is_auto){
        {
            ext__ivy__auto_instance_defd(s, st);
        }
    }
    else {
        {
            {
                ivyc_s1::ivy__decl loc__0;
                {
                    loc__0 = ext__ivy__instancedc__desugar(s);
                    {
                        ivyc_s1::ivy__decl loc__ds;
                        {
                            loc__ds = loc__0;
                            {
                                ivy__instancedc self__COLON__ivy__instancedc;
                                if (((loc__ds).tag == 10)) self__COLON__ivy__instancedc = ivyc_s1::ivy__decl::unwrap< ivyc_s1::ivy__instancedc >(loc__ds);
                                if(((loc__ds).tag == 10)){
                                    ext__ivy__instancedc__defd(self__COLON__ivy__instancedc, st);
                                }
                                else {
                                    {
                                        ivy__objectdc self__COLON__ivy__objectdc;
                                        if (((loc__ds).tag == 9)) self__COLON__ivy__objectdc = ivyc_s1::ivy__decl::unwrap< ivyc_s1::ivy__objectdc >(loc__ds);
                                        if(((loc__ds).tag == 9)){
                                            ext__ivy__objectdc__defd(self__COLON__ivy__objectdc, st);
                                        }
                                        else {
                                            {
                                                ivy__instantiatedc self__COLON__ivy__instantiatedc;
                                                if (((loc__ds).tag == 8)) self__COLON__ivy__instantiatedc = ivyc_s1::ivy__decl::unwrap< ivyc_s1::ivy__instantiatedc >(loc__ds);
                                                if(((loc__ds).tag == 8)){
                                                    ext__ivy__instantiatedc__defd(self__COLON__ivy__instantiatedc, st);
                                                }
                                                else {
                                                    {
                                                        ivy__moduledc self__COLON__ivy__moduledc;
                                                        if (((loc__ds).tag == 7)) self__COLON__ivy__moduledc = ivyc_s1::ivy__decl::unwrap< ivyc_s1::ivy__moduledc >(loc__ds);
                                                        if(((loc__ds).tag == 7)){
                                                            ext__ivy__moduledc__defd(self__COLON__ivy__moduledc, st);
                                                        }
                                                        else {
                                                            {
                                                                ivy__vardc self__COLON__ivy__vardc;
                                                                if (((loc__ds).tag == 3)) self__COLON__ivy__vardc = ivyc_s1::ivy__decl::unwrap< ivyc_s1::ivy__vardc >(loc__ds);
                                                                if(((loc__ds).tag == 3)){
                                                                    ext__ivy__vardc__defd(self__COLON__ivy__vardc, st);
                                                                }
                                                                else {
                                                                    {
                                                                        ivy__typedc self__COLON__ivy__typedc;
                                                                        if (((loc__ds).tag == 2)) self__COLON__ivy__typedc = ivyc_s1::ivy__decl::unwrap< ivyc_s1::ivy__typedc >(loc__ds);
                                                                        if(((loc__ds).tag == 2)){
                                                                            ext__ivy__typedc__defd(self__COLON__ivy__typedc, st);
                                                                        }
                                                                        else {
                                                                            {
                                                                                ivy__groupdc self__COLON__ivy__groupdc;
                                                                                if (((loc__ds).tag == 1)) self__COLON__ivy__groupdc = ivyc_s1::ivy__decl::unwrap< ivyc_s1::ivy__groupdc >(loc__ds);
                                                                                if(((loc__ds).tag == 1)){
                                                                                    ext__ivy__groupdc__defd(self__COLON__ivy__groupdc, st);
                                                                                }
                                                                                else {
                                                                                    {
                                                                                        ivy__actdc self__COLON__ivy__actdc;
                                                                                        if (((loc__ds).tag == 0)) self__COLON__ivy__actdc = ivyc_s1::ivy__decl::unwrap< ivyc_s1::ivy__actdc >(loc__ds);
                                                                                        if(((loc__ds).tag == 0)){
                                                                                            ext__ivy__actdc__defd(self__COLON__ivy__actdc, st);
                                                                                        }
                                                                                        else {
                                                                                            ext__ivy__decl__defd(loc__ds, st);
                                                                                        }
                                                                                    }
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
    }
}
void ivyc_s1::ext__cpp__structdecl__encode(const cpp__structdecl& s, pretty& b, int prio){
    {
        {
            annot_i self__COLON__annot_i;
            if (((s.ann).tag == 0)) self__COLON__annot_i = ivyc_s1::annot::unwrap< ivyc_s1::annot_i >(s.ann);
            if(((s.ann).tag == 0)){
                ext__annot_i__encode(self__COLON__annot_i, b);
            }
            else {
                ext__annot__encode(s.ann, b);
            }
        }
        ext__pretty__nest(b);
        ext__pretty__extend(b, __lit<str>("struct"));
        ext__pretty__extend(b, __lit<str>(" "));
        {
            cpp__pi self__COLON__cpp__pi;
            if (((s.name).tag == 3)) self__COLON__cpp__pi = ivyc_s1::cpp__expr::unwrap< ivyc_s1::cpp__pi >(s.name);
            if(((s.name).tag == 3)){
                ext__cpp__pi__encode(self__COLON__cpp__pi, b, 0);
            }
            else {
                {
                    cpp__app self__COLON__cpp__app;
                    if (((s.name).tag == 1)) self__COLON__cpp__app = ivyc_s1::cpp__expr::unwrap< ivyc_s1::cpp__app >(s.name);
                    if(((s.name).tag == 1)){
                        ext__cpp__app__encode(self__COLON__cpp__app, b, 0);
                    }
                    else {
                        {
                            cpp__symbol self__COLON__cpp__symbol;
                            if (((s.name).tag == 0)) self__COLON__cpp__symbol = ivyc_s1::cpp__expr::unwrap< ivyc_s1::cpp__symbol >(s.name);
                            if(((s.name).tag == 0)){
                                ext__cpp__symbol__encode(self__COLON__cpp__symbol, b, 0);
                            }
                            else {
                                ext__cpp__expr__encode(s.name, b, 0);
                            }
                        }
                    }
                }
            }
        }
        if(s.has_super){
            {
                ext__pretty__extend(b, __lit<str>(" "));
                ext__pretty__extend(b, __lit<str>(":"));
                ext__pretty__extend(b, __lit<str>(" "));
                {
                    cpp__pi self__COLON__cpp__pi;
                    if (((s.super).tag == 3)) self__COLON__cpp__pi = ivyc_s1::cpp__expr::unwrap< ivyc_s1::cpp__pi >(s.super);
                    if(((s.super).tag == 3)){
                        ext__cpp__pi__encode(self__COLON__cpp__pi, b, 0);
                    }
                    else {
                        {
                            cpp__app self__COLON__cpp__app;
                            if (((s.super).tag == 1)) self__COLON__cpp__app = ivyc_s1::cpp__expr::unwrap< ivyc_s1::cpp__app >(s.super);
                            if(((s.super).tag == 1)){
                                ext__cpp__app__encode(self__COLON__cpp__app, b, 0);
                            }
                            else {
                                {
                                    cpp__symbol self__COLON__cpp__symbol;
                                    if (((s.super).tag == 0)) self__COLON__cpp__symbol = ivyc_s1::cpp__expr::unwrap< ivyc_s1::cpp__symbol >(s.super);
                                    if(((s.super).tag == 0)){
                                        ext__cpp__symbol__encode(self__COLON__cpp__symbol, b, 0);
                                    }
                                    else {
                                        ext__cpp__expr__encode(s.super, b, 0);
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
        if(s.has_members){
            {
                ext__pretty__unnest(b);
                ext__pretty__newline(b);
                ext__pretty__extend(b, __lit<str>("{"));
                ext__pretty__nest(b);
                {
                    unsigned long long loc__idx;
    loc__idx = (unsigned long long)___ivy_choose(0,"loc:idx",16005);
                    {
                        loc__idx = vector__cpp__decl____begin(s.members);
                        while((loc__idx < vector__cpp__decl____end(s.members))){
                            {
                                ext__pretty__newline(b);
                                {
                                    cpp__groupdc self__COLON__cpp__groupdc;
                                    if (((vector__cpp__decl____value(s.members,loc__idx)).tag == 7)) self__COLON__cpp__groupdc = ivyc_s1::cpp__decl::unwrap< ivyc_s1::cpp__groupdc >(vector__cpp__decl____value(s.members,loc__idx));
                                    if(((vector__cpp__decl____value(s.members,loc__idx)).tag == 7)){
                                        ext__cpp__groupdc__encode(self__COLON__cpp__groupdc, b, 0);
                                    }
                                    else {
                                        {
                                            cpp__namespacedecl self__COLON__cpp__namespacedecl;
                                            if (((vector__cpp__decl____value(s.members,loc__idx)).tag == 6)) self__COLON__cpp__namespacedecl = ivyc_s1::cpp__decl::unwrap< ivyc_s1::cpp__namespacedecl >(vector__cpp__decl____value(s.members,loc__idx));
                                            if(((vector__cpp__decl____value(s.members,loc__idx)).tag == 6)){
                                                ext__cpp__namespacedecl__encode(self__COLON__cpp__namespacedecl, b, 0);
                                            }
                                            else {
                                                {
                                                    cpp__structdecl self__COLON__cpp__structdecl;
                                                    if (((vector__cpp__decl____value(s.members,loc__idx)).tag == 5)) self__COLON__cpp__structdecl = ivyc_s1::cpp__decl::unwrap< ivyc_s1::cpp__structdecl >(vector__cpp__decl____value(s.members,loc__idx));
                                                    if(((vector__cpp__decl____value(s.members,loc__idx)).tag == 5)){
                                                        ext__cpp__structdecl__encode(self__COLON__cpp__structdecl, b, 0);
                                                    }
                                                    else {
                                                        {
                                                            cpp__funcdecl self__COLON__cpp__funcdecl;
                                                            if (((vector__cpp__decl____value(s.members,loc__idx)).tag == 4)) self__COLON__cpp__funcdecl = ivyc_s1::cpp__decl::unwrap< ivyc_s1::cpp__funcdecl >(vector__cpp__decl____value(s.members,loc__idx));
                                                            if(((vector__cpp__decl____value(s.members,loc__idx)).tag == 4)){
                                                                ext__cpp__funcdecl__encode(self__COLON__cpp__funcdecl, b, 0);
                                                            }
                                                            else {
                                                                {
                                                                    cpp__vardecl self__COLON__cpp__vardecl;
                                                                    if (((vector__cpp__decl____value(s.members,loc__idx)).tag == 3)) self__COLON__cpp__vardecl = ivyc_s1::cpp__decl::unwrap< ivyc_s1::cpp__vardecl >(vector__cpp__decl____value(s.members,loc__idx));
                                                                    if(((vector__cpp__decl____value(s.members,loc__idx)).tag == 3)){
                                                                        ext__cpp__vardecl__encode(self__COLON__cpp__vardecl, b, 0);
                                                                    }
                                                                    else {
                                                                        {
                                                                            cpp__enumdecl self__COLON__cpp__enumdecl;
                                                                            if (((vector__cpp__decl____value(s.members,loc__idx)).tag == 2)) self__COLON__cpp__enumdecl = ivyc_s1::cpp__decl::unwrap< ivyc_s1::cpp__enumdecl >(vector__cpp__decl____value(s.members,loc__idx));
                                                                            if(((vector__cpp__decl____value(s.members,loc__idx)).tag == 2)){
                                                                                ext__cpp__enumdecl__encode(self__COLON__cpp__enumdecl, b, 0);
                                                                            }
                                                                            else {
                                                                                {
                                                                                    cpp__typedecl self__COLON__cpp__typedecl;
                                                                                    if (((vector__cpp__decl____value(s.members,loc__idx)).tag == 1)) self__COLON__cpp__typedecl = ivyc_s1::cpp__decl::unwrap< ivyc_s1::cpp__typedecl >(vector__cpp__decl____value(s.members,loc__idx));
                                                                                    if(((vector__cpp__decl____value(s.members,loc__idx)).tag == 1)){
                                                                                        ext__cpp__typedecl__encode(self__COLON__cpp__typedecl, b, 0);
                                                                                    }
                                                                                    else {
                                                                                        {
                                                                                            cpp__header self__COLON__cpp__header;
                                                                                            if (((vector__cpp__decl____value(s.members,loc__idx)).tag == 0)) self__COLON__cpp__header = ivyc_s1::cpp__decl::unwrap< ivyc_s1::cpp__header >(vector__cpp__decl____value(s.members,loc__idx));
                                                                                            if(((vector__cpp__decl____value(s.members,loc__idx)).tag == 0)){
                                                                                                ext__cpp__header__encode(self__COLON__cpp__header, b, 0);
                                                                                            }
                                                                                            else {
                                                                                                ext__cpp__decl__encode(vector__cpp__decl____value(s.members,loc__idx), b, 0);
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                                loc__idx = ext__vector__cpp__decl____domain__next(loc__idx);
                            }
                        }
                        ext__pretty__unnest(b);
                        ext__pretty__newline(b);
                        ext__pretty__extend(b, __lit<str>("}"));
                        ext__pretty__extend(b, __lit<str>(";"));
                    }
                }
            }
        }
        else {
            {
                ext__pretty__extend(b, __lit<str>(";"));
                ext__pretty__unnest(b);
            }
        }
        ext__pretty__newline(b);
    }
}
void ivyc_s1::ext__pretty__flush(pretty& self){
    {
        {
            unsigned long long loc__idx;
    loc__idx = (unsigned long long)___ivy_choose(0,"loc:idx",16024);
            {
                loc__idx = vector__pretty__token____begin(self.tokens);
                while((loc__idx < vector__pretty__token____end(self.tokens))){
                    {
                        ext__pretty__print(self, vector__pretty__token____value(self.tokens,loc__idx));
                        loc__idx = ext__vector__pretty__token____domain__next(loc__idx);
                    }
                }
                self.tokens = ext__vector__pretty__token____empty();
            }
        }
    }
}
void ivyc_s1::ext__ivy__flat_exprvec(vector__ivy__expr__& es, ivy__flatst& st){
    {
        unsigned long long loc__idx;
    loc__idx = (unsigned long long)___ivy_choose(0,"loc:idx",16007);
        {
            loc__idx = vector__ivy__expr____begin(es);
            while((loc__idx < vector__ivy__expr____end(es))){
                {
                    {
                        ivyc_s1::ivy__expr loc__e;
                        {
                            loc__e = vector__ivy__expr____value(es,loc__idx);
                            {
                                ivy__app self__COLON__ivy__app;
                                if (((loc__e).tag == 1)) self__COLON__ivy__app = ivyc_s1::ivy__expr::unwrap< ivyc_s1::ivy__app >(loc__e);
                                if(((loc__e).tag == 1)){
                                    loc__e = ext__ivy__app__flat(self__COLON__ivy__app, st);
                                }
                                else {
                                    {
                                        ivy__symbol self__COLON__ivy__symbol;
                                        if (((loc__e).tag == 0)) self__COLON__ivy__symbol = ivyc_s1::ivy__expr::unwrap< ivyc_s1::ivy__symbol >(loc__e);
                                        if(((loc__e).tag == 0)){
                                            loc__e = ext__ivy__symbol__flat(self__COLON__ivy__symbol, st);
                                        }
                                        else {
                                            loc__e = ext__ivy__expr__flat(loc__e, st);
                                        }
                                    }
                                }
                            }
                            ext__vector__ivy__expr____set(es, loc__idx, loc__e);
                            loc__idx = ext__vector__ivy__expr____domain__next(loc__idx);
                        }
                    }
                }
            }
        }
    }
}
void ivyc_s1::ext__ivy__typedc__flat(const ivy__typedc& s, ivy__flatst& st){
    {
        ivy__typedc loc__res;
    loc__res.has_super = (bool)___ivy_choose(0,"loc:res",16550);
    loc__res.has_spec = (bool)___ivy_choose(0,"loc:res",16550);
        {
            loc__res = s;
            {
                ivy__app self__COLON__ivy__app;
                if (((s.sort).tag == 1)) self__COLON__ivy__app = ivyc_s1::ivy__expr::unwrap< ivyc_s1::ivy__app >(s.sort);
                if(((s.sort).tag == 1)){
                    loc__res.sort = ext__ivy__app__flat(self__COLON__ivy__app, st);
                }
                else {
                    {
                        ivy__symbol self__COLON__ivy__symbol;
                        if (((s.sort).tag == 0)) self__COLON__ivy__symbol = ivyc_s1::ivy__expr::unwrap< ivyc_s1::ivy__symbol >(s.sort);
                        if(((s.sort).tag == 0)){
                            loc__res.sort = ext__ivy__symbol__flat(self__COLON__ivy__symbol, st);
                        }
                        else {
                            loc__res.sort = ext__ivy__expr__flat(s.sort, st);
                        }
                    }
                }
            }
            loc__res.has_super = s.has_super;
            if(loc__res.has_super){
                {
                    {
                        ivy__app self__COLON__ivy__app;
                        if (((s.super).tag == 1)) self__COLON__ivy__app = ivyc_s1::ivy__expr::unwrap< ivyc_s1::ivy__app >(s.super);
                        if(((s.super).tag == 1)){
                            loc__res.super = ext__ivy__app__flat(self__COLON__ivy__app, st);
                        }
                        else {
                            {
                                ivy__symbol self__COLON__ivy__symbol;
                                if (((s.super).tag == 0)) self__COLON__ivy__symbol = ivyc_s1::ivy__expr::unwrap< ivyc_s1::ivy__symbol >(s.super);
                                if(((s.super).tag == 0)){
                                    loc__res.super = ext__ivy__symbol__flat(self__COLON__ivy__symbol, st);
                                }
                                else {
                                    loc__res.super = ext__ivy__expr__flat(s.super, st);
                                }
                            }
                        }
                    }
                }
            }
            if(loc__res.has_spec){
                if(((s.spec).tag == 1)){
                    {
                        loc__res.has_spec = false;
                    }
                }
                else {
                    {
                        {
                            ivy__enumspec self__COLON__ivy__enumspec;
                            if (((s.spec).tag == 0)) self__COLON__ivy__enumspec = ivyc_s1::ivy__typespec::unwrap< ivyc_s1::ivy__enumspec >(s.spec);
                            if(((s.spec).tag == 0)){
                                loc__res.spec = ext__ivy__enumspec__flat(self__COLON__ivy__enumspec, st);
                            }
                            else {
                                loc__res.spec = ext__ivy__typespec__flat(s.spec, st);
                            }
                        }
                    }
                }
            }
            if(s.has_spec){
                {
                    {
                        ivy__structspec self__COLON__ivy__structspec;
                        if (((s.spec).tag == 1)) self__COLON__ivy__structspec = ivyc_s1::ivy__typespec::unwrap< ivyc_s1::ivy__structspec >(s.spec);
                        if(((s.spec).tag == 1)){
                            ext__ivy__structspec__auto_flat_spec(self__COLON__ivy__structspec, st, loc__res.sort);
                        }
                        else {
                            ext__ivy__typespec__auto_flat_spec(s.spec, st, loc__res.sort);
                        }
                    }
                }
            }
            ext__vector__ivy__decl____append(st.decls, ivyc_s1::ivy__decl(2, new ivyc_s1::ivy__decl::twrap<ivyc_s1::ivy__typedc>(loc__res)));
            if(s.has_spec){
                {
                    {
                        ivy__structspec self__COLON__ivy__structspec;
                        if (((s.spec).tag == 1)) self__COLON__ivy__structspec = ivyc_s1::ivy__typespec::unwrap< ivyc_s1::ivy__structspec >(s.spec);
                        if(((s.spec).tag == 1)){
                            ext__ivy__structspec__to_destrs(self__COLON__ivy__structspec, st, loc__res.sort);
                        }
                        else {
                            ext__ivy__typespec__to_destrs(s.spec, st, loc__res.sort);
                        }
                    }
                }
            }
        }
    }
}
ivyc_s1::cpp__ident ivyc_s1::ext__cpp__dotident__make(ivyc_s1::cpp__ident namesp, const cpp__strident& member){
    ivyc_s1::cpp__ident res;
    {
        cpp__dotident loc__s;
        {
            loc__s.namesp = namesp;
            loc__s.member = member;
            res = ivyc_s1::cpp__ident(2, new ivyc_s1::cpp__ident::twrap<ivyc_s1::cpp__dotident>(loc__s));
        }
    }
    return res;
}
ivyc_s1::ivy__decl ivyc_s1::ext__ivy__instancedc__desugar(const ivy__instancedc& s){
    ivyc_s1::ivy__decl res;
    {
        {
            ivyc_s1::ivy__decl loc__0;
            {
                loc__0 = ext__ivy__instantiatedc__make(s.modname, s.prms, s.ann);
                {
                    ivyc_s1::ivy__decl loc__body;
                    {
                        loc__body = loc__0;
                        res = ext__ivy__objectdc__make(s.objname, loc__body, s.ann);
                    }
                }
            }
        }
    }
    return res;
}
ivyc_s1::ivy__expr ivyc_s1::ext__ivy__symbol__type_elide_int(const ivy__symbol& e, bool b, const ivy__symeval& m, ivy__elidest& st){
    ivyc_s1::ivy__expr res;
    {
        res = ivyc_s1::ivy__expr(0, new ivyc_s1::ivy__expr::twrap<ivyc_s1::ivy__symbol>(e));
    }
    return res;
}
ivyc_s1::cpp__expr ivyc_s1::ext__ivy__native_type_to_cpp(ivyc_s1::ivy__expr ty, ivy__tocppst& st){
    ivyc_s1::cpp__expr res;
    {
        st.native = true;
        {
            ivy__app self__COLON__ivy__app;
            if (((ty).tag == 1)) self__COLON__ivy__app = ivyc_s1::ivy__expr::unwrap< ivyc_s1::ivy__app >(ty);
            if(((ty).tag == 1)){
                res = ext__ivy__app__to_cpp(self__COLON__ivy__app, st);
            }
            else {
                {
                    ivy__symbol self__COLON__ivy__symbol;
                    if (((ty).tag == 0)) self__COLON__ivy__symbol = ivyc_s1::ivy__expr::unwrap< ivyc_s1::ivy__symbol >(ty);
                    if(((ty).tag == 0)){
                        res = ext__ivy__symbol__to_cpp(self__COLON__ivy__symbol, st);
                    }
                    else {
                        res = ext__ivy__expr__to_cpp(ty, st);
                    }
                }
            }
        }
        st.native = false;
    }
    return res;
}
void ivyc_s1::ext__ivy__auto_instance_defd(const ivy__instancedc& s, ivy__flatst& st){
    {
        st.defining = true;
        {
            ivyc_s1::ivy__ident loc__0;
            ivyc_s1::ivy__ident loc__1;
            {
                {
                    ivy__symbol self__COLON__ivy__symbol;
                    if (((s.objname).tag == 0)) self__COLON__ivy__symbol = ivyc_s1::ivy__expr::unwrap< ivyc_s1::ivy__symbol >(s.objname);
                    if(((s.objname).tag == 0)){
                        loc__0 = ext__ivy__symbol__get_name(self__COLON__ivy__symbol);
                    }
                    else {
                        loc__0 = ext__ivy__expr__get_name(s.objname);
                    }
                }
                {
                    ivy__dotident self__COLON__ivy__dotident;
                    if (((loc__0).tag == 2)) self__COLON__ivy__dotident = ivyc_s1::ivy__ident::unwrap< ivyc_s1::ivy__dotident >(loc__0);
                    if(((loc__0).tag == 2)){
                        loc__1 = ext__ivy__dotident__flat(self__COLON__ivy__dotident, false, st);
                    }
                    else {
                        {
                            ivy__strident self__COLON__ivy__strident;
                            if (((loc__0).tag == 0)) self__COLON__ivy__strident = ivyc_s1::ivy__ident::unwrap< ivyc_s1::ivy__strident >(loc__0);
                            if(((loc__0).tag == 0)){
                                loc__1 = ext__ivy__strident__flat(self__COLON__ivy__strident, false, st);
                            }
                            else {
                                loc__1 = ext__ivy__ident__flat(loc__0, false, st);
                            }
                        }
                    }
                }
                {
                    ivyc_s1::ivy__ident loc__id;
                    {
                        loc__id = loc__1;
                        st.defining = false;
                        {
                            ivy__symeval loc__pmap;
                            {
                                {
                                    ivyc_s1::ivy__ident loc__key;
                                    {
                                        loc__key = ext__ivy__make_auto_key(loc__id, false, loc__pmap);
                                        {
                                            vector__ivy__expr__ loc__prms;
                                            {
                                                {
                                                    unsigned long long loc__idx;
    loc__idx = (unsigned long long)___ivy_choose(0,"loc:idx",16010);
                                                    {
                                                        loc__idx = vector__ivy__expr____begin(s.prms);
                                                        while((loc__idx < vector__ivy__expr____end(s.prms))){
                                                            {
                                                                {
                                                                    ivyc_s1::ivy__ident loc__0;
                                                                    ivyc_s1::ivy__expr loc__1;
                                                                    {
                                                                        {
                                                                            ivy__symbol self__COLON__ivy__symbol;
                                                                            if (((vector__ivy__expr____value(s.prms,loc__idx)).tag == 0)) self__COLON__ivy__symbol = ivyc_s1::ivy__expr::unwrap< ivyc_s1::ivy__symbol >(vector__ivy__expr____value(s.prms,loc__idx));
                                                                            if(((vector__ivy__expr____value(s.prms,loc__idx)).tag == 0)){
                                                                                loc__0 = ext__ivy__symbol__get_name(self__COLON__ivy__symbol);
                                                                            }
                                                                            else {
                                                                                loc__0 = ext__ivy__expr__get_name(vector__ivy__expr____value(s.prms,loc__idx));
                                                                            }
                                                                        }
                                                                        ivyc_s1::ivy__expr __tmp31;
                                                                        __tmp31 = vector__ivy__expr____value(s.prms,loc__idx); ext__ivy__symeval__get(loc__pmap, loc__0, __tmp31);
                                                                        loc__1 = __tmp31;
                                                                        ext__vector__ivy__expr____append(loc__prms, loc__1);
                                                                    }
                                                                }
                                                                loc__idx = ext__vector__ivy__expr____domain__next(loc__idx);
                                                            }
                                                        }
                                                    }
                                                }
                                                {
                                                    ivy__instantiatedc loc__body;
                                                    {
                                                        loc__body.ann = s.ann;
                                                        loc__body.name = s.modname;
                                                        loc__body.prms = loc__prms;
                                                        ext__ivy__ident_to_instantiatedc__set(st.autodefs, loc__key, loc__body);
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
    }
}
void ivyc_s1::ext__ivy__range_type(ivyc_s1::ivy__expr& s){
    {
        bool loc__0;
    loc__0 = (bool)___ivy_choose(0,"loc:0",16017);
        {
            {
                ivy__app self__COLON__ivy__app;
                if (((s).tag == 1)) self__COLON__ivy__app = ivyc_s1::ivy__expr::unwrap< ivyc_s1::ivy__app >(s);
                if(((s).tag == 1)){
                    loc__0 = ext__ivy__app__is(self__COLON__ivy__app, ivy__verb__arrow);
                }
                else {
                    loc__0 = ext__ivy__expr__is(s, ivy__verb__arrow);
                }
            }
            if(loc__0){
                {
                    {
                        ivy__app self__COLON__ivy__app;
                        if (((s).tag == 1)) self__COLON__ivy__app = ivyc_s1::ivy__expr::unwrap< ivyc_s1::ivy__app >(s);
                        if(((s).tag == 1)){
                            s = ext__ivy__app__get_arg(self__COLON__ivy__app, 1);
                        }
                        else {
                            s = ext__ivy__expr__get_arg(s, 1);
                        }
                    }
                }
            }
        }
    }
}
ivyc_s1::cpp__expr ivyc_s1::ext__cpp__comma__make(ivyc_s1::cpp__expr lhs, ivyc_s1::cpp__expr rhs, ivyc_s1::annot ann){
    ivyc_s1::cpp__expr res;
    {
        cpp__app loc__s;
        {
            loc__s.func = ext__cpp__symbol__makestr(__lit<str>(","), ann);
            ext__vector__cpp__expr____append(loc__s.args, lhs);
            ext__vector__cpp__expr____append(loc__s.args, rhs);
            loc__s.ann = ann;
            res = ivyc_s1::cpp__expr(1, new ivyc_s1::cpp__expr::twrap<ivyc_s1::cpp__app>(loc__s));
        }
    }
    return res;
}
ivyc_s1::ivy__whilest ivyc_s1::ext__ivy__whilest__typeinfer_int(const ivy__whilest& s, ivy__typeinferst& st){
    ivyc_s1::ivy__whilest res;
    {
        res = s;
        {
            bool loc__ok;
    loc__ok = (bool)___ivy_choose(0,"loc:ok",16021);
            {
                loc__ok = true;
                ext__ivy__bottom_up_type(res.cond, st, loc__ok);
                if(loc__ok){
                    {
                        {
                            ivyc_s1::ivy__expr loc__0;
                            {
                                loc__0 = ext__ivy__symbol__makestr(__lit<str>("bool"), s.ann);
                                ext__ivy__type_infer_known(res.cond, loc__0, st.tc.m);
                            }
                        }
                    }
                }
                {
                    ivyc_s1::ivy__stmt loc__body;
                    {
                        {
                            ivy__whilest self__COLON__ivy__whilest;
                            if (((res.body).tag == 4)) self__COLON__ivy__whilest = ivyc_s1::ivy__stmt::unwrap< ivyc_s1::ivy__whilest >(res.body);
                            if(((res.body).tag == 4)){
                                loc__body = ext__ivy__whilest__typeinfer(self__COLON__ivy__whilest, st);
                            }
                            else {
                                {
                                    ivy__ifst self__COLON__ivy__ifst;
                                    if (((res.body).tag == 3)) self__COLON__ivy__ifst = ivyc_s1::ivy__stmt::unwrap< ivyc_s1::ivy__ifst >(res.body);
                                    if(((res.body).tag == 3)){
                                        loc__body = ext__ivy__ifst__typeinfer(self__COLON__ivy__ifst, st);
                                    }
                                    else {
                                        {
                                            ivy__sequence self__COLON__ivy__sequence;
                                            if (((res.body).tag == 1)) self__COLON__ivy__sequence = ivyc_s1::ivy__stmt::unwrap< ivyc_s1::ivy__sequence >(res.body);
                                            if(((res.body).tag == 1)){
                                                loc__body = ext__ivy__sequence__typeinfer(self__COLON__ivy__sequence, st);
                                            }
                                            else {
                                                {
                                                    ivy__asgn self__COLON__ivy__asgn;
                                                    if (((res.body).tag == 0)) self__COLON__ivy__asgn = ivyc_s1::ivy__stmt::unwrap< ivyc_s1::ivy__asgn >(res.body);
                                                    if(((res.body).tag == 0)){
                                                        loc__body = ext__ivy__asgn__typeinfer(self__COLON__ivy__asgn, st);
                                                    }
                                                    else {
                                                        loc__body = ext__ivy__stmt__typeinfer(res.body, st);
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                        res.body = loc__body;
                    }
                }
            }
        }
    }
    return res;
}
unsigned long long ivyc_s1::ext__vector__str____domain__next(unsigned long long x){
    unsigned long long y;
    y = (unsigned long long)___ivy_choose(0,"fml:y",0);
    {
        y = (x + 1);
    }
    return y;
}
ivyc_s1::ivy__expr ivyc_s1::ext__ivy__comma__fold_left(const vector__ivy__expr__& args, ivyc_s1::annot ann){
    ivyc_s1::ivy__expr res;
    if((0 < vector__ivy__expr____end(args))){
        {
            res = vector__ivy__expr____value(args,0);
            {
                unsigned long long loc__0;
    loc__0 = (unsigned long long)___ivy_choose(0,"loc:0",16023);
                {
                    loc__0 = ext__vector__ivy__expr____domain__next(vector__ivy__expr____begin(args));
                    {
                        unsigned long long loc__idx;
    loc__idx = (unsigned long long)___ivy_choose(0,"loc:idx",16022);
                        {
                            loc__idx = loc__0;
                            while((loc__idx < vector__ivy__expr____end(args))){
                                {
                                    res = ext__ivy__comma__make(res, vector__ivy__expr____value(args,loc__idx), ann);
                                    loc__idx = ext__vector__ivy__expr____domain__next(loc__idx);
                                }
                            }
                        }
                    }
                }
            }
        }
    }
    else {
        {
            res = ext__ivy__empty__make(ann);
        }
    }
    return res;
}
ivyc_s1::ivy__ident ivyc_s1::ext__ivy__actdc__member_type(const ivy__actdc& s){
    ivyc_s1::ivy__ident res;
    {
        {
            ivyc_s1::ivy__expr loc__0;
            {
                {
                    ivy__app self__COLON__ivy__app;
                    if (((vector__ivy__expr____value(s.inputs,0)).tag == 1)) self__COLON__ivy__app = ivyc_s1::ivy__expr::unwrap< ivyc_s1::ivy__app >(vector__ivy__expr____value(s.inputs,0));
                    if(((vector__ivy__expr____value(s.inputs,0)).tag == 1)){
                        loc__0 = ext__ivy__app__get_arg(self__COLON__ivy__app, 1);
                    }
                    else {
                        loc__0 = ext__ivy__expr__get_arg(vector__ivy__expr____value(s.inputs,0), 1);
                    }
                }
                {
                    ivy__symbol self__COLON__ivy__symbol;
                    if (((loc__0).tag == 0)) self__COLON__ivy__symbol = ivyc_s1::ivy__expr::unwrap< ivyc_s1::ivy__symbol >(loc__0);
                    if(((loc__0).tag == 0)){
                        res = ext__ivy__symbol__get_name(self__COLON__ivy__symbol);
                    }
                    else {
                        res = ext__ivy__expr__get_name(loc__0);
                    }
                }
            }
        }
    }
    return res;
}
ivyc_s1::ivy__decl ivyc_s1::ext__ivy__vardc__func_to_action(const ivy__vardc& s){
    ivyc_s1::ivy__decl dres;
    if(s.has_def){
        {
            {
                ivy__actdc loc__res;
    loc__res.kind = (ivy__action_kind)___ivy_choose(0,"loc:res",16034);
    loc__res.has_body = (bool)___ivy_choose(0,"loc:res",16034);
    loc__res.has_proto = (bool)___ivy_choose(0,"loc:res",16034);
    loc__res.proto.has_ret = (bool)___ivy_choose(0,"loc:res",16034);
    loc__res.proto.ret.is_input = (bool)___ivy_choose(0,"loc:res",16034);
    loc__res.proto.ret.inpos = (unsigned long long)___ivy_choose(0,"loc:res",16034);
    loc__res.proto.ret.is_output = (bool)___ivy_choose(0,"loc:res",16034);
    loc__res.proto.ret.outpos = (unsigned long long)___ivy_choose(0,"loc:res",16034);
    loc__res.proto.ret.is_ref = (bool)___ivy_choose(0,"loc:res",16034);
    loc__res.proto.ret.is_const = (bool)___ivy_choose(0,"loc:res",16034);
                {
                    loc__res.ann = s.ann;
                    {
                        ivyc_s1::ivy__expr loc__lhs;
                        {
                            loc__lhs = s.typing;
                            {
                                ivyc_s1::ivy__expr loc__ty;
                                {
                                    if(((loc__lhs).tag == 1)){
                                        {
                                            {
                                                ivyc_s1::ivy__expr loc__0;
                                                {
                                                    {
                                                        ivy__app self__COLON__ivy__app;
                                                        if (((loc__lhs).tag == 1)) self__COLON__ivy__app = ivyc_s1::ivy__expr::unwrap< ivyc_s1::ivy__app >(loc__lhs);
                                                        if(((loc__lhs).tag == 1)){
                                                            loc__0 = ext__ivy__app__get_func(self__COLON__ivy__app);
                                                        }
                                                        else {
                                                            loc__0 = ext__ivy__expr__get_func(loc__lhs);
                                                        }
                                                    }
                                                    {
                                                        ivy__app self__COLON__ivy__app;
                                                        if (((loc__0).tag == 1)) self__COLON__ivy__app = ivyc_s1::ivy__expr::unwrap< ivyc_s1::ivy__app >(loc__0);
                                                        if(((loc__0).tag == 1)){
                                                            loc__res.name = ext__ivy__app__get_arg(self__COLON__ivy__app, 0);
                                                        }
                                                        else {
                                                            loc__res.name = ext__ivy__expr__get_arg(loc__0, 0);
                                                        }
                                                    }
                                                }
                                            }
                                            {
                                                ivy__app self__COLON__ivy__app;
                                                if (((loc__lhs).tag == 1)) self__COLON__ivy__app = ivyc_s1::ivy__expr::unwrap< ivyc_s1::ivy__app >(loc__lhs);
                                                if(((loc__lhs).tag == 1)){
                                                    loc__res.inputs = ext__ivy__app__get_args(self__COLON__ivy__app);
                                                }
                                                else {
                                                    loc__res.inputs = ext__ivy__expr__get_args(loc__lhs);
                                                }
                                            }
                                            {
                                                ivyc_s1::ivy__expr loc__0;
                                                ivyc_s1::ivy__expr loc__1;
                                                {
                                                    {
                                                        ivy__app self__COLON__ivy__app;
                                                        if (((loc__lhs).tag == 1)) self__COLON__ivy__app = ivyc_s1::ivy__expr::unwrap< ivyc_s1::ivy__app >(loc__lhs);
                                                        if(((loc__lhs).tag == 1)){
                                                            loc__0 = ext__ivy__app__get_func(self__COLON__ivy__app);
                                                        }
                                                        else {
                                                            loc__0 = ext__ivy__expr__get_func(loc__lhs);
                                                        }
                                                    }
                                                    {
                                                        ivy__app self__COLON__ivy__app;
                                                        if (((loc__0).tag == 1)) self__COLON__ivy__app = ivyc_s1::ivy__expr::unwrap< ivyc_s1::ivy__app >(loc__0);
                                                        if(((loc__0).tag == 1)){
                                                            loc__1 = ext__ivy__app__get_arg(self__COLON__ivy__app, 1);
                                                        }
                                                        else {
                                                            loc__1 = ext__ivy__expr__get_arg(loc__0, 1);
                                                        }
                                                    }
                                                    {
                                                        ivy__app self__COLON__ivy__app;
                                                        if (((loc__1).tag == 1)) self__COLON__ivy__app = ivyc_s1::ivy__expr::unwrap< ivyc_s1::ivy__app >(loc__1);
                                                        if(((loc__1).tag == 1)){
                                                            loc__ty = ext__ivy__app__get_arg(self__COLON__ivy__app, 1);
                                                        }
                                                        else {
                                                            loc__ty = ext__ivy__expr__get_arg(loc__1, 1);
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                    else {
                                        if(((loc__lhs).tag == 0)){
                                            {
                                                {
                                                    ivy__app self__COLON__ivy__app;
                                                    if (((loc__lhs).tag == 1)) self__COLON__ivy__app = ivyc_s1::ivy__expr::unwrap< ivyc_s1::ivy__app >(loc__lhs);
                                                    if(((loc__lhs).tag == 1)){
                                                        loc__res.name = ext__ivy__app__get_arg(self__COLON__ivy__app, 0);
                                                    }
                                                    else {
                                                        loc__res.name = ext__ivy__expr__get_arg(loc__lhs, 0);
                                                    }
                                                }
                                                {
                                                    ivy__app self__COLON__ivy__app;
                                                    if (((loc__lhs).tag == 1)) self__COLON__ivy__app = ivyc_s1::ivy__expr::unwrap< ivyc_s1::ivy__app >(loc__lhs);
                                                    if(((loc__lhs).tag == 1)){
                                                        loc__ty = ext__ivy__app__get_arg(self__COLON__ivy__app, 1);
                                                    }
                                                    else {
                                                        loc__ty = ext__ivy__expr__get_arg(loc__lhs, 1);
                                                    }
                                                }
                                            }
                                        }
                                    }
                                    {
                                        ivyc_s1::ivy__expr loc__0;
                                        {
                                            loc__0 = ext__ivy__symbol__makestr(__lit<str>("__out"), s.ann);
                                            {
                                                ivyc_s1::ivy__expr loc__retv;
                                                {
                                                    loc__retv = loc__0;
                                                    {
                                                        ivyc_s1::ivy__expr loc__0;
                                                        {
                                                            loc__0 = ext__ivy__colon__make(loc__retv, loc__ty, s.ann);
                                                            {
                                                                ivyc_s1::ivy__expr loc__retty;
                                                                {
                                                                    loc__retty = loc__0;
                                                                    ext__vector__ivy__expr____append(loc__res.outputs, loc__retty);
                                                                    loc__res.has_body = true;
                                                                    loc__res.body = ext__ivy__asgn__make(loc__retty, s.def, s.ann);
                                                                    dres = ivyc_s1::ivy__decl(0, new ivyc_s1::ivy__decl::twrap<ivyc_s1::ivy__actdc>(loc__res));
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
    }
    else {
        {
            dres = ivyc_s1::ivy__decl(3, new ivyc_s1::ivy__decl::twrap<ivyc_s1::ivy__vardc>(s));
        }
    }
    return dres;
}
ivyc_s1::str ivyc_s1::ext__annot_i__to_str(const annot_i& s){
    ivyc_s1::str res;
    {
        res = s.file;
        ext__str__extend(res, __lit<str>(": line "));
        {
            unsigned long long loc__0;
    loc__0 = (unsigned long long)___ivy_choose(0,"loc:0",16035);
            str loc__1;
            {
                loc__0 = ext__pos__next(s.line);
                loc__1 = ext__pos__to_str(loc__0);
                ext__str__extend(res, loc__1);
            }
        }
    }
    return res;
}
void ivyc_s1::ext__cpp__app__encode(const cpp__app& s, pretty& b, int prio){
    {
        {
            annot_i self__COLON__annot_i;
            if (((s.ann).tag == 0)) self__COLON__annot_i = ivyc_s1::annot::unwrap< ivyc_s1::annot_i >(s.ann);
            if(((s.ann).tag == 0)){
                ext__annot_i__encode(self__COLON__annot_i, b);
            }
            else {
                ext__annot__encode(s.ann, b);
            }
        }
        {
            cpp__verb loc__0;
    loc__0 = (cpp__verb)___ivy_choose(0,"loc:0",16038);
            {
                {
                    cpp__symbol self__COLON__cpp__symbol;
                    if (((s.func).tag == 0)) self__COLON__cpp__symbol = ivyc_s1::cpp__expr::unwrap< ivyc_s1::cpp__symbol >(s.func);
                    if(((s.func).tag == 0)){
                        loc__0 = ext__cpp__symbol__get_verb(self__COLON__cpp__symbol);
                    }
                    else {
                        loc__0 = ext__cpp__expr__get_verb(s.func);
                    }
                }
                {
                    cpp__verb loc__vrb;
    loc__vrb = (cpp__verb)___ivy_choose(0,"loc:vrb",16037);
                    {
                        loc__vrb = loc__0;
                        if(!(loc__vrb == cpp__verb__none)){
                            {
                                int loc__opprio;
    loc__opprio = (int)___ivy_choose(0,"loc:opprio",16036);
                                {
                                    loc__opprio = cpp__verb_to_prio[loc__vrb];
                                    if((loc__opprio < prio)){
                                        {
                                            ext__pretty__nest(b);
                                            ext__pretty__extend(b, __lit<str>("("));
                                        }
                                    }
                                    if((vector__cpp__expr____end(s.args) == 1)){
                                        {
                                            ext__pretty__extend(b, cpp__verb_to_str[loc__vrb]);
                                            ext__pretty__extend(b, __lit<str>(" "));
                                            {
                                                cpp__pi self__COLON__cpp__pi;
                                                if (((vector__cpp__expr____value(s.args,0)).tag == 3)) self__COLON__cpp__pi = ivyc_s1::cpp__expr::unwrap< ivyc_s1::cpp__pi >(vector__cpp__expr____value(s.args,0));
                                                if(((vector__cpp__expr____value(s.args,0)).tag == 3)){
                                                    ext__cpp__pi__encode(self__COLON__cpp__pi, b, loc__opprio);
                                                }
                                                else {
                                                    {
                                                        cpp__app self__COLON__cpp__app;
                                                        if (((vector__cpp__expr____value(s.args,0)).tag == 1)) self__COLON__cpp__app = ivyc_s1::cpp__expr::unwrap< ivyc_s1::cpp__app >(vector__cpp__expr____value(s.args,0));
                                                        if(((vector__cpp__expr____value(s.args,0)).tag == 1)){
                                                            ext__cpp__app__encode(self__COLON__cpp__app, b, loc__opprio);
                                                        }
                                                        else {
                                                            {
                                                                cpp__symbol self__COLON__cpp__symbol;
                                                                if (((vector__cpp__expr____value(s.args,0)).tag == 0)) self__COLON__cpp__symbol = ivyc_s1::cpp__expr::unwrap< ivyc_s1::cpp__symbol >(vector__cpp__expr____value(s.args,0));
                                                                if(((vector__cpp__expr____value(s.args,0)).tag == 0)){
                                                                    ext__cpp__symbol__encode(self__COLON__cpp__symbol, b, loc__opprio);
                                                                }
                                                                else {
                                                                    ext__cpp__expr__encode(vector__cpp__expr____value(s.args,0), b, loc__opprio);
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                    else {
                                        {
                                            {
                                                cpp__pi self__COLON__cpp__pi;
                                                if (((vector__cpp__expr____value(s.args,0)).tag == 3)) self__COLON__cpp__pi = ivyc_s1::cpp__expr::unwrap< ivyc_s1::cpp__pi >(vector__cpp__expr____value(s.args,0));
                                                if(((vector__cpp__expr____value(s.args,0)).tag == 3)){
                                                    ext__cpp__pi__encode(self__COLON__cpp__pi, b, loc__opprio);
                                                }
                                                else {
                                                    {
                                                        cpp__app self__COLON__cpp__app;
                                                        if (((vector__cpp__expr____value(s.args,0)).tag == 1)) self__COLON__cpp__app = ivyc_s1::cpp__expr::unwrap< ivyc_s1::cpp__app >(vector__cpp__expr____value(s.args,0));
                                                        if(((vector__cpp__expr____value(s.args,0)).tag == 1)){
                                                            ext__cpp__app__encode(self__COLON__cpp__app, b, loc__opprio);
                                                        }
                                                        else {
                                                            {
                                                                cpp__symbol self__COLON__cpp__symbol;
                                                                if (((vector__cpp__expr____value(s.args,0)).tag == 0)) self__COLON__cpp__symbol = ivyc_s1::cpp__expr::unwrap< ivyc_s1::cpp__symbol >(vector__cpp__expr____value(s.args,0));
                                                                if(((vector__cpp__expr____value(s.args,0)).tag == 0)){
                                                                    ext__cpp__symbol__encode(self__COLON__cpp__symbol, b, loc__opprio);
                                                                }
                                                                else {
                                                                    ext__cpp__expr__encode(vector__cpp__expr____value(s.args,0), b, loc__opprio);
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                            ext__pretty__extend(b, __lit<str>(" "));
                                            ext__pretty__extend(b, cpp__verb_to_str[loc__vrb]);
                                            ext__pretty__extend(b, __lit<str>(" "));
                                            {
                                                cpp__pi self__COLON__cpp__pi;
                                                if (((vector__cpp__expr____value(s.args,1)).tag == 3)) self__COLON__cpp__pi = ivyc_s1::cpp__expr::unwrap< ivyc_s1::cpp__pi >(vector__cpp__expr____value(s.args,1));
                                                if(((vector__cpp__expr____value(s.args,1)).tag == 3)){
                                                    ext__cpp__pi__encode(self__COLON__cpp__pi, b, (loc__opprio + 1));
                                                }
                                                else {
                                                    {
                                                        cpp__app self__COLON__cpp__app;
                                                        if (((vector__cpp__expr____value(s.args,1)).tag == 1)) self__COLON__cpp__app = ivyc_s1::cpp__expr::unwrap< ivyc_s1::cpp__app >(vector__cpp__expr____value(s.args,1));
                                                        if(((vector__cpp__expr____value(s.args,1)).tag == 1)){
                                                            ext__cpp__app__encode(self__COLON__cpp__app, b, (loc__opprio + 1));
                                                        }
                                                        else {
                                                            {
                                                                cpp__symbol self__COLON__cpp__symbol;
                                                                if (((vector__cpp__expr____value(s.args,1)).tag == 0)) self__COLON__cpp__symbol = ivyc_s1::cpp__expr::unwrap< ivyc_s1::cpp__symbol >(vector__cpp__expr____value(s.args,1));
                                                                if(((vector__cpp__expr____value(s.args,1)).tag == 0)){
                                                                    ext__cpp__symbol__encode(self__COLON__cpp__symbol, b, (loc__opprio + 1));
                                                                }
                                                                else {
                                                                    ext__cpp__expr__encode(vector__cpp__expr____value(s.args,1), b, (loc__opprio + 1));
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                            if((loc__vrb == cpp__verb__ite)){
                                                {
                                                    ext__pretty__extend(b, __lit<str>(" "));
                                                    ext__pretty__extend(b, (true ? __lit<str>(":") : __lit<str>("else")));
                                                    ext__pretty__extend(b, __lit<str>(" "));
                                                    {
                                                        cpp__pi self__COLON__cpp__pi;
                                                        if (((vector__cpp__expr____value(s.args,2)).tag == 3)) self__COLON__cpp__pi = ivyc_s1::cpp__expr::unwrap< ivyc_s1::cpp__pi >(vector__cpp__expr____value(s.args,2));
                                                        if(((vector__cpp__expr____value(s.args,2)).tag == 3)){
                                                            ext__cpp__pi__encode(self__COLON__cpp__pi, b, (loc__opprio + 1));
                                                        }
                                                        else {
                                                            {
                                                                cpp__app self__COLON__cpp__app;
                                                                if (((vector__cpp__expr____value(s.args,2)).tag == 1)) self__COLON__cpp__app = ivyc_s1::cpp__expr::unwrap< ivyc_s1::cpp__app >(vector__cpp__expr____value(s.args,2));
                                                                if(((vector__cpp__expr____value(s.args,2)).tag == 1)){
                                                                    ext__cpp__app__encode(self__COLON__cpp__app, b, (loc__opprio + 1));
                                                                }
                                                                else {
                                                                    {
                                                                        cpp__symbol self__COLON__cpp__symbol;
                                                                        if (((vector__cpp__expr____value(s.args,2)).tag == 0)) self__COLON__cpp__symbol = ivyc_s1::cpp__expr::unwrap< ivyc_s1::cpp__symbol >(vector__cpp__expr____value(s.args,2));
                                                                        if(((vector__cpp__expr____value(s.args,2)).tag == 0)){
                                                                            ext__cpp__symbol__encode(self__COLON__cpp__symbol, b, (loc__opprio + 1));
                                                                        }
                                                                        else {
                                                                            ext__cpp__expr__encode(vector__cpp__expr____value(s.args,2), b, (loc__opprio + 1));
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                    if((loc__opprio < prio)){
                                        {
                                            ext__pretty__extend(b, __lit<str>(")"));
                                            ext__pretty__unnest(b);
                                        }
                                    }
                                }
                            }
                        }
                        else {
                            {
                                ext__pretty__nest(b);
                                {
                                    cpp__pi self__COLON__cpp__pi;
                                    if (((s.func).tag == 3)) self__COLON__cpp__pi = ivyc_s1::cpp__expr::unwrap< ivyc_s1::cpp__pi >(s.func);
                                    if(((s.func).tag == 3)){
                                        ext__cpp__pi__encode(self__COLON__cpp__pi, b, 99);
                                    }
                                    else {
                                        {
                                            cpp__app self__COLON__cpp__app;
                                            if (((s.func).tag == 1)) self__COLON__cpp__app = ivyc_s1::cpp__expr::unwrap< ivyc_s1::cpp__app >(s.func);
                                            if(((s.func).tag == 1)){
                                                ext__cpp__app__encode(self__COLON__cpp__app, b, 99);
                                            }
                                            else {
                                                {
                                                    cpp__symbol self__COLON__cpp__symbol;
                                                    if (((s.func).tag == 0)) self__COLON__cpp__symbol = ivyc_s1::cpp__expr::unwrap< ivyc_s1::cpp__symbol >(s.func);
                                                    if(((s.func).tag == 0)){
                                                        ext__cpp__symbol__encode(self__COLON__cpp__symbol, b, 99);
                                                    }
                                                    else {
                                                        ext__cpp__expr__encode(s.func, b, 99);
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                                if((vector__cpp__expr____end(s.args) == 0)){
                                    ext__pretty__extend(b, __lit<str>("()"));
                                }
                                else {
                                    {
                                        ext__cpp__expr__tup__encode(s.args, b, 0);
                                    }
                                }
                                ext__pretty__unnest(b);
                            }
                        }
                    }
                }
            }
        }
    }
}
ivyc_s1::ivy__varst ivyc_s1::ext__ivy__varst__flat_int(const ivy__varst& s, ivy__flatst& st){
    ivyc_s1::ivy__varst res;
    {
        res = s;
        res.name = ext__ivy__flat_formal(res.name, st);
    }
    return res;
}
bool ivyc_s1::ext__ivy__symbol__has_numident(const ivy__symbol& e){
    bool res;
    res = (bool)___ivy_choose(0,"fml:res",0);
    {
        res = ((e.name).tag == 1);
    }
    return res;
}
ivyc_s1::ivy__expr ivyc_s1::ext__ivy__arrow__make(ivyc_s1::ivy__expr lhs, ivyc_s1::ivy__expr rhs, ivyc_s1::annot ann){
    ivyc_s1::ivy__expr res;
    {
        ivy__app loc__s;
        {
            loc__s.func = ext__ivy__symbol__makestr(__lit<str>("->"), ann);
            ext__vector__ivy__expr____append(loc__s.args, lhs);
            ext__vector__ivy__expr____append(loc__s.args, rhs);
            loc__s.ann = ann;
            res = ivyc_s1::ivy__expr(1, new ivyc_s1::ivy__expr::twrap<ivyc_s1::ivy__app>(loc__s));
        }
    }
    return res;
}
ivyc_s1::ivy__expr ivyc_s1::ext__ivy__symbol__flat(const ivy__symbol& s, ivy__flatst& st){
    ivyc_s1::ivy__expr res;
    {
        ivy__symbol loc__f;
    loc__f.vrb = (ivy__verb)___ivy_choose(0,"loc:f",16041);
        {
            loc__f = s;
            if((s.vrb == ivy__verb__none)){
                {
                    bool loc__0;
    loc__0 = (bool)___ivy_choose(0,"loc:0",16040);
                    {
                        loc__0 = ext__ivy__ident_set__mem(st.locals, loc__f.name);
                        if(!loc__0){
                            {
                                {
                                    ivy__dotident self__COLON__ivy__dotident;
                                    if (((loc__f.name).tag == 2)) self__COLON__ivy__dotident = ivyc_s1::ivy__ident::unwrap< ivyc_s1::ivy__dotident >(loc__f.name);
                                    if(((loc__f.name).tag == 2)){
                                        loc__f.name = ext__ivy__dotident__flat(self__COLON__ivy__dotident, false, st);
                                    }
                                    else {
                                        {
                                            ivy__strident self__COLON__ivy__strident;
                                            if (((loc__f.name).tag == 0)) self__COLON__ivy__strident = ivyc_s1::ivy__ident::unwrap< ivyc_s1::ivy__strident >(loc__f.name);
                                            if(((loc__f.name).tag == 0)){
                                                loc__f.name = ext__ivy__strident__flat(self__COLON__ivy__strident, false, st);
                                            }
                                            else {
                                                loc__f.name = ext__ivy__ident__flat(loc__f.name, false, st);
                                            }
                                        }
                                    }
                                }
                                {
                                    ivy__strident self__COLON__ivy__strident;
                                    if (((loc__f.name).tag == 0)) self__COLON__ivy__strident = ivyc_s1::ivy__ident::unwrap< ivyc_s1::ivy__strident >(loc__f.name);
                                    if(((loc__f.name).tag == 0)){
                                        loc__f.vrb = ext__ivy__strident__get_verb(self__COLON__ivy__strident);
                                    }
                                    else {
                                        loc__f.vrb = ext__ivy__ident__get_verb(loc__f.name);
                                    }
                                }
                                if((loc__f.vrb == ivy__verb__none)){
                                    ext__ivy__check_defined(loc__f.name, st, s.ann);
                                }
                            }
                        }
                    }
                }
            }
            res = ivyc_s1::ivy__expr(0, new ivyc_s1::ivy__expr::twrap<ivyc_s1::ivy__symbol>(loc__f));
        }
    }
    return res;
}
ivyc_s1::cpp__funcdecl ivyc_s1::ext__ivy__make_virt_destr(const cpp__structdecl& t){
    ivyc_s1::cpp__funcdecl s;
    s.ftype.base.is_const = (bool)___ivy_choose(0,"fml:s",0);
    s.ftype.base.is_ref = (bool)___ivy_choose(0,"fml:s",0);
    s.ftype.is_const = (bool)___ivy_choose(0,"fml:s",0);
    s.ftype.has_initializer = (bool)___ivy_choose(0,"fml:s",0);
    s.has_body = (bool)___ivy_choose(0,"fml:s",0);
    s.is_static = (bool)___ivy_choose(0,"fml:s",0);
    s.is_virtual = (bool)___ivy_choose(0,"fml:s",0);
    {
        {
            str loc__name;
            {
                ext__str__extend(loc__name, __lit<str>("~"));
                {
                    ivyc_s1::cpp__ident loc__0;
                    str loc__1;
                    {
                        {
                            cpp__symbol self__COLON__cpp__symbol;
                            if (((t.name).tag == 0)) self__COLON__cpp__symbol = ivyc_s1::cpp__expr::unwrap< ivyc_s1::cpp__symbol >(t.name);
                            if(((t.name).tag == 0)){
                                loc__0 = ext__cpp__symbol__get_name(self__COLON__cpp__symbol);
                            }
                            else {
                                loc__0 = ext__cpp__expr__get_name(t.name);
                            }
                        }
                        {
                            cpp__dotident self__COLON__cpp__dotident;
                            if (((loc__0).tag == 2)) self__COLON__cpp__dotident = ivyc_s1::cpp__ident::unwrap< ivyc_s1::cpp__dotident >(loc__0);
                            if(((loc__0).tag == 2)){
                                loc__1 = ext__cpp__dotident__to_str(self__COLON__cpp__dotident);
                            }
                            else {
                                {
                                    cpp__strident self__COLON__cpp__strident;
                                    if (((loc__0).tag == 0)) self__COLON__cpp__strident = ivyc_s1::cpp__ident::unwrap< ivyc_s1::cpp__strident >(loc__0);
                                    if(((loc__0).tag == 0)){
                                        loc__1 = ext__cpp__strident__to_str(self__COLON__cpp__strident);
                                    }
                                    else {
                                        loc__1 = ext__cpp__ident__to_str(loc__0);
                                    }
                                }
                            }
                        }
                        ext__str__extend(loc__name, loc__1);
                    }
                }
                s.ftype.base.name = ext__cpp__symbol__makestr(loc__name, t.ann);
                s.has_body = true;
                s.body = ext__cpp__skipst__make(t.ann);
                s.is_virtual = true;
            }
        }
    }
    return s;
}
ivyc_s1::vector__ivy__expr__ ivyc_s1::ext__ivy__structspec__get_elems(const ivy__structspec& s){
    ivyc_s1::vector__ivy__expr__ res;
    res = s.destructors;
    return res;
}
ivyc_s1::cpp__expr ivyc_s1::ext__cpp__symbol__makestr(const str& name, ivyc_s1::annot ann){
    ivyc_s1::cpp__expr res;
    {
        cpp__symbol loc__s;
    loc__s.vrb = (cpp__verb)___ivy_choose(0,"loc:s",16044);
        {
            loc__s.name = ext__cpp__strident__make(name);
            loc__s.vrb = ext__cpp__verb_from_name(name);
            loc__s.ann = ann;
            res = ivyc_s1::cpp__expr(0, new ivyc_s1::cpp__expr::twrap<ivyc_s1::cpp__symbol>(loc__s));
        }
    }
    return res;
}
ivyc_s1::ivy__decost ivyc_s1::ext__ivy__decost__make(){
    ivyc_s1::ivy__decost res;
    res.counter = (unsigned long long)___ivy_choose(0,"fml:res",0);
    res.member = (bool)___ivy_choose(0,"fml:res",0);
    res.ok = (bool)___ivy_choose(0,"fml:res",0);
    res.error_reported = (bool)___ivy_choose(0,"fml:res",0);
    {
        res.ok = true;
    }
    return res;
}
ivyc_s1::cpp__stmt ivyc_s1::ext__ivy__asgn__to_cpp(const ivy__asgn& s, ivy__tocppst& st){
    ivyc_s1::cpp__stmt resd;
    {
        {
            vector__ivy__access_path__ loc__paths;
            {
                ext__ivy__lvalue_paths(s.rhs, loc__paths, false);
                {
                    cpp__asgn loc__res;
                    {
                        loc__res.ann = s.ann;
                        {
                            ivy__app self__COLON__ivy__app;
                            if (((s.lhs).tag == 1)) self__COLON__ivy__app = ivyc_s1::ivy__expr::unwrap< ivyc_s1::ivy__app >(s.lhs);
                            if(((s.lhs).tag == 1)){
                                loc__res.lhs = ext__ivy__app__to_cpp(self__COLON__ivy__app, st);
                            }
                            else {
                                {
                                    ivy__symbol self__COLON__ivy__symbol;
                                    if (((s.lhs).tag == 0)) self__COLON__ivy__symbol = ivyc_s1::ivy__expr::unwrap< ivyc_s1::ivy__symbol >(s.lhs);
                                    if(((s.lhs).tag == 0)){
                                        loc__res.lhs = ext__ivy__symbol__to_cpp(self__COLON__ivy__symbol, st);
                                    }
                                    else {
                                        loc__res.lhs = ext__ivy__expr__to_cpp(s.lhs, st);
                                    }
                                }
                            }
                        }
                        st.outputs = ext__ivy__comma__unfold_left(s.lhs);
                        ivy__tocppst __tmp32;
                        __tmp32 = st; ext__ivy__kill_lvalues(st.outputs, __tmp32, loc__paths);
                        st = __tmp32;
                        {
                            ivy__app self__COLON__ivy__app;
                            if (((s.rhs).tag == 1)) self__COLON__ivy__app = ivyc_s1::ivy__expr::unwrap< ivyc_s1::ivy__app >(s.rhs);
                            if(((s.rhs).tag == 1)){
                                loc__res.rhs = ext__ivy__app__to_cpp(self__COLON__ivy__app, st);
                            }
                            else {
                                {
                                    ivy__symbol self__COLON__ivy__symbol;
                                    if (((s.rhs).tag == 0)) self__COLON__ivy__symbol = ivyc_s1::ivy__expr::unwrap< ivyc_s1::ivy__symbol >(s.rhs);
                                    if(((s.rhs).tag == 0)){
                                        loc__res.rhs = ext__ivy__symbol__to_cpp(self__COLON__ivy__symbol, st);
                                    }
                                    else {
                                        loc__res.rhs = ext__ivy__expr__to_cpp(s.rhs, st);
                                    }
                                }
                            }
                        }
                        {
                            cpp__verb loc__0;
    loc__0 = (cpp__verb)___ivy_choose(0,"loc:0",16045);
                            {
                                {
                                    cpp__symbol self__COLON__cpp__symbol;
                                    if (((loc__res.rhs).tag == 0)) self__COLON__cpp__symbol = ivyc_s1::cpp__expr::unwrap< ivyc_s1::cpp__symbol >(loc__res.rhs);
                                    if(((loc__res.rhs).tag == 0)){
                                        loc__0 = ext__cpp__symbol__get_verb(self__COLON__cpp__symbol);
                                    }
                                    else {
                                        loc__0 = ext__cpp__expr__get_verb(loc__res.rhs);
                                    }
                                }
                                if(!(loc__0 == cpp__verb__empty)){
                                    {
                                        ext__ivy__fix_variant_arg(s.rhs, loc__res.rhs, st);
                                        ext__ivy__tocppst__add_stmt(st, ivyc_s1::cpp__stmt(0, new ivyc_s1::cpp__stmt::twrap<ivyc_s1::cpp__asgn>(loc__res)));
                                    }
                                }
                            }
                        }
                        ext__ivy__tocppst__get_code(st, s.ann, resd);
                        st.outputs = ext__vector__ivy__expr____empty();
                        st.dead = ext__vector__ivy__lvalue_count____empty();
                    }
                }
            }
        }
    }
    return resd;
}
void ivyc_s1::ext__cpp__ifst__encode_int(const cpp__ifst& s, pretty& b, int prio){
    {
        ext__pretty__extend(b, __lit<str>("if"));
        ext__pretty__extend(b, __lit<str>(" "));
        if(true){
            {
                ext__pretty__extend(b, __lit<str>("("));
            }
        }
        {
            cpp__pi self__COLON__cpp__pi;
            if (((s.cond).tag == 3)) self__COLON__cpp__pi = ivyc_s1::cpp__expr::unwrap< ivyc_s1::cpp__pi >(s.cond);
            if(((s.cond).tag == 3)){
                ext__cpp__pi__encode(self__COLON__cpp__pi, b, 0);
            }
            else {
                {
                    cpp__app self__COLON__cpp__app;
                    if (((s.cond).tag == 1)) self__COLON__cpp__app = ivyc_s1::cpp__expr::unwrap< ivyc_s1::cpp__app >(s.cond);
                    if(((s.cond).tag == 1)){
                        ext__cpp__app__encode(self__COLON__cpp__app, b, 0);
                    }
                    else {
                        {
                            cpp__symbol self__COLON__cpp__symbol;
                            if (((s.cond).tag == 0)) self__COLON__cpp__symbol = ivyc_s1::cpp__expr::unwrap< ivyc_s1::cpp__symbol >(s.cond);
                            if(((s.cond).tag == 0)){
                                ext__cpp__symbol__encode(self__COLON__cpp__symbol, b, 0);
                            }
                            else {
                                ext__cpp__expr__encode(s.cond, b, 0);
                            }
                        }
                    }
                }
            }
        }
        if(true){
            {
                ext__pretty__extend(b, __lit<str>(")"));
            }
        }
        ext__pretty__extend(b, __lit<str>(" "));
        {
            cpp__retst self__COLON__cpp__retst;
            if (((s.thenst).tag == 7)) self__COLON__cpp__retst = ivyc_s1::cpp__stmt::unwrap< ivyc_s1::cpp__retst >(s.thenst);
            if(((s.thenst).tag == 7)){
                ext__cpp__retst__encode(self__COLON__cpp__retst, b, 2);
            }
            else {
                {
                    cpp__varst self__COLON__cpp__varst;
                    if (((s.thenst).tag == 6)) self__COLON__cpp__varst = ivyc_s1::cpp__stmt::unwrap< ivyc_s1::cpp__varst >(s.thenst);
                    if(((s.thenst).tag == 6)){
                        ext__cpp__varst__encode(self__COLON__cpp__varst, b, 2);
                    }
                    else {
                        {
                            cpp__breakst self__COLON__cpp__breakst;
                            if (((s.thenst).tag == 5)) self__COLON__cpp__breakst = ivyc_s1::cpp__stmt::unwrap< ivyc_s1::cpp__breakst >(s.thenst);
                            if(((s.thenst).tag == 5)){
                                ext__cpp__breakst__encode(self__COLON__cpp__breakst, b, 2);
                            }
                            else {
                                {
                                    cpp__whilest self__COLON__cpp__whilest;
                                    if (((s.thenst).tag == 4)) self__COLON__cpp__whilest = ivyc_s1::cpp__stmt::unwrap< ivyc_s1::cpp__whilest >(s.thenst);
                                    if(((s.thenst).tag == 4)){
                                        ext__cpp__whilest__encode(self__COLON__cpp__whilest, b, 2);
                                    }
                                    else {
                                        {
                                            cpp__ifst self__COLON__cpp__ifst;
                                            if (((s.thenst).tag == 3)) self__COLON__cpp__ifst = ivyc_s1::cpp__stmt::unwrap< ivyc_s1::cpp__ifst >(s.thenst);
                                            if(((s.thenst).tag == 3)){
                                                ext__cpp__ifst__encode(self__COLON__cpp__ifst, b, 2);
                                            }
                                            else {
                                                {
                                                    cpp__skipst self__COLON__cpp__skipst;
                                                    if (((s.thenst).tag == 2)) self__COLON__cpp__skipst = ivyc_s1::cpp__stmt::unwrap< ivyc_s1::cpp__skipst >(s.thenst);
                                                    if(((s.thenst).tag == 2)){
                                                        ext__cpp__skipst__encode(self__COLON__cpp__skipst, b, 2);
                                                    }
                                                    else {
                                                        {
                                                            cpp__sequence self__COLON__cpp__sequence;
                                                            if (((s.thenst).tag == 1)) self__COLON__cpp__sequence = ivyc_s1::cpp__stmt::unwrap< ivyc_s1::cpp__sequence >(s.thenst);
                                                            if(((s.thenst).tag == 1)){
                                                                ext__cpp__sequence__encode(self__COLON__cpp__sequence, b, 2);
                                                            }
                                                            else {
                                                                {
                                                                    cpp__asgn self__COLON__cpp__asgn;
                                                                    if (((s.thenst).tag == 0)) self__COLON__cpp__asgn = ivyc_s1::cpp__stmt::unwrap< ivyc_s1::cpp__asgn >(s.thenst);
                                                                    if(((s.thenst).tag == 0)){
                                                                        ext__cpp__asgn__encode(self__COLON__cpp__asgn, b, 2);
                                                                    }
                                                                    else {
                                                                        ext__cpp__stmt__encode(s.thenst, b, 2);
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
        if(!((s.elsest).tag == 2)){
            {
                ext__pretty__extend(b, __lit<str>(" "));
                ext__pretty__extend(b, __lit<str>("else"));
                ext__pretty__extend(b, __lit<str>(" "));
                {
                    cpp__retst self__COLON__cpp__retst;
                    if (((s.elsest).tag == 7)) self__COLON__cpp__retst = ivyc_s1::cpp__stmt::unwrap< ivyc_s1::cpp__retst >(s.elsest);
                    if(((s.elsest).tag == 7)){
                        ext__cpp__retst__encode(self__COLON__cpp__retst, b, 2);
                    }
                    else {
                        {
                            cpp__varst self__COLON__cpp__varst;
                            if (((s.elsest).tag == 6)) self__COLON__cpp__varst = ivyc_s1::cpp__stmt::unwrap< ivyc_s1::cpp__varst >(s.elsest);
                            if(((s.elsest).tag == 6)){
                                ext__cpp__varst__encode(self__COLON__cpp__varst, b, 2);
                            }
                            else {
                                {
                                    cpp__breakst self__COLON__cpp__breakst;
                                    if (((s.elsest).tag == 5)) self__COLON__cpp__breakst = ivyc_s1::cpp__stmt::unwrap< ivyc_s1::cpp__breakst >(s.elsest);
                                    if(((s.elsest).tag == 5)){
                                        ext__cpp__breakst__encode(self__COLON__cpp__breakst, b, 2);
                                    }
                                    else {
                                        {
                                            cpp__whilest self__COLON__cpp__whilest;
                                            if (((s.elsest).tag == 4)) self__COLON__cpp__whilest = ivyc_s1::cpp__stmt::unwrap< ivyc_s1::cpp__whilest >(s.elsest);
                                            if(((s.elsest).tag == 4)){
                                                ext__cpp__whilest__encode(self__COLON__cpp__whilest, b, 2);
                                            }
                                            else {
                                                {
                                                    cpp__ifst self__COLON__cpp__ifst;
                                                    if (((s.elsest).tag == 3)) self__COLON__cpp__ifst = ivyc_s1::cpp__stmt::unwrap< ivyc_s1::cpp__ifst >(s.elsest);
                                                    if(((s.elsest).tag == 3)){
                                                        ext__cpp__ifst__encode(self__COLON__cpp__ifst, b, 2);
                                                    }
                                                    else {
                                                        {
                                                            cpp__skipst self__COLON__cpp__skipst;
                                                            if (((s.elsest).tag == 2)) self__COLON__cpp__skipst = ivyc_s1::cpp__stmt::unwrap< ivyc_s1::cpp__skipst >(s.elsest);
                                                            if(((s.elsest).tag == 2)){
                                                                ext__cpp__skipst__encode(self__COLON__cpp__skipst, b, 2);
                                                            }
                                                            else {
                                                                {
                                                                    cpp__sequence self__COLON__cpp__sequence;
                                                                    if (((s.elsest).tag == 1)) self__COLON__cpp__sequence = ivyc_s1::cpp__stmt::unwrap< ivyc_s1::cpp__sequence >(s.elsest);
                                                                    if(((s.elsest).tag == 1)){
                                                                        ext__cpp__sequence__encode(self__COLON__cpp__sequence, b, 2);
                                                                    }
                                                                    else {
                                                                        {
                                                                            cpp__asgn self__COLON__cpp__asgn;
                                                                            if (((s.elsest).tag == 0)) self__COLON__cpp__asgn = ivyc_s1::cpp__stmt::unwrap< ivyc_s1::cpp__asgn >(s.elsest);
                                                                            if(((s.elsest).tag == 0)){
                                                                                ext__cpp__asgn__encode(self__COLON__cpp__asgn, b, 2);
                                                                            }
                                                                            else {
                                                                                ext__cpp__stmt__encode(s.elsest, b, 2);
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
    }
}
ivyc_s1::ivy__expr ivyc_s1::ext__ivy__symbol__makestr(const str& name, ivyc_s1::annot ann){
    ivyc_s1::ivy__expr res;
    {
        ivy__symbol loc__s;
    loc__s.vrb = (ivy__verb)___ivy_choose(0,"loc:s",16048);
        {
            loc__s.name = ext__ivy__strident__make(name);
            loc__s.vrb = ext__ivy__verb_from_name(name);
            loc__s.ann = ann;
            res = ivyc_s1::ivy__expr(0, new ivyc_s1::ivy__expr::twrap<ivyc_s1::ivy__symbol>(loc__s));
        }
    }
    return res;
}
void ivyc_s1::ext__ivy__local_tracker__pop(ivy__local_tracker& s){
    ext__ivy__push_pop_ident_set__push(s.map);
}
void ivyc_s1::ext__ivy__vardc__reg_member(const ivy__vardc& s, ivy__tocppst& st){
    if(s.is_destructor){
        {
            {
                ivyc_s1::ivy__expr loc__0;
                ivyc_s1::ivy__expr loc__1;
                vector__ivy__expr__ loc__2;
                {
                    {
                        ivy__app self__COLON__ivy__app;
                        if (((s.typing).tag == 1)) self__COLON__ivy__app = ivyc_s1::ivy__expr::unwrap< ivyc_s1::ivy__app >(s.typing);
                        if(((s.typing).tag == 1)){
                            loc__0 = ext__ivy__app__get_arg(self__COLON__ivy__app, 1);
                        }
                        else {
                            loc__0 = ext__ivy__expr__get_arg(s.typing, 1);
                        }
                    }
                    {
                        ivy__app self__COLON__ivy__app;
                        if (((loc__0).tag == 1)) self__COLON__ivy__app = ivyc_s1::ivy__expr::unwrap< ivyc_s1::ivy__app >(loc__0);
                        if(((loc__0).tag == 1)){
                            loc__1 = ext__ivy__app__get_arg(self__COLON__ivy__app, 0);
                        }
                        else {
                            loc__1 = ext__ivy__expr__get_arg(loc__0, 0);
                        }
                    }
                    loc__2 = ext__ivy__times__unfold_left(loc__1);
                    {
                        vector__ivy__expr__ loc__dom;
                        {
                            loc__dom = loc__2;
                            {
                                ivyc_s1::ivy__ident loc__0;
                                {
                                    {
                                        ivy__symbol self__COLON__ivy__symbol;
                                        if (((vector__ivy__expr____value(loc__dom,0)).tag == 0)) self__COLON__ivy__symbol = ivyc_s1::ivy__expr::unwrap< ivyc_s1::ivy__symbol >(vector__ivy__expr____value(loc__dom,0));
                                        if(((vector__ivy__expr____value(loc__dom,0)).tag == 0)){
                                            loc__0 = ext__ivy__symbol__get_name(self__COLON__ivy__symbol);
                                        }
                                        else {
                                            loc__0 = ext__ivy__expr__get_name(vector__ivy__expr____value(loc__dom,0));
                                        }
                                    }
                                    {
                                        ivyc_s1::ivy__ident loc__type_ident;
                                        {
                                            loc__type_ident = loc__0;
                                            ext__ivy__tocppst__add_member(st, loc__type_ident, ivyc_s1::ivy__decl(3, new ivyc_s1::ivy__decl::twrap<ivyc_s1::ivy__vardc>(s)));
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
    }
}
void ivyc_s1::ext__ivy__ident_set__remove(ivy__ident_set& a, ivyc_s1::ivy__ident x){
    {

        a.erase(x);
    }
}
ivyc_s1::pretty__state ivyc_s1::ext__vector__pretty__state____back(const vector__pretty__state__& a){
    ivyc_s1::pretty__state res;
    res.begin = (unsigned long long)___ivy_choose(0,"fml:res",0);
    res.total = (unsigned long long)___ivy_choose(0,"fml:res",0);
    {

        if ((unsigned long long)a.size() > 0)
            res = a.back();
    }
    return res;
}
ivyc_s1::ivy__expr ivyc_s1::ext__ivy__expr__reduce(ivyc_s1::ivy__expr e, const ivy__symeval& smap){
    ivyc_s1::ivy__expr res;
    {
    }
    return res;
}
ivyc_s1::cpp__decl ivyc_s1::ext__ivy__vardc__to_cpp(const ivy__vardc& s, ivy__tocppst& st){
    ivyc_s1::cpp__decl resd;
    {
        cpp__vardecl loc__res;
    loc__res.vtype.is_const = (bool)___ivy_choose(0,"loc:res",15935);
    loc__res.vtype.is_ref = (bool)___ivy_choose(0,"loc:res",15935);
        {
            loc__res.ann = s.ann;
            {
                ivyc_s1::ivy__expr loc__0;
                {
                    {
                        ivy__app self__COLON__ivy__app;
                        if (((s.typing).tag == 1)) self__COLON__ivy__app = ivyc_s1::ivy__expr::unwrap< ivyc_s1::ivy__app >(s.typing);
                        if(((s.typing).tag == 1)){
                            loc__0 = ext__ivy__app__get_arg(self__COLON__ivy__app, 1);
                        }
                        else {
                            loc__0 = ext__ivy__expr__get_arg(s.typing, 1);
                        }
                    }
                    {
                        ivyc_s1::ivy__expr loc__ty;
                        {
                            loc__ty = loc__0;
                            if(s.is_destructor){
                                {
                                    {
                                        ivyc_s1::ivy__expr loc__0;
                                        {
                                            loc__0 = ext__ivy__expr__curry(loc__ty);
                                            {
                                                ivy__app self__COLON__ivy__app;
                                                if (((loc__0).tag == 1)) self__COLON__ivy__app = ivyc_s1::ivy__expr::unwrap< ivyc_s1::ivy__app >(loc__0);
                                                if(((loc__0).tag == 1)){
                                                    loc__ty = ext__ivy__app__get_arg(self__COLON__ivy__app, 1);
                                                }
                                                else {
                                                    loc__ty = ext__ivy__expr__get_arg(loc__0, 1);
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                            loc__res.vtype._type = ext__ivy__fix_variant_type(loc__ty, st);
                            {
                                ivyc_s1::cpp__expr loc__name;
                                {
                                    {
                                        ivyc_s1::ivy__expr loc__0;
                                        {
                                            {
                                                ivy__app self__COLON__ivy__app;
                                                if (((s.typing).tag == 1)) self__COLON__ivy__app = ivyc_s1::ivy__expr::unwrap< ivyc_s1::ivy__app >(s.typing);
                                                if(((s.typing).tag == 1)){
                                                    loc__0 = ext__ivy__app__get_arg(self__COLON__ivy__app, 0);
                                                }
                                                else {
                                                    loc__0 = ext__ivy__expr__get_arg(s.typing, 0);
                                                }
                                            }
                                            {
                                                ivy__app self__COLON__ivy__app;
                                                if (((loc__0).tag == 1)) self__COLON__ivy__app = ivyc_s1::ivy__expr::unwrap< ivyc_s1::ivy__app >(loc__0);
                                                if(((loc__0).tag == 1)){
                                                    loc__name = ext__ivy__app__to_cpp(self__COLON__ivy__app, st);
                                                }
                                                else {
                                                    {
                                                        ivy__symbol self__COLON__ivy__symbol;
                                                        if (((loc__0).tag == 0)) self__COLON__ivy__symbol = ivyc_s1::ivy__expr::unwrap< ivyc_s1::ivy__symbol >(loc__0);
                                                        if(((loc__0).tag == 0)){
                                                            loc__name = ext__ivy__symbol__to_cpp(self__COLON__ivy__symbol, st);
                                                        }
                                                        else {
                                                            loc__name = ext__ivy__expr__to_cpp(loc__0, st);
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                    ivyc_s1::cpp__expr __tmp33;
                                    __tmp33 = loc__name; ext__ivy__member_name(__tmp33);
                                    loc__res.vtype.name = __tmp33;
                                    resd = ivyc_s1::cpp__decl(3, new ivyc_s1::cpp__decl::twrap<ivyc_s1::cpp__vardecl>(loc__res));
                                    if(!st.in_class){
                                        {
                                            {
                                                ivyc_s1::ivy__expr loc__0;
                                                ivyc_s1::ivy__ident loc__1;
                                                {
                                                    {
                                                        ivy__app self__COLON__ivy__app;
                                                        if (((s.typing).tag == 1)) self__COLON__ivy__app = ivyc_s1::ivy__expr::unwrap< ivyc_s1::ivy__app >(s.typing);
                                                        if(((s.typing).tag == 1)){
                                                            loc__0 = ext__ivy__app__get_arg(self__COLON__ivy__app, 0);
                                                        }
                                                        else {
                                                            loc__0 = ext__ivy__expr__get_arg(s.typing, 0);
                                                        }
                                                    }
                                                    {
                                                        ivy__symbol self__COLON__ivy__symbol;
                                                        if (((loc__0).tag == 0)) self__COLON__ivy__symbol = ivyc_s1::ivy__expr::unwrap< ivyc_s1::ivy__symbol >(loc__0);
                                                        if(((loc__0).tag == 0)){
                                                            loc__1 = ext__ivy__symbol__get_name(self__COLON__ivy__symbol);
                                                        }
                                                        else {
                                                            loc__1 = ext__ivy__expr__get_name(loc__0);
                                                        }
                                                    }
                                                    ext__ivy__add_namespaces(resd, loc__1);
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
    }
    return resd;
}
ivyc_s1::ivy__expr ivyc_s1::ext__ivy__app__reduce(const ivy__app& s, const ivy__symeval& smap){
    ivyc_s1::ivy__expr res;
    {
        {
            ivy__app loc__resa;
            {
                {
                    ivy__app self__COLON__ivy__app;
                    if (((s.func).tag == 1)) self__COLON__ivy__app = ivyc_s1::ivy__expr::unwrap< ivyc_s1::ivy__app >(s.func);
                    if(((s.func).tag == 1)){
                        loc__resa.func = ext__ivy__app__reduce(self__COLON__ivy__app, smap);
                    }
                    else {
                        {
                            ivy__symbol self__COLON__ivy__symbol;
                            if (((s.func).tag == 0)) self__COLON__ivy__symbol = ivyc_s1::ivy__expr::unwrap< ivyc_s1::ivy__symbol >(s.func);
                            if(((s.func).tag == 0)){
                                loc__resa.func = ext__ivy__symbol__reduce(self__COLON__ivy__symbol, smap);
                            }
                            else {
                                loc__resa.func = ext__ivy__expr__reduce(s.func, smap);
                            }
                        }
                    }
                }
                {
                    unsigned long long loc__idx;
    loc__idx = (unsigned long long)___ivy_choose(0,"loc:idx",16059);
                    {
                        loc__idx = vector__ivy__expr____begin(s.args);
                        while((loc__idx < vector__ivy__expr____end(s.args))){
                            {
                                {
                                    ivyc_s1::ivy__expr loc__0;
                                    {
                                        {
                                            ivy__app self__COLON__ivy__app;
                                            if (((vector__ivy__expr____value(s.args,loc__idx)).tag == 1)) self__COLON__ivy__app = ivyc_s1::ivy__expr::unwrap< ivyc_s1::ivy__app >(vector__ivy__expr____value(s.args,loc__idx));
                                            if(((vector__ivy__expr____value(s.args,loc__idx)).tag == 1)){
                                                loc__0 = ext__ivy__app__reduce(self__COLON__ivy__app, smap);
                                            }
                                            else {
                                                {
                                                    ivy__symbol self__COLON__ivy__symbol;
                                                    if (((vector__ivy__expr____value(s.args,loc__idx)).tag == 0)) self__COLON__ivy__symbol = ivyc_s1::ivy__expr::unwrap< ivyc_s1::ivy__symbol >(vector__ivy__expr____value(s.args,loc__idx));
                                                    if(((vector__ivy__expr____value(s.args,loc__idx)).tag == 0)){
                                                        loc__0 = ext__ivy__symbol__reduce(self__COLON__ivy__symbol, smap);
                                                    }
                                                    else {
                                                        loc__0 = ext__ivy__expr__reduce(vector__ivy__expr____value(s.args,loc__idx), smap);
                                                    }
                                                }
                                            }
                                        }
                                        ext__vector__ivy__expr____append(loc__resa.args, loc__0);
                                    }
                                }
                                loc__idx = ext__vector__ivy__expr____domain__next(loc__idx);
                            }
                        }
                        res = ivyc_s1::ivy__expr(1, new ivyc_s1::ivy__expr::twrap<ivyc_s1::ivy__app>(loc__resa));
                    }
                }
            }
        }
    }
    return res;
}
void ivyc_s1::ext__ivy__flat_formalvec(vector__ivy__expr__& es, ivy__flatst& st){
    {
        unsigned long long loc__idx;
    loc__idx = (unsigned long long)___ivy_choose(0,"loc:idx",16062);
        {
            loc__idx = vector__ivy__expr____begin(es);
            while((loc__idx < vector__ivy__expr____end(es))){
                {
                    {
                        ivyc_s1::ivy__expr loc__e;
                        {
                            loc__e = vector__ivy__expr____value(es,loc__idx);
                            loc__e = ext__ivy__flat_formal(loc__e, st);
                            ext__vector__ivy__expr____set(es, loc__idx, loc__e);
                            loc__idx = ext__vector__ivy__expr____domain__next(loc__idx);
                        }
                    }
                }
            }
        }
    }
}
ivyc_s1::cpp__ident ivyc_s1::ext__ivy__dotident__to_cpp(const ivy__dotident& s, bool native){
    ivyc_s1::cpp__ident res;
    {
        cpp__dotident loc__t;
        {
            {
                ivy__dotident self__COLON__ivy__dotident;
                if (((s.namesp).tag == 2)) self__COLON__ivy__dotident = ivyc_s1::ivy__ident::unwrap< ivyc_s1::ivy__dotident >(s.namesp);
                if(((s.namesp).tag == 2)){
                    loc__t.namesp = ext__ivy__dotident__to_cpp(self__COLON__ivy__dotident, native);
                }
                else {
                    {
                        ivy__strident self__COLON__ivy__strident;
                        if (((s.namesp).tag == 0)) self__COLON__ivy__strident = ivyc_s1::ivy__ident::unwrap< ivyc_s1::ivy__strident >(s.namesp);
                        if(((s.namesp).tag == 0)){
                            loc__t.namesp = ext__ivy__strident__to_cpp(self__COLON__ivy__strident, native);
                        }
                        else {
                            loc__t.namesp = ext__ivy__ident__to_cpp(s.namesp, native);
                        }
                    }
                }
            }
            loc__t.member = ext__ivy__strident_to_cpp(s.member, native);
            res = ivyc_s1::cpp__ident(2, new ivyc_s1::cpp__ident::twrap<ivyc_s1::cpp__dotident>(loc__t));
        }
    }
    return res;
}
ivyc_s1::ivy__ident ivyc_s1::ext__ivy__dotident__get_member(const ivy__dotident& s){
    ivyc_s1::ivy__ident res;
    {
        res = ivyc_s1::ivy__ident(0, new ivyc_s1::ivy__ident::twrap<ivyc_s1::ivy__strident>(s.member));
    }
    return res;
}
ivyc_s1::cpp__expr ivyc_s1::ext__ivy__upcast(ivyc_s1::ivy__expr lhsty, ivyc_s1::ivy__expr rhs, ivy__tocppst& st){
    ivyc_s1::cpp__expr res;
    {
        {
            ivy__app self__COLON__ivy__app;
            if (((rhs).tag == 1)) self__COLON__ivy__app = ivyc_s1::ivy__expr::unwrap< ivyc_s1::ivy__app >(rhs);
            if(((rhs).tag == 1)){
                res = ext__ivy__app__to_cpp(self__COLON__ivy__app, st);
            }
            else {
                {
                    ivy__symbol self__COLON__ivy__symbol;
                    if (((rhs).tag == 0)) self__COLON__ivy__symbol = ivyc_s1::ivy__expr::unwrap< ivyc_s1::ivy__symbol >(rhs);
                    if(((rhs).tag == 0)){
                        res = ext__ivy__symbol__to_cpp(self__COLON__ivy__symbol, st);
                    }
                    else {
                        res = ext__ivy__expr__to_cpp(rhs, st);
                    }
                }
            }
        }
        {
            bool loc__0;
    loc__0 = (bool)___ivy_choose(0,"loc:0",16071);
            {
                {
                    ivy__app self__COLON__ivy__app;
                    if (((rhs).tag == 1)) self__COLON__ivy__app = ivyc_s1::ivy__expr::unwrap< ivyc_s1::ivy__app >(rhs);
                    if(((rhs).tag == 1)){
                        loc__0 = ext__ivy__app__is(self__COLON__ivy__app, ivy__verb__colon);
                    }
                    else {
                        loc__0 = ext__ivy__expr__is(rhs, ivy__verb__colon);
                    }
                }
                if((false && loc__0)){
                    {
                        ivyc_s1::ivy__expr loc__0;
                        {
                            {
                                ivy__app self__COLON__ivy__app;
                                if (((rhs).tag == 1)) self__COLON__ivy__app = ivyc_s1::ivy__expr::unwrap< ivyc_s1::ivy__app >(rhs);
                                if(((rhs).tag == 1)){
                                    loc__0 = ext__ivy__app__get_arg(self__COLON__ivy__app, 1);
                                }
                                else {
                                    loc__0 = ext__ivy__expr__get_arg(rhs, 1);
                                }
                            }
                            {
                                ivyc_s1::ivy__expr loc__rhsty;
                                {
                                    loc__rhsty = loc__0;
                                    {
                                        bool loc__0;
    loc__0 = (bool)___ivy_choose(0,"loc:0",16068);
                                        {
                                            loc__0 = ext__ivy__subtypes__is_subtype(st.subtype_rel, loc__rhsty, lhsty);
                                            if(loc__0){
                                                {
                                                    ivyc_s1::cpp__expr loc__crhsty;
                                                    {
                                                        {
                                                            ivy__app self__COLON__ivy__app;
                                                            if (((loc__rhsty).tag == 1)) self__COLON__ivy__app = ivyc_s1::ivy__expr::unwrap< ivyc_s1::ivy__app >(loc__rhsty);
                                                            if(((loc__rhsty).tag == 1)){
                                                                loc__crhsty = ext__ivy__app__to_cpp(self__COLON__ivy__app, st);
                                                            }
                                                            else {
                                                                {
                                                                    ivy__symbol self__COLON__ivy__symbol;
                                                                    if (((loc__rhsty).tag == 0)) self__COLON__ivy__symbol = ivyc_s1::ivy__expr::unwrap< ivyc_s1::ivy__symbol >(loc__rhsty);
                                                                    if(((loc__rhsty).tag == 0)){
                                                                        loc__crhsty = ext__ivy__symbol__to_cpp(self__COLON__ivy__symbol, st);
                                                                    }
                                                                    else {
                                                                        loc__crhsty = ext__ivy__expr__to_cpp(loc__rhsty, st);
                                                                    }
                                                                }
                                                            }
                                                        }
                                                        {
                                                            ivyc_s1::annot loc__0;
                                                            ivyc_s1::cpp__expr loc__1;
                                                            ivyc_s1::annot loc__2;
                                                            {
                                                                {
                                                                    ivy__app self__COLON__ivy__app;
                                                                    if (((rhs).tag == 1)) self__COLON__ivy__app = ivyc_s1::ivy__expr::unwrap< ivyc_s1::ivy__app >(rhs);
                                                                    if(((rhs).tag == 1)){
                                                                        loc__0 = ext__ivy__app__get_ann(self__COLON__ivy__app);
                                                                    }
                                                                    else {
                                                                        {
                                                                            ivy__symbol self__COLON__ivy__symbol;
                                                                            if (((rhs).tag == 0)) self__COLON__ivy__symbol = ivyc_s1::ivy__expr::unwrap< ivyc_s1::ivy__symbol >(rhs);
                                                                            if(((rhs).tag == 0)){
                                                                                loc__0 = ext__ivy__symbol__get_ann(self__COLON__ivy__symbol);
                                                                            }
                                                                            else {
                                                                                loc__0 = ext__ivy__expr__get_ann(rhs);
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                                loc__1 = ext__cpp__app__make1(loc__crhsty, res, loc__0);
                                                                {
                                                                    ivy__app self__COLON__ivy__app;
                                                                    if (((rhs).tag == 1)) self__COLON__ivy__app = ivyc_s1::ivy__expr::unwrap< ivyc_s1::ivy__app >(rhs);
                                                                    if(((rhs).tag == 1)){
                                                                        loc__2 = ext__ivy__app__get_ann(self__COLON__ivy__app);
                                                                    }
                                                                    else {
                                                                        {
                                                                            ivy__symbol self__COLON__ivy__symbol;
                                                                            if (((rhs).tag == 0)) self__COLON__ivy__symbol = ivyc_s1::ivy__expr::unwrap< ivyc_s1::ivy__symbol >(rhs);
                                                                            if(((rhs).tag == 0)){
                                                                                loc__2 = ext__ivy__symbol__get_ann(self__COLON__ivy__symbol);
                                                                            }
                                                                            else {
                                                                                loc__2 = ext__ivy__expr__get_ann(rhs);
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                                res = ext__cpp__new__make(loc__1, loc__2);
                                                            }
                                                        }
                                                        {
                                                            ivyc_s1::cpp__expr loc__clhsty;
                                                            {
                                                                loc__clhsty = ext__ivy__fix_variant_type(lhsty, st);
                                                                {
                                                                    ivyc_s1::annot loc__0;
                                                                    {
                                                                        {
                                                                            ivy__app self__COLON__ivy__app;
                                                                            if (((rhs).tag == 1)) self__COLON__ivy__app = ivyc_s1::ivy__expr::unwrap< ivyc_s1::ivy__app >(rhs);
                                                                            if(((rhs).tag == 1)){
                                                                                loc__0 = ext__ivy__app__get_ann(self__COLON__ivy__app);
                                                                            }
                                                                            else {
                                                                                {
                                                                                    ivy__symbol self__COLON__ivy__symbol;
                                                                                    if (((rhs).tag == 0)) self__COLON__ivy__symbol = ivyc_s1::ivy__expr::unwrap< ivyc_s1::ivy__symbol >(rhs);
                                                                                    if(((rhs).tag == 0)){
                                                                                        loc__0 = ext__ivy__symbol__get_ann(self__COLON__ivy__symbol);
                                                                                    }
                                                                                    else {
                                                                                        loc__0 = ext__ivy__expr__get_ann(rhs);
                                                                                    }
                                                                                }
                                                                            }
                                                                        }
                                                                        res = ext__cpp__app__make1(loc__clhsty, res, loc__0);
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
    }
    return res;
}
bool ivyc_s1::ext__ivy__file__write(const str& fname, const str& b){
    bool ok;
    ok = (bool)___ivy_choose(0,"fml:ok",0);


    std::string fn;
    for (size_t i = 0; i < fname.size(); i++)
        fn.push_back(fname[i]);
    int fd = ::creat(fn.c_str(),0660);
    if (fd < 0) {
        ok = false;
    } else {
        std::vector<char> tmp;
        tmp.resize(b.size());
        for (size_t i = 0; i < tmp.size(); i++) {
            tmp[i] = b[i];
        }
        ssize_t bytes = ::write(fd,&tmp[0],tmp.size());
        ok = (bytes == tmp.size());
        ::close(fd);
    }
    return ok;
}
void ivyc_s1::ext__ivy__actdc__flat(const ivy__actdc& s, ivy__flatst& st){
    {
        {
            ivy__actdc loc__t;
    loc__t.kind = (ivy__action_kind)___ivy_choose(0,"loc:t",16072);
    loc__t.has_body = (bool)___ivy_choose(0,"loc:t",16072);
    loc__t.has_proto = (bool)___ivy_choose(0,"loc:t",16072);
    loc__t.proto.has_ret = (bool)___ivy_choose(0,"loc:t",16072);
    loc__t.proto.ret.is_input = (bool)___ivy_choose(0,"loc:t",16072);
    loc__t.proto.ret.inpos = (unsigned long long)___ivy_choose(0,"loc:t",16072);
    loc__t.proto.ret.is_output = (bool)___ivy_choose(0,"loc:t",16072);
    loc__t.proto.ret.outpos = (unsigned long long)___ivy_choose(0,"loc:t",16072);
    loc__t.proto.ret.is_ref = (bool)___ivy_choose(0,"loc:t",16072);
    loc__t.proto.ret.is_const = (bool)___ivy_choose(0,"loc:t",16072);
            {
                loc__t = ext__ivy__actdc__flat_int(s, st);
                loc__t.ann = s.ann;
                ext__vector__ivy__decl____append(st.decls, ivyc_s1::ivy__decl(0, new ivyc_s1::ivy__decl::twrap<ivyc_s1::ivy__actdc>(loc__t)));
            }
        }
    }
}
ivyc_s1::cpp__expr ivyc_s1::ext__cpp__empty__make(ivyc_s1::annot ann){
    ivyc_s1::cpp__expr res;
    {
        res = ext__cpp__symbol__makestr(__lit<str>("()"), ann);
    }
    return res;
}
ivyc_s1::ivy__stmt ivyc_s1::ext__ivy__asgn__flat(const ivy__asgn& s, ivy__flatst& st){
    ivyc_s1::ivy__stmt res;
    {
        {
            ivy__asgn loc__t;
            {
                loc__t = ext__ivy__asgn__flat_int(s, st);
                loc__t.ann = s.ann;
                res = ivyc_s1::ivy__stmt(0, new ivyc_s1::ivy__stmt::twrap<ivyc_s1::ivy__asgn>(loc__t));
            }
        }
    }
    return res;
}
void ivyc_s1::ext__cpp__groupdc__encode(const cpp__groupdc& s, pretty& b, int prio){
    {
        {
            unsigned long long loc__idx;
    loc__idx = (unsigned long long)___ivy_choose(0,"loc:idx",16073);
            {
                loc__idx = vector__cpp__decl____begin(s.decls);
                while((loc__idx < vector__cpp__decl____end(s.decls))){
                    {
                        ext__pretty__newline(b);
                        {
                            cpp__groupdc self__COLON__cpp__groupdc;
                            if (((vector__cpp__decl____value(s.decls,loc__idx)).tag == 7)) self__COLON__cpp__groupdc = ivyc_s1::cpp__decl::unwrap< ivyc_s1::cpp__groupdc >(vector__cpp__decl____value(s.decls,loc__idx));
                            if(((vector__cpp__decl____value(s.decls,loc__idx)).tag == 7)){
                                ext__cpp__groupdc__encode(self__COLON__cpp__groupdc, b, 0);
                            }
                            else {
                                {
                                    cpp__namespacedecl self__COLON__cpp__namespacedecl;
                                    if (((vector__cpp__decl____value(s.decls,loc__idx)).tag == 6)) self__COLON__cpp__namespacedecl = ivyc_s1::cpp__decl::unwrap< ivyc_s1::cpp__namespacedecl >(vector__cpp__decl____value(s.decls,loc__idx));
                                    if(((vector__cpp__decl____value(s.decls,loc__idx)).tag == 6)){
                                        ext__cpp__namespacedecl__encode(self__COLON__cpp__namespacedecl, b, 0);
                                    }
                                    else {
                                        {
                                            cpp__structdecl self__COLON__cpp__structdecl;
                                            if (((vector__cpp__decl____value(s.decls,loc__idx)).tag == 5)) self__COLON__cpp__structdecl = ivyc_s1::cpp__decl::unwrap< ivyc_s1::cpp__structdecl >(vector__cpp__decl____value(s.decls,loc__idx));
                                            if(((vector__cpp__decl____value(s.decls,loc__idx)).tag == 5)){
                                                ext__cpp__structdecl__encode(self__COLON__cpp__structdecl, b, 0);
                                            }
                                            else {
                                                {
                                                    cpp__funcdecl self__COLON__cpp__funcdecl;
                                                    if (((vector__cpp__decl____value(s.decls,loc__idx)).tag == 4)) self__COLON__cpp__funcdecl = ivyc_s1::cpp__decl::unwrap< ivyc_s1::cpp__funcdecl >(vector__cpp__decl____value(s.decls,loc__idx));
                                                    if(((vector__cpp__decl____value(s.decls,loc__idx)).tag == 4)){
                                                        ext__cpp__funcdecl__encode(self__COLON__cpp__funcdecl, b, 0);
                                                    }
                                                    else {
                                                        {
                                                            cpp__vardecl self__COLON__cpp__vardecl;
                                                            if (((vector__cpp__decl____value(s.decls,loc__idx)).tag == 3)) self__COLON__cpp__vardecl = ivyc_s1::cpp__decl::unwrap< ivyc_s1::cpp__vardecl >(vector__cpp__decl____value(s.decls,loc__idx));
                                                            if(((vector__cpp__decl____value(s.decls,loc__idx)).tag == 3)){
                                                                ext__cpp__vardecl__encode(self__COLON__cpp__vardecl, b, 0);
                                                            }
                                                            else {
                                                                {
                                                                    cpp__enumdecl self__COLON__cpp__enumdecl;
                                                                    if (((vector__cpp__decl____value(s.decls,loc__idx)).tag == 2)) self__COLON__cpp__enumdecl = ivyc_s1::cpp__decl::unwrap< ivyc_s1::cpp__enumdecl >(vector__cpp__decl____value(s.decls,loc__idx));
                                                                    if(((vector__cpp__decl____value(s.decls,loc__idx)).tag == 2)){
                                                                        ext__cpp__enumdecl__encode(self__COLON__cpp__enumdecl, b, 0);
                                                                    }
                                                                    else {
                                                                        {
                                                                            cpp__typedecl self__COLON__cpp__typedecl;
                                                                            if (((vector__cpp__decl____value(s.decls,loc__idx)).tag == 1)) self__COLON__cpp__typedecl = ivyc_s1::cpp__decl::unwrap< ivyc_s1::cpp__typedecl >(vector__cpp__decl____value(s.decls,loc__idx));
                                                                            if(((vector__cpp__decl____value(s.decls,loc__idx)).tag == 1)){
                                                                                ext__cpp__typedecl__encode(self__COLON__cpp__typedecl, b, 0);
                                                                            }
                                                                            else {
                                                                                {
                                                                                    cpp__header self__COLON__cpp__header;
                                                                                    if (((vector__cpp__decl____value(s.decls,loc__idx)).tag == 0)) self__COLON__cpp__header = ivyc_s1::cpp__decl::unwrap< ivyc_s1::cpp__header >(vector__cpp__decl____value(s.decls,loc__idx));
                                                                                    if(((vector__cpp__decl____value(s.decls,loc__idx)).tag == 0)){
                                                                                        ext__cpp__header__encode(self__COLON__cpp__header, b, 0);
                                                                                    }
                                                                                    else {
                                                                                        ext__cpp__decl__encode(vector__cpp__decl____value(s.decls,loc__idx), b, 0);
                                                                                    }
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                        loc__idx = ext__vector__cpp__decl____domain__next(loc__idx);
                    }
                }
            }
        }
    }
}
ivyc_s1::vector__ivy__expr__ ivyc_s1::ext__ivy__times__unfold_left(ivyc_s1::ivy__expr s){
    ivyc_s1::vector__ivy__expr__ args;
    {
        {
            ivyc_s1::ivy__expr loc__e;
            {
                loc__e = s;
                {
                    bool loc__0;
    loc__0 = (bool)___ivy_choose(0,"loc:0",16076);
                    {
                        {
                            ivy__app self__COLON__ivy__app;
                            if (((loc__e).tag == 1)) self__COLON__ivy__app = ivyc_s1::ivy__expr::unwrap< ivyc_s1::ivy__app >(loc__e);
                            if(((loc__e).tag == 1)){
                                loc__0 = ext__ivy__app__is_typed(self__COLON__ivy__app, ivy__verb__times);
                            }
                            else {
                                loc__0 = ext__ivy__expr__is_typed(loc__e, ivy__verb__times);
                            }
                        }
                        {
                            bool loc__b;
    loc__b = (bool)___ivy_choose(0,"loc:b",16075);
                            {
                                loc__b = loc__0;
                                while(loc__b){
                                    {
                                        {
                                            ivyc_s1::ivy__expr loc__0;
                                            {
                                                {
                                                    ivy__app self__COLON__ivy__app;
                                                    if (((loc__e).tag == 1)) self__COLON__ivy__app = ivyc_s1::ivy__expr::unwrap< ivyc_s1::ivy__app >(loc__e);
                                                    if(((loc__e).tag == 1)){
                                                        loc__0 = ext__ivy__app__get_arg(self__COLON__ivy__app, 1);
                                                    }
                                                    else {
                                                        loc__0 = ext__ivy__expr__get_arg(loc__e, 1);
                                                    }
                                                }
                                                ext__vector__ivy__expr____append(args, loc__0);
                                            }
                                        }
                                        {
                                            ivy__app self__COLON__ivy__app;
                                            if (((loc__e).tag == 1)) self__COLON__ivy__app = ivyc_s1::ivy__expr::unwrap< ivyc_s1::ivy__app >(loc__e);
                                            if(((loc__e).tag == 1)){
                                                loc__e = ext__ivy__app__get_arg(self__COLON__ivy__app, 0);
                                            }
                                            else {
                                                loc__e = ext__ivy__expr__get_arg(loc__e, 0);
                                            }
                                        }
                                        {
                                            ivy__app self__COLON__ivy__app;
                                            if (((loc__e).tag == 1)) self__COLON__ivy__app = ivyc_s1::ivy__expr::unwrap< ivyc_s1::ivy__app >(loc__e);
                                            if(((loc__e).tag == 1)){
                                                loc__b = ext__ivy__app__is_typed(self__COLON__ivy__app, ivy__verb__times);
                                            }
                                            else {
                                                loc__b = ext__ivy__expr__is_typed(loc__e, ivy__verb__times);
                                            }
                                        }
                                    }
                                }
                                ext__vector__ivy__expr____append(args, loc__e);
                                ext__vector__ivy__expr____reverse(args);
                            }
                        }
                    }
                }
            }
        }
    }
    return args;
}
void ivyc_s1::ext__ivy__decost__unification_failed(ivy__decost& st, ivyc_s1::ivy__expr x, ivyc_s1::ivy__expr y){
    {
        st.ok = false;
        ext__vector__ivy__expr____append(st.failed, x);
        ext__vector__ivy__expr____append(st.failed, y);
        {
            str loc__0;
            {
                loc__0 = ext__ivy__expr__enc(x);
                ext__ivy__decost__typeinf_show_str(loc__0);
            }
        }
        {
            str loc__0;
            {
                loc__0 = ext__ivy__expr__enc(y);
                ext__ivy__decost__typeinf_show_str(loc__0);
            }
        }
    }
}
ivyc_s1::ivy__ident ivyc_s1::ext__ivy__formal_ident(ivyc_s1::ivy__expr s){
    ivyc_s1::ivy__ident res;
    {
        bool loc__0;
    loc__0 = (bool)___ivy_choose(0,"loc:0",16080);
        ivyc_s1::ivy__expr loc__1;
        ivyc_s1::ivy__ident loc__2;
        ivyc_s1::ivy__ident loc__3;
        {
            {
                ivy__app self__COLON__ivy__app;
                if (((s).tag == 1)) self__COLON__ivy__app = ivyc_s1::ivy__expr::unwrap< ivyc_s1::ivy__app >(s);
                if(((s).tag == 1)){
                    loc__0 = ext__ivy__app__is(self__COLON__ivy__app, ivy__verb__colon);
                }
                else {
                    loc__0 = ext__ivy__expr__is(s, ivy__verb__colon);
                }
            }
            {
                ivy__app self__COLON__ivy__app;
                if (((s).tag == 1)) self__COLON__ivy__app = ivyc_s1::ivy__expr::unwrap< ivyc_s1::ivy__app >(s);
                if(((s).tag == 1)){
                    loc__1 = ext__ivy__app__get_arg(self__COLON__ivy__app, 0);
                }
                else {
                    loc__1 = ext__ivy__expr__get_arg(s, 0);
                }
            }
            {
                ivy__symbol self__COLON__ivy__symbol;
                if (((loc__1).tag == 0)) self__COLON__ivy__symbol = ivyc_s1::ivy__expr::unwrap< ivyc_s1::ivy__symbol >(loc__1);
                if(((loc__1).tag == 0)){
                    loc__2 = ext__ivy__symbol__get_name(self__COLON__ivy__symbol);
                }
                else {
                    loc__2 = ext__ivy__expr__get_name(loc__1);
                }
            }
            {
                ivy__symbol self__COLON__ivy__symbol;
                if (((s).tag == 0)) self__COLON__ivy__symbol = ivyc_s1::ivy__expr::unwrap< ivyc_s1::ivy__symbol >(s);
                if(((s).tag == 0)){
                    loc__3 = ext__ivy__symbol__get_name(self__COLON__ivy__symbol);
                }
                else {
                    loc__3 = ext__ivy__expr__get_name(s);
                }
            }
            res = (loc__0 ? loc__2 : loc__3);
        }
    }
    return res;
}
void ivyc_s1::ext__vector__pretty__token____append(vector__pretty__token__& a, const pretty__token& v){
    {

        a.push_back(v);
    }
}
void ivyc_s1::ext__ivy__add_is_zero_pred(cpp__structdecl& s){
    {
        {
            cpp__funcdecl loc__iszero;
    loc__iszero.ftype.base.is_const = (bool)___ivy_choose(0,"loc:iszero",16093);
    loc__iszero.ftype.base.is_ref = (bool)___ivy_choose(0,"loc:iszero",16093);
    loc__iszero.ftype.is_const = (bool)___ivy_choose(0,"loc:iszero",16093);
    loc__iszero.ftype.has_initializer = (bool)___ivy_choose(0,"loc:iszero",16093);
    loc__iszero.has_body = (bool)___ivy_choose(0,"loc:iszero",16093);
    loc__iszero.is_static = (bool)___ivy_choose(0,"loc:iszero",16093);
    loc__iszero.is_virtual = (bool)___ivy_choose(0,"loc:iszero",16093);
            {
                loc__iszero.ftype.base._type = ext__cpp__symbol__makestr(__lit<str>("bool"), s.ann);
                loc__iszero.ftype.base.name = ext__cpp__symbol__makestr(__lit<str>("__is_zero"), s.ann);
                loc__iszero.ftype.is_const = true;
                loc__iszero.has_body = true;
                {
                    vector__cpp__expr__ loc__iszeros;
                    {
                        {
                            unsigned long long loc__idx;
    loc__idx = (unsigned long long)___ivy_choose(0,"loc:idx",16091);
                            {
                                loc__idx = vector__cpp__decl____begin(s.members);
                                while((loc__idx < vector__cpp__decl____end(s.members))){
                                    {
                                        ivyc_s1::cpp__decl loc__d;
                                        {
                                            loc__d = vector__cpp__decl____value(s.members,loc__idx);
                                            if(((loc__d).tag == 3)){
                                                {
                                                    {
                                                        ivyc_s1::cpp__expr loc__0;
                                                        {
                                                            {
                                                                cpp__vardecl self__COLON__cpp__vardecl;
                                                                if (((loc__d).tag == 3)) self__COLON__cpp__vardecl = ivyc_s1::cpp__decl::unwrap< ivyc_s1::cpp__vardecl >(loc__d);
                                                                if(((loc__d).tag == 3)){
                                                                    loc__0 = ext__cpp__vardecl__get_name(self__COLON__cpp__vardecl);
                                                                }
                                                                else {
                                                                    loc__0 = ext__cpp__decl__get_name(loc__d);
                                                                }
                                                            }
                                                            {
                                                                ivyc_s1::cpp__expr loc__f0;
                                                                {
                                                                    loc__f0 = loc__0;
                                                                    {
                                                                        ivyc_s1::cpp__expr loc__0;
                                                                        ivyc_s1::cpp__expr loc__1;
                                                                        {
                                                                            {
                                                                                cpp__vardecl self__COLON__cpp__vardecl;
                                                                                if (((loc__d).tag == 3)) self__COLON__cpp__vardecl = ivyc_s1::cpp__decl::unwrap< ivyc_s1::cpp__vardecl >(loc__d);
                                                                                if(((loc__d).tag == 3)){
                                                                                    loc__0 = ext__cpp__vardecl__get_name(self__COLON__cpp__vardecl);
                                                                                }
                                                                                else {
                                                                                    loc__0 = ext__cpp__decl__get_name(loc__d);
                                                                                }
                                                                            }
                                                                            loc__1 = ext__cpp__dot__make(loc__0, loc__iszero.ftype.base.name, s.ann);
                                                                            {
                                                                                ivyc_s1::cpp__expr loc__f1;
                                                                                {
                                                                                    loc__f1 = loc__1;
                                                                                    {
                                                                                        vector__cpp__expr__ loc__f2;
                                                                                        {
                                                                                            {
                                                                                                ivyc_s1::cpp__expr loc__0;
                                                                                                {
                                                                                                    loc__0 = ext__cpp__app__make(loc__f1, loc__f2, s.ann);
                                                                                                    {
                                                                                                        ivyc_s1::cpp__expr loc__e;
                                                                                                        {
                                                                                                            loc__e = loc__0;
                                                                                                            ext__vector__cpp__expr____append(loc__iszeros, loc__e);
                                                                                                        }
                                                                                                    }
                                                                                                }
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                            loc__idx = ext__vector__cpp__decl____domain__next(loc__idx);
                                        }
                                    }
                                }
                                {
                                    ivyc_s1::cpp__expr loc__0;
                                    {
                                        loc__0 = ext__cpp__symbol__makestr(__lit<str>("true"), s.ann);
                                        {
                                            ivyc_s1::cpp__expr loc__iszeroret;
                                            {
                                                loc__iszeroret = loc__0;
                                                if((0 < vector__cpp__expr____end(loc__iszeros))){
                                                    {
                                                        loc__iszeroret = ext__cpp__and__fold_left(loc__iszeros, s.ann);
                                                    }
                                                }
                                                loc__iszero.body = ext__cpp__retst__make(loc__iszeroret, s.ann);
                                                ext__vector__cpp__decl____append(s.members, ivyc_s1::cpp__decl(4, new ivyc_s1::cpp__decl::twrap<ivyc_s1::cpp__funcdecl>(loc__iszero)));
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
    }
}
ivyc_s1::cpp__expr ivyc_s1::ext__cpp__voidtype(ivyc_s1::annot ann){
    ivyc_s1::cpp__expr res;
    {
        {
            ivyc_s1::cpp__ident loc__0;
            {
                loc__0 = ext__cpp__strident__make(__lit<str>("void"));
                res = ext__cpp__namedtype(loc__0, ann);
            }
        }
    }
    return res;
}
ivyc_s1::ivy__actdc ivyc_s1::ext__ivy__actdc__flat_int(const ivy__actdc& s, ivy__flatst& st){
    ivyc_s1::ivy__actdc res;
    res.kind = (ivy__action_kind)___ivy_choose(0,"fml:res",0);
    res.has_body = (bool)___ivy_choose(0,"fml:res",0);
    res.has_proto = (bool)___ivy_choose(0,"fml:res",0);
    res.proto.has_ret = (bool)___ivy_choose(0,"fml:res",0);
    res.proto.ret.is_input = (bool)___ivy_choose(0,"fml:res",0);
    res.proto.ret.inpos = (unsigned long long)___ivy_choose(0,"fml:res",0);
    res.proto.ret.is_output = (bool)___ivy_choose(0,"fml:res",0);
    res.proto.ret.outpos = (unsigned long long)___ivy_choose(0,"fml:res",0);
    res.proto.ret.is_ref = (bool)___ivy_choose(0,"fml:res",0);
    res.proto.ret.is_const = (bool)___ivy_choose(0,"fml:res",0);
    {
        if((s.kind == ivy__action_kind__external)){
            {
                st.absolute = true;
            }
        }
        {
            ivy__app self__COLON__ivy__app;
            if (((s.name).tag == 1)) self__COLON__ivy__app = ivyc_s1::ivy__expr::unwrap< ivyc_s1::ivy__app >(s.name);
            if(((s.name).tag == 1)){
                res.name = ext__ivy__app__flat(self__COLON__ivy__app, st);
            }
            else {
                {
                    ivy__symbol self__COLON__ivy__symbol;
                    if (((s.name).tag == 0)) self__COLON__ivy__symbol = ivyc_s1::ivy__expr::unwrap< ivyc_s1::ivy__symbol >(s.name);
                    if(((s.name).tag == 0)){
                        res.name = ext__ivy__symbol__flat(self__COLON__ivy__symbol, st);
                    }
                    else {
                        res.name = ext__ivy__expr__flat(s.name, st);
                    }
                }
            }
        }
        st.absolute = false;
        res.kind = s.kind;
        vector__ivy__expr__ __tmp34;
        __tmp34 = s.inputs; ext__ivy__flat_formalvec(__tmp34, st);
        res.inputs = __tmp34;
        vector__ivy__expr__ __tmp35;
        __tmp35 = s.outputs; ext__ivy__flat_formalvec(__tmp35, st);
        res.outputs = __tmp35;
        ext__ivy__local_vec(res.inputs, true, st);
        ext__ivy__local_vec(res.outputs, true, st);
        res.has_body = s.has_body;
        {
            ivy__varst self__COLON__ivy__varst;
            if (((s.body).tag == 6)) self__COLON__ivy__varst = ivyc_s1::ivy__stmt::unwrap< ivyc_s1::ivy__varst >(s.body);
            if(((s.body).tag == 6)){
                res.body = ext__ivy__varst__flat(self__COLON__ivy__varst, st);
            }
            else {
                {
                    ivy__whilest self__COLON__ivy__whilest;
                    if (((s.body).tag == 4)) self__COLON__ivy__whilest = ivyc_s1::ivy__stmt::unwrap< ivyc_s1::ivy__whilest >(s.body);
                    if(((s.body).tag == 4)){
                        res.body = ext__ivy__whilest__flat(self__COLON__ivy__whilest, st);
                    }
                    else {
                        {
                            ivy__ifst self__COLON__ivy__ifst;
                            if (((s.body).tag == 3)) self__COLON__ivy__ifst = ivyc_s1::ivy__stmt::unwrap< ivyc_s1::ivy__ifst >(s.body);
                            if(((s.body).tag == 3)){
                                res.body = ext__ivy__ifst__flat(self__COLON__ivy__ifst, st);
                            }
                            else {
                                {
                                    ivy__sequence self__COLON__ivy__sequence;
                                    if (((s.body).tag == 1)) self__COLON__ivy__sequence = ivyc_s1::ivy__stmt::unwrap< ivyc_s1::ivy__sequence >(s.body);
                                    if(((s.body).tag == 1)){
                                        res.body = ext__ivy__sequence__flat(self__COLON__ivy__sequence, st);
                                    }
                                    else {
                                        {
                                            ivy__asgn self__COLON__ivy__asgn;
                                            if (((s.body).tag == 0)) self__COLON__ivy__asgn = ivyc_s1::ivy__stmt::unwrap< ivyc_s1::ivy__asgn >(s.body);
                                            if(((s.body).tag == 0)){
                                                res.body = ext__ivy__asgn__flat(self__COLON__ivy__asgn, st);
                                            }
                                            else {
                                                res.body = ext__ivy__stmt__flat(s.body, st);
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
        ext__ivy__local_vec(res.inputs, false, st);
        ext__ivy__local_vec(res.outputs, false, st);
    }
    return res;
}
void ivyc_s1::ext__ivy__decl__build_global_types(ivyc_s1::ivy__decl s, ivy__global_types& st){
    {
    }
}
unsigned long long ivyc_s1::ext__vector__cpp__stmt____domain__prev(unsigned long long x){
    unsigned long long y;
    y = (unsigned long long)___ivy_choose(0,"fml:y",0);
    {
        unsigned long long __tmp36;
        __tmp36 = x;
        unsigned long long __tmp37;
        __tmp37 = 1;
        y = ( __tmp36 < __tmp37 ? 0 : __tmp36 - __tmp37);
    }
    return y;
}
void ivyc_s1::ext__ivy__fix_variant_arg(ivyc_s1::ivy__expr s, ivyc_s1::cpp__expr& rhs, const ivy__tocppst& st){
    {
        bool loc__0;
    loc__0 = (bool)___ivy_choose(0,"loc:0",16105);
        bool loc__1;
    loc__1 = (bool)___ivy_choose(0,"loc:1",16105);
        {
            {
                ivy__app self__COLON__ivy__app;
                if (((s).tag == 1)) self__COLON__ivy__app = ivyc_s1::ivy__expr::unwrap< ivyc_s1::ivy__app >(s);
                if(((s).tag == 1)){
                    loc__0 = ext__ivy__app__is_typed(self__COLON__ivy__app, ivy__verb__castv);
                }
                else {
                    loc__0 = ext__ivy__expr__is_typed(s, ivy__verb__castv);
                }
            }
            loc__1 = ext__ivy__is_cpp_this(rhs);
            if((!loc__0 && loc__1)){
                {
                    ivyc_s1::ivy__expr loc__0;
                    {
                        {
                            ivy__app self__COLON__ivy__app;
                            if (((s).tag == 1)) self__COLON__ivy__app = ivyc_s1::ivy__expr::unwrap< ivyc_s1::ivy__app >(s);
                            if(((s).tag == 1)){
                                loc__0 = ext__ivy__app__get_type(self__COLON__ivy__app);
                            }
                            else {
                                loc__0 = ext__ivy__expr__get_type(s);
                            }
                        }
                        {
                            ivyc_s1::ivy__expr loc__ty;
                            {
                                loc__ty = loc__0;
                                {
                                    bool loc__0;
    loc__0 = (bool)___ivy_choose(0,"loc:0",16102);
                                    {
                                        loc__0 = ext__ivy__is_variant_type(loc__ty, st);
                                        if(loc__0){
                                            {
                                                {
                                                    ivyc_s1::annot loc__0;
                                                    {
                                                        {
                                                            cpp__app self__COLON__cpp__app;
                                                            if (((rhs).tag == 1)) self__COLON__cpp__app = ivyc_s1::cpp__expr::unwrap< ivyc_s1::cpp__app >(rhs);
                                                            if(((rhs).tag == 1)){
                                                                loc__0 = ext__cpp__app__get_ann(self__COLON__cpp__app);
                                                            }
                                                            else {
                                                                {
                                                                    cpp__symbol self__COLON__cpp__symbol;
                                                                    if (((rhs).tag == 0)) self__COLON__cpp__symbol = ivyc_s1::cpp__expr::unwrap< ivyc_s1::cpp__symbol >(rhs);
                                                                    if(((rhs).tag == 0)){
                                                                        loc__0 = ext__cpp__symbol__get_ann(self__COLON__cpp__symbol);
                                                                    }
                                                                    else {
                                                                        loc__0 = ext__cpp__expr__get_ann(rhs);
                                                                    }
                                                                }
                                                            }
                                                        }
                                                        {
                                                            ivyc_s1::annot loc__ann;
                                                            {
                                                                loc__ann = loc__0;
                                                                {
                                                                    ivyc_s1::cpp__expr loc__0;
                                                                    ivyc_s1::cpp__expr loc__1;
                                                                    {
                                                                        loc__0 = ext__cpp__symbol__makestr(__lit<str>("__upcast"), loc__ann);
                                                                        loc__1 = ext__cpp__app__make0(loc__0, loc__ann);
                                                                        rhs = ext__cpp__dot__make(rhs, loc__1, loc__ann);
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
    }
}
void ivyc_s1::ext__ivy__add_def(ivyc_s1::ivy__expr s, ivy__flatst& st, bool is_global){
    {
        st.defining = true;
        {
            ivyc_s1::ivy__expr loc__e;
            {
                {
                    ivy__app self__COLON__ivy__app;
                    if (((s).tag == 1)) self__COLON__ivy__app = ivyc_s1::ivy__expr::unwrap< ivyc_s1::ivy__app >(s);
                    if(((s).tag == 1)){
                        loc__e = ext__ivy__app__flat(self__COLON__ivy__app, st);
                    }
                    else {
                        {
                            ivy__symbol self__COLON__ivy__symbol;
                            if (((s).tag == 0)) self__COLON__ivy__symbol = ivyc_s1::ivy__expr::unwrap< ivyc_s1::ivy__symbol >(s);
                            if(((s).tag == 0)){
                                loc__e = ext__ivy__symbol__flat(self__COLON__ivy__symbol, st);
                            }
                            else {
                                loc__e = ext__ivy__expr__flat(s, st);
                            }
                        }
                    }
                }
                {
                    ivyc_s1::ivy__ident loc__0;
                    {
                        {
                            ivy__symbol self__COLON__ivy__symbol;
                            if (((loc__e).tag == 0)) self__COLON__ivy__symbol = ivyc_s1::ivy__expr::unwrap< ivyc_s1::ivy__symbol >(loc__e);
                            if(((loc__e).tag == 0)){
                                loc__0 = ext__ivy__symbol__get_name(self__COLON__ivy__symbol);
                            }
                            else {
                                loc__0 = ext__ivy__expr__get_name(loc__e);
                            }
                        }
                        {
                            ivyc_s1::ivy__ident loc__id;
                            {
                                loc__id = loc__0;
                                st.defining = false;
                                ext__ivy__ident_set__set(st.defs, loc__id, true);
                                if(is_global){
                                    {
                                        ext__ivy__ident_set__set(st.globals, loc__id, true);
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
    }
}
ivyc_s1::vector__ivy__stmt__ ivyc_s1::ext__ivy__desugar_asgn(ivyc_s1::ivy__stmt& s){
    ivyc_s1::vector__ivy__stmt__ varsts;
    {
        ivyc_s1::ivy__expr loc__0;
        {
            {
                ivy__asgn self__COLON__ivy__asgn;
                if (((s).tag == 0)) self__COLON__ivy__asgn = ivyc_s1::ivy__stmt::unwrap< ivyc_s1::ivy__asgn >(s);
                if(((s).tag == 0)){
                    loc__0 = ext__ivy__asgn__get_lhs(self__COLON__ivy__asgn);
                }
                else {
                    loc__0 = ext__ivy__stmt__get_lhs(s);
                }
            }
            {
                ivyc_s1::ivy__expr loc__tlhs;
                {
                    loc__tlhs = loc__0;
                    {
                        vector__ivy__expr__ loc__0;
                        {
                            loc__0 = ext__ivy__comma__unfold_left(loc__tlhs);
                            {
                                vector__ivy__expr__ loc__lhs;
                                {
                                    loc__lhs = loc__0;
                                    {
                                        unsigned long long loc__idx;
    loc__idx = (unsigned long long)___ivy_choose(0,"loc:idx",16118);
                                        {
                                            loc__idx = vector__ivy__expr____begin(loc__lhs);
                                            {
                                                vector__ivy__expr__ loc__es;
                                                {
                                                    while((loc__idx < vector__ivy__expr____end(loc__lhs))){
                                                        {
                                                            ivyc_s1::ivy__expr loc__e;
                                                            {
                                                                loc__e = vector__ivy__expr____value(loc__lhs,loc__idx);
                                                                if(((loc__e).tag == 1)){
                                                                    {
                                                                        ivyc_s1::ivy__expr loc__0;
                                                                        {
                                                                            {
                                                                                ivy__app self__COLON__ivy__app;
                                                                                if (((loc__e).tag == 1)) self__COLON__ivy__app = ivyc_s1::ivy__expr::unwrap< ivyc_s1::ivy__app >(loc__e);
                                                                                if(((loc__e).tag == 1)){
                                                                                    loc__0 = ext__ivy__app__get_func(self__COLON__ivy__app);
                                                                                }
                                                                                else {
                                                                                    loc__0 = ext__ivy__expr__get_func(loc__e);
                                                                                }
                                                                            }
                                                                            {
                                                                                ivyc_s1::ivy__expr loc__f;
                                                                                {
                                                                                    loc__f = loc__0;
                                                                                    {
                                                                                        bool loc__0;
    loc__0 = (bool)___ivy_choose(0,"loc:0",16110);
                                                                                        ivyc_s1::ivy__expr loc__1;
                                                                                        ivy__verb loc__2;
    loc__2 = (ivy__verb)___ivy_choose(0,"loc:2",16110);
                                                                                        {
                                                                                            {
                                                                                                ivy__app self__COLON__ivy__app;
                                                                                                if (((loc__f).tag == 1)) self__COLON__ivy__app = ivyc_s1::ivy__expr::unwrap< ivyc_s1::ivy__app >(loc__f);
                                                                                                if(((loc__f).tag == 1)){
                                                                                                    loc__0 = ext__ivy__app__is(self__COLON__ivy__app, ivy__verb__colon);
                                                                                                }
                                                                                                else {
                                                                                                    loc__0 = ext__ivy__expr__is(loc__f, ivy__verb__colon);
                                                                                                }
                                                                                            }
                                                                                            {
                                                                                                ivy__app self__COLON__ivy__app;
                                                                                                if (((loc__f).tag == 1)) self__COLON__ivy__app = ivyc_s1::ivy__expr::unwrap< ivyc_s1::ivy__app >(loc__f);
                                                                                                if(((loc__f).tag == 1)){
                                                                                                    loc__1 = ext__ivy__app__get_arg(self__COLON__ivy__app, 0);
                                                                                                }
                                                                                                else {
                                                                                                    loc__1 = ext__ivy__expr__get_arg(loc__f, 0);
                                                                                                }
                                                                                            }
                                                                                            {
                                                                                                ivy__symbol self__COLON__ivy__symbol;
                                                                                                if (((loc__1).tag == 0)) self__COLON__ivy__symbol = ivyc_s1::ivy__expr::unwrap< ivyc_s1::ivy__symbol >(loc__1);
                                                                                                if(((loc__1).tag == 0)){
                                                                                                    loc__2 = ext__ivy__symbol__get_verb(self__COLON__ivy__symbol);
                                                                                                }
                                                                                                else {
                                                                                                    loc__2 = ext__ivy__expr__get_verb(loc__1);
                                                                                                }
                                                                                            }
                                                                                            if((loc__0 && (loc__2 == ivy__verb__varv))){
                                                                                                {
                                                                                                    {
                                                                                                        ivy__varst loc__vst;
                                                                                                        {
                                                                                                            {
                                                                                                                ivy__app self__COLON__ivy__app;
                                                                                                                if (((loc__e).tag == 1)) self__COLON__ivy__app = ivyc_s1::ivy__expr::unwrap< ivyc_s1::ivy__app >(loc__e);
                                                                                                                if(((loc__e).tag == 1)){
                                                                                                                    loc__vst.ann = ext__ivy__app__get_ann(self__COLON__ivy__app);
                                                                                                                }
                                                                                                                else {
                                                                                                                    {
                                                                                                                        ivy__symbol self__COLON__ivy__symbol;
                                                                                                                        if (((loc__e).tag == 0)) self__COLON__ivy__symbol = ivyc_s1::ivy__expr::unwrap< ivyc_s1::ivy__symbol >(loc__e);
                                                                                                                        if(((loc__e).tag == 0)){
                                                                                                                            loc__vst.ann = ext__ivy__symbol__get_ann(self__COLON__ivy__symbol);
                                                                                                                        }
                                                                                                                        else {
                                                                                                                            loc__vst.ann = ext__ivy__expr__get_ann(loc__e);
                                                                                                                        }
                                                                                                                    }
                                                                                                                }
                                                                                                            }
                                                                                                            {
                                                                                                                ivy__app self__COLON__ivy__app;
                                                                                                                if (((loc__e).tag == 1)) self__COLON__ivy__app = ivyc_s1::ivy__expr::unwrap< ivyc_s1::ivy__app >(loc__e);
                                                                                                                if(((loc__e).tag == 1)){
                                                                                                                    loc__vst.name = ext__ivy__app__get_arg(self__COLON__ivy__app, 0);
                                                                                                                }
                                                                                                                else {
                                                                                                                    loc__vst.name = ext__ivy__expr__get_arg(loc__e, 0);
                                                                                                                }
                                                                                                            }
                                                                                                            ext__vector__ivy__stmt____append(varsts, ivyc_s1::ivy__stmt(6, new ivyc_s1::ivy__stmt::twrap<ivyc_s1::ivy__varst>(loc__vst)));
                                                                                                            ext__vector__ivy__expr____append(loc__es, loc__vst.name);
                                                                                                        }
                                                                                                    }
                                                                                                }
                                                                                            }
                                                                                            else {
                                                                                                {
                                                                                                    ext__vector__ivy__expr____append(loc__es, loc__e);
                                                                                                }
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                                else {
                                                                    {
                                                                        ext__vector__ivy__expr____append(loc__es, loc__e);
                                                                    }
                                                                }
                                                                loc__idx = ext__vector__ivy__expr____domain__next(loc__idx);
                                                            }
                                                        }
                                                    }
                                                    if((0 < vector__ivy__stmt____end(varsts))){
                                                        {
                                                            {
                                                                ivyc_s1::ivy__expr loc__0;
                                                                ivyc_s1::annot loc__1;
                                                                ivyc_s1::ivy__expr loc__2;
                                                                {
                                                                    {
                                                                        ivy__asgn self__COLON__ivy__asgn;
                                                                        if (((s).tag == 0)) self__COLON__ivy__asgn = ivyc_s1::ivy__stmt::unwrap< ivyc_s1::ivy__asgn >(s);
                                                                        if(((s).tag == 0)){
                                                                            loc__0 = ext__ivy__asgn__get_lhs(self__COLON__ivy__asgn);
                                                                        }
                                                                        else {
                                                                            loc__0 = ext__ivy__stmt__get_lhs(s);
                                                                        }
                                                                    }
                                                                    {
                                                                        ivy__app self__COLON__ivy__app;
                                                                        if (((loc__0).tag == 1)) self__COLON__ivy__app = ivyc_s1::ivy__expr::unwrap< ivyc_s1::ivy__app >(loc__0);
                                                                        if(((loc__0).tag == 1)){
                                                                            loc__1 = ext__ivy__app__get_ann(self__COLON__ivy__app);
                                                                        }
                                                                        else {
                                                                            {
                                                                                ivy__symbol self__COLON__ivy__symbol;
                                                                                if (((loc__0).tag == 0)) self__COLON__ivy__symbol = ivyc_s1::ivy__expr::unwrap< ivyc_s1::ivy__symbol >(loc__0);
                                                                                if(((loc__0).tag == 0)){
                                                                                    loc__1 = ext__ivy__symbol__get_ann(self__COLON__ivy__symbol);
                                                                                }
                                                                                else {
                                                                                    loc__1 = ext__ivy__expr__get_ann(loc__0);
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                    loc__2 = ext__ivy__comma__fold_left(loc__es, loc__1);
                                                                    {
                                                                        ivyc_s1::ivy__expr loc__things;
                                                                        {
                                                                            loc__things = loc__2;
                                                                            {
                                                                                ivyc_s1::ivy__expr loc__0;
                                                                                ivyc_s1::annot loc__1;
                                                                                {
                                                                                    {
                                                                                        ivy__asgn self__COLON__ivy__asgn;
                                                                                        if (((s).tag == 0)) self__COLON__ivy__asgn = ivyc_s1::ivy__stmt::unwrap< ivyc_s1::ivy__asgn >(s);
                                                                                        if(((s).tag == 0)){
                                                                                            loc__0 = ext__ivy__asgn__get_rhs(self__COLON__ivy__asgn);
                                                                                        }
                                                                                        else {
                                                                                            loc__0 = ext__ivy__stmt__get_rhs(s);
                                                                                        }
                                                                                    }
                                                                                    {
                                                                                        ivy__breakst self__COLON__ivy__breakst;
                                                                                        if (((s).tag == 5)) self__COLON__ivy__breakst = ivyc_s1::ivy__stmt::unwrap< ivyc_s1::ivy__breakst >(s);
                                                                                        if(((s).tag == 5)){
                                                                                            loc__1 = ext__ivy__breakst__get_ann(self__COLON__ivy__breakst);
                                                                                        }
                                                                                        else {
                                                                                            {
                                                                                                ivy__whilest self__COLON__ivy__whilest;
                                                                                                if (((s).tag == 4)) self__COLON__ivy__whilest = ivyc_s1::ivy__stmt::unwrap< ivyc_s1::ivy__whilest >(s);
                                                                                                if(((s).tag == 4)){
                                                                                                    loc__1 = ext__ivy__whilest__get_ann(self__COLON__ivy__whilest);
                                                                                                }
                                                                                                else {
                                                                                                    {
                                                                                                        ivy__ifst self__COLON__ivy__ifst;
                                                                                                        if (((s).tag == 3)) self__COLON__ivy__ifst = ivyc_s1::ivy__stmt::unwrap< ivyc_s1::ivy__ifst >(s);
                                                                                                        if(((s).tag == 3)){
                                                                                                            loc__1 = ext__ivy__ifst__get_ann(self__COLON__ivy__ifst);
                                                                                                        }
                                                                                                        else {
                                                                                                            {
                                                                                                                ivy__skipst self__COLON__ivy__skipst;
                                                                                                                if (((s).tag == 2)) self__COLON__ivy__skipst = ivyc_s1::ivy__stmt::unwrap< ivyc_s1::ivy__skipst >(s);
                                                                                                                if(((s).tag == 2)){
                                                                                                                    loc__1 = ext__ivy__skipst__get_ann(self__COLON__ivy__skipst);
                                                                                                                }
                                                                                                                else {
                                                                                                                    {
                                                                                                                        ivy__sequence self__COLON__ivy__sequence;
                                                                                                                        if (((s).tag == 1)) self__COLON__ivy__sequence = ivyc_s1::ivy__stmt::unwrap< ivyc_s1::ivy__sequence >(s);
                                                                                                                        if(((s).tag == 1)){
                                                                                                                            loc__1 = ext__ivy__sequence__get_ann(self__COLON__ivy__sequence);
                                                                                                                        }
                                                                                                                        else {
                                                                                                                            {
                                                                                                                                ivy__asgn self__COLON__ivy__asgn;
                                                                                                                                if (((s).tag == 0)) self__COLON__ivy__asgn = ivyc_s1::ivy__stmt::unwrap< ivyc_s1::ivy__asgn >(s);
                                                                                                                                if(((s).tag == 0)){
                                                                                                                                    loc__1 = ext__ivy__asgn__get_ann(self__COLON__ivy__asgn);
                                                                                                                                }
                                                                                                                                else {
                                                                                                                                    loc__1 = ext__ivy__stmt__get_ann(s);
                                                                                                                                }
                                                                                                                            }
                                                                                                                        }
                                                                                                                    }
                                                                                                                }
                                                                                                            }
                                                                                                        }
                                                                                                    }
                                                                                                }
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                    s = ext__ivy__asgn__make(loc__things, loc__0, loc__1);
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
    }
    return varsts;
}
void ivyc_s1::ext__vector__ivy__ident____set(vector__ivy__ident__& a, unsigned long long x, ivyc_s1::ivy__ident y){
    {

        if (0 <= x && x < (unsigned long long)a.size())
            a[x] = y;
    }
}
ivyc_s1::ivy__expr ivyc_s1::ext__ivy__expr__flat(ivyc_s1::ivy__expr s, ivy__flatst& st){
    ivyc_s1::ivy__expr res;
    {
    }
    return res;
}
void ivyc_s1::ext__ivy__wrong_number_params__encode(const ivy__wrong_number_params& e, pretty& b){
    {
        ext__pretty__extend(b, __lit<str>("Wrong number of parameters given."));
        ext__pretty__newline(b);
    }
}
void ivyc_s1::ext__cpp__whilest__encode(const cpp__whilest& s, pretty& b, int prio){
    {
        {
            annot_i self__COLON__annot_i;
            if (((s.ann).tag == 0)) self__COLON__annot_i = ivyc_s1::annot::unwrap< ivyc_s1::annot_i >(s.ann);
            if(((s.ann).tag == 0)){
                ext__annot_i__encode(self__COLON__annot_i, b);
            }
            else {
                ext__annot__encode(s.ann, b);
            }
        }
        if((1 < prio)){
            {
                ext__pretty__nest(b);
                ext__pretty__extend(b, __lit<str>("{"));
                ext__pretty__newline(b);
            }
        }
        ext__cpp__whilest__encode_int(s, b, prio);
        if((1 < prio)){
            {
                ext__pretty__unnest(b);
                ext__pretty__newline(b);
                ext__pretty__extend(b, __lit<str>("}"));
            }
        }
    }
}
ivyc_s1::annot ivyc_s1::ext__cpp__structdecl__get_ann(const cpp__structdecl& d){
    ivyc_s1::annot res;
    res = d.ann;
    return res;
}
void ivyc_s1::ext__vector__cpp__expr____append(vector__cpp__expr__& a, ivyc_s1::cpp__expr v){
    {

        a.push_back(v);
    }
}
void ivyc_s1::ext__ivy__decl__build_subtypes(ivyc_s1::ivy__decl s, ivy__subtypes& st){
    {
    }
}
void ivyc_s1::ext__vector__ivy__lvalue_count____append(vector__ivy__lvalue_count__& a, const ivy__lvalue_count& v){
    {

        a.push_back(v);
    }
}
ivyc_s1::vector__ivy__decl__ ivyc_s1::ext__vector__ivy__decl____empty(){
    ivyc_s1::vector__ivy__decl__ a;
    {
        
    }
    return a;
}
ivyc_s1::annot ivyc_s1::ext__cpp__expr__get_ann(ivyc_s1::cpp__expr s){
    ivyc_s1::annot res;
    {
    }
    return res;
}
ivyc_s1::cpp__funcdecl ivyc_s1::ext__ivy__make_cpp_cons(const cpp__structdecl& t){
    ivyc_s1::cpp__funcdecl s;
    s.ftype.base.is_const = (bool)___ivy_choose(0,"fml:s",0);
    s.ftype.base.is_ref = (bool)___ivy_choose(0,"fml:s",0);
    s.ftype.is_const = (bool)___ivy_choose(0,"fml:s",0);
    s.ftype.has_initializer = (bool)___ivy_choose(0,"fml:s",0);
    s.has_body = (bool)___ivy_choose(0,"fml:s",0);
    s.is_static = (bool)___ivy_choose(0,"fml:s",0);
    s.is_virtual = (bool)___ivy_choose(0,"fml:s",0);
    {
        s.ftype.base.name = t.name;
        s.has_body = true;
        s.body = ext__cpp__skipst__make(t.ann);
    }
    return s;
}
ivyc_s1::cpp__stmt ivyc_s1::ext__ivy__varst__to_cpp(const ivy__varst& s, ivy__tocppst& st){
    ivyc_s1::cpp__stmt res;
    {
        cpp__varst loc__t;
    loc__t.vtype.is_const = (bool)___ivy_choose(0,"loc:t",16125);
    loc__t.vtype.is_ref = (bool)___ivy_choose(0,"loc:t",16125);
        {
            loc__t = ext__ivy__varst__to_cpp_int(s, st);
            loc__t.ann = s.ann;
            res = ivyc_s1::cpp__stmt(6, new ivyc_s1::cpp__stmt::twrap<ivyc_s1::cpp__varst>(loc__t));
        }
    }
    return res;
}
unsigned long long ivyc_s1::ext__pos__from_str(const str& x){
    unsigned long long res;
    res = (unsigned long long)___ivy_choose(0,"fml:res",0);
    {
        unsigned long long loc__idx;
    loc__idx = (unsigned long long)___ivy_choose(0,"loc:idx",16128);
        {
            loc__idx = str__begin(x);
            {
                bool loc__neg;
    loc__neg = (bool)___ivy_choose(0,"loc:neg",16127);
                {
                    loc__neg = false;
                    if(((loc__idx < str__end(x)) && (str__value(x,loc__idx) == 45))){
                        {
                            loc__neg = true;
                            loc__idx = ext__pos__next(loc__idx);
                        }
                    }
                    while((loc__idx < str__end(x))){
                        {
                            res = (res * 10);
                            {
                                int loc__digit;
    loc__digit = (int)___ivy_choose(0,"loc:digit",16126);
                                {
                                    loc__digit = str__value(x,loc__idx);
                                    while((48 < loc__digit)){
                                        {
                                            loc__digit = (loc__digit - 1);
                                            res = (res + 1);
                                        }
                                    }
                                    loc__idx = ext__pos__next(loc__idx);
                                }
                            }
                        }
                    }
                }
            }
        }
    }
    return res;
}
void ivyc_s1::ext__ivy__push_pop_ident_set__vec_t__append(ivy__push_pop_ident_set__vec_t& a, ivyc_s1::ivy__ident v){
    {

        a.push_back(v);
    }
}
void ivyc_s1::ext__vector__cpp__expr____set(vector__cpp__expr__& a, unsigned long long x, ivyc_s1::cpp__expr y){
    {

        if (0 <= x && x < (unsigned long long)a.size())
            a[x] = y;
    }
}
ivyc_s1::annot ivyc_s1::ext__ivy__ifst__get_ann(const ivy__ifst& s){
    ivyc_s1::annot res;
    res = s.ann;
    return res;
}
ivyc_s1::cpp__stmt ivyc_s1::ext__cpp__skipst__make(ivyc_s1::annot ann){
    ivyc_s1::cpp__stmt res;
    {
        {
            cpp__skipst loc__s;
            {
                loc__s.ann = ann;
                res = ivyc_s1::cpp__stmt(2, new ivyc_s1::cpp__stmt::twrap<ivyc_s1::cpp__skipst>(loc__s));
            }
        }
    }
    return res;
}
void ivyc_s1::ext__lex(pstate& st){
    {
        ext__get_annot(st);
        {
            unsigned long long loc__start;
    loc__start = (unsigned long long)___ivy_choose(0,"loc:start",16131);
            {
                loc__start = st.p;
                if(((st.p < str__end(st.b)) && (str__value(st.b,st.p) == 34))){
                    {
                        ext__read_string_literal(st);
                    }
                }
                else {
                    {
                        {
                            int loc__last;
    loc__last = (int)___ivy_choose(0,"loc:last",16130);
                            {
                                loc__last = 32;
                                while(((st.p < str__end(st.b)) && !char__is_white(str__value(st.b,st.p)) && ((loc__last == 32) || (char__kind(str__value(st.b,st.p)) == char__kind(loc__last))) && !(char__kind(loc__last) == char__bracket))){
                                    {
                                        loc__last = str__value(st.b,st.p);
                                        if(char__non_printing(loc__last)){
                                            {
                                                st.ok = false;
                                            }
                                        }
                                        st.p = ext__pos__next(st.p);
                                    }
                                }
                                st.tok = str__segment(st.b,loc__start,st.p);
                            }
                        }
                    }
                }
            }
        }
    }
}
void ivyc_s1::ext__vector__ivy__type_context__stack_entry____pop_back(vector__ivy__type_context__stack_entry__& a){
    {

        if (a.size() > 0) {
            a.pop_back();
        }
    }
}
ivyc_s1::ivy__param_map ivyc_s1::ext__ivy__param_set(const vector__ivy__expr__& ps){
    ivyc_s1::ivy__param_map res;
    {
        unsigned long long loc__idx;
    loc__idx = (unsigned long long)___ivy_choose(0,"loc:idx",16133);
        {
            loc__idx = vector__ivy__expr____begin(ps);
            while((loc__idx < vector__ivy__expr____end(ps))){
                {
                    {
                        ivyc_s1::ivy__expr loc__0;
                        ivyc_s1::ivy__ident loc__1;
                        {
                            {
                                ivy__app self__COLON__ivy__app;
                                if (((vector__ivy__expr____value(ps,loc__idx)).tag == 1)) self__COLON__ivy__app = ivyc_s1::ivy__expr::unwrap< ivyc_s1::ivy__app >(vector__ivy__expr____value(ps,loc__idx));
                                if(((vector__ivy__expr____value(ps,loc__idx)).tag == 1)){
                                    loc__0 = ext__ivy__app__get_arg(self__COLON__ivy__app, 0);
                                }
                                else {
                                    loc__0 = ext__ivy__expr__get_arg(vector__ivy__expr____value(ps,loc__idx), 0);
                                }
                            }
                            {
                                ivy__symbol self__COLON__ivy__symbol;
                                if (((loc__0).tag == 0)) self__COLON__ivy__symbol = ivyc_s1::ivy__expr::unwrap< ivyc_s1::ivy__symbol >(loc__0);
                                if(((loc__0).tag == 0)){
                                    loc__1 = ext__ivy__symbol__get_name(self__COLON__ivy__symbol);
                                }
                                else {
                                    loc__1 = ext__ivy__expr__get_name(loc__0);
                                }
                            }
                            ext__ivy__param_map__set(res, loc__1, loc__idx);
                        }
                    }
                    loc__idx = ext__vector__ivy__expr____domain__next(loc__idx);
                }
            }
        }
    }
    return res;
}
void ivyc_s1::ext__cpp__symbol__encode(const cpp__symbol& s, pretty& b, int prio){
    {
        {
            annot_i self__COLON__annot_i;
            if (((s.ann).tag == 0)) self__COLON__annot_i = ivyc_s1::annot::unwrap< ivyc_s1::annot_i >(s.ann);
            if(((s.ann).tag == 0)){
                ext__annot_i__encode(self__COLON__annot_i, b);
            }
            else {
                ext__annot__encode(s.ann, b);
            }
        }
        {
            cpp__dotident self__COLON__cpp__dotident;
            if (((s.name).tag == 2)) self__COLON__cpp__dotident = ivyc_s1::cpp__ident::unwrap< ivyc_s1::cpp__dotident >(s.name);
            if(((s.name).tag == 2)){
                ext__cpp__dotident__encode(self__COLON__cpp__dotident, b, 0);
            }
            else {
                {
                    cpp__numident self__COLON__cpp__numident;
                    if (((s.name).tag == 1)) self__COLON__cpp__numident = ivyc_s1::cpp__ident::unwrap< ivyc_s1::cpp__numident >(s.name);
                    if(((s.name).tag == 1)){
                        ext__cpp__numident__encode(self__COLON__cpp__numident, b, 0);
                    }
                    else {
                        {
                            cpp__strident self__COLON__cpp__strident;
                            if (((s.name).tag == 0)) self__COLON__cpp__strident = ivyc_s1::cpp__ident::unwrap< ivyc_s1::cpp__strident >(s.name);
                            if(((s.name).tag == 0)){
                                ext__cpp__strident__encode(self__COLON__cpp__strident, b, 0);
                            }
                            else {
                                ext__cpp__ident__encode(s.name, b, 0);
                            }
                        }
                    }
                }
            }
        }
    }
}
ivyc_s1::str ivyc_s1::ext__ivy__testelide(const str& inp){
    ivyc_s1::str res;
    {
        {
            ivyc_s1::ivy__expr loc__0;
            {
                loc__0 = ext__ivy__expr__dec(inp);
                {
                    ivyc_s1::ivy__expr loc__e;
                    {
                        loc__e = loc__0;
                        {
                            ivyc_s1::ivy__expr loc__ty;
                            {
                                {
                                    ivy__symeval loc__m;
                                    {
                                        {
                                            ivyc_s1::ivy__ident loc__0;
                                            ivyc_s1::ivy__expr loc__1;
                                            {
                                                loc__0 = ext__ivy__strident__make(__lit<str>("foo"));
                                                loc__1 = ext__ivy__expr__dec(__lit<str>("t"));
                                                ext__ivy__symeval__set(loc__m, loc__0, loc__1);
                                            }
                                        }
                                        {
                                            ivy__elidest loc__st;
                                            {
                                                {
                                                    ivy__app self__COLON__ivy__app;
                                                    if (((loc__e).tag == 1)) self__COLON__ivy__app = ivyc_s1::ivy__expr::unwrap< ivyc_s1::ivy__app >(loc__e);
                                                    if(((loc__e).tag == 1)){
                                                        loc__e = ext__ivy__app__type_elide_int(self__COLON__ivy__app, false, loc__m, loc__st);
                                                    }
                                                    else {
                                                        {
                                                            ivy__symbol self__COLON__ivy__symbol;
                                                            if (((loc__e).tag == 0)) self__COLON__ivy__symbol = ivyc_s1::ivy__expr::unwrap< ivyc_s1::ivy__symbol >(loc__e);
                                                            if(((loc__e).tag == 0)){
                                                                loc__e = ext__ivy__symbol__type_elide_int(self__COLON__ivy__symbol, false, loc__m, loc__st);
                                                            }
                                                            else {
                                                                loc__e = ext__ivy__expr__type_elide_int(loc__e, false, loc__m, loc__st);
                                                            }
                                                        }
                                                    }
                                                }
                                                res = ext__ivy__expr__enc(loc__e);
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
    }
    return res;
}
ivyc_s1::ivy__global_types ivyc_s1::ext__ivy__prog__get_global_types(const ivy__prog& p, bool curried){
    ivyc_s1::ivy__global_types s;
    s.curried = (bool)___ivy_choose(0,"fml:s",0);
    {
        s.curried = curried;
        {
            unsigned long long loc__idx;
    loc__idx = (unsigned long long)___ivy_choose(0,"loc:idx",16140);
            {
                loc__idx = vector__ivy__decl____begin(p.decls);
                while((loc__idx < vector__ivy__decl____end(p.decls))){
                    {
                        {
                            ivy__vardc self__COLON__ivy__vardc;
                            if (((vector__ivy__decl____value(p.decls,loc__idx)).tag == 3)) self__COLON__ivy__vardc = ivyc_s1::ivy__decl::unwrap< ivyc_s1::ivy__vardc >(vector__ivy__decl____value(p.decls,loc__idx));
                            if(((vector__ivy__decl____value(p.decls,loc__idx)).tag == 3)){
                                ext__ivy__vardc__build_global_types(self__COLON__ivy__vardc, s);
                            }
                            else {
                                {
                                    ivy__typedc self__COLON__ivy__typedc;
                                    if (((vector__ivy__decl____value(p.decls,loc__idx)).tag == 2)) self__COLON__ivy__typedc = ivyc_s1::ivy__decl::unwrap< ivyc_s1::ivy__typedc >(vector__ivy__decl____value(p.decls,loc__idx));
                                    if(((vector__ivy__decl____value(p.decls,loc__idx)).tag == 2)){
                                        ext__ivy__typedc__build_global_types(self__COLON__ivy__typedc, s);
                                    }
                                    else {
                                        {
                                            ivy__actdc self__COLON__ivy__actdc;
                                            if (((vector__ivy__decl____value(p.decls,loc__idx)).tag == 0)) self__COLON__ivy__actdc = ivyc_s1::ivy__decl::unwrap< ivyc_s1::ivy__actdc >(vector__ivy__decl____value(p.decls,loc__idx));
                                            if(((vector__ivy__decl____value(p.decls,loc__idx)).tag == 0)){
                                                ext__ivy__actdc__build_global_types(self__COLON__ivy__actdc, s);
                                            }
                                            else {
                                                ext__ivy__decl__build_global_types(vector__ivy__decl____value(p.decls,loc__idx), s);
                                            }
                                        }
                                    }
                                }
                            }
                        }
                        loc__idx = ext__vector__ivy__decl____domain__next(loc__idx);
                    }
                }
            }
        }
    }
    return s;
}
void ivyc_s1::ext__ivy__push_pop_ident_set__map_t__set(ivy__push_pop_ident_set__map_t& a, ivyc_s1::ivy__ident x, bool y){
    {

        a[x] = y;
    }
}
void ivyc_s1::ext__ivy__decost__find(ivy__decost& st, ivyc_s1::ivy__expr x, ivyc_s1::ivy__expr& res){
    {
        res = x;
        if(((x).tag == 0)){
            {
                ivyc_s1::ivy__ident loc__0;
                {
                    {
                        ivy__symbol self__COLON__ivy__symbol;
                        if (((x).tag == 0)) self__COLON__ivy__symbol = ivyc_s1::ivy__expr::unwrap< ivyc_s1::ivy__symbol >(x);
                        if(((x).tag == 0)){
                            loc__0 = ext__ivy__symbol__get_name(self__COLON__ivy__symbol);
                        }
                        else {
                            loc__0 = ext__ivy__expr__get_name(x);
                        }
                    }
                    {
                        ivyc_s1::ivy__ident loc__nx;
                        {
                            loc__nx = loc__0;
                            ext__ivy__decost__map__get(st.m, loc__nx, res);
                            if(!(res == x)){
                                {
                                    ext__ivy__decost__find(st, res, res);
                                    ext__ivy__decost__map__set(st.m, loc__nx, res);
                                }
                            }
                        }
                    }
                }
            }
        }
    }
}
ivyc_s1::cpp__expr ivyc_s1::ext__cpp__app__make0(ivyc_s1::cpp__expr func, ivyc_s1::annot ann){
    ivyc_s1::cpp__expr res;
    {
        cpp__app loc__s;
        {
            loc__s.func = func;
            loc__s.ann = ann;
            res = ivyc_s1::cpp__expr(1, new ivyc_s1::cpp__expr::twrap<ivyc_s1::cpp__app>(loc__s));
        }
    }
    return res;
}
ivyc_s1::cpp__expr ivyc_s1::ext__cpp__app__make1(ivyc_s1::cpp__expr func, ivyc_s1::cpp__expr arg0, ivyc_s1::annot ann){
    ivyc_s1::cpp__expr res;
    {
        cpp__app loc__s;
        {
            loc__s.func = func;
            ext__vector__cpp__expr____append(loc__s.args, arg0);
            loc__s.ann = ann;
            res = ivyc_s1::cpp__expr(1, new ivyc_s1::cpp__expr::twrap<ivyc_s1::cpp__app>(loc__s));
        }
    }
    return res;
}
void ivyc_s1::ext__vector__cpp__stmt____append(vector__cpp__stmt__& a, ivyc_s1::cpp__stmt v){
    {

        a.push_back(v);
    }
}
ivyc_s1::vector__cpp__stmt__ ivyc_s1::ext__vector__cpp__stmt____empty(){
    ivyc_s1::vector__cpp__stmt__ a;
    {
        
    }
    return a;
}
void ivyc_s1::ext__ivy__ident_to_declvec__set(ivy__ident_to_declvec& a, ivyc_s1::ivy__ident x, const vector__ivy__decl__& y){
    {

        a[x] = y;
    }
}
bool ivyc_s1::ext__ivy__actdc__emitted(const ivy__actdc& s, const ivy__tocppst& st){
    bool res;
    res = (bool)___ivy_choose(0,"fml:res",0);
    {
        {
            bool loc__0;
    loc__0 = (bool)___ivy_choose(0,"loc:0",16145);
            {
                loc__0 = ext__ivy__actdc__is_member(s);
                res = ((!loc__0 || !st.proto_only) && !(s.kind == ivy__action_kind__external));
            }
        }
    }
    return res;
}
void ivyc_s1::ext__ivy__type_infer_known(ivyc_s1::ivy__expr& e, ivyc_s1::ivy__expr ty, const ivy__symeval& tc){
    {
        {
            ivy__decost loc__0;
    loc__0.counter = (unsigned long long)___ivy_choose(0,"loc:0",16148);
    loc__0.member = (bool)___ivy_choose(0,"loc:0",16148);
    loc__0.ok = (bool)___ivy_choose(0,"loc:0",16148);
    loc__0.error_reported = (bool)___ivy_choose(0,"loc:0",16148);
            {
                loc__0 = ext__ivy__decost__make();
                {
                    ivy__decost loc__st;
    loc__st.counter = (unsigned long long)___ivy_choose(0,"loc:st",16147);
    loc__st.member = (bool)___ivy_choose(0,"loc:st",16147);
    loc__st.ok = (bool)___ivy_choose(0,"loc:st",16147);
    loc__st.error_reported = (bool)___ivy_choose(0,"loc:st",16147);
                    {
                        loc__st = loc__0;
                        {
                            ivyc_s1::ivy__expr loc__ty2;
                            {
                                {
                                    ivy__app self__COLON__ivy__app;
                                    if (((e).tag == 1)) self__COLON__ivy__app = ivyc_s1::ivy__expr::unwrap< ivyc_s1::ivy__app >(e);
                                    if(((e).tag == 1)){
                                        e = ext__ivy__app__type_decorate(self__COLON__ivy__app, loc__st, tc, loc__ty2);
                                    }
                                    else {
                                        {
                                            ivy__symbol self__COLON__ivy__symbol;
                                            if (((e).tag == 0)) self__COLON__ivy__symbol = ivyc_s1::ivy__expr::unwrap< ivyc_s1::ivy__symbol >(e);
                                            if(((e).tag == 0)){
                                                e = ext__ivy__symbol__type_decorate(self__COLON__ivy__symbol, loc__st, tc, loc__ty2);
                                            }
                                            else {
                                                e = ext__ivy__expr__type_decorate(e, loc__st, tc, loc__ty2);
                                            }
                                        }
                                    }
                                }
                                ext__ivy__decost__unify(loc__st, ty, loc__ty2);
                                if(!loc__st.ok){
                                    ext__ivy__type_error(e, loc__st);
                                }
                                {
                                    ivy__app self__COLON__ivy__app;
                                    if (((e).tag == 1)) self__COLON__ivy__app = ivyc_s1::ivy__expr::unwrap< ivyc_s1::ivy__app >(e);
                                    if(((e).tag == 1)){
                                        e = ext__ivy__app__type_fill_in(self__COLON__ivy__app, loc__st);
                                    }
                                    else {
                                        {
                                            ivy__symbol self__COLON__ivy__symbol;
                                            if (((e).tag == 0)) self__COLON__ivy__symbol = ivyc_s1::ivy__expr::unwrap< ivyc_s1::ivy__symbol >(e);
                                            if(((e).tag == 0)){
                                                e = ext__ivy__symbol__type_fill_in(self__COLON__ivy__symbol, loc__st);
                                            }
                                            else {
                                                e = ext__ivy__expr__type_fill_in(e, loc__st);
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
    }
}
void ivyc_s1::ext__ivy__numident__encode(const ivy__numident& s, pretty& b, int prio){
    {
        ext__pretty__extend(b, __lit<str>("["));
        {
            str loc__0;
            {
                loc__0 = ext__pos__to_str(s.val);
                ext__pretty__extend(b, loc__0);
            }
        }
        ext__pretty__extend(b, __lit<str>("]"));
    }
}
void ivyc_s1::ext__ivy__symeval__remove(ivy__symeval& a, ivyc_s1::ivy__ident x){
    {

        a.erase(x);
    }
}
ivyc_s1::ivy__subtypes ivyc_s1::ext__ivy__prog__get_subtypes(const ivy__prog& p){
    ivyc_s1::ivy__subtypes s;
    {
        unsigned long long loc__idx;
    loc__idx = (unsigned long long)___ivy_choose(0,"loc:idx",16150);
        {
            loc__idx = vector__ivy__decl____begin(p.decls);
            while((loc__idx < vector__ivy__decl____end(p.decls))){
                {
                    {
                        ivy__typedc self__COLON__ivy__typedc;
                        if (((vector__ivy__decl____value(p.decls,loc__idx)).tag == 2)) self__COLON__ivy__typedc = ivyc_s1::ivy__decl::unwrap< ivyc_s1::ivy__typedc >(vector__ivy__decl____value(p.decls,loc__idx));
                        if(((vector__ivy__decl____value(p.decls,loc__idx)).tag == 2)){
                            ext__ivy__typedc__build_subtypes(self__COLON__ivy__typedc, s);
                        }
                        else {
                            ext__ivy__decl__build_subtypes(vector__ivy__decl____value(p.decls,loc__idx), s);
                        }
                    }
                    loc__idx = ext__vector__ivy__decl____domain__next(loc__idx);
                }
            }
        }
    }
    return s;
}
void ivyc_s1::ext__ivy__groupdc__flat(const ivy__groupdc& s, ivy__flatst& st){
    {
        {
            unsigned long long loc__idx;
    loc__idx = (unsigned long long)___ivy_choose(0,"loc:idx",16151);
            {
                loc__idx = vector__ivy__decl____begin(s.decls);
                while((loc__idx < vector__ivy__decl____end(s.decls))){
                    {
                        {
                            ivy__initdc self__COLON__ivy__initdc;
                            if (((vector__ivy__decl____value(s.decls,loc__idx)).tag == 11)) self__COLON__ivy__initdc = ivyc_s1::ivy__decl::unwrap< ivyc_s1::ivy__initdc >(vector__ivy__decl____value(s.decls,loc__idx));
                            if(((vector__ivy__decl____value(s.decls,loc__idx)).tag == 11)){
                                ext__ivy__initdc__flat(self__COLON__ivy__initdc, st);
                            }
                            else {
                                {
                                    ivy__instancedc self__COLON__ivy__instancedc;
                                    if (((vector__ivy__decl____value(s.decls,loc__idx)).tag == 10)) self__COLON__ivy__instancedc = ivyc_s1::ivy__decl::unwrap< ivyc_s1::ivy__instancedc >(vector__ivy__decl____value(s.decls,loc__idx));
                                    if(((vector__ivy__decl____value(s.decls,loc__idx)).tag == 10)){
                                        ext__ivy__instancedc__flat(self__COLON__ivy__instancedc, st);
                                    }
                                    else {
                                        {
                                            ivy__objectdc self__COLON__ivy__objectdc;
                                            if (((vector__ivy__decl____value(s.decls,loc__idx)).tag == 9)) self__COLON__ivy__objectdc = ivyc_s1::ivy__decl::unwrap< ivyc_s1::ivy__objectdc >(vector__ivy__decl____value(s.decls,loc__idx));
                                            if(((vector__ivy__decl____value(s.decls,loc__idx)).tag == 9)){
                                                ext__ivy__objectdc__flat(self__COLON__ivy__objectdc, st);
                                            }
                                            else {
                                                {
                                                    ivy__instantiatedc self__COLON__ivy__instantiatedc;
                                                    if (((vector__ivy__decl____value(s.decls,loc__idx)).tag == 8)) self__COLON__ivy__instantiatedc = ivyc_s1::ivy__decl::unwrap< ivyc_s1::ivy__instantiatedc >(vector__ivy__decl____value(s.decls,loc__idx));
                                                    if(((vector__ivy__decl____value(s.decls,loc__idx)).tag == 8)){
                                                        ext__ivy__instantiatedc__flat(self__COLON__ivy__instantiatedc, st);
                                                    }
                                                    else {
                                                        {
                                                            ivy__interpdc self__COLON__ivy__interpdc;
                                                            if (((vector__ivy__decl____value(s.decls,loc__idx)).tag == 5)) self__COLON__ivy__interpdc = ivyc_s1::ivy__decl::unwrap< ivyc_s1::ivy__interpdc >(vector__ivy__decl____value(s.decls,loc__idx));
                                                            if(((vector__ivy__decl____value(s.decls,loc__idx)).tag == 5)){
                                                                ext__ivy__interpdc__flat(self__COLON__ivy__interpdc, st);
                                                            }
                                                            else {
                                                                {
                                                                    ivy__header self__COLON__ivy__header;
                                                                    if (((vector__ivy__decl____value(s.decls,loc__idx)).tag == 4)) self__COLON__ivy__header = ivyc_s1::ivy__decl::unwrap< ivyc_s1::ivy__header >(vector__ivy__decl____value(s.decls,loc__idx));
                                                                    if(((vector__ivy__decl____value(s.decls,loc__idx)).tag == 4)){
                                                                        ext__ivy__header__flat(self__COLON__ivy__header, st);
                                                                    }
                                                                    else {
                                                                        {
                                                                            ivy__vardc self__COLON__ivy__vardc;
                                                                            if (((vector__ivy__decl____value(s.decls,loc__idx)).tag == 3)) self__COLON__ivy__vardc = ivyc_s1::ivy__decl::unwrap< ivyc_s1::ivy__vardc >(vector__ivy__decl____value(s.decls,loc__idx));
                                                                            if(((vector__ivy__decl____value(s.decls,loc__idx)).tag == 3)){
                                                                                ext__ivy__vardc__flat(self__COLON__ivy__vardc, st);
                                                                            }
                                                                            else {
                                                                                {
                                                                                    ivy__typedc self__COLON__ivy__typedc;
                                                                                    if (((vector__ivy__decl____value(s.decls,loc__idx)).tag == 2)) self__COLON__ivy__typedc = ivyc_s1::ivy__decl::unwrap< ivyc_s1::ivy__typedc >(vector__ivy__decl____value(s.decls,loc__idx));
                                                                                    if(((vector__ivy__decl____value(s.decls,loc__idx)).tag == 2)){
                                                                                        ext__ivy__typedc__flat(self__COLON__ivy__typedc, st);
                                                                                    }
                                                                                    else {
                                                                                        {
                                                                                            ivy__groupdc self__COLON__ivy__groupdc;
                                                                                            if (((vector__ivy__decl____value(s.decls,loc__idx)).tag == 1)) self__COLON__ivy__groupdc = ivyc_s1::ivy__decl::unwrap< ivyc_s1::ivy__groupdc >(vector__ivy__decl____value(s.decls,loc__idx));
                                                                                            if(((vector__ivy__decl____value(s.decls,loc__idx)).tag == 1)){
                                                                                                ext__ivy__groupdc__flat(self__COLON__ivy__groupdc, st);
                                                                                            }
                                                                                            else {
                                                                                                {
                                                                                                    ivy__actdc self__COLON__ivy__actdc;
                                                                                                    if (((vector__ivy__decl____value(s.decls,loc__idx)).tag == 0)) self__COLON__ivy__actdc = ivyc_s1::ivy__decl::unwrap< ivyc_s1::ivy__actdc >(vector__ivy__decl____value(s.decls,loc__idx));
                                                                                                    if(((vector__ivy__decl____value(s.decls,loc__idx)).tag == 0)){
                                                                                                        ext__ivy__actdc__flat(self__COLON__ivy__actdc, st);
                                                                                                    }
                                                                                                    else {
                                                                                                        ext__ivy__decl__flat(vector__ivy__decl____value(s.decls,loc__idx), st);
                                                                                                    }
                                                                                                }
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                        loc__idx = ext__vector__ivy__decl____domain__next(loc__idx);
                    }
                }
            }
        }
    }
}
void ivyc_s1::ext__str__append(str& a, int v){
    {

        a.push_back(v);
    }
}
ivyc_s1::ivy__ident ivyc_s1::ext__ivy__dotident__flat(const ivy__dotident& s, bool rhs, const ivy__flatst& st){
    ivyc_s1::ivy__ident res;
    {
        {
            ivyc_s1::ivy__ident loc__0;
            {
                {
                    ivy__dotident self__COLON__ivy__dotident;
                    if (((s.namesp).tag == 2)) self__COLON__ivy__dotident = ivyc_s1::ivy__ident::unwrap< ivyc_s1::ivy__dotident >(s.namesp);
                    if(((s.namesp).tag == 2)){
                        loc__0 = ext__ivy__dotident__flat(self__COLON__ivy__dotident, rhs, st);
                    }
                    else {
                        {
                            ivy__strident self__COLON__ivy__strident;
                            if (((s.namesp).tag == 0)) self__COLON__ivy__strident = ivyc_s1::ivy__ident::unwrap< ivyc_s1::ivy__strident >(s.namesp);
                            if(((s.namesp).tag == 0)){
                                loc__0 = ext__ivy__strident__flat(self__COLON__ivy__strident, rhs, st);
                            }
                            else {
                                loc__0 = ext__ivy__ident__flat(s.namesp, rhs, st);
                            }
                        }
                    }
                }
                res = ext__ivy__dotident__make(loc__0, s.member);
            }
        }
    }
    return res;
}
ivyc_s1::ivy__stmt ivyc_s1::ext__ivy__stmt__typeinfer_desugar(ivyc_s1::ivy__stmt s, bool desugar, ivy__typeinferst& st){
    ivyc_s1::ivy__stmt ress;
    {
    }
    return ress;
}
void ivyc_s1::ext__ivy__add_namespaces_rec(ivyc_s1::cpp__decl& d, ivyc_s1::ivy__ident id){
    {
        cpp__namespacedecl loc__nd;
        {
            {
                cpp__namespacedecl self__COLON__cpp__namespacedecl;
                if (((d).tag == 6)) self__COLON__cpp__namespacedecl = ivyc_s1::cpp__decl::unwrap< ivyc_s1::cpp__namespacedecl >(d);
                if(((d).tag == 6)){
                    loc__nd.ann = ext__cpp__namespacedecl__get_ann(self__COLON__cpp__namespacedecl);
                }
                else {
                    {
                        cpp__structdecl self__COLON__cpp__structdecl;
                        if (((d).tag == 5)) self__COLON__cpp__structdecl = ivyc_s1::cpp__decl::unwrap< ivyc_s1::cpp__structdecl >(d);
                        if(((d).tag == 5)){
                            loc__nd.ann = ext__cpp__structdecl__get_ann(self__COLON__cpp__structdecl);
                        }
                        else {
                            {
                                cpp__funcdecl self__COLON__cpp__funcdecl;
                                if (((d).tag == 4)) self__COLON__cpp__funcdecl = ivyc_s1::cpp__decl::unwrap< ivyc_s1::cpp__funcdecl >(d);
                                if(((d).tag == 4)){
                                    loc__nd.ann = ext__cpp__funcdecl__get_ann(self__COLON__cpp__funcdecl);
                                }
                                else {
                                    {
                                        cpp__vardecl self__COLON__cpp__vardecl;
                                        if (((d).tag == 3)) self__COLON__cpp__vardecl = ivyc_s1::cpp__decl::unwrap< ivyc_s1::cpp__vardecl >(d);
                                        if(((d).tag == 3)){
                                            loc__nd.ann = ext__cpp__vardecl__get_ann(self__COLON__cpp__vardecl);
                                        }
                                        else {
                                            {
                                                cpp__enumdecl self__COLON__cpp__enumdecl;
                                                if (((d).tag == 2)) self__COLON__cpp__enumdecl = ivyc_s1::cpp__decl::unwrap< ivyc_s1::cpp__enumdecl >(d);
                                                if(((d).tag == 2)){
                                                    loc__nd.ann = ext__cpp__enumdecl__get_ann(self__COLON__cpp__enumdecl);
                                                }
                                                else {
                                                    {
                                                        cpp__typedecl self__COLON__cpp__typedecl;
                                                        if (((d).tag == 1)) self__COLON__cpp__typedecl = ivyc_s1::cpp__decl::unwrap< ivyc_s1::cpp__typedecl >(d);
                                                        if(((d).tag == 1)){
                                                            loc__nd.ann = ext__cpp__typedecl__get_ann(self__COLON__cpp__typedecl);
                                                        }
                                                        else {
                                                            {
                                                                cpp__header self__COLON__cpp__header;
                                                                if (((d).tag == 0)) self__COLON__cpp__header = ivyc_s1::cpp__decl::unwrap< ivyc_s1::cpp__header >(d);
                                                                if(((d).tag == 0)){
                                                                    loc__nd.ann = ext__cpp__header__get_ann(self__COLON__cpp__header);
                                                                }
                                                                else {
                                                                    loc__nd.ann = ext__cpp__decl__get_ann(d);
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
            {
                ivyc_s1::ivy__ident loc__0;
                {
                    {
                        ivy__dotident self__COLON__ivy__dotident;
                        if (((id).tag == 2)) self__COLON__ivy__dotident = ivyc_s1::ivy__ident::unwrap< ivyc_s1::ivy__dotident >(id);
                        if(((id).tag == 2)){
                            loc__0 = ext__ivy__dotident__get_member(self__COLON__ivy__dotident);
                        }
                        else {
                            loc__0 = ext__ivy__ident__get_member(id);
                        }
                    }
                    {
                        ivyc_s1::ivy__ident loc__name;
                        {
                            loc__name = (((id).tag == 2) ? loc__0 : id);
                            {
                                ivyc_s1::cpp__ident loc__0;
                                ivyc_s1::annot loc__1;
                                {
                                    {
                                        ivy__dotident self__COLON__ivy__dotident;
                                        if (((loc__name).tag == 2)) self__COLON__ivy__dotident = ivyc_s1::ivy__ident::unwrap< ivyc_s1::ivy__dotident >(loc__name);
                                        if(((loc__name).tag == 2)){
                                            loc__0 = ext__ivy__dotident__to_cpp(self__COLON__ivy__dotident, false);
                                        }
                                        else {
                                            {
                                                ivy__strident self__COLON__ivy__strident;
                                                if (((loc__name).tag == 0)) self__COLON__ivy__strident = ivyc_s1::ivy__ident::unwrap< ivyc_s1::ivy__strident >(loc__name);
                                                if(((loc__name).tag == 0)){
                                                    loc__0 = ext__ivy__strident__to_cpp(self__COLON__ivy__strident, false);
                                                }
                                                else {
                                                    loc__0 = ext__ivy__ident__to_cpp(loc__name, false);
                                                }
                                            }
                                        }
                                    }
                                    {
                                        cpp__namespacedecl self__COLON__cpp__namespacedecl;
                                        if (((d).tag == 6)) self__COLON__cpp__namespacedecl = ivyc_s1::cpp__decl::unwrap< ivyc_s1::cpp__namespacedecl >(d);
                                        if(((d).tag == 6)){
                                            loc__1 = ext__cpp__namespacedecl__get_ann(self__COLON__cpp__namespacedecl);
                                        }
                                        else {
                                            {
                                                cpp__structdecl self__COLON__cpp__structdecl;
                                                if (((d).tag == 5)) self__COLON__cpp__structdecl = ivyc_s1::cpp__decl::unwrap< ivyc_s1::cpp__structdecl >(d);
                                                if(((d).tag == 5)){
                                                    loc__1 = ext__cpp__structdecl__get_ann(self__COLON__cpp__structdecl);
                                                }
                                                else {
                                                    {
                                                        cpp__funcdecl self__COLON__cpp__funcdecl;
                                                        if (((d).tag == 4)) self__COLON__cpp__funcdecl = ivyc_s1::cpp__decl::unwrap< ivyc_s1::cpp__funcdecl >(d);
                                                        if(((d).tag == 4)){
                                                            loc__1 = ext__cpp__funcdecl__get_ann(self__COLON__cpp__funcdecl);
                                                        }
                                                        else {
                                                            {
                                                                cpp__vardecl self__COLON__cpp__vardecl;
                                                                if (((d).tag == 3)) self__COLON__cpp__vardecl = ivyc_s1::cpp__decl::unwrap< ivyc_s1::cpp__vardecl >(d);
                                                                if(((d).tag == 3)){
                                                                    loc__1 = ext__cpp__vardecl__get_ann(self__COLON__cpp__vardecl);
                                                                }
                                                                else {
                                                                    {
                                                                        cpp__enumdecl self__COLON__cpp__enumdecl;
                                                                        if (((d).tag == 2)) self__COLON__cpp__enumdecl = ivyc_s1::cpp__decl::unwrap< ivyc_s1::cpp__enumdecl >(d);
                                                                        if(((d).tag == 2)){
                                                                            loc__1 = ext__cpp__enumdecl__get_ann(self__COLON__cpp__enumdecl);
                                                                        }
                                                                        else {
                                                                            {
                                                                                cpp__typedecl self__COLON__cpp__typedecl;
                                                                                if (((d).tag == 1)) self__COLON__cpp__typedecl = ivyc_s1::cpp__decl::unwrap< ivyc_s1::cpp__typedecl >(d);
                                                                                if(((d).tag == 1)){
                                                                                    loc__1 = ext__cpp__typedecl__get_ann(self__COLON__cpp__typedecl);
                                                                                }
                                                                                else {
                                                                                    {
                                                                                        cpp__header self__COLON__cpp__header;
                                                                                        if (((d).tag == 0)) self__COLON__cpp__header = ivyc_s1::cpp__decl::unwrap< ivyc_s1::cpp__header >(d);
                                                                                        if(((d).tag == 0)){
                                                                                            loc__1 = ext__cpp__header__get_ann(self__COLON__cpp__header);
                                                                                        }
                                                                                        else {
                                                                                            loc__1 = ext__cpp__decl__get_ann(d);
                                                                                        }
                                                                                    }
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                    loc__nd.name = ext__cpp__symbol__make(loc__0, loc__1);
                                }
                            }
                            ext__vector__cpp__decl____append(loc__nd.members, d);
                            d = ivyc_s1::cpp__decl(6, new ivyc_s1::cpp__decl::twrap<ivyc_s1::cpp__namespacedecl>(loc__nd));
                            if(((id).tag == 2)){
                                {
                                    {
                                        ivyc_s1::ivy__ident loc__0;
                                        {
                                            {
                                                ivy__dotident self__COLON__ivy__dotident;
                                                if (((id).tag == 2)) self__COLON__ivy__dotident = ivyc_s1::ivy__ident::unwrap< ivyc_s1::ivy__dotident >(id);
                                                if(((id).tag == 2)){
                                                    loc__0 = ext__ivy__dotident__get_namesp(self__COLON__ivy__dotident);
                                                }
                                                else {
                                                    loc__0 = ext__ivy__ident__get_namesp(id);
                                                }
                                            }
                                            ext__ivy__add_namespaces_rec(d, loc__0);
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
    }
}
void ivyc_s1::ext__ivy__interpdc__flat(const ivy__interpdc& s, ivy__flatst& st){
    {
        {
            ivy__interpdc loc__t;
            {
                loc__t = ext__ivy__interpdc__flat_int(s, st);
                loc__t.ann = s.ann;
                ext__vector__ivy__decl____append(st.decls, ivyc_s1::ivy__decl(5, new ivyc_s1::ivy__decl::twrap<ivyc_s1::ivy__interpdc>(loc__t)));
            }
        }
    }
}
bool ivyc_s1::ext__ivy__symeval__mem(const ivy__symeval& a, ivyc_s1::ivy__ident x){
    bool res;
    res = (bool)___ivy_choose(0,"fml:res",0);
    {

        ivy__symeval::const_iterator it = a.find(x);
        res = (it != a.end());
    }
    return res;
}
void ivyc_s1::ext__ivy__type_unify_exprs(ivyc_s1::ivy__expr& e1, ivyc_s1::ivy__expr& e2, const ivy__symeval& tc){
    {
        {
            ivy__decost loc__0;
    loc__0.counter = (unsigned long long)___ivy_choose(0,"loc:0",16162);
    loc__0.member = (bool)___ivy_choose(0,"loc:0",16162);
    loc__0.ok = (bool)___ivy_choose(0,"loc:0",16162);
    loc__0.error_reported = (bool)___ivy_choose(0,"loc:0",16162);
            {
                loc__0 = ext__ivy__decost__make();
                {
                    ivy__decost loc__st;
    loc__st.counter = (unsigned long long)___ivy_choose(0,"loc:st",16161);
    loc__st.member = (bool)___ivy_choose(0,"loc:st",16161);
    loc__st.ok = (bool)___ivy_choose(0,"loc:st",16161);
    loc__st.error_reported = (bool)___ivy_choose(0,"loc:st",16161);
                    {
                        loc__st = loc__0;
                        {
                            ivyc_s1::ivy__expr loc__e1ty;
                            {
                                {
                                    ivy__app self__COLON__ivy__app;
                                    if (((e1).tag == 1)) self__COLON__ivy__app = ivyc_s1::ivy__expr::unwrap< ivyc_s1::ivy__app >(e1);
                                    if(((e1).tag == 1)){
                                        e1 = ext__ivy__app__type_decorate(self__COLON__ivy__app, loc__st, tc, loc__e1ty);
                                    }
                                    else {
                                        {
                                            ivy__symbol self__COLON__ivy__symbol;
                                            if (((e1).tag == 0)) self__COLON__ivy__symbol = ivyc_s1::ivy__expr::unwrap< ivyc_s1::ivy__symbol >(e1);
                                            if(((e1).tag == 0)){
                                                e1 = ext__ivy__symbol__type_decorate(self__COLON__ivy__symbol, loc__st, tc, loc__e1ty);
                                            }
                                            else {
                                                e1 = ext__ivy__expr__type_decorate(e1, loc__st, tc, loc__e1ty);
                                            }
                                        }
                                    }
                                }
                                {
                                    ivyc_s1::ivy__expr loc__e2ty;
                                    {
                                        {
                                            ivy__app self__COLON__ivy__app;
                                            if (((e2).tag == 1)) self__COLON__ivy__app = ivyc_s1::ivy__expr::unwrap< ivyc_s1::ivy__app >(e2);
                                            if(((e2).tag == 1)){
                                                e2 = ext__ivy__app__type_decorate(self__COLON__ivy__app, loc__st, tc, loc__e2ty);
                                            }
                                            else {
                                                {
                                                    ivy__symbol self__COLON__ivy__symbol;
                                                    if (((e2).tag == 0)) self__COLON__ivy__symbol = ivyc_s1::ivy__expr::unwrap< ivyc_s1::ivy__symbol >(e2);
                                                    if(((e2).tag == 0)){
                                                        e2 = ext__ivy__symbol__type_decorate(self__COLON__ivy__symbol, loc__st, tc, loc__e2ty);
                                                    }
                                                    else {
                                                        e2 = ext__ivy__expr__type_decorate(e2, loc__st, tc, loc__e2ty);
                                                    }
                                                }
                                            }
                                        }
                                        ext__ivy__decost__unify(loc__st, loc__e1ty, loc__e2ty);
                                        if(!loc__st.ok){
                                            ext__ivy__type_error(e2, loc__st);
                                        }
                                        {
                                            ivy__app self__COLON__ivy__app;
                                            if (((e1).tag == 1)) self__COLON__ivy__app = ivyc_s1::ivy__expr::unwrap< ivyc_s1::ivy__app >(e1);
                                            if(((e1).tag == 1)){
                                                e1 = ext__ivy__app__type_fill_in(self__COLON__ivy__app, loc__st);
                                            }
                                            else {
                                                {
                                                    ivy__symbol self__COLON__ivy__symbol;
                                                    if (((e1).tag == 0)) self__COLON__ivy__symbol = ivyc_s1::ivy__expr::unwrap< ivyc_s1::ivy__symbol >(e1);
                                                    if(((e1).tag == 0)){
                                                        e1 = ext__ivy__symbol__type_fill_in(self__COLON__ivy__symbol, loc__st);
                                                    }
                                                    else {
                                                        e1 = ext__ivy__expr__type_fill_in(e1, loc__st);
                                                    }
                                                }
                                            }
                                        }
                                        {
                                            ivy__app self__COLON__ivy__app;
                                            if (((e2).tag == 1)) self__COLON__ivy__app = ivyc_s1::ivy__expr::unwrap< ivyc_s1::ivy__app >(e2);
                                            if(((e2).tag == 1)){
                                                e2 = ext__ivy__app__type_fill_in(self__COLON__ivy__app, loc__st);
                                            }
                                            else {
                                                {
                                                    ivy__symbol self__COLON__ivy__symbol;
                                                    if (((e2).tag == 0)) self__COLON__ivy__symbol = ivyc_s1::ivy__expr::unwrap< ivyc_s1::ivy__symbol >(e2);
                                                    if(((e2).tag == 0)){
                                                        e2 = ext__ivy__symbol__type_fill_in(self__COLON__ivy__symbol, loc__st);
                                                    }
                                                    else {
                                                        e2 = ext__ivy__expr__type_fill_in(e2, loc__st);
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
    }
}
ivyc_s1::ivy__expr ivyc_s1::ext__ivy__empty__make(ivyc_s1::annot ann){
    ivyc_s1::ivy__expr res;
    {
        res = ext__ivy__symbol__makestr(__lit<str>("()"), ann);
    }
    return res;
}
ivyc_s1::ivy__prog ivyc_s1::ext__ivy__prog__read_file(const str& name){
    ivyc_s1::ivy__prog p;
    {
        {
            ivyc_s1::annot loc__ann;
            {
                {
                    ivyc_s1::ivy__expr loc__0;
                    ivyc_s1::ivy__decl loc__1;
                    {
                        loc__0 = ext__ivy__symbol__makestr(__lit<str>("ivy"), loc__ann);
                        loc__1 = ext__ivy__includedc__make(loc__0, loc__ann);
                        ext__vector__ivy__decl____append(p.decls, loc__1);
                    }
                }
                {
                    ivy__prog__readst loc__rst;
                    {
                        ext__ivy__prog__read_file_int(name, loc__ann, p, loc__rst);
                    }
                }
            }
        }
    }
    return p;
}
ivyc_s1::ivy__stmt ivyc_s1::ext__ivy__ifst__flat(const ivy__ifst& s, ivy__flatst& st){
    ivyc_s1::ivy__stmt res;
    {
        {
            ivy__ifst loc__t;
            {
                loc__t = ext__ivy__ifst__flat_int(s, st);
                loc__t.ann = s.ann;
                res = ivyc_s1::ivy__stmt(3, new ivyc_s1::ivy__stmt::twrap<ivyc_s1::ivy__ifst>(loc__t));
            }
        }
    }
    return res;
}
bool ivyc_s1::ext__ivy__ident_to_exprs__mem(const ivy__ident_to_exprs& a, ivyc_s1::ivy__ident x){
    bool res;
    res = (bool)___ivy_choose(0,"fml:res",0);
    {

        ivy__ident_to_exprs::const_iterator it = a.find(x);
        res = (it != a.end());
    }
    return res;
}
void ivyc_s1::ext__ivy__type_error(ivyc_s1::ivy__expr e, ivy__decost& st){
    if(!st.error_reported){
        {
            {
                ivy__type_clash loc__0;
                ivyc_s1::annot loc__1;
                {
                    loc__0 = ext__ivy__type_clash__make(e, vector__ivy__expr____value(st.failed,0), vector__ivy__expr____value(st.failed,1));
                    {
                        ivy__app self__COLON__ivy__app;
                        if (((e).tag == 1)) self__COLON__ivy__app = ivyc_s1::ivy__expr::unwrap< ivyc_s1::ivy__app >(e);
                        if(((e).tag == 1)){
                            loc__1 = ext__ivy__app__get_ann(self__COLON__ivy__app);
                        }
                        else {
                            {
                                ivy__symbol self__COLON__ivy__symbol;
                                if (((e).tag == 0)) self__COLON__ivy__symbol = ivyc_s1::ivy__expr::unwrap< ivyc_s1::ivy__symbol >(e);
                                if(((e).tag == 0)){
                                    loc__1 = ext__ivy__symbol__get_ann(self__COLON__ivy__symbol);
                                }
                                else {
                                    loc__1 = ext__ivy__expr__get_ann(e);
                                }
                            }
                        }
                    }
                    ext__ivy__report_error(ivyc_s1::ivy__error(0, new ivyc_s1::ivy__error::twrap<ivyc_s1::ivy__type_clash>(loc__0)), loc__1);
                }
            }
            st.error_reported = true;
        }
    }
}
ivyc_s1::annot ivyc_s1::ext__ivy__expr__get_ann(ivyc_s1::ivy__expr s){
    ivyc_s1::annot res;
    {
    }
    return res;
}
ivyc_s1::cpp__expr ivyc_s1::ext__cpp__decl__get_name(ivyc_s1::cpp__decl d){
    ivyc_s1::cpp__expr res;
    {
    }
    return res;
}
ivyc_s1::ivy__asgn ivyc_s1::ext__ivy__asgn__flat_int(const ivy__asgn& s, ivy__flatst& st){
    ivyc_s1::ivy__asgn res;
    {
        res = s;
        {
            ivy__app self__COLON__ivy__app;
            if (((res.lhs).tag == 1)) self__COLON__ivy__app = ivyc_s1::ivy__expr::unwrap< ivyc_s1::ivy__app >(res.lhs);
            if(((res.lhs).tag == 1)){
                res.lhs = ext__ivy__app__flat(self__COLON__ivy__app, st);
            }
            else {
                {
                    ivy__symbol self__COLON__ivy__symbol;
                    if (((res.lhs).tag == 0)) self__COLON__ivy__symbol = ivyc_s1::ivy__expr::unwrap< ivyc_s1::ivy__symbol >(res.lhs);
                    if(((res.lhs).tag == 0)){
                        res.lhs = ext__ivy__symbol__flat(self__COLON__ivy__symbol, st);
                    }
                    else {
                        res.lhs = ext__ivy__expr__flat(res.lhs, st);
                    }
                }
            }
        }
        {
            ivy__app self__COLON__ivy__app;
            if (((res.rhs).tag == 1)) self__COLON__ivy__app = ivyc_s1::ivy__expr::unwrap< ivyc_s1::ivy__app >(res.rhs);
            if(((res.rhs).tag == 1)){
                res.rhs = ext__ivy__app__flat(self__COLON__ivy__app, st);
            }
            else {
                {
                    ivy__symbol self__COLON__ivy__symbol;
                    if (((res.rhs).tag == 0)) self__COLON__ivy__symbol = ivyc_s1::ivy__expr::unwrap< ivyc_s1::ivy__symbol >(res.rhs);
                    if(((res.rhs).tag == 0)){
                        res.rhs = ext__ivy__symbol__flat(self__COLON__ivy__symbol, st);
                    }
                    else {
                        res.rhs = ext__ivy__expr__flat(res.rhs, st);
                    }
                }
            }
        }
    }
    return res;
}
void ivyc_s1::ext__ivy__typedc__defd(const ivy__typedc& s, ivy__flatst& st){
    {
        ext__ivy__add_def(s.sort, st, false);
        if(s.has_spec){
            {
                st.defining = true;
                {
                    ivyc_s1::ivy__ident loc__0;
                    ivyc_s1::ivy__ident loc__1;
                    {
                        {
                            ivy__symbol self__COLON__ivy__symbol;
                            if (((s.sort).tag == 0)) self__COLON__ivy__symbol = ivyc_s1::ivy__expr::unwrap< ivyc_s1::ivy__symbol >(s.sort);
                            if(((s.sort).tag == 0)){
                                loc__0 = ext__ivy__symbol__get_name(self__COLON__ivy__symbol);
                            }
                            else {
                                loc__0 = ext__ivy__expr__get_name(s.sort);
                            }
                        }
                        {
                            ivy__dotident self__COLON__ivy__dotident;
                            if (((loc__0).tag == 2)) self__COLON__ivy__dotident = ivyc_s1::ivy__ident::unwrap< ivyc_s1::ivy__dotident >(loc__0);
                            if(((loc__0).tag == 2)){
                                loc__1 = ext__ivy__dotident__flat(self__COLON__ivy__dotident, false, st);
                            }
                            else {
                                {
                                    ivy__strident self__COLON__ivy__strident;
                                    if (((loc__0).tag == 0)) self__COLON__ivy__strident = ivyc_s1::ivy__ident::unwrap< ivyc_s1::ivy__strident >(loc__0);
                                    if(((loc__0).tag == 0)){
                                        loc__1 = ext__ivy__strident__flat(self__COLON__ivy__strident, false, st);
                                    }
                                    else {
                                        loc__1 = ext__ivy__ident__flat(loc__0, false, st);
                                    }
                                }
                            }
                        }
                        {
                            ivyc_s1::ivy__ident loc__id;
                            {
                                loc__id = loc__1;
                                st.defining = false;
                                {
                                    ivy__structspec self__COLON__ivy__structspec;
                                    if (((s.spec).tag == 1)) self__COLON__ivy__structspec = ivyc_s1::ivy__typespec::unwrap< ivyc_s1::ivy__structspec >(s.spec);
                                    if(((s.spec).tag == 1)){
                                        ext__ivy__structspec__defd(self__COLON__ivy__structspec, st, loc__id);
                                    }
                                    else {
                                        {
                                            ivy__enumspec self__COLON__ivy__enumspec;
                                            if (((s.spec).tag == 0)) self__COLON__ivy__enumspec = ivyc_s1::ivy__typespec::unwrap< ivyc_s1::ivy__enumspec >(s.spec);
                                            if(((s.spec).tag == 0)){
                                                ext__ivy__enumspec__defd(self__COLON__ivy__enumspec, st, loc__id);
                                            }
                                            else {
                                                ext__ivy__typespec__defd(s.spec, st, loc__id);
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
    }
}
void ivyc_s1::ext__ivy__fix_object_clash(ivyc_s1::ivy__ident& id, const ivy__tocppst& st){
    {
        bool loc__0;
    loc__0 = (bool)___ivy_choose(0,"loc:0",16171);
        {
            loc__0 = ext__ivy__ident_set__mem(st.objects, id);
            if(loc__0){
                {
                    {
                        ivy__strident loc__tok;
                        {
                            loc__tok.val = __lit<str>("__t");
                            id = ext__ivy__dotident__make(id, loc__tok);
                        }
                    }
                }
            }
        }
    }
}
void ivyc_s1::ext__pretty__unnest(pretty& self){
    {
        pretty__state loc__oldst;
    loc__oldst.begin = (unsigned long long)___ivy_choose(0,"loc:oldst",16172);
    loc__oldst.total = (unsigned long long)___ivy_choose(0,"loc:oldst",16172);
        {
            loc__oldst = self.st;
            ext__vector__pos____pop_back(self.stack);
            self.st = ext__vector__pretty__state____back(self.states);
            ext__vector__pretty__state____pop_back(self.states);
            ext__pretty__add_length(self, loc__oldst.total, loc__oldst.begin);
            self.st.total = (self.st.total + loc__oldst.total);
            unsigned long long __tmp38;
            __tmp38 = self.depth;
            unsigned long long __tmp39;
            __tmp39 = 1;
            self.depth = ( __tmp38 < __tmp39 ? 0 : __tmp38 - __tmp39);
        }
    }
}
ivyc_s1::ivy__expr ivyc_s1::ext__ivy__expr__type_fill_in(ivyc_s1::ivy__expr e, ivy__decost& st){
    ivyc_s1::ivy__expr res;
    {
    }
    return res;
}
void ivyc_s1::ext__pretty__print(pretty& self, const pretty__token& tok){
    if(tok.pair){
        if((((tok.second < self.space) || (tok.second == self.space)) || (self.space == self.maxline))){
            {
                ext__str__extend(self.output, tok.first);
                unsigned long long __tmp40;
                __tmp40 = self.space;
                unsigned long long __tmp41;
                __tmp41 = str__end(tok.first);
                self.space = ( __tmp40 < __tmp41 ? 0 : __tmp40 - __tmp41);
            }
        }
        else {
            {
                unsigned long long __tmp42;
                __tmp42 = self.maxline;
                unsigned long long __tmp43;
                __tmp43 = (tok.tdepth * self.indent);
                self.space = ( __tmp42 < __tmp43 ? 0 : __tmp42 - __tmp43);
                ext__pretty__do_indent(self);
            }
        }
    }
    else {
        {
            ext__str__extend(self.output, tok.first);
            unsigned long long __tmp44;
            __tmp44 = self.space;
            unsigned long long __tmp45;
            __tmp45 = str__end(tok.first);
            self.space = ( __tmp44 < __tmp45 ? 0 : __tmp44 - __tmp45);
        }
    }
}
ivyc_s1::cpp__expr ivyc_s1::ext__cpp__vardecl__get_type(const cpp__vardecl& d){
    ivyc_s1::cpp__expr res;
    {
        res = d.vtype._type;
    }
    return res;
}
void ivyc_s1::ext__ivy__ident__encode(ivyc_s1::ivy__ident s, pretty& b, int prio){
    {
    }
}
ivyc_s1::ivy__verb ivyc_s1::ext__ivy__ident__get_verb(ivyc_s1::ivy__ident s){
    ivyc_s1::ivy__verb vrb;
    vrb = (ivy__verb)___ivy_choose(0,"fml:vrb",0);
    vrb = ivy__verb__none;
    return vrb;
}
void ivyc_s1::ext__ivy__symeval__set(ivy__symeval& a, ivyc_s1::ivy__ident x, ivyc_s1::ivy__expr y){
    {

        a[x] = y;
    }
}
ivyc_s1::cpp__prog ivyc_s1::ext__ivy__prog__to_cpp(const ivy__prog& sp){
    ivyc_s1::cpp__prog res;
    {
        {
            ivy__prog loc__s;
            {
                loc__s = sp;
                {
                    ivy__tocppst loc__st;
    loc__st.globals.curried = (bool)___ivy_choose(0,"loc:st",16195);
    loc__st.is_member = (bool)___ivy_choose(0,"loc:st",16195);
    loc__st.in_class = (bool)___ivy_choose(0,"loc:st",16195);
    loc__st.proto_only = (bool)___ivy_choose(0,"loc:st",16195);
    loc__st.native = (bool)___ivy_choose(0,"loc:st",16195);
    loc__st.forward = (bool)___ivy_choose(0,"loc:st",16195);
    loc__st.counter = (unsigned long long)___ivy_choose(0,"loc:st",16195);
    loc__st.dot_rhs = (bool)___ivy_choose(0,"loc:st",16195);
                    {
                        loc__st.subtype_rel = ext__ivy__prog__get_subtypes(loc__s);
                        {
                            unsigned long long loc__idx;
    loc__idx = (unsigned long long)___ivy_choose(0,"loc:idx",16194);
                            {
                                loc__idx = vector__ivy__decl____begin(loc__s.decls);
                                while((loc__idx < vector__ivy__decl____end(loc__s.decls))){
                                    {
                                        ivyc_s1::ivy__decl loc__0;
                                        {
                                            {
                                                ivy__vardc self__COLON__ivy__vardc;
                                                if (((vector__ivy__decl____value(loc__s.decls,loc__idx)).tag == 3)) self__COLON__ivy__vardc = ivyc_s1::ivy__decl::unwrap< ivyc_s1::ivy__vardc >(vector__ivy__decl____value(loc__s.decls,loc__idx));
                                                if(((vector__ivy__decl____value(loc__s.decls,loc__idx)).tag == 3)){
                                                    loc__0 = ext__ivy__vardc__func_to_action(self__COLON__ivy__vardc);
                                                }
                                                else {
                                                    loc__0 = ext__ivy__decl__func_to_action(vector__ivy__decl____value(loc__s.decls,loc__idx));
                                                }
                                            }
                                            {
                                                ivyc_s1::ivy__decl loc__d;
                                                {
                                                    loc__d = loc__0;
                                                    ext__vector__ivy__decl____set(loc__s.decls, loc__idx, loc__d);
                                                    loc__idx = ext__vector__ivy__decl____domain__next(loc__idx);
                                                }
                                            }
                                        }
                                    }
                                }
                                loc__st.globals = ext__ivy__prog__get_global_types(loc__s, true);
                                loc__idx = vector__ivy__decl____begin(loc__s.decls);
                                while((loc__idx < vector__ivy__decl____end(loc__s.decls))){
                                    {
                                        {
                                            ivy__objectdc self__COLON__ivy__objectdc;
                                            if (((vector__ivy__decl____value(loc__s.decls,loc__idx)).tag == 9)) self__COLON__ivy__objectdc = ivyc_s1::ivy__decl::unwrap< ivyc_s1::ivy__objectdc >(vector__ivy__decl____value(loc__s.decls,loc__idx));
                                            if(((vector__ivy__decl____value(loc__s.decls,loc__idx)).tag == 9)){
                                                ext__ivy__objectdc__reg_member(self__COLON__ivy__objectdc, loc__st);
                                            }
                                            else {
                                                {
                                                    ivy__interpdc self__COLON__ivy__interpdc;
                                                    if (((vector__ivy__decl____value(loc__s.decls,loc__idx)).tag == 5)) self__COLON__ivy__interpdc = ivyc_s1::ivy__decl::unwrap< ivyc_s1::ivy__interpdc >(vector__ivy__decl____value(loc__s.decls,loc__idx));
                                                    if(((vector__ivy__decl____value(loc__s.decls,loc__idx)).tag == 5)){
                                                        ext__ivy__interpdc__reg_member(self__COLON__ivy__interpdc, loc__st);
                                                    }
                                                    else {
                                                        {
                                                            ivy__vardc self__COLON__ivy__vardc;
                                                            if (((vector__ivy__decl____value(loc__s.decls,loc__idx)).tag == 3)) self__COLON__ivy__vardc = ivyc_s1::ivy__decl::unwrap< ivyc_s1::ivy__vardc >(vector__ivy__decl____value(loc__s.decls,loc__idx));
                                                            if(((vector__ivy__decl____value(loc__s.decls,loc__idx)).tag == 3)){
                                                                ext__ivy__vardc__reg_member(self__COLON__ivy__vardc, loc__st);
                                                            }
                                                            else {
                                                                {
                                                                    ivy__typedc self__COLON__ivy__typedc;
                                                                    if (((vector__ivy__decl____value(loc__s.decls,loc__idx)).tag == 2)) self__COLON__ivy__typedc = ivyc_s1::ivy__decl::unwrap< ivyc_s1::ivy__typedc >(vector__ivy__decl____value(loc__s.decls,loc__idx));
                                                                    if(((vector__ivy__decl____value(loc__s.decls,loc__idx)).tag == 2)){
                                                                        ext__ivy__typedc__reg_member(self__COLON__ivy__typedc, loc__st);
                                                                    }
                                                                    else {
                                                                        {
                                                                            ivy__actdc self__COLON__ivy__actdc;
                                                                            if (((vector__ivy__decl____value(loc__s.decls,loc__idx)).tag == 0)) self__COLON__ivy__actdc = ivyc_s1::ivy__decl::unwrap< ivyc_s1::ivy__actdc >(vector__ivy__decl____value(loc__s.decls,loc__idx));
                                                                            if(((vector__ivy__decl____value(loc__s.decls,loc__idx)).tag == 0)){
                                                                                ext__ivy__actdc__reg_member(self__COLON__ivy__actdc, loc__st);
                                                                            }
                                                                            else {
                                                                                ext__ivy__decl__reg_member(vector__ivy__decl____value(loc__s.decls,loc__idx), loc__st);
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                        loc__idx = ext__vector__ivy__decl____domain__next(loc__idx);
                                    }
                                }
                                loc__st.forward = true;
                                loc__idx = vector__ivy__decl____begin(loc__s.decls);
                                while((loc__idx < vector__ivy__decl____end(loc__s.decls))){
                                    {
                                        ivyc_s1::ivy__decl loc__ivyd;
                                        {
                                            loc__ivyd = vector__ivy__decl____value(loc__s.decls,loc__idx);
                                            if(((loc__ivyd).tag == 2)){
                                                {
                                                    {
                                                        ivyc_s1::cpp__decl loc__d;
                                                        {
                                                            {
                                                                ivy__header self__COLON__ivy__header;
                                                                if (((loc__ivyd).tag == 4)) self__COLON__ivy__header = ivyc_s1::ivy__decl::unwrap< ivyc_s1::ivy__header >(loc__ivyd);
                                                                if(((loc__ivyd).tag == 4)){
                                                                    loc__d = ext__ivy__header__to_cpp(self__COLON__ivy__header, loc__st);
                                                                }
                                                                else {
                                                                    {
                                                                        ivy__vardc self__COLON__ivy__vardc;
                                                                        if (((loc__ivyd).tag == 3)) self__COLON__ivy__vardc = ivyc_s1::ivy__decl::unwrap< ivyc_s1::ivy__vardc >(loc__ivyd);
                                                                        if(((loc__ivyd).tag == 3)){
                                                                            loc__d = ext__ivy__vardc__to_cpp(self__COLON__ivy__vardc, loc__st);
                                                                        }
                                                                        else {
                                                                            {
                                                                                ivy__typedc self__COLON__ivy__typedc;
                                                                                if (((loc__ivyd).tag == 2)) self__COLON__ivy__typedc = ivyc_s1::ivy__decl::unwrap< ivyc_s1::ivy__typedc >(loc__ivyd);
                                                                                if(((loc__ivyd).tag == 2)){
                                                                                    loc__d = ext__ivy__typedc__to_cpp(self__COLON__ivy__typedc, loc__st);
                                                                                }
                                                                                else {
                                                                                    {
                                                                                        ivy__actdc self__COLON__ivy__actdc;
                                                                                        if (((loc__ivyd).tag == 0)) self__COLON__ivy__actdc = ivyc_s1::ivy__decl::unwrap< ivyc_s1::ivy__actdc >(loc__ivyd);
                                                                                        if(((loc__ivyd).tag == 0)){
                                                                                            loc__d = ext__ivy__actdc__to_cpp(self__COLON__ivy__actdc, loc__st);
                                                                                        }
                                                                                        else {
                                                                                            loc__d = ext__ivy__decl__to_cpp(loc__ivyd, loc__st);
                                                                                        }
                                                                                    }
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                            ext__vector__cpp__decl____append(res.decls, loc__d);
                                                        }
                                                    }
                                                }
                                            }
                                            loc__idx = ext__vector__ivy__decl____domain__next(loc__idx);
                                        }
                                    }
                                }
                                loc__st.forward = false;
                                loc__idx = vector__ivy__decl____begin(loc__s.decls);
                                while((loc__idx < vector__ivy__decl____end(loc__s.decls))){
                                    {
                                        {
                                            ivy__actdc self__COLON__ivy__actdc;
                                            if (((vector__ivy__decl____value(loc__s.decls,loc__idx)).tag == 0)) self__COLON__ivy__actdc = ivyc_s1::ivy__decl::unwrap< ivyc_s1::ivy__actdc >(vector__ivy__decl____value(loc__s.decls,loc__idx));
                                            if(((vector__ivy__decl____value(loc__s.decls,loc__idx)).tag == 0)){
                                                ext__ivy__actdc__record_prototypes(self__COLON__ivy__actdc, loc__st);
                                            }
                                            else {
                                                ext__ivy__decl__record_prototypes(vector__ivy__decl____value(loc__s.decls,loc__idx), loc__st);
                                            }
                                        }
                                        loc__idx = ext__vector__ivy__decl____domain__next(loc__idx);
                                    }
                                }
                                loc__st.proto_only = true;
                                loc__idx = vector__ivy__decl____begin(loc__s.decls);
                                while((loc__idx < vector__ivy__decl____end(loc__s.decls))){
                                    {
                                        {
                                            bool loc__0;
    loc__0 = (bool)___ivy_choose(0,"loc:0",16178);
                                            {
                                                {
                                                    ivy__initdc self__COLON__ivy__initdc;
                                                    if (((vector__ivy__decl____value(loc__s.decls,loc__idx)).tag == 11)) self__COLON__ivy__initdc = ivyc_s1::ivy__decl::unwrap< ivyc_s1::ivy__initdc >(vector__ivy__decl____value(loc__s.decls,loc__idx));
                                                    if(((vector__ivy__decl____value(loc__s.decls,loc__idx)).tag == 11)){
                                                        loc__0 = ext__ivy__initdc__emitted(self__COLON__ivy__initdc, loc__st);
                                                    }
                                                    else {
                                                        {
                                                            ivy__objectdc self__COLON__ivy__objectdc;
                                                            if (((vector__ivy__decl____value(loc__s.decls,loc__idx)).tag == 9)) self__COLON__ivy__objectdc = ivyc_s1::ivy__decl::unwrap< ivyc_s1::ivy__objectdc >(vector__ivy__decl____value(loc__s.decls,loc__idx));
                                                            if(((vector__ivy__decl____value(loc__s.decls,loc__idx)).tag == 9)){
                                                                loc__0 = ext__ivy__objectdc__emitted(self__COLON__ivy__objectdc, loc__st);
                                                            }
                                                            else {
                                                                {
                                                                    ivy__interpdc self__COLON__ivy__interpdc;
                                                                    if (((vector__ivy__decl____value(loc__s.decls,loc__idx)).tag == 5)) self__COLON__ivy__interpdc = ivyc_s1::ivy__decl::unwrap< ivyc_s1::ivy__interpdc >(vector__ivy__decl____value(loc__s.decls,loc__idx));
                                                                    if(((vector__ivy__decl____value(loc__s.decls,loc__idx)).tag == 5)){
                                                                        loc__0 = ext__ivy__interpdc__emitted(self__COLON__ivy__interpdc, loc__st);
                                                                    }
                                                                    else {
                                                                        {
                                                                            ivy__vardc self__COLON__ivy__vardc;
                                                                            if (((vector__ivy__decl____value(loc__s.decls,loc__idx)).tag == 3)) self__COLON__ivy__vardc = ivyc_s1::ivy__decl::unwrap< ivyc_s1::ivy__vardc >(vector__ivy__decl____value(loc__s.decls,loc__idx));
                                                                            if(((vector__ivy__decl____value(loc__s.decls,loc__idx)).tag == 3)){
                                                                                loc__0 = ext__ivy__vardc__emitted(self__COLON__ivy__vardc, loc__st);
                                                                            }
                                                                            else {
                                                                                {
                                                                                    ivy__actdc self__COLON__ivy__actdc;
                                                                                    if (((vector__ivy__decl____value(loc__s.decls,loc__idx)).tag == 0)) self__COLON__ivy__actdc = ivyc_s1::ivy__decl::unwrap< ivyc_s1::ivy__actdc >(vector__ivy__decl____value(loc__s.decls,loc__idx));
                                                                                    if(((vector__ivy__decl____value(loc__s.decls,loc__idx)).tag == 0)){
                                                                                        loc__0 = ext__ivy__actdc__emitted(self__COLON__ivy__actdc, loc__st);
                                                                                    }
                                                                                    else {
                                                                                        loc__0 = ext__ivy__decl__emitted(vector__ivy__decl____value(loc__s.decls,loc__idx), loc__st);
                                                                                    }
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                                if(loc__0){
                                                    {
                                                        {
                                                            ivyc_s1::cpp__decl loc__d;
                                                            {
                                                                {
                                                                    ivy__header self__COLON__ivy__header;
                                                                    if (((vector__ivy__decl____value(loc__s.decls,loc__idx)).tag == 4)) self__COLON__ivy__header = ivyc_s1::ivy__decl::unwrap< ivyc_s1::ivy__header >(vector__ivy__decl____value(loc__s.decls,loc__idx));
                                                                    if(((vector__ivy__decl____value(loc__s.decls,loc__idx)).tag == 4)){
                                                                        loc__d = ext__ivy__header__to_cpp(self__COLON__ivy__header, loc__st);
                                                                    }
                                                                    else {
                                                                        {
                                                                            ivy__vardc self__COLON__ivy__vardc;
                                                                            if (((vector__ivy__decl____value(loc__s.decls,loc__idx)).tag == 3)) self__COLON__ivy__vardc = ivyc_s1::ivy__decl::unwrap< ivyc_s1::ivy__vardc >(vector__ivy__decl____value(loc__s.decls,loc__idx));
                                                                            if(((vector__ivy__decl____value(loc__s.decls,loc__idx)).tag == 3)){
                                                                                loc__d = ext__ivy__vardc__to_cpp(self__COLON__ivy__vardc, loc__st);
                                                                            }
                                                                            else {
                                                                                {
                                                                                    ivy__typedc self__COLON__ivy__typedc;
                                                                                    if (((vector__ivy__decl____value(loc__s.decls,loc__idx)).tag == 2)) self__COLON__ivy__typedc = ivyc_s1::ivy__decl::unwrap< ivyc_s1::ivy__typedc >(vector__ivy__decl____value(loc__s.decls,loc__idx));
                                                                                    if(((vector__ivy__decl____value(loc__s.decls,loc__idx)).tag == 2)){
                                                                                        loc__d = ext__ivy__typedc__to_cpp(self__COLON__ivy__typedc, loc__st);
                                                                                    }
                                                                                    else {
                                                                                        {
                                                                                            ivy__actdc self__COLON__ivy__actdc;
                                                                                            if (((vector__ivy__decl____value(loc__s.decls,loc__idx)).tag == 0)) self__COLON__ivy__actdc = ivyc_s1::ivy__decl::unwrap< ivyc_s1::ivy__actdc >(vector__ivy__decl____value(loc__s.decls,loc__idx));
                                                                                            if(((vector__ivy__decl____value(loc__s.decls,loc__idx)).tag == 0)){
                                                                                                loc__d = ext__ivy__actdc__to_cpp(self__COLON__ivy__actdc, loc__st);
                                                                                            }
                                                                                            else {
                                                                                                loc__d = ext__ivy__decl__to_cpp(vector__ivy__decl____value(loc__s.decls,loc__idx), loc__st);
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                                ext__vector__cpp__decl____append(res.decls, loc__d);
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                        loc__idx = ext__vector__ivy__decl____domain__next(loc__idx);
                                    }
                                }
                                loc__st.proto_only = false;
                                loc__idx = vector__ivy__decl____begin(loc__s.decls);
                                while((loc__idx < vector__ivy__decl____end(loc__s.decls))){
                                    {
                                        ivyc_s1::ivy__decl loc__ivyd;
                                        {
                                            loc__ivyd = vector__ivy__decl____value(loc__s.decls,loc__idx);
                                            {
                                                bool loc__0;
    loc__0 = (bool)___ivy_choose(0,"loc:0",16180);
                                                {
                                                    {
                                                        ivy__initdc self__COLON__ivy__initdc;
                                                        if (((vector__ivy__decl____value(loc__s.decls,loc__idx)).tag == 11)) self__COLON__ivy__initdc = ivyc_s1::ivy__decl::unwrap< ivyc_s1::ivy__initdc >(vector__ivy__decl____value(loc__s.decls,loc__idx));
                                                        if(((vector__ivy__decl____value(loc__s.decls,loc__idx)).tag == 11)){
                                                            loc__0 = ext__ivy__initdc__emitted(self__COLON__ivy__initdc, loc__st);
                                                        }
                                                        else {
                                                            {
                                                                ivy__objectdc self__COLON__ivy__objectdc;
                                                                if (((vector__ivy__decl____value(loc__s.decls,loc__idx)).tag == 9)) self__COLON__ivy__objectdc = ivyc_s1::ivy__decl::unwrap< ivyc_s1::ivy__objectdc >(vector__ivy__decl____value(loc__s.decls,loc__idx));
                                                                if(((vector__ivy__decl____value(loc__s.decls,loc__idx)).tag == 9)){
                                                                    loc__0 = ext__ivy__objectdc__emitted(self__COLON__ivy__objectdc, loc__st);
                                                                }
                                                                else {
                                                                    {
                                                                        ivy__interpdc self__COLON__ivy__interpdc;
                                                                        if (((vector__ivy__decl____value(loc__s.decls,loc__idx)).tag == 5)) self__COLON__ivy__interpdc = ivyc_s1::ivy__decl::unwrap< ivyc_s1::ivy__interpdc >(vector__ivy__decl____value(loc__s.decls,loc__idx));
                                                                        if(((vector__ivy__decl____value(loc__s.decls,loc__idx)).tag == 5)){
                                                                            loc__0 = ext__ivy__interpdc__emitted(self__COLON__ivy__interpdc, loc__st);
                                                                        }
                                                                        else {
                                                                            {
                                                                                ivy__vardc self__COLON__ivy__vardc;
                                                                                if (((vector__ivy__decl____value(loc__s.decls,loc__idx)).tag == 3)) self__COLON__ivy__vardc = ivyc_s1::ivy__decl::unwrap< ivyc_s1::ivy__vardc >(vector__ivy__decl____value(loc__s.decls,loc__idx));
                                                                                if(((vector__ivy__decl____value(loc__s.decls,loc__idx)).tag == 3)){
                                                                                    loc__0 = ext__ivy__vardc__emitted(self__COLON__ivy__vardc, loc__st);
                                                                                }
                                                                                else {
                                                                                    {
                                                                                        ivy__actdc self__COLON__ivy__actdc;
                                                                                        if (((vector__ivy__decl____value(loc__s.decls,loc__idx)).tag == 0)) self__COLON__ivy__actdc = ivyc_s1::ivy__decl::unwrap< ivyc_s1::ivy__actdc >(vector__ivy__decl____value(loc__s.decls,loc__idx));
                                                                                        if(((vector__ivy__decl____value(loc__s.decls,loc__idx)).tag == 0)){
                                                                                            loc__0 = ext__ivy__actdc__emitted(self__COLON__ivy__actdc, loc__st);
                                                                                        }
                                                                                        else {
                                                                                            loc__0 = ext__ivy__decl__emitted(vector__ivy__decl____value(loc__s.decls,loc__idx), loc__st);
                                                                                        }
                                                                                    }
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                    if((((loc__ivyd).tag == 0) && loc__0)){
                                                        {
                                                            {
                                                                ivyc_s1::cpp__decl loc__d;
                                                                {
                                                                    {
                                                                        ivy__header self__COLON__ivy__header;
                                                                        if (((loc__ivyd).tag == 4)) self__COLON__ivy__header = ivyc_s1::ivy__decl::unwrap< ivyc_s1::ivy__header >(loc__ivyd);
                                                                        if(((loc__ivyd).tag == 4)){
                                                                            loc__d = ext__ivy__header__to_cpp(self__COLON__ivy__header, loc__st);
                                                                        }
                                                                        else {
                                                                            {
                                                                                ivy__vardc self__COLON__ivy__vardc;
                                                                                if (((loc__ivyd).tag == 3)) self__COLON__ivy__vardc = ivyc_s1::ivy__decl::unwrap< ivyc_s1::ivy__vardc >(loc__ivyd);
                                                                                if(((loc__ivyd).tag == 3)){
                                                                                    loc__d = ext__ivy__vardc__to_cpp(self__COLON__ivy__vardc, loc__st);
                                                                                }
                                                                                else {
                                                                                    {
                                                                                        ivy__typedc self__COLON__ivy__typedc;
                                                                                        if (((loc__ivyd).tag == 2)) self__COLON__ivy__typedc = ivyc_s1::ivy__decl::unwrap< ivyc_s1::ivy__typedc >(loc__ivyd);
                                                                                        if(((loc__ivyd).tag == 2)){
                                                                                            loc__d = ext__ivy__typedc__to_cpp(self__COLON__ivy__typedc, loc__st);
                                                                                        }
                                                                                        else {
                                                                                            {
                                                                                                ivy__actdc self__COLON__ivy__actdc;
                                                                                                if (((loc__ivyd).tag == 0)) self__COLON__ivy__actdc = ivyc_s1::ivy__decl::unwrap< ivyc_s1::ivy__actdc >(loc__ivyd);
                                                                                                if(((loc__ivyd).tag == 0)){
                                                                                                    loc__d = ext__ivy__actdc__to_cpp(self__COLON__ivy__actdc, loc__st);
                                                                                                }
                                                                                                else {
                                                                                                    loc__d = ext__ivy__decl__to_cpp(loc__ivyd, loc__st);
                                                                                                }
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                    ext__vector__cpp__decl____append(res.decls, loc__d);
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                            loc__idx = ext__vector__ivy__decl____domain__next(loc__idx);
                                        }
                                    }
                                }
                                {
                                    cpp__funcdecl loc__main;
    loc__main.ftype.base.is_const = (bool)___ivy_choose(0,"loc:main",16193);
    loc__main.ftype.base.is_ref = (bool)___ivy_choose(0,"loc:main",16193);
    loc__main.ftype.is_const = (bool)___ivy_choose(0,"loc:main",16193);
    loc__main.ftype.has_initializer = (bool)___ivy_choose(0,"loc:main",16193);
    loc__main.has_body = (bool)___ivy_choose(0,"loc:main",16193);
    loc__main.is_static = (bool)___ivy_choose(0,"loc:main",16193);
    loc__main.is_virtual = (bool)___ivy_choose(0,"loc:main",16193);
                                    {
                                        loc__main.ftype.base._type = ext__cpp__inttype(loc__main.ann);
                                        loc__main.ftype.base.name = ext__cpp__symbol__makestr(__lit<str>("main"), loc__main.ann);
                                        {
                                            cpp__simpletype loc__mainarg0;
    loc__mainarg0.is_const = (bool)___ivy_choose(0,"loc:mainarg0",16192);
    loc__mainarg0.is_ref = (bool)___ivy_choose(0,"loc:mainarg0",16192);
                                            {
                                                {
                                                    cpp__simpletype loc__mainarg1;
    loc__mainarg1.is_const = (bool)___ivy_choose(0,"loc:mainarg1",16191);
    loc__mainarg1.is_ref = (bool)___ivy_choose(0,"loc:mainarg1",16191);
                                                    {
                                                        loc__mainarg0._type = ext__cpp__inttype(loc__main.ann);
                                                        loc__mainarg0.name = ext__cpp__symbol__makestr(__lit<str>("argc"), loc__main.ann);
                                                        loc__mainarg1._type = ext__cpp__symbol__makestr(__lit<str>("char **"), loc__main.ann);
                                                        loc__mainarg1.name = ext__cpp__symbol__makestr(__lit<str>("argv"), loc__main.ann);
                                                        ext__vector__cpp__simpletype____append(loc__main.ftype.args, loc__mainarg0);
                                                        ext__vector__cpp__simpletype____append(loc__main.ftype.args, loc__mainarg1);
                                                        loc__main.has_body = true;
                                                        {
                                                            ivyc_s1::cpp__expr loc__0;
                                                            {
                                                                loc__0 = ext__cpp__symbol__makestr(__lit<str>("0"), loc__main.ann);
                                                                loc__main.body = ext__cpp__retst__make(loc__0, loc__main.ann);
                                                            }
                                                        }
                                                        loc__idx = vector__ivy__decl____end(loc__s.decls);
                                                        while((vector__ivy__decl____begin(loc__s.decls) < loc__idx)){
                                                            {
                                                                loc__idx = ext__vector__ivy__decl____domain__prev(loc__idx);
                                                                {
                                                                    ivyc_s1::ivy__decl loc__decl;
                                                                    {
                                                                        loc__decl = vector__ivy__decl____value(loc__s.decls,loc__idx);
                                                                        if(((loc__decl).tag == 11)){
                                                                            {
                                                                                {
                                                                                    ivyc_s1::cpp__stmt loc__cbody;
                                                                                    {
                                                                                        {
                                                                                            ivyc_s1::ivy__stmt loc__0;
                                                                                            {
                                                                                                {
                                                                                                    ivy__initdc self__COLON__ivy__initdc;
                                                                                                    if (((loc__decl).tag == 11)) self__COLON__ivy__initdc = ivyc_s1::ivy__decl::unwrap< ivyc_s1::ivy__initdc >(loc__decl);
                                                                                                    if(((loc__decl).tag == 11)){
                                                                                                        loc__0 = ext__ivy__initdc__get_body(self__COLON__ivy__initdc);
                                                                                                    }
                                                                                                    else {
                                                                                                        {
                                                                                                            ivy__actdc self__COLON__ivy__actdc;
                                                                                                            if (((loc__decl).tag == 0)) self__COLON__ivy__actdc = ivyc_s1::ivy__decl::unwrap< ivyc_s1::ivy__actdc >(loc__decl);
                                                                                                            if(((loc__decl).tag == 0)){
                                                                                                                loc__0 = ext__ivy__actdc__get_body(self__COLON__ivy__actdc);
                                                                                                            }
                                                                                                            else {
                                                                                                                loc__0 = ext__ivy__decl__get_body(loc__decl);
                                                                                                            }
                                                                                                        }
                                                                                                    }
                                                                                                }
                                                                                                {
                                                                                                    ivy__varst self__COLON__ivy__varst;
                                                                                                    if (((loc__0).tag == 6)) self__COLON__ivy__varst = ivyc_s1::ivy__stmt::unwrap< ivyc_s1::ivy__varst >(loc__0);
                                                                                                    if(((loc__0).tag == 6)){
                                                                                                        loc__cbody = ext__ivy__varst__to_cpp(self__COLON__ivy__varst, loc__st);
                                                                                                    }
                                                                                                    else {
                                                                                                        {
                                                                                                            ivy__whilest self__COLON__ivy__whilest;
                                                                                                            if (((loc__0).tag == 4)) self__COLON__ivy__whilest = ivyc_s1::ivy__stmt::unwrap< ivyc_s1::ivy__whilest >(loc__0);
                                                                                                            if(((loc__0).tag == 4)){
                                                                                                                loc__cbody = ext__ivy__whilest__to_cpp(self__COLON__ivy__whilest, loc__st);
                                                                                                            }
                                                                                                            else {
                                                                                                                {
                                                                                                                    ivy__ifst self__COLON__ivy__ifst;
                                                                                                                    if (((loc__0).tag == 3)) self__COLON__ivy__ifst = ivyc_s1::ivy__stmt::unwrap< ivyc_s1::ivy__ifst >(loc__0);
                                                                                                                    if(((loc__0).tag == 3)){
                                                                                                                        loc__cbody = ext__ivy__ifst__to_cpp(self__COLON__ivy__ifst, loc__st);
                                                                                                                    }
                                                                                                                    else {
                                                                                                                        {
                                                                                                                            ivy__skipst self__COLON__ivy__skipst;
                                                                                                                            if (((loc__0).tag == 2)) self__COLON__ivy__skipst = ivyc_s1::ivy__stmt::unwrap< ivyc_s1::ivy__skipst >(loc__0);
                                                                                                                            if(((loc__0).tag == 2)){
                                                                                                                                loc__cbody = ext__ivy__skipst__to_cpp(self__COLON__ivy__skipst, loc__st);
                                                                                                                            }
                                                                                                                            else {
                                                                                                                                {
                                                                                                                                    ivy__sequence self__COLON__ivy__sequence;
                                                                                                                                    if (((loc__0).tag == 1)) self__COLON__ivy__sequence = ivyc_s1::ivy__stmt::unwrap< ivyc_s1::ivy__sequence >(loc__0);
                                                                                                                                    if(((loc__0).tag == 1)){
                                                                                                                                        loc__cbody = ext__ivy__sequence__to_cpp(self__COLON__ivy__sequence, loc__st);
                                                                                                                                    }
                                                                                                                                    else {
                                                                                                                                        {
                                                                                                                                            ivy__asgn self__COLON__ivy__asgn;
                                                                                                                                            if (((loc__0).tag == 0)) self__COLON__ivy__asgn = ivyc_s1::ivy__stmt::unwrap< ivyc_s1::ivy__asgn >(loc__0);
                                                                                                                                            if(((loc__0).tag == 0)){
                                                                                                                                                loc__cbody = ext__ivy__asgn__to_cpp(self__COLON__ivy__asgn, loc__st);
                                                                                                                                            }
                                                                                                                                            else {
                                                                                                                                                loc__cbody = ext__ivy__stmt__to_cpp(loc__0, loc__st);
                                                                                                                                            }
                                                                                                                                        }
                                                                                                                                    }
                                                                                                                                }
                                                                                                                            }
                                                                                                                        }
                                                                                                                    }
                                                                                                                }
                                                                                                            }
                                                                                                        }
                                                                                                    }
                                                                                                }
                                                                                            }
                                                                                        }
                                                                                        {
                                                                                            ivyc_s1::annot loc__0;
                                                                                            {
                                                                                                {
                                                                                                    ivy__includedc self__COLON__ivy__includedc;
                                                                                                    if (((loc__decl).tag == 6)) self__COLON__ivy__includedc = ivyc_s1::ivy__decl::unwrap< ivyc_s1::ivy__includedc >(loc__decl);
                                                                                                    if(((loc__decl).tag == 6)){
                                                                                                        loc__0 = ext__ivy__includedc__get_ann(self__COLON__ivy__includedc);
                                                                                                    }
                                                                                                    else {
                                                                                                        loc__0 = ext__ivy__decl__get_ann(loc__decl);
                                                                                                    }
                                                                                                }
                                                                                                loc__main.body = ext__cpp__sequence__make(loc__cbody, loc__main.body, loc__0);
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                        {
                                                            ivyc_s1::cpp__expr loc__0;
                                                            ivyc_s1::cpp__expr loc__1;
                                                            ivyc_s1::cpp__stmt loc__2;
                                                            {
                                                                loc__0 = ext__cpp__symbol__makestr(__lit<str>("ivy::__argv"), loc__main.ann);
                                                                loc__1 = ext__cpp__symbol__makestr(__lit<str>("argv"), loc__main.ann);
                                                                loc__2 = ext__cpp__asgn__make(loc__0, loc__1, loc__main.ann);
                                                                {
                                                                    ivyc_s1::cpp__stmt loc__argv;
                                                                    {
                                                                        loc__argv = loc__2;
                                                                        loc__main.body = ext__cpp__sequence__make(loc__argv, loc__main.body, loc__main.ann);
                                                                        {
                                                                            ivyc_s1::cpp__expr loc__0;
                                                                            ivyc_s1::cpp__expr loc__1;
                                                                            ivyc_s1::cpp__stmt loc__2;
                                                                            {
                                                                                loc__0 = ext__cpp__symbol__makestr(__lit<str>("ivy::__argc"), loc__main.ann);
                                                                                loc__1 = ext__cpp__symbol__makestr(__lit<str>("argc"), loc__main.ann);
                                                                                loc__2 = ext__cpp__asgn__make(loc__0, loc__1, loc__main.ann);
                                                                                {
                                                                                    ivyc_s1::cpp__stmt loc__argc;
                                                                                    {
                                                                                        loc__argc = loc__2;
                                                                                        loc__main.body = ext__cpp__sequence__make(loc__argc, loc__main.body, loc__main.ann);
                                                                                        ext__vector__cpp__decl____append(res.decls, ivyc_s1::cpp__decl(4, new ivyc_s1::cpp__decl::twrap<ivyc_s1::cpp__funcdecl>(loc__main)));
                                                                                    }
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
    }
    return res;
}
void ivyc_s1::ext__cpp__decl__encode(ivyc_s1::cpp__decl s, pretty& b, int prio){
    {
    }
}
ivyc_s1::annot ivyc_s1::ext__cpp__decl__get_ann(ivyc_s1::cpp__decl d){
    ivyc_s1::annot res;
    {
    }
    return res;
}
void ivyc_s1::ext__cpp__funcdecl__encode(const cpp__funcdecl& s, pretty& b, int prio){
    {
        {
            annot_i self__COLON__annot_i;
            if (((s.ann).tag == 0)) self__COLON__annot_i = ivyc_s1::annot::unwrap< ivyc_s1::annot_i >(s.ann);
            if(((s.ann).tag == 0)){
                ext__annot_i__encode(self__COLON__annot_i, b);
            }
            else {
                ext__annot__encode(s.ann, b);
            }
        }
        ext__pretty__nest(b);
        if(s.is_static){
            {
                ext__pretty__extend(b, __lit<str>("static"));
                ext__pretty__extend(b, __lit<str>(" "));
            }
        }
        if(s.is_virtual){
            {
                ext__pretty__extend(b, __lit<str>("virtual"));
                ext__pretty__extend(b, __lit<str>(" "));
            }
        }
        ext__cpp__functype__encode(s.ftype, b, 0);
        if(s.has_body){
            {
                ext__pretty__unnest(b);
                ext__pretty__extend(b, __lit<str>(" "));
                {
                    cpp__retst self__COLON__cpp__retst;
                    if (((s.body).tag == 7)) self__COLON__cpp__retst = ivyc_s1::cpp__stmt::unwrap< ivyc_s1::cpp__retst >(s.body);
                    if(((s.body).tag == 7)){
                        ext__cpp__retst__encode(self__COLON__cpp__retst, b, 2);
                    }
                    else {
                        {
                            cpp__varst self__COLON__cpp__varst;
                            if (((s.body).tag == 6)) self__COLON__cpp__varst = ivyc_s1::cpp__stmt::unwrap< ivyc_s1::cpp__varst >(s.body);
                            if(((s.body).tag == 6)){
                                ext__cpp__varst__encode(self__COLON__cpp__varst, b, 2);
                            }
                            else {
                                {
                                    cpp__breakst self__COLON__cpp__breakst;
                                    if (((s.body).tag == 5)) self__COLON__cpp__breakst = ivyc_s1::cpp__stmt::unwrap< ivyc_s1::cpp__breakst >(s.body);
                                    if(((s.body).tag == 5)){
                                        ext__cpp__breakst__encode(self__COLON__cpp__breakst, b, 2);
                                    }
                                    else {
                                        {
                                            cpp__whilest self__COLON__cpp__whilest;
                                            if (((s.body).tag == 4)) self__COLON__cpp__whilest = ivyc_s1::cpp__stmt::unwrap< ivyc_s1::cpp__whilest >(s.body);
                                            if(((s.body).tag == 4)){
                                                ext__cpp__whilest__encode(self__COLON__cpp__whilest, b, 2);
                                            }
                                            else {
                                                {
                                                    cpp__ifst self__COLON__cpp__ifst;
                                                    if (((s.body).tag == 3)) self__COLON__cpp__ifst = ivyc_s1::cpp__stmt::unwrap< ivyc_s1::cpp__ifst >(s.body);
                                                    if(((s.body).tag == 3)){
                                                        ext__cpp__ifst__encode(self__COLON__cpp__ifst, b, 2);
                                                    }
                                                    else {
                                                        {
                                                            cpp__skipst self__COLON__cpp__skipst;
                                                            if (((s.body).tag == 2)) self__COLON__cpp__skipst = ivyc_s1::cpp__stmt::unwrap< ivyc_s1::cpp__skipst >(s.body);
                                                            if(((s.body).tag == 2)){
                                                                ext__cpp__skipst__encode(self__COLON__cpp__skipst, b, 2);
                                                            }
                                                            else {
                                                                {
                                                                    cpp__sequence self__COLON__cpp__sequence;
                                                                    if (((s.body).tag == 1)) self__COLON__cpp__sequence = ivyc_s1::cpp__stmt::unwrap< ivyc_s1::cpp__sequence >(s.body);
                                                                    if(((s.body).tag == 1)){
                                                                        ext__cpp__sequence__encode(self__COLON__cpp__sequence, b, 2);
                                                                    }
                                                                    else {
                                                                        {
                                                                            cpp__asgn self__COLON__cpp__asgn;
                                                                            if (((s.body).tag == 0)) self__COLON__cpp__asgn = ivyc_s1::cpp__stmt::unwrap< ivyc_s1::cpp__asgn >(s.body);
                                                                            if(((s.body).tag == 0)){
                                                                                ext__cpp__asgn__encode(self__COLON__cpp__asgn, b, 2);
                                                                            }
                                                                            else {
                                                                                ext__cpp__stmt__encode(s.body, b, 2);
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
        else {
            {
                ext__pretty__extend(b, __lit<str>(";"));
                ext__pretty__unnest(b);
                ext__pretty__newline(b);
            }
        }
    }
}
ivyc_s1::ivy__cannot_write ivyc_s1::ext__ivy__cannot_write__make(const str& n){
    ivyc_s1::ivy__cannot_write res;
    {
        res.n = n;
    }
    return res;
}
ivyc_s1::ivy__ident ivyc_s1::ext__ivy__symbol__get_name(const ivy__symbol& s){
    ivyc_s1::ivy__ident res;
    res = s.name;
    return res;
}
ivyc_s1::annot ivyc_s1::ext__annot_i__strip(const annot_i& s){
    ivyc_s1::annot res;
    {
        {
            annot_i loc__news;
    loc__news.line = (unsigned long long)___ivy_choose(0,"loc:news",16197);
            {
                loc__news = s;
                loc__news.comments = ext__vector__str____empty();
                res = ivyc_s1::annot(0, new ivyc_s1::annot::twrap<ivyc_s1::annot_i>(loc__news));
            }
        }
    }
    return res;
}
void ivyc_s1::ext__cpp__enumdecl__encode(const cpp__enumdecl& s, pretty& b, int prio){
    {
        {
            annot_i self__COLON__annot_i;
            if (((s.ann).tag == 0)) self__COLON__annot_i = ivyc_s1::annot::unwrap< ivyc_s1::annot_i >(s.ann);
            if(((s.ann).tag == 0)){
                ext__annot_i__encode(self__COLON__annot_i, b);
            }
            else {
                ext__annot__encode(s.ann, b);
            }
        }
        ext__pretty__nest(b);
        ext__pretty__extend(b, __lit<str>("enum"));
        ext__pretty__extend(b, __lit<str>(" "));
        {
            cpp__pi self__COLON__cpp__pi;
            if (((s.name).tag == 3)) self__COLON__cpp__pi = ivyc_s1::cpp__expr::unwrap< ivyc_s1::cpp__pi >(s.name);
            if(((s.name).tag == 3)){
                ext__cpp__pi__encode(self__COLON__cpp__pi, b, 0);
            }
            else {
                {
                    cpp__app self__COLON__cpp__app;
                    if (((s.name).tag == 1)) self__COLON__cpp__app = ivyc_s1::cpp__expr::unwrap< ivyc_s1::cpp__app >(s.name);
                    if(((s.name).tag == 1)){
                        ext__cpp__app__encode(self__COLON__cpp__app, b, 0);
                    }
                    else {
                        {
                            cpp__symbol self__COLON__cpp__symbol;
                            if (((s.name).tag == 0)) self__COLON__cpp__symbol = ivyc_s1::cpp__expr::unwrap< ivyc_s1::cpp__symbol >(s.name);
                            if(((s.name).tag == 0)){
                                ext__cpp__symbol__encode(self__COLON__cpp__symbol, b, 0);
                            }
                            else {
                                ext__cpp__expr__encode(s.name, b, 0);
                            }
                        }
                    }
                }
            }
        }
        ext__pretty__extend(b, __lit<str>(" "));
        ext__cpp__curly_tup__encode(s.elems, b, 0);
        ext__pretty__extend(b, __lit<str>(";"));
        ext__pretty__unnest(b);
        ext__pretty__newline(b);
    }
}
ivyc_s1::annot ivyc_s1::ext__cpp__header__get_ann(const cpp__header& d){
    ivyc_s1::annot res;
    res = d.ann;
    return res;
}
ivyc_s1::ivy__ident ivyc_s1::ext__ivy__dotident__prefix(const ivy__dotident& s, ivyc_s1::ivy__ident pref){
    ivyc_s1::ivy__ident res;
    {
        {
            ivyc_s1::ivy__ident loc__0;
            {
                {
                    ivy__dotident self__COLON__ivy__dotident;
                    if (((s.namesp).tag == 2)) self__COLON__ivy__dotident = ivyc_s1::ivy__ident::unwrap< ivyc_s1::ivy__dotident >(s.namesp);
                    if(((s.namesp).tag == 2)){
                        loc__0 = ext__ivy__dotident__prefix(self__COLON__ivy__dotident, pref);
                    }
                    else {
                        {
                            ivy__strident self__COLON__ivy__strident;
                            if (((s.namesp).tag == 0)) self__COLON__ivy__strident = ivyc_s1::ivy__ident::unwrap< ivyc_s1::ivy__strident >(s.namesp);
                            if(((s.namesp).tag == 0)){
                                loc__0 = ext__ivy__strident__prefix(self__COLON__ivy__strident, pref);
                            }
                            else {
                                loc__0 = ext__ivy__ident__prefix(s.namesp, pref);
                            }
                        }
                    }
                }
                res = ext__ivy__dotident__make(loc__0, s.member);
            }
        }
    }
    return res;
}
ivyc_s1::annot ivyc_s1::ext__cpp__app__get_ann(const cpp__app& s){
    ivyc_s1::annot res;
    res = s.ann;
    return res;
}
void ivyc_s1::ext__ivy__decost__map__get(const ivy__decost__map& a, ivyc_s1::ivy__ident x, ivyc_s1::ivy__expr& y){
    {

        ivy__decost__map::const_iterator it = a.find(x);
        if (it != a.end())
            y = it->second;
    }
}
void ivyc_s1::ext__ivy__set_built_in_type(ivy__verb vrb, const str& ty, bool m, bool io, bool oi, bool fi){
    {
        ivy__optypes[vrb] = ext__ivy__expr__dec(ty);
        ivy__verb_mono[vrb] = m;
        ivy__verb_in_to_out[vrb] = io;
        ivy__verb_out_to_in[vrb] = oi;
        ivy__verb_first_to_in[vrb] = fi;
    }
}
void ivyc_s1::ext__ivy__decost__unify(ivy__decost& st, ivyc_s1::ivy__expr x0, ivyc_s1::ivy__expr y0){
    {
        {
            ivyc_s1::ivy__expr loc__x;
            {
                {
                    ivyc_s1::ivy__expr loc__y;
                    {
                        ext__ivy__decost__find(st, x0, loc__x);
                        ext__ivy__decost__find(st, y0, loc__y);
                        if(((loc__x).tag == 0)){
                            {
                                ivyc_s1::ivy__ident loc__0;
                                {
                                    {
                                        ivy__symbol self__COLON__ivy__symbol;
                                        if (((loc__x).tag == 0)) self__COLON__ivy__symbol = ivyc_s1::ivy__expr::unwrap< ivyc_s1::ivy__symbol >(loc__x);
                                        if(((loc__x).tag == 0)){
                                            loc__0 = ext__ivy__symbol__get_name(self__COLON__ivy__symbol);
                                        }
                                        else {
                                            loc__0 = ext__ivy__expr__get_name(loc__x);
                                        }
                                    }
                                    {
                                        ivyc_s1::ivy__ident loc__nx;
                                        {
                                            loc__nx = loc__0;
                                            if(((loc__nx).tag == 1)){
                                                {
                                                    bool loc__0;
    loc__0 = (bool)___ivy_choose(0,"loc:0",16199);
                                                    {
                                                        {
                                                            ivy__app self__COLON__ivy__app;
                                                            if (((loc__y).tag == 1)) self__COLON__ivy__app = ivyc_s1::ivy__expr::unwrap< ivyc_s1::ivy__app >(loc__y);
                                                            if(((loc__y).tag == 1)){
                                                                loc__0 = ext__ivy__app__occurs(self__COLON__ivy__app, loc__nx);
                                                            }
                                                            else {
                                                                {
                                                                    ivy__symbol self__COLON__ivy__symbol;
                                                                    if (((loc__y).tag == 0)) self__COLON__ivy__symbol = ivyc_s1::ivy__expr::unwrap< ivyc_s1::ivy__symbol >(loc__y);
                                                                    if(((loc__y).tag == 0)){
                                                                        loc__0 = ext__ivy__symbol__occurs(self__COLON__ivy__symbol, loc__nx);
                                                                    }
                                                                    else {
                                                                        loc__0 = ext__ivy__expr__occurs(loc__y, loc__nx);
                                                                    }
                                                                }
                                                            }
                                                        }
                                                        if(loc__0){
                                                            {
                                                                ext__ivy__decost__unification_failed(st, loc__x, loc__y);
                                                            }
                                                        }
                                                        else {
                                                            {
                                                                ext__ivy__decost__map__set(st.m, loc__nx, loc__y);
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                            else {
                                                if(((loc__y).tag == 0)){
                                                    {
                                                        ivyc_s1::ivy__ident loc__0;
                                                        {
                                                            {
                                                                ivy__symbol self__COLON__ivy__symbol;
                                                                if (((loc__y).tag == 0)) self__COLON__ivy__symbol = ivyc_s1::ivy__expr::unwrap< ivyc_s1::ivy__symbol >(loc__y);
                                                                if(((loc__y).tag == 0)){
                                                                    loc__0 = ext__ivy__symbol__get_name(self__COLON__ivy__symbol);
                                                                }
                                                                else {
                                                                    loc__0 = ext__ivy__expr__get_name(loc__y);
                                                                }
                                                            }
                                                            {
                                                                ivyc_s1::ivy__ident loc__ny;
                                                                {
                                                                    loc__ny = loc__0;
                                                                    if(((loc__ny).tag == 1)){
                                                                        {
                                                                            ext__ivy__decost__unify(st, loc__y, loc__x);
                                                                        }
                                                                    }
                                                                    else {
                                                                        if(!(loc__nx == loc__ny)){
                                                                            {
                                                                                ext__ivy__decost__unification_failed(st, loc__x, loc__y);
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                                else {
                                                    ext__ivy__decost__unification_failed(st, loc__x, loc__y);
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                        else {
                            if(((loc__y).tag == 0)){
                                {
                                    ext__ivy__decost__unify(st, loc__y, loc__x);
                                }
                            }
                            else {
                                {
                                    bool loc__0;
    loc__0 = (bool)___ivy_choose(0,"loc:0",16206);
                                    bool loc__1;
    loc__1 = (bool)___ivy_choose(0,"loc:1",16206);
                                    bool loc__2;
    loc__2 = (bool)___ivy_choose(0,"loc:2",16206);
                                    bool loc__3;
    loc__3 = (bool)___ivy_choose(0,"loc:3",16206);
                                    {
                                        {
                                            ivy__app self__COLON__ivy__app;
                                            if (((loc__x).tag == 1)) self__COLON__ivy__app = ivyc_s1::ivy__expr::unwrap< ivyc_s1::ivy__app >(loc__x);
                                            if(((loc__x).tag == 1)){
                                                loc__0 = ext__ivy__app__is(self__COLON__ivy__app, ivy__verb__times);
                                            }
                                            else {
                                                loc__0 = ext__ivy__expr__is(loc__x, ivy__verb__times);
                                            }
                                        }
                                        {
                                            ivy__app self__COLON__ivy__app;
                                            if (((loc__y).tag == 1)) self__COLON__ivy__app = ivyc_s1::ivy__expr::unwrap< ivyc_s1::ivy__app >(loc__y);
                                            if(((loc__y).tag == 1)){
                                                loc__1 = ext__ivy__app__is(self__COLON__ivy__app, ivy__verb__times);
                                            }
                                            else {
                                                loc__1 = ext__ivy__expr__is(loc__y, ivy__verb__times);
                                            }
                                        }
                                        {
                                            ivy__app self__COLON__ivy__app;
                                            if (((loc__x).tag == 1)) self__COLON__ivy__app = ivyc_s1::ivy__expr::unwrap< ivyc_s1::ivy__app >(loc__x);
                                            if(((loc__x).tag == 1)){
                                                loc__2 = ext__ivy__app__is(self__COLON__ivy__app, ivy__verb__arrow);
                                            }
                                            else {
                                                loc__2 = ext__ivy__expr__is(loc__x, ivy__verb__arrow);
                                            }
                                        }
                                        {
                                            ivy__app self__COLON__ivy__app;
                                            if (((loc__y).tag == 1)) self__COLON__ivy__app = ivyc_s1::ivy__expr::unwrap< ivyc_s1::ivy__app >(loc__y);
                                            if(((loc__y).tag == 1)){
                                                loc__3 = ext__ivy__app__is(self__COLON__ivy__app, ivy__verb__arrow);
                                            }
                                            else {
                                                loc__3 = ext__ivy__expr__is(loc__y, ivy__verb__arrow);
                                            }
                                        }
                                        if(((loc__0 && loc__1) || (loc__2 && loc__3))){
                                            {
                                                {
                                                    ivyc_s1::ivy__expr loc__0;
                                                    ivyc_s1::ivy__expr loc__1;
                                                    {
                                                        {
                                                            ivy__app self__COLON__ivy__app;
                                                            if (((loc__x).tag == 1)) self__COLON__ivy__app = ivyc_s1::ivy__expr::unwrap< ivyc_s1::ivy__app >(loc__x);
                                                            if(((loc__x).tag == 1)){
                                                                loc__0 = ext__ivy__app__get_arg(self__COLON__ivy__app, 0);
                                                            }
                                                            else {
                                                                loc__0 = ext__ivy__expr__get_arg(loc__x, 0);
                                                            }
                                                        }
                                                        {
                                                            ivy__app self__COLON__ivy__app;
                                                            if (((loc__y).tag == 1)) self__COLON__ivy__app = ivyc_s1::ivy__expr::unwrap< ivyc_s1::ivy__app >(loc__y);
                                                            if(((loc__y).tag == 1)){
                                                                loc__1 = ext__ivy__app__get_arg(self__COLON__ivy__app, 0);
                                                            }
                                                            else {
                                                                loc__1 = ext__ivy__expr__get_arg(loc__y, 0);
                                                            }
                                                        }
                                                        ext__ivy__decost__unify(st, loc__0, loc__1);
                                                    }
                                                }
                                                if(st.ok){
                                                    {
                                                        {
                                                            ivyc_s1::ivy__expr loc__0;
                                                            ivyc_s1::ivy__expr loc__1;
                                                            {
                                                                {
                                                                    ivy__app self__COLON__ivy__app;
                                                                    if (((loc__x).tag == 1)) self__COLON__ivy__app = ivyc_s1::ivy__expr::unwrap< ivyc_s1::ivy__app >(loc__x);
                                                                    if(((loc__x).tag == 1)){
                                                                        loc__0 = ext__ivy__app__get_arg(self__COLON__ivy__app, 1);
                                                                    }
                                                                    else {
                                                                        loc__0 = ext__ivy__expr__get_arg(loc__x, 1);
                                                                    }
                                                                }
                                                                {
                                                                    ivy__app self__COLON__ivy__app;
                                                                    if (((loc__y).tag == 1)) self__COLON__ivy__app = ivyc_s1::ivy__expr::unwrap< ivyc_s1::ivy__app >(loc__y);
                                                                    if(((loc__y).tag == 1)){
                                                                        loc__1 = ext__ivy__app__get_arg(self__COLON__ivy__app, 1);
                                                                    }
                                                                    else {
                                                                        loc__1 = ext__ivy__expr__get_arg(loc__y, 1);
                                                                    }
                                                                }
                                                                ext__ivy__decost__unify(st, loc__0, loc__1);
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                        else {
                                            {
                                                ext__ivy__decost__unification_failed(st, loc__x, loc__y);
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
    }
}
void ivyc_s1::ext__cpp__header__encode(const cpp__header& s, pretty& b, int prio){
    {
        ext__pretty__nest(b);
        ext__pretty__extend(b, __lit<str>("#include "));
        ext__pretty__extend(b, s.filename);
        ext__pretty__unnest(b);
        ext__pretty__newline(b);
    }
}
ivyc_s1::cpp__expr ivyc_s1::ext__cpp__namedtype(ivyc_s1::cpp__ident name, ivyc_s1::annot ann){
    ivyc_s1::cpp__expr res;
    {
        {
            cpp__symbol loc__s;
    loc__s.vrb = (cpp__verb)___ivy_choose(0,"loc:s",16209);
            {
                loc__s.name = name;
                {
                    annot_i self__COLON__annot_i;
                    if (((ann).tag == 0)) self__COLON__annot_i = ivyc_s1::annot::unwrap< ivyc_s1::annot_i >(ann);
                    if(((ann).tag == 0)){
                        loc__s.ann = ext__annot_i__strip(self__COLON__annot_i);
                    }
                    else {
                        loc__s.ann = ext__annot__strip(ann);
                    }
                }
                res = ivyc_s1::cpp__expr(0, new ivyc_s1::cpp__expr::twrap<ivyc_s1::cpp__symbol>(loc__s));
            }
        }
    }
    return res;
}
void ivyc_s1::ext__ivy__decl__parse_list(pstate& st, int prio, vector__ivy__decl__& res){
    while((st.ok && (0 < str__end(st.tok)) && !(st.tok == __lit<str>("}")))){
        {
            {
                ivyc_s1::ivy__decl loc__s;
                {
                    ext__ivy__decl__parse(st, 0, loc__s);
                    ext__vector__ivy__decl____append(res, loc__s);
                }
            }
        }
    }
}
ivyc_s1::ivy__expr ivyc_s1::ext__ivy__comma__make(ivyc_s1::ivy__expr lhs, ivyc_s1::ivy__expr rhs, ivyc_s1::annot ann){
    ivyc_s1::ivy__expr res;
    {
        ivy__app loc__s;
        {
            loc__s.func = ext__ivy__symbol__makestr(__lit<str>(","), ann);
            ext__vector__ivy__expr____append(loc__s.args, lhs);
            ext__vector__ivy__expr____append(loc__s.args, rhs);
            loc__s.ann = ann;
            res = ivyc_s1::ivy__expr(1, new ivyc_s1::ivy__expr::twrap<ivyc_s1::ivy__app>(loc__s));
        }
    }
    return res;
}
ivyc_s1::str ivyc_s1::ext__ivy__enum_name(ivyc_s1::cpp__expr name){
    ivyc_s1::str res;
    {
        res = __lit<str>("__enum_");
        {
            ivyc_s1::cpp__ident loc__0;
            str loc__1;
            {
                {
                    cpp__symbol self__COLON__cpp__symbol;
                    if (((name).tag == 0)) self__COLON__cpp__symbol = ivyc_s1::cpp__expr::unwrap< ivyc_s1::cpp__symbol >(name);
                    if(((name).tag == 0)){
                        loc__0 = ext__cpp__symbol__get_name(self__COLON__cpp__symbol);
                    }
                    else {
                        loc__0 = ext__cpp__expr__get_name(name);
                    }
                }
                {
                    cpp__dotident self__COLON__cpp__dotident;
                    if (((loc__0).tag == 2)) self__COLON__cpp__dotident = ivyc_s1::cpp__ident::unwrap< ivyc_s1::cpp__dotident >(loc__0);
                    if(((loc__0).tag == 2)){
                        loc__1 = ext__cpp__dotident__to_str(self__COLON__cpp__dotident);
                    }
                    else {
                        {
                            cpp__strident self__COLON__cpp__strident;
                            if (((loc__0).tag == 0)) self__COLON__cpp__strident = ivyc_s1::cpp__ident::unwrap< ivyc_s1::cpp__strident >(loc__0);
                            if(((loc__0).tag == 0)){
                                loc__1 = ext__cpp__strident__to_str(self__COLON__cpp__strident);
                            }
                            else {
                                loc__1 = ext__cpp__ident__to_str(loc__0);
                            }
                        }
                    }
                }
                ext__str__extend(res, loc__1);
            }
        }
    }
    return res;
}
void ivyc_s1::ext__ivy__pi__encode(const ivy__pi& s, pretty& b, int prio){
    {
        {
            annot_i self__COLON__annot_i;
            if (((s.ann).tag == 0)) self__COLON__annot_i = ivyc_s1::annot::unwrap< ivyc_s1::annot_i >(s.ann);
            if(((s.ann).tag == 0)){
                ext__annot_i__encode(self__COLON__annot_i, b);
            }
            else {
                ext__annot__encode(s.ann, b);
            }
        }
        ext__pretty__nest(b);
        ext__pretty__extend(b, __lit<str>("pi"));
        ext__pretty__extend(b, __lit<str>(" "));
        ext__ivy__expr__tup__encode(s.vars, b, 0);
        ext__pretty__extend(b, __lit<str>("."));
        ext__pretty__extend(b, __lit<str>(" "));
        {
            ivy__pi self__COLON__ivy__pi;
            if (((s.body).tag == 3)) self__COLON__ivy__pi = ivyc_s1::ivy__expr::unwrap< ivyc_s1::ivy__pi >(s.body);
            if(((s.body).tag == 3)){
                ext__ivy__pi__encode(self__COLON__ivy__pi, b, 0);
            }
            else {
                {
                    ivy__app self__COLON__ivy__app;
                    if (((s.body).tag == 1)) self__COLON__ivy__app = ivyc_s1::ivy__expr::unwrap< ivyc_s1::ivy__app >(s.body);
                    if(((s.body).tag == 1)){
                        ext__ivy__app__encode(self__COLON__ivy__app, b, 0);
                    }
                    else {
                        {
                            ivy__symbol self__COLON__ivy__symbol;
                            if (((s.body).tag == 0)) self__COLON__ivy__symbol = ivyc_s1::ivy__expr::unwrap< ivyc_s1::ivy__symbol >(s.body);
                            if(((s.body).tag == 0)){
                                ext__ivy__symbol__encode(self__COLON__ivy__symbol, b, 0);
                            }
                            else {
                                ext__ivy__expr__encode(s.body, b, 0);
                            }
                        }
                    }
                }
            }
        }
        ext__pretty__extend(b, __lit<str>(";"));
        ext__pretty__unnest(b);
    }
}
void ivyc_s1::ext__ivy__expr__tup__encode(const vector__ivy__expr__& s, pretty& b, int prio){
    if((0 < vector__ivy__expr____end(s))){
        {
            ext__pretty__extend(b, __lit<str>(" "));
            ext__pretty__extend(b, __lit<str>("("));
            {
                ivy__pi self__COLON__ivy__pi;
                if (((vector__ivy__expr____value(s,0)).tag == 3)) self__COLON__ivy__pi = ivyc_s1::ivy__expr::unwrap< ivyc_s1::ivy__pi >(vector__ivy__expr____value(s,0));
                if(((vector__ivy__expr____value(s,0)).tag == 3)){
                    ext__ivy__pi__encode(self__COLON__ivy__pi, b, 0);
                }
                else {
                    {
                        ivy__app self__COLON__ivy__app;
                        if (((vector__ivy__expr____value(s,0)).tag == 1)) self__COLON__ivy__app = ivyc_s1::ivy__expr::unwrap< ivyc_s1::ivy__app >(vector__ivy__expr____value(s,0));
                        if(((vector__ivy__expr____value(s,0)).tag == 1)){
                            ext__ivy__app__encode(self__COLON__ivy__app, b, 0);
                        }
                        else {
                            {
                                ivy__symbol self__COLON__ivy__symbol;
                                if (((vector__ivy__expr____value(s,0)).tag == 0)) self__COLON__ivy__symbol = ivyc_s1::ivy__expr::unwrap< ivyc_s1::ivy__symbol >(vector__ivy__expr____value(s,0));
                                if(((vector__ivy__expr____value(s,0)).tag == 0)){
                                    ext__ivy__symbol__encode(self__COLON__ivy__symbol, b, 0);
                                }
                                else {
                                    ext__ivy__expr__encode(vector__ivy__expr____value(s,0), b, 0);
                                }
                            }
                        }
                    }
                }
            }
            {
                unsigned long long loc__0;
    loc__0 = (unsigned long long)___ivy_choose(0,"loc:0",16214);
                {
                    loc__0 = ext__vector__ivy__expr____domain__next(vector__ivy__expr____begin(s));
                    {
                        unsigned long long loc__idx;
    loc__idx = (unsigned long long)___ivy_choose(0,"loc:idx",16213);
                        {
                            loc__idx = loc__0;
                            while((loc__idx < vector__ivy__expr____end(s))){
                                {
                                    ext__pretty__extend(b, __lit<str>(","));
                                    {
                                        ivy__pi self__COLON__ivy__pi;
                                        if (((vector__ivy__expr____value(s,loc__idx)).tag == 3)) self__COLON__ivy__pi = ivyc_s1::ivy__expr::unwrap< ivyc_s1::ivy__pi >(vector__ivy__expr____value(s,loc__idx));
                                        if(((vector__ivy__expr____value(s,loc__idx)).tag == 3)){
                                            ext__ivy__pi__encode(self__COLON__ivy__pi, b, 0);
                                        }
                                        else {
                                            {
                                                ivy__app self__COLON__ivy__app;
                                                if (((vector__ivy__expr____value(s,loc__idx)).tag == 1)) self__COLON__ivy__app = ivyc_s1::ivy__expr::unwrap< ivyc_s1::ivy__app >(vector__ivy__expr____value(s,loc__idx));
                                                if(((vector__ivy__expr____value(s,loc__idx)).tag == 1)){
                                                    ext__ivy__app__encode(self__COLON__ivy__app, b, 0);
                                                }
                                                else {
                                                    {
                                                        ivy__symbol self__COLON__ivy__symbol;
                                                        if (((vector__ivy__expr____value(s,loc__idx)).tag == 0)) self__COLON__ivy__symbol = ivyc_s1::ivy__expr::unwrap< ivyc_s1::ivy__symbol >(vector__ivy__expr____value(s,loc__idx));
                                                        if(((vector__ivy__expr____value(s,loc__idx)).tag == 0)){
                                                            ext__ivy__symbol__encode(self__COLON__ivy__symbol, b, 0);
                                                        }
                                                        else {
                                                            ext__ivy__expr__encode(vector__ivy__expr____value(s,loc__idx), b, 0);
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                    loc__idx = ext__vector__ivy__expr____domain__next(loc__idx);
                                }
                            }
                            ext__pretty__extend(b, __lit<str>(")"));
                        }
                    }
                }
            }
        }
    }
}
ivyc_s1::cpp__funcdecl ivyc_s1::ext__ivy__make_upcast_method(const cpp__structdecl& t){
    ivyc_s1::cpp__funcdecl s;
    s.ftype.base.is_const = (bool)___ivy_choose(0,"fml:s",0);
    s.ftype.base.is_ref = (bool)___ivy_choose(0,"fml:s",0);
    s.ftype.is_const = (bool)___ivy_choose(0,"fml:s",0);
    s.ftype.has_initializer = (bool)___ivy_choose(0,"fml:s",0);
    s.has_body = (bool)___ivy_choose(0,"fml:s",0);
    s.is_static = (bool)___ivy_choose(0,"fml:s",0);
    s.is_virtual = (bool)___ivy_choose(0,"fml:s",0);
    {
        s.ftype.base.name = ext__cpp__symbol__makestr(__lit<str>("__upcast"), t.ann);
        {
            ivyc_s1::cpp__expr loc__ty;
            {
                loc__ty = (t.has_super ? t.super : t.name);
                {
                    ivyc_s1::cpp__ident loc__0;
                    {
                        {
                            cpp__symbol self__COLON__cpp__symbol;
                            if (((loc__ty).tag == 0)) self__COLON__cpp__symbol = ivyc_s1::cpp__expr::unwrap< ivyc_s1::cpp__symbol >(loc__ty);
                            if(((loc__ty).tag == 0)){
                                loc__0 = ext__cpp__symbol__get_name(self__COLON__cpp__symbol);
                            }
                            else {
                                loc__0 = ext__cpp__expr__get_name(loc__ty);
                            }
                        }
                        s.ftype.base._type = ext__cpp__symbol__makestr1(__lit<str>("ivy::ptr"), loc__0, t.ann);
                    }
                }
                s.has_body = true;
                {
                    ivyc_s1::cpp__expr loc__0;
                    {
                        loc__0 = ext__cpp__symbol__makestr(__lit<str>("(*this)"), t.ann);
                        s.body = ext__cpp__retst__make(loc__0, t.ann);
                    }
                }
                s.is_virtual = true;
                s.ftype.is_const = true;
            }
        }
    }
    return s;
}
bool ivyc_s1::ext__ivy__param_map__mem(const ivy__param_map& a, ivyc_s1::ivy__ident x){
    bool res;
    res = (bool)___ivy_choose(0,"fml:res",0);
    {

        ivy__param_map::const_iterator it = a.find(x);
        res = (it != a.end());
    }
    return res;
}
void ivyc_s1::ext__cpp__breakst__encode_int(const cpp__breakst& s, pretty& b, int prio){
    {
        ext__pretty__extend(b, __lit<str>("break;"));
    }
}
ivyc_s1::cpp__ident ivyc_s1::ext__ivy__ident__to_cpp(ivyc_s1::ivy__ident s, bool native){
    ivyc_s1::cpp__ident res;
    {
    }
    return res;
}
unsigned long long ivyc_s1::ext__vector__ivy__ident____domain__next(unsigned long long x){
    unsigned long long y;
    y = (unsigned long long)___ivy_choose(0,"fml:y",0);
    {
        y = (x + 1);
    }
    return y;
}
void ivyc_s1::ext__pstate__consume(pstate& st){
    {
        ext__lex(st);
    }
}
void ivyc_s1::ext__vector__ivy__stmt____append(vector__ivy__stmt__& a, ivyc_s1::ivy__stmt v){
    {

        a.push_back(v);
    }
}
void ivyc_s1::ext__ivy__expr__parse(pstate& st, int prio, ivyc_s1::ivy__expr& res){
    {
        if((st.tok == __lit<str>("("))){
            {
                ext__pstate__consume(st);
                ext__ivy__expr__parse(st, 0, res);
                if((st.ok && (st.tok == __lit<str>(")")))){
                    {
                        ext__pstate__consume(st);
                    }
                }
                else {
                    {
                        st.ok = false;
                    }
                }
            }
        }
        else {
            {
                ivy__verb loc__vrb;
    loc__vrb = (ivy__verb)___ivy_choose(0,"loc:vrb",16219);
                {
                    loc__vrb = ivy__str_to_verb[st.tok];
                    if((!(loc__vrb == ivy__verb__none) && (ivy__verb_to_arity[loc__vrb] == 1))){
                        {
                            {
                                ivy__app loc__s;
                                {
                                    loc__s.func = ext__ivy__symbol__makestr(st.tok, loc__s.ann);
                                    ext__pstate__consume(st);
                                    {
                                        ivyc_s1::ivy__expr loc__arg;
                                        {
                                            ext__ivy__expr__parse(st, ivy__verb_to_prio[loc__vrb], loc__arg);
                                            ext__vector__ivy__expr____append(loc__s.args, loc__arg);
                                            res = ivyc_s1::ivy__expr(1, new ivyc_s1::ivy__expr::twrap<ivyc_s1::ivy__app>(loc__s));
                                        }
                                    }
                                }
                            }
                        }
                    }
                    else {
                        {
                            ext__ivy__symbol__parse(st, res);
                        }
                    }
                }
            }
        }
        {
            ivy__verb loc__vrb;
    loc__vrb = (ivy__verb)___ivy_choose(0,"loc:vrb",16222);
            {
                loc__vrb = ivy__str_to_verb[st.tok];
                while((st.ok && !(loc__vrb == ivy__verb__none) && (prio < ivy__verb_to_prio[loc__vrb]))){
                    {
                        {
                            ivy__app loc__s;
                            {
                                ext__pstate__get_ann(st, loc__s.ann);
                                if((loc__vrb == ivy__verb__app)){
                                    {
                                        loc__s.func = res;
                                        ext__ivy__expr__tup__parse(st, 1, loc__s.args);
                                    }
                                }
                                else {
                                    {
                                        loc__s.func = ext__ivy__symbol__makestr(st.tok, loc__s.ann);
                                        ext__pstate__consume(st);
                                        ext__vector__ivy__expr____append(loc__s.args, res);
                                        {
                                            ivyc_s1::ivy__expr loc__arg;
                                            {
                                                ext__ivy__expr__parse(st, ivy__verb_to_prio[loc__vrb], loc__arg);
                                                ext__vector__ivy__expr____append(loc__s.args, loc__arg);
                                                if((st.ok && (loc__vrb == ivy__verb__ite))){
                                                    if((st.tok == (false ? __lit<str>(":") : __lit<str>("else")))){
                                                        {
                                                            ext__pstate__consume(st);
                                                            ext__ivy__expr__parse(st, ivy__verb_to_prio[loc__vrb], loc__arg);
                                                            ext__vector__ivy__expr____append(loc__s.args, loc__arg);
                                                        }
                                                    }
                                                    else {
                                                        st.ok = false;
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                                res = ivyc_s1::ivy__expr(1, new ivyc_s1::ivy__expr::twrap<ivyc_s1::ivy__app>(loc__s));
                                loc__vrb = ivy__str_to_verb[st.tok];
                            }
                        }
                    }
                }
            }
        }
    }
}
unsigned long long ivyc_s1::ext__vector__ivy__lvalue_count____domain__next(unsigned long long x){
    unsigned long long y;
    y = (unsigned long long)___ivy_choose(0,"fml:y",0);
    {
        y = (x + 1);
    }
    return y;
}
ivyc_s1::cpp__expr ivyc_s1::ext__ivy__full_action_name(ivyc_s1::ivy__expr name, bool is_member, ivy__tocppst& st){
    ivyc_s1::cpp__expr res;
    if(is_member){
        {
            {
                ivyc_s1::ivy__ident loc__0;
                ivyc_s1::ivy__ident loc__1;
                {
                    {
                        ivy__symbol self__COLON__ivy__symbol;
                        if (((name).tag == 0)) self__COLON__ivy__symbol = ivyc_s1::ivy__expr::unwrap< ivyc_s1::ivy__symbol >(name);
                        if(((name).tag == 0)){
                            loc__0 = ext__ivy__symbol__get_name(self__COLON__ivy__symbol);
                        }
                        else {
                            loc__0 = ext__ivy__expr__get_name(name);
                        }
                    }
                    {
                        ivy__dotident self__COLON__ivy__dotident;
                        if (((loc__0).tag == 2)) self__COLON__ivy__dotident = ivyc_s1::ivy__ident::unwrap< ivyc_s1::ivy__dotident >(loc__0);
                        if(((loc__0).tag == 2)){
                            loc__1 = ext__ivy__dotident__get_namesp(self__COLON__ivy__dotident);
                        }
                        else {
                            loc__1 = ext__ivy__ident__get_namesp(loc__0);
                        }
                    }
                    {
                        ivyc_s1::ivy__ident loc__pref;
                        {
                            loc__pref = loc__1;
                            {
                                ivyc_s1::ivy__ident loc__0;
                                {
                                    ivyc_s1::ivy__ident __tmp46;
                                    __tmp46 = loc__pref; ext__ivy__fix_object_clash(__tmp46, st);
                                    loc__0 = __tmp46;
                                    {
                                        ivyc_s1::ivy__ident loc__clsid;
                                        {
                                            loc__clsid = loc__0;
                                            {
                                                ivyc_s1::ivy__ident loc__0;
                                                ivyc_s1::ivy__ident loc__1;
                                                ivyc_s1::ivy__ident loc__2;
                                                {
                                                    {
                                                        ivy__symbol self__COLON__ivy__symbol;
                                                        if (((name).tag == 0)) self__COLON__ivy__symbol = ivyc_s1::ivy__expr::unwrap< ivyc_s1::ivy__symbol >(name);
                                                        if(((name).tag == 0)){
                                                            loc__0 = ext__ivy__symbol__get_name(self__COLON__ivy__symbol);
                                                        }
                                                        else {
                                                            loc__0 = ext__ivy__expr__get_name(name);
                                                        }
                                                    }
                                                    {
                                                        ivy__dotident self__COLON__ivy__dotident;
                                                        if (((loc__0).tag == 2)) self__COLON__ivy__dotident = ivyc_s1::ivy__ident::unwrap< ivyc_s1::ivy__dotident >(loc__0);
                                                        if(((loc__0).tag == 2)){
                                                            loc__1 = ext__ivy__dotident__get_member(self__COLON__ivy__dotident);
                                                        }
                                                        else {
                                                            loc__1 = ext__ivy__ident__get_member(loc__0);
                                                        }
                                                    }
                                                    {
                                                        ivy__dotident self__COLON__ivy__dotident;
                                                        if (((loc__1).tag == 2)) self__COLON__ivy__dotident = ivyc_s1::ivy__ident::unwrap< ivyc_s1::ivy__dotident >(loc__1);
                                                        if(((loc__1).tag == 2)){
                                                            loc__2 = ext__ivy__dotident__prefix(self__COLON__ivy__dotident, loc__clsid);
                                                        }
                                                        else {
                                                            {
                                                                ivy__strident self__COLON__ivy__strident;
                                                                if (((loc__1).tag == 0)) self__COLON__ivy__strident = ivyc_s1::ivy__ident::unwrap< ivyc_s1::ivy__strident >(loc__1);
                                                                if(((loc__1).tag == 0)){
                                                                    loc__2 = ext__ivy__strident__prefix(self__COLON__ivy__strident, loc__clsid);
                                                                }
                                                                else {
                                                                    loc__2 = ext__ivy__ident__prefix(loc__1, loc__clsid);
                                                                }
                                                            }
                                                        }
                                                    }
                                                    {
                                                        ivyc_s1::ivy__ident loc__funid;
                                                        {
                                                            loc__funid = loc__2;
                                                            {
                                                                ivyc_s1::cpp__ident loc__0;
                                                                ivyc_s1::annot loc__1;
                                                                {
                                                                    {
                                                                        ivy__dotident self__COLON__ivy__dotident;
                                                                        if (((loc__funid).tag == 2)) self__COLON__ivy__dotident = ivyc_s1::ivy__ident::unwrap< ivyc_s1::ivy__dotident >(loc__funid);
                                                                        if(((loc__funid).tag == 2)){
                                                                            loc__0 = ext__ivy__dotident__to_cpp(self__COLON__ivy__dotident, false);
                                                                        }
                                                                        else {
                                                                            {
                                                                                ivy__strident self__COLON__ivy__strident;
                                                                                if (((loc__funid).tag == 0)) self__COLON__ivy__strident = ivyc_s1::ivy__ident::unwrap< ivyc_s1::ivy__strident >(loc__funid);
                                                                                if(((loc__funid).tag == 0)){
                                                                                    loc__0 = ext__ivy__strident__to_cpp(self__COLON__ivy__strident, false);
                                                                                }
                                                                                else {
                                                                                    loc__0 = ext__ivy__ident__to_cpp(loc__funid, false);
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                    {
                                                                        ivy__app self__COLON__ivy__app;
                                                                        if (((name).tag == 1)) self__COLON__ivy__app = ivyc_s1::ivy__expr::unwrap< ivyc_s1::ivy__app >(name);
                                                                        if(((name).tag == 1)){
                                                                            loc__1 = ext__ivy__app__get_ann(self__COLON__ivy__app);
                                                                        }
                                                                        else {
                                                                            {
                                                                                ivy__symbol self__COLON__ivy__symbol;
                                                                                if (((name).tag == 0)) self__COLON__ivy__symbol = ivyc_s1::ivy__expr::unwrap< ivyc_s1::ivy__symbol >(name);
                                                                                if(((name).tag == 0)){
                                                                                    loc__1 = ext__ivy__symbol__get_ann(self__COLON__ivy__symbol);
                                                                                }
                                                                                else {
                                                                                    loc__1 = ext__ivy__expr__get_ann(name);
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                    res = ext__cpp__symbol__make(loc__0, loc__1);
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
    }
    else {
        {
            ivy__app self__COLON__ivy__app;
            if (((name).tag == 1)) self__COLON__ivy__app = ivyc_s1::ivy__expr::unwrap< ivyc_s1::ivy__app >(name);
            if(((name).tag == 1)){
                res = ext__ivy__app__to_cpp(self__COLON__ivy__app, st);
            }
            else {
                {
                    ivy__symbol self__COLON__ivy__symbol;
                    if (((name).tag == 0)) self__COLON__ivy__symbol = ivyc_s1::ivy__expr::unwrap< ivyc_s1::ivy__symbol >(name);
                    if(((name).tag == 0)){
                        res = ext__ivy__symbol__to_cpp(self__COLON__ivy__symbol, st);
                    }
                    else {
                        res = ext__ivy__expr__to_cpp(name, st);
                    }
                }
            }
        }
    }
    return res;
}
void ivyc_s1::ext__ivy__add_numeric_cons(cpp__structdecl& s){
    {
        {
            cpp__funcdecl loc__0;
    loc__0.ftype.base.is_const = (bool)___ivy_choose(0,"loc:0",16232);
    loc__0.ftype.base.is_ref = (bool)___ivy_choose(0,"loc:0",16232);
    loc__0.ftype.is_const = (bool)___ivy_choose(0,"loc:0",16232);
    loc__0.ftype.has_initializer = (bool)___ivy_choose(0,"loc:0",16232);
    loc__0.has_body = (bool)___ivy_choose(0,"loc:0",16232);
    loc__0.is_static = (bool)___ivy_choose(0,"loc:0",16232);
    loc__0.is_virtual = (bool)___ivy_choose(0,"loc:0",16232);
            {
                loc__0 = ext__ivy__make_cpp_cons(s);
                {
                    cpp__funcdecl loc__ncons;
    loc__ncons.ftype.base.is_const = (bool)___ivy_choose(0,"loc:ncons",16231);
    loc__ncons.ftype.base.is_ref = (bool)___ivy_choose(0,"loc:ncons",16231);
    loc__ncons.ftype.is_const = (bool)___ivy_choose(0,"loc:ncons",16231);
    loc__ncons.ftype.has_initializer = (bool)___ivy_choose(0,"loc:ncons",16231);
    loc__ncons.has_body = (bool)___ivy_choose(0,"loc:ncons",16231);
    loc__ncons.is_static = (bool)___ivy_choose(0,"loc:ncons",16231);
    loc__ncons.is_virtual = (bool)___ivy_choose(0,"loc:ncons",16231);
                    {
                        loc__ncons = loc__0;
                        {
                            cpp__simpletype loc__nconsarg0;
    loc__nconsarg0.is_const = (bool)___ivy_choose(0,"loc:nconsarg0",16230);
    loc__nconsarg0.is_ref = (bool)___ivy_choose(0,"loc:nconsarg0",16230);
                            {
                                loc__nconsarg0._type = ext__cpp__symbol__makestr(__lit<str>("long long"), s.ann);
                                loc__nconsarg0.name = ext__cpp__symbol__makestr(__lit<str>("value"), loc__ncons.ann);
                                ext__vector__cpp__simpletype____append(loc__ncons.ftype.args, loc__nconsarg0);
                                ext__vector__cpp__decl____append(s.members, ivyc_s1::cpp__decl(4, new ivyc_s1::cpp__decl::twrap<ivyc_s1::cpp__funcdecl>(loc__ncons)));
                            }
                        }
                    }
                }
            }
        }
    }
}
void ivyc_s1::ext__get_line(pstate& st, str& line){
    {
        {
            unsigned long long loc__start;
    loc__start = (unsigned long long)___ivy_choose(0,"loc:start",16233);
            {
                loc__start = st.p;
                while(((st.p < str__end(st.b)) && !(str__value(st.b,st.p) == 10))){
                    st.p = ext__pos__next(st.p);
                }
                line = str__segment(st.b,loc__start,st.p);
                if((st.p < str__end(st.b))){
                    {
                        st.ann.line = ext__pos__next(st.ann.line);
                        st.p = ext__pos__next(st.p);
                    }
                }
            }
        }
    }
}
void ivyc_s1::ext__ivy__symeval__get(const ivy__symeval& a, ivyc_s1::ivy__ident x, ivyc_s1::ivy__expr& y){
    {

        ivy__symeval::const_iterator it = a.find(x);
        if (it != a.end())
            y = it->second;
    }
}
ivyc_s1::ivy__type_clash ivyc_s1::ext__ivy__type_clash__make(ivyc_s1::ivy__expr e, ivyc_s1::ivy__expr t1, ivyc_s1::ivy__expr t2){
    ivyc_s1::ivy__type_clash res;
    {
        res.e = e;
        res.t1 = t1;
        res.t2 = t2;
    }
    return res;
}
ivyc_s1::ivy__ifst ivyc_s1::ext__ivy__ifst__flat_int(const ivy__ifst& s, ivy__flatst& st){
    ivyc_s1::ivy__ifst res;
    {
        res = s;
        {
            ivy__app self__COLON__ivy__app;
            if (((res.cond).tag == 1)) self__COLON__ivy__app = ivyc_s1::ivy__expr::unwrap< ivyc_s1::ivy__app >(res.cond);
            if(((res.cond).tag == 1)){
                res.cond = ext__ivy__app__flat(self__COLON__ivy__app, st);
            }
            else {
                {
                    ivy__symbol self__COLON__ivy__symbol;
                    if (((res.cond).tag == 0)) self__COLON__ivy__symbol = ivyc_s1::ivy__expr::unwrap< ivyc_s1::ivy__symbol >(res.cond);
                    if(((res.cond).tag == 0)){
                        res.cond = ext__ivy__symbol__flat(self__COLON__ivy__symbol, st);
                    }
                    else {
                        res.cond = ext__ivy__expr__flat(res.cond, st);
                    }
                }
            }
        }
        {
            ivy__varst self__COLON__ivy__varst;
            if (((res.thenst).tag == 6)) self__COLON__ivy__varst = ivyc_s1::ivy__stmt::unwrap< ivyc_s1::ivy__varst >(res.thenst);
            if(((res.thenst).tag == 6)){
                res.thenst = ext__ivy__varst__flat(self__COLON__ivy__varst, st);
            }
            else {
                {
                    ivy__whilest self__COLON__ivy__whilest;
                    if (((res.thenst).tag == 4)) self__COLON__ivy__whilest = ivyc_s1::ivy__stmt::unwrap< ivyc_s1::ivy__whilest >(res.thenst);
                    if(((res.thenst).tag == 4)){
                        res.thenst = ext__ivy__whilest__flat(self__COLON__ivy__whilest, st);
                    }
                    else {
                        {
                            ivy__ifst self__COLON__ivy__ifst;
                            if (((res.thenst).tag == 3)) self__COLON__ivy__ifst = ivyc_s1::ivy__stmt::unwrap< ivyc_s1::ivy__ifst >(res.thenst);
                            if(((res.thenst).tag == 3)){
                                res.thenst = ext__ivy__ifst__flat(self__COLON__ivy__ifst, st);
                            }
                            else {
                                {
                                    ivy__sequence self__COLON__ivy__sequence;
                                    if (((res.thenst).tag == 1)) self__COLON__ivy__sequence = ivyc_s1::ivy__stmt::unwrap< ivyc_s1::ivy__sequence >(res.thenst);
                                    if(((res.thenst).tag == 1)){
                                        res.thenst = ext__ivy__sequence__flat(self__COLON__ivy__sequence, st);
                                    }
                                    else {
                                        {
                                            ivy__asgn self__COLON__ivy__asgn;
                                            if (((res.thenst).tag == 0)) self__COLON__ivy__asgn = ivyc_s1::ivy__stmt::unwrap< ivyc_s1::ivy__asgn >(res.thenst);
                                            if(((res.thenst).tag == 0)){
                                                res.thenst = ext__ivy__asgn__flat(self__COLON__ivy__asgn, st);
                                            }
                                            else {
                                                res.thenst = ext__ivy__stmt__flat(res.thenst, st);
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
        {
            ivy__varst self__COLON__ivy__varst;
            if (((res.elsest).tag == 6)) self__COLON__ivy__varst = ivyc_s1::ivy__stmt::unwrap< ivyc_s1::ivy__varst >(res.elsest);
            if(((res.elsest).tag == 6)){
                res.elsest = ext__ivy__varst__flat(self__COLON__ivy__varst, st);
            }
            else {
                {
                    ivy__whilest self__COLON__ivy__whilest;
                    if (((res.elsest).tag == 4)) self__COLON__ivy__whilest = ivyc_s1::ivy__stmt::unwrap< ivyc_s1::ivy__whilest >(res.elsest);
                    if(((res.elsest).tag == 4)){
                        res.elsest = ext__ivy__whilest__flat(self__COLON__ivy__whilest, st);
                    }
                    else {
                        {
                            ivy__ifst self__COLON__ivy__ifst;
                            if (((res.elsest).tag == 3)) self__COLON__ivy__ifst = ivyc_s1::ivy__stmt::unwrap< ivyc_s1::ivy__ifst >(res.elsest);
                            if(((res.elsest).tag == 3)){
                                res.elsest = ext__ivy__ifst__flat(self__COLON__ivy__ifst, st);
                            }
                            else {
                                {
                                    ivy__sequence self__COLON__ivy__sequence;
                                    if (((res.elsest).tag == 1)) self__COLON__ivy__sequence = ivyc_s1::ivy__stmt::unwrap< ivyc_s1::ivy__sequence >(res.elsest);
                                    if(((res.elsest).tag == 1)){
                                        res.elsest = ext__ivy__sequence__flat(self__COLON__ivy__sequence, st);
                                    }
                                    else {
                                        {
                                            ivy__asgn self__COLON__ivy__asgn;
                                            if (((res.elsest).tag == 0)) self__COLON__ivy__asgn = ivyc_s1::ivy__stmt::unwrap< ivyc_s1::ivy__asgn >(res.elsest);
                                            if(((res.elsest).tag == 0)){
                                                res.elsest = ext__ivy__asgn__flat(self__COLON__ivy__asgn, st);
                                            }
                                            else {
                                                res.elsest = ext__ivy__stmt__flat(res.elsest, st);
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
    }
    return res;
}
ivyc_s1::annot ivyc_s1::ext__ivy__whilest__get_ann(const ivy__whilest& s){
    ivyc_s1::annot res;
    res = s.ann;
    return res;
}
void ivyc_s1::ext__cpp__asgn__encode_int(const cpp__asgn& s, pretty& b, int prio){
    {
        ext__pretty__nest(b);
        {
            cpp__verb loc__0;
    loc__0 = (cpp__verb)___ivy_choose(0,"loc:0",16234);
            {
                {
                    cpp__symbol self__COLON__cpp__symbol;
                    if (((s.lhs).tag == 0)) self__COLON__cpp__symbol = ivyc_s1::cpp__expr::unwrap< ivyc_s1::cpp__symbol >(s.lhs);
                    if(((s.lhs).tag == 0)){
                        loc__0 = ext__cpp__symbol__get_verb(self__COLON__cpp__symbol);
                    }
                    else {
                        loc__0 = ext__cpp__expr__get_verb(s.lhs);
                    }
                }
                if(!(loc__0 == cpp__verb__empty)){
                    {
                        {
                            cpp__pi self__COLON__cpp__pi;
                            if (((s.lhs).tag == 3)) self__COLON__cpp__pi = ivyc_s1::cpp__expr::unwrap< ivyc_s1::cpp__pi >(s.lhs);
                            if(((s.lhs).tag == 3)){
                                ext__cpp__pi__encode(self__COLON__cpp__pi, b, 0);
                            }
                            else {
                                {
                                    cpp__app self__COLON__cpp__app;
                                    if (((s.lhs).tag == 1)) self__COLON__cpp__app = ivyc_s1::cpp__expr::unwrap< ivyc_s1::cpp__app >(s.lhs);
                                    if(((s.lhs).tag == 1)){
                                        ext__cpp__app__encode(self__COLON__cpp__app, b, 0);
                                    }
                                    else {
                                        {
                                            cpp__symbol self__COLON__cpp__symbol;
                                            if (((s.lhs).tag == 0)) self__COLON__cpp__symbol = ivyc_s1::cpp__expr::unwrap< ivyc_s1::cpp__symbol >(s.lhs);
                                            if(((s.lhs).tag == 0)){
                                                ext__cpp__symbol__encode(self__COLON__cpp__symbol, b, 0);
                                            }
                                            else {
                                                ext__cpp__expr__encode(s.lhs, b, 0);
                                            }
                                        }
                                    }
                                }
                            }
                        }
                        ext__pretty__extend(b, __lit<str>(" "));
                        ext__pretty__extend(b, __lit<str>("="));
                        ext__pretty__extend(b, __lit<str>(" "));
                    }
                }
            }
        }
        {
            cpp__pi self__COLON__cpp__pi;
            if (((s.rhs).tag == 3)) self__COLON__cpp__pi = ivyc_s1::cpp__expr::unwrap< ivyc_s1::cpp__pi >(s.rhs);
            if(((s.rhs).tag == 3)){
                ext__cpp__pi__encode(self__COLON__cpp__pi, b, 0);
            }
            else {
                {
                    cpp__app self__COLON__cpp__app;
                    if (((s.rhs).tag == 1)) self__COLON__cpp__app = ivyc_s1::cpp__expr::unwrap< ivyc_s1::cpp__app >(s.rhs);
                    if(((s.rhs).tag == 1)){
                        ext__cpp__app__encode(self__COLON__cpp__app, b, 0);
                    }
                    else {
                        {
                            cpp__symbol self__COLON__cpp__symbol;
                            if (((s.rhs).tag == 0)) self__COLON__cpp__symbol = ivyc_s1::cpp__expr::unwrap< ivyc_s1::cpp__symbol >(s.rhs);
                            if(((s.rhs).tag == 0)){
                                ext__cpp__symbol__encode(self__COLON__cpp__symbol, b, 0);
                            }
                            else {
                                ext__cpp__expr__encode(s.rhs, b, 0);
                            }
                        }
                    }
                }
            }
        }
        ext__pretty__extend(b, __lit<str>(";"));
        ext__pretty__unnest(b);
    }
}
ivyc_s1::cpp__expr ivyc_s1::ext__ivy__app__to_cpp(const ivy__app& s, ivy__tocppst& st){
    ivyc_s1::cpp__expr res;
    {
        bool loc__0;
    loc__0 = (bool)___ivy_choose(0,"loc:0",16277);
        {
            loc__0 = ext__ivy__app__is(s, ivy__verb__colon);
            if(loc__0){
                {
                    ivyc_s1::ivy__expr loc__arg;
                    {
                        loc__arg = vector__ivy__expr____value(s.args,0);
                        {
                            ivy__app self__COLON__ivy__app;
                            if (((loc__arg).tag == 1)) self__COLON__ivy__app = ivyc_s1::ivy__expr::unwrap< ivyc_s1::ivy__app >(loc__arg);
                            if(((loc__arg).tag == 1)){
                                res = ext__ivy__app__to_cpp(self__COLON__ivy__app, st);
                            }
                            else {
                                {
                                    ivy__symbol self__COLON__ivy__symbol;
                                    if (((loc__arg).tag == 0)) self__COLON__ivy__symbol = ivyc_s1::ivy__expr::unwrap< ivyc_s1::ivy__symbol >(loc__arg);
                                    if(((loc__arg).tag == 0)){
                                        res = ext__ivy__symbol__to_cpp(self__COLON__ivy__symbol, st);
                                    }
                                    else {
                                        res = ext__ivy__expr__to_cpp(loc__arg, st);
                                    }
                                }
                            }
                        }
                        if(((loc__arg).tag == 0)){
                            {
                                ivy__verb loc__0;
    loc__0 = (ivy__verb)___ivy_choose(0,"loc:0",16246);
                                ivy__verb loc__1;
    loc__1 = (ivy__verb)___ivy_choose(0,"loc:1",16246);
                                {
                                    {
                                        ivy__symbol self__COLON__ivy__symbol;
                                        if (((loc__arg).tag == 0)) self__COLON__ivy__symbol = ivyc_s1::ivy__expr::unwrap< ivyc_s1::ivy__symbol >(loc__arg);
                                        if(((loc__arg).tag == 0)){
                                            loc__0 = ext__ivy__symbol__get_verb(self__COLON__ivy__symbol);
                                        }
                                        else {
                                            loc__0 = ext__ivy__expr__get_verb(loc__arg);
                                        }
                                    }
                                    {
                                        ivy__symbol self__COLON__ivy__symbol;
                                        if (((loc__arg).tag == 0)) self__COLON__ivy__symbol = ivyc_s1::ivy__expr::unwrap< ivyc_s1::ivy__symbol >(loc__arg);
                                        if(((loc__arg).tag == 0)){
                                            loc__1 = ext__ivy__symbol__get_verb(self__COLON__ivy__symbol);
                                        }
                                        else {
                                            loc__1 = ext__ivy__expr__get_verb(loc__arg);
                                        }
                                    }
                                    if(((loc__0 == ivy__verb__truev) || (loc__1 == ivy__verb__falsev))){
                                        {
                                            {
                                                ivyc_s1::annot loc__0;
                                                ivyc_s1::cpp__expr loc__1;
                                                ivyc_s1::annot loc__2;
                                                {
                                                    loc__0 = ext__ivy__app__get_ann(s);
                                                    loc__1 = ext__cpp__symbol__makestr(__lit<str>("ivy::native_bool"), loc__0);
                                                    loc__2 = ext__ivy__app__get_ann(s);
                                                    res = ext__cpp__app__make1(loc__1, res, loc__2);
                                                }
                                            }
                                        }
                                    }
                                    else {
                                        {
                                            ivy__verb loc__0;
    loc__0 = (ivy__verb)___ivy_choose(0,"loc:0",16245);
                                            ivyc_s1::ivy__ident loc__1;
                                            bool loc__2;
    loc__2 = (bool)___ivy_choose(0,"loc:2",16245);
                                            {
                                                {
                                                    ivy__symbol self__COLON__ivy__symbol;
                                                    if (((loc__arg).tag == 0)) self__COLON__ivy__symbol = ivyc_s1::ivy__expr::unwrap< ivyc_s1::ivy__symbol >(loc__arg);
                                                    if(((loc__arg).tag == 0)){
                                                        loc__0 = ext__ivy__symbol__get_verb(self__COLON__ivy__symbol);
                                                    }
                                                    else {
                                                        loc__0 = ext__ivy__expr__get_verb(loc__arg);
                                                    }
                                                }
                                                {
                                                    ivy__symbol self__COLON__ivy__symbol;
                                                    if (((loc__arg).tag == 0)) self__COLON__ivy__symbol = ivyc_s1::ivy__expr::unwrap< ivyc_s1::ivy__symbol >(loc__arg);
                                                    if(((loc__arg).tag == 0)){
                                                        loc__1 = ext__ivy__symbol__get_name(self__COLON__ivy__symbol);
                                                    }
                                                    else {
                                                        loc__1 = ext__ivy__expr__get_name(loc__arg);
                                                    }
                                                }
                                                loc__2 = ext__ivy__ident_set__mem(st.constructors, loc__1);
                                                if(((loc__0 == ivy__verb__numeral) || loc__2)){
                                                    {
                                                        {
                                                            ivyc_s1::cpp__expr loc__ty;
                                                            {
                                                                {
                                                                    ivy__app self__COLON__ivy__app;
                                                                    if (((vector__ivy__expr____value(s.args,1)).tag == 1)) self__COLON__ivy__app = ivyc_s1::ivy__expr::unwrap< ivyc_s1::ivy__app >(vector__ivy__expr____value(s.args,1));
                                                                    if(((vector__ivy__expr____value(s.args,1)).tag == 1)){
                                                                        loc__ty = ext__ivy__app__to_cpp(self__COLON__ivy__app, st);
                                                                    }
                                                                    else {
                                                                        {
                                                                            ivy__symbol self__COLON__ivy__symbol;
                                                                            if (((vector__ivy__expr____value(s.args,1)).tag == 0)) self__COLON__ivy__symbol = ivyc_s1::ivy__expr::unwrap< ivyc_s1::ivy__symbol >(vector__ivy__expr____value(s.args,1));
                                                                            if(((vector__ivy__expr____value(s.args,1)).tag == 0)){
                                                                                loc__ty = ext__ivy__symbol__to_cpp(self__COLON__ivy__symbol, st);
                                                                            }
                                                                            else {
                                                                                loc__ty = ext__ivy__expr__to_cpp(vector__ivy__expr____value(s.args,1), st);
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                                {
                                                                    ivyc_s1::annot loc__0;
                                                                    {
                                                                        loc__0 = ext__ivy__app__get_ann(s);
                                                                        res = ext__cpp__app__make1(loc__ty, res, loc__0);
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                                else {
                                                    {
                                                        ivy__verb loc__0;
    loc__0 = (ivy__verb)___ivy_choose(0,"loc:0",16244);
                                                        {
                                                            {
                                                                ivy__symbol self__COLON__ivy__symbol;
                                                                if (((loc__arg).tag == 0)) self__COLON__ivy__symbol = ivyc_s1::ivy__expr::unwrap< ivyc_s1::ivy__symbol >(loc__arg);
                                                                if(((loc__arg).tag == 0)){
                                                                    loc__0 = ext__ivy__symbol__get_verb(self__COLON__ivy__symbol);
                                                                }
                                                                else {
                                                                    loc__0 = ext__ivy__expr__get_verb(loc__arg);
                                                                }
                                                            }
                                                            if((loc__0 == ivy__verb__string)){
                                                                {
                                                                    {
                                                                        ivyc_s1::cpp__expr loc__ty;
                                                                        {
                                                                            {
                                                                                ivy__app self__COLON__ivy__app;
                                                                                if (((vector__ivy__expr____value(s.args,1)).tag == 1)) self__COLON__ivy__app = ivyc_s1::ivy__expr::unwrap< ivyc_s1::ivy__app >(vector__ivy__expr____value(s.args,1));
                                                                                if(((vector__ivy__expr____value(s.args,1)).tag == 1)){
                                                                                    loc__ty = ext__ivy__app__to_cpp(self__COLON__ivy__app, st);
                                                                                }
                                                                                else {
                                                                                    {
                                                                                        ivy__symbol self__COLON__ivy__symbol;
                                                                                        if (((vector__ivy__expr____value(s.args,1)).tag == 0)) self__COLON__ivy__symbol = ivyc_s1::ivy__expr::unwrap< ivyc_s1::ivy__symbol >(vector__ivy__expr____value(s.args,1));
                                                                                        if(((vector__ivy__expr____value(s.args,1)).tag == 0)){
                                                                                            loc__ty = ext__ivy__symbol__to_cpp(self__COLON__ivy__symbol, st);
                                                                                        }
                                                                                        else {
                                                                                            loc__ty = ext__ivy__expr__to_cpp(vector__ivy__expr____value(s.args,1), st);
                                                                                        }
                                                                                    }
                                                                                }
                                                                            }
                                                                            {
                                                                                ivyc_s1::annot loc__0;
                                                                                {
                                                                                    loc__0 = ext__ivy__app__get_ann(s);
                                                                                    res = ext__ivy__make_from_string(loc__ty, res, loc__0);
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                            else {
                                                                {
                                                                    ivyc_s1::ivy__ident loc__0;
                                                                    bool loc__1;
    loc__1 = (bool)___ivy_choose(0,"loc:1",16243);
                                                                    {
                                                                        {
                                                                            ivy__symbol self__COLON__ivy__symbol;
                                                                            if (((loc__arg).tag == 0)) self__COLON__ivy__symbol = ivyc_s1::ivy__expr::unwrap< ivyc_s1::ivy__symbol >(loc__arg);
                                                                            if(((loc__arg).tag == 0)){
                                                                                loc__0 = ext__ivy__symbol__get_name(self__COLON__ivy__symbol);
                                                                            }
                                                                            else {
                                                                                loc__0 = ext__ivy__expr__get_name(loc__arg);
                                                                            }
                                                                        }
                                                                        loc__1 = ext__ivy__ident_set__mem(st.globals.is_action, loc__0);
                                                                        if(loc__1){
                                                                            {
                                                                                bool loc__0;
    loc__0 = (bool)___ivy_choose(0,"loc:0",16242);
                                                                                {
                                                                                    {
                                                                                        ivy__app self__COLON__ivy__app;
                                                                                        if (((vector__ivy__expr____value(s.args,1)).tag == 1)) self__COLON__ivy__app = ivyc_s1::ivy__expr::unwrap< ivyc_s1::ivy__app >(vector__ivy__expr____value(s.args,1));
                                                                                        if(((vector__ivy__expr____value(s.args,1)).tag == 1)){
                                                                                            loc__0 = ext__ivy__app__is(self__COLON__ivy__app, ivy__verb__arrow);
                                                                                        }
                                                                                        else {
                                                                                            loc__0 = ext__ivy__expr__is(vector__ivy__expr____value(s.args,1), ivy__verb__arrow);
                                                                                        }
                                                                                    }
                                                                                    if(!loc__0){
                                                                                        {
                                                                                            {
                                                                                                vector__cpp__expr__ loc__args;
                                                                                                {
                                                                                                    {
                                                                                                        ivyc_s1::annot loc__0;
                                                                                                        {
                                                                                                            {
                                                                                                                cpp__app self__COLON__cpp__app;
                                                                                                                if (((res).tag == 1)) self__COLON__cpp__app = ivyc_s1::cpp__expr::unwrap< ivyc_s1::cpp__app >(res);
                                                                                                                if(((res).tag == 1)){
                                                                                                                    loc__0 = ext__cpp__app__get_ann(self__COLON__cpp__app);
                                                                                                                }
                                                                                                                else {
                                                                                                                    {
                                                                                                                        cpp__symbol self__COLON__cpp__symbol;
                                                                                                                        if (((res).tag == 0)) self__COLON__cpp__symbol = ivyc_s1::cpp__expr::unwrap< ivyc_s1::cpp__symbol >(res);
                                                                                                                        if(((res).tag == 0)){
                                                                                                                            loc__0 = ext__cpp__symbol__get_ann(self__COLON__cpp__symbol);
                                                                                                                        }
                                                                                                                        else {
                                                                                                                            loc__0 = ext__cpp__expr__get_ann(res);
                                                                                                                        }
                                                                                                                    }
                                                                                                                }
                                                                                                            }
                                                                                                            res = ext__cpp__app__make(res, loc__args, loc__0);
                                                                                                        }
                                                                                                    }
                                                                                                }
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
            else {
                {
                    bool loc__0;
    loc__0 = (bool)___ivy_choose(0,"loc:0",16276);
                    {
                        loc__0 = ext__ivy__app__is(s, ivy__verb__arrow);
                        if(loc__0){
                            {
                                ivyc_s1::ivy__expr loc__tmp;
                                {
                                    loc__tmp = ivyc_s1::ivy__expr(1, new ivyc_s1::ivy__expr::twrap<ivyc_s1::ivy__app>(s));
                                    res = ext__ivy__function_type(loc__tmp, st);
                                }
                            }
                        }
                        else {
                            {
                                bool loc__0;
    loc__0 = (bool)___ivy_choose(0,"loc:0",16275);
                                {
                                    loc__0 = ext__ivy__app__is(s, ivy__verb__isav);
                                    if(loc__0){
                                        {
                                            ivyc_s1::cpp__expr loc__arg0;
                                            {
                                                {
                                                    ivyc_s1::cpp__expr loc__arg1;
                                                    {
                                                        {
                                                            ivy__app self__COLON__ivy__app;
                                                            if (((vector__ivy__expr____value(s.args,0)).tag == 1)) self__COLON__ivy__app = ivyc_s1::ivy__expr::unwrap< ivyc_s1::ivy__app >(vector__ivy__expr____value(s.args,0));
                                                            if(((vector__ivy__expr____value(s.args,0)).tag == 1)){
                                                                loc__arg0 = ext__ivy__app__to_cpp(self__COLON__ivy__app, st);
                                                            }
                                                            else {
                                                                {
                                                                    ivy__symbol self__COLON__ivy__symbol;
                                                                    if (((vector__ivy__expr____value(s.args,0)).tag == 0)) self__COLON__ivy__symbol = ivyc_s1::ivy__expr::unwrap< ivyc_s1::ivy__symbol >(vector__ivy__expr____value(s.args,0));
                                                                    if(((vector__ivy__expr____value(s.args,0)).tag == 0)){
                                                                        loc__arg0 = ext__ivy__symbol__to_cpp(self__COLON__ivy__symbol, st);
                                                                    }
                                                                    else {
                                                                        loc__arg0 = ext__ivy__expr__to_cpp(vector__ivy__expr____value(s.args,0), st);
                                                                    }
                                                                }
                                                            }
                                                        }
                                                        {
                                                            ivy__app self__COLON__ivy__app;
                                                            if (((vector__ivy__expr____value(s.args,1)).tag == 1)) self__COLON__ivy__app = ivyc_s1::ivy__expr::unwrap< ivyc_s1::ivy__app >(vector__ivy__expr____value(s.args,1));
                                                            if(((vector__ivy__expr____value(s.args,1)).tag == 1)){
                                                                loc__arg1 = ext__ivy__app__to_cpp(self__COLON__ivy__app, st);
                                                            }
                                                            else {
                                                                {
                                                                    ivy__symbol self__COLON__ivy__symbol;
                                                                    if (((vector__ivy__expr____value(s.args,1)).tag == 0)) self__COLON__ivy__symbol = ivyc_s1::ivy__expr::unwrap< ivyc_s1::ivy__symbol >(vector__ivy__expr____value(s.args,1));
                                                                    if(((vector__ivy__expr____value(s.args,1)).tag == 0)){
                                                                        loc__arg1 = ext__ivy__symbol__to_cpp(self__COLON__ivy__symbol, st);
                                                                    }
                                                                    else {
                                                                        loc__arg1 = ext__ivy__expr__to_cpp(vector__ivy__expr____value(s.args,1), st);
                                                                    }
                                                                }
                                                            }
                                                        }
                                                        {
                                                            bool loc__0;
    loc__0 = (bool)___ivy_choose(0,"loc:0",16252);
                                                            {
                                                                loc__0 = ext__ivy__is_cpp_this(loc__arg0);
                                                                if(loc__0){
                                                                    {
                                                                        ivyc_s1::cpp__expr __tmp47;
                                                                        __tmp47 = loc__arg0; ext__ivy__make_isa(__tmp47, loc__arg1);
                                                                        res = __tmp47;
                                                                    }
                                                                }
                                                                else {
                                                                    {
                                                                        {
                                                                            cpp__strident loc__isam;
                                                                            {
                                                                                loc__isam.val = __lit<str>("isa");
                                                                                {
                                                                                    ivyc_s1::cpp__ident loc__0;
                                                                                    {
                                                                                        {
                                                                                            cpp__symbol self__COLON__cpp__symbol;
                                                                                            if (((loc__arg1).tag == 0)) self__COLON__cpp__symbol = ivyc_s1::cpp__expr::unwrap< ivyc_s1::cpp__symbol >(loc__arg1);
                                                                                            if(((loc__arg1).tag == 0)){
                                                                                                loc__0 = ext__cpp__symbol__get_name(self__COLON__cpp__symbol);
                                                                                            }
                                                                                            else {
                                                                                                loc__0 = ext__cpp__expr__get_name(loc__arg1);
                                                                                            }
                                                                                        }
                                                                                        ext__vector__cpp__ident____append(loc__isam.subscrs, loc__0);
                                                                                    }
                                                                                }
                                                                                {
                                                                                    ivyc_s1::cpp__ident loc__id;
                                                                                    {
                                                                                        loc__id = ivyc_s1::cpp__ident(0, new ivyc_s1::cpp__ident::twrap<ivyc_s1::cpp__strident>(loc__isam));
                                                                                        res = ext__cpp__symbol__make(loc__id, s.ann);
                                                                                        res = ext__cpp__dot__make(loc__arg0, res, s.ann);
                                                                                        res = ext__cpp__app__make0(res, s.ann);
                                                                                    }
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                    else {
                                        {
                                            bool loc__0;
    loc__0 = (bool)___ivy_choose(0,"loc:0",16274);
                                            ivyc_s1::ivy__expr loc__1;
                                            ivy__verb loc__2;
    loc__2 = (ivy__verb)___ivy_choose(0,"loc:2",16274);
                                            {
                                                {
                                                    ivy__app self__COLON__ivy__app;
                                                    if (((s.func).tag == 1)) self__COLON__ivy__app = ivyc_s1::ivy__expr::unwrap< ivyc_s1::ivy__app >(s.func);
                                                    if(((s.func).tag == 1)){
                                                        loc__0 = ext__ivy__app__is(self__COLON__ivy__app, ivy__verb__colon);
                                                    }
                                                    else {
                                                        loc__0 = ext__ivy__expr__is(s.func, ivy__verb__colon);
                                                    }
                                                }
                                                {
                                                    ivy__app self__COLON__ivy__app;
                                                    if (((s.func).tag == 1)) self__COLON__ivy__app = ivyc_s1::ivy__expr::unwrap< ivyc_s1::ivy__app >(s.func);
                                                    if(((s.func).tag == 1)){
                                                        loc__1 = ext__ivy__app__get_arg(self__COLON__ivy__app, 0);
                                                    }
                                                    else {
                                                        loc__1 = ext__ivy__expr__get_arg(s.func, 0);
                                                    }
                                                }
                                                {
                                                    ivy__symbol self__COLON__ivy__symbol;
                                                    if (((loc__1).tag == 0)) self__COLON__ivy__symbol = ivyc_s1::ivy__expr::unwrap< ivyc_s1::ivy__symbol >(loc__1);
                                                    if(((loc__1).tag == 0)){
                                                        loc__2 = ext__ivy__symbol__get_verb(self__COLON__ivy__symbol);
                                                    }
                                                    else {
                                                        loc__2 = ext__ivy__expr__get_verb(loc__1);
                                                    }
                                                }
                                                if((loc__0 && (loc__2 == ivy__verb__castv))){
                                                    {
                                                        ivyc_s1::ivy__expr loc__0;
                                                        ivyc_s1::ivy__expr loc__1;
                                                        {
                                                            {
                                                                ivy__app self__COLON__ivy__app;
                                                                if (((s.func).tag == 1)) self__COLON__ivy__app = ivyc_s1::ivy__expr::unwrap< ivyc_s1::ivy__app >(s.func);
                                                                if(((s.func).tag == 1)){
                                                                    loc__0 = ext__ivy__app__get_arg(self__COLON__ivy__app, 1);
                                                                }
                                                                else {
                                                                    loc__0 = ext__ivy__expr__get_arg(s.func, 1);
                                                                }
                                                            }
                                                            {
                                                                ivy__app self__COLON__ivy__app;
                                                                if (((loc__0).tag == 1)) self__COLON__ivy__app = ivyc_s1::ivy__expr::unwrap< ivyc_s1::ivy__app >(loc__0);
                                                                if(((loc__0).tag == 1)){
                                                                    loc__1 = ext__ivy__app__get_arg(self__COLON__ivy__app, 1);
                                                                }
                                                                else {
                                                                    loc__1 = ext__ivy__expr__get_arg(loc__0, 1);
                                                                }
                                                            }
                                                            {
                                                                ivyc_s1::ivy__expr loc__ty;
                                                                {
                                                                    loc__ty = loc__1;
                                                                    res = ext__ivy__upcast(loc__ty, vector__ivy__expr____value(s.args,0), st);
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                                else {
                                                    {
                                                        ivyc_s1::ivy__expr loc__func;
                                                        {
                                                            {
                                                                vector__ivy__expr__ loc__args;
                                                                {
                                                                    loc__func = ext__ivy__get_app(ivyc_s1::ivy__expr(1, new ivyc_s1::ivy__expr::twrap<ivyc_s1::ivy__app>(s)), loc__args);
                                                                    {
                                                                        ivyc_s1::ivy__expr loc__0;
                                                                        ivyc_s1::ivy__ident loc__1;
                                                                        bool loc__2;
    loc__2 = (bool)___ivy_choose(0,"loc:2",16271);
                                                                        {
                                                                            {
                                                                                ivy__app self__COLON__ivy__app;
                                                                                if (((loc__func).tag == 1)) self__COLON__ivy__app = ivyc_s1::ivy__expr::unwrap< ivyc_s1::ivy__app >(loc__func);
                                                                                if(((loc__func).tag == 1)){
                                                                                    loc__0 = ext__ivy__app__get_arg(self__COLON__ivy__app, 0);
                                                                                }
                                                                                else {
                                                                                    loc__0 = ext__ivy__expr__get_arg(loc__func, 0);
                                                                                }
                                                                            }
                                                                            {
                                                                                ivy__symbol self__COLON__ivy__symbol;
                                                                                if (((loc__0).tag == 0)) self__COLON__ivy__symbol = ivyc_s1::ivy__expr::unwrap< ivyc_s1::ivy__symbol >(loc__0);
                                                                                if(((loc__0).tag == 0)){
                                                                                    loc__1 = ext__ivy__symbol__get_name(self__COLON__ivy__symbol);
                                                                                }
                                                                                else {
                                                                                    loc__1 = ext__ivy__expr__get_name(loc__0);
                                                                                }
                                                                            }
                                                                            loc__2 = ext__ivy__ident_set__mem(st.globals.is_action, loc__1);
                                                                            if(loc__2){
                                                                                {
                                                                                    res = ext__ivy__call_to_cpp(loc__func, loc__args, s.ann, st);
                                                                                }
                                                                            }
                                                                            else {
                                                                                {
                                                                                    {
                                                                                        cpp__app loc__capp;
                                                                                        {
                                                                                            {
                                                                                                ivy__app self__COLON__ivy__app;
                                                                                                if (((s.func).tag == 1)) self__COLON__ivy__app = ivyc_s1::ivy__expr::unwrap< ivyc_s1::ivy__app >(s.func);
                                                                                                if(((s.func).tag == 1)){
                                                                                                    loc__capp.func = ext__ivy__app__to_cpp(self__COLON__ivy__app, st);
                                                                                                }
                                                                                                else {
                                                                                                    {
                                                                                                        ivy__symbol self__COLON__ivy__symbol;
                                                                                                        if (((s.func).tag == 0)) self__COLON__ivy__symbol = ivyc_s1::ivy__expr::unwrap< ivyc_s1::ivy__symbol >(s.func);
                                                                                                        if(((s.func).tag == 0)){
                                                                                                            loc__capp.func = ext__ivy__symbol__to_cpp(self__COLON__ivy__symbol, st);
                                                                                                        }
                                                                                                        else {
                                                                                                            loc__capp.func = ext__ivy__expr__to_cpp(s.func, st);
                                                                                                        }
                                                                                                    }
                                                                                                }
                                                                                            }
                                                                                            {
                                                                                                vector__ivy__expr__ loc__save_outputs;
                                                                                                {
                                                                                                    loc__save_outputs = st.outputs;
                                                                                                    st.outputs = ext__vector__ivy__expr____empty();
                                                                                                    {
                                                                                                        unsigned long long loc__idx;
    loc__idx = (unsigned long long)___ivy_choose(0,"loc:idx",16268);
                                                                                                        {
                                                                                                            loc__idx = vector__ivy__expr____begin(s.args);
                                                                                                            while((loc__idx < vector__ivy__expr____end(s.args))){
                                                                                                                {
                                                                                                                    ivyc_s1::cpp__expr loc__arg;
                                                                                                                    {
                                                                                                                        {
                                                                                                                            ivy__verb loc__0;
    loc__0 = (ivy__verb)___ivy_choose(0,"loc:0",16257);
                                                                                                                            {
                                                                                                                                {
                                                                                                                                    ivy__symbol self__COLON__ivy__symbol;
                                                                                                                                    if (((s.func).tag == 0)) self__COLON__ivy__symbol = ivyc_s1::ivy__expr::unwrap< ivyc_s1::ivy__symbol >(s.func);
                                                                                                                                    if(((s.func).tag == 0)){
                                                                                                                                        loc__0 = ext__ivy__symbol__get_verb(self__COLON__ivy__symbol);
                                                                                                                                    }
                                                                                                                                    else {
                                                                                                                                        loc__0 = ext__ivy__expr__get_verb(s.func);
                                                                                                                                    }
                                                                                                                                }
                                                                                                                                if(((loc__0 == ivy__verb__dot) && (loc__idx == 1))){
                                                                                                                                    {
                                                                                                                                        st.dot_rhs = true;
                                                                                                                                    }
                                                                                                                                }
                                                                                                                            }
                                                                                                                        }
                                                                                                                        {
                                                                                                                            ivy__app self__COLON__ivy__app;
                                                                                                                            if (((vector__ivy__expr____value(s.args,loc__idx)).tag == 1)) self__COLON__ivy__app = ivyc_s1::ivy__expr::unwrap< ivyc_s1::ivy__app >(vector__ivy__expr____value(s.args,loc__idx));
                                                                                                                            if(((vector__ivy__expr____value(s.args,loc__idx)).tag == 1)){
                                                                                                                                loc__arg = ext__ivy__app__to_cpp(self__COLON__ivy__app, st);
                                                                                                                            }
                                                                                                                            else {
                                                                                                                                {
                                                                                                                                    ivy__symbol self__COLON__ivy__symbol;
                                                                                                                                    if (((vector__ivy__expr____value(s.args,loc__idx)).tag == 0)) self__COLON__ivy__symbol = ivyc_s1::ivy__expr::unwrap< ivyc_s1::ivy__symbol >(vector__ivy__expr____value(s.args,loc__idx));
                                                                                                                                    if(((vector__ivy__expr____value(s.args,loc__idx)).tag == 0)){
                                                                                                                                        loc__arg = ext__ivy__symbol__to_cpp(self__COLON__ivy__symbol, st);
                                                                                                                                    }
                                                                                                                                    else {
                                                                                                                                        loc__arg = ext__ivy__expr__to_cpp(vector__ivy__expr____value(s.args,loc__idx), st);
                                                                                                                                    }
                                                                                                                                }
                                                                                                                            }
                                                                                                                        }
                                                                                                                        st.dot_rhs = false;
                                                                                                                        ext__vector__cpp__expr____append(loc__capp.args, loc__arg);
                                                                                                                        loc__idx = ext__vector__ivy__expr____domain__next(loc__idx);
                                                                                                                    }
                                                                                                                }
                                                                                                            }
                                                                                                            st.outputs = loc__save_outputs;
                                                                                                            {
                                                                                                                bool loc__0;
    loc__0 = (bool)___ivy_choose(0,"loc:0",16260);
                                                                                                                {
                                                                                                                    loc__0 = ext__cpp__app__is(loc__capp, cpp__verb__ite);
                                                                                                                    if(loc__0){
                                                                                                                        {
                                                                                                                            {
                                                                                                                                ivyc_s1::cpp__expr loc__tmp;
                                                                                                                                {
                                                                                                                                    loc__tmp = vector__cpp__expr____value(loc__capp.args,0);
                                                                                                                                    ext__vector__cpp__expr____set(loc__capp.args, 0, vector__cpp__expr____value(loc__capp.args,1));
                                                                                                                                    ext__vector__cpp__expr____set(loc__capp.args, 1, loc__tmp);
                                                                                                                                }
                                                                                                                            }
                                                                                                                        }
                                                                                                                    }
                                                                                                                }
                                                                                                            }
                                                                                                            {
                                                                                                                ivy__verb loc__0;
    loc__0 = (ivy__verb)___ivy_choose(0,"loc:0",16267);
                                                                                                                {
                                                                                                                    {
                                                                                                                        ivy__symbol self__COLON__ivy__symbol;
                                                                                                                        if (((s.func).tag == 0)) self__COLON__ivy__symbol = ivyc_s1::ivy__expr::unwrap< ivyc_s1::ivy__symbol >(s.func);
                                                                                                                        if(((s.func).tag == 0)){
                                                                                                                            loc__0 = ext__ivy__symbol__get_verb(self__COLON__ivy__symbol);
                                                                                                                        }
                                                                                                                        else {
                                                                                                                            loc__0 = ext__ivy__expr__get_verb(s.func);
                                                                                                                        }
                                                                                                                    }
                                                                                                                    if((loc__0 == ivy__verb__dot)){
                                                                                                                        {
                                                                                                                            ivyc_s1::ivy__expr loc__lhs;
                                                                                                                            {
                                                                                                                                loc__lhs = vector__ivy__expr____value(s.args,0);
                                                                                                                                {
                                                                                                                                    bool loc__0;
    loc__0 = (bool)___ivy_choose(0,"loc:0",16265);
                                                                                                                                    {
                                                                                                                                        {
                                                                                                                                            ivy__app self__COLON__ivy__app;
                                                                                                                                            if (((loc__lhs).tag == 1)) self__COLON__ivy__app = ivyc_s1::ivy__expr::unwrap< ivyc_s1::ivy__app >(loc__lhs);
                                                                                                                                            if(((loc__lhs).tag == 1)){
                                                                                                                                                loc__0 = ext__ivy__app__is(self__COLON__ivy__app, ivy__verb__colon);
                                                                                                                                            }
                                                                                                                                            else {
                                                                                                                                                loc__0 = ext__ivy__expr__is(loc__lhs, ivy__verb__colon);
                                                                                                                                            }
                                                                                                                                        }
                                                                                                                                        if(loc__0){
                                                                                                                                            {
                                                                                                                                                ivyc_s1::ivy__expr loc__0;
                                                                                                                                                {
                                                                                                                                                    {
                                                                                                                                                        ivy__app self__COLON__ivy__app;
                                                                                                                                                        if (((loc__lhs).tag == 1)) self__COLON__ivy__app = ivyc_s1::ivy__expr::unwrap< ivyc_s1::ivy__app >(loc__lhs);
                                                                                                                                                        if(((loc__lhs).tag == 1)){
                                                                                                                                                            loc__0 = ext__ivy__app__get_arg(self__COLON__ivy__app, 1);
                                                                                                                                                        }
                                                                                                                                                        else {
                                                                                                                                                            loc__0 = ext__ivy__expr__get_arg(loc__lhs, 1);
                                                                                                                                                        }
                                                                                                                                                    }
                                                                                                                                                    {
                                                                                                                                                        ivyc_s1::ivy__expr loc__ty;
                                                                                                                                                        {
                                                                                                                                                            loc__ty = loc__0;
                                                                                                                                                            {
                                                                                                                                                                bool loc__0;
    loc__0 = (bool)___ivy_choose(0,"loc:0",16262);
                                                                                                                                                                bool loc__1;
    loc__1 = (bool)___ivy_choose(0,"loc:1",16262);
                                                                                                                                                                {
                                                                                                                                                                    loc__0 = ext__ivy__is_variant_type(loc__ty, st);
                                                                                                                                                                    loc__1 = ext__ivy__is_cpp_this(vector__cpp__expr____value(loc__capp.args,0));
                                                                                                                                                                    if((loc__0 && !loc__1)){
                                                                                                                                                                        {
                                                                                                                                                                            ivyc_s1::annot loc__0;
                                                                                                                                                                            {
                                                                                                                                                                                {
                                                                                                                                                                                    cpp__app self__COLON__cpp__app;
                                                                                                                                                                                    if (((loc__capp.func).tag == 1)) self__COLON__cpp__app = ivyc_s1::cpp__expr::unwrap< ivyc_s1::cpp__app >(loc__capp.func);
                                                                                                                                                                                    if(((loc__capp.func).tag == 1)){
                                                                                                                                                                                        loc__0 = ext__cpp__app__get_ann(self__COLON__cpp__app);
                                                                                                                                                                                    }
                                                                                                                                                                                    else {
                                                                                                                                                                                        {
                                                                                                                                                                                            cpp__symbol self__COLON__cpp__symbol;
                                                                                                                                                                                            if (((loc__capp.func).tag == 0)) self__COLON__cpp__symbol = ivyc_s1::cpp__expr::unwrap< ivyc_s1::cpp__symbol >(loc__capp.func);
                                                                                                                                                                                            if(((loc__capp.func).tag == 0)){
                                                                                                                                                                                                loc__0 = ext__cpp__symbol__get_ann(self__COLON__cpp__symbol);
                                                                                                                                                                                            }
                                                                                                                                                                                            else {
                                                                                                                                                                                                loc__0 = ext__cpp__expr__get_ann(loc__capp.func);
                                                                                                                                                                                            }
                                                                                                                                                                                        }
                                                                                                                                                                                    }
                                                                                                                                                                                }
                                                                                                                                                                                loc__capp.func = ext__cpp__symbol__makestr(__lit<str>("->"), loc__0);
                                                                                                                                                                            }
                                                                                                                                                                        }
                                                                                                                                                                    }
                                                                                                                                                                }
                                                                                                                                                            }
                                                                                                                                                        }
                                                                                                                                                    }
                                                                                                                                                }
                                                                                                                                            }
                                                                                                                                        }
                                                                                                                                    }
                                                                                                                                }
                                                                                                                            }
                                                                                                                        }
                                                                                                                    }
                                                                                                                }
                                                                                                            }
                                                                                                        }
                                                                                                    }
                                                                                                }
                                                                                            }
                                                                                            loc__capp.ann = s.ann;
                                                                                            res = ivyc_s1::cpp__expr(1, new ivyc_s1::cpp__expr::twrap<ivyc_s1::cpp__app>(loc__capp));
                                                                                            ext__ivy__unown_func_args(s.args, st);
                                                                                        }
                                                                                    }
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
    }
    return res;
}
void ivyc_s1::ext__ivy__unown_func_args(const vector__ivy__expr__& args, ivy__tocppst& st){
    {
        unsigned long long loc__idx;
    loc__idx = (unsigned long long)___ivy_choose(0,"loc:idx",16281);
        {
            loc__idx = vector__ivy__expr____begin(args);
            while((loc__idx < vector__ivy__expr____end(args))){
                {
                    ivyc_s1::ivy__expr loc__arg;
                    {
                        loc__arg = vector__ivy__expr____value(args,loc__idx);
                        {
                            ivy__access_path loc__path;
                            {
                                {
                                    bool loc__ok;
    loc__ok = (bool)___ivy_choose(0,"loc:ok",16278);
                                    {
                                        ext__ivy__lvalue_path(loc__arg, loc__path, loc__ok);
                                        if(loc__ok){
                                            {
                                                ext__ivy__unown_path(loc__path, st);
                                            }
                                        }
                                        loc__idx = ext__vector__ivy__expr____domain__next(loc__idx);
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
    }
}
ivyc_s1::ivy__expr ivyc_s1::ext__ivy__app__get_func(const ivy__app& s){
    ivyc_s1::ivy__expr res;
    res = s.func;
    return res;
}
ivyc_s1::ivy__verb ivyc_s1::ext__ivy__expr__get_verb(ivyc_s1::ivy__expr s){
    ivyc_s1::ivy__verb vrb;
    vrb = (ivy__verb)___ivy_choose(0,"fml:vrb",0);
    {
        vrb = ivy__verb__none;
    }
    return vrb;
}
ivyc_s1::cpp__expr ivyc_s1::ext__cpp__app__make(ivyc_s1::cpp__expr func, const vector__cpp__expr__& args, ivyc_s1::annot ann){
    ivyc_s1::cpp__expr res;
    {
        cpp__app loc__s;
        {
            loc__s.func = func;
            loc__s.args = args;
            loc__s.ann = ann;
            res = ivyc_s1::cpp__expr(1, new ivyc_s1::cpp__expr::twrap<ivyc_s1::cpp__app>(loc__s));
        }
    }
    return res;
}
void ivyc_s1::imp__parse_error(unsigned long long p, const str& tok){
    {
    }
}
ivyc_s1::ivy__whilest ivyc_s1::ext__ivy__whilest__flat_int(const ivy__whilest& s, ivy__flatst& st){
    ivyc_s1::ivy__whilest res;
    {
        res = s;
        {
            ivy__app self__COLON__ivy__app;
            if (((res.cond).tag == 1)) self__COLON__ivy__app = ivyc_s1::ivy__expr::unwrap< ivyc_s1::ivy__app >(res.cond);
            if(((res.cond).tag == 1)){
                res.cond = ext__ivy__app__flat(self__COLON__ivy__app, st);
            }
            else {
                {
                    ivy__symbol self__COLON__ivy__symbol;
                    if (((res.cond).tag == 0)) self__COLON__ivy__symbol = ivyc_s1::ivy__expr::unwrap< ivyc_s1::ivy__symbol >(res.cond);
                    if(((res.cond).tag == 0)){
                        res.cond = ext__ivy__symbol__flat(self__COLON__ivy__symbol, st);
                    }
                    else {
                        res.cond = ext__ivy__expr__flat(res.cond, st);
                    }
                }
            }
        }
        {
            ivy__varst self__COLON__ivy__varst;
            if (((res.body).tag == 6)) self__COLON__ivy__varst = ivyc_s1::ivy__stmt::unwrap< ivyc_s1::ivy__varst >(res.body);
            if(((res.body).tag == 6)){
                res.body = ext__ivy__varst__flat(self__COLON__ivy__varst, st);
            }
            else {
                {
                    ivy__whilest self__COLON__ivy__whilest;
                    if (((res.body).tag == 4)) self__COLON__ivy__whilest = ivyc_s1::ivy__stmt::unwrap< ivyc_s1::ivy__whilest >(res.body);
                    if(((res.body).tag == 4)){
                        res.body = ext__ivy__whilest__flat(self__COLON__ivy__whilest, st);
                    }
                    else {
                        {
                            ivy__ifst self__COLON__ivy__ifst;
                            if (((res.body).tag == 3)) self__COLON__ivy__ifst = ivyc_s1::ivy__stmt::unwrap< ivyc_s1::ivy__ifst >(res.body);
                            if(((res.body).tag == 3)){
                                res.body = ext__ivy__ifst__flat(self__COLON__ivy__ifst, st);
                            }
                            else {
                                {
                                    ivy__sequence self__COLON__ivy__sequence;
                                    if (((res.body).tag == 1)) self__COLON__ivy__sequence = ivyc_s1::ivy__stmt::unwrap< ivyc_s1::ivy__sequence >(res.body);
                                    if(((res.body).tag == 1)){
                                        res.body = ext__ivy__sequence__flat(self__COLON__ivy__sequence, st);
                                    }
                                    else {
                                        {
                                            ivy__asgn self__COLON__ivy__asgn;
                                            if (((res.body).tag == 0)) self__COLON__ivy__asgn = ivyc_s1::ivy__stmt::unwrap< ivyc_s1::ivy__asgn >(res.body);
                                            if(((res.body).tag == 0)){
                                                res.body = ext__ivy__asgn__flat(self__COLON__ivy__asgn, st);
                                            }
                                            else {
                                                res.body = ext__ivy__stmt__flat(res.body, st);
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
    }
    return res;
}
ivyc_s1::ivy__expr ivyc_s1::ext__ivy__colon__make(ivyc_s1::ivy__expr lhs, ivyc_s1::ivy__expr rhs, ivyc_s1::annot ann){
    ivyc_s1::ivy__expr res;
    {
        ivy__app loc__s;
        {
            loc__s.func = ext__ivy__symbol__makestr(__lit<str>(":"), ann);
            ext__vector__ivy__expr____append(loc__s.args, lhs);
            ext__vector__ivy__expr____append(loc__s.args, rhs);
            loc__s.ann = ann;
            res = ivyc_s1::ivy__expr(1, new ivyc_s1::ivy__expr::twrap<ivyc_s1::ivy__app>(loc__s));
        }
    }
    return res;
}
void ivyc_s1::ext__str__extend(str& a, const str& b){
    {

        for (unsigned i = 0; i < b.size(); i++)
            a.push_back(b[i]);
    }
}
ivyc_s1::annot ivyc_s1::ext__ivy__sequence__get_ann(const ivy__sequence& s){
    ivyc_s1::annot res;
    res = s.ann;
    return res;
}
ivyc_s1::ivy__expr ivyc_s1::ext__ivy__get_formal_type(const vector__ivy__expr__& typings, ivyc_s1::annot ann){
    ivyc_s1::ivy__expr res;
    if((vector__ivy__expr____end(typings) == 0)){
        {
            res = ext__ivy__empty__make(ann);
        }
    }
    else {
        {
            {
                vector__ivy__expr__ loc__tys;
                {
                    {
                        unsigned long long loc__idx;
    loc__idx = (unsigned long long)___ivy_choose(0,"loc:idx",15914);
                        {
                            loc__idx = vector__ivy__expr____begin(typings);
                            while((loc__idx < vector__ivy__expr____end(typings))){
                                {
                                    ivyc_s1::ivy__expr loc__0;
                                    {
                                        {
                                            ivy__app self__COLON__ivy__app;
                                            if (((vector__ivy__expr____value(typings,loc__idx)).tag == 1)) self__COLON__ivy__app = ivyc_s1::ivy__expr::unwrap< ivyc_s1::ivy__app >(vector__ivy__expr____value(typings,loc__idx));
                                            if(((vector__ivy__expr____value(typings,loc__idx)).tag == 1)){
                                                loc__0 = ext__ivy__app__get_arg(self__COLON__ivy__app, 1);
                                            }
                                            else {
                                                loc__0 = ext__ivy__expr__get_arg(vector__ivy__expr____value(typings,loc__idx), 1);
                                            }
                                        }
                                        {
                                            ivyc_s1::ivy__expr loc__ty;
                                            {
                                                loc__ty = loc__0;
                                                ext__vector__ivy__expr____append(loc__tys, loc__ty);
                                                loc__idx = ext__vector__ivy__expr____domain__next(loc__idx);
                                            }
                                        }
                                    }
                                }
                            }
                            res = ext__ivy__times__fold_left(loc__tys, ann);
                        }
                    }
                }
            }
        }
    }
    return res;
}
void ivyc_s1::ext__ivy__type_context__pop(ivy__type_context& s){
    {
        ivy__type_context__stack_entry loc__0;
    loc__0.any = (bool)___ivy_choose(0,"loc:0",16285);
        {
            loc__0 = ext__vector__ivy__type_context__stack_entry____back(s.stack);
            {
                ivy__type_context__stack_entry loc__ent;
    loc__ent.any = (bool)___ivy_choose(0,"loc:ent",16284);
                {
                    loc__ent = loc__0;
                    ext__vector__ivy__type_context__stack_entry____pop_back(s.stack);
                    if(loc__ent.any){
                        ext__ivy__symeval__set(s.m, loc__ent.id, loc__ent.val);
                    }
                    else {
                        ext__ivy__symeval__remove(s.m, loc__ent.id);
                    }
                }
            }
        }
    }
}
ivyc_s1::annot ivyc_s1::ext__ivy__includedc__get_ann(const ivy__includedc& s){
    ivyc_s1::annot res;
    res = s.ann;
    return res;
}
bool ivyc_s1::ext__ivy__expr__is(ivyc_s1::ivy__expr s, ivy__verb vrb){
    bool res;
    res = (bool)___ivy_choose(0,"fml:res",0);
    {
        res = false;
    }
    return res;
}
void ivyc_s1::ext__ivy__initdc__flat(const ivy__initdc& s, ivy__flatst& st){
    {
        {
            ivy__initdc loc__t;
            {
                loc__t = ext__ivy__initdc__flat_int(s, st);
                loc__t.ann = s.ann;
                ext__vector__ivy__decl____append(st.decls, ivyc_s1::ivy__decl(11, new ivyc_s1::ivy__decl::twrap<ivyc_s1::ivy__initdc>(loc__t)));
            }
        }
    }
}
ivyc_s1::vector__ivy__expr__ ivyc_s1::ext__ivy__get_func_params(ivyc_s1::ivy__expr typing){
    ivyc_s1::vector__ivy__expr__ res;
    {
        ivyc_s1::ivy__expr loc__ty;
        {
            loc__ty = typing;
            {
                bool loc__0;
    loc__0 = (bool)___ivy_choose(0,"loc:0",16287);
                {
                    {
                        ivy__app self__COLON__ivy__app;
                        if (((loc__ty).tag == 1)) self__COLON__ivy__app = ivyc_s1::ivy__expr::unwrap< ivyc_s1::ivy__app >(loc__ty);
                        if(((loc__ty).tag == 1)){
                            loc__0 = ext__ivy__app__is(self__COLON__ivy__app, ivy__verb__colon);
                        }
                        else {
                            loc__0 = ext__ivy__expr__is(loc__ty, ivy__verb__colon);
                        }
                    }
                    if(loc__0){
                        {
                            ivy__app self__COLON__ivy__app;
                            if (((loc__ty).tag == 1)) self__COLON__ivy__app = ivyc_s1::ivy__expr::unwrap< ivyc_s1::ivy__app >(loc__ty);
                            if(((loc__ty).tag == 1)){
                                loc__ty = ext__ivy__app__get_arg(self__COLON__ivy__app, 0);
                            }
                            else {
                                loc__ty = ext__ivy__expr__get_arg(loc__ty, 0);
                            }
                        }
                    }
                }
            }
            if(((loc__ty).tag == 1)){
                {
                    ivy__app self__COLON__ivy__app;
                    if (((loc__ty).tag == 1)) self__COLON__ivy__app = ivyc_s1::ivy__expr::unwrap< ivyc_s1::ivy__app >(loc__ty);
                    if(((loc__ty).tag == 1)){
                        res = ext__ivy__app__get_args(self__COLON__ivy__app);
                    }
                    else {
                        res = ext__ivy__expr__get_args(loc__ty);
                    }
                }
            }
        }
    }
    return res;
}
bool ivyc_s1::ext__ivy__app__occurs(const ivy__app& s, ivyc_s1::ivy__ident n){
    bool res;
    res = (bool)___ivy_choose(0,"fml:res",0);
    {
        {
            ivy__app self__COLON__ivy__app;
            if (((s.func).tag == 1)) self__COLON__ivy__app = ivyc_s1::ivy__expr::unwrap< ivyc_s1::ivy__app >(s.func);
            if(((s.func).tag == 1)){
                res = ext__ivy__app__occurs(self__COLON__ivy__app, n);
            }
            else {
                {
                    ivy__symbol self__COLON__ivy__symbol;
                    if (((s.func).tag == 0)) self__COLON__ivy__symbol = ivyc_s1::ivy__expr::unwrap< ivyc_s1::ivy__symbol >(s.func);
                    if(((s.func).tag == 0)){
                        res = ext__ivy__symbol__occurs(self__COLON__ivy__symbol, n);
                    }
                    else {
                        res = ext__ivy__expr__occurs(s.func, n);
                    }
                }
            }
        }
        {
            unsigned long long loc__idx;
    loc__idx = (unsigned long long)___ivy_choose(0,"loc:idx",16290);
            {
                loc__idx = vector__ivy__expr____begin(s.args);
                while((loc__idx < vector__ivy__expr____end(s.args))){
                    {
                        {
                            bool loc__0;
    loc__0 = (bool)___ivy_choose(0,"loc:0",16289);
                            {
                                {
                                    ivy__app self__COLON__ivy__app;
                                    if (((vector__ivy__expr____value(s.args,loc__idx)).tag == 1)) self__COLON__ivy__app = ivyc_s1::ivy__expr::unwrap< ivyc_s1::ivy__app >(vector__ivy__expr____value(s.args,loc__idx));
                                    if(((vector__ivy__expr____value(s.args,loc__idx)).tag == 1)){
                                        loc__0 = ext__ivy__app__occurs(self__COLON__ivy__app, n);
                                    }
                                    else {
                                        {
                                            ivy__symbol self__COLON__ivy__symbol;
                                            if (((vector__ivy__expr____value(s.args,loc__idx)).tag == 0)) self__COLON__ivy__symbol = ivyc_s1::ivy__expr::unwrap< ivyc_s1::ivy__symbol >(vector__ivy__expr____value(s.args,loc__idx));
                                            if(((vector__ivy__expr____value(s.args,loc__idx)).tag == 0)){
                                                loc__0 = ext__ivy__symbol__occurs(self__COLON__ivy__symbol, n);
                                            }
                                            else {
                                                loc__0 = ext__ivy__expr__occurs(vector__ivy__expr____value(s.args,loc__idx), n);
                                            }
                                        }
                                    }
                                }
                                res = (res || loc__0);
                            }
                        }
                        loc__idx = ext__vector__ivy__expr____domain__next(loc__idx);
                    }
                }
            }
        }
    }
    return res;
}
void ivyc_s1::ext__pstate__get_ann(pstate& st, ivyc_s1::annot& ann){
    {
        ann = ivyc_s1::annot(0, new ivyc_s1::annot::twrap<ivyc_s1::annot_i>(st.ann));
        st.ann.comments = ext__vector__str____empty();
    }
}
ivyc_s1::cpp__expr ivyc_s1::ext__ivy__make_md_vector_type(const vector__ivy__expr__& dom, ivyc_s1::ivy__expr rng, ivy__tocppst& st){
    ivyc_s1::cpp__expr res;
    {
        cpp__strident loc__vid;
        {
            loc__vid.val = __lit<str>("vector");
            {
                ivyc_s1::cpp__expr loc__crng;
                {
                    loc__crng = ext__ivy__fix_tpl_param(rng, st);
                    {
                        ivyc_s1::cpp__ident loc__0;
                        {
                            {
                                cpp__symbol self__COLON__cpp__symbol;
                                if (((loc__crng).tag == 0)) self__COLON__cpp__symbol = ivyc_s1::cpp__expr::unwrap< ivyc_s1::cpp__symbol >(loc__crng);
                                if(((loc__crng).tag == 0)){
                                    loc__0 = ext__cpp__symbol__get_name(self__COLON__cpp__symbol);
                                }
                                else {
                                    loc__0 = ext__cpp__expr__get_name(loc__crng);
                                }
                            }
                            ext__vector__cpp__ident____append(loc__vid.subscrs, loc__0);
                        }
                    }
                    {
                        unsigned long long loc__idx;
    loc__idx = (unsigned long long)___ivy_choose(0,"loc:idx",16297);
                        {
                            loc__idx = vector__ivy__expr____begin(dom);
                            while((loc__idx < vector__ivy__expr____end(dom))){
                                {
                                    ivyc_s1::cpp__expr loc__dty;
                                    {
                                        loc__dty = ext__ivy__fix_tpl_param(vector__ivy__expr____value(dom,loc__idx), st);
                                        {
                                            ivyc_s1::cpp__ident loc__0;
                                            {
                                                {
                                                    cpp__symbol self__COLON__cpp__symbol;
                                                    if (((loc__dty).tag == 0)) self__COLON__cpp__symbol = ivyc_s1::cpp__expr::unwrap< ivyc_s1::cpp__symbol >(loc__dty);
                                                    if(((loc__dty).tag == 0)){
                                                        loc__0 = ext__cpp__symbol__get_name(self__COLON__cpp__symbol);
                                                    }
                                                    else {
                                                        loc__0 = ext__cpp__expr__get_name(loc__dty);
                                                    }
                                                }
                                                ext__vector__cpp__ident____append(loc__vid.subscrs, loc__0);
                                            }
                                        }
                                        loc__idx = ext__vector__ivy__expr____domain__next(loc__idx);
                                    }
                                }
                            }
                            {
                                ivyc_s1::cpp__ident loc__0;
                                ivyc_s1::cpp__ident loc__1;
                                {
                                    loc__0 = ext__cpp__strident__make(__lit<str>("ivy"));
                                    loc__1 = ext__cpp__strident__prefix(loc__vid, loc__0);
                                    {
                                        ivyc_s1::cpp__ident loc__name;
                                        {
                                            loc__name = loc__1;
                                            {
                                                ivyc_s1::annot loc__0;
                                                {
                                                    {
                                                        ivy__app self__COLON__ivy__app;
                                                        if (((rng).tag == 1)) self__COLON__ivy__app = ivyc_s1::ivy__expr::unwrap< ivyc_s1::ivy__app >(rng);
                                                        if(((rng).tag == 1)){
                                                            loc__0 = ext__ivy__app__get_ann(self__COLON__ivy__app);
                                                        }
                                                        else {
                                                            {
                                                                ivy__symbol self__COLON__ivy__symbol;
                                                                if (((rng).tag == 0)) self__COLON__ivy__symbol = ivyc_s1::ivy__expr::unwrap< ivyc_s1::ivy__symbol >(rng);
                                                                if(((rng).tag == 0)){
                                                                    loc__0 = ext__ivy__symbol__get_ann(self__COLON__ivy__symbol);
                                                                }
                                                                else {
                                                                    loc__0 = ext__ivy__expr__get_ann(rng);
                                                                }
                                                            }
                                                        }
                                                    }
                                                    res = ext__cpp__symbol__make(loc__name, loc__0);
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
    }
    return res;
}
void ivyc_s1::ext__ivy__add_is_seq_pred(cpp__structdecl& s){
    {
        {
            cpp__funcdecl loc__isseq;
    loc__isseq.ftype.base.is_const = (bool)___ivy_choose(0,"loc:isseq",16301);
    loc__isseq.ftype.base.is_ref = (bool)___ivy_choose(0,"loc:isseq",16301);
    loc__isseq.ftype.is_const = (bool)___ivy_choose(0,"loc:isseq",16301);
    loc__isseq.ftype.has_initializer = (bool)___ivy_choose(0,"loc:isseq",16301);
    loc__isseq.has_body = (bool)___ivy_choose(0,"loc:isseq",16301);
    loc__isseq.is_static = (bool)___ivy_choose(0,"loc:isseq",16301);
    loc__isseq.is_virtual = (bool)___ivy_choose(0,"loc:isseq",16301);
            {
                loc__isseq.ftype.base._type = ext__cpp__symbol__makestr(__lit<str>("bool"), s.ann);
                loc__isseq.ftype.base.name = ext__cpp__symbol__makestr(__lit<str>("__is_seq"), s.ann);
                loc__isseq.is_static = true;
                loc__isseq.has_body = true;
                {
                    ivyc_s1::cpp__expr loc__0;
                    {
                        loc__0 = ext__cpp__symbol__makestr(__lit<str>("false"), s.ann);
                        loc__isseq.body = ext__cpp__retst__make(loc__0, s.ann);
                    }
                }
                ext__vector__cpp__decl____append(s.members, ivyc_s1::cpp__decl(4, new ivyc_s1::cpp__decl::twrap<ivyc_s1::cpp__funcdecl>(loc__isseq)));
            }
        }
    }
}
void ivyc_s1::ext__ivy__cannot_write__encode(const ivy__cannot_write& e, pretty& b){
    {
        ext__pretty__extend(b, __lit<str>("Failed to write file:"));
        ext__pretty__extend(b, __lit<str>(" "));
        ext__pretty__extend(b, e.n);
        ext__pretty__newline(b);
    }
}
void ivyc_s1::ext__ivy__actdc__build_global_types(const ivy__actdc& s, ivy__global_types& st){
    {
        {
            ivyc_s1::ivy__expr loc__0;
            {
                loc__0 = ext__ivy__get_formal_type(s.outputs, s.ann);
                {
                    ivyc_s1::ivy__expr loc__ty;
                    {
                        loc__ty = loc__0;
                        if((0 < vector__ivy__expr____end(s.inputs))){
                            {
                                ivyc_s1::ivy__expr loc__0;
                                {
                                    loc__0 = ext__ivy__get_formal_type(s.inputs, s.ann);
                                    {
                                        ivyc_s1::ivy__expr loc__inpty;
                                        {
                                            loc__inpty = loc__0;
                                            loc__ty = ext__ivy__arrow__make(loc__inpty, loc__ty, s.ann);
                                        }
                                    }
                                }
                            }
                        }
                        {
                            bool loc__0;
    loc__0 = (bool)___ivy_choose(0,"loc:0",16304);
                            {
                                loc__0 = ext__ivy__actdc__is_member(s);
                                if((loc__0 && st.curried)){
                                    {
                                        loc__ty = ext__ivy__expr__curry(loc__ty);
                                    }
                                }
                            }
                        }
                        {
                            ivyc_s1::ivy__ident loc__0;
                            {
                                {
                                    ivy__symbol self__COLON__ivy__symbol;
                                    if (((s.name).tag == 0)) self__COLON__ivy__symbol = ivyc_s1::ivy__expr::unwrap< ivyc_s1::ivy__symbol >(s.name);
                                    if(((s.name).tag == 0)){
                                        loc__0 = ext__ivy__symbol__get_name(self__COLON__ivy__symbol);
                                    }
                                    else {
                                        loc__0 = ext__ivy__expr__get_name(s.name);
                                    }
                                }
                                ext__ivy__symeval__set(st.type_of, loc__0, loc__ty);
                            }
                        }
                        {
                            ivyc_s1::ivy__ident loc__0;
                            {
                                {
                                    ivy__symbol self__COLON__ivy__symbol;
                                    if (((s.name).tag == 0)) self__COLON__ivy__symbol = ivyc_s1::ivy__expr::unwrap< ivyc_s1::ivy__symbol >(s.name);
                                    if(((s.name).tag == 0)){
                                        loc__0 = ext__ivy__symbol__get_name(self__COLON__ivy__symbol);
                                    }
                                    else {
                                        loc__0 = ext__ivy__expr__get_name(s.name);
                                    }
                                }
                                ext__ivy__ident_set__set(st.is_action, loc__0, true);
                            }
                        }
                    }
                }
            }
        }
    }
}
ivyc_s1::ivy__expr ivyc_s1::ext__ivy__stmt__get_lhs(ivyc_s1::ivy__stmt s){
    ivyc_s1::ivy__expr res;
    {
    }
    return res;
}
ivyc_s1::cpp__ident ivyc_s1::ext__cpp__dotident__prefix(const cpp__dotident& s, ivyc_s1::cpp__ident pref){
    ivyc_s1::cpp__ident res;
    {
        {
            ivyc_s1::cpp__ident loc__0;
            {
                {
                    cpp__dotident self__COLON__cpp__dotident;
                    if (((s.namesp).tag == 2)) self__COLON__cpp__dotident = ivyc_s1::cpp__ident::unwrap< ivyc_s1::cpp__dotident >(s.namesp);
                    if(((s.namesp).tag == 2)){
                        loc__0 = ext__cpp__dotident__prefix(self__COLON__cpp__dotident, pref);
                    }
                    else {
                        {
                            cpp__strident self__COLON__cpp__strident;
                            if (((s.namesp).tag == 0)) self__COLON__cpp__strident = ivyc_s1::cpp__ident::unwrap< ivyc_s1::cpp__strident >(s.namesp);
                            if(((s.namesp).tag == 0)){
                                loc__0 = ext__cpp__strident__prefix(self__COLON__cpp__strident, pref);
                            }
                            else {
                                loc__0 = ext__cpp__ident__prefix(s.namesp, pref);
                            }
                        }
                    }
                }
                res = ext__cpp__dotident__make(loc__0, s.member);
            }
        }
    }
    return res;
}
ivyc_s1::ivy__stmt ivyc_s1::ext__ivy__whilest__typeinfer(const ivy__whilest& s, ivy__typeinferst& st){
    ivyc_s1::ivy__stmt res;
    {
        {
            ivy__whilest loc__t;
            {
                loc__t = ext__ivy__whilest__typeinfer_int(s, st);
                loc__t.ann = s.ann;
                res = ivyc_s1::ivy__stmt(4, new ivyc_s1::ivy__stmt::twrap<ivyc_s1::ivy__whilest>(loc__t));
            }
        }
    }
    return res;
}
void ivyc_s1::ext__pretty__do_indent(pretty& self){
    {
        ext__str__append(self.output, 10);
        {
            unsigned long long loc__idx;
    loc__idx = (unsigned long long)___ivy_choose(0,"loc:idx",16311);
            {
                unsigned long long __tmp48;
                __tmp48 = self.maxline;
                unsigned long long __tmp49;
                __tmp49 = self.space;
                loc__idx = ( __tmp48 < __tmp49 ? 0 : __tmp48 - __tmp49);
                while((0 < loc__idx)){
                    {
                        ext__str__append(self.output, 32);
                        loc__idx = ext__pos__prev(loc__idx);
                    }
                }
            }
        }
    }
}
void ivyc_s1::ext__ivy__ident_to_ident__set(ivy__ident_to_ident& a, ivyc_s1::ivy__ident x, ivyc_s1::ivy__ident y){
    {

        a[x] = y;
    }
}
void ivyc_s1::ext__stdio__write(const str& s){

    for (unsigned i = 0; i < s.size(); i++) {
        std::cout.put(s[i]);
    }
}
void ivyc_s1::ext__annot__encode(ivyc_s1::annot s, pretty& b){
    {
    }
}
void ivyc_s1::ext__ivy__local_tracker__push(ivy__local_tracker& s){
    {
        ext__ivy__push_pop_ident_set__push(s.map);
    }
}
ivyc_s1::str ivyc_s1::ext__ivy__ident__to_str(ivyc_s1::ivy__ident s){
    ivyc_s1::str res;
    {
    }
    return res;
}
ivyc_s1::ivy__expr ivyc_s1::ext__ivy__app__get_type(const ivy__app& s){
    ivyc_s1::ivy__expr res;
    {
        bool loc__0;
    loc__0 = (bool)___ivy_choose(0,"loc:0",16315);
        {
            loc__0 = ext__ivy__app__is(s, ivy__verb__colon);
            if(loc__0){
                {
                    res = vector__ivy__expr____value(s.args,1);
                }
            }
            else {
                {
                    bool loc__0;
    loc__0 = (bool)___ivy_choose(0,"loc:0",16314);
                    {
                        loc__0 = ext__ivy__app__is(s, ivy__verb__dot);
                        if(loc__0){
                            {
                                {
                                    ivyc_s1::ivy__expr loc__0;
                                    ivyc_s1::ivy__expr loc__1;
                                    {
                                        {
                                            ivy__app self__COLON__ivy__app;
                                            if (((vector__ivy__expr____value(s.args,1)).tag == 1)) self__COLON__ivy__app = ivyc_s1::ivy__expr::unwrap< ivyc_s1::ivy__app >(vector__ivy__expr____value(s.args,1));
                                            if(((vector__ivy__expr____value(s.args,1)).tag == 1)){
                                                loc__0 = ext__ivy__app__get_arg(self__COLON__ivy__app, 1);
                                            }
                                            else {
                                                loc__0 = ext__ivy__expr__get_arg(vector__ivy__expr____value(s.args,1), 1);
                                            }
                                        }
                                        {
                                            ivy__app self__COLON__ivy__app;
                                            if (((loc__0).tag == 1)) self__COLON__ivy__app = ivyc_s1::ivy__expr::unwrap< ivyc_s1::ivy__app >(loc__0);
                                            if(((loc__0).tag == 1)){
                                                loc__1 = ext__ivy__app__get_arg(self__COLON__ivy__app, 1);
                                            }
                                            else {
                                                loc__1 = ext__ivy__expr__get_arg(loc__0, 1);
                                            }
                                        }
                                        ivyc_s1::ivy__expr __tmp50;
                                        __tmp50 = loc__1; ext__ivy__range_type(__tmp50);
                                        res = __tmp50;
                                    }
                                }
                            }
                        }
                        else {
                            {
                                {
                                    ivyc_s1::ivy__expr loc__0;
                                    ivyc_s1::ivy__expr loc__1;
                                    {
                                        {
                                            ivy__app self__COLON__ivy__app;
                                            if (((s.func).tag == 1)) self__COLON__ivy__app = ivyc_s1::ivy__expr::unwrap< ivyc_s1::ivy__app >(s.func);
                                            if(((s.func).tag == 1)){
                                                loc__0 = ext__ivy__app__get_arg(self__COLON__ivy__app, 1);
                                            }
                                            else {
                                                loc__0 = ext__ivy__expr__get_arg(s.func, 1);
                                            }
                                        }
                                        {
                                            ivy__app self__COLON__ivy__app;
                                            if (((loc__0).tag == 1)) self__COLON__ivy__app = ivyc_s1::ivy__expr::unwrap< ivyc_s1::ivy__app >(loc__0);
                                            if(((loc__0).tag == 1)){
                                                loc__1 = ext__ivy__app__get_arg(self__COLON__ivy__app, 1);
                                            }
                                            else {
                                                loc__1 = ext__ivy__expr__get_arg(loc__0, 1);
                                            }
                                        }
                                        ivyc_s1::ivy__expr __tmp51;
                                        __tmp51 = loc__1; ext__ivy__range_type(__tmp51);
                                        res = __tmp51;
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
    }
    return res;
}
ivyc_s1::str ivyc_s1::ext__annot__to_str(ivyc_s1::annot s){
    ivyc_s1::str res;
    {
    }
    return res;
}
void ivyc_s1::ext__ivy__groupdc__defd(const ivy__groupdc& s, ivy__flatst& st){
    {
        {
            unsigned long long loc__idx;
    loc__idx = (unsigned long long)___ivy_choose(0,"loc:idx",16316);
            {
                loc__idx = vector__ivy__decl____begin(s.decls);
                while((loc__idx < vector__ivy__decl____end(s.decls))){
                    {
                        {
                            ivy__instancedc self__COLON__ivy__instancedc;
                            if (((vector__ivy__decl____value(s.decls,loc__idx)).tag == 10)) self__COLON__ivy__instancedc = ivyc_s1::ivy__decl::unwrap< ivyc_s1::ivy__instancedc >(vector__ivy__decl____value(s.decls,loc__idx));
                            if(((vector__ivy__decl____value(s.decls,loc__idx)).tag == 10)){
                                ext__ivy__instancedc__defd(self__COLON__ivy__instancedc, st);
                            }
                            else {
                                {
                                    ivy__objectdc self__COLON__ivy__objectdc;
                                    if (((vector__ivy__decl____value(s.decls,loc__idx)).tag == 9)) self__COLON__ivy__objectdc = ivyc_s1::ivy__decl::unwrap< ivyc_s1::ivy__objectdc >(vector__ivy__decl____value(s.decls,loc__idx));
                                    if(((vector__ivy__decl____value(s.decls,loc__idx)).tag == 9)){
                                        ext__ivy__objectdc__defd(self__COLON__ivy__objectdc, st);
                                    }
                                    else {
                                        {
                                            ivy__instantiatedc self__COLON__ivy__instantiatedc;
                                            if (((vector__ivy__decl____value(s.decls,loc__idx)).tag == 8)) self__COLON__ivy__instantiatedc = ivyc_s1::ivy__decl::unwrap< ivyc_s1::ivy__instantiatedc >(vector__ivy__decl____value(s.decls,loc__idx));
                                            if(((vector__ivy__decl____value(s.decls,loc__idx)).tag == 8)){
                                                ext__ivy__instantiatedc__defd(self__COLON__ivy__instantiatedc, st);
                                            }
                                            else {
                                                {
                                                    ivy__moduledc self__COLON__ivy__moduledc;
                                                    if (((vector__ivy__decl____value(s.decls,loc__idx)).tag == 7)) self__COLON__ivy__moduledc = ivyc_s1::ivy__decl::unwrap< ivyc_s1::ivy__moduledc >(vector__ivy__decl____value(s.decls,loc__idx));
                                                    if(((vector__ivy__decl____value(s.decls,loc__idx)).tag == 7)){
                                                        ext__ivy__moduledc__defd(self__COLON__ivy__moduledc, st);
                                                    }
                                                    else {
                                                        {
                                                            ivy__vardc self__COLON__ivy__vardc;
                                                            if (((vector__ivy__decl____value(s.decls,loc__idx)).tag == 3)) self__COLON__ivy__vardc = ivyc_s1::ivy__decl::unwrap< ivyc_s1::ivy__vardc >(vector__ivy__decl____value(s.decls,loc__idx));
                                                            if(((vector__ivy__decl____value(s.decls,loc__idx)).tag == 3)){
                                                                ext__ivy__vardc__defd(self__COLON__ivy__vardc, st);
                                                            }
                                                            else {
                                                                {
                                                                    ivy__typedc self__COLON__ivy__typedc;
                                                                    if (((vector__ivy__decl____value(s.decls,loc__idx)).tag == 2)) self__COLON__ivy__typedc = ivyc_s1::ivy__decl::unwrap< ivyc_s1::ivy__typedc >(vector__ivy__decl____value(s.decls,loc__idx));
                                                                    if(((vector__ivy__decl____value(s.decls,loc__idx)).tag == 2)){
                                                                        ext__ivy__typedc__defd(self__COLON__ivy__typedc, st);
                                                                    }
                                                                    else {
                                                                        {
                                                                            ivy__groupdc self__COLON__ivy__groupdc;
                                                                            if (((vector__ivy__decl____value(s.decls,loc__idx)).tag == 1)) self__COLON__ivy__groupdc = ivyc_s1::ivy__decl::unwrap< ivyc_s1::ivy__groupdc >(vector__ivy__decl____value(s.decls,loc__idx));
                                                                            if(((vector__ivy__decl____value(s.decls,loc__idx)).tag == 1)){
                                                                                ext__ivy__groupdc__defd(self__COLON__ivy__groupdc, st);
                                                                            }
                                                                            else {
                                                                                {
                                                                                    ivy__actdc self__COLON__ivy__actdc;
                                                                                    if (((vector__ivy__decl____value(s.decls,loc__idx)).tag == 0)) self__COLON__ivy__actdc = ivyc_s1::ivy__decl::unwrap< ivyc_s1::ivy__actdc >(vector__ivy__decl____value(s.decls,loc__idx));
                                                                                    if(((vector__ivy__decl____value(s.decls,loc__idx)).tag == 0)){
                                                                                        ext__ivy__actdc__defd(self__COLON__ivy__actdc, st);
                                                                                    }
                                                                                    else {
                                                                                        ext__ivy__decl__defd(vector__ivy__decl____value(s.decls,loc__idx), st);
                                                                                    }
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                        loc__idx = ext__vector__ivy__decl____domain__next(loc__idx);
                    }
                }
            }
        }
    }
}
void ivyc_s1::ext__vector__ivy__decl____append(vector__ivy__decl__& a, ivyc_s1::ivy__decl v){
    {

        a.push_back(v);
    }
}
void ivyc_s1::ext__ivy__kill_lvalues(const vector__ivy__expr__& es, ivy__tocppst& st, const vector__ivy__access_path__& paths){
    {
        unsigned long long loc__idx;
    loc__idx = (unsigned long long)___ivy_choose(0,"loc:idx",16317);
        {
            loc__idx = vector__ivy__expr____begin(es);
            while((loc__idx < vector__ivy__expr____end(es))){
                {
                    ext__ivy__kill_lvalue(vector__ivy__expr____value(es,loc__idx), st, paths);
                    loc__idx = ext__vector__ivy__expr____domain__next(loc__idx);
                }
            }
        }
    }
}
void ivyc_s1::ext__ivy__add_upcast_method(cpp__structdecl& s){
    {
        {
            cpp__funcdecl loc__0;
    loc__0.ftype.base.is_const = (bool)___ivy_choose(0,"loc:0",16318);
    loc__0.ftype.base.is_ref = (bool)___ivy_choose(0,"loc:0",16318);
    loc__0.ftype.is_const = (bool)___ivy_choose(0,"loc:0",16318);
    loc__0.ftype.has_initializer = (bool)___ivy_choose(0,"loc:0",16318);
    loc__0.has_body = (bool)___ivy_choose(0,"loc:0",16318);
    loc__0.is_static = (bool)___ivy_choose(0,"loc:0",16318);
    loc__0.is_virtual = (bool)___ivy_choose(0,"loc:0",16318);
            {
                loc__0 = ext__ivy__make_upcast_method(s);
                ext__vector__cpp__decl____append(s.members, ivyc_s1::cpp__decl(4, new ivyc_s1::cpp__decl::twrap<ivyc_s1::cpp__funcdecl>(loc__0)));
            }
        }
    }
}
void ivyc_s1::ext__ivy__prog__find_include(str& name){
    {
        ext__str__extend(name, __lit<str>(".ivy"));
        {
            bool loc__0;
    loc__0 = (bool)___ivy_choose(0,"loc:0",16324);
            {
                loc__0 = ext__ivy__file__exist(name);
                if(!loc__0){
                    {
                        unsigned long long loc__idx;
    loc__idx = (unsigned long long)___ivy_choose(0,"loc:idx",16323);
                        {
                            loc__idx = vector__str____begin(ivy__include_path);
                            {
                                bool loc__found;
    loc__found = (bool)___ivy_choose(0,"loc:found",16322);
                                {
                                    loc__found = false;
                                    while((!loc__found && (loc__idx < vector__str____end(ivy__include_path)))){
                                        {
                                            {
                                                str loc__0;
                                                {
                                                    str __tmp52;
                                                    __tmp52 = vector__str____value(ivy__include_path,loc__idx); ext__ivy__path__concat(__tmp52, name);
                                                    loc__0 = __tmp52;
                                                    {
                                                        str loc__pname;
                                                        {
                                                            loc__pname = loc__0;
                                                            {
                                                                bool loc__0;
    loc__0 = (bool)___ivy_choose(0,"loc:0",16319);
                                                                {
                                                                    loc__0 = ext__ivy__file__exist(loc__pname);
                                                                    if(loc__0){
                                                                        {
                                                                            name = loc__pname;
                                                                            loc__found = true;
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                            loc__idx = ext__vector__str____domain__next(loc__idx);
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
    }
}
bool ivyc_s1::ext__cpp__expr__eq(ivyc_s1::cpp__expr e1, ivyc_s1::cpp__expr e2){
    bool res;
    res = (bool)___ivy_choose(0,"fml:res",0);
    if(((e1).tag == 0)){
        if(((e2).tag == 0)){
            {
                {
                    ivyc_s1::cpp__ident loc__0;
                    ivyc_s1::cpp__ident loc__1;
                    {
                        {
                            cpp__symbol self__COLON__cpp__symbol;
                            if (((e1).tag == 0)) self__COLON__cpp__symbol = ivyc_s1::cpp__expr::unwrap< ivyc_s1::cpp__symbol >(e1);
                            if(((e1).tag == 0)){
                                loc__0 = ext__cpp__symbol__get_name(self__COLON__cpp__symbol);
                            }
                            else {
                                loc__0 = ext__cpp__expr__get_name(e1);
                            }
                        }
                        {
                            cpp__symbol self__COLON__cpp__symbol;
                            if (((e2).tag == 0)) self__COLON__cpp__symbol = ivyc_s1::cpp__expr::unwrap< ivyc_s1::cpp__symbol >(e2);
                            if(((e2).tag == 0)){
                                loc__1 = ext__cpp__symbol__get_name(self__COLON__cpp__symbol);
                            }
                            else {
                                loc__1 = ext__cpp__expr__get_name(e2);
                            }
                        }
                        res = (loc__0 == loc__1);
                    }
                }
            }
        }
    }
    else {
        if(((e1).tag == 1)){
            {
                ivyc_s1::cpp__expr loc__0;
                ivyc_s1::cpp__expr loc__1;
                bool loc__2;
    loc__2 = (bool)___ivy_choose(0,"loc:2",16332);
                {
                    {
                        cpp__app self__COLON__cpp__app;
                        if (((e1).tag == 1)) self__COLON__cpp__app = ivyc_s1::cpp__expr::unwrap< ivyc_s1::cpp__app >(e1);
                        if(((e1).tag == 1)){
                            loc__0 = ext__cpp__app__get_func(self__COLON__cpp__app);
                        }
                        else {
                            loc__0 = ext__cpp__expr__get_func(e1);
                        }
                    }
                    {
                        cpp__app self__COLON__cpp__app;
                        if (((e2).tag == 1)) self__COLON__cpp__app = ivyc_s1::cpp__expr::unwrap< ivyc_s1::cpp__app >(e2);
                        if(((e2).tag == 1)){
                            loc__1 = ext__cpp__app__get_func(self__COLON__cpp__app);
                        }
                        else {
                            loc__1 = ext__cpp__expr__get_func(e2);
                        }
                    }
                    loc__2 = ext__cpp__expr__eq(loc__0, loc__1);
                    if(loc__2){
                        {
                            vector__cpp__expr__ loc__0;
                            {
                                {
                                    cpp__app self__COLON__cpp__app;
                                    if (((e1).tag == 1)) self__COLON__cpp__app = ivyc_s1::cpp__expr::unwrap< ivyc_s1::cpp__app >(e1);
                                    if(((e1).tag == 1)){
                                        loc__0 = ext__cpp__app__get_args(self__COLON__cpp__app);
                                    }
                                    else {
                                        loc__0 = ext__cpp__expr__get_args(e1);
                                    }
                                }
                                {
                                    vector__cpp__expr__ loc__args1;
                                    {
                                        loc__args1 = loc__0;
                                        {
                                            vector__cpp__expr__ loc__0;
                                            {
                                                {
                                                    cpp__app self__COLON__cpp__app;
                                                    if (((e2).tag == 1)) self__COLON__cpp__app = ivyc_s1::cpp__expr::unwrap< ivyc_s1::cpp__app >(e2);
                                                    if(((e2).tag == 1)){
                                                        loc__0 = ext__cpp__app__get_args(self__COLON__cpp__app);
                                                    }
                                                    else {
                                                        loc__0 = ext__cpp__expr__get_args(e2);
                                                    }
                                                }
                                                {
                                                    vector__cpp__expr__ loc__args2;
                                                    {
                                                        loc__args2 = loc__0;
                                                        if((vector__cpp__expr____end(loc__args1) == vector__cpp__expr____end(loc__args2))){
                                                            {
                                                                res = true;
                                                                {
                                                                    unsigned long long loc__idx;
    loc__idx = (unsigned long long)___ivy_choose(0,"loc:idx",16327);
                                                                    {
                                                                        loc__idx = vector__cpp__expr____begin(loc__args1);
                                                                        while((res && (loc__idx < vector__cpp__expr____end(loc__args1)))){
                                                                            {
                                                                                {
                                                                                    bool loc__0;
    loc__0 = (bool)___ivy_choose(0,"loc:0",16326);
                                                                                    {
                                                                                        loc__0 = ext__cpp__expr__eq(vector__cpp__expr____value(loc__args1,loc__idx), vector__cpp__expr____value(loc__args2,loc__idx));
                                                                                        if(!loc__0){
                                                                                            {
                                                                                                res = false;
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                }
                                                                                loc__idx = ext__vector__cpp__expr____domain__next(loc__idx);
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
    }
    return res;
}
void ivyc_s1::ext__ivy__objectdc__defd(const ivy__objectdc& s, ivy__flatst& st){
    {
        ext__ivy__add_def(s.name, st, false);
        {
            bool loc__old_has_root;
    loc__old_has_root = (bool)___ivy_choose(0,"loc:old_has_root",16334);
            {
                loc__old_has_root = st.has_root;
                {
                    ivyc_s1::ivy__ident loc__old_root;
                    {
                        loc__old_root = st.root;
                        ext__ivy__set_root(st, s.name);
                        {
                            ivy__instancedc self__COLON__ivy__instancedc;
                            if (((s.body).tag == 10)) self__COLON__ivy__instancedc = ivyc_s1::ivy__decl::unwrap< ivyc_s1::ivy__instancedc >(s.body);
                            if(((s.body).tag == 10)){
                                ext__ivy__instancedc__defd(self__COLON__ivy__instancedc, st);
                            }
                            else {
                                {
                                    ivy__objectdc self__COLON__ivy__objectdc;
                                    if (((s.body).tag == 9)) self__COLON__ivy__objectdc = ivyc_s1::ivy__decl::unwrap< ivyc_s1::ivy__objectdc >(s.body);
                                    if(((s.body).tag == 9)){
                                        ext__ivy__objectdc__defd(self__COLON__ivy__objectdc, st);
                                    }
                                    else {
                                        {
                                            ivy__instantiatedc self__COLON__ivy__instantiatedc;
                                            if (((s.body).tag == 8)) self__COLON__ivy__instantiatedc = ivyc_s1::ivy__decl::unwrap< ivyc_s1::ivy__instantiatedc >(s.body);
                                            if(((s.body).tag == 8)){
                                                ext__ivy__instantiatedc__defd(self__COLON__ivy__instantiatedc, st);
                                            }
                                            else {
                                                {
                                                    ivy__moduledc self__COLON__ivy__moduledc;
                                                    if (((s.body).tag == 7)) self__COLON__ivy__moduledc = ivyc_s1::ivy__decl::unwrap< ivyc_s1::ivy__moduledc >(s.body);
                                                    if(((s.body).tag == 7)){
                                                        ext__ivy__moduledc__defd(self__COLON__ivy__moduledc, st);
                                                    }
                                                    else {
                                                        {
                                                            ivy__vardc self__COLON__ivy__vardc;
                                                            if (((s.body).tag == 3)) self__COLON__ivy__vardc = ivyc_s1::ivy__decl::unwrap< ivyc_s1::ivy__vardc >(s.body);
                                                            if(((s.body).tag == 3)){
                                                                ext__ivy__vardc__defd(self__COLON__ivy__vardc, st);
                                                            }
                                                            else {
                                                                {
                                                                    ivy__typedc self__COLON__ivy__typedc;
                                                                    if (((s.body).tag == 2)) self__COLON__ivy__typedc = ivyc_s1::ivy__decl::unwrap< ivyc_s1::ivy__typedc >(s.body);
                                                                    if(((s.body).tag == 2)){
                                                                        ext__ivy__typedc__defd(self__COLON__ivy__typedc, st);
                                                                    }
                                                                    else {
                                                                        {
                                                                            ivy__groupdc self__COLON__ivy__groupdc;
                                                                            if (((s.body).tag == 1)) self__COLON__ivy__groupdc = ivyc_s1::ivy__decl::unwrap< ivyc_s1::ivy__groupdc >(s.body);
                                                                            if(((s.body).tag == 1)){
                                                                                ext__ivy__groupdc__defd(self__COLON__ivy__groupdc, st);
                                                                            }
                                                                            else {
                                                                                {
                                                                                    ivy__actdc self__COLON__ivy__actdc;
                                                                                    if (((s.body).tag == 0)) self__COLON__ivy__actdc = ivyc_s1::ivy__decl::unwrap< ivyc_s1::ivy__actdc >(s.body);
                                                                                    if(((s.body).tag == 0)){
                                                                                        ext__ivy__actdc__defd(self__COLON__ivy__actdc, st);
                                                                                    }
                                                                                    else {
                                                                                        ext__ivy__decl__defd(s.body, st);
                                                                                    }
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                        st.has_root = loc__old_has_root;
                        st.root = loc__old_root;
                    }
                }
            }
        }
    }
}
ivyc_s1::cpp__expr ivyc_s1::ext__ivy__fix_tpl_param(ivyc_s1::ivy__expr s, ivy__tocppst& st){
    ivyc_s1::cpp__expr res;
    res = ext__ivy__fix_variant_type(s, st);
    return res;
}
void ivyc_s1::ext__ivy__path__change_extension(str& path, const str& ext){
    if((0 < str__end(path))){
        {
            unsigned long long loc__0;
    loc__0 = (unsigned long long)___ivy_choose(0,"loc:0",16336);
            {
                loc__0 = ext__pos__prev(str__end(path));
                {
                    unsigned long long loc__idx;
    loc__idx = (unsigned long long)___ivy_choose(0,"loc:idx",16335);
                    {
                        loc__idx = loc__0;
                        while(((0 < loc__idx) && !(str__value(path,loc__idx) == 46))){
                            {
                                loc__idx = ext__pos__prev(loc__idx);
                            }
                        }
                        if((str__value(path,loc__idx) == 46)){
                            {
                                path = str__segment(path,str__begin(path),loc__idx);
                                ext__str__extend(path, __lit<str>("."));
                                ext__str__extend(path, ext);
                            }
                        }
                    }
                }
            }
        }
    }
}
bool ivyc_s1::ext__ivy__path_may_alias(const ivy__access_path& v, const ivy__access_path& w){
    bool res;
    res = (bool)___ivy_choose(0,"fml:res",0);
    {
        res = true;
        {
            unsigned long long loc__idx;
    loc__idx = (unsigned long long)___ivy_choose(0,"loc:idx",16337);
            {
                loc__idx = vector__ivy__ident____begin(v.elems);
                while((res && (loc__idx < vector__ivy__ident____end(v.elems)) && (loc__idx < vector__ivy__ident____end(w.elems)))){
                    {
                        res = (vector__ivy__ident____value(v.elems,loc__idx) == vector__ivy__ident____value(w.elems,loc__idx));
                        loc__idx = ext__vector__ivy__ident____domain__next(loc__idx);
                    }
                }
            }
        }
    }
    return res;
}
void ivyc_s1::ext__ivy__dotident__encode(const ivy__dotident& s, pretty& b, int prio){
    {
        {
            ivy__dotident self__COLON__ivy__dotident;
            if (((s.namesp).tag == 2)) self__COLON__ivy__dotident = ivyc_s1::ivy__ident::unwrap< ivyc_s1::ivy__dotident >(s.namesp);
            if(((s.namesp).tag == 2)){
                ext__ivy__dotident__encode(self__COLON__ivy__dotident, b, 0);
            }
            else {
                {
                    ivy__numident self__COLON__ivy__numident;
                    if (((s.namesp).tag == 1)) self__COLON__ivy__numident = ivyc_s1::ivy__ident::unwrap< ivyc_s1::ivy__numident >(s.namesp);
                    if(((s.namesp).tag == 1)){
                        ext__ivy__numident__encode(self__COLON__ivy__numident, b, 0);
                    }
                    else {
                        {
                            ivy__strident self__COLON__ivy__strident;
                            if (((s.namesp).tag == 0)) self__COLON__ivy__strident = ivyc_s1::ivy__ident::unwrap< ivyc_s1::ivy__strident >(s.namesp);
                            if(((s.namesp).tag == 0)){
                                ext__ivy__strident__encode(self__COLON__ivy__strident, b, 0);
                            }
                            else {
                                ext__ivy__ident__encode(s.namesp, b, 0);
                            }
                        }
                    }
                }
            }
        }
        ext__pretty__extend(b, (false ? __lit<str>("::") : __lit<str>(".")));
        ext__ivy__strident__encode(s.member, b, 0);
    }
}
ivyc_s1::ivy__interpdc ivyc_s1::ext__ivy__interpdc__flat_int(const ivy__interpdc& s, ivy__flatst& st){
    ivyc_s1::ivy__interpdc res;
    {
        {
            ivy__app self__COLON__ivy__app;
            if (((s.itype).tag == 1)) self__COLON__ivy__app = ivyc_s1::ivy__expr::unwrap< ivyc_s1::ivy__app >(s.itype);
            if(((s.itype).tag == 1)){
                res.itype = ext__ivy__app__flat(self__COLON__ivy__app, st);
            }
            else {
                {
                    ivy__symbol self__COLON__ivy__symbol;
                    if (((s.itype).tag == 0)) self__COLON__ivy__symbol = ivyc_s1::ivy__expr::unwrap< ivyc_s1::ivy__symbol >(s.itype);
                    if(((s.itype).tag == 0)){
                        res.itype = ext__ivy__symbol__flat(self__COLON__ivy__symbol, st);
                    }
                    else {
                        res.itype = ext__ivy__expr__flat(s.itype, st);
                    }
                }
            }
        }
        st.absolute = true;
        {
            ivy__app self__COLON__ivy__app;
            if (((s.ctype).tag == 1)) self__COLON__ivy__app = ivyc_s1::ivy__expr::unwrap< ivyc_s1::ivy__app >(s.ctype);
            if(((s.ctype).tag == 1)){
                res.ctype = ext__ivy__app__flat(self__COLON__ivy__app, st);
            }
            else {
                {
                    ivy__symbol self__COLON__ivy__symbol;
                    if (((s.ctype).tag == 0)) self__COLON__ivy__symbol = ivyc_s1::ivy__expr::unwrap< ivyc_s1::ivy__symbol >(s.ctype);
                    if(((s.ctype).tag == 0)){
                        res.ctype = ext__ivy__symbol__flat(self__COLON__ivy__symbol, st);
                    }
                    else {
                        res.ctype = ext__ivy__expr__flat(s.ctype, st);
                    }
                }
            }
        }
        st.absolute = false;
    }
    return res;
}
ivyc_s1::cpp__expr ivyc_s1::ext__cpp__symbol__makestr1(const str& name, ivyc_s1::cpp__ident arg, ivyc_s1::annot ann){
    ivyc_s1::cpp__expr res;
    {
        cpp__symbol loc__s;
    loc__s.vrb = (cpp__verb)___ivy_choose(0,"loc:s",16338);
        {
            loc__s.name = ext__cpp__strident__make1(name, arg);
            loc__s.vrb = ext__cpp__verb_from_name(name);
            loc__s.ann = ann;
            res = ivyc_s1::cpp__expr(0, new ivyc_s1::cpp__expr::twrap<ivyc_s1::cpp__symbol>(loc__s));
        }
    }
    return res;
}
bool ivyc_s1::ext__ivy__is_typing_complete(ivyc_s1::ivy__expr typing){
    bool res;
    res = (bool)___ivy_choose(0,"fml:res",0);
    {
        bool loc__0;
    loc__0 = (bool)___ivy_choose(0,"loc:0",16347);
        {
            {
                ivy__app self__COLON__ivy__app;
                if (((typing).tag == 1)) self__COLON__ivy__app = ivyc_s1::ivy__expr::unwrap< ivyc_s1::ivy__app >(typing);
                if(((typing).tag == 1)){
                    loc__0 = ext__ivy__app__is(self__COLON__ivy__app, ivy__verb__colon);
                }
                else {
                    loc__0 = ext__ivy__expr__is(typing, ivy__verb__colon);
                }
            }
            if(loc__0){
                {
                    ivyc_s1::ivy__expr loc__0;
                    {
                        {
                            ivy__app self__COLON__ivy__app;
                            if (((typing).tag == 1)) self__COLON__ivy__app = ivyc_s1::ivy__expr::unwrap< ivyc_s1::ivy__app >(typing);
                            if(((typing).tag == 1)){
                                loc__0 = ext__ivy__app__get_arg(self__COLON__ivy__app, 0);
                            }
                            else {
                                loc__0 = ext__ivy__expr__get_arg(typing, 0);
                            }
                        }
                        {
                            ivyc_s1::ivy__expr loc__lhs;
                            {
                                loc__lhs = loc__0;
                                if(((loc__lhs).tag == 0)){
                                    {
                                        res = true;
                                    }
                                }
                                else {
                                    if(((loc__lhs).tag == 1)){
                                        {
                                            ivyc_s1::ivy__expr loc__0;
                                            bool loc__1;
    loc__1 = (bool)___ivy_choose(0,"loc:1",16343);
                                            {
                                                {
                                                    ivy__app self__COLON__ivy__app;
                                                    if (((loc__lhs).tag == 1)) self__COLON__ivy__app = ivyc_s1::ivy__expr::unwrap< ivyc_s1::ivy__app >(loc__lhs);
                                                    if(((loc__lhs).tag == 1)){
                                                        loc__0 = ext__ivy__app__get_func(self__COLON__ivy__app);
                                                    }
                                                    else {
                                                        loc__0 = ext__ivy__expr__get_func(loc__lhs);
                                                    }
                                                }
                                                {
                                                    ivy__app self__COLON__ivy__app;
                                                    if (((loc__0).tag == 1)) self__COLON__ivy__app = ivyc_s1::ivy__expr::unwrap< ivyc_s1::ivy__app >(loc__0);
                                                    if(((loc__0).tag == 1)){
                                                        loc__1 = ext__ivy__app__is(self__COLON__ivy__app, ivy__verb__colon);
                                                    }
                                                    else {
                                                        loc__1 = ext__ivy__expr__is(loc__0, ivy__verb__colon);
                                                    }
                                                }
                                                if(loc__1){
                                                    {
                                                        res = true;
                                                    }
                                                }
                                                else {
                                                    {
                                                        res = true;
                                                        {
                                                            vector__ivy__expr__ loc__0;
                                                            {
                                                                {
                                                                    ivy__app self__COLON__ivy__app;
                                                                    if (((loc__lhs).tag == 1)) self__COLON__ivy__app = ivyc_s1::ivy__expr::unwrap< ivyc_s1::ivy__app >(loc__lhs);
                                                                    if(((loc__lhs).tag == 1)){
                                                                        loc__0 = ext__ivy__app__get_args(self__COLON__ivy__app);
                                                                    }
                                                                    else {
                                                                        loc__0 = ext__ivy__expr__get_args(loc__lhs);
                                                                    }
                                                                }
                                                                {
                                                                    vector__ivy__expr__ loc__args;
                                                                    {
                                                                        loc__args = loc__0;
                                                                        {
                                                                            unsigned long long loc__idx;
    loc__idx = (unsigned long long)___ivy_choose(0,"loc:idx",16340);
                                                                            {
                                                                                loc__idx = vector__ivy__expr____begin(loc__args);
                                                                                while((loc__idx < vector__ivy__expr____end(loc__args))){
                                                                                    {
                                                                                        {
                                                                                            bool loc__0;
    loc__0 = (bool)___ivy_choose(0,"loc:0",16339);
                                                                                            {
                                                                                                {
                                                                                                    ivy__app self__COLON__ivy__app;
                                                                                                    if (((vector__ivy__expr____value(loc__args,loc__idx)).tag == 1)) self__COLON__ivy__app = ivyc_s1::ivy__expr::unwrap< ivyc_s1::ivy__app >(vector__ivy__expr____value(loc__args,loc__idx));
                                                                                                    if(((vector__ivy__expr____value(loc__args,loc__idx)).tag == 1)){
                                                                                                        loc__0 = ext__ivy__app__is(self__COLON__ivy__app, ivy__verb__colon);
                                                                                                    }
                                                                                                    else {
                                                                                                        loc__0 = ext__ivy__expr__is(vector__ivy__expr____value(loc__args,loc__idx), ivy__verb__colon);
                                                                                                    }
                                                                                                }
                                                                                                if(!loc__0){
                                                                                                    {
                                                                                                        res = false;
                                                                                                    }
                                                                                                }
                                                                                            }
                                                                                        }
                                                                                        loc__idx = ext__vector__ivy__expr____domain__next(loc__idx);
                                                                                    }
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
            else {
                if(((typing).tag == 1)){
                    {
                        ivyc_s1::ivy__expr loc__0;
                        bool loc__1;
    loc__1 = (bool)___ivy_choose(0,"loc:1",16346);
                        {
                            {
                                ivy__app self__COLON__ivy__app;
                                if (((typing).tag == 1)) self__COLON__ivy__app = ivyc_s1::ivy__expr::unwrap< ivyc_s1::ivy__app >(typing);
                                if(((typing).tag == 1)){
                                    loc__0 = ext__ivy__app__get_func(self__COLON__ivy__app);
                                }
                                else {
                                    loc__0 = ext__ivy__expr__get_func(typing);
                                }
                            }
                            {
                                ivy__app self__COLON__ivy__app;
                                if (((loc__0).tag == 1)) self__COLON__ivy__app = ivyc_s1::ivy__expr::unwrap< ivyc_s1::ivy__app >(loc__0);
                                if(((loc__0).tag == 1)){
                                    loc__1 = ext__ivy__app__is(self__COLON__ivy__app, ivy__verb__colon);
                                }
                                else {
                                    loc__1 = ext__ivy__expr__is(loc__0, ivy__verb__colon);
                                }
                            }
                            if(loc__1){
                                res = true;
                            }
                        }
                    }
                }
            }
        }
    }
    return res;
}
void ivyc_s1::ext__ivy__stmt__parse_lang_stmt(pstate& st, int prio, ivyc_s1::ivy__stmt& res){
    {
        {
            ivy__asgn loc__s;
            {
                ext__pstate__get_ann(st, loc__s.ann);
                if((st.tok == __lit<str>("call"))){
                    {
                        ext__pstate__consume(st);
                    }
                }
                ext__ivy__expr__parse(st, 0, loc__s.lhs);
                if((st.ok && (st.tok == __lit<str>(":=")))){
                    {
                        ext__pstate__consume(st);
                        ext__ivy__expr__parse(st, 0, loc__s.rhs);
                        if((st.ok && (st.tok == __lit<str>(";")))){
                            {
                                ext__pstate__consume(st);
                            }
                        }
                        else {
                            {
                                st.ok = (st.tok == __lit<str>("}"));
                            }
                        }
                        res = ivyc_s1::ivy__stmt(0, new ivyc_s1::ivy__stmt::twrap<ivyc_s1::ivy__asgn>(loc__s));
                    }
                }
                else {
                    if((st.ok && ((st.tok == __lit<str>(";")) || (st.tok == __lit<str>("}"))))){
                        {
                            if((st.tok == __lit<str>(";"))){
                                {
                                    ext__pstate__consume(st);
                                }
                            }
                            {
                                bool loc__0;
    loc__0 = (bool)___ivy_choose(0,"loc:0",16350);
                                {
                                    {
                                        ivy__app self__COLON__ivy__app;
                                        if (((loc__s.lhs).tag == 1)) self__COLON__ivy__app = ivyc_s1::ivy__expr::unwrap< ivyc_s1::ivy__app >(loc__s.lhs);
                                        if(((loc__s.lhs).tag == 1)){
                                            loc__0 = ext__ivy__app__is(self__COLON__ivy__app, ivy__verb__varv);
                                        }
                                        else {
                                            loc__0 = ext__ivy__expr__is(loc__s.lhs, ivy__verb__varv);
                                        }
                                    }
                                    if(loc__0){
                                        {
                                            {
                                                ivy__varst loc__vst;
                                                {
                                                    loc__vst.ann = loc__s.ann;
                                                    {
                                                        ivy__app self__COLON__ivy__app;
                                                        if (((loc__s.lhs).tag == 1)) self__COLON__ivy__app = ivyc_s1::ivy__expr::unwrap< ivyc_s1::ivy__app >(loc__s.lhs);
                                                        if(((loc__s.lhs).tag == 1)){
                                                            loc__vst.name = ext__ivy__app__get_arg(self__COLON__ivy__app, 0);
                                                        }
                                                        else {
                                                            loc__vst.name = ext__ivy__expr__get_arg(loc__s.lhs, 0);
                                                        }
                                                    }
                                                    res = ivyc_s1::ivy__stmt(6, new ivyc_s1::ivy__stmt::twrap<ivyc_s1::ivy__varst>(loc__vst));
                                                }
                                            }
                                        }
                                    }
                                    else {
                                        {
                                            loc__s.rhs = loc__s.lhs;
                                            {
                                                ivyc_s1::annot loc__0;
                                                {
                                                    {
                                                        annot_i self__COLON__annot_i;
                                                        if (((loc__s.ann).tag == 0)) self__COLON__annot_i = ivyc_s1::annot::unwrap< ivyc_s1::annot_i >(loc__s.ann);
                                                        if(((loc__s.ann).tag == 0)){
                                                            loc__0 = ext__annot_i__strip(self__COLON__annot_i);
                                                        }
                                                        else {
                                                            loc__0 = ext__annot__strip(loc__s.ann);
                                                        }
                                                    }
                                                    loc__s.lhs = ext__ivy__empty__make(loc__0);
                                                }
                                            }
                                            res = ivyc_s1::ivy__stmt(0, new ivyc_s1::ivy__stmt::twrap<ivyc_s1::ivy__asgn>(loc__s));
                                        }
                                    }
                                }
                            }
                        }
                    }
                    else {
                        {
                            st.ok = false;
                        }
                    }
                }
            }
        }
    }
}
bool ivyc_s1::ext__cpp__is_logvar_name(const str& name){
    bool res;
    res = (bool)___ivy_choose(0,"fml:res",0);
    if(char__is_capital(str__value(name,0))){
        {
            res = true;
            {
                unsigned long long loc__0;
    loc__0 = (unsigned long long)___ivy_choose(0,"loc:0",16353);
                {
                    loc__0 = ext__pos__next(str__begin(name));
                    {
                        unsigned long long loc__idx;
    loc__idx = (unsigned long long)___ivy_choose(0,"loc:idx",16352);
                        {
                            loc__idx = loc__0;
                            while((res && (loc__idx < str__end(name)))){
                                res = char__is_digit(str__value(name,loc__idx));
                            }
                            loc__idx = ext__pos__next(loc__idx);
                        }
                    }
                }
            }
        }
    }
    return res;
}
void ivyc_s1::ext__cpp__expr__tup__encode(const vector__cpp__expr__& s, pretty& b, int prio){
    if((0 < vector__cpp__expr____end(s))){
        {
            ext__pretty__extend(b, __lit<str>(" "));
            ext__pretty__extend(b, __lit<str>("("));
            {
                cpp__pi self__COLON__cpp__pi;
                if (((vector__cpp__expr____value(s,0)).tag == 3)) self__COLON__cpp__pi = ivyc_s1::cpp__expr::unwrap< ivyc_s1::cpp__pi >(vector__cpp__expr____value(s,0));
                if(((vector__cpp__expr____value(s,0)).tag == 3)){
                    ext__cpp__pi__encode(self__COLON__cpp__pi, b, 0);
                }
                else {
                    {
                        cpp__app self__COLON__cpp__app;
                        if (((vector__cpp__expr____value(s,0)).tag == 1)) self__COLON__cpp__app = ivyc_s1::cpp__expr::unwrap< ivyc_s1::cpp__app >(vector__cpp__expr____value(s,0));
                        if(((vector__cpp__expr____value(s,0)).tag == 1)){
                            ext__cpp__app__encode(self__COLON__cpp__app, b, 0);
                        }
                        else {
                            {
                                cpp__symbol self__COLON__cpp__symbol;
                                if (((vector__cpp__expr____value(s,0)).tag == 0)) self__COLON__cpp__symbol = ivyc_s1::cpp__expr::unwrap< ivyc_s1::cpp__symbol >(vector__cpp__expr____value(s,0));
                                if(((vector__cpp__expr____value(s,0)).tag == 0)){
                                    ext__cpp__symbol__encode(self__COLON__cpp__symbol, b, 0);
                                }
                                else {
                                    ext__cpp__expr__encode(vector__cpp__expr____value(s,0), b, 0);
                                }
                            }
                        }
                    }
                }
            }
            {
                unsigned long long loc__0;
    loc__0 = (unsigned long long)___ivy_choose(0,"loc:0",16355);
                {
                    loc__0 = ext__vector__cpp__expr____domain__next(vector__cpp__expr____begin(s));
                    {
                        unsigned long long loc__idx;
    loc__idx = (unsigned long long)___ivy_choose(0,"loc:idx",16354);
                        {
                            loc__idx = loc__0;
                            while((loc__idx < vector__cpp__expr____end(s))){
                                {
                                    ext__pretty__extend(b, __lit<str>(","));
                                    {
                                        cpp__pi self__COLON__cpp__pi;
                                        if (((vector__cpp__expr____value(s,loc__idx)).tag == 3)) self__COLON__cpp__pi = ivyc_s1::cpp__expr::unwrap< ivyc_s1::cpp__pi >(vector__cpp__expr____value(s,loc__idx));
                                        if(((vector__cpp__expr____value(s,loc__idx)).tag == 3)){
                                            ext__cpp__pi__encode(self__COLON__cpp__pi, b, 0);
                                        }
                                        else {
                                            {
                                                cpp__app self__COLON__cpp__app;
                                                if (((vector__cpp__expr____value(s,loc__idx)).tag == 1)) self__COLON__cpp__app = ivyc_s1::cpp__expr::unwrap< ivyc_s1::cpp__app >(vector__cpp__expr____value(s,loc__idx));
                                                if(((vector__cpp__expr____value(s,loc__idx)).tag == 1)){
                                                    ext__cpp__app__encode(self__COLON__cpp__app, b, 0);
                                                }
                                                else {
                                                    {
                                                        cpp__symbol self__COLON__cpp__symbol;
                                                        if (((vector__cpp__expr____value(s,loc__idx)).tag == 0)) self__COLON__cpp__symbol = ivyc_s1::cpp__expr::unwrap< ivyc_s1::cpp__symbol >(vector__cpp__expr____value(s,loc__idx));
                                                        if(((vector__cpp__expr____value(s,loc__idx)).tag == 0)){
                                                            ext__cpp__symbol__encode(self__COLON__cpp__symbol, b, 0);
                                                        }
                                                        else {
                                                            ext__cpp__expr__encode(vector__cpp__expr____value(s,loc__idx), b, 0);
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                    loc__idx = ext__vector__cpp__expr____domain__next(loc__idx);
                                }
                            }
                            ext__pretty__extend(b, __lit<str>(")"));
                        }
                    }
                }
            }
        }
    }
}
void ivyc_s1::ext__ivy__add_sizet_conv(cpp__structdecl& s){
    {
        {
            cpp__funcdecl loc__tosizet;
    loc__tosizet.ftype.base.is_const = (bool)___ivy_choose(0,"loc:tosizet",16357);
    loc__tosizet.ftype.base.is_ref = (bool)___ivy_choose(0,"loc:tosizet",16357);
    loc__tosizet.ftype.is_const = (bool)___ivy_choose(0,"loc:tosizet",16357);
    loc__tosizet.ftype.has_initializer = (bool)___ivy_choose(0,"loc:tosizet",16357);
    loc__tosizet.has_body = (bool)___ivy_choose(0,"loc:tosizet",16357);
    loc__tosizet.is_static = (bool)___ivy_choose(0,"loc:tosizet",16357);
    loc__tosizet.is_virtual = (bool)___ivy_choose(0,"loc:tosizet",16357);
            {
                loc__tosizet.ftype.base.name = ext__cpp__symbol__makestr(__lit<str>("operator std::size_t"), s.ann);
                loc__tosizet.ftype.is_const = true;
                loc__tosizet.has_body = true;
                {
                    ivyc_s1::cpp__expr loc__0;
                    {
                        loc__0 = ext__cpp__symbol__makestr(__lit<str>("0"), s.ann);
                        loc__tosizet.body = ext__cpp__retst__make(loc__0, s.ann);
                    }
                }
                ext__vector__cpp__decl____append(s.members, ivyc_s1::cpp__decl(4, new ivyc_s1::cpp__decl::twrap<ivyc_s1::cpp__funcdecl>(loc__tosizet)));
            }
        }
    }
}
void ivyc_s1::ext__ivy__typedc__build_subtypes(const ivy__typedc& s, ivy__subtypes& st){
    if(s.has_super){
        {
            {
                ivyc_s1::ivy__ident loc__0;
                {
                    {
                        ivy__symbol self__COLON__ivy__symbol;
                        if (((s.super).tag == 0)) self__COLON__ivy__symbol = ivyc_s1::ivy__expr::unwrap< ivyc_s1::ivy__symbol >(s.super);
                        if(((s.super).tag == 0)){
                            loc__0 = ext__ivy__symbol__get_name(self__COLON__ivy__symbol);
                        }
                        else {
                            loc__0 = ext__ivy__expr__get_name(s.super);
                        }
                    }
                    ext__ivy__ident_to_exprs__add(st.subtypes_of, loc__0, s.sort);
                }
            }
            {
                ivyc_s1::ivy__ident loc__0;
                {
                    {
                        ivy__symbol self__COLON__ivy__symbol;
                        if (((s.sort).tag == 0)) self__COLON__ivy__symbol = ivyc_s1::ivy__expr::unwrap< ivyc_s1::ivy__symbol >(s.sort);
                        if(((s.sort).tag == 0)){
                            loc__0 = ext__ivy__symbol__get_name(self__COLON__ivy__symbol);
                        }
                        else {
                            loc__0 = ext__ivy__expr__get_name(s.sort);
                        }
                    }
                    ext__ivy__symeval__set(st.supertype_of, loc__0, s.super);
                }
            }
        }
    }
}
ivyc_s1::cpp__ident ivyc_s1::ext__ivy__strident__to_cpp(const ivy__strident& s, bool native){
    ivyc_s1::cpp__ident res;
    {
        {
            cpp__strident loc__0;
            {
                loc__0 = ext__ivy__strident_to_cpp(s, native);
                {
                    cpp__strident loc__x;
                    {
                        loc__x = loc__0;
                        {
                            ivyc_s1::cpp__ident loc__y;
                            {
                                loc__y = ivyc_s1::cpp__ident(0, new ivyc_s1::cpp__ident::twrap<ivyc_s1::cpp__strident>(loc__x));
                                res = loc__y;
                            }
                        }
                    }
                }
            }
        }
    }
    return res;
}
void ivyc_s1::ext__vector__ivy__ident____append(vector__ivy__ident__& a, ivyc_s1::ivy__ident v){
    {

        a.push_back(v);
    }
}
void ivyc_s1::ext__cpp__stmt__encode(ivyc_s1::cpp__stmt s, pretty& b, int prio){
    {
    }
}
ivyc_s1::ivy__stmt ivyc_s1::ext__ivy__sequence__flat(const ivy__sequence& s, ivy__flatst& st){
    ivyc_s1::ivy__stmt res;
    {
        {
            ivy__sequence loc__t;
            {
                loc__t = ext__ivy__sequence__flat_int(s, st);
                loc__t.ann = s.ann;
                res = ivyc_s1::ivy__stmt(1, new ivyc_s1::ivy__stmt::twrap<ivyc_s1::ivy__sequence>(loc__t));
            }
        }
    }
    return res;
}
void ivyc_s1::ext__ivy__decl__reg_member(ivyc_s1::ivy__decl s, ivy__tocppst& st){
    {
    }
}
ivyc_s1::ivy__stmt ivyc_s1::ext__ivy__stmt__flat(ivyc_s1::ivy__stmt s, ivy__flatst& st){
    ivyc_s1::ivy__stmt res;
    res = s;
    return res;
}
unsigned long long ivyc_s1::ext__vector__pos____domain__next(unsigned long long x){
    unsigned long long y;
    y = (unsigned long long)___ivy_choose(0,"fml:y",0);
    {
        y = (x + 1);
    }
    return y;
}
ivyc_s1::vector__ivy__expr__ ivyc_s1::ext__ivy__comma__unfold_left(ivyc_s1::ivy__expr s){
    ivyc_s1::vector__ivy__expr__ args;
    {
        {
            ivyc_s1::ivy__expr loc__e;
            {
                loc__e = s;
                {
                    bool loc__0;
    loc__0 = (bool)___ivy_choose(0,"loc:0",16366);
                    {
                        {
                            ivy__app self__COLON__ivy__app;
                            if (((loc__e).tag == 1)) self__COLON__ivy__app = ivyc_s1::ivy__expr::unwrap< ivyc_s1::ivy__app >(loc__e);
                            if(((loc__e).tag == 1)){
                                loc__0 = ext__ivy__app__is_typed(self__COLON__ivy__app, ivy__verb__comma);
                            }
                            else {
                                loc__0 = ext__ivy__expr__is_typed(loc__e, ivy__verb__comma);
                            }
                        }
                        {
                            bool loc__b;
    loc__b = (bool)___ivy_choose(0,"loc:b",16365);
                            {
                                loc__b = loc__0;
                                while(loc__b){
                                    {
                                        {
                                            ivyc_s1::ivy__expr loc__0;
                                            {
                                                {
                                                    ivy__app self__COLON__ivy__app;
                                                    if (((loc__e).tag == 1)) self__COLON__ivy__app = ivyc_s1::ivy__expr::unwrap< ivyc_s1::ivy__app >(loc__e);
                                                    if(((loc__e).tag == 1)){
                                                        loc__0 = ext__ivy__app__get_arg(self__COLON__ivy__app, 1);
                                                    }
                                                    else {
                                                        loc__0 = ext__ivy__expr__get_arg(loc__e, 1);
                                                    }
                                                }
                                                ext__vector__ivy__expr____append(args, loc__0);
                                            }
                                        }
                                        {
                                            ivy__app self__COLON__ivy__app;
                                            if (((loc__e).tag == 1)) self__COLON__ivy__app = ivyc_s1::ivy__expr::unwrap< ivyc_s1::ivy__app >(loc__e);
                                            if(((loc__e).tag == 1)){
                                                loc__e = ext__ivy__app__get_arg(self__COLON__ivy__app, 0);
                                            }
                                            else {
                                                loc__e = ext__ivy__expr__get_arg(loc__e, 0);
                                            }
                                        }
                                        {
                                            ivy__app self__COLON__ivy__app;
                                            if (((loc__e).tag == 1)) self__COLON__ivy__app = ivyc_s1::ivy__expr::unwrap< ivyc_s1::ivy__app >(loc__e);
                                            if(((loc__e).tag == 1)){
                                                loc__b = ext__ivy__app__is_typed(self__COLON__ivy__app, ivy__verb__comma);
                                            }
                                            else {
                                                loc__b = ext__ivy__expr__is_typed(loc__e, ivy__verb__comma);
                                            }
                                        }
                                    }
                                }
                                ext__vector__ivy__expr____append(args, loc__e);
                                ext__vector__ivy__expr____reverse(args);
                            }
                        }
                    }
                }
            }
        }
    }
    return args;
}
ivyc_s1::cpp__expr ivyc_s1::ext__cpp__new__make(ivyc_s1::cpp__expr arg, ivyc_s1::annot ann){
    ivyc_s1::cpp__expr res;
    {
        cpp__app loc__s;
        {
            loc__s.func = ext__cpp__symbol__makestr(__lit<str>("new"), ann);
            ext__vector__cpp__expr____append(loc__s.args, arg);
            loc__s.ann = ann;
            res = ivyc_s1::cpp__expr(1, new ivyc_s1::cpp__expr::twrap<ivyc_s1::cpp__app>(loc__s));
        }
    }
    return res;
}
ivyc_s1::ivy__decl ivyc_s1::ext__ivy__decl__func_to_action(ivyc_s1::ivy__decl s){
    ivyc_s1::ivy__decl res;
    {
        res = s;
    }
    return res;
}
void ivyc_s1::ext__ivy__param_map__set(ivy__param_map& a, ivyc_s1::ivy__ident x, unsigned long long y){
    {

        a[x] = y;
    }
}
void ivyc_s1::ext__vector__ivy__error____append(vector__ivy__error__& a, ivyc_s1::ivy__error v){
    {

        a.push_back(v);
    }
}
void ivyc_s1::ext__cpp__strident__encode(const cpp__strident& s, pretty& b, int prio){
    {
        ext__pretty__extend(b, s.val);
        if(true){
            if((0 < vector__cpp__ident____end(s.subscrs))){
                {
                    ext__pretty__extend(b, __lit<str>("< "));
                    {
                        unsigned long long loc__idx;
    loc__idx = (unsigned long long)___ivy_choose(0,"loc:idx",16369);
                        {
                            loc__idx = vector__cpp__ident____begin(s.subscrs);
                            while((loc__idx < vector__cpp__ident____end(s.subscrs))){
                                {
                                    if((0 < loc__idx)){
                                        {
                                            ext__pretty__extend(b, __lit<str>(","));
                                        }
                                    }
                                    {
                                        cpp__dotident self__COLON__cpp__dotident;
                                        if (((vector__cpp__ident____value(s.subscrs,loc__idx)).tag == 2)) self__COLON__cpp__dotident = ivyc_s1::cpp__ident::unwrap< ivyc_s1::cpp__dotident >(vector__cpp__ident____value(s.subscrs,loc__idx));
                                        if(((vector__cpp__ident____value(s.subscrs,loc__idx)).tag == 2)){
                                            ext__cpp__dotident__encode(self__COLON__cpp__dotident, b, 0);
                                        }
                                        else {
                                            {
                                                cpp__numident self__COLON__cpp__numident;
                                                if (((vector__cpp__ident____value(s.subscrs,loc__idx)).tag == 1)) self__COLON__cpp__numident = ivyc_s1::cpp__ident::unwrap< ivyc_s1::cpp__numident >(vector__cpp__ident____value(s.subscrs,loc__idx));
                                                if(((vector__cpp__ident____value(s.subscrs,loc__idx)).tag == 1)){
                                                    ext__cpp__numident__encode(self__COLON__cpp__numident, b, 0);
                                                }
                                                else {
                                                    {
                                                        cpp__strident self__COLON__cpp__strident;
                                                        if (((vector__cpp__ident____value(s.subscrs,loc__idx)).tag == 0)) self__COLON__cpp__strident = ivyc_s1::cpp__ident::unwrap< ivyc_s1::cpp__strident >(vector__cpp__ident____value(s.subscrs,loc__idx));
                                                        if(((vector__cpp__ident____value(s.subscrs,loc__idx)).tag == 0)){
                                                            ext__cpp__strident__encode(self__COLON__cpp__strident, b, 0);
                                                        }
                                                        else {
                                                            ext__cpp__ident__encode(vector__cpp__ident____value(s.subscrs,loc__idx), b, 0);
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                    loc__idx = ext__vector__cpp__ident____domain__next(loc__idx);
                                }
                            }
                            ext__pretty__extend(b, __lit<str>(" >"));
                        }
                    }
                }
            }
        }
        else {
            {
                unsigned long long loc__idx;
    loc__idx = (unsigned long long)___ivy_choose(0,"loc:idx",16370);
                {
                    loc__idx = vector__cpp__ident____begin(s.subscrs);
                    while((loc__idx < vector__cpp__ident____end(s.subscrs))){
                        {
                            ext__pretty__extend(b, __lit<str>("["));
                            {
                                cpp__dotident self__COLON__cpp__dotident;
                                if (((vector__cpp__ident____value(s.subscrs,loc__idx)).tag == 2)) self__COLON__cpp__dotident = ivyc_s1::cpp__ident::unwrap< ivyc_s1::cpp__dotident >(vector__cpp__ident____value(s.subscrs,loc__idx));
                                if(((vector__cpp__ident____value(s.subscrs,loc__idx)).tag == 2)){
                                    ext__cpp__dotident__encode(self__COLON__cpp__dotident, b, 0);
                                }
                                else {
                                    {
                                        cpp__numident self__COLON__cpp__numident;
                                        if (((vector__cpp__ident____value(s.subscrs,loc__idx)).tag == 1)) self__COLON__cpp__numident = ivyc_s1::cpp__ident::unwrap< ivyc_s1::cpp__numident >(vector__cpp__ident____value(s.subscrs,loc__idx));
                                        if(((vector__cpp__ident____value(s.subscrs,loc__idx)).tag == 1)){
                                            ext__cpp__numident__encode(self__COLON__cpp__numident, b, 0);
                                        }
                                        else {
                                            {
                                                cpp__strident self__COLON__cpp__strident;
                                                if (((vector__cpp__ident____value(s.subscrs,loc__idx)).tag == 0)) self__COLON__cpp__strident = ivyc_s1::cpp__ident::unwrap< ivyc_s1::cpp__strident >(vector__cpp__ident____value(s.subscrs,loc__idx));
                                                if(((vector__cpp__ident____value(s.subscrs,loc__idx)).tag == 0)){
                                                    ext__cpp__strident__encode(self__COLON__cpp__strident, b, 0);
                                                }
                                                else {
                                                    ext__cpp__ident__encode(vector__cpp__ident____value(s.subscrs,loc__idx), b, 0);
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                            ext__pretty__extend(b, __lit<str>("]"));
                            loc__idx = ext__vector__cpp__ident____domain__next(loc__idx);
                        }
                    }
                }
            }
        }
    }
}
void ivyc_s1::ext__ivy__instantiatedc__defd(const ivy__instantiatedc& s, ivy__flatst& st){
    {
        {
            ivy__moduledc loc__mod;
            {
                {
                    ivy__ident_to_ident loc__old_prmvals;
                    {
                        loc__old_prmvals = st.prmvals;
                        loc__mod = ext__ivy__instantiatedc__setup(s, st);
                        {
                            ivy__instancedc self__COLON__ivy__instancedc;
                            if (((loc__mod.body).tag == 10)) self__COLON__ivy__instancedc = ivyc_s1::ivy__decl::unwrap< ivyc_s1::ivy__instancedc >(loc__mod.body);
                            if(((loc__mod.body).tag == 10)){
                                ext__ivy__instancedc__defd(self__COLON__ivy__instancedc, st);
                            }
                            else {
                                {
                                    ivy__objectdc self__COLON__ivy__objectdc;
                                    if (((loc__mod.body).tag == 9)) self__COLON__ivy__objectdc = ivyc_s1::ivy__decl::unwrap< ivyc_s1::ivy__objectdc >(loc__mod.body);
                                    if(((loc__mod.body).tag == 9)){
                                        ext__ivy__objectdc__defd(self__COLON__ivy__objectdc, st);
                                    }
                                    else {
                                        {
                                            ivy__instantiatedc self__COLON__ivy__instantiatedc;
                                            if (((loc__mod.body).tag == 8)) self__COLON__ivy__instantiatedc = ivyc_s1::ivy__decl::unwrap< ivyc_s1::ivy__instantiatedc >(loc__mod.body);
                                            if(((loc__mod.body).tag == 8)){
                                                ext__ivy__instantiatedc__defd(self__COLON__ivy__instantiatedc, st);
                                            }
                                            else {
                                                {
                                                    ivy__moduledc self__COLON__ivy__moduledc;
                                                    if (((loc__mod.body).tag == 7)) self__COLON__ivy__moduledc = ivyc_s1::ivy__decl::unwrap< ivyc_s1::ivy__moduledc >(loc__mod.body);
                                                    if(((loc__mod.body).tag == 7)){
                                                        ext__ivy__moduledc__defd(self__COLON__ivy__moduledc, st);
                                                    }
                                                    else {
                                                        {
                                                            ivy__vardc self__COLON__ivy__vardc;
                                                            if (((loc__mod.body).tag == 3)) self__COLON__ivy__vardc = ivyc_s1::ivy__decl::unwrap< ivyc_s1::ivy__vardc >(loc__mod.body);
                                                            if(((loc__mod.body).tag == 3)){
                                                                ext__ivy__vardc__defd(self__COLON__ivy__vardc, st);
                                                            }
                                                            else {
                                                                {
                                                                    ivy__typedc self__COLON__ivy__typedc;
                                                                    if (((loc__mod.body).tag == 2)) self__COLON__ivy__typedc = ivyc_s1::ivy__decl::unwrap< ivyc_s1::ivy__typedc >(loc__mod.body);
                                                                    if(((loc__mod.body).tag == 2)){
                                                                        ext__ivy__typedc__defd(self__COLON__ivy__typedc, st);
                                                                    }
                                                                    else {
                                                                        {
                                                                            ivy__groupdc self__COLON__ivy__groupdc;
                                                                            if (((loc__mod.body).tag == 1)) self__COLON__ivy__groupdc = ivyc_s1::ivy__decl::unwrap< ivyc_s1::ivy__groupdc >(loc__mod.body);
                                                                            if(((loc__mod.body).tag == 1)){
                                                                                ext__ivy__groupdc__defd(self__COLON__ivy__groupdc, st);
                                                                            }
                                                                            else {
                                                                                {
                                                                                    ivy__actdc self__COLON__ivy__actdc;
                                                                                    if (((loc__mod.body).tag == 0)) self__COLON__ivy__actdc = ivyc_s1::ivy__decl::unwrap< ivyc_s1::ivy__actdc >(loc__mod.body);
                                                                                    if(((loc__mod.body).tag == 0)){
                                                                                        ext__ivy__actdc__defd(self__COLON__ivy__actdc, st);
                                                                                    }
                                                                                    else {
                                                                                        ext__ivy__decl__defd(loc__mod.body, st);
                                                                                    }
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                        st.prmvals = loc__old_prmvals;
                    }
                }
            }
        }
    }
}
void ivyc_s1::ext__ivy__ident_to_prototype__set(ivy__ident_to_prototype& a, ivyc_s1::ivy__ident x, const ivy__prototype& y){
    {

        a[x] = y;
    }
}
ivyc_s1::ivy__expr ivyc_s1::ext__ivy__expr__type_decorate(ivyc_s1::ivy__expr e, ivy__decost& st, const ivy__symeval& m, ivyc_s1::ivy__expr& ty){
    ivyc_s1::ivy__expr res;
    {
    }
    return res;
}
bool ivyc_s1::ext__ivy__subtypes__is_subtype(const ivy__subtypes& s, ivyc_s1::ivy__expr sub, ivyc_s1::ivy__expr super){
    bool res;
    res = (bool)___ivy_choose(0,"fml:res",0);
    if(((sub).tag == 0)){
        {
            ivyc_s1::ivy__ident loc__0;
            {
                {
                    ivy__symbol self__COLON__ivy__symbol;
                    if (((sub).tag == 0)) self__COLON__ivy__symbol = ivyc_s1::ivy__expr::unwrap< ivyc_s1::ivy__symbol >(sub);
                    if(((sub).tag == 0)){
                        loc__0 = ext__ivy__symbol__get_name(self__COLON__ivy__symbol);
                    }
                    else {
                        loc__0 = ext__ivy__expr__get_name(sub);
                    }
                }
                {
                    ivyc_s1::ivy__ident loc__name;
                    {
                        loc__name = loc__0;
                        {
                            bool loc__0;
    loc__0 = (bool)___ivy_choose(0,"loc:0",16374);
                            {
                                loc__0 = ext__ivy__symeval__mem(s.supertype_of, loc__name);
                                if(loc__0){
                                    {
                                        ivyc_s1::ivy__ident loc__0;
                                        ivyc_s1::ivy__ident loc__1;
                                        {
                                            {
                                                ivy__symbol self__COLON__ivy__symbol;
                                                if (((ivy__symeval__value(s.supertype_of,loc__name)).tag == 0)) self__COLON__ivy__symbol = ivyc_s1::ivy__expr::unwrap< ivyc_s1::ivy__symbol >(ivy__symeval__value(s.supertype_of,loc__name));
                                                if(((ivy__symeval__value(s.supertype_of,loc__name)).tag == 0)){
                                                    loc__0 = ext__ivy__symbol__get_name(self__COLON__ivy__symbol);
                                                }
                                                else {
                                                    loc__0 = ext__ivy__expr__get_name(ivy__symeval__value(s.supertype_of,loc__name));
                                                }
                                            }
                                            {
                                                ivy__symbol self__COLON__ivy__symbol;
                                                if (((super).tag == 0)) self__COLON__ivy__symbol = ivyc_s1::ivy__expr::unwrap< ivyc_s1::ivy__symbol >(super);
                                                if(((super).tag == 0)){
                                                    loc__1 = ext__ivy__symbol__get_name(self__COLON__ivy__symbol);
                                                }
                                                else {
                                                    loc__1 = ext__ivy__expr__get_name(super);
                                                }
                                            }
                                            res = (loc__0 == loc__1);
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
    }
    return res;
}
void ivyc_s1::ext__ivy__type_context__push(ivy__type_context& s, ivyc_s1::ivy__expr typing){
    {
        {
            ivy__type_context__stack_entry loc__ent;
    loc__ent.any = (bool)___ivy_choose(0,"loc:ent",16055);
            {
                {
                    ivyc_s1::ivy__expr loc__0;
                    {
                        {
                            ivy__app self__COLON__ivy__app;
                            if (((typing).tag == 1)) self__COLON__ivy__app = ivyc_s1::ivy__expr::unwrap< ivyc_s1::ivy__app >(typing);
                            if(((typing).tag == 1)){
                                loc__0 = ext__ivy__app__get_arg(self__COLON__ivy__app, 0);
                            }
                            else {
                                loc__0 = ext__ivy__expr__get_arg(typing, 0);
                            }
                        }
                        {
                            ivy__symbol self__COLON__ivy__symbol;
                            if (((loc__0).tag == 0)) self__COLON__ivy__symbol = ivyc_s1::ivy__expr::unwrap< ivyc_s1::ivy__symbol >(loc__0);
                            if(((loc__0).tag == 0)){
                                loc__ent.id = ext__ivy__symbol__get_name(self__COLON__ivy__symbol);
                            }
                            else {
                                loc__ent.id = ext__ivy__expr__get_name(loc__0);
                            }
                        }
                    }
                }
                loc__ent.any = ext__ivy__symeval__mem(s.m, loc__ent.id);
                if(loc__ent.any){
                    {
                        loc__ent.val = ivy__symeval__value(s.m,loc__ent.id);
                    }
                }
                ext__vector__ivy__type_context__stack_entry____append(s.stack, loc__ent);
                {
                    ivyc_s1::ivy__expr loc__0;
                    {
                        {
                            ivy__app self__COLON__ivy__app;
                            if (((typing).tag == 1)) self__COLON__ivy__app = ivyc_s1::ivy__expr::unwrap< ivyc_s1::ivy__app >(typing);
                            if(((typing).tag == 1)){
                                loc__0 = ext__ivy__app__get_arg(self__COLON__ivy__app, 1);
                            }
                            else {
                                loc__0 = ext__ivy__expr__get_arg(typing, 1);
                            }
                        }
                        ext__ivy__symeval__set(s.m, loc__ent.id, loc__0);
                    }
                }
            }
        }
    }
}
void ivyc_s1::ext__ivy__elidest__map__get(const ivy__elidest__map& a, ivyc_s1::ivy__ident x, bool& y){
    {

        ivy__elidest__map::const_iterator it = a.find(x);
        if (it != a.end())
            y = it->second;
    }
}
ivyc_s1::cpp__expr ivyc_s1::ext__cpp__and__make(ivyc_s1::cpp__expr lhs, ivyc_s1::cpp__expr rhs, ivyc_s1::annot ann){
    ivyc_s1::cpp__expr res;
    {
        cpp__app loc__s;
        {
            loc__s.func = ext__cpp__symbol__makestr(__lit<str>("&"), ann);
            ext__vector__cpp__expr____append(loc__s.args, lhs);
            ext__vector__cpp__expr____append(loc__s.args, rhs);
            loc__s.ann = ann;
            res = ivyc_s1::cpp__expr(1, new ivyc_s1::cpp__expr::twrap<ivyc_s1::cpp__app>(loc__s));
        }
    }
    return res;
}
void ivyc_s1::ext__cpp__asgn__encode(const cpp__asgn& s, pretty& b, int prio){
    {
        {
            annot_i self__COLON__annot_i;
            if (((s.ann).tag == 0)) self__COLON__annot_i = ivyc_s1::annot::unwrap< ivyc_s1::annot_i >(s.ann);
            if(((s.ann).tag == 0)){
                ext__annot_i__encode(self__COLON__annot_i, b);
            }
            else {
                ext__annot__encode(s.ann, b);
            }
        }
        if((1 < prio)){
            {
                ext__pretty__nest(b);
                ext__pretty__extend(b, __lit<str>("{"));
                ext__pretty__newline(b);
            }
        }
        ext__cpp__asgn__encode_int(s, b, prio);
        if((1 < prio)){
            {
                ext__pretty__unnest(b);
                ext__pretty__newline(b);
                ext__pretty__extend(b, __lit<str>("}"));
            }
        }
    }
}
void ivyc_s1::ext__vector__cpp__decl____append(vector__cpp__decl__& a, ivyc_s1::cpp__decl v){
    {

        a.push_back(v);
    }
}
ivyc_s1::ivy__stmt ivyc_s1::ext__ivy__actdc__get_body(const ivy__actdc& s){
    ivyc_s1::ivy__stmt res;
    res = s.body;
    return res;
}
ivyc_s1::ivy__ident ivyc_s1::ext__ivy__ident__get_member(ivyc_s1::ivy__ident s){
    ivyc_s1::ivy__ident res;
    {
    }
    return res;
}
ivyc_s1::ivy__ident ivyc_s1::ext__ivy__expr__get_name(ivyc_s1::ivy__expr s){
    ivyc_s1::ivy__ident res;
    {
    }
    return res;
}
void ivyc_s1::ext__ivy__remove_local_vars(const vector__ivy__ident__& del, ivy__flatst& st){
    {
        unsigned long long loc__idx;
    loc__idx = (unsigned long long)___ivy_choose(0,"loc:idx",16393);
        {
            loc__idx = vector__ivy__ident____begin(del);
            while((loc__idx < vector__ivy__ident____end(del))){
                {
                    ivyc_s1::ivy__ident loc__id;
                    {
                        loc__id = vector__ivy__ident____value(del,loc__idx);
                        ext__ivy__ident_set__remove(st.locals, loc__id);
                        loc__idx = ext__vector__ivy__ident____domain__next(loc__idx);
                    }
                }
            }
        }
    }
}
ivyc_s1::ivy__strident ivyc_s1::ext__ivy__strident__get_last(const ivy__strident& s){
    ivyc_s1::ivy__strident res;
    res = s;
    return res;
}
ivyc_s1::annot ivyc_s1::ext__ivy__breakst__get_ann(const ivy__breakst& s){
    ivyc_s1::annot res;
    res = s.ann;
    return res;
}
void ivyc_s1::ext__read_string_literal(pstate& st){
    {
        st.tok = __lit<str>("");
        ext__str__append(st.tok, 34);
        st.p = ext__pos__next(st.p);
        while((st.ok && (st.p < str__end(st.b)) && !(str__value(st.b,st.p) == 34))){
            {
                int loc__chr;
    loc__chr = (int)___ivy_choose(0,"loc:chr",16394);
                {
                    loc__chr = str__value(st.b,st.p);
                    if((loc__chr == 92)){
                        {
                            ext__str__append(st.tok, 92);
                            st.p = ext__pos__next(st.p);
                            if((st.p < str__end(st.b))){
                                {
                                    loc__chr = str__value(st.b,st.p);
                                    if(!char__non_printing(loc__chr)){
                                        {
                                            ext__str__append(st.tok, loc__chr);
                                            st.p = ext__pos__next(st.p);
                                        }
                                    }
                                    else {
                                        {
                                            st.ok = false;
                                        }
                                    }
                                }
                            }
                            else {
                                st.ok = false;
                            }
                        }
                    }
                    else {
                        if(!char__non_printing(loc__chr)){
                            {
                                ext__str__append(st.tok, loc__chr);
                                st.p = ext__pos__next(st.p);
                            }
                        }
                        else {
                            st.ok = false;
                        }
                    }
                }
            }
        }
        if((st.ok && (st.p < str__end(st.b)))){
            {
                ext__str__append(st.tok, 34);
                st.p = ext__pos__next(st.p);
            }
        }
        else {
            st.ok = false;
        }
    }
}
unsigned long long ivyc_s1::ext__vector__pretty__token____domain__prev(unsigned long long x){
    unsigned long long y;
    y = (unsigned long long)___ivy_choose(0,"fml:y",0);
    {
        unsigned long long __tmp53;
        __tmp53 = x;
        unsigned long long __tmp54;
        __tmp54 = 1;
        y = ( __tmp53 < __tmp54 ? 0 : __tmp53 - __tmp54);
    }
    return y;
}
ivyc_s1::ivy__stmt ivyc_s1::ext__ivy__initdc__get_body(const ivy__initdc& s){
    ivyc_s1::ivy__stmt res;
    res = s.body;
    return res;
}
void ivyc_s1::ext__vector__ivy__type_context__stack_entry____append(vector__ivy__type_context__stack_entry__& a, const ivy__type_context__stack_entry& v){
    {

        a.push_back(v);
    }
}
ivyc_s1::cpp__expr ivyc_s1::ext__cpp__dot__make(ivyc_s1::cpp__expr lhs, ivyc_s1::cpp__expr rhs, ivyc_s1::annot ann){
    ivyc_s1::cpp__expr res;
    {
        cpp__app loc__s;
        {
            loc__s.func = ext__cpp__symbol__makestr(__lit<str>("."), ann);
            ext__vector__cpp__expr____append(loc__s.args, lhs);
            ext__vector__cpp__expr____append(loc__s.args, rhs);
            loc__s.ann = ann;
            res = ivyc_s1::cpp__expr(1, new ivyc_s1::cpp__expr::twrap<ivyc_s1::cpp__app>(loc__s));
        }
    }
    return res;
}
ivyc_s1::cpp__expr ivyc_s1::ext__cpp__plus__make(ivyc_s1::cpp__expr lhs, ivyc_s1::cpp__expr rhs, ivyc_s1::annot ann){
    ivyc_s1::cpp__expr res;
    {
        cpp__app loc__s;
        {
            loc__s.func = ext__cpp__symbol__makestr(__lit<str>("+"), ann);
            ext__vector__cpp__expr____append(loc__s.args, lhs);
            ext__vector__cpp__expr____append(loc__s.args, rhs);
            loc__s.ann = ann;
            res = ivyc_s1::cpp__expr(1, new ivyc_s1::cpp__expr::twrap<ivyc_s1::cpp__app>(loc__s));
        }
    }
    return res;
}
void ivyc_s1::ext__ivy__add_standard_traits(cpp__structdecl& s){
    {
        {
            cpp__funcdecl loc__0;
    loc__0.ftype.base.is_const = (bool)___ivy_choose(0,"loc:0",16401);
    loc__0.ftype.base.is_ref = (bool)___ivy_choose(0,"loc:0",16401);
    loc__0.ftype.is_const = (bool)___ivy_choose(0,"loc:0",16401);
    loc__0.ftype.has_initializer = (bool)___ivy_choose(0,"loc:0",16401);
    loc__0.has_body = (bool)___ivy_choose(0,"loc:0",16401);
    loc__0.is_static = (bool)___ivy_choose(0,"loc:0",16401);
    loc__0.is_virtual = (bool)___ivy_choose(0,"loc:0",16401);
            {
                loc__0 = ext__ivy__make_cpp_cons(s);
                ext__vector__cpp__decl____append(s.members, ivyc_s1::cpp__decl(4, new ivyc_s1::cpp__decl::twrap<ivyc_s1::cpp__funcdecl>(loc__0)));
            }
        }
        ext__ivy__add_numeric_cons(s);
        ext__ivy__add_sizet_conv(s);
        ext__ivy__add_is_seq_pred(s);
        ext__ivy__add_eq_pred(s);
        ext__ivy__add_diseq_pred(s);
        ext__ivy__add_is_zero_pred(s);
        ext__ivy__add_hasher(s);
    }
}
ivyc_s1::cpp__ident ivyc_s1::ext__cpp__ident__prefix(ivyc_s1::cpp__ident s, ivyc_s1::cpp__ident pref){
    ivyc_s1::cpp__ident res;
    res = s;
    return res;
}
void ivyc_s1::ext__ivy__vardc__flat(const ivy__vardc& s, ivy__flatst& st){
    {
        {
            ivy__vardc loc__t;
    loc__t.is_destructor = (bool)___ivy_choose(0,"loc:t",16402);
    loc__t.has_def = (bool)___ivy_choose(0,"loc:t",16402);
            {
                loc__t = ext__ivy__vardc__flat_int(s, st);
                loc__t.ann = s.ann;
                ext__vector__ivy__decl____append(st.decls, ivyc_s1::ivy__decl(3, new ivyc_s1::ivy__decl::twrap<ivyc_s1::ivy__vardc>(loc__t)));
            }
        }
    }
}
void ivyc_s1::ext__ivy__structspec__auto_flat_spec(const ivy__structspec& s, ivy__flatst& st, ivyc_s1::ivy__expr ty){
    {
        unsigned long long loc__idx;
    loc__idx = (unsigned long long)___ivy_choose(0,"loc:idx",16404);
        {
            loc__idx = vector__ivy__expr____begin(s.destructors);
            while((loc__idx < vector__ivy__expr____end(s.destructors))){
                {
                    {
                        ivyc_s1::ivy__expr loc__e;
                        {
                            loc__e = vector__ivy__expr____value(s.destructors,loc__idx);
                            ext__ivy__auto_flat(loc__e, st);
                            loc__idx = ext__vector__ivy__expr____domain__next(loc__idx);
                        }
                    }
                }
            }
        }
    }
}
unsigned long long ivyc_s1::ext__vector__cpp__stmt____domain__next(unsigned long long x){
    unsigned long long y;
    y = (unsigned long long)___ivy_choose(0,"fml:y",0);
    {
        y = (x + 1);
    }
    return y;
}
ivyc_s1::cpp__decl ivyc_s1::ext__ivy__typedc__to_cpp(const ivy__typedc& s, ivy__tocppst& st){
    ivyc_s1::cpp__decl resd;
    {
        {
            cpp__structdecl loc__res;
    loc__res.has_super = (bool)___ivy_choose(0,"loc:res",16416);
    loc__res.has_members = (bool)___ivy_choose(0,"loc:res",16416);
            {
                loc__res.ann = s.ann;
                {
                    ivyc_s1::cpp__expr loc__cls;
                    {
                        {
                            ivy__app self__COLON__ivy__app;
                            if (((s.sort).tag == 1)) self__COLON__ivy__app = ivyc_s1::ivy__expr::unwrap< ivyc_s1::ivy__app >(s.sort);
                            if(((s.sort).tag == 1)){
                                loc__cls = ext__ivy__app__to_cpp(self__COLON__ivy__app, st);
                            }
                            else {
                                {
                                    ivy__symbol self__COLON__ivy__symbol;
                                    if (((s.sort).tag == 0)) self__COLON__ivy__symbol = ivyc_s1::ivy__expr::unwrap< ivyc_s1::ivy__symbol >(s.sort);
                                    if(((s.sort).tag == 0)){
                                        loc__cls = ext__ivy__symbol__to_cpp(self__COLON__ivy__symbol, st);
                                    }
                                    else {
                                        loc__cls = ext__ivy__expr__to_cpp(s.sort, st);
                                    }
                                }
                            }
                        }
                        ivyc_s1::cpp__expr __tmp55;
                        __tmp55 = loc__cls; ext__ivy__member_name(__tmp55);
                        loc__res.name = __tmp55;
                        if(!st.forward){
                            {
                                if(s.has_super){
                                    {
                                        loc__res.has_super = true;
                                        {
                                            ivy__app self__COLON__ivy__app;
                                            if (((s.super).tag == 1)) self__COLON__ivy__app = ivyc_s1::ivy__expr::unwrap< ivyc_s1::ivy__app >(s.super);
                                            if(((s.super).tag == 1)){
                                                loc__res.super = ext__ivy__app__to_cpp(self__COLON__ivy__app, st);
                                            }
                                            else {
                                                {
                                                    ivy__symbol self__COLON__ivy__symbol;
                                                    if (((s.super).tag == 0)) self__COLON__ivy__symbol = ivyc_s1::ivy__expr::unwrap< ivyc_s1::ivy__symbol >(s.super);
                                                    if(((s.super).tag == 0)){
                                                        loc__res.super = ext__ivy__symbol__to_cpp(self__COLON__ivy__symbol, st);
                                                    }
                                                    else {
                                                        loc__res.super = ext__ivy__expr__to_cpp(s.super, st);
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                                else {
                                    if((s.has_spec && ((s.spec).tag == 0))){
                                        {
                                            loc__res.has_super = true;
                                            {
                                                str loc__0;
                                                {
                                                    loc__0 = ext__ivy__enum_name(loc__res.name);
                                                    loc__res.super = ext__ivy__make_std_tpl(__lit<str>("native_enum"), loc__0, loc__res.ann);
                                                }
                                            }
                                        }
                                    }
                                    else {
                                        {
                                            ivyc_s1::ivy__ident loc__0;
                                            bool loc__1;
    loc__1 = (bool)___ivy_choose(0,"loc:1",16408);
                                            {
                                                {
                                                    ivy__symbol self__COLON__ivy__symbol;
                                                    if (((s.sort).tag == 0)) self__COLON__ivy__symbol = ivyc_s1::ivy__expr::unwrap< ivyc_s1::ivy__symbol >(s.sort);
                                                    if(((s.sort).tag == 0)){
                                                        loc__0 = ext__ivy__symbol__get_name(self__COLON__ivy__symbol);
                                                    }
                                                    else {
                                                        loc__0 = ext__ivy__expr__get_name(s.sort);
                                                    }
                                                }
                                                loc__1 = ext__ivy__ident_to_cppclass__mem(st.cppclasses, loc__0);
                                                if(loc__1){
                                                    {
                                                        loc__res.has_super = true;
                                                        {
                                                            ivyc_s1::ivy__ident loc__0;
                                                            {
                                                                {
                                                                    ivy__symbol self__COLON__ivy__symbol;
                                                                    if (((s.sort).tag == 0)) self__COLON__ivy__symbol = ivyc_s1::ivy__expr::unwrap< ivyc_s1::ivy__symbol >(s.sort);
                                                                    if(((s.sort).tag == 0)){
                                                                        loc__0 = ext__ivy__symbol__get_name(self__COLON__ivy__symbol);
                                                                    }
                                                                    else {
                                                                        loc__0 = ext__ivy__expr__get_name(s.sort);
                                                                    }
                                                                }
                                                                {
                                                                    ivyc_s1::ivy__expr loc__itype;
                                                                    {
                                                                        loc__itype = ivy__ident_to_cppclass__value(st.cppclasses,loc__0);
                                                                        loc__res.super = ext__ivy__native_type_to_cpp(loc__itype, st);
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                                loc__res.has_members = true;
                                {
                                    ivyc_s1::ivy__ident loc__0;
                                    vector__ivy__decl__ loc__1;
                                    vector__ivy__decl__ loc__2;
                                    {
                                        {
                                            ivy__symbol self__COLON__ivy__symbol;
                                            if (((s.sort).tag == 0)) self__COLON__ivy__symbol = ivyc_s1::ivy__expr::unwrap< ivyc_s1::ivy__symbol >(s.sort);
                                            if(((s.sort).tag == 0)){
                                                loc__0 = ext__ivy__symbol__get_name(self__COLON__ivy__symbol);
                                            }
                                            else {
                                                loc__0 = ext__ivy__expr__get_name(s.sort);
                                            }
                                        }
                                        loc__1 = ext__vector__ivy__decl____empty();
                                        vector__ivy__decl__ __tmp56;
                                        __tmp56 = loc__1; ext__ivy__ident_to_declvec__get(st.members, loc__0, __tmp56);
                                        loc__2 = __tmp56;
                                        {
                                            vector__ivy__decl__ loc__members;
                                            {
                                                loc__members = loc__2;
                                                {
                                                    unsigned long long loc__idx;
    loc__idx = (unsigned long long)___ivy_choose(0,"loc:idx",16411);
                                                    {
                                                        loc__idx = vector__ivy__decl____begin(loc__members);
                                                        st.in_class = true;
                                                        while((loc__idx < vector__ivy__decl____end(loc__members))){
                                                            {
                                                                ivyc_s1::cpp__decl loc__d;
                                                                {
                                                                    {
                                                                        ivy__header self__COLON__ivy__header;
                                                                        if (((vector__ivy__decl____value(loc__members,loc__idx)).tag == 4)) self__COLON__ivy__header = ivyc_s1::ivy__decl::unwrap< ivyc_s1::ivy__header >(vector__ivy__decl____value(loc__members,loc__idx));
                                                                        if(((vector__ivy__decl____value(loc__members,loc__idx)).tag == 4)){
                                                                            loc__d = ext__ivy__header__to_cpp(self__COLON__ivy__header, st);
                                                                        }
                                                                        else {
                                                                            {
                                                                                ivy__vardc self__COLON__ivy__vardc;
                                                                                if (((vector__ivy__decl____value(loc__members,loc__idx)).tag == 3)) self__COLON__ivy__vardc = ivyc_s1::ivy__decl::unwrap< ivyc_s1::ivy__vardc >(vector__ivy__decl____value(loc__members,loc__idx));
                                                                                if(((vector__ivy__decl____value(loc__members,loc__idx)).tag == 3)){
                                                                                    loc__d = ext__ivy__vardc__to_cpp(self__COLON__ivy__vardc, st);
                                                                                }
                                                                                else {
                                                                                    {
                                                                                        ivy__typedc self__COLON__ivy__typedc;
                                                                                        if (((vector__ivy__decl____value(loc__members,loc__idx)).tag == 2)) self__COLON__ivy__typedc = ivyc_s1::ivy__decl::unwrap< ivyc_s1::ivy__typedc >(vector__ivy__decl____value(loc__members,loc__idx));
                                                                                        if(((vector__ivy__decl____value(loc__members,loc__idx)).tag == 2)){
                                                                                            loc__d = ext__ivy__typedc__to_cpp(self__COLON__ivy__typedc, st);
                                                                                        }
                                                                                        else {
                                                                                            {
                                                                                                ivy__actdc self__COLON__ivy__actdc;
                                                                                                if (((vector__ivy__decl____value(loc__members,loc__idx)).tag == 0)) self__COLON__ivy__actdc = ivyc_s1::ivy__decl::unwrap< ivyc_s1::ivy__actdc >(vector__ivy__decl____value(loc__members,loc__idx));
                                                                                                if(((vector__ivy__decl____value(loc__members,loc__idx)).tag == 0)){
                                                                                                    loc__d = ext__ivy__actdc__to_cpp(self__COLON__ivy__actdc, st);
                                                                                                }
                                                                                                else {
                                                                                                    loc__d = ext__ivy__decl__to_cpp(vector__ivy__decl____value(loc__members,loc__idx), st);
                                                                                                }
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                    ext__vector__cpp__decl____append(loc__res.members, loc__d);
                                                                    loc__idx = ext__vector__ivy__decl____domain__next(loc__idx);
                                                                }
                                                            }
                                                        }
                                                        st.in_class = false;
                                                        if((loc__res.has_super && !s.has_super)){
                                                            {
                                                                ext__ivy__add_derived_traits(loc__res);
                                                            }
                                                        }
                                                        else {
                                                            {
                                                                ext__ivy__add_standard_traits(loc__res);
                                                            }
                                                        }
                                                        if(s.has_super){
                                                            {
                                                                ext__ivy__add_upcast_method(loc__res);
                                                            }
                                                        }
                                                        {
                                                            bool loc__0;
    loc__0 = (bool)___ivy_choose(0,"loc:0",16410);
                                                            {
                                                                loc__0 = ext__ivy__is_variant_type(s.sort, st);
                                                                if(loc__0){
                                                                    {
                                                                        ext__ivy__add_virtual_destructor(loc__res);
                                                                    }
                                                                }
                                                            }
                                                        }
                                                        resd = ivyc_s1::cpp__decl(5, new ivyc_s1::cpp__decl::twrap<ivyc_s1::cpp__structdecl>(loc__res));
                                                        if((s.has_spec && ((s.spec).tag == 0))){
                                                            {
                                                                resd = ext__ivy__enum_to_cpp(loc__res.name, s.spec, resd, st);
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                        else {
                            {
                                resd = ivyc_s1::cpp__decl(5, new ivyc_s1::cpp__decl::twrap<ivyc_s1::cpp__structdecl>(loc__res));
                            }
                        }
                        {
                            ivyc_s1::ivy__ident loc__0;
                            ivyc_s1::ivy__ident loc__1;
                            {
                                {
                                    ivy__symbol self__COLON__ivy__symbol;
                                    if (((s.sort).tag == 0)) self__COLON__ivy__symbol = ivyc_s1::ivy__expr::unwrap< ivyc_s1::ivy__symbol >(s.sort);
                                    if(((s.sort).tag == 0)){
                                        loc__0 = ext__ivy__symbol__get_name(self__COLON__ivy__symbol);
                                    }
                                    else {
                                        loc__0 = ext__ivy__expr__get_name(s.sort);
                                    }
                                }
                                ivyc_s1::ivy__ident __tmp57;
                                __tmp57 = loc__0; ext__ivy__fix_object_clash(__tmp57, st);
                                loc__1 = __tmp57;
                                ext__ivy__add_namespaces(resd, loc__1);
                            }
                        }
                    }
                }
            }
        }
    }
    return resd;
}
void ivyc_s1::ext__ivy__ident_to_moduledc__get(const ivy__ident_to_moduledc& a, ivyc_s1::ivy__ident x, ivy__moduledc& y){
    {

        ivy__ident_to_moduledc::const_iterator it = a.find(x);
        if (it != a.end())
            y = it->second;
    }
}
ivyc_s1::str ivyc_s1::ext__cpp__dotident__to_str(const cpp__dotident& s){
    ivyc_s1::str res;
    {
        {
            cpp__dotident self__COLON__cpp__dotident;
            if (((s.namesp).tag == 2)) self__COLON__cpp__dotident = ivyc_s1::cpp__ident::unwrap< ivyc_s1::cpp__dotident >(s.namesp);
            if(((s.namesp).tag == 2)){
                res = ext__cpp__dotident__to_str(self__COLON__cpp__dotident);
            }
            else {
                {
                    cpp__strident self__COLON__cpp__strident;
                    if (((s.namesp).tag == 0)) self__COLON__cpp__strident = ivyc_s1::cpp__ident::unwrap< ivyc_s1::cpp__strident >(s.namesp);
                    if(((s.namesp).tag == 0)){
                        res = ext__cpp__strident__to_str(self__COLON__cpp__strident);
                    }
                    else {
                        res = ext__cpp__ident__to_str(s.namesp);
                    }
                }
            }
        }
        ext__str__extend(res, (true ? __lit<str>("::") : __lit<str>(".")));
        {
            str loc__0;
            {
                loc__0 = ext__cpp__strident__to_str(s.member);
                ext__str__extend(res, loc__0);
            }
        }
    }
    return res;
}
ivyc_s1::cpp__ident ivyc_s1::ext__cpp__dotident__get_member(const cpp__dotident& s){
    ivyc_s1::cpp__ident res;
    {
        res = ivyc_s1::cpp__ident(0, new ivyc_s1::cpp__ident::twrap<ivyc_s1::cpp__strident>(s.member));
    }
    return res;
}
ivyc_s1::ivy__expr ivyc_s1::ext__ivy__isaop__make(ivyc_s1::ivy__expr lhs, ivyc_s1::ivy__expr rhs, ivyc_s1::annot ann){
    ivyc_s1::ivy__expr res;
    {
        ivy__app loc__s;
        {
            loc__s.func = ext__ivy__symbol__makestr(__lit<str>("isa"), ann);
            ext__vector__ivy__expr____append(loc__s.args, lhs);
            ext__vector__ivy__expr____append(loc__s.args, rhs);
            loc__s.ann = ann;
            res = ivyc_s1::ivy__expr(1, new ivyc_s1::ivy__expr::twrap<ivyc_s1::ivy__app>(loc__s));
        }
    }
    return res;
}
void ivyc_s1::ext__ivy__expr__encode(ivyc_s1::ivy__expr s, pretty& b, int prio){
    {
    }
}
void ivyc_s1::ext__ivy__setup_formals(const vector__ivy__expr__& es, bool val, ivy__typeinferst& st){
    {
        unsigned long long loc__idx;
    loc__idx = (unsigned long long)___ivy_choose(0,"loc:idx",16421);
        {
            loc__idx = vector__ivy__expr____begin(es);
            while((loc__idx < vector__ivy__expr____end(es))){
                {
                    {
                        ivyc_s1::ivy__expr loc__e;
                        {
                            loc__e = vector__ivy__expr____value(es,loc__idx);
                            {
                                bool loc__0;
    loc__0 = (bool)___ivy_choose(0,"loc:0",16419);
                                {
                                    {
                                        ivy__app self__COLON__ivy__app;
                                        if (((loc__e).tag == 1)) self__COLON__ivy__app = ivyc_s1::ivy__expr::unwrap< ivyc_s1::ivy__app >(loc__e);
                                        if(((loc__e).tag == 1)){
                                            loc__0 = ext__ivy__app__is(self__COLON__ivy__app, ivy__verb__colon);
                                        }
                                        else {
                                            loc__0 = ext__ivy__expr__is(loc__e, ivy__verb__colon);
                                        }
                                    }
                                    if(loc__0){
                                        {
                                            if(val){
                                                {
                                                    ext__ivy__type_context__push(st.tc, loc__e);
                                                }
                                            }
                                            else {
                                                ext__ivy__type_context__pop(st.tc);
                                            }
                                        }
                                    }
                                }
                            }
                            loc__idx = ext__vector__ivy__expr____domain__next(loc__idx);
                        }
                    }
                }
            }
        }
    }
}
ivyc_s1::ivy__expr ivyc_s1::ext__ivy__app__make1(ivyc_s1::ivy__expr func, ivyc_s1::ivy__expr arg0, ivyc_s1::annot ann){
    ivyc_s1::ivy__expr res;
    {
        ivy__app loc__s;
        {
            loc__s.func = func;
            ext__vector__ivy__expr____append(loc__s.args, arg0);
            loc__s.ann = ann;
            res = ivyc_s1::ivy__expr(1, new ivyc_s1::ivy__expr::twrap<ivyc_s1::ivy__app>(loc__s));
        }
    }
    return res;
}
void ivyc_s1::ext__ivy__add_namespaces(ivyc_s1::cpp__decl& d, ivyc_s1::ivy__ident id){
    if(((id).tag == 2)){
        {
            {
                ivyc_s1::ivy__ident loc__0;
                {
                    {
                        ivy__dotident self__COLON__ivy__dotident;
                        if (((id).tag == 2)) self__COLON__ivy__dotident = ivyc_s1::ivy__ident::unwrap< ivyc_s1::ivy__dotident >(id);
                        if(((id).tag == 2)){
                            loc__0 = ext__ivy__dotident__get_namesp(self__COLON__ivy__dotident);
                        }
                        else {
                            loc__0 = ext__ivy__ident__get_namesp(id);
                        }
                    }
                    ext__ivy__add_namespaces_rec(d, loc__0);
                }
            }
        }
    }
}
ivyc_s1::str ivyc_s1::ext__cpp__strident__to_str(const cpp__strident& s){
    ivyc_s1::str b;
    {
        b = s.val;
        if(true){
            if((0 < vector__cpp__ident____end(s.subscrs))){
                {
                    ext__str__extend(b, __lit<str>("< "));
                    {
                        unsigned long long loc__idx;
    loc__idx = (unsigned long long)___ivy_choose(0,"loc:idx",16425);
                        {
                            loc__idx = vector__cpp__ident____begin(s.subscrs);
                            while((loc__idx < vector__cpp__ident____end(s.subscrs))){
                                {
                                    if((0 < loc__idx)){
                                        {
                                            ext__str__extend(b, __lit<str>(","));
                                        }
                                    }
                                    {
                                        str loc__0;
                                        {
                                            {
                                                cpp__dotident self__COLON__cpp__dotident;
                                                if (((vector__cpp__ident____value(s.subscrs,loc__idx)).tag == 2)) self__COLON__cpp__dotident = ivyc_s1::cpp__ident::unwrap< ivyc_s1::cpp__dotident >(vector__cpp__ident____value(s.subscrs,loc__idx));
                                                if(((vector__cpp__ident____value(s.subscrs,loc__idx)).tag == 2)){
                                                    loc__0 = ext__cpp__dotident__to_str(self__COLON__cpp__dotident);
                                                }
                                                else {
                                                    {
                                                        cpp__strident self__COLON__cpp__strident;
                                                        if (((vector__cpp__ident____value(s.subscrs,loc__idx)).tag == 0)) self__COLON__cpp__strident = ivyc_s1::cpp__ident::unwrap< ivyc_s1::cpp__strident >(vector__cpp__ident____value(s.subscrs,loc__idx));
                                                        if(((vector__cpp__ident____value(s.subscrs,loc__idx)).tag == 0)){
                                                            loc__0 = ext__cpp__strident__to_str(self__COLON__cpp__strident);
                                                        }
                                                        else {
                                                            loc__0 = ext__cpp__ident__to_str(vector__cpp__ident____value(s.subscrs,loc__idx));
                                                        }
                                                    }
                                                }
                                            }
                                            ext__str__extend(b, loc__0);
                                        }
                                    }
                                    loc__idx = ext__vector__cpp__ident____domain__next(loc__idx);
                                }
                            }
                            ext__str__extend(b, __lit<str>(" >"));
                        }
                    }
                }
            }
        }
        else {
            {
                unsigned long long loc__idx;
    loc__idx = (unsigned long long)___ivy_choose(0,"loc:idx",16427);
                {
                    loc__idx = vector__cpp__ident____begin(s.subscrs);
                    while((loc__idx < vector__cpp__ident____end(s.subscrs))){
                        {
                            ext__str__extend(b, __lit<str>("["));
                            {
                                str loc__0;
                                {
                                    {
                                        cpp__dotident self__COLON__cpp__dotident;
                                        if (((vector__cpp__ident____value(s.subscrs,loc__idx)).tag == 2)) self__COLON__cpp__dotident = ivyc_s1::cpp__ident::unwrap< ivyc_s1::cpp__dotident >(vector__cpp__ident____value(s.subscrs,loc__idx));
                                        if(((vector__cpp__ident____value(s.subscrs,loc__idx)).tag == 2)){
                                            loc__0 = ext__cpp__dotident__to_str(self__COLON__cpp__dotident);
                                        }
                                        else {
                                            {
                                                cpp__strident self__COLON__cpp__strident;
                                                if (((vector__cpp__ident____value(s.subscrs,loc__idx)).tag == 0)) self__COLON__cpp__strident = ivyc_s1::cpp__ident::unwrap< ivyc_s1::cpp__strident >(vector__cpp__ident____value(s.subscrs,loc__idx));
                                                if(((vector__cpp__ident____value(s.subscrs,loc__idx)).tag == 0)){
                                                    loc__0 = ext__cpp__strident__to_str(self__COLON__cpp__strident);
                                                }
                                                else {
                                                    loc__0 = ext__cpp__ident__to_str(vector__cpp__ident____value(s.subscrs,loc__idx));
                                                }
                                            }
                                        }
                                    }
                                    ext__str__extend(b, loc__0);
                                }
                            }
                            ext__str__extend(b, __lit<str>("]"));
                            loc__idx = ext__vector__cpp__ident____domain__next(loc__idx);
                        }
                    }
                }
            }
        }
    }
    return b;
}
void ivyc_s1::ext__ivy__ident_to_exprs__add(ivy__ident_to_exprs& a, ivyc_s1::ivy__ident x, ivyc_s1::ivy__expr y){
    {

        a[x].push_back(y);
    }
}
void ivyc_s1::ext__ivy__bottom_up_types(vector__ivy__expr__& es, ivyc_s1::ivy__expr func, const ivy__typeinferst& st, bool& ok){
    {
        vector__ivy__expr__ loc__argtypes;
        {
            {
                bool loc__0;
    loc__0 = (bool)___ivy_choose(0,"loc:0",16432);
                {
                    {
                        ivy__app self__COLON__ivy__app;
                        if (((func).tag == 1)) self__COLON__ivy__app = ivyc_s1::ivy__expr::unwrap< ivyc_s1::ivy__app >(func);
                        if(((func).tag == 1)){
                            loc__0 = ext__ivy__app__is(self__COLON__ivy__app, ivy__verb__colon);
                        }
                        else {
                            loc__0 = ext__ivy__expr__is(func, ivy__verb__colon);
                        }
                    }
                    if(loc__0){
                        {
                            ivyc_s1::ivy__expr loc__0;
                            {
                                {
                                    ivy__app self__COLON__ivy__app;
                                    if (((func).tag == 1)) self__COLON__ivy__app = ivyc_s1::ivy__expr::unwrap< ivyc_s1::ivy__app >(func);
                                    if(((func).tag == 1)){
                                        loc__0 = ext__ivy__app__get_arg(self__COLON__ivy__app, 1);
                                    }
                                    else {
                                        loc__0 = ext__ivy__expr__get_arg(func, 1);
                                    }
                                }
                                {
                                    ivyc_s1::ivy__expr loc__ftype;
                                    {
                                        loc__ftype = loc__0;
                                        {
                                            bool loc__0;
    loc__0 = (bool)___ivy_choose(0,"loc:0",16429);
                                            {
                                                {
                                                    ivy__app self__COLON__ivy__app;
                                                    if (((loc__ftype).tag == 1)) self__COLON__ivy__app = ivyc_s1::ivy__expr::unwrap< ivyc_s1::ivy__app >(loc__ftype);
                                                    if(((loc__ftype).tag == 1)){
                                                        loc__0 = ext__ivy__app__is(self__COLON__ivy__app, ivy__verb__arrow);
                                                    }
                                                    else {
                                                        loc__0 = ext__ivy__expr__is(loc__ftype, ivy__verb__arrow);
                                                    }
                                                }
                                                if(loc__0){
                                                    {
                                                        {
                                                            ivyc_s1::ivy__expr loc__0;
                                                            {
                                                                {
                                                                    ivy__app self__COLON__ivy__app;
                                                                    if (((loc__ftype).tag == 1)) self__COLON__ivy__app = ivyc_s1::ivy__expr::unwrap< ivyc_s1::ivy__app >(loc__ftype);
                                                                    if(((loc__ftype).tag == 1)){
                                                                        loc__0 = ext__ivy__app__get_arg(self__COLON__ivy__app, 0);
                                                                    }
                                                                    else {
                                                                        loc__0 = ext__ivy__expr__get_arg(loc__ftype, 0);
                                                                    }
                                                                }
                                                                loc__argtypes = ext__ivy__times__unfold_left(loc__0);
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
            {
                unsigned long long loc__idx;
    loc__idx = (unsigned long long)___ivy_choose(0,"loc:idx",16434);
                {
                    loc__idx = vector__ivy__expr____begin(es);
                    while((loc__idx < vector__ivy__expr____end(es))){
                        {
                            ivyc_s1::ivy__expr loc__e;
                            {
                                ivyc_s1::ivy__expr __tmp58;
                                __tmp58 = vector__ivy__expr____value(es,loc__idx); ext__ivy__bottom_up_type(__tmp58, st, ok);
                                loc__e = __tmp58;
                                if((loc__idx < vector__ivy__expr____end(loc__argtypes))){
                                    {
                                        ext__ivy__make_cast(vector__ivy__expr____value(loc__argtypes,loc__idx), loc__e, st);
                                    }
                                }
                                ext__vector__ivy__expr____set(es, loc__idx, loc__e);
                                loc__idx = ext__vector__ivy__expr____domain__next(loc__idx);
                            }
                        }
                    }
                }
            }
        }
    }
}
void ivyc_s1::ext__cpp__varst__encode_int(const cpp__varst& s, pretty& b, int prio){
    {
        ext__pretty__nest(b);
        ext__cpp__simpletype__encode(s.vtype, b, prio);
        ext__pretty__extend(b, __lit<str>(";"));
        ext__pretty__unnest(b);
    }
}
ivyc_s1::annot ivyc_s1::ext__cpp__namespacedecl__get_ann(const cpp__namespacedecl& d){
    ivyc_s1::annot res;
    res = d.ann;
    return res;
}
ivyc_s1::ivy__decl ivyc_s1::ext__ivy__includedc__make(ivyc_s1::ivy__expr file, ivyc_s1::annot ann){
    ivyc_s1::ivy__decl res;
    {
        {
            ivy__includedc loc__s;
            {
                loc__s.ann = ann;
                loc__s.file = file;
                res = ivyc_s1::ivy__decl(6, new ivyc_s1::ivy__decl::twrap<ivyc_s1::ivy__includedc>(loc__s));
            }
        }
    }
    return res;
}
void ivyc_s1::ext__ivy__ident_to_instantiatedc__set(ivy__ident_to_instantiatedc& a, ivyc_s1::ivy__ident x, const ivy__instantiatedc& y){
    {

        a[x] = y;
    }
}
ivyc_s1::cpp__ident ivyc_s1::ext__cpp__strident__prefix(const cpp__strident& s, ivyc_s1::cpp__ident pref){
    ivyc_s1::cpp__ident res;
    {
        res = ext__cpp__dotident__make(pref, s);
    }
    return res;
}
void ivyc_s1::ext__ivy__check_defined(ivyc_s1::ivy__ident name, const ivy__flatst& st, ivyc_s1::annot ann){
    {
        bool loc__0;
    loc__0 = (bool)___ivy_choose(0,"loc:0",16438);
        {
            loc__0 = ext__ivy__ident_set__mem(st.defs, name);
            if((!loc__0 && !st.absolute && !st.defining && !st.no_undefined)){
                {
                    {
                        ivy__undefined loc__0;
                        {
                            loc__0 = ext__ivy__undefined__make(name);
                            ext__ivy__report_error(ivyc_s1::ivy__error(6, new ivyc_s1::ivy__error::twrap<ivyc_s1::ivy__undefined>(loc__0)), ann);
                        }
                    }
                }
            }
        }
    }
}
ivyc_s1::annot ivyc_s1::ext__ivy__stmt__get_ann(ivyc_s1::ivy__stmt s){
    ivyc_s1::annot res;
    {
    }
    return res;
}
ivyc_s1::cpp__ident ivyc_s1::ext__cpp__dotident__get_namesp(const cpp__dotident& s){
    ivyc_s1::cpp__ident res;
    {
        res = s.namesp;
    }
    return res;
}
ivyc_s1::ivy__actdc ivyc_s1::ext__ivy__actdc__typeinfer_int(const ivy__actdc& s, ivy__typeinferst& st){
    ivyc_s1::ivy__actdc res;
    res.kind = (ivy__action_kind)___ivy_choose(0,"fml:res",0);
    res.has_body = (bool)___ivy_choose(0,"fml:res",0);
    res.has_proto = (bool)___ivy_choose(0,"fml:res",0);
    res.proto.has_ret = (bool)___ivy_choose(0,"fml:res",0);
    res.proto.ret.is_input = (bool)___ivy_choose(0,"fml:res",0);
    res.proto.ret.inpos = (unsigned long long)___ivy_choose(0,"fml:res",0);
    res.proto.ret.is_output = (bool)___ivy_choose(0,"fml:res",0);
    res.proto.ret.outpos = (unsigned long long)___ivy_choose(0,"fml:res",0);
    res.proto.ret.is_ref = (bool)___ivy_choose(0,"fml:res",0);
    res.proto.ret.is_const = (bool)___ivy_choose(0,"fml:res",0);
    {
        res.name = s.name;
        res.kind = s.kind;
        res.inputs = s.inputs;
        res.outputs = s.outputs;
        ext__ivy__setup_formals(res.inputs, true, st);
        ext__ivy__setup_formals(res.outputs, true, st);
        res.has_body = s.has_body;
        {
            ivy__whilest self__COLON__ivy__whilest;
            if (((s.body).tag == 4)) self__COLON__ivy__whilest = ivyc_s1::ivy__stmt::unwrap< ivyc_s1::ivy__whilest >(s.body);
            if(((s.body).tag == 4)){
                res.body = ext__ivy__whilest__typeinfer(self__COLON__ivy__whilest, st);
            }
            else {
                {
                    ivy__ifst self__COLON__ivy__ifst;
                    if (((s.body).tag == 3)) self__COLON__ivy__ifst = ivyc_s1::ivy__stmt::unwrap< ivyc_s1::ivy__ifst >(s.body);
                    if(((s.body).tag == 3)){
                        res.body = ext__ivy__ifst__typeinfer(self__COLON__ivy__ifst, st);
                    }
                    else {
                        {
                            ivy__sequence self__COLON__ivy__sequence;
                            if (((s.body).tag == 1)) self__COLON__ivy__sequence = ivyc_s1::ivy__stmt::unwrap< ivyc_s1::ivy__sequence >(s.body);
                            if(((s.body).tag == 1)){
                                res.body = ext__ivy__sequence__typeinfer(self__COLON__ivy__sequence, st);
                            }
                            else {
                                {
                                    ivy__asgn self__COLON__ivy__asgn;
                                    if (((s.body).tag == 0)) self__COLON__ivy__asgn = ivyc_s1::ivy__stmt::unwrap< ivyc_s1::ivy__asgn >(s.body);
                                    if(((s.body).tag == 0)){
                                        res.body = ext__ivy__asgn__typeinfer(self__COLON__ivy__asgn, st);
                                    }
                                    else {
                                        res.body = ext__ivy__stmt__typeinfer(s.body, st);
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
        ext__ivy__setup_formals(res.inputs, false, st);
        ext__ivy__setup_formals(res.outputs, false, st);
    }
    return res;
}
ivyc_s1::ivy__decl ivyc_s1::ext__ivy__actdc__typeinfer(const ivy__actdc& s, ivy__typeinferst& st){
    ivyc_s1::ivy__decl res;
    {
        {
            ivy__actdc loc__t;
    loc__t.kind = (ivy__action_kind)___ivy_choose(0,"loc:t",16439);
    loc__t.has_body = (bool)___ivy_choose(0,"loc:t",16439);
    loc__t.has_proto = (bool)___ivy_choose(0,"loc:t",16439);
    loc__t.proto.has_ret = (bool)___ivy_choose(0,"loc:t",16439);
    loc__t.proto.ret.is_input = (bool)___ivy_choose(0,"loc:t",16439);
    loc__t.proto.ret.inpos = (unsigned long long)___ivy_choose(0,"loc:t",16439);
    loc__t.proto.ret.is_output = (bool)___ivy_choose(0,"loc:t",16439);
    loc__t.proto.ret.outpos = (unsigned long long)___ivy_choose(0,"loc:t",16439);
    loc__t.proto.ret.is_ref = (bool)___ivy_choose(0,"loc:t",16439);
    loc__t.proto.ret.is_const = (bool)___ivy_choose(0,"loc:t",16439);
            {
                loc__t = ext__ivy__actdc__typeinfer_int(s, st);
                loc__t.ann = s.ann;
                res = ivyc_s1::ivy__decl(0, new ivyc_s1::ivy__decl::twrap<ivyc_s1::ivy__actdc>(loc__t));
            }
        }
    }
    return res;
}
ivyc_s1::cpp__expr ivyc_s1::ext__cpp__and__fold_left(const vector__cpp__expr__& args, ivyc_s1::annot ann){
    ivyc_s1::cpp__expr res;
    if((0 < vector__cpp__expr____end(args))){
        {
            res = vector__cpp__expr____value(args,0);
            {
                unsigned long long loc__0;
    loc__0 = (unsigned long long)___ivy_choose(0,"loc:0",16441);
                {
                    loc__0 = ext__vector__cpp__expr____domain__next(vector__cpp__expr____begin(args));
                    {
                        unsigned long long loc__idx;
    loc__idx = (unsigned long long)___ivy_choose(0,"loc:idx",16440);
                        {
                            loc__idx = loc__0;
                            while((loc__idx < vector__cpp__expr____end(args))){
                                {
                                    res = ext__cpp__and__make(res, vector__cpp__expr____value(args,loc__idx), ann);
                                    loc__idx = ext__vector__cpp__expr____domain__next(loc__idx);
                                }
                            }
                        }
                    }
                }
            }
        }
    }
    else {
        {
            res = ext__cpp__empty__make(ann);
        }
    }
    return res;
}
ivyc_s1::cpp__expr ivyc_s1::ext__cpp__expr__get_func(ivyc_s1::cpp__expr s){
    ivyc_s1::cpp__expr res;
    {
    }
    return res;
}
void ivyc_s1::ext__ivy__path__concat(str& path1, const str& path2){
    {
        ext__str__extend(path1, __lit<str>("/"));
        ext__str__extend(path1, path2);
    }
}
ivyc_s1::cpp__decl ivyc_s1::ext__ivy__decl__to_cpp(ivyc_s1::ivy__decl s, ivy__tocppst& st){
    ivyc_s1::cpp__decl res;
    {
    }
    return res;
}
ivyc_s1::cpp__stmt ivyc_s1::ext__cpp__sequence__make(ivyc_s1::cpp__stmt x, ivyc_s1::cpp__stmt y, ivyc_s1::annot ann){
    ivyc_s1::cpp__stmt res;
    {
        {
            cpp__sequence loc__s;
            {
                loc__s.lhs = x;
                loc__s.rhs = y;
                loc__s.ann = ann;
                res = ivyc_s1::cpp__stmt(1, new ivyc_s1::cpp__stmt::twrap<ivyc_s1::cpp__sequence>(loc__s));
            }
        }
    }
    return res;
}
bool ivyc_s1::ext__ivy__decl__emitted(ivyc_s1::ivy__decl s, const ivy__tocppst& st){
    bool res;
    res = (bool)___ivy_choose(0,"fml:res",0);
    {
        res = true;
    }
    return res;
}
ivyc_s1::annot ivyc_s1::ext__ivy__symbol__get_ann(const ivy__symbol& s){
    ivyc_s1::annot res;
    res = s.ann;
    return res;
}
unsigned long long ivyc_s1::ext__pos__next(unsigned long long x){
    unsigned long long y;
    y = (unsigned long long)___ivy_choose(0,"fml:y",0);
    {
        y = (x + 1);
    }
    return y;
}
void ivyc_s1::ext__ivy__decost__map__set(ivy__decost__map& a, ivyc_s1::ivy__ident x, ivyc_s1::ivy__expr y){
    {

        a[x] = y;
    }
}
void ivyc_s1::ext__ivy__add_derived_cons(cpp__structdecl& s, ivyc_s1::cpp__expr t, bool constref){
    {
        {
            cpp__funcdecl loc__0;
    loc__0.ftype.base.is_const = (bool)___ivy_choose(0,"loc:0",16445);
    loc__0.ftype.base.is_ref = (bool)___ivy_choose(0,"loc:0",16445);
    loc__0.ftype.is_const = (bool)___ivy_choose(0,"loc:0",16445);
    loc__0.ftype.has_initializer = (bool)___ivy_choose(0,"loc:0",16445);
    loc__0.has_body = (bool)___ivy_choose(0,"loc:0",16445);
    loc__0.is_static = (bool)___ivy_choose(0,"loc:0",16445);
    loc__0.is_virtual = (bool)___ivy_choose(0,"loc:0",16445);
            {
                loc__0 = ext__ivy__make_cpp_cons(s);
                {
                    cpp__funcdecl loc__dcons;
    loc__dcons.ftype.base.is_const = (bool)___ivy_choose(0,"loc:dcons",16444);
    loc__dcons.ftype.base.is_ref = (bool)___ivy_choose(0,"loc:dcons",16444);
    loc__dcons.ftype.is_const = (bool)___ivy_choose(0,"loc:dcons",16444);
    loc__dcons.ftype.has_initializer = (bool)___ivy_choose(0,"loc:dcons",16444);
    loc__dcons.has_body = (bool)___ivy_choose(0,"loc:dcons",16444);
    loc__dcons.is_static = (bool)___ivy_choose(0,"loc:dcons",16444);
    loc__dcons.is_virtual = (bool)___ivy_choose(0,"loc:dcons",16444);
                    {
                        loc__dcons = loc__0;
                        {
                            cpp__simpletype loc__dconsarg0;
    loc__dconsarg0.is_const = (bool)___ivy_choose(0,"loc:dconsarg0",16443);
    loc__dconsarg0.is_ref = (bool)___ivy_choose(0,"loc:dconsarg0",16443);
                            {
                                loc__dconsarg0._type = t;
                                loc__dconsarg0.name = ext__cpp__symbol__makestr(__lit<str>("value"), loc__dcons.ann);
                                loc__dconsarg0.is_const = constref;
                                loc__dconsarg0.is_ref = constref;
                                ext__vector__cpp__simpletype____append(loc__dcons.ftype.args, loc__dconsarg0);
                                loc__dcons.ftype.has_initializer = true;
                                loc__dcons.ftype.initializer = ext__cpp__app__make1(s.super, loc__dconsarg0.name, s.ann);
                                ext__vector__cpp__decl____append(s.members, ivyc_s1::cpp__decl(4, new ivyc_s1::cpp__decl::twrap<ivyc_s1::cpp__funcdecl>(loc__dcons)));
                            }
                        }
                    }
                }
            }
        }
    }
}
bool ivyc_s1::ext__ivy__app__is(const ivy__app& s, ivy__verb vrb){
    bool res;
    res = (bool)___ivy_choose(0,"fml:res",0);
    {
        {
            ivy__verb loc__0;
    loc__0 = (ivy__verb)___ivy_choose(0,"loc:0",16446);
            {
                {
                    ivy__symbol self__COLON__ivy__symbol;
                    if (((s.func).tag == 0)) self__COLON__ivy__symbol = ivyc_s1::ivy__expr::unwrap< ivyc_s1::ivy__symbol >(s.func);
                    if(((s.func).tag == 0)){
                        loc__0 = ext__ivy__symbol__get_verb(self__COLON__ivy__symbol);
                    }
                    else {
                        loc__0 = ext__ivy__expr__get_verb(s.func);
                    }
                }
                res = (loc__0 == vrb);
            }
        }
    }
    return res;
}
ivyc_s1::ivy__moduledc ivyc_s1::ext__ivy__instantiatedc__setup(const ivy__instantiatedc& s, ivy__flatst& st){
    ivyc_s1::ivy__moduledc mod;
    {
        {
            ivyc_s1::ivy__expr loc__name;
            {
                {
                    vector__ivy__expr__ loc__prms;
                    {
                        {
                            ivy__app self__COLON__ivy__app;
                            if (((s.name).tag == 1)) self__COLON__ivy__app = ivyc_s1::ivy__expr::unwrap< ivyc_s1::ivy__app >(s.name);
                            if(((s.name).tag == 1)){
                                loc__name = ext__ivy__app__flat(self__COLON__ivy__app, st);
                            }
                            else {
                                {
                                    ivy__symbol self__COLON__ivy__symbol;
                                    if (((s.name).tag == 0)) self__COLON__ivy__symbol = ivyc_s1::ivy__expr::unwrap< ivyc_s1::ivy__symbol >(s.name);
                                    if(((s.name).tag == 0)){
                                        loc__name = ext__ivy__symbol__flat(self__COLON__ivy__symbol, st);
                                    }
                                    else {
                                        loc__name = ext__ivy__expr__flat(s.name, st);
                                    }
                                }
                            }
                        }
                        vector__ivy__expr__ __tmp59;
                        __tmp59 = s.prms; ext__ivy__flat_exprvec(__tmp59, st);
                        loc__prms = __tmp59;
                        {
                            ivyc_s1::ivy__ident loc__0;
                            {
                                {
                                    ivy__symbol self__COLON__ivy__symbol;
                                    if (((loc__name).tag == 0)) self__COLON__ivy__symbol = ivyc_s1::ivy__expr::unwrap< ivyc_s1::ivy__symbol >(loc__name);
                                    if(((loc__name).tag == 0)){
                                        loc__0 = ext__ivy__symbol__get_name(self__COLON__ivy__symbol);
                                    }
                                    else {
                                        loc__0 = ext__ivy__expr__get_name(loc__name);
                                    }
                                }
                                mod = ext__ivy__ident_to_moduledc__get_def(st.moddecls, loc__0, s.ann);
                            }
                        }
                        st.prmvals = ext__ivy__prm_map(mod.prms, loc__prms, s.ann);
                    }
                }
            }
        }
    }
    return mod;
}
bool ivyc_s1::ext__ivy__objectdc__emitted(const ivy__objectdc& s, const ivy__tocppst& st){
    bool res;
    res = (bool)___ivy_choose(0,"fml:res",0);
    {
        res = false;
    }
    return res;
}
void ivyc_s1::ext__ivy__parse_action(pstate& st, int prio, ivy__action_kind kind, ivyc_s1::ivy__decl& res){
    if((st.tok == __lit<str>("action"))){
        {
            ext__pstate__consume(st);
            {
                ivy__actdc loc__s;
    loc__s.kind = (ivy__action_kind)___ivy_choose(0,"loc:s",16450);
    loc__s.has_body = (bool)___ivy_choose(0,"loc:s",16450);
    loc__s.has_proto = (bool)___ivy_choose(0,"loc:s",16450);
    loc__s.proto.has_ret = (bool)___ivy_choose(0,"loc:s",16450);
    loc__s.proto.ret.is_input = (bool)___ivy_choose(0,"loc:s",16450);
    loc__s.proto.ret.inpos = (unsigned long long)___ivy_choose(0,"loc:s",16450);
    loc__s.proto.ret.is_output = (bool)___ivy_choose(0,"loc:s",16450);
    loc__s.proto.ret.outpos = (unsigned long long)___ivy_choose(0,"loc:s",16450);
    loc__s.proto.ret.is_ref = (bool)___ivy_choose(0,"loc:s",16450);
    loc__s.proto.ret.is_const = (bool)___ivy_choose(0,"loc:s",16450);
                {
                    loc__s.kind = kind;
                    ext__pstate__get_ann(st, loc__s.ann);
                    ext__ivy__expr__parse(st, 99, loc__s.name);
                    if((st.ok && (st.tok == __lit<str>("(")))){
                        {
                            ext__ivy__expr__tup__parse(st, 1, loc__s.inputs);
                        }
                    }
                    if((st.ok && (st.tok == __lit<str>("returns")))){
                        {
                            ext__pstate__consume(st);
                            ext__ivy__expr__tup__parse(st, 1, loc__s.outputs);
                        }
                    }
                    if((st.ok && (st.tok == __lit<str>("=")))){
                        {
                            ext__pstate__consume(st);
                            loc__s.has_body = true;
                            if((st.tok == __lit<str>("{"))){
                                {
                                    ext__ivy__stmt__parse(st, 1, loc__s.body);
                                }
                            }
                            else {
                                st.ok = false;
                            }
                        }
                    }
                    res = ivyc_s1::ivy__decl(0, new ivyc_s1::ivy__decl::twrap<ivyc_s1::ivy__actdc>(loc__s));
                }
            }
        }
    }
    else {
        {
            st.ok = false;
        }
    }
}
void ivyc_s1::ext__ivy__symbol__parse(pstate& st, ivyc_s1::ivy__expr& res){
    if((st.ok && !(str__end(st.tok) == 0))){
        {
            {
                ivy__symbol loc__s;
    loc__s.vrb = (ivy__verb)___ivy_choose(0,"loc:s",16452);
                {
                    loc__s.vrb = ext__ivy__verb_from_name(st.tok);
                    ext__pstate__get_ann(st, loc__s.ann);
                    {
                        ivy__strident loc__id;
                        {
                            ext__ivy__strident__parse(st, loc__id);
                            loc__s.name = ivyc_s1::ivy__ident(0, new ivyc_s1::ivy__ident::twrap<ivyc_s1::ivy__strident>(loc__id));
                            res = ivyc_s1::ivy__expr(0, new ivyc_s1::ivy__expr::twrap<ivyc_s1::ivy__symbol>(loc__s));
                        }
                    }
                }
            }
        }
    }
    else {
        {
            st.ok = false;
        }
    }
}
ivyc_s1::ivy__expr ivyc_s1::ext__ivy__times__make(ivyc_s1::ivy__expr lhs, ivyc_s1::ivy__expr rhs, ivyc_s1::annot ann){
    ivyc_s1::ivy__expr res;
    {
        ivy__app loc__s;
        {
            loc__s.func = ext__ivy__symbol__makestr(__lit<str>("*"), ann);
            ext__vector__ivy__expr____append(loc__s.args, lhs);
            ext__vector__ivy__expr____append(loc__s.args, rhs);
            loc__s.ann = ann;
            res = ivyc_s1::ivy__expr(1, new ivyc_s1::ivy__expr::twrap<ivyc_s1::ivy__app>(loc__s));
        }
    }
    return res;
}
ivyc_s1::ivy__stmt ivyc_s1::ext__ivy__varst__flat(const ivy__varst& s, ivy__flatst& st){
    ivyc_s1::ivy__stmt res;
    {
        {
            ivy__varst loc__t;
            {
                loc__t = ext__ivy__varst__flat_int(s, st);
                loc__t.ann = s.ann;
                res = ivyc_s1::ivy__stmt(6, new ivyc_s1::ivy__stmt::twrap<ivyc_s1::ivy__varst>(loc__t));
            }
        }
    }
    return res;
}
void ivyc_s1::ext__ivy__add_diseq_pred(cpp__structdecl& s){
    {
        {
            cpp__funcdecl loc__diseq;
    loc__diseq.ftype.base.is_const = (bool)___ivy_choose(0,"loc:diseq",16460);
    loc__diseq.ftype.base.is_ref = (bool)___ivy_choose(0,"loc:diseq",16460);
    loc__diseq.ftype.is_const = (bool)___ivy_choose(0,"loc:diseq",16460);
    loc__diseq.ftype.has_initializer = (bool)___ivy_choose(0,"loc:diseq",16460);
    loc__diseq.has_body = (bool)___ivy_choose(0,"loc:diseq",16460);
    loc__diseq.is_static = (bool)___ivy_choose(0,"loc:diseq",16460);
    loc__diseq.is_virtual = (bool)___ivy_choose(0,"loc:diseq",16460);
            {
                loc__diseq.ftype.base._type = ext__cpp__symbol__makestr(__lit<str>("ivy::native_bool"), s.ann);
                loc__diseq.ftype.base.name = ext__cpp__symbol__makestr(__lit<str>("operator !="), s.ann);
                loc__diseq.ftype.is_const = true;
                {
                    cpp__simpletype loc__diseqarg0;
    loc__diseqarg0.is_const = (bool)___ivy_choose(0,"loc:diseqarg0",16459);
    loc__diseqarg0.is_ref = (bool)___ivy_choose(0,"loc:diseqarg0",16459);
                    {
                        loc__diseqarg0._type = s.name;
                        loc__diseqarg0.is_const = true;
                        loc__diseqarg0.is_ref = true;
                        loc__diseqarg0.name = ext__cpp__symbol__makestr(__lit<str>("other"), loc__diseq.ann);
                        ext__vector__cpp__simpletype____append(loc__diseq.ftype.args, loc__diseqarg0);
                        loc__diseq.has_body = true;
                        {
                            ivyc_s1::cpp__expr loc__0;
                            {
                                loc__0 = ext__cpp__symbol__makestr(__lit<str>("(*this)"), s.ann);
                                {
                                    ivyc_s1::cpp__expr loc__f0;
                                    {
                                        loc__f0 = loc__0;
                                        {
                                            ivyc_s1::cpp__expr loc__0;
                                            ivyc_s1::cpp__expr loc__1;
                                            {
                                                loc__0 = ext__cpp__equals__make(loc__f0, loc__diseqarg0.name, s.ann);
                                                loc__1 = ext__cpp__not__make(loc__0, s.ann);
                                                {
                                                    ivyc_s1::cpp__expr loc__diseqret;
                                                    {
                                                        loc__diseqret = loc__1;
                                                        loc__diseq.body = ext__cpp__retst__make(loc__diseqret, s.ann);
                                                        ext__vector__cpp__decl____append(s.members, ivyc_s1::cpp__decl(4, new ivyc_s1::cpp__decl::twrap<ivyc_s1::cpp__funcdecl>(loc__diseq)));
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
    }
}
void ivyc_s1::ext__vector__ivy__expr____append(vector__ivy__expr__& a, ivyc_s1::ivy__expr v){
    {

        a.push_back(v);
    }
}
void ivyc_s1::ext__ivy__actdc__reg_member(const ivy__actdc& s, ivy__tocppst& st){
    {
        bool loc__0;
    loc__0 = (bool)___ivy_choose(0,"loc:0",16463);
        {
            loc__0 = ext__ivy__actdc__is_member(s);
            if(loc__0){
                {
                    {
                        ivy__actdc loc__actd;
    loc__actd.kind = (ivy__action_kind)___ivy_choose(0,"loc:actd",16462);
    loc__actd.has_body = (bool)___ivy_choose(0,"loc:actd",16462);
    loc__actd.has_proto = (bool)___ivy_choose(0,"loc:actd",16462);
    loc__actd.proto.has_ret = (bool)___ivy_choose(0,"loc:actd",16462);
    loc__actd.proto.ret.is_input = (bool)___ivy_choose(0,"loc:actd",16462);
    loc__actd.proto.ret.inpos = (unsigned long long)___ivy_choose(0,"loc:actd",16462);
    loc__actd.proto.ret.is_output = (bool)___ivy_choose(0,"loc:actd",16462);
    loc__actd.proto.ret.outpos = (unsigned long long)___ivy_choose(0,"loc:actd",16462);
    loc__actd.proto.ret.is_ref = (bool)___ivy_choose(0,"loc:actd",16462);
    loc__actd.proto.ret.is_const = (bool)___ivy_choose(0,"loc:actd",16462);
                        {
                            loc__actd = s;
                            loc__actd.has_body = false;
                            {
                                ivyc_s1::ivy__ident loc__0;
                                {
                                    loc__0 = ext__ivy__actdc__member_type(s);
                                    ext__ivy__tocppst__add_member(st, loc__0, ivyc_s1::ivy__decl(0, new ivyc_s1::ivy__decl::twrap<ivyc_s1::ivy__actdc>(loc__actd)));
                                }
                            }
                        }
                    }
                }
            }
        }
    }
}
void ivyc_s1::__init(){
    {
        {
            ivy__verb_to_arity[ivy__verb__numeral] = 0;
            ivy__verb_to_arity[ivy__verb__string] = 0;
            ivy__verb_to_arity[ivy__verb__logvar] = 0;
        }
        {
            ivy__str_to_verb[__lit<str>("<->")] = ivy__verb__iff;
            ivy__verb_to_str[ivy__verb__iff] = __lit<str>("<->");
            ivy__verb_to_prio[ivy__verb__iff] = 2;
            ivy__verb_to_arity[ivy__verb__iff] = 2;
        }
        {
            ivy__str_to_verb[__lit<str>("|")] = ivy__verb__or;
            ivy__verb_to_str[ivy__verb__or] = __lit<str>("|");
            ivy__verb_to_prio[ivy__verb__or] = 3;
            ivy__verb_to_arity[ivy__verb__or] = 2;
        }
        {
            ivy__str_to_verb[__lit<str>("&")] = ivy__verb__and;
            ivy__verb_to_str[ivy__verb__and] = __lit<str>("&");
            ivy__verb_to_prio[ivy__verb__and] = 4;
            ivy__verb_to_arity[ivy__verb__and] = 2;
        }
        {
            ivy__str_to_verb[__lit<str>("<")] = ivy__verb__lt;
            ivy__verb_to_str[ivy__verb__lt] = __lit<str>("<");
            ivy__verb_to_prio[ivy__verb__lt] = 6;
            ivy__verb_to_arity[ivy__verb__lt] = 2;
        }
        {
            ivy__str_to_verb[__lit<str>("<=")] = ivy__verb__leq;
            ivy__verb_to_str[ivy__verb__leq] = __lit<str>("<=");
            ivy__verb_to_prio[ivy__verb__leq] = 6;
            ivy__verb_to_arity[ivy__verb__leq] = 2;
        }
        {
            ivy__str_to_verb[__lit<str>(">")] = ivy__verb__gt;
            ivy__verb_to_str[ivy__verb__gt] = __lit<str>(">");
            ivy__verb_to_prio[ivy__verb__gt] = 6;
            ivy__verb_to_arity[ivy__verb__gt] = 2;
        }
        {
            ivy__str_to_verb[__lit<str>(">=")] = ivy__verb__geq;
            ivy__verb_to_str[ivy__verb__geq] = __lit<str>(">=");
            ivy__verb_to_prio[ivy__verb__geq] = 6;
            ivy__verb_to_arity[ivy__verb__geq] = 2;
        }
        {
            ivy__str_to_verb[__lit<str>("+")] = ivy__verb__plus;
            ivy__verb_to_str[ivy__verb__plus] = __lit<str>("+");
            ivy__verb_to_prio[ivy__verb__plus] = 12;
            ivy__verb_to_arity[ivy__verb__plus] = 2;
        }
        {
            ivy__str_to_verb[__lit<str>("-")] = ivy__verb__minus;
            ivy__verb_to_str[ivy__verb__minus] = __lit<str>("-");
            ivy__verb_to_prio[ivy__verb__minus] = 12;
            ivy__verb_to_arity[ivy__verb__minus] = 2;
        }
        {
            ivy__str_to_verb[__lit<str>("*")] = ivy__verb__times;
            ivy__verb_to_str[ivy__verb__times] = __lit<str>("*");
            ivy__verb_to_prio[ivy__verb__times] = 13;
            ivy__verb_to_arity[ivy__verb__times] = 2;
        }
        {
            ivy__str_to_verb[__lit<str>("/")] = ivy__verb__div;
            ivy__verb_to_str[ivy__verb__div] = __lit<str>("/");
            ivy__verb_to_prio[ivy__verb__div] = 13;
            ivy__verb_to_arity[ivy__verb__div] = 2;
        }
        {
            ivy__str_to_verb[__lit<str>("()")] = ivy__verb__empty;
            ivy__verb_to_str[ivy__verb__empty] = __lit<str>("()");
            ivy__verb_to_prio[ivy__verb__empty] = 0;
            ivy__verb_to_arity[ivy__verb__empty] = 0;
        }
        {
            ivy__str_to_verb[__lit<str>("bool")] = ivy__verb__boolv;
            ivy__verb_to_str[ivy__verb__boolv] = __lit<str>("bool");
            ivy__verb_to_prio[ivy__verb__boolv] = 0;
            ivy__verb_to_arity[ivy__verb__boolv] = 0;
        }
        {
            ivy__str_to_verb[__lit<str>("true")] = ivy__verb__truev;
            ivy__verb_to_str[ivy__verb__truev] = __lit<str>("true");
            ivy__verb_to_prio[ivy__verb__truev] = 0;
            ivy__verb_to_arity[ivy__verb__truev] = 0;
        }
        {
            ivy__str_to_verb[__lit<str>("false")] = ivy__verb__falsev;
            ivy__verb_to_str[ivy__verb__falsev] = __lit<str>("false");
            ivy__verb_to_prio[ivy__verb__falsev] = 0;
            ivy__verb_to_arity[ivy__verb__falsev] = 0;
        }
        {
            ivy__str_to_verb[__lit<str>(",")] = ivy__verb__comma;
            ivy__verb_to_str[ivy__verb__comma] = __lit<str>(",");
            ivy__verb_to_prio[ivy__verb__comma] = 1;
            ivy__verb_to_arity[ivy__verb__comma] = 2;
        }
        {
            ivy__str_to_verb[__lit<str>(".")] = ivy__verb__dot;
            ivy__verb_to_str[ivy__verb__dot] = __lit<str>(".");
            ivy__verb_to_prio[ivy__verb__dot] = 100;
            ivy__verb_to_arity[ivy__verb__dot] = 2;
        }
        {
            ivy__str_to_verb[__lit<str>("(")] = ivy__verb__app;
            ivy__verb_to_str[ivy__verb__app] = __lit<str>("(");
            ivy__verb_to_prio[ivy__verb__app] = 99;
            ivy__verb_to_arity[ivy__verb__app] = 1;
        }
        {
            ivy__str_to_verb[__lit<str>(":")] = ivy__verb__colon;
            ivy__verb_to_str[ivy__verb__colon] = __lit<str>(":");
            ivy__verb_to_prio[ivy__verb__colon] = 50;
            ivy__verb_to_arity[ivy__verb__colon] = 2;
        }
        {
            ivy__str_to_verb[__lit<str>("->")] = ivy__verb__arrow;
            ivy__verb_to_str[ivy__verb__arrow] = __lit<str>("->");
            ivy__verb_to_prio[ivy__verb__arrow] = 2;
            ivy__verb_to_arity[ivy__verb__arrow] = 2;
        }
        {
            ivy__str_to_verb[__lit<str>("cast")] = ivy__verb__castv;
            ivy__verb_to_str[ivy__verb__castv] = __lit<str>("cast");
            ivy__verb_to_prio[ivy__verb__castv] = 49;
            ivy__verb_to_arity[ivy__verb__castv] = 1;
        }
        {
            ivy__str_to_verb[__lit<str>("=")] = ivy__verb__equals;
            ivy__verb_to_str[ivy__verb__equals] = __lit<str>("=");
            ivy__verb_to_prio[ivy__verb__equals] = 5;
            ivy__verb_to_arity[ivy__verb__equals] = 2;
        }
        {
            ivy__str_to_verb[__lit<str>("~=")] = ivy__verb__notequals;
            ivy__verb_to_str[ivy__verb__notequals] = __lit<str>("~=");
            ivy__verb_to_prio[ivy__verb__notequals] = 5;
            ivy__verb_to_arity[ivy__verb__notequals] = 2;
        }
        {
            ivy__str_to_verb[__lit<str>("~")] = ivy__verb__not;
            ivy__verb_to_str[ivy__verb__not] = __lit<str>("~");
            ivy__verb_to_prio[ivy__verb__not] = 15;
            ivy__verb_to_arity[ivy__verb__not] = 1;
        }
        {
            ivy__str_to_verb[__lit<str>("if")] = ivy__verb__ite;
            ivy__verb_to_str[ivy__verb__ite] = __lit<str>("if");
            ivy__verb_to_prio[ivy__verb__ite] = 2;
            ivy__verb_to_arity[ivy__verb__ite] = 3;
        }
        {
            ivy__str_to_verb[__lit<str>("var")] = ivy__verb__varv;
            ivy__verb_to_str[ivy__verb__varv] = __lit<str>("var");
            ivy__verb_to_prio[ivy__verb__varv] = 2;
            ivy__verb_to_arity[ivy__verb__varv] = 1;
        }
        {
            ivy__str_to_verb[__lit<str>("isa")] = ivy__verb__isav;
            ivy__verb_to_str[ivy__verb__isav] = __lit<str>("isa");
            ivy__verb_to_prio[ivy__verb__isav] = 5;
            ivy__verb_to_arity[ivy__verb__isav] = 2;
        }
        {
            str loc__0;
            {
                loc__0 = ext__env__get(__lit<str>("IVY_INCLUDE_PATH"));
                {
                    str loc__inc;
                    {
                        loc__inc = loc__0;
                        {
                            unsigned long long loc__start;
    loc__start = (unsigned long long)___ivy_choose(0,"loc:start",16660);
                            {
                                loc__start = str__begin(loc__inc);
                                {
                                    unsigned long long loc__idx;
    loc__idx = (unsigned long long)___ivy_choose(0,"loc:idx",16659);
                                    {
                                        loc__idx = str__begin(loc__inc);
                                        while((loc__idx < str__end(loc__inc))){
                                            {
                                                if((str__value(loc__inc,loc__idx) == 58)){
                                                    {
                                                        if((loc__start < loc__idx)){
                                                            {
                                                                ext__vector__str____append(ivy__include_path, str__segment(loc__inc,loc__start,loc__idx));
                                                            }
                                                        }
                                                        loc__start = ext__pos__next(loc__idx);
                                                    }
                                                }
                                                loc__idx = ext__pos__next(loc__idx);
                                            }
                                        }
                                        if((loc__start < loc__idx)){
                                            {
                                                ext__vector__str____append(ivy__include_path, str__segment(loc__inc,loc__start,loc__idx));
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
        {
            ext__ivy__set_built_in_type(ivy__verb__none, __lit<str>("alpha"), true, true, true, true);
            ext__ivy__set_built_in_type(ivy__verb__plus, __lit<str>("alpha * alpha -> alpha"), false, true, true, true);
            ext__ivy__set_built_in_type(ivy__verb__minus, __lit<str>("alpha * alpha -> alpha"), false, true, true, true);
            ext__ivy__set_built_in_type(ivy__verb__times, __lit<str>("alpha * alpha -> alpha"), false, true, true, true);
            ext__ivy__set_built_in_type(ivy__verb__div, __lit<str>("alpha * alpha -> alpha"), false, true, true, true);
            ext__ivy__set_built_in_type(ivy__verb__arrow, __lit<str>("bool * bool -> bool"), true, true, true, true);
            ext__ivy__set_built_in_type(ivy__verb__castv, __lit<str>("alpha -> beta"), false, false, false, false);
            ext__ivy__set_built_in_type(ivy__verb__truev, __lit<str>("bool"), true, true, true, true);
            ext__ivy__set_built_in_type(ivy__verb__falsev, __lit<str>("bool"), true, true, true, true);
            ext__ivy__set_built_in_type(ivy__verb__and, __lit<str>("bool * bool -> bool"), true, true, true, true);
            ext__ivy__set_built_in_type(ivy__verb__or, __lit<str>("bool * bool -> bool"), true, true, true, true);
            ext__ivy__set_built_in_type(ivy__verb__not, __lit<str>("bool -> bool"), true, true, true, true);
            ext__ivy__set_built_in_type(ivy__verb__iff, __lit<str>("bool * bool -> bool"), true, true, true, true);
            ext__ivy__set_built_in_type(ivy__verb__equals, __lit<str>("alpha * alpha -> bool"), false, false, false, true);
            ext__ivy__set_built_in_type(ivy__verb__notequals, __lit<str>("alpha * alpha -> bool"), false, false, false, true);
            ext__ivy__set_built_in_type(ivy__verb__lt, __lit<str>("alpha * alpha -> bool"), false, false, false, true);
            ext__ivy__set_built_in_type(ivy__verb__leq, __lit<str>("alpha * alpha -> bool"), false, false, false, true);
            ext__ivy__set_built_in_type(ivy__verb__gt, __lit<str>("alpha * alpha -> bool"), false, false, false, true);
            ext__ivy__set_built_in_type(ivy__verb__geq, __lit<str>("alpha * alpha -> bool"), false, false, false, true);
            ext__ivy__set_built_in_type(ivy__verb__ite, __lit<str>("alpha * bool * alpha -> alpha"), false, true, true, true);
            ext__ivy__set_built_in_type(ivy__verb__comma, __lit<str>("alpha * beta -> alpha * beta"), false, true, true, false);
            ext__ivy__set_built_in_type(ivy__verb__varv, __lit<str>("alpha -> alpha"), false, true, true, true);
        }
        {
            cpp__verb_to_arity[cpp__verb__numeral] = 0;
            cpp__verb_to_arity[cpp__verb__string] = 0;
            cpp__verb_to_arity[cpp__verb__logvar] = 0;
        }
        {
            cpp__str_to_verb[__lit<str>("<->")] = cpp__verb__iff;
            cpp__verb_to_str[cpp__verb__iff] = __lit<str>("<->");
            cpp__verb_to_prio[cpp__verb__iff] = 2;
            cpp__verb_to_arity[cpp__verb__iff] = 2;
        }
        {
            cpp__str_to_verb[__lit<str>("|")] = cpp__verb__or;
            cpp__verb_to_str[cpp__verb__or] = __lit<str>("|");
            cpp__verb_to_prio[cpp__verb__or] = 3;
            cpp__verb_to_arity[cpp__verb__or] = 2;
        }
        {
            cpp__str_to_verb[__lit<str>("&")] = cpp__verb__and;
            cpp__verb_to_str[cpp__verb__and] = __lit<str>("&");
            cpp__verb_to_prio[cpp__verb__and] = 4;
            cpp__verb_to_arity[cpp__verb__and] = 2;
        }
        {
            cpp__str_to_verb[__lit<str>("<")] = cpp__verb__lt;
            cpp__verb_to_str[cpp__verb__lt] = __lit<str>("<");
            cpp__verb_to_prio[cpp__verb__lt] = 6;
            cpp__verb_to_arity[cpp__verb__lt] = 2;
        }
        {
            cpp__str_to_verb[__lit<str>("<=")] = cpp__verb__leq;
            cpp__verb_to_str[cpp__verb__leq] = __lit<str>("<=");
            cpp__verb_to_prio[cpp__verb__leq] = 6;
            cpp__verb_to_arity[cpp__verb__leq] = 2;
        }
        {
            cpp__str_to_verb[__lit<str>(">")] = cpp__verb__gt;
            cpp__verb_to_str[cpp__verb__gt] = __lit<str>(">");
            cpp__verb_to_prio[cpp__verb__gt] = 6;
            cpp__verb_to_arity[cpp__verb__gt] = 2;
        }
        {
            cpp__str_to_verb[__lit<str>(">=")] = cpp__verb__geq;
            cpp__verb_to_str[cpp__verb__geq] = __lit<str>(">=");
            cpp__verb_to_prio[cpp__verb__geq] = 6;
            cpp__verb_to_arity[cpp__verb__geq] = 2;
        }
        {
            cpp__str_to_verb[__lit<str>("+")] = cpp__verb__plus;
            cpp__verb_to_str[cpp__verb__plus] = __lit<str>("+");
            cpp__verb_to_prio[cpp__verb__plus] = 12;
            cpp__verb_to_arity[cpp__verb__plus] = 2;
        }
        {
            cpp__str_to_verb[__lit<str>("-")] = cpp__verb__minus;
            cpp__verb_to_str[cpp__verb__minus] = __lit<str>("-");
            cpp__verb_to_prio[cpp__verb__minus] = 12;
            cpp__verb_to_arity[cpp__verb__minus] = 2;
        }
        {
            cpp__str_to_verb[__lit<str>("*")] = cpp__verb__times;
            cpp__verb_to_str[cpp__verb__times] = __lit<str>("*");
            cpp__verb_to_prio[cpp__verb__times] = 13;
            cpp__verb_to_arity[cpp__verb__times] = 2;
        }
        {
            cpp__str_to_verb[__lit<str>("/")] = cpp__verb__div;
            cpp__verb_to_str[cpp__verb__div] = __lit<str>("/");
            cpp__verb_to_prio[cpp__verb__div] = 13;
            cpp__verb_to_arity[cpp__verb__div] = 2;
        }
        {
            cpp__str_to_verb[__lit<str>("()")] = cpp__verb__empty;
            cpp__verb_to_str[cpp__verb__empty] = __lit<str>("()");
            cpp__verb_to_prio[cpp__verb__empty] = 0;
            cpp__verb_to_arity[cpp__verb__empty] = 0;
        }
        {
            cpp__str_to_verb[__lit<str>("bool")] = cpp__verb__boolv;
            cpp__verb_to_str[cpp__verb__boolv] = __lit<str>("bool");
            cpp__verb_to_prio[cpp__verb__boolv] = 0;
            cpp__verb_to_arity[cpp__verb__boolv] = 0;
        }
        {
            cpp__str_to_verb[__lit<str>("true")] = cpp__verb__truev;
            cpp__verb_to_str[cpp__verb__truev] = __lit<str>("true");
            cpp__verb_to_prio[cpp__verb__truev] = 0;
            cpp__verb_to_arity[cpp__verb__truev] = 0;
        }
        {
            cpp__str_to_verb[__lit<str>("false")] = cpp__verb__falsev;
            cpp__verb_to_str[cpp__verb__falsev] = __lit<str>("false");
            cpp__verb_to_prio[cpp__verb__falsev] = 0;
            cpp__verb_to_arity[cpp__verb__falsev] = 0;
        }
        {
            cpp__str_to_verb[__lit<str>(",")] = cpp__verb__comma;
            cpp__verb_to_str[cpp__verb__comma] = __lit<str>(",");
            cpp__verb_to_prio[cpp__verb__comma] = 1;
            cpp__verb_to_arity[cpp__verb__comma] = 2;
        }
        {
            cpp__str_to_verb[__lit<str>(".")] = cpp__verb__dot;
            cpp__verb_to_str[cpp__verb__dot] = __lit<str>(".");
            cpp__verb_to_prio[cpp__verb__dot] = 100;
            cpp__verb_to_arity[cpp__verb__dot] = 2;
        }
        {
            cpp__str_to_verb[__lit<str>("(")] = cpp__verb__app;
            cpp__verb_to_str[cpp__verb__app] = __lit<str>("(");
            cpp__verb_to_prio[cpp__verb__app] = 99;
            cpp__verb_to_arity[cpp__verb__app] = 1;
        }
        {
            cpp__str_to_verb[__lit<str>("new")] = cpp__verb__new;
            cpp__verb_to_str[cpp__verb__new] = __lit<str>("new");
            cpp__verb_to_prio[cpp__verb__new] = 100;
            cpp__verb_to_arity[cpp__verb__new] = 1;
        }
        {
            cpp__str_to_verb[__lit<str>("->")] = cpp__verb__arrow;
            cpp__verb_to_str[cpp__verb__arrow] = __lit<str>("->");
            cpp__verb_to_prio[cpp__verb__arrow] = 100;
            cpp__verb_to_arity[cpp__verb__arrow] = 2;
        }
        {
            cpp__str_to_verb[__lit<str>("==")] = cpp__verb__equals;
            cpp__verb_to_str[cpp__verb__equals] = __lit<str>("==");
            cpp__verb_to_prio[cpp__verb__equals] = 5;
            cpp__verb_to_arity[cpp__verb__equals] = 2;
        }
        {
            cpp__str_to_verb[__lit<str>("!=")] = cpp__verb__notequals;
            cpp__verb_to_str[cpp__verb__notequals] = __lit<str>("!=");
            cpp__verb_to_prio[cpp__verb__notequals] = 5;
            cpp__verb_to_arity[cpp__verb__notequals] = 2;
        }
        {
            cpp__str_to_verb[__lit<str>("!")] = cpp__verb__not;
            cpp__verb_to_str[cpp__verb__not] = __lit<str>("!");
            cpp__verb_to_prio[cpp__verb__not] = 15;
            cpp__verb_to_arity[cpp__verb__not] = 1;
        }
        {
            cpp__str_to_verb[__lit<str>("?")] = cpp__verb__ite;
            cpp__verb_to_str[cpp__verb__ite] = __lit<str>("?");
            cpp__verb_to_prio[cpp__verb__ite] = 2;
            cpp__verb_to_arity[cpp__verb__ite] = 3;
        }
        {
            ivy__cpp_reserved_word[__lit<str>("bool")] = true;
            ivy__cpp_reserved_word[__lit<str>("char")] = true;
            ivy__cpp_reserved_word[__lit<str>("int")] = true;
            ivy__cpp_reserved_word[__lit<str>("long")] = true;
            ivy__cpp_reserved_word[__lit<str>("new")] = true;
            ivy__cpp_reserved_word[__lit<str>("and")] = true;
            ivy__cpp_reserved_word[__lit<str>("or")] = true;
            ivy__cpp_reserved_word[__lit<str>("not")] = true;
        }
        {
            {
                str loc__0;
                {
                    loc__0 = ext__ivy__testelide(__lit<str>("x"));
                    {
                        str loc__tmp;
                        {
                            loc__tmp = loc__0;
                            ext__ivy__prog__file_to_cpp(input_file_name);
                        }
                    }
                }
            }
        }
    }
}
void ivyc_s1::ext__ivy__version__parse(pstate& st, int prio, ivy__version& res){
    {
        if((st.ok && (st.tok == __lit<str>("lang")))){
            {
                ext__pstate__consume(st);
            }
        }
        else {
            st.ok = false;
        }
        if((st.ok && (str__segment(st.tok,0,3) == __lit<str>("ivy")))){
            {
                unsigned long long __tmp60;
                __tmp60 = st.p;
                unsigned long long __tmp61;
                unsigned long long __tmp62;
                __tmp62 = str__end(st.tok);
                unsigned long long __tmp63;
                __tmp63 = 3;
                __tmp61 = ( __tmp62 < __tmp63 ? 0 : __tmp62 - __tmp63);
                st.p = ( __tmp60 < __tmp61 ? 0 : __tmp60 - __tmp61);
                ext__pstate__consume(st);
            }
        }
        if((st.ok && (0 < str__end(st.tok)) && char__is_digit(str__value(st.tok,0)))){
            {
                {
                    unsigned long long loc__0;
    loc__0 = (unsigned long long)___ivy_choose(0,"loc:0",16464);
                    {
                        loc__0 = ext__pos__from_str(st.tok);
                        ext__vector__pos____append(res.nums, loc__0);
                    }
                }
                ext__pstate__consume(st);
                while((st.ok && (st.tok == __lit<str>(".")))){
                    {
                        ext__pstate__consume(st);
                        if(((0 < str__end(st.tok)) && char__is_digit(str__value(st.tok,0)))){
                            {
                                {
                                    unsigned long long loc__0;
    loc__0 = (unsigned long long)___ivy_choose(0,"loc:0",16465);
                                    {
                                        loc__0 = ext__pos__from_str(st.tok);
                                        ext__vector__pos____append(res.nums, loc__0);
                                    }
                                }
                                ext__pstate__consume(st);
                            }
                        }
                        else {
                            {
                                st.ok = false;
                            }
                        }
                    }
                }
            }
        }
        if((0 < str__end(st.tok))){
            {
                st.ok = false;
            }
        }
    }
}
void ivyc_s1::ext__ivy__prog__file_to_cpp(const str& name){
    {
        ivy__prog loc__0;
        {
            loc__0 = ext__ivy__prog__read_file(name);
            {
                ivy__prog loc__p;
                {
                    loc__p = loc__0;
                    if((vector__ivy__error____end(ivy__errors) == 0)){
                        {
                            ext__ivy__prog__flat(loc__p);
                        }
                    }
                    if((vector__ivy__error____end(ivy__errors) == 0)){
                        {
                            ext__ivy__prog__typeinfer(loc__p);
                        }
                    }
                    {
                        cpp__prog loc__cpp_prog;
                        {
                            if((vector__ivy__error____end(ivy__errors) == 0)){
                                {
                                    loc__cpp_prog = ext__ivy__prog__to_cpp(loc__p);
                                }
                            }
                            if((vector__ivy__error____end(ivy__errors) == 0)){
                                {
                                    {
                                        str loc__0;
                                        {
                                            str __tmp64;
                                            __tmp64 = name; ext__ivy__path__change_extension(__tmp64, __lit<str>("cpp"));
                                            loc__0 = __tmp64;
                                            {
                                                str loc__cpp_name;
                                                {
                                                    loc__cpp_name = loc__0;
                                                    {
                                                        str loc__0;
                                                        {
                                                            loc__0 = ext__cpp__prog__enc(loc__cpp_prog);
                                                            ext__ivy__write_file(loc__cpp_name, loc__0);
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
    }
}
void ivyc_s1::ext__ivy__stmt__parse(pstate& st, int prio, ivyc_s1::ivy__stmt& res){
    {
        while((st.tok == __lit<str>(";"))){
            {
                ext__pstate__consume(st);
            }
        }
        if((st.tok == __lit<str>("{"))){
            {
                ext__pstate__consume(st);
                ext__ivy__stmt__parse(st, 0, res);
                if((st.ok && (st.tok == __lit<str>("}")))){
                    {
                        ext__pstate__consume(st);
                    }
                }
                else {
                    {
                        st.ok = false;
                    }
                }
            }
        }
        else {
            if((st.tok == __lit<str>("if"))){
                {
                    ext__pstate__consume(st);
                    {
                        ivy__ifst loc__s;
                        {
                            ext__pstate__get_ann(st, loc__s.ann);
                            ext__ivy__expr__parse(st, 0, loc__s.cond);
                            if((st.ok && (st.tok == __lit<str>("{")))){
                                {
                                    ext__ivy__stmt__parse(st, 1, loc__s.thenst);
                                    if((st.ok && (st.tok == __lit<str>("else")))){
                                        {
                                            ext__pstate__consume(st);
                                            if((st.ok && ((st.tok == __lit<str>("{")) || (st.tok == __lit<str>("if"))))){
                                                {
                                                    ext__ivy__stmt__parse(st, 1, loc__s.elsest);
                                                }
                                            }
                                            else {
                                                {
                                                    st.ok = false;
                                                }
                                            }
                                        }
                                    }
                                    else {
                                        {
                                            ivyc_s1::annot loc__ann;
                                            {
                                                loc__s.elsest = ext__ivy__skipst__make(loc__ann);
                                            }
                                        }
                                    }
                                }
                            }
                            else {
                                {
                                    st.ok = false;
                                }
                            }
                            res = ivyc_s1::ivy__stmt(3, new ivyc_s1::ivy__stmt::twrap<ivyc_s1::ivy__ifst>(loc__s));
                        }
                    }
                }
            }
            else {
                if((st.tok == __lit<str>("while"))){
                    {
                        ext__pstate__consume(st);
                        {
                            ivy__whilest loc__s;
                            {
                                ext__pstate__get_ann(st, loc__s.ann);
                                ext__ivy__expr__parse(st, 0, loc__s.cond);
                                if((st.ok && (st.tok == __lit<str>("{")))){
                                    {
                                        ext__ivy__stmt__parse(st, 1, loc__s.body);
                                    }
                                }
                                else {
                                    {
                                        st.ok = false;
                                    }
                                }
                                res = ivyc_s1::ivy__stmt(4, new ivyc_s1::ivy__stmt::twrap<ivyc_s1::ivy__whilest>(loc__s));
                            }
                        }
                    }
                }
                else {
                    if((st.tok == __lit<str>("}"))){
                        {
                            {
                                ivyc_s1::annot loc__ann;
                                {
                                    ext__pstate__get_ann(st, loc__ann);
                                    res = ext__ivy__skipst__make(loc__ann);
                                }
                            }
                        }
                    }
                    else {
                        {
                            ext__ivy__stmt__parse_lang_stmt(st, prio, res);
                        }
                    }
                }
            }
        }
        if((st.ok && (prio == 0) && (0 < str__end(st.tok)) && !(st.tok == __lit<str>("}")))){
            {
                {
                    ivy__sequence loc__sq;
                    {
                        loc__sq.lhs = res;
                        ext__ivy__stmt__parse(st, 0, loc__sq.rhs);
                        res = ivyc_s1::ivy__stmt(1, new ivyc_s1::ivy__stmt::twrap<ivyc_s1::ivy__sequence>(loc__sq));
                    }
                }
            }
        }
    }
}
void ivyc_s1::ext__ivy__prog__read_file_int(const str& name, ivyc_s1::annot ann, ivy__prog& p, ivy__prog__readst& rst){
    {
        str loc__text;
        {
            {
                bool loc__ok;
    loc__ok = (bool)___ivy_choose(0,"loc:ok",16493);
                {
                    ext__ivy__file__read(name, loc__text, loc__ok);
                    if(loc__ok){
                        {
                            pstate loc__0;
    loc__0.p = (unsigned long long)___ivy_choose(0,"loc:0",16490);
    loc__0.ann.line = (unsigned long long)___ivy_choose(0,"loc:0",16490);
    loc__0.ok = (bool)___ivy_choose(0,"loc:0",16490);
                            {
                                loc__0 = ext__pstate__make(loc__text);
                                {
                                    pstate loc__st;
    loc__st.p = (unsigned long long)___ivy_choose(0,"loc:st",16489);
    loc__st.ann.line = (unsigned long long)___ivy_choose(0,"loc:st",16489);
    loc__st.ok = (bool)___ivy_choose(0,"loc:st",16489);
                                    {
                                        loc__st = loc__0;
                                        loc__st.ann.file = name;
                                        ext__ivy__prog__parse_to(loc__st, 0, p);
                                        loc__ok = (loc__st.ok && (str__end(loc__st.tok) == 0));
                                        if(loc__ok){
                                            {
                                                unsigned long long loc__idx;
    loc__idx = (unsigned long long)___ivy_choose(0,"loc:idx",16486);
                                                {
                                                    loc__idx = vector__ivy__decl____begin(p.decls);
                                                    while(((loc__idx < vector__ivy__decl____end(p.decls)) && (vector__ivy__error____end(ivy__errors) == 0))){
                                                        {
                                                            ivyc_s1::ivy__decl loc__d;
                                                            {
                                                                loc__d = vector__ivy__decl____value(p.decls,loc__idx);
                                                                if(((loc__d).tag == 6)){
                                                                    {
                                                                        ivyc_s1::ivy__expr loc__0;
                                                                        ivyc_s1::ivy__ident loc__1;
                                                                        {
                                                                            {
                                                                                ivy__includedc self__COLON__ivy__includedc;
                                                                                if (((loc__d).tag == 6)) self__COLON__ivy__includedc = ivyc_s1::ivy__decl::unwrap< ivyc_s1::ivy__includedc >(loc__d);
                                                                                if(((loc__d).tag == 6)){
                                                                                    loc__0 = ext__ivy__includedc__get_expr(self__COLON__ivy__includedc);
                                                                                }
                                                                                else {
                                                                                    loc__0 = ext__ivy__decl__get_expr(loc__d);
                                                                                }
                                                                            }
                                                                            {
                                                                                ivy__symbol self__COLON__ivy__symbol;
                                                                                if (((loc__0).tag == 0)) self__COLON__ivy__symbol = ivyc_s1::ivy__expr::unwrap< ivyc_s1::ivy__symbol >(loc__0);
                                                                                if(((loc__0).tag == 0)){
                                                                                    loc__1 = ext__ivy__symbol__get_name(self__COLON__ivy__symbol);
                                                                                }
                                                                                else {
                                                                                    loc__1 = ext__ivy__expr__get_name(loc__0);
                                                                                }
                                                                            }
                                                                            {
                                                                                ivyc_s1::ivy__ident loc__iname;
                                                                                {
                                                                                    loc__iname = loc__1;
                                                                                    {
                                                                                        bool loc__0;
    loc__0 = (bool)___ivy_choose(0,"loc:0",16482);
                                                                                        {
                                                                                            loc__0 = ext__ivy__ident_set__mem(rst.have_read, loc__iname);
                                                                                            if(!loc__0){
                                                                                                {
                                                                                                    {
                                                                                                        str loc__0;
                                                                                                        str loc__1;
                                                                                                        {
                                                                                                            {
                                                                                                                ivy__dotident self__COLON__ivy__dotident;
                                                                                                                if (((loc__iname).tag == 2)) self__COLON__ivy__dotident = ivyc_s1::ivy__ident::unwrap< ivyc_s1::ivy__dotident >(loc__iname);
                                                                                                                if(((loc__iname).tag == 2)){
                                                                                                                    loc__0 = ext__ivy__dotident__to_str(self__COLON__ivy__dotident);
                                                                                                                }
                                                                                                                else {
                                                                                                                    {
                                                                                                                        ivy__strident self__COLON__ivy__strident;
                                                                                                                        if (((loc__iname).tag == 0)) self__COLON__ivy__strident = ivyc_s1::ivy__ident::unwrap< ivyc_s1::ivy__strident >(loc__iname);
                                                                                                                        if(((loc__iname).tag == 0)){
                                                                                                                            loc__0 = ext__ivy__strident__to_str(self__COLON__ivy__strident);
                                                                                                                        }
                                                                                                                        else {
                                                                                                                            loc__0 = ext__ivy__ident__to_str(loc__iname);
                                                                                                                        }
                                                                                                                    }
                                                                                                                }
                                                                                                            }
                                                                                                            str __tmp65;
                                                                                                            __tmp65 = loc__0; ext__ivy__prog__find_include(__tmp65);
                                                                                                            loc__1 = __tmp65;
                                                                                                            {
                                                                                                                str loc__fname;
                                                                                                                {
                                                                                                                    loc__fname = loc__1;
                                                                                                                    {
                                                                                                                        ivy__prog loc__subp;
                                                                                                                        {
                                                                                                                            {
                                                                                                                                ivyc_s1::annot loc__0;
                                                                                                                                {
                                                                                                                                    {
                                                                                                                                        ivy__includedc self__COLON__ivy__includedc;
                                                                                                                                        if (((loc__d).tag == 6)) self__COLON__ivy__includedc = ivyc_s1::ivy__decl::unwrap< ivyc_s1::ivy__includedc >(loc__d);
                                                                                                                                        if(((loc__d).tag == 6)){
                                                                                                                                            loc__0 = ext__ivy__includedc__get_ann(self__COLON__ivy__includedc);
                                                                                                                                        }
                                                                                                                                        else {
                                                                                                                                            loc__0 = ext__ivy__decl__get_ann(loc__d);
                                                                                                                                        }
                                                                                                                                    }
                                                                                                                                    ext__ivy__prog__read_file_int(loc__fname, loc__0, loc__subp, rst);
                                                                                                                                }
                                                                                                                            }
                                                                                                                            {
                                                                                                                                ivyc_s1::ivy__decl loc__0;
                                                                                                                                {
                                                                                                                                    loc__0 = ext__ivy__groupdc__make(loc__subp.decls);
                                                                                                                                    ext__vector__ivy__decl____set(p.decls, loc__idx, loc__0);
                                                                                                                                }
                                                                                                                            }
                                                                                                                            ext__ivy__ident_set__set(rst.have_read, loc__iname, true);
                                                                                                                        }
                                                                                                                    }
                                                                                                                }
                                                                                                            }
                                                                                                        }
                                                                                                    }
                                                                                                }
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                                loc__idx = ext__vector__ivy__decl____domain__next(loc__idx);
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                        else {
                                            {
                                                {
                                                    ivy__syntax_error loc__0;
                                                    {
                                                        loc__0 = ext__ivy__syntax_error__make(loc__st.tok);
                                                        {
                                                            ivy__syntax_error loc__foo;
                                                            {
                                                                loc__foo = loc__0;
                                                                ext__ivy__report_error(ivyc_s1::ivy__error(8, new ivyc_s1::ivy__error::twrap<ivyc_s1::ivy__syntax_error>(loc__foo)), ivyc_s1::annot(0, new ivyc_s1::annot::twrap<ivyc_s1::annot_i>(loc__st.ann)));
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                    else {
                        {
                            {
                                ivy__file_not_found loc__0;
                                {
                                    loc__0 = ext__ivy__file_not_found__make(name);
                                    {
                                        ivy__file_not_found loc__foo;
                                        {
                                            loc__foo = loc__0;
                                            ext__ivy__report_error(ivyc_s1::ivy__error(4, new ivyc_s1::ivy__error::twrap<ivyc_s1::ivy__file_not_found>(loc__foo)), ann);
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
    }
}
void ivyc_s1::ext__ivy__tocppst__add_stmt(ivy__tocppst& s, ivyc_s1::cpp__stmt code){
    {
        ext__vector__cpp__stmt____append(s.code, code);
    }
}
void ivyc_s1::ext__ivy__ident_set__set(ivy__ident_set& a, ivyc_s1::ivy__ident x, bool y){
    {

        a[x] = y;
    }
}
ivyc_s1::ivy__expr ivyc_s1::ext__ivy__stmt__get_rhs(ivyc_s1::ivy__stmt s){
    ivyc_s1::ivy__expr res;
    {
    }
    return res;
}
ivyc_s1::cpp__expr ivyc_s1::ext__cpp__not__make(ivyc_s1::cpp__expr arg, ivyc_s1::annot ann){
    ivyc_s1::cpp__expr res;
    {
        cpp__app loc__s;
        {
            loc__s.func = ext__cpp__symbol__makestr(__lit<str>("!"), ann);
            ext__vector__cpp__expr____append(loc__s.args, arg);
            loc__s.ann = ann;
            res = ivyc_s1::cpp__expr(1, new ivyc_s1::cpp__expr::twrap<ivyc_s1::cpp__app>(loc__s));
        }
    }
    return res;
}
ivyc_s1::ivy__ident ivyc_s1::ext__ivy__strident__make(const str& val){
    ivyc_s1::ivy__ident res;
    {
        ivy__strident loc__s;
        {
            loc__s.val = val;
            res = ivyc_s1::ivy__ident(0, new ivyc_s1::ivy__ident::twrap<ivyc_s1::ivy__strident>(loc__s));
        }
    }
    return res;
}
ivyc_s1::ivy__expr ivyc_s1::ext__ivy__app__type_elide_int(const ivy__app& e, bool b0, const ivy__symeval& m, ivy__elidest& st){
    ivyc_s1::ivy__expr res;
    {
        bool loc__b;
    loc__b = (bool)___ivy_choose(0,"loc:b",16508);
        {
            loc__b = b0;
            {
                bool loc__0;
    loc__0 = (bool)___ivy_choose(0,"loc:0",16507);
                {
                    loc__0 = ext__ivy__app__is(e, ivy__verb__colon);
                    if(loc__0){
                        {
                            ivyc_s1::ivy__expr loc__arg;
                            {
                                loc__arg = vector__ivy__expr____value(e.args,0);
                                {
                                    ivy__app self__COLON__ivy__app;
                                    if (((loc__arg).tag == 1)) self__COLON__ivy__app = ivyc_s1::ivy__expr::unwrap< ivyc_s1::ivy__app >(loc__arg);
                                    if(((loc__arg).tag == 1)){
                                        res = ext__ivy__app__type_elide_int(self__COLON__ivy__app, loc__b, m, st);
                                    }
                                    else {
                                        {
                                            ivy__symbol self__COLON__ivy__symbol;
                                            if (((loc__arg).tag == 0)) self__COLON__ivy__symbol = ivyc_s1::ivy__expr::unwrap< ivyc_s1::ivy__symbol >(loc__arg);
                                            if(((loc__arg).tag == 0)){
                                                res = ext__ivy__symbol__type_elide_int(self__COLON__ivy__symbol, loc__b, m, st);
                                            }
                                            else {
                                                res = ext__ivy__expr__type_elide_int(loc__arg, loc__b, m, st);
                                            }
                                        }
                                    }
                                }
                                if(!loc__b){
                                    if(((loc__arg).tag == 1)){
                                        {
                                            {
                                                ivy__verb loc__0;
    loc__0 = (ivy__verb)___ivy_choose(0,"loc:0",16496);
                                                {
                                                    {
                                                        ivy__app self__COLON__ivy__app;
                                                        if (((loc__arg).tag == 1)) self__COLON__ivy__app = ivyc_s1::ivy__expr::unwrap< ivyc_s1::ivy__app >(loc__arg);
                                                        if(((loc__arg).tag == 1)){
                                                            loc__0 = ext__ivy__app__app_verb(self__COLON__ivy__app);
                                                        }
                                                        else {
                                                            loc__0 = ext__ivy__expr__app_verb(loc__arg);
                                                        }
                                                    }
                                                    loc__b = ivy__verb_in_to_out[loc__0];
                                                }
                                            }
                                        }
                                    }
                                    else {
                                        {
                                            {
                                                ivy__verb loc__0;
    loc__0 = (ivy__verb)___ivy_choose(0,"loc:0",16497);
                                                ivyc_s1::ivy__ident loc__1;
                                                bool loc__2;
    loc__2 = (bool)___ivy_choose(0,"loc:2",16497);
                                                ivyc_s1::ivy__ident loc__3;
                                                bool loc__4;
    loc__4 = (bool)___ivy_choose(0,"loc:4",16497);
                                                {
                                                    {
                                                        ivy__symbol self__COLON__ivy__symbol;
                                                        if (((loc__arg).tag == 0)) self__COLON__ivy__symbol = ivyc_s1::ivy__expr::unwrap< ivyc_s1::ivy__symbol >(loc__arg);
                                                        if(((loc__arg).tag == 0)){
                                                            loc__0 = ext__ivy__symbol__get_verb(self__COLON__ivy__symbol);
                                                        }
                                                        else {
                                                            loc__0 = ext__ivy__expr__get_verb(loc__arg);
                                                        }
                                                    }
                                                    {
                                                        ivy__symbol self__COLON__ivy__symbol;
                                                        if (((loc__arg).tag == 0)) self__COLON__ivy__symbol = ivyc_s1::ivy__expr::unwrap< ivyc_s1::ivy__symbol >(loc__arg);
                                                        if(((loc__arg).tag == 0)){
                                                            loc__1 = ext__ivy__symbol__get_name(self__COLON__ivy__symbol);
                                                        }
                                                        else {
                                                            loc__1 = ext__ivy__expr__get_name(loc__arg);
                                                        }
                                                    }
                                                    bool __tmp66;
                                                    __tmp66 = false; ext__ivy__elidest__map__get(st.seen, loc__1, __tmp66);
                                                    loc__2 = __tmp66;
                                                    {
                                                        ivy__symbol self__COLON__ivy__symbol;
                                                        if (((loc__arg).tag == 0)) self__COLON__ivy__symbol = ivyc_s1::ivy__expr::unwrap< ivyc_s1::ivy__symbol >(loc__arg);
                                                        if(((loc__arg).tag == 0)){
                                                            loc__3 = ext__ivy__symbol__get_name(self__COLON__ivy__symbol);
                                                        }
                                                        else {
                                                            loc__3 = ext__ivy__expr__get_name(loc__arg);
                                                        }
                                                    }
                                                    loc__4 = ext__ivy__symeval__mem(m, loc__3);
                                                    loc__b = (ivy__verb_mono[loc__0] && (loc__2 || loc__4));
                                                }
                                            }
                                        }
                                    }
                                }
                                if(!loc__b){
                                    res = ext__ivy__colon__make(res, vector__ivy__expr____value(e.args,1), e.ann);
                                }
                                if(((loc__arg).tag == 0)){
                                    {
                                        {
                                            ivyc_s1::ivy__ident loc__0;
                                            {
                                                {
                                                    ivy__symbol self__COLON__ivy__symbol;
                                                    if (((loc__arg).tag == 0)) self__COLON__ivy__symbol = ivyc_s1::ivy__expr::unwrap< ivyc_s1::ivy__symbol >(loc__arg);
                                                    if(((loc__arg).tag == 0)){
                                                        loc__0 = ext__ivy__symbol__get_name(self__COLON__ivy__symbol);
                                                    }
                                                    else {
                                                        loc__0 = ext__ivy__expr__get_name(loc__arg);
                                                    }
                                                }
                                                ext__ivy__elidest__map__set(st.seen, loc__0, true);
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                    else {
                        {
                            {
                                ivyc_s1::ivy__expr loc__func;
                                {
                                    {
                                        ivy__app self__COLON__ivy__app;
                                        if (((e.func).tag == 1)) self__COLON__ivy__app = ivyc_s1::ivy__expr::unwrap< ivyc_s1::ivy__app >(e.func);
                                        if(((e.func).tag == 1)){
                                            loc__func = ext__ivy__app__type_elide_int(self__COLON__ivy__app, true, m, st);
                                        }
                                        else {
                                            {
                                                ivy__symbol self__COLON__ivy__symbol;
                                                if (((e.func).tag == 0)) self__COLON__ivy__symbol = ivyc_s1::ivy__expr::unwrap< ivyc_s1::ivy__symbol >(e.func);
                                                if(((e.func).tag == 0)){
                                                    loc__func = ext__ivy__symbol__type_elide_int(self__COLON__ivy__symbol, true, m, st);
                                                }
                                                else {
                                                    loc__func = ext__ivy__expr__type_elide_int(e.func, true, m, st);
                                                }
                                            }
                                        }
                                    }
                                    {
                                        ivy__verb loc__0;
    loc__0 = (ivy__verb)___ivy_choose(0,"loc:0",16505);
                                        {
                                            {
                                                ivy__symbol self__COLON__ivy__symbol;
                                                if (((e.func).tag == 0)) self__COLON__ivy__symbol = ivyc_s1::ivy__expr::unwrap< ivyc_s1::ivy__symbol >(e.func);
                                                if(((e.func).tag == 0)){
                                                    loc__0 = ext__ivy__symbol__get_verb(self__COLON__ivy__symbol);
                                                }
                                                else {
                                                    loc__0 = ext__ivy__expr__get_verb(e.func);
                                                }
                                            }
                                            {
                                                ivy__verb loc__vrb;
    loc__vrb = (ivy__verb)___ivy_choose(0,"loc:vrb",16504);
                                                {
                                                    loc__vrb = loc__0;
                                                    loc__b = ((loc__b && ivy__verb_out_to_in[loc__vrb]) || ivy__verb_mono[loc__vrb]);
                                                    {
                                                        vector__ivy__expr__ loc__newargs;
                                                        {
                                                            {
                                                                unsigned long long loc__idx;
    loc__idx = (unsigned long long)___ivy_choose(0,"loc:idx",16502);
                                                                {
                                                                    loc__idx = vector__ivy__expr____begin(e.args);
                                                                    while((loc__idx < vector__ivy__expr____end(e.args))){
                                                                        {
                                                                            ivyc_s1::ivy__expr loc__arg;
                                                                            {
                                                                                {
                                                                                    bool loc__ba;
    loc__ba = (bool)___ivy_choose(0,"loc:ba",16500);
                                                                                    {
                                                                                        loc__ba = (loc__b || (ivy__verb_first_to_in[loc__vrb] && (0 < loc__idx)));
                                                                                        {
                                                                                            ivy__app self__COLON__ivy__app;
                                                                                            if (((vector__ivy__expr____value(e.args,loc__idx)).tag == 1)) self__COLON__ivy__app = ivyc_s1::ivy__expr::unwrap< ivyc_s1::ivy__app >(vector__ivy__expr____value(e.args,loc__idx));
                                                                                            if(((vector__ivy__expr____value(e.args,loc__idx)).tag == 1)){
                                                                                                loc__arg = ext__ivy__app__type_elide_int(self__COLON__ivy__app, loc__ba, m, st);
                                                                                            }
                                                                                            else {
                                                                                                {
                                                                                                    ivy__symbol self__COLON__ivy__symbol;
                                                                                                    if (((vector__ivy__expr____value(e.args,loc__idx)).tag == 0)) self__COLON__ivy__symbol = ivyc_s1::ivy__expr::unwrap< ivyc_s1::ivy__symbol >(vector__ivy__expr____value(e.args,loc__idx));
                                                                                                    if(((vector__ivy__expr____value(e.args,loc__idx)).tag == 0)){
                                                                                                        loc__arg = ext__ivy__symbol__type_elide_int(self__COLON__ivy__symbol, loc__ba, m, st);
                                                                                                    }
                                                                                                    else {
                                                                                                        loc__arg = ext__ivy__expr__type_elide_int(vector__ivy__expr____value(e.args,loc__idx), loc__ba, m, st);
                                                                                                    }
                                                                                                }
                                                                                            }
                                                                                        }
                                                                                        ext__vector__ivy__expr____append(loc__newargs, loc__arg);
                                                                                        loc__idx = ext__vector__ivy__expr____domain__next(loc__idx);
                                                                                    }
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                    res = ext__ivy__app__make(loc__func, loc__newargs, e.ann);
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
    }
    return res;
}
ivyc_s1::cpp__expr ivyc_s1::ext__cpp__symbol__prefix(const cpp__symbol& s, ivyc_s1::cpp__ident pref){
    ivyc_s1::cpp__expr res;
    {
        {
            ivyc_s1::cpp__ident loc__0;
            ivyc_s1::cpp__ident loc__1;
            ivyc_s1::annot loc__2;
            {
                loc__0 = ext__cpp__symbol__get_name(s);
                {
                    cpp__dotident self__COLON__cpp__dotident;
                    if (((loc__0).tag == 2)) self__COLON__cpp__dotident = ivyc_s1::cpp__ident::unwrap< ivyc_s1::cpp__dotident >(loc__0);
                    if(((loc__0).tag == 2)){
                        loc__1 = ext__cpp__dotident__prefix(self__COLON__cpp__dotident, pref);
                    }
                    else {
                        {
                            cpp__strident self__COLON__cpp__strident;
                            if (((loc__0).tag == 0)) self__COLON__cpp__strident = ivyc_s1::cpp__ident::unwrap< ivyc_s1::cpp__strident >(loc__0);
                            if(((loc__0).tag == 0)){
                                loc__1 = ext__cpp__strident__prefix(self__COLON__cpp__strident, pref);
                            }
                            else {
                                loc__1 = ext__cpp__ident__prefix(loc__0, pref);
                            }
                        }
                    }
                }
                loc__2 = ext__cpp__symbol__get_ann(s);
                res = ext__cpp__symbol__make(loc__1, loc__2);
            }
        }
    }
    return res;
}
ivyc_s1::ivy__decl ivyc_s1::ext__ivy__vardc__make(ivyc_s1::ivy__expr typing, bool is_destructor, ivyc_s1::annot ann){
    ivyc_s1::ivy__decl res;
    {
        {
            ivy__vardc loc__s;
    loc__s.is_destructor = (bool)___ivy_choose(0,"loc:s",16510);
    loc__s.has_def = (bool)___ivy_choose(0,"loc:s",16510);
            {
                loc__s.typing = typing;
                loc__s.is_destructor = is_destructor;
                loc__s.ann = ann;
                res = ivyc_s1::ivy__decl(3, new ivyc_s1::ivy__decl::twrap<ivyc_s1::ivy__vardc>(loc__s));
            }
        }
    }
    return res;
}
ivyc_s1::ivy__verb ivyc_s1::ext__ivy__symbol__get_verb(const ivy__symbol& s){
    ivyc_s1::ivy__verb res;
    res = (ivy__verb)___ivy_choose(0,"fml:res",0);
    {
        res = s.vrb;
    }
    return res;
}
void ivyc_s1::ext__vector__pretty__state____pop_back(vector__pretty__state__& a){
    {

        if (a.size() > 0) {
            a.pop_back();
        }
    }
}
void ivyc_s1::ext__ivy__add_hasher(cpp__structdecl& s){
    {
        {
            cpp__structdecl loc__hashstr;
    loc__hashstr.has_super = (bool)___ivy_choose(0,"loc:hashstr",16526);
    loc__hashstr.has_members = (bool)___ivy_choose(0,"loc:hashstr",16526);
            {
                loc__hashstr.ann = s.ann;
                loc__hashstr.name = ext__cpp__symbol__makestr(__lit<str>("__hash"), s.ann);
                loc__hashstr.has_members = true;
                {
                    cpp__funcdecl loc__hash;
    loc__hash.ftype.base.is_const = (bool)___ivy_choose(0,"loc:hash",16525);
    loc__hash.ftype.base.is_ref = (bool)___ivy_choose(0,"loc:hash",16525);
    loc__hash.ftype.is_const = (bool)___ivy_choose(0,"loc:hash",16525);
    loc__hash.ftype.has_initializer = (bool)___ivy_choose(0,"loc:hash",16525);
    loc__hash.has_body = (bool)___ivy_choose(0,"loc:hash",16525);
    loc__hash.is_static = (bool)___ivy_choose(0,"loc:hash",16525);
    loc__hash.is_virtual = (bool)___ivy_choose(0,"loc:hash",16525);
                    {
                        loc__hash.ftype.base._type = ext__cpp__symbol__makestr(__lit<str>("std::size_t"), s.ann);
                        loc__hash.ftype.base.name = ext__cpp__symbol__makestr(__lit<str>("operator ()"), s.ann);
                        loc__hash.ftype.is_const = true;
                        {
                            cpp__simpletype loc__hasharg0;
    loc__hasharg0.is_const = (bool)___ivy_choose(0,"loc:hasharg0",16524);
    loc__hasharg0.is_ref = (bool)___ivy_choose(0,"loc:hasharg0",16524);
                            {
                                loc__hasharg0._type = s.name;
                                loc__hasharg0.is_const = true;
                                loc__hasharg0.is_ref = true;
                                loc__hasharg0.name = ext__cpp__symbol__makestr(__lit<str>("x"), loc__hash.ann);
                                ext__vector__cpp__simpletype____append(loc__hash.ftype.args, loc__hasharg0);
                                loc__hash.has_body = true;
                                {
                                    vector__cpp__expr__ loc__hashs;
                                    {
                                        {
                                            unsigned long long loc__idx;
    loc__idx = (unsigned long long)___ivy_choose(0,"loc:idx",16522);
                                            {
                                                loc__idx = vector__cpp__decl____begin(s.members);
                                                while((loc__idx < vector__cpp__decl____end(s.members))){
                                                    {
                                                        ivyc_s1::cpp__decl loc__d;
                                                        {
                                                            loc__d = vector__cpp__decl____value(s.members,loc__idx);
                                                            if(((loc__d).tag == 3)){
                                                                {
                                                                    {
                                                                        ivyc_s1::cpp__expr loc__0;
                                                                        {
                                                                            {
                                                                                cpp__vardecl self__COLON__cpp__vardecl;
                                                                                if (((loc__d).tag == 3)) self__COLON__cpp__vardecl = ivyc_s1::cpp__decl::unwrap< ivyc_s1::cpp__vardecl >(loc__d);
                                                                                if(((loc__d).tag == 3)){
                                                                                    loc__0 = ext__cpp__vardecl__get_name(self__COLON__cpp__vardecl);
                                                                                }
                                                                                else {
                                                                                    loc__0 = ext__cpp__decl__get_name(loc__d);
                                                                                }
                                                                            }
                                                                            {
                                                                                ivyc_s1::cpp__expr loc__f0;
                                                                                {
                                                                                    loc__f0 = loc__0;
                                                                                    {
                                                                                        ivyc_s1::cpp__expr loc__0;
                                                                                        ivyc_s1::cpp__ident loc__1;
                                                                                        ivyc_s1::cpp__expr loc__2;
                                                                                        {
                                                                                            {
                                                                                                cpp__vardecl self__COLON__cpp__vardecl;
                                                                                                if (((loc__d).tag == 3)) self__COLON__cpp__vardecl = ivyc_s1::cpp__decl::unwrap< ivyc_s1::cpp__vardecl >(loc__d);
                                                                                                if(((loc__d).tag == 3)){
                                                                                                    loc__0 = ext__cpp__vardecl__get_type(self__COLON__cpp__vardecl);
                                                                                                }
                                                                                                else {
                                                                                                    loc__0 = ext__cpp__decl__get_type(loc__d);
                                                                                                }
                                                                                            }
                                                                                            {
                                                                                                cpp__symbol self__COLON__cpp__symbol;
                                                                                                if (((loc__0).tag == 0)) self__COLON__cpp__symbol = ivyc_s1::cpp__expr::unwrap< ivyc_s1::cpp__symbol >(loc__0);
                                                                                                if(((loc__0).tag == 0)){
                                                                                                    loc__1 = ext__cpp__symbol__get_name(self__COLON__cpp__symbol);
                                                                                                }
                                                                                                else {
                                                                                                    loc__1 = ext__cpp__expr__get_name(loc__0);
                                                                                                }
                                                                                            }
                                                                                            {
                                                                                                cpp__symbol self__COLON__cpp__symbol;
                                                                                                if (((loc__hashstr.name).tag == 0)) self__COLON__cpp__symbol = ivyc_s1::cpp__expr::unwrap< ivyc_s1::cpp__symbol >(loc__hashstr.name);
                                                                                                if(((loc__hashstr.name).tag == 0)){
                                                                                                    loc__2 = ext__cpp__symbol__prefix(self__COLON__cpp__symbol, loc__1);
                                                                                                }
                                                                                                else {
                                                                                                    loc__2 = ext__cpp__expr__prefix(loc__hashstr.name, loc__1);
                                                                                                }
                                                                                            }
                                                                                            {
                                                                                                ivyc_s1::cpp__expr loc__f1;
                                                                                                {
                                                                                                    loc__f1 = loc__2;
                                                                                                    {
                                                                                                        ivyc_s1::cpp__expr loc__0;
                                                                                                        {
                                                                                                            loc__0 = ext__cpp__dot__make(loc__hasharg0.name, loc__f0, s.ann);
                                                                                                            {
                                                                                                                ivyc_s1::cpp__expr loc__f2;
                                                                                                                {
                                                                                                                    loc__f2 = loc__0;
                                                                                                                    {
                                                                                                                        ivyc_s1::cpp__expr loc__0;
                                                                                                                        ivyc_s1::cpp__expr loc__1;
                                                                                                                        {
                                                                                                                            loc__0 = ext__cpp__app__make0(loc__f1, s.ann);
                                                                                                                            loc__1 = ext__cpp__app__make1(loc__0, loc__f2, s.ann);
                                                                                                                            {
                                                                                                                                ivyc_s1::cpp__expr loc__e;
                                                                                                                                {
                                                                                                                                    loc__e = loc__1;
                                                                                                                                    ext__vector__cpp__expr____append(loc__hashs, loc__e);
                                                                                                                                }
                                                                                                                            }
                                                                                                                        }
                                                                                                                    }
                                                                                                                }
                                                                                                            }
                                                                                                        }
                                                                                                    }
                                                                                                }
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                            loc__idx = ext__vector__cpp__decl____domain__next(loc__idx);
                                                        }
                                                    }
                                                }
                                                {
                                                    ivyc_s1::cpp__expr loc__0;
                                                    {
                                                        loc__0 = ext__cpp__symbol__makestr(__lit<str>("0"), s.ann);
                                                        {
                                                            ivyc_s1::cpp__expr loc__hashret;
                                                            {
                                                                loc__hashret = loc__0;
                                                                if((0 < vector__cpp__expr____end(loc__hashs))){
                                                                    {
                                                                        loc__hashret = ext__cpp__plus__fold_left(loc__hashs, s.ann);
                                                                    }
                                                                }
                                                                loc__hash.body = ext__cpp__retst__make(loc__hashret, s.ann);
                                                                ext__vector__cpp__decl____append(loc__hashstr.members, ivyc_s1::cpp__decl(4, new ivyc_s1::cpp__decl::twrap<ivyc_s1::cpp__funcdecl>(loc__hash)));
                                                                ext__vector__cpp__decl____append(s.members, ivyc_s1::cpp__decl(5, new ivyc_s1::cpp__decl::twrap<ivyc_s1::cpp__structdecl>(loc__hashstr)));
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
    }
}
ivyc_s1::ivy__syntax_error ivyc_s1::ext__ivy__syntax_error__make(const str& tok){
    ivyc_s1::ivy__syntax_error res;
    {
        res.tok = tok;
    }
    return res;
}
void ivyc_s1::ext__vector__pos____pop_back(vector__pos__& a){
    {

        if (a.size() > 0) {
            a.pop_back();
        }
    }
}
void ivyc_s1::ext__ivy__symbol__encode(const ivy__symbol& s, pretty& b, int prio){
    {
        {
            annot_i self__COLON__annot_i;
            if (((s.ann).tag == 0)) self__COLON__annot_i = ivyc_s1::annot::unwrap< ivyc_s1::annot_i >(s.ann);
            if(((s.ann).tag == 0)){
                ext__annot_i__encode(self__COLON__annot_i, b);
            }
            else {
                ext__annot__encode(s.ann, b);
            }
        }
        {
            ivy__dotident self__COLON__ivy__dotident;
            if (((s.name).tag == 2)) self__COLON__ivy__dotident = ivyc_s1::ivy__ident::unwrap< ivyc_s1::ivy__dotident >(s.name);
            if(((s.name).tag == 2)){
                ext__ivy__dotident__encode(self__COLON__ivy__dotident, b, 0);
            }
            else {
                {
                    ivy__numident self__COLON__ivy__numident;
                    if (((s.name).tag == 1)) self__COLON__ivy__numident = ivyc_s1::ivy__ident::unwrap< ivyc_s1::ivy__numident >(s.name);
                    if(((s.name).tag == 1)){
                        ext__ivy__numident__encode(self__COLON__ivy__numident, b, 0);
                    }
                    else {
                        {
                            ivy__strident self__COLON__ivy__strident;
                            if (((s.name).tag == 0)) self__COLON__ivy__strident = ivyc_s1::ivy__ident::unwrap< ivyc_s1::ivy__strident >(s.name);
                            if(((s.name).tag == 0)){
                                ext__ivy__strident__encode(self__COLON__ivy__strident, b, 0);
                            }
                            else {
                                ext__ivy__ident__encode(s.name, b, 0);
                            }
                        }
                    }
                }
            }
        }
    }
}
ivyc_s1::annot ivyc_s1::ext__cpp__enumdecl__get_ann(const cpp__enumdecl& d){
    ivyc_s1::annot res;
    res = d.ann;
    return res;
}
void ivyc_s1::ext__ivy__member_name(ivyc_s1::cpp__expr& s){
    {
        ivyc_s1::cpp__ident loc__0;
        {
            {
                cpp__symbol self__COLON__cpp__symbol;
                if (((s).tag == 0)) self__COLON__cpp__symbol = ivyc_s1::cpp__expr::unwrap< ivyc_s1::cpp__symbol >(s);
                if(((s).tag == 0)){
                    loc__0 = ext__cpp__symbol__get_name(self__COLON__cpp__symbol);
                }
                else {
                    loc__0 = ext__cpp__expr__get_name(s);
                }
            }
            if(((loc__0).tag == 2)){
                {
                    ivyc_s1::cpp__ident loc__0;
                    ivyc_s1::cpp__ident loc__1;
                    ivyc_s1::annot loc__2;
                    {
                        {
                            cpp__symbol self__COLON__cpp__symbol;
                            if (((s).tag == 0)) self__COLON__cpp__symbol = ivyc_s1::cpp__expr::unwrap< ivyc_s1::cpp__symbol >(s);
                            if(((s).tag == 0)){
                                loc__0 = ext__cpp__symbol__get_name(self__COLON__cpp__symbol);
                            }
                            else {
                                loc__0 = ext__cpp__expr__get_name(s);
                            }
                        }
                        {
                            cpp__dotident self__COLON__cpp__dotident;
                            if (((loc__0).tag == 2)) self__COLON__cpp__dotident = ivyc_s1::cpp__ident::unwrap< ivyc_s1::cpp__dotident >(loc__0);
                            if(((loc__0).tag == 2)){
                                loc__1 = ext__cpp__dotident__get_member(self__COLON__cpp__dotident);
                            }
                            else {
                                loc__1 = ext__cpp__ident__get_member(loc__0);
                            }
                        }
                        {
                            cpp__app self__COLON__cpp__app;
                            if (((s).tag == 1)) self__COLON__cpp__app = ivyc_s1::cpp__expr::unwrap< ivyc_s1::cpp__app >(s);
                            if(((s).tag == 1)){
                                loc__2 = ext__cpp__app__get_ann(self__COLON__cpp__app);
                            }
                            else {
                                {
                                    cpp__symbol self__COLON__cpp__symbol;
                                    if (((s).tag == 0)) self__COLON__cpp__symbol = ivyc_s1::cpp__expr::unwrap< ivyc_s1::cpp__symbol >(s);
                                    if(((s).tag == 0)){
                                        loc__2 = ext__cpp__symbol__get_ann(self__COLON__cpp__symbol);
                                    }
                                    else {
                                        loc__2 = ext__cpp__expr__get_ann(s);
                                    }
                                }
                            }
                        }
                        s = ext__cpp__symbol__make(loc__1, loc__2);
                    }
                }
            }
        }
    }
}
ivyc_s1::str ivyc_s1::ext__cpp__prog__enc(const cpp__prog& e){
    ivyc_s1::str s;
    {
        pretty loc__0;
    loc__0.st.begin = (unsigned long long)___ivy_choose(0,"loc:0",16530);
    loc__0.st.total = (unsigned long long)___ivy_choose(0,"loc:0",16530);
    loc__0.maxline = (unsigned long long)___ivy_choose(0,"loc:0",16530);
    loc__0.indent = (unsigned long long)___ivy_choose(0,"loc:0",16530);
    loc__0.space = (unsigned long long)___ivy_choose(0,"loc:0",16530);
    loc__0.depth = (unsigned long long)___ivy_choose(0,"loc:0",16530);
    loc__0.cppstyle = (bool)___ivy_choose(0,"loc:0",16530);
        {
            loc__0 = ext__pretty__make(100, 4);
            {
                pretty loc__p;
    loc__p.st.begin = (unsigned long long)___ivy_choose(0,"loc:p",16529);
    loc__p.st.total = (unsigned long long)___ivy_choose(0,"loc:p",16529);
    loc__p.maxline = (unsigned long long)___ivy_choose(0,"loc:p",16529);
    loc__p.indent = (unsigned long long)___ivy_choose(0,"loc:p",16529);
    loc__p.space = (unsigned long long)___ivy_choose(0,"loc:p",16529);
    loc__p.depth = (unsigned long long)___ivy_choose(0,"loc:p",16529);
    loc__p.cppstyle = (bool)___ivy_choose(0,"loc:p",16529);
                {
                    loc__p = loc__0;
                    loc__p.cppstyle = true;
                    ext__cpp__prog__encode(e, loc__p, 0);
                    ext__pretty__flush(loc__p);
                    s = loc__p.output;
                }
            }
        }
    }
    return s;
}
ivyc_s1::cpp__stmt ivyc_s1::ext__ivy__whilest__to_cpp(const ivy__whilest& s, ivy__tocppst& st){
    ivyc_s1::cpp__stmt resd;
    {
        {
            cpp__whilest loc__res;
            {
                loc__res.ann = s.ann;
                {
                    ivy__app self__COLON__ivy__app;
                    if (((s.cond).tag == 1)) self__COLON__ivy__app = ivyc_s1::ivy__expr::unwrap< ivyc_s1::ivy__app >(s.cond);
                    if(((s.cond).tag == 1)){
                        loc__res.cond = ext__ivy__app__to_cpp(self__COLON__ivy__app, st);
                    }
                    else {
                        {
                            ivy__symbol self__COLON__ivy__symbol;
                            if (((s.cond).tag == 0)) self__COLON__ivy__symbol = ivyc_s1::ivy__expr::unwrap< ivyc_s1::ivy__symbol >(s.cond);
                            if(((s.cond).tag == 0)){
                                loc__res.cond = ext__ivy__symbol__to_cpp(self__COLON__ivy__symbol, st);
                            }
                            else {
                                loc__res.cond = ext__ivy__expr__to_cpp(s.cond, st);
                            }
                        }
                    }
                }
                {
                    vector__cpp__stmt__ loc__code;
                    {
                        loc__code = st.code;
                        st.code = ext__vector__cpp__stmt____empty();
                        {
                            ivy__varst self__COLON__ivy__varst;
                            if (((s.body).tag == 6)) self__COLON__ivy__varst = ivyc_s1::ivy__stmt::unwrap< ivyc_s1::ivy__varst >(s.body);
                            if(((s.body).tag == 6)){
                                loc__res.body = ext__ivy__varst__to_cpp(self__COLON__ivy__varst, st);
                            }
                            else {
                                {
                                    ivy__whilest self__COLON__ivy__whilest;
                                    if (((s.body).tag == 4)) self__COLON__ivy__whilest = ivyc_s1::ivy__stmt::unwrap< ivyc_s1::ivy__whilest >(s.body);
                                    if(((s.body).tag == 4)){
                                        loc__res.body = ext__ivy__whilest__to_cpp(self__COLON__ivy__whilest, st);
                                    }
                                    else {
                                        {
                                            ivy__ifst self__COLON__ivy__ifst;
                                            if (((s.body).tag == 3)) self__COLON__ivy__ifst = ivyc_s1::ivy__stmt::unwrap< ivyc_s1::ivy__ifst >(s.body);
                                            if(((s.body).tag == 3)){
                                                loc__res.body = ext__ivy__ifst__to_cpp(self__COLON__ivy__ifst, st);
                                            }
                                            else {
                                                {
                                                    ivy__skipst self__COLON__ivy__skipst;
                                                    if (((s.body).tag == 2)) self__COLON__ivy__skipst = ivyc_s1::ivy__stmt::unwrap< ivyc_s1::ivy__skipst >(s.body);
                                                    if(((s.body).tag == 2)){
                                                        loc__res.body = ext__ivy__skipst__to_cpp(self__COLON__ivy__skipst, st);
                                                    }
                                                    else {
                                                        {
                                                            ivy__sequence self__COLON__ivy__sequence;
                                                            if (((s.body).tag == 1)) self__COLON__ivy__sequence = ivyc_s1::ivy__stmt::unwrap< ivyc_s1::ivy__sequence >(s.body);
                                                            if(((s.body).tag == 1)){
                                                                loc__res.body = ext__ivy__sequence__to_cpp(self__COLON__ivy__sequence, st);
                                                            }
                                                            else {
                                                                {
                                                                    ivy__asgn self__COLON__ivy__asgn;
                                                                    if (((s.body).tag == 0)) self__COLON__ivy__asgn = ivyc_s1::ivy__stmt::unwrap< ivyc_s1::ivy__asgn >(s.body);
                                                                    if(((s.body).tag == 0)){
                                                                        loc__res.body = ext__ivy__asgn__to_cpp(self__COLON__ivy__asgn, st);
                                                                    }
                                                                    else {
                                                                        loc__res.body = ext__ivy__stmt__to_cpp(s.body, st);
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                        if((0 < vector__cpp__stmt____end(loc__code))){
                            {
                                st.code = loc__code;
                                {
                                    ivyc_s1::cpp__expr loc__0;
                                    {
                                        loc__0 = ext__cpp__not__make(loc__res.cond, s.ann);
                                        {
                                            ivyc_s1::cpp__expr loc__brkcond;
                                            {
                                                loc__brkcond = loc__0;
                                                {
                                                    ivyc_s1::cpp__stmt loc__0;
                                                    {
                                                        loc__0 = ext__cpp__breakst__make(s.ann);
                                                        {
                                                            ivyc_s1::cpp__stmt loc__brkif;
                                                            {
                                                                loc__brkif = loc__0;
                                                                {
                                                                    ivyc_s1::cpp__stmt loc__0;
                                                                    {
                                                                        loc__0 = ext__cpp__skipst__make(s.ann);
                                                                        {
                                                                            ivyc_s1::cpp__stmt loc__brkelse;
                                                                            {
                                                                                loc__brkelse = loc__0;
                                                                                {
                                                                                    ivyc_s1::cpp__stmt loc__0;
                                                                                    {
                                                                                        loc__0 = ext__cpp__ifst__make(loc__brkcond, loc__brkif, loc__brkelse, s.ann);
                                                                                        {
                                                                                            ivyc_s1::cpp__stmt loc__brkst;
                                                                                            {
                                                                                                loc__brkst = loc__0;
                                                                                                ext__ivy__tocppst__add_stmt(st, loc__brkst);
                                                                                                loc__res.cond = ext__cpp__symbol__makestr(__lit<str>("true"), s.ann);
                                                                                                ext__ivy__tocppst__wrap_stmt(st, loc__res.body, s.ann, loc__res.body);
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                        resd = ivyc_s1::cpp__stmt(4, new ivyc_s1::cpp__stmt::twrap<ivyc_s1::cpp__whilest>(loc__res));
                        ext__ivy__tocppst__wrap_stmt(st, resd, s.ann, resd);
                    }
                }
            }
        }
    }
    return resd;
}
void ivyc_s1::ext__ivy__moduledc__defd(const ivy__moduledc& s, ivy__flatst& st){
    {
        {
            ivyc_s1::ivy__expr loc__name;
            {
                st.defining = true;
                {
                    ivy__app self__COLON__ivy__app;
                    if (((s.name).tag == 1)) self__COLON__ivy__app = ivyc_s1::ivy__expr::unwrap< ivyc_s1::ivy__app >(s.name);
                    if(((s.name).tag == 1)){
                        loc__name = ext__ivy__app__flat(self__COLON__ivy__app, st);
                    }
                    else {
                        {
                            ivy__symbol self__COLON__ivy__symbol;
                            if (((s.name).tag == 0)) self__COLON__ivy__symbol = ivyc_s1::ivy__expr::unwrap< ivyc_s1::ivy__symbol >(s.name);
                            if(((s.name).tag == 0)){
                                loc__name = ext__ivy__symbol__flat(self__COLON__ivy__symbol, st);
                            }
                            else {
                                loc__name = ext__ivy__expr__flat(s.name, st);
                            }
                        }
                    }
                }
                st.defining = false;
                {
                    ivyc_s1::ivy__ident loc__0;
                    {
                        {
                            ivy__symbol self__COLON__ivy__symbol;
                            if (((loc__name).tag == 0)) self__COLON__ivy__symbol = ivyc_s1::ivy__expr::unwrap< ivyc_s1::ivy__symbol >(loc__name);
                            if(((loc__name).tag == 0)){
                                loc__0 = ext__ivy__symbol__get_name(self__COLON__ivy__symbol);
                            }
                            else {
                                loc__0 = ext__ivy__expr__get_name(loc__name);
                            }
                        }
                        ext__ivy__ident_to_moduledc__set(st.moddecls, loc__0, s);
                    }
                }
                ext__ivy__add_def(s.name, st, false);
            }
        }
    }
}
void ivyc_s1::ext__ivy__prog__flat(ivy__prog& p){
    {
        {
            ivy__flatst loc__st;
    loc__st.has_root = (bool)___ivy_choose(0,"loc:st",16542);
    loc__st.defining = (bool)___ivy_choose(0,"loc:st",16542);
    loc__st.absolute = (bool)___ivy_choose(0,"loc:st",16542);
    loc__st.dot_rhs = (bool)___ivy_choose(0,"loc:st",16542);
    loc__st.no_undefined = (bool)___ivy_choose(0,"loc:st",16542);
            {
                {
                    unsigned long long loc__idx;
    loc__idx = (unsigned long long)___ivy_choose(0,"loc:idx",16541);
                    {
                        loc__idx = vector__ivy__decl____begin(p.decls);
                        while((loc__idx < vector__ivy__decl____end(p.decls))){
                            {
                                {
                                    ivy__instancedc self__COLON__ivy__instancedc;
                                    if (((vector__ivy__decl____value(p.decls,loc__idx)).tag == 10)) self__COLON__ivy__instancedc = ivyc_s1::ivy__decl::unwrap< ivyc_s1::ivy__instancedc >(vector__ivy__decl____value(p.decls,loc__idx));
                                    if(((vector__ivy__decl____value(p.decls,loc__idx)).tag == 10)){
                                        ext__ivy__instancedc__defd(self__COLON__ivy__instancedc, loc__st);
                                    }
                                    else {
                                        {
                                            ivy__objectdc self__COLON__ivy__objectdc;
                                            if (((vector__ivy__decl____value(p.decls,loc__idx)).tag == 9)) self__COLON__ivy__objectdc = ivyc_s1::ivy__decl::unwrap< ivyc_s1::ivy__objectdc >(vector__ivy__decl____value(p.decls,loc__idx));
                                            if(((vector__ivy__decl____value(p.decls,loc__idx)).tag == 9)){
                                                ext__ivy__objectdc__defd(self__COLON__ivy__objectdc, loc__st);
                                            }
                                            else {
                                                {
                                                    ivy__instantiatedc self__COLON__ivy__instantiatedc;
                                                    if (((vector__ivy__decl____value(p.decls,loc__idx)).tag == 8)) self__COLON__ivy__instantiatedc = ivyc_s1::ivy__decl::unwrap< ivyc_s1::ivy__instantiatedc >(vector__ivy__decl____value(p.decls,loc__idx));
                                                    if(((vector__ivy__decl____value(p.decls,loc__idx)).tag == 8)){
                                                        ext__ivy__instantiatedc__defd(self__COLON__ivy__instantiatedc, loc__st);
                                                    }
                                                    else {
                                                        {
                                                            ivy__moduledc self__COLON__ivy__moduledc;
                                                            if (((vector__ivy__decl____value(p.decls,loc__idx)).tag == 7)) self__COLON__ivy__moduledc = ivyc_s1::ivy__decl::unwrap< ivyc_s1::ivy__moduledc >(vector__ivy__decl____value(p.decls,loc__idx));
                                                            if(((vector__ivy__decl____value(p.decls,loc__idx)).tag == 7)){
                                                                ext__ivy__moduledc__defd(self__COLON__ivy__moduledc, loc__st);
                                                            }
                                                            else {
                                                                {
                                                                    ivy__vardc self__COLON__ivy__vardc;
                                                                    if (((vector__ivy__decl____value(p.decls,loc__idx)).tag == 3)) self__COLON__ivy__vardc = ivyc_s1::ivy__decl::unwrap< ivyc_s1::ivy__vardc >(vector__ivy__decl____value(p.decls,loc__idx));
                                                                    if(((vector__ivy__decl____value(p.decls,loc__idx)).tag == 3)){
                                                                        ext__ivy__vardc__defd(self__COLON__ivy__vardc, loc__st);
                                                                    }
                                                                    else {
                                                                        {
                                                                            ivy__typedc self__COLON__ivy__typedc;
                                                                            if (((vector__ivy__decl____value(p.decls,loc__idx)).tag == 2)) self__COLON__ivy__typedc = ivyc_s1::ivy__decl::unwrap< ivyc_s1::ivy__typedc >(vector__ivy__decl____value(p.decls,loc__idx));
                                                                            if(((vector__ivy__decl____value(p.decls,loc__idx)).tag == 2)){
                                                                                ext__ivy__typedc__defd(self__COLON__ivy__typedc, loc__st);
                                                                            }
                                                                            else {
                                                                                {
                                                                                    ivy__groupdc self__COLON__ivy__groupdc;
                                                                                    if (((vector__ivy__decl____value(p.decls,loc__idx)).tag == 1)) self__COLON__ivy__groupdc = ivyc_s1::ivy__decl::unwrap< ivyc_s1::ivy__groupdc >(vector__ivy__decl____value(p.decls,loc__idx));
                                                                                    if(((vector__ivy__decl____value(p.decls,loc__idx)).tag == 1)){
                                                                                        ext__ivy__groupdc__defd(self__COLON__ivy__groupdc, loc__st);
                                                                                    }
                                                                                    else {
                                                                                        {
                                                                                            ivy__actdc self__COLON__ivy__actdc;
                                                                                            if (((vector__ivy__decl____value(p.decls,loc__idx)).tag == 0)) self__COLON__ivy__actdc = ivyc_s1::ivy__decl::unwrap< ivyc_s1::ivy__actdc >(vector__ivy__decl____value(p.decls,loc__idx));
                                                                                            if(((vector__ivy__decl____value(p.decls,loc__idx)).tag == 0)){
                                                                                                ext__ivy__actdc__defd(self__COLON__ivy__actdc, loc__st);
                                                                                            }
                                                                                            else {
                                                                                                ext__ivy__decl__defd(vector__ivy__decl____value(p.decls,loc__idx), loc__st);
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                                loc__idx = ext__vector__ivy__decl____domain__next(loc__idx);
                            }
                        }
                        loc__idx = vector__ivy__decl____begin(p.decls);
                        while((loc__idx < vector__ivy__decl____end(p.decls))){
                            {
                                {
                                    ivy__initdc self__COLON__ivy__initdc;
                                    if (((vector__ivy__decl____value(p.decls,loc__idx)).tag == 11)) self__COLON__ivy__initdc = ivyc_s1::ivy__decl::unwrap< ivyc_s1::ivy__initdc >(vector__ivy__decl____value(p.decls,loc__idx));
                                    if(((vector__ivy__decl____value(p.decls,loc__idx)).tag == 11)){
                                        ext__ivy__initdc__flat(self__COLON__ivy__initdc, loc__st);
                                    }
                                    else {
                                        {
                                            ivy__instancedc self__COLON__ivy__instancedc;
                                            if (((vector__ivy__decl____value(p.decls,loc__idx)).tag == 10)) self__COLON__ivy__instancedc = ivyc_s1::ivy__decl::unwrap< ivyc_s1::ivy__instancedc >(vector__ivy__decl____value(p.decls,loc__idx));
                                            if(((vector__ivy__decl____value(p.decls,loc__idx)).tag == 10)){
                                                ext__ivy__instancedc__flat(self__COLON__ivy__instancedc, loc__st);
                                            }
                                            else {
                                                {
                                                    ivy__objectdc self__COLON__ivy__objectdc;
                                                    if (((vector__ivy__decl____value(p.decls,loc__idx)).tag == 9)) self__COLON__ivy__objectdc = ivyc_s1::ivy__decl::unwrap< ivyc_s1::ivy__objectdc >(vector__ivy__decl____value(p.decls,loc__idx));
                                                    if(((vector__ivy__decl____value(p.decls,loc__idx)).tag == 9)){
                                                        ext__ivy__objectdc__flat(self__COLON__ivy__objectdc, loc__st);
                                                    }
                                                    else {
                                                        {
                                                            ivy__instantiatedc self__COLON__ivy__instantiatedc;
                                                            if (((vector__ivy__decl____value(p.decls,loc__idx)).tag == 8)) self__COLON__ivy__instantiatedc = ivyc_s1::ivy__decl::unwrap< ivyc_s1::ivy__instantiatedc >(vector__ivy__decl____value(p.decls,loc__idx));
                                                            if(((vector__ivy__decl____value(p.decls,loc__idx)).tag == 8)){
                                                                ext__ivy__instantiatedc__flat(self__COLON__ivy__instantiatedc, loc__st);
                                                            }
                                                            else {
                                                                {
                                                                    ivy__interpdc self__COLON__ivy__interpdc;
                                                                    if (((vector__ivy__decl____value(p.decls,loc__idx)).tag == 5)) self__COLON__ivy__interpdc = ivyc_s1::ivy__decl::unwrap< ivyc_s1::ivy__interpdc >(vector__ivy__decl____value(p.decls,loc__idx));
                                                                    if(((vector__ivy__decl____value(p.decls,loc__idx)).tag == 5)){
                                                                        ext__ivy__interpdc__flat(self__COLON__ivy__interpdc, loc__st);
                                                                    }
                                                                    else {
                                                                        {
                                                                            ivy__header self__COLON__ivy__header;
                                                                            if (((vector__ivy__decl____value(p.decls,loc__idx)).tag == 4)) self__COLON__ivy__header = ivyc_s1::ivy__decl::unwrap< ivyc_s1::ivy__header >(vector__ivy__decl____value(p.decls,loc__idx));
                                                                            if(((vector__ivy__decl____value(p.decls,loc__idx)).tag == 4)){
                                                                                ext__ivy__header__flat(self__COLON__ivy__header, loc__st);
                                                                            }
                                                                            else {
                                                                                {
                                                                                    ivy__vardc self__COLON__ivy__vardc;
                                                                                    if (((vector__ivy__decl____value(p.decls,loc__idx)).tag == 3)) self__COLON__ivy__vardc = ivyc_s1::ivy__decl::unwrap< ivyc_s1::ivy__vardc >(vector__ivy__decl____value(p.decls,loc__idx));
                                                                                    if(((vector__ivy__decl____value(p.decls,loc__idx)).tag == 3)){
                                                                                        ext__ivy__vardc__flat(self__COLON__ivy__vardc, loc__st);
                                                                                    }
                                                                                    else {
                                                                                        {
                                                                                            ivy__typedc self__COLON__ivy__typedc;
                                                                                            if (((vector__ivy__decl____value(p.decls,loc__idx)).tag == 2)) self__COLON__ivy__typedc = ivyc_s1::ivy__decl::unwrap< ivyc_s1::ivy__typedc >(vector__ivy__decl____value(p.decls,loc__idx));
                                                                                            if(((vector__ivy__decl____value(p.decls,loc__idx)).tag == 2)){
                                                                                                ext__ivy__typedc__flat(self__COLON__ivy__typedc, loc__st);
                                                                                            }
                                                                                            else {
                                                                                                {
                                                                                                    ivy__groupdc self__COLON__ivy__groupdc;
                                                                                                    if (((vector__ivy__decl____value(p.decls,loc__idx)).tag == 1)) self__COLON__ivy__groupdc = ivyc_s1::ivy__decl::unwrap< ivyc_s1::ivy__groupdc >(vector__ivy__decl____value(p.decls,loc__idx));
                                                                                                    if(((vector__ivy__decl____value(p.decls,loc__idx)).tag == 1)){
                                                                                                        ext__ivy__groupdc__flat(self__COLON__ivy__groupdc, loc__st);
                                                                                                    }
                                                                                                    else {
                                                                                                        {
                                                                                                            ivy__actdc self__COLON__ivy__actdc;
                                                                                                            if (((vector__ivy__decl____value(p.decls,loc__idx)).tag == 0)) self__COLON__ivy__actdc = ivyc_s1::ivy__decl::unwrap< ivyc_s1::ivy__actdc >(vector__ivy__decl____value(p.decls,loc__idx));
                                                                                                            if(((vector__ivy__decl____value(p.decls,loc__idx)).tag == 0)){
                                                                                                                ext__ivy__actdc__flat(self__COLON__ivy__actdc, loc__st);
                                                                                                            }
                                                                                                            else {
                                                                                                                ext__ivy__decl__flat(vector__ivy__decl____value(p.decls,loc__idx), loc__st);
                                                                                                            }
                                                                                                        }
                                                                                                    }
                                                                                                }
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                                loc__idx = ext__vector__ivy__decl____domain__next(loc__idx);
                            }
                        }
                        p.decls = loc__st.decls;
                    }
                }
            }
        }
    }
}
void ivyc_s1::ext__ivy__auto_flat(ivyc_s1::ivy__expr s, ivy__flatst& st){
    {
        bool loc__0;
    loc__0 = (bool)___ivy_choose(0,"loc:0",16544);
        {
            {
                ivy__app self__COLON__ivy__app;
                if (((s).tag == 1)) self__COLON__ivy__app = ivyc_s1::ivy__expr::unwrap< ivyc_s1::ivy__app >(s);
                if(((s).tag == 1)){
                    loc__0 = ext__ivy__app__is(self__COLON__ivy__app, ivy__verb__colon);
                }
                else {
                    loc__0 = ext__ivy__expr__is(s, ivy__verb__colon);
                }
            }
            if(loc__0){
                {
                    {
                        ivyc_s1::ivy__expr loc__0;
                        {
                            {
                                ivy__app self__COLON__ivy__app;
                                if (((s).tag == 1)) self__COLON__ivy__app = ivyc_s1::ivy__expr::unwrap< ivyc_s1::ivy__app >(s);
                                if(((s).tag == 1)){
                                    loc__0 = ext__ivy__app__get_arg(self__COLON__ivy__app, 1);
                                }
                                else {
                                    loc__0 = ext__ivy__expr__get_arg(s, 1);
                                }
                            }
                            ext__ivy__auto_flat_rec(loc__0, st);
                        }
                    }
                }
            }
        }
    }
}
bool ivyc_s1::ext__ivy__app__is_typed(const ivy__app& s, ivy__verb vrb){
    bool res;
    res = (bool)___ivy_choose(0,"fml:res",0);
    {
        bool loc__0;
    loc__0 = (bool)___ivy_choose(0,"loc:0",16545);
        bool loc__1;
    loc__1 = (bool)___ivy_choose(0,"loc:1",16545);
        ivyc_s1::ivy__expr loc__2;
        ivy__verb loc__3;
    loc__3 = (ivy__verb)___ivy_choose(0,"loc:3",16545);
        {
            loc__0 = ext__ivy__app__is(s, vrb);
            {
                ivy__app self__COLON__ivy__app;
                if (((s.func).tag == 1)) self__COLON__ivy__app = ivyc_s1::ivy__expr::unwrap< ivyc_s1::ivy__app >(s.func);
                if(((s.func).tag == 1)){
                    loc__1 = ext__ivy__app__is(self__COLON__ivy__app, ivy__verb__colon);
                }
                else {
                    loc__1 = ext__ivy__expr__is(s.func, ivy__verb__colon);
                }
            }
            {
                ivy__app self__COLON__ivy__app;
                if (((s.func).tag == 1)) self__COLON__ivy__app = ivyc_s1::ivy__expr::unwrap< ivyc_s1::ivy__app >(s.func);
                if(((s.func).tag == 1)){
                    loc__2 = ext__ivy__app__get_arg(self__COLON__ivy__app, 0);
                }
                else {
                    loc__2 = ext__ivy__expr__get_arg(s.func, 0);
                }
            }
            {
                ivy__symbol self__COLON__ivy__symbol;
                if (((loc__2).tag == 0)) self__COLON__ivy__symbol = ivyc_s1::ivy__expr::unwrap< ivyc_s1::ivy__symbol >(loc__2);
                if(((loc__2).tag == 0)){
                    loc__3 = ext__ivy__symbol__get_verb(self__COLON__ivy__symbol);
                }
                else {
                    loc__3 = ext__ivy__expr__get_verb(loc__2);
                }
            }
            res = (loc__0 || (loc__1 && (loc__3 == vrb)));
        }
    }
    return res;
}
void ivyc_s1::ext__ivy__local_vec(const vector__ivy__expr__& es, bool val, ivy__flatst& st){
    {
        unsigned long long loc__idx;
    loc__idx = (unsigned long long)___ivy_choose(0,"loc:idx",16549);
        {
            loc__idx = vector__ivy__expr____begin(es);
            while((loc__idx < vector__ivy__expr____end(es))){
                {
                    {
                        ivyc_s1::ivy__expr loc__e;
                        {
                            loc__e = vector__ivy__expr____value(es,loc__idx);
                            {
                                ivyc_s1::ivy__ident loc__0;
                                {
                                    loc__0 = ext__ivy__formal_ident(loc__e);
                                    {
                                        ivyc_s1::ivy__ident loc__fe;
                                        {
                                            loc__fe = loc__0;
                                            if(val){
                                                {
                                                    ext__ivy__ident_set__set(st.locals, loc__fe, true);
                                                }
                                            }
                                            else {
                                                {
                                                    ext__ivy__ident_set__remove(st.locals, loc__fe);
                                                }
                                            }
                                            loc__idx = ext__vector__ivy__expr____domain__next(loc__idx);
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
    }
}
ivyc_s1::ivy__expr ivyc_s1::ext__ivy__expr__type_elide_int(ivyc_s1::ivy__expr e, bool b, const ivy__symeval& m, ivy__elidest& st){
    ivyc_s1::ivy__expr res;
    {
    }
    return res;
}
ivyc_s1::cpp__stmt ivyc_s1::ext__cpp__retst__make(ivyc_s1::cpp__expr val, ivyc_s1::annot ann){
    ivyc_s1::cpp__stmt res;
    {
        {
            cpp__retst loc__s;
            {
                loc__s.val = val;
                loc__s.ann = ann;
                res = ivyc_s1::cpp__stmt(7, new ivyc_s1::cpp__stmt::twrap<ivyc_s1::cpp__retst>(loc__s));
            }
        }
    }
    return res;
}
void ivyc_s1::ext__ivy__push_pop_ident_set__push(ivy__push_pop_ident_set& s){
    {
        ext__vector__pos____append(s.stack, ivy__push_pop_ident_set__vec_t__end(s.del));
    }
}
void ivyc_s1::ext__ivy__structspec__to_destrs(const ivy__structspec& s, ivy__flatst& st, ivyc_s1::ivy__expr ty){
    {
        unsigned long long loc__idx;
    loc__idx = (unsigned long long)___ivy_choose(0,"loc:idx",16560);
        {
            loc__idx = vector__ivy__expr____begin(s.destructors);
            while((loc__idx < vector__ivy__expr____end(s.destructors))){
                {
                    {
                        ivyc_s1::ivy__expr loc__e;
                        {
                            loc__e = vector__ivy__expr____value(s.destructors,loc__idx);
                            {
                                bool loc__old_has_root;
    loc__old_has_root = (bool)___ivy_choose(0,"loc:old_has_root",16558);
                                {
                                    loc__old_has_root = st.has_root;
                                    {
                                        ivyc_s1::ivy__ident loc__old_root;
                                        {
                                            loc__old_root = st.root;
                                            {
                                                ivy__symbol self__COLON__ivy__symbol;
                                                if (((ty).tag == 0)) self__COLON__ivy__symbol = ivyc_s1::ivy__expr::unwrap< ivyc_s1::ivy__symbol >(ty);
                                                if(((ty).tag == 0)){
                                                    st.root = ext__ivy__symbol__get_name(self__COLON__ivy__symbol);
                                                }
                                                else {
                                                    st.root = ext__ivy__expr__get_name(ty);
                                                }
                                            }
                                            st.has_root = true;
                                            {
                                                ivy__app self__COLON__ivy__app;
                                                if (((loc__e).tag == 1)) self__COLON__ivy__app = ivyc_s1::ivy__expr::unwrap< ivyc_s1::ivy__app >(loc__e);
                                                if(((loc__e).tag == 1)){
                                                    loc__e = ext__ivy__app__flat(self__COLON__ivy__app, st);
                                                }
                                                else {
                                                    {
                                                        ivy__symbol self__COLON__ivy__symbol;
                                                        if (((loc__e).tag == 0)) self__COLON__ivy__symbol = ivyc_s1::ivy__expr::unwrap< ivyc_s1::ivy__symbol >(loc__e);
                                                        if(((loc__e).tag == 0)){
                                                            loc__e = ext__ivy__symbol__flat(self__COLON__ivy__symbol, st);
                                                        }
                                                        else {
                                                            loc__e = ext__ivy__expr__flat(loc__e, st);
                                                        }
                                                    }
                                                }
                                            }
                                            st.has_root = loc__old_has_root;
                                            st.root = loc__old_root;
                                            ext__ivy__canon_typing(loc__e);
                                            {
                                                ivyc_s1::ivy__expr loc__0;
                                                ivyc_s1::annot loc__1;
                                                ivyc_s1::ivy__expr loc__2;
                                                {
                                                    {
                                                        ivy__app self__COLON__ivy__app;
                                                        if (((loc__e).tag == 1)) self__COLON__ivy__app = ivyc_s1::ivy__expr::unwrap< ivyc_s1::ivy__app >(loc__e);
                                                        if(((loc__e).tag == 1)){
                                                            loc__0 = ext__ivy__app__get_arg(self__COLON__ivy__app, 1);
                                                        }
                                                        else {
                                                            loc__0 = ext__ivy__expr__get_arg(loc__e, 1);
                                                        }
                                                    }
                                                    {
                                                        ivy__app self__COLON__ivy__app;
                                                        if (((loc__e).tag == 1)) self__COLON__ivy__app = ivyc_s1::ivy__expr::unwrap< ivyc_s1::ivy__app >(loc__e);
                                                        if(((loc__e).tag == 1)){
                                                            loc__1 = ext__ivy__app__get_ann(self__COLON__ivy__app);
                                                        }
                                                        else {
                                                            {
                                                                ivy__symbol self__COLON__ivy__symbol;
                                                                if (((loc__e).tag == 0)) self__COLON__ivy__symbol = ivyc_s1::ivy__expr::unwrap< ivyc_s1::ivy__symbol >(loc__e);
                                                                if(((loc__e).tag == 0)){
                                                                    loc__1 = ext__ivy__symbol__get_ann(self__COLON__ivy__symbol);
                                                                }
                                                                else {
                                                                    loc__1 = ext__ivy__expr__get_ann(loc__e);
                                                                }
                                                            }
                                                        }
                                                    }
                                                    loc__2 = ext__ivy__arrow__make(ty, loc__0, loc__1);
                                                    {
                                                        ivyc_s1::ivy__expr loc__fty;
                                                        {
                                                            loc__fty = loc__2;
                                                            {
                                                                ivyc_s1::ivy__expr loc__0;
                                                                ivyc_s1::ivy__expr loc__1;
                                                                ivyc_s1::annot loc__2;
                                                                ivyc_s1::ivy__expr loc__3;
                                                                {
                                                                    {
                                                                        ivy__app self__COLON__ivy__app;
                                                                        if (((loc__e).tag == 1)) self__COLON__ivy__app = ivyc_s1::ivy__expr::unwrap< ivyc_s1::ivy__app >(loc__e);
                                                                        if(((loc__e).tag == 1)){
                                                                            loc__0 = ext__ivy__app__get_arg(self__COLON__ivy__app, 0);
                                                                        }
                                                                        else {
                                                                            loc__0 = ext__ivy__expr__get_arg(loc__e, 0);
                                                                        }
                                                                    }
                                                                    loc__1 = ext__ivy__expr__uncurry(loc__fty);
                                                                    {
                                                                        ivy__app self__COLON__ivy__app;
                                                                        if (((loc__e).tag == 1)) self__COLON__ivy__app = ivyc_s1::ivy__expr::unwrap< ivyc_s1::ivy__app >(loc__e);
                                                                        if(((loc__e).tag == 1)){
                                                                            loc__2 = ext__ivy__app__get_ann(self__COLON__ivy__app);
                                                                        }
                                                                        else {
                                                                            {
                                                                                ivy__symbol self__COLON__ivy__symbol;
                                                                                if (((loc__e).tag == 0)) self__COLON__ivy__symbol = ivyc_s1::ivy__expr::unwrap< ivyc_s1::ivy__symbol >(loc__e);
                                                                                if(((loc__e).tag == 0)){
                                                                                    loc__2 = ext__ivy__symbol__get_ann(self__COLON__ivy__symbol);
                                                                                }
                                                                                else {
                                                                                    loc__2 = ext__ivy__expr__get_ann(loc__e);
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                    loc__3 = ext__ivy__colon__make(loc__0, loc__1, loc__2);
                                                                    {
                                                                        ivyc_s1::ivy__expr loc__typing;
                                                                        {
                                                                            loc__typing = loc__3;
                                                                            {
                                                                                ivyc_s1::annot loc__0;
                                                                                ivyc_s1::ivy__decl loc__1;
                                                                                {
                                                                                    {
                                                                                        ivy__app self__COLON__ivy__app;
                                                                                        if (((loc__e).tag == 1)) self__COLON__ivy__app = ivyc_s1::ivy__expr::unwrap< ivyc_s1::ivy__app >(loc__e);
                                                                                        if(((loc__e).tag == 1)){
                                                                                            loc__0 = ext__ivy__app__get_ann(self__COLON__ivy__app);
                                                                                        }
                                                                                        else {
                                                                                            {
                                                                                                ivy__symbol self__COLON__ivy__symbol;
                                                                                                if (((loc__e).tag == 0)) self__COLON__ivy__symbol = ivyc_s1::ivy__expr::unwrap< ivyc_s1::ivy__symbol >(loc__e);
                                                                                                if(((loc__e).tag == 0)){
                                                                                                    loc__0 = ext__ivy__symbol__get_ann(self__COLON__ivy__symbol);
                                                                                                }
                                                                                                else {
                                                                                                    loc__0 = ext__ivy__expr__get_ann(loc__e);
                                                                                                }
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                    loc__1 = ext__ivy__vardc__make(loc__typing, true, loc__0);
                                                                                    {
                                                                                        ivyc_s1::ivy__decl loc__dstr;
                                                                                        {
                                                                                            loc__dstr = loc__1;
                                                                                            ext__vector__ivy__decl____append(st.decls, loc__dstr);
                                                                                            loc__idx = ext__vector__ivy__expr____domain__next(loc__idx);
                                                                                        }
                                                                                    }
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
    }
}
ivyc_s1::ivy__expr ivyc_s1::ext__ivy__app__make(ivyc_s1::ivy__expr func, const vector__ivy__expr__& args, ivyc_s1::annot ann){
    ivyc_s1::ivy__expr res;
    {
        ivy__app loc__s;
        {
            loc__s.func = func;
            loc__s.args = args;
            loc__s.ann = ann;
            res = ivyc_s1::ivy__expr(1, new ivyc_s1::ivy__expr::twrap<ivyc_s1::ivy__app>(loc__s));
        }
    }
    return res;
}
void ivyc_s1::ext__vector__ivy__expr____extend(vector__ivy__expr__& a, const vector__ivy__expr__& b){
    {

        for (unsigned i = 0; i < b.size(); i++)
            a.push_back(b[i]);
    }
}
void ivyc_s1::ext__ivy__interpdc__reg_member(const ivy__interpdc& s, ivy__tocppst& st){
    {
        {
            ivyc_s1::ivy__ident loc__0;
            {
                {
                    ivy__symbol self__COLON__ivy__symbol;
                    if (((s.itype).tag == 0)) self__COLON__ivy__symbol = ivyc_s1::ivy__expr::unwrap< ivyc_s1::ivy__symbol >(s.itype);
                    if(((s.itype).tag == 0)){
                        loc__0 = ext__ivy__symbol__get_name(self__COLON__ivy__symbol);
                    }
                    else {
                        loc__0 = ext__ivy__expr__get_name(s.itype);
                    }
                }
                ext__ivy__ident_to_cppclass__set(st.cppclasses, loc__0, s.ctype);
            }
        }
    }
}
void ivyc_s1::ext__ivy__decost__typeinf_show_str(const str& s){
    imp__ivy__decost__typeinf_show_str(s);
}
ivyc_s1::str ivyc_s1::ext__ivy__strident__to_str(const ivy__strident& s){
    ivyc_s1::str b;
    {
        b = s.val;
        if(false){
            if((0 < vector__ivy__ident____end(s.subscrs))){
                {
                    ext__str__extend(b, __lit<str>("< "));
                    {
                        unsigned long long loc__idx;
    loc__idx = (unsigned long long)___ivy_choose(0,"loc:idx",16564);
                        {
                            loc__idx = vector__ivy__ident____begin(s.subscrs);
                            while((loc__idx < vector__ivy__ident____end(s.subscrs))){
                                {
                                    if((0 < loc__idx)){
                                        {
                                            ext__str__extend(b, __lit<str>(","));
                                        }
                                    }
                                    {
                                        str loc__0;
                                        {
                                            {
                                                ivy__dotident self__COLON__ivy__dotident;
                                                if (((vector__ivy__ident____value(s.subscrs,loc__idx)).tag == 2)) self__COLON__ivy__dotident = ivyc_s1::ivy__ident::unwrap< ivyc_s1::ivy__dotident >(vector__ivy__ident____value(s.subscrs,loc__idx));
                                                if(((vector__ivy__ident____value(s.subscrs,loc__idx)).tag == 2)){
                                                    loc__0 = ext__ivy__dotident__to_str(self__COLON__ivy__dotident);
                                                }
                                                else {
                                                    {
                                                        ivy__strident self__COLON__ivy__strident;
                                                        if (((vector__ivy__ident____value(s.subscrs,loc__idx)).tag == 0)) self__COLON__ivy__strident = ivyc_s1::ivy__ident::unwrap< ivyc_s1::ivy__strident >(vector__ivy__ident____value(s.subscrs,loc__idx));
                                                        if(((vector__ivy__ident____value(s.subscrs,loc__idx)).tag == 0)){
                                                            loc__0 = ext__ivy__strident__to_str(self__COLON__ivy__strident);
                                                        }
                                                        else {
                                                            loc__0 = ext__ivy__ident__to_str(vector__ivy__ident____value(s.subscrs,loc__idx));
                                                        }
                                                    }
                                                }
                                            }
                                            ext__str__extend(b, loc__0);
                                        }
                                    }
                                    loc__idx = ext__vector__ivy__ident____domain__next(loc__idx);
                                }
                            }
                            ext__str__extend(b, __lit<str>(" >"));
                        }
                    }
                }
            }
        }
        else {
            {
                unsigned long long loc__idx;
    loc__idx = (unsigned long long)___ivy_choose(0,"loc:idx",16566);
                {
                    loc__idx = vector__ivy__ident____begin(s.subscrs);
                    while((loc__idx < vector__ivy__ident____end(s.subscrs))){
                        {
                            ext__str__extend(b, __lit<str>("["));
                            {
                                str loc__0;
                                {
                                    {
                                        ivy__dotident self__COLON__ivy__dotident;
                                        if (((vector__ivy__ident____value(s.subscrs,loc__idx)).tag == 2)) self__COLON__ivy__dotident = ivyc_s1::ivy__ident::unwrap< ivyc_s1::ivy__dotident >(vector__ivy__ident____value(s.subscrs,loc__idx));
                                        if(((vector__ivy__ident____value(s.subscrs,loc__idx)).tag == 2)){
                                            loc__0 = ext__ivy__dotident__to_str(self__COLON__ivy__dotident);
                                        }
                                        else {
                                            {
                                                ivy__strident self__COLON__ivy__strident;
                                                if (((vector__ivy__ident____value(s.subscrs,loc__idx)).tag == 0)) self__COLON__ivy__strident = ivyc_s1::ivy__ident::unwrap< ivyc_s1::ivy__strident >(vector__ivy__ident____value(s.subscrs,loc__idx));
                                                if(((vector__ivy__ident____value(s.subscrs,loc__idx)).tag == 0)){
                                                    loc__0 = ext__ivy__strident__to_str(self__COLON__ivy__strident);
                                                }
                                                else {
                                                    loc__0 = ext__ivy__ident__to_str(vector__ivy__ident____value(s.subscrs,loc__idx));
                                                }
                                            }
                                        }
                                    }
                                    ext__str__extend(b, loc__0);
                                }
                            }
                            ext__str__extend(b, __lit<str>("]"));
                            loc__idx = ext__vector__ivy__ident____domain__next(loc__idx);
                        }
                    }
                }
            }
        }
    }
    return b;
}
ivyc_s1::vector__ivy__ident__ ivyc_s1::ext__ivy__setup_local_vars(ivyc_s1::ivy__stmt s, ivy__flatst& st){
    ivyc_s1::vector__ivy__ident__ del;
    {
        ivyc_s1::ivy__expr loc__0;
        {
            {
                ivy__asgn self__COLON__ivy__asgn;
                if (((s).tag == 0)) self__COLON__ivy__asgn = ivyc_s1::ivy__stmt::unwrap< ivyc_s1::ivy__asgn >(s);
                if(((s).tag == 0)){
                    loc__0 = ext__ivy__asgn__get_lhs(self__COLON__ivy__asgn);
                }
                else {
                    loc__0 = ext__ivy__stmt__get_lhs(s);
                }
            }
            {
                ivyc_s1::ivy__expr loc__alhs;
                {
                    loc__alhs = loc__0;
                    {
                        vector__ivy__expr__ loc__0;
                        {
                            loc__0 = ext__ivy__comma__unfold_left(loc__alhs);
                            {
                                vector__ivy__expr__ loc__lhs;
                                {
                                    loc__lhs = loc__0;
                                    {
                                        unsigned long long loc__idx;
    loc__idx = (unsigned long long)___ivy_choose(0,"loc:idx",16382);
                                        {
                                            loc__idx = vector__ivy__expr____begin(loc__lhs);
                                            while((loc__idx < vector__ivy__expr____end(loc__lhs))){
                                                {
                                                    ivyc_s1::ivy__expr loc__e;
                                                    {
                                                        loc__e = vector__ivy__expr____value(loc__lhs,loc__idx);
                                                        {
                                                            bool loc__0;
    loc__0 = (bool)___ivy_choose(0,"loc:0",16380);
                                                            {
                                                                {
                                                                    ivy__app self__COLON__ivy__app;
                                                                    if (((loc__e).tag == 1)) self__COLON__ivy__app = ivyc_s1::ivy__expr::unwrap< ivyc_s1::ivy__app >(loc__e);
                                                                    if(((loc__e).tag == 1)){
                                                                        loc__0 = ext__ivy__app__is(self__COLON__ivy__app, ivy__verb__varv);
                                                                    }
                                                                    else {
                                                                        loc__0 = ext__ivy__expr__is(loc__e, ivy__verb__varv);
                                                                    }
                                                                }
                                                                if(loc__0){
                                                                    {
                                                                        ivyc_s1::ivy__expr loc__0;
                                                                        ivyc_s1::ivy__ident loc__1;
                                                                        {
                                                                            {
                                                                                ivy__app self__COLON__ivy__app;
                                                                                if (((loc__e).tag == 1)) self__COLON__ivy__app = ivyc_s1::ivy__expr::unwrap< ivyc_s1::ivy__app >(loc__e);
                                                                                if(((loc__e).tag == 1)){
                                                                                    loc__0 = ext__ivy__app__get_arg(self__COLON__ivy__app, 0);
                                                                                }
                                                                                else {
                                                                                    loc__0 = ext__ivy__expr__get_arg(loc__e, 0);
                                                                                }
                                                                            }
                                                                            loc__1 = ext__ivy__formal_ident(loc__0);
                                                                            {
                                                                                ivyc_s1::ivy__ident loc__id;
                                                                                {
                                                                                    loc__id = loc__1;
                                                                                    {
                                                                                        bool loc__0;
    loc__0 = (bool)___ivy_choose(0,"loc:0",16377);
                                                                                        {
                                                                                            loc__0 = ext__ivy__ident_set__mem(st.locals, loc__id);
                                                                                            if(!loc__0){
                                                                                                {
                                                                                                    ext__vector__ivy__ident____append(del, loc__id);
                                                                                                    ext__ivy__ident_set__set(st.locals, loc__id, true);
                                                                                                }
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                        loc__idx = ext__vector__ivy__expr____domain__next(loc__idx);
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
    }
    return del;
}
ivyc_s1::str ivyc_s1::ext__env__get(const str& name){
    ivyc_s1::str res;

    std::string tmp;
    tmp.resize(name.size());
    std::copy(name.begin(),name.end(),tmp.begin());
    char *val = ::getenv(tmp.c_str());
    if (val) {
        tmp = val;
        res.resize(tmp.size());
        std::copy(tmp.begin(),tmp.end(),res.begin());
    }
    return res;
}
void ivyc_s1::ext__pretty__nest(pretty& self){
    {
        vector__pos__ __tmp67;
        __tmp67 = self.stack; ext__vector__pos____append(__tmp67, self.space);
        self.stack = __tmp67;
        vector__pretty__state__ __tmp68;
        __tmp68 = self.states; ext__vector__pretty__state____append(__tmp68, self.st);
        self.states = __tmp68;
        self.st.total = 0;
        self.st.begin = vector__pretty__token____end(self.tokens);
        self.depth = (self.depth + 1);
    }
}
bool ivyc_s1::ext__ivy__interpdc__emitted(const ivy__interpdc& s, const ivy__tocppst& st){
    bool res;
    res = (bool)___ivy_choose(0,"fml:res",0);
    {
        res = false;
    }
    return res;
}
ivyc_s1::cpp__verb ivyc_s1::ext__cpp__expr__get_verb(ivyc_s1::cpp__expr s){
    ivyc_s1::cpp__verb vrb;
    vrb = (cpp__verb)___ivy_choose(0,"fml:vrb",0);
    {
        vrb = cpp__verb__none;
    }
    return vrb;
}
ivyc_s1::ivy__expr ivyc_s1::ext__ivy__symbol__makenum(unsigned long long num, ivyc_s1::annot ann){
    ivyc_s1::ivy__expr res;
    {
        ivy__symbol loc__s;
    loc__s.vrb = (ivy__verb)___ivy_choose(0,"loc:s",16567);
        {
            loc__s.name = ext__ivy__numident__make(num);
            loc__s.vrb = ivy__verb__none;
            loc__s.ann = ann;
            res = ivyc_s1::ivy__expr(0, new ivyc_s1::ivy__expr::twrap<ivyc_s1::ivy__symbol>(loc__s));
        }
    }
    return res;
}
ivyc_s1::ivy__expr ivyc_s1::ext__ivy__symbol__type_decorate(const ivy__symbol& e, ivy__decost& st, const ivy__symeval& m, ivyc_s1::ivy__expr& ty){
    ivyc_s1::ivy__expr res;
    {
        if((!(e.vrb == ivy__verb__none) && !(e.vrb == ivy__verb__numeral) && !(e.vrb == ivy__verb__string) && !(e.vrb == ivy__verb__logvar) && !(e.vrb == ivy__verb__empty))){
            {
                {
                    ivy__symeval loc__mm;
                    {
                        {
                            ivyc_s1::ivy__expr loc__v;
                            {
                                ext__ivy__decost__newvar(st, e.ann, loc__v);
                                {
                                    ivyc_s1::ivy__ident loc__0;
                                    {
                                        loc__0 = ext__ivy__strident__make(__lit<str>("alpha"));
                                        ext__ivy__symeval__set(loc__mm, loc__0, loc__v);
                                    }
                                }
                                ext__ivy__decost__newvar(st, e.ann, loc__v);
                                {
                                    ivyc_s1::ivy__ident loc__0;
                                    {
                                        loc__0 = ext__ivy__strident__make(__lit<str>("beta"));
                                        ext__ivy__symeval__set(loc__mm, loc__0, loc__v);
                                    }
                                }
                                ty = ivy__optypes[e.vrb];
                                {
                                    ivy__app self__COLON__ivy__app;
                                    if (((ty).tag == 1)) self__COLON__ivy__app = ivyc_s1::ivy__expr::unwrap< ivyc_s1::ivy__app >(ty);
                                    if(((ty).tag == 1)){
                                        ty = ext__ivy__app__reduce(self__COLON__ivy__app, loc__mm);
                                    }
                                    else {
                                        {
                                            ivy__symbol self__COLON__ivy__symbol;
                                            if (((ty).tag == 0)) self__COLON__ivy__symbol = ivyc_s1::ivy__expr::unwrap< ivyc_s1::ivy__symbol >(ty);
                                            if(((ty).tag == 0)){
                                                ty = ext__ivy__symbol__reduce(self__COLON__ivy__symbol, loc__mm);
                                            }
                                            else {
                                                ty = ext__ivy__expr__reduce(ty, loc__mm);
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
        else {
            if(st.member){
                {
                    ext__ivy__decost__newvar(st, e.ann, ty);
                }
            }
            else {
                {
                    bool loc__0;
    loc__0 = (bool)___ivy_choose(0,"loc:0",16572);
                    {
                        loc__0 = ext__ivy__symeval__mem(st.ty, e.name);
                        if(loc__0){
                            {
                                ty = ivy__symeval__value(st.ty,e.name);
                            }
                        }
                        else {
                            {
                                ext__ivy__decost__newvar(st, e.ann, ty);
                                if(((e.vrb == ivy__verb__none) || (e.vrb == ivy__verb__logvar))){
                                    {
                                        ext__ivy__symeval__get(m, e.name, ty);
                                        ext__ivy__symeval__set(st.ty, e.name, ty);
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
        res = ext__ivy__colon__make(ivyc_s1::ivy__expr(0, new ivyc_s1::ivy__expr::twrap<ivyc_s1::ivy__symbol>(e)), ty, e.ann);
    }
    return res;
}
void ivyc_s1::ext__ivy__typedc__build_global_types(const ivy__typedc& s, ivy__global_types& st){
    if(s.has_spec){
        if(((s.spec).tag == 0)){
            {
                ivyc_s1::ivy__decl loc__foobar;
                {
                    loc__foobar = ivyc_s1::ivy__decl(2, new ivyc_s1::ivy__decl::twrap<ivyc_s1::ivy__typedc>(s));
                    {
                        vector__ivy__expr__ loc__0;
                        {
                            {
                                ivy__structspec self__COLON__ivy__structspec;
                                if (((s.spec).tag == 1)) self__COLON__ivy__structspec = ivyc_s1::ivy__typespec::unwrap< ivyc_s1::ivy__structspec >(s.spec);
                                if(((s.spec).tag == 1)){
                                    loc__0 = ext__ivy__structspec__get_elems(self__COLON__ivy__structspec);
                                }
                                else {
                                    {
                                        ivy__enumspec self__COLON__ivy__enumspec;
                                        if (((s.spec).tag == 0)) self__COLON__ivy__enumspec = ivyc_s1::ivy__typespec::unwrap< ivyc_s1::ivy__enumspec >(s.spec);
                                        if(((s.spec).tag == 0)){
                                            loc__0 = ext__ivy__enumspec__get_elems(self__COLON__ivy__enumspec);
                                        }
                                        else {
                                            loc__0 = ext__ivy__typespec__get_elems(s.spec);
                                        }
                                    }
                                }
                            }
                            {
                                vector__ivy__expr__ loc__conss;
                                {
                                    loc__conss = loc__0;
                                    {
                                        unsigned long long loc__idx;
    loc__idx = (unsigned long long)___ivy_choose(0,"loc:idx",16574);
                                        {
                                            loc__idx = vector__ivy__expr____begin(loc__conss);
                                            while((loc__idx < vector__ivy__expr____end(loc__conss))){
                                                {
                                                    {
                                                        ivyc_s1::ivy__ident loc__0;
                                                        {
                                                            {
                                                                ivy__symbol self__COLON__ivy__symbol;
                                                                if (((vector__ivy__expr____value(loc__conss,loc__idx)).tag == 0)) self__COLON__ivy__symbol = ivyc_s1::ivy__expr::unwrap< ivyc_s1::ivy__symbol >(vector__ivy__expr____value(loc__conss,loc__idx));
                                                                if(((vector__ivy__expr____value(loc__conss,loc__idx)).tag == 0)){
                                                                    loc__0 = ext__ivy__symbol__get_name(self__COLON__ivy__symbol);
                                                                }
                                                                else {
                                                                    loc__0 = ext__ivy__expr__get_name(vector__ivy__expr____value(loc__conss,loc__idx));
                                                                }
                                                            }
                                                            ext__ivy__symeval__set(st.type_of, loc__0, s.sort);
                                                        }
                                                    }
                                                    loc__idx = ext__vector__ivy__expr____domain__next(loc__idx);
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
    }
}
ivyc_s1::cpp__expr ivyc_s1::ext__cpp__app__get_func(const cpp__app& s){
    ivyc_s1::cpp__expr res;
    res = s.func;
    return res;
}
ivyc_s1::ivy__expr ivyc_s1::ext__ivy__app__type_decorate(const ivy__app& e, ivy__decost& st, const ivy__symeval& m, ivyc_s1::ivy__expr& ty){
    ivyc_s1::ivy__expr res;
    {
        ivyc_s1::ivy__expr loc__arg;
        {
            {
                ivyc_s1::ivy__expr loc__argty;
                {
                    {
                        bool loc__0;
    loc__0 = (bool)___ivy_choose(0,"loc:0",16592);
                        {
                            loc__0 = ext__ivy__app__is(e, ivy__verb__colon);
                            if(loc__0){
                                {
                                    {
                                        ivy__app self__COLON__ivy__app;
                                        if (((vector__ivy__expr____value(e.args,0)).tag == 1)) self__COLON__ivy__app = ivyc_s1::ivy__expr::unwrap< ivyc_s1::ivy__app >(vector__ivy__expr____value(e.args,0));
                                        if(((vector__ivy__expr____value(e.args,0)).tag == 1)){
                                            res = ext__ivy__app__type_decorate(self__COLON__ivy__app, st, m, loc__argty);
                                        }
                                        else {
                                            {
                                                ivy__symbol self__COLON__ivy__symbol;
                                                if (((vector__ivy__expr____value(e.args,0)).tag == 0)) self__COLON__ivy__symbol = ivyc_s1::ivy__expr::unwrap< ivyc_s1::ivy__symbol >(vector__ivy__expr____value(e.args,0));
                                                if(((vector__ivy__expr____value(e.args,0)).tag == 0)){
                                                    res = ext__ivy__symbol__type_decorate(self__COLON__ivy__symbol, st, m, loc__argty);
                                                }
                                                else {
                                                    res = ext__ivy__expr__type_decorate(vector__ivy__expr____value(e.args,0), st, m, loc__argty);
                                                }
                                            }
                                        }
                                    }
                                    ty = vector__ivy__expr____value(e.args,1);
                                    ext__ivy__decost__unify(st, loc__argty, ty);
                                    if(!st.ok){
                                        ext__ivy__type_error(ivyc_s1::ivy__expr(1, new ivyc_s1::ivy__expr::twrap<ivyc_s1::ivy__app>(e)), st);
                                    }
                                }
                            }
                            else {
                                {
                                    bool loc__0;
    loc__0 = (bool)___ivy_choose(0,"loc:0",16591);
                                    {
                                        loc__0 = ext__ivy__app__is(e, ivy__verb__dot);
                                        if(loc__0){
                                            {
                                                {
                                                    ivyc_s1::ivy__expr loc__argty;
                                                    {
                                                        {
                                                            ivyc_s1::ivy__expr loc__arg;
                                                            {
                                                                {
                                                                    ivyc_s1::ivy__expr loc__0;
                                                                    {
                                                                        loc__0 = ext__ivy__app__get_arg(e, 0);
                                                                        {
                                                                            ivy__app self__COLON__ivy__app;
                                                                            if (((loc__0).tag == 1)) self__COLON__ivy__app = ivyc_s1::ivy__expr::unwrap< ivyc_s1::ivy__app >(loc__0);
                                                                            if(((loc__0).tag == 1)){
                                                                                loc__arg = ext__ivy__app__type_decorate(self__COLON__ivy__app, st, m, loc__argty);
                                                                            }
                                                                            else {
                                                                                {
                                                                                    ivy__symbol self__COLON__ivy__symbol;
                                                                                    if (((loc__0).tag == 0)) self__COLON__ivy__symbol = ivyc_s1::ivy__expr::unwrap< ivyc_s1::ivy__symbol >(loc__0);
                                                                                    if(((loc__0).tag == 0)){
                                                                                        loc__arg = ext__ivy__symbol__type_decorate(self__COLON__ivy__symbol, st, m, loc__argty);
                                                                                    }
                                                                                    else {
                                                                                        loc__arg = ext__ivy__expr__type_decorate(loc__0, st, m, loc__argty);
                                                                                    }
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                                ext__ivy__decost__newvar(st, e.ann, ty);
                                                                {
                                                                    ivyc_s1::ivy__expr loc__0;
                                                                    {
                                                                        loc__0 = ext__ivy__arrow__make(loc__argty, ty, e.ann);
                                                                        {
                                                                            ivyc_s1::ivy__expr loc__fty;
                                                                            {
                                                                                loc__fty = loc__0;
                                                                                {
                                                                                    ivyc_s1::ivy__expr loc__func;
                                                                                    {
                                                                                        st.member = true;
                                                                                        {
                                                                                            ivyc_s1::ivy__expr loc__0;
                                                                                            {
                                                                                                loc__0 = ext__ivy__app__get_arg(e, 1);
                                                                                                {
                                                                                                    ivy__app self__COLON__ivy__app;
                                                                                                    if (((loc__0).tag == 1)) self__COLON__ivy__app = ivyc_s1::ivy__expr::unwrap< ivyc_s1::ivy__app >(loc__0);
                                                                                                    if(((loc__0).tag == 1)){
                                                                                                        loc__func = ext__ivy__app__type_decorate(self__COLON__ivy__app, st, m, loc__argty);
                                                                                                    }
                                                                                                    else {
                                                                                                        {
                                                                                                            ivy__symbol self__COLON__ivy__symbol;
                                                                                                            if (((loc__0).tag == 0)) self__COLON__ivy__symbol = ivyc_s1::ivy__expr::unwrap< ivyc_s1::ivy__symbol >(loc__0);
                                                                                                            if(((loc__0).tag == 0)){
                                                                                                                loc__func = ext__ivy__symbol__type_decorate(self__COLON__ivy__symbol, st, m, loc__argty);
                                                                                                            }
                                                                                                            else {
                                                                                                                loc__func = ext__ivy__expr__type_decorate(loc__0, st, m, loc__argty);
                                                                                                            }
                                                                                                        }
                                                                                                    }
                                                                                                }
                                                                                            }
                                                                                        }
                                                                                        st.member = false;
                                                                                        ext__ivy__decost__unify(st, loc__argty, loc__fty);
                                                                                        if(!st.ok){
                                                                                            ext__ivy__type_error(ivyc_s1::ivy__expr(1, new ivyc_s1::ivy__expr::twrap<ivyc_s1::ivy__app>(e)), st);
                                                                                        }
                                                                                        res = ext__ivy__dot__make(loc__arg, loc__func, e.ann);
                                                                                    }
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                        else {
                                            {
                                                bool loc__0;
    loc__0 = (bool)___ivy_choose(0,"loc:0",16590);
                                                {
                                                    loc__0 = ext__ivy__app__is(e, ivy__verb__isav);
                                                    if(loc__0){
                                                        {
                                                            {
                                                                ivy__app self__COLON__ivy__app;
                                                                if (((vector__ivy__expr____value(e.args,0)).tag == 1)) self__COLON__ivy__app = ivyc_s1::ivy__expr::unwrap< ivyc_s1::ivy__app >(vector__ivy__expr____value(e.args,0));
                                                                if(((vector__ivy__expr____value(e.args,0)).tag == 1)){
                                                                    res = ext__ivy__app__type_decorate(self__COLON__ivy__app, st, m, loc__argty);
                                                                }
                                                                else {
                                                                    {
                                                                        ivy__symbol self__COLON__ivy__symbol;
                                                                        if (((vector__ivy__expr____value(e.args,0)).tag == 0)) self__COLON__ivy__symbol = ivyc_s1::ivy__expr::unwrap< ivyc_s1::ivy__symbol >(vector__ivy__expr____value(e.args,0));
                                                                        if(((vector__ivy__expr____value(e.args,0)).tag == 0)){
                                                                            res = ext__ivy__symbol__type_decorate(self__COLON__ivy__symbol, st, m, loc__argty);
                                                                        }
                                                                        else {
                                                                            res = ext__ivy__expr__type_decorate(vector__ivy__expr____value(e.args,0), st, m, loc__argty);
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                            ty = ext__ivy__symbol__makestr(__lit<str>("bool"), e.ann);
                                                            res = ext__ivy__isaop__make(res, vector__ivy__expr____value(e.args,1), e.ann);
                                                        }
                                                    }
                                                    else {
                                                        {
                                                            {
                                                                vector__ivy__expr__ loc__argtys;
                                                                {
                                                                    {
                                                                        vector__ivy__expr__ loc__newargs;
                                                                        {
                                                                            {
                                                                                unsigned long long loc__idx;
    loc__idx = (unsigned long long)___ivy_choose(0,"loc:idx",16587);
                                                                                {
                                                                                    loc__idx = vector__ivy__expr____begin(e.args);
                                                                                    while((loc__idx < vector__ivy__expr____end(e.args))){
                                                                                        {
                                                                                            {
                                                                                                ivy__app self__COLON__ivy__app;
                                                                                                if (((vector__ivy__expr____value(e.args,loc__idx)).tag == 1)) self__COLON__ivy__app = ivyc_s1::ivy__expr::unwrap< ivyc_s1::ivy__app >(vector__ivy__expr____value(e.args,loc__idx));
                                                                                                if(((vector__ivy__expr____value(e.args,loc__idx)).tag == 1)){
                                                                                                    loc__arg = ext__ivy__app__type_decorate(self__COLON__ivy__app, st, m, loc__argty);
                                                                                                }
                                                                                                else {
                                                                                                    {
                                                                                                        ivy__symbol self__COLON__ivy__symbol;
                                                                                                        if (((vector__ivy__expr____value(e.args,loc__idx)).tag == 0)) self__COLON__ivy__symbol = ivyc_s1::ivy__expr::unwrap< ivyc_s1::ivy__symbol >(vector__ivy__expr____value(e.args,loc__idx));
                                                                                                        if(((vector__ivy__expr____value(e.args,loc__idx)).tag == 0)){
                                                                                                            loc__arg = ext__ivy__symbol__type_decorate(self__COLON__ivy__symbol, st, m, loc__argty);
                                                                                                        }
                                                                                                        else {
                                                                                                            loc__arg = ext__ivy__expr__type_decorate(vector__ivy__expr____value(e.args,loc__idx), st, m, loc__argty);
                                                                                                        }
                                                                                                    }
                                                                                                }
                                                                                            }
                                                                                            ext__vector__ivy__expr____append(loc__argtys, loc__argty);
                                                                                            ext__vector__ivy__expr____append(loc__newargs, loc__arg);
                                                                                            loc__idx = ext__vector__ivy__expr____domain__next(loc__idx);
                                                                                        }
                                                                                    }
                                                                                    ext__ivy__decost__newvar(st, e.ann, ty);
                                                                                    {
                                                                                        ivyc_s1::ivy__expr loc__0;
                                                                                        ivyc_s1::ivy__expr loc__1;
                                                                                        {
                                                                                            loc__0 = ext__ivy__times__fold_left(loc__argtys, e.ann);
                                                                                            loc__1 = ext__ivy__arrow__make(loc__0, ty, e.ann);
                                                                                            {
                                                                                                ivyc_s1::ivy__expr loc__fty;
                                                                                                {
                                                                                                    loc__fty = loc__1;
                                                                                                    {
                                                                                                        ivy__app self__COLON__ivy__app;
                                                                                                        if (((e.func).tag == 1)) self__COLON__ivy__app = ivyc_s1::ivy__expr::unwrap< ivyc_s1::ivy__app >(e.func);
                                                                                                        if(((e.func).tag == 1)){
                                                                                                            loc__arg = ext__ivy__app__type_decorate(self__COLON__ivy__app, st, m, loc__argty);
                                                                                                        }
                                                                                                        else {
                                                                                                            {
                                                                                                                ivy__symbol self__COLON__ivy__symbol;
                                                                                                                if (((e.func).tag == 0)) self__COLON__ivy__symbol = ivyc_s1::ivy__expr::unwrap< ivyc_s1::ivy__symbol >(e.func);
                                                                                                                if(((e.func).tag == 0)){
                                                                                                                    loc__arg = ext__ivy__symbol__type_decorate(self__COLON__ivy__symbol, st, m, loc__argty);
                                                                                                                }
                                                                                                                else {
                                                                                                                    loc__arg = ext__ivy__expr__type_decorate(e.func, st, m, loc__argty);
                                                                                                                }
                                                                                                            }
                                                                                                        }
                                                                                                    }
                                                                                                    ext__ivy__decost__unify(st, loc__argty, loc__fty);
                                                                                                    if(!st.ok){
                                                                                                        ext__ivy__type_error(ivyc_s1::ivy__expr(1, new ivyc_s1::ivy__expr::twrap<ivyc_s1::ivy__app>(e)), st);
                                                                                                    }
                                                                                                    res = ext__ivy__app__make(loc__arg, loc__newargs, e.ann);
                                                                                                }
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
    }
    return res;
}
ivyc_s1::cpp__expr ivyc_s1::ext__cpp__equals__make(ivyc_s1::cpp__expr lhs, ivyc_s1::cpp__expr rhs, ivyc_s1::annot ann){
    ivyc_s1::cpp__expr res;
    {
        cpp__app loc__s;
        {
            loc__s.func = ext__cpp__symbol__makestr(__lit<str>("=="), ann);
            ext__vector__cpp__expr____append(loc__s.args, lhs);
            ext__vector__cpp__expr____append(loc__s.args, rhs);
            loc__s.ann = ann;
            res = ivyc_s1::cpp__expr(1, new ivyc_s1::cpp__expr::twrap<ivyc_s1::cpp__app>(loc__s));
        }
    }
    return res;
}
void ivyc_s1::ext__ivy__ident_to_ident__get(const ivy__ident_to_ident& a, ivyc_s1::ivy__ident x, ivyc_s1::ivy__ident& y){
    {

        ivy__ident_to_ident::const_iterator it = a.find(x);
        if (it != a.end())
            y = it->second;
    }
}
void ivyc_s1::ext__cpp__typedecl__encode(const cpp__typedecl& s, pretty& b, int prio){
    {
        {
            annot_i self__COLON__annot_i;
            if (((s.ann).tag == 0)) self__COLON__annot_i = ivyc_s1::annot::unwrap< ivyc_s1::annot_i >(s.ann);
            if(((s.ann).tag == 0)){
                ext__annot_i__encode(self__COLON__annot_i, b);
            }
            else {
                ext__annot__encode(s.ann, b);
            }
        }
        ext__pretty__nest(b);
        ext__pretty__extend(b, __lit<str>("typedef"));
        ext__pretty__extend(b, __lit<str>(" "));
        ext__cpp__simpletype__encode(s.ttype, b, 0);
        ext__pretty__extend(b, __lit<str>(";"));
        ext__pretty__unnest(b);
        ext__pretty__newline(b);
    }
}
void ivyc_s1::ext__cpp__whilest__encode_int(const cpp__whilest& s, pretty& b, int prio){
    {
        ext__pretty__extend(b, __lit<str>("while"));
        ext__pretty__extend(b, __lit<str>(" "));
        if(true){
            {
                ext__pretty__extend(b, __lit<str>("("));
            }
        }
        {
            cpp__pi self__COLON__cpp__pi;
            if (((s.cond).tag == 3)) self__COLON__cpp__pi = ivyc_s1::cpp__expr::unwrap< ivyc_s1::cpp__pi >(s.cond);
            if(((s.cond).tag == 3)){
                ext__cpp__pi__encode(self__COLON__cpp__pi, b, 0);
            }
            else {
                {
                    cpp__app self__COLON__cpp__app;
                    if (((s.cond).tag == 1)) self__COLON__cpp__app = ivyc_s1::cpp__expr::unwrap< ivyc_s1::cpp__app >(s.cond);
                    if(((s.cond).tag == 1)){
                        ext__cpp__app__encode(self__COLON__cpp__app, b, 0);
                    }
                    else {
                        {
                            cpp__symbol self__COLON__cpp__symbol;
                            if (((s.cond).tag == 0)) self__COLON__cpp__symbol = ivyc_s1::cpp__expr::unwrap< ivyc_s1::cpp__symbol >(s.cond);
                            if(((s.cond).tag == 0)){
                                ext__cpp__symbol__encode(self__COLON__cpp__symbol, b, 0);
                            }
                            else {
                                ext__cpp__expr__encode(s.cond, b, 0);
                            }
                        }
                    }
                }
            }
        }
        if(true){
            {
                ext__pretty__extend(b, __lit<str>(")"));
            }
        }
        ext__pretty__extend(b, __lit<str>(" "));
        {
            cpp__retst self__COLON__cpp__retst;
            if (((s.body).tag == 7)) self__COLON__cpp__retst = ivyc_s1::cpp__stmt::unwrap< ivyc_s1::cpp__retst >(s.body);
            if(((s.body).tag == 7)){
                ext__cpp__retst__encode(self__COLON__cpp__retst, b, 2);
            }
            else {
                {
                    cpp__varst self__COLON__cpp__varst;
                    if (((s.body).tag == 6)) self__COLON__cpp__varst = ivyc_s1::cpp__stmt::unwrap< ivyc_s1::cpp__varst >(s.body);
                    if(((s.body).tag == 6)){
                        ext__cpp__varst__encode(self__COLON__cpp__varst, b, 2);
                    }
                    else {
                        {
                            cpp__breakst self__COLON__cpp__breakst;
                            if (((s.body).tag == 5)) self__COLON__cpp__breakst = ivyc_s1::cpp__stmt::unwrap< ivyc_s1::cpp__breakst >(s.body);
                            if(((s.body).tag == 5)){
                                ext__cpp__breakst__encode(self__COLON__cpp__breakst, b, 2);
                            }
                            else {
                                {
                                    cpp__whilest self__COLON__cpp__whilest;
                                    if (((s.body).tag == 4)) self__COLON__cpp__whilest = ivyc_s1::cpp__stmt::unwrap< ivyc_s1::cpp__whilest >(s.body);
                                    if(((s.body).tag == 4)){
                                        ext__cpp__whilest__encode(self__COLON__cpp__whilest, b, 2);
                                    }
                                    else {
                                        {
                                            cpp__ifst self__COLON__cpp__ifst;
                                            if (((s.body).tag == 3)) self__COLON__cpp__ifst = ivyc_s1::cpp__stmt::unwrap< ivyc_s1::cpp__ifst >(s.body);
                                            if(((s.body).tag == 3)){
                                                ext__cpp__ifst__encode(self__COLON__cpp__ifst, b, 2);
                                            }
                                            else {
                                                {
                                                    cpp__skipst self__COLON__cpp__skipst;
                                                    if (((s.body).tag == 2)) self__COLON__cpp__skipst = ivyc_s1::cpp__stmt::unwrap< ivyc_s1::cpp__skipst >(s.body);
                                                    if(((s.body).tag == 2)){
                                                        ext__cpp__skipst__encode(self__COLON__cpp__skipst, b, 2);
                                                    }
                                                    else {
                                                        {
                                                            cpp__sequence self__COLON__cpp__sequence;
                                                            if (((s.body).tag == 1)) self__COLON__cpp__sequence = ivyc_s1::cpp__stmt::unwrap< ivyc_s1::cpp__sequence >(s.body);
                                                            if(((s.body).tag == 1)){
                                                                ext__cpp__sequence__encode(self__COLON__cpp__sequence, b, 2);
                                                            }
                                                            else {
                                                                {
                                                                    cpp__asgn self__COLON__cpp__asgn;
                                                                    if (((s.body).tag == 0)) self__COLON__cpp__asgn = ivyc_s1::cpp__stmt::unwrap< ivyc_s1::cpp__asgn >(s.body);
                                                                    if(((s.body).tag == 0)){
                                                                        ext__cpp__asgn__encode(self__COLON__cpp__asgn, b, 2);
                                                                    }
                                                                    else {
                                                                        ext__cpp__stmt__encode(s.body, b, 2);
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
    }
}
ivyc_s1::ivy__ident ivyc_s1::ext__ivy__make_auto_key(ivyc_s1::ivy__ident id, bool rev, ivy__symeval& pmap){
    ivyc_s1::ivy__ident key;
    {
        ivy__strident loc__0;
        {
            {
                ivy__dotident self__COLON__ivy__dotident;
                if (((id).tag == 2)) self__COLON__ivy__dotident = ivyc_s1::ivy__ident::unwrap< ivyc_s1::ivy__dotident >(id);
                if(((id).tag == 2)){
                    loc__0 = ext__ivy__dotident__get_last(self__COLON__ivy__dotident);
                }
                else {
                    {
                        ivy__strident self__COLON__ivy__strident;
                        if (((id).tag == 0)) self__COLON__ivy__strident = ivyc_s1::ivy__ident::unwrap< ivyc_s1::ivy__strident >(id);
                        if(((id).tag == 0)){
                            loc__0 = ext__ivy__strident__get_last(self__COLON__ivy__strident);
                        }
                        else {
                            loc__0 = ext__ivy__ident__get_last(id);
                        }
                    }
                }
            }
            {
                ivy__strident loc__skey;
                {
                    loc__skey = loc__0;
                    {
                        unsigned long long loc__idx;
    loc__idx = (unsigned long long)___ivy_choose(0,"loc:idx",16603);
                        {
                            loc__idx = vector__ivy__ident____begin(loc__skey.subscrs);
                            {
                                unsigned long long loc__num;
    loc__num = (unsigned long long)___ivy_choose(0,"loc:num",16602);
                                {
                                    loc__num = 0;
                                    while((loc__idx < vector__ivy__ident____end(loc__skey.subscrs))){
                                        {
                                            {
                                                ivyc_s1::ivy__ident loc__0;
                                                {
                                                    loc__0 = ext__ivy__numident__make(loc__num);
                                                    {
                                                        ivyc_s1::ivy__ident loc__nv;
                                                        {
                                                            loc__nv = loc__0;
                                                            {
                                                                ivyc_s1::annot loc__ann;
                                                                {
                                                                    if(rev){
                                                                        {
                                                                            {
                                                                                ivyc_s1::ivy__expr loc__0;
                                                                                {
                                                                                    loc__0 = ext__ivy__symbol__make(vector__ivy__ident____value(loc__skey.subscrs,loc__idx), loc__ann);
                                                                                    ext__ivy__symeval__set(pmap, loc__nv, loc__0);
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                    else {
                                                                        {
                                                                            {
                                                                                ivyc_s1::ivy__expr loc__0;
                                                                                {
                                                                                    loc__0 = ext__ivy__symbol__make(loc__nv, loc__ann);
                                                                                    ext__ivy__symeval__set(pmap, vector__ivy__ident____value(loc__skey.subscrs,loc__idx), loc__0);
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                    ext__vector__ivy__ident____set(loc__skey.subscrs, loc__idx, loc__nv);
                                                                    loc__idx = ext__vector__ivy__ident____domain__next(loc__idx);
                                                                    loc__num = ext__pos__next(loc__num);
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                    key = ivyc_s1::ivy__ident(0, new ivyc_s1::ivy__ident::twrap<ivyc_s1::ivy__strident>(loc__skey));
                                    if(((id).tag == 2)){
                                        {
                                            {
                                                ivyc_s1::ivy__ident loc__0;
                                                {
                                                    {
                                                        ivy__dotident self__COLON__ivy__dotident;
                                                        if (((id).tag == 2)) self__COLON__ivy__dotident = ivyc_s1::ivy__ident::unwrap< ivyc_s1::ivy__dotident >(id);
                                                        if(((id).tag == 2)){
                                                            loc__0 = ext__ivy__dotident__get_namesp(self__COLON__ivy__dotident);
                                                        }
                                                        else {
                                                            loc__0 = ext__ivy__ident__get_namesp(id);
                                                        }
                                                    }
                                                    {
                                                        ivy__dotident self__COLON__ivy__dotident;
                                                        if (((key).tag == 2)) self__COLON__ivy__dotident = ivyc_s1::ivy__ident::unwrap< ivyc_s1::ivy__dotident >(key);
                                                        if(((key).tag == 2)){
                                                            key = ext__ivy__dotident__prefix(self__COLON__ivy__dotident, loc__0);
                                                        }
                                                        else {
                                                            {
                                                                ivy__strident self__COLON__ivy__strident;
                                                                if (((key).tag == 0)) self__COLON__ivy__strident = ivyc_s1::ivy__ident::unwrap< ivyc_s1::ivy__strident >(key);
                                                                if(((key).tag == 0)){
                                                                    key = ext__ivy__strident__prefix(self__COLON__ivy__strident, loc__0);
                                                                }
                                                                else {
                                                                    key = ext__ivy__ident__prefix(key, loc__0);
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
    }
    return key;
}
void ivyc_s1::ext__ivy__local_tracker__add_var(ivy__local_tracker& s, ivyc_s1::ivy__expr typing){
    {
        {
            bool loc__0;
    loc__0 = (bool)___ivy_choose(0,"loc:0",16608);
            ivyc_s1::ivy__expr loc__1;
            {
                {
                    ivy__app self__COLON__ivy__app;
                    if (((typing).tag == 1)) self__COLON__ivy__app = ivyc_s1::ivy__expr::unwrap< ivyc_s1::ivy__app >(typing);
                    if(((typing).tag == 1)){
                        loc__0 = ext__ivy__app__is(self__COLON__ivy__app, ivy__verb__colon);
                    }
                    else {
                        loc__0 = ext__ivy__expr__is(typing, ivy__verb__colon);
                    }
                }
                {
                    ivy__app self__COLON__ivy__app;
                    if (((typing).tag == 1)) self__COLON__ivy__app = ivyc_s1::ivy__expr::unwrap< ivyc_s1::ivy__app >(typing);
                    if(((typing).tag == 1)){
                        loc__1 = ext__ivy__app__get_arg(self__COLON__ivy__app, 0);
                    }
                    else {
                        loc__1 = ext__ivy__expr__get_arg(typing, 0);
                    }
                }
                {
                    ivyc_s1::ivy__expr loc__v;
                    {
                        loc__v = (loc__0 ? loc__1 : typing);
                        {
                            ivyc_s1::ivy__ident loc__0;
                            {
                                {
                                    ivy__symbol self__COLON__ivy__symbol;
                                    if (((loc__v).tag == 0)) self__COLON__ivy__symbol = ivyc_s1::ivy__expr::unwrap< ivyc_s1::ivy__symbol >(loc__v);
                                    if(((loc__v).tag == 0)){
                                        loc__0 = ext__ivy__symbol__get_name(self__COLON__ivy__symbol);
                                    }
                                    else {
                                        loc__0 = ext__ivy__expr__get_name(loc__v);
                                    }
                                }
                                ext__ivy__push_pop_ident_set__set(s.map, loc__0, true);
                            }
                        }
                    }
                }
            }
        }
    }
}
void ivyc_s1::ext__ivy__make_isa(ivyc_s1::cpp__expr& s, ivyc_s1::cpp__expr ty){
    {
        {
            ivyc_s1::cpp__ident loc__0;
            ivyc_s1::annot loc__1;
            ivyc_s1::cpp__expr loc__2;
            ivyc_s1::annot loc__3;
            {
                {
                    cpp__symbol self__COLON__cpp__symbol;
                    if (((ty).tag == 0)) self__COLON__cpp__symbol = ivyc_s1::cpp__expr::unwrap< ivyc_s1::cpp__symbol >(ty);
                    if(((ty).tag == 0)){
                        loc__0 = ext__cpp__symbol__get_name(self__COLON__cpp__symbol);
                    }
                    else {
                        loc__0 = ext__cpp__expr__get_name(ty);
                    }
                }
                {
                    cpp__app self__COLON__cpp__app;
                    if (((s).tag == 1)) self__COLON__cpp__app = ivyc_s1::cpp__expr::unwrap< ivyc_s1::cpp__app >(s);
                    if(((s).tag == 1)){
                        loc__1 = ext__cpp__app__get_ann(self__COLON__cpp__app);
                    }
                    else {
                        {
                            cpp__symbol self__COLON__cpp__symbol;
                            if (((s).tag == 0)) self__COLON__cpp__symbol = ivyc_s1::cpp__expr::unwrap< ivyc_s1::cpp__symbol >(s);
                            if(((s).tag == 0)){
                                loc__1 = ext__cpp__symbol__get_ann(self__COLON__cpp__symbol);
                            }
                            else {
                                loc__1 = ext__cpp__expr__get_ann(s);
                            }
                        }
                    }
                }
                loc__2 = ext__cpp__symbol__makestr1(__lit<str>("ivy::isa"), loc__0, loc__1);
                {
                    cpp__app self__COLON__cpp__app;
                    if (((s).tag == 1)) self__COLON__cpp__app = ivyc_s1::cpp__expr::unwrap< ivyc_s1::cpp__app >(s);
                    if(((s).tag == 1)){
                        loc__3 = ext__cpp__app__get_ann(self__COLON__cpp__app);
                    }
                    else {
                        {
                            cpp__symbol self__COLON__cpp__symbol;
                            if (((s).tag == 0)) self__COLON__cpp__symbol = ivyc_s1::cpp__expr::unwrap< ivyc_s1::cpp__symbol >(s);
                            if(((s).tag == 0)){
                                loc__3 = ext__cpp__symbol__get_ann(self__COLON__cpp__symbol);
                            }
                            else {
                                loc__3 = ext__cpp__expr__get_ann(s);
                            }
                        }
                    }
                }
                s = ext__cpp__app__make1(loc__2, s, loc__3);
            }
        }
    }
}
bool ivyc_s1::ext__ivy__vardc__emitted(const ivy__vardc& s, const ivy__tocppst& st){
    bool res;
    res = (bool)___ivy_choose(0,"fml:res",0);
    {
        res = !s.is_destructor;
    }
    return res;
}
ivyc_s1::cpp__ident ivyc_s1::ext__cpp__expr__get_name(ivyc_s1::cpp__expr s){
    ivyc_s1::cpp__ident res;
    {
    }
    return res;
}
ivyc_s1::cpp__stmt ivyc_s1::ext__ivy__skipst__to_cpp(const ivy__skipst& s, ivy__tocppst& st){
    ivyc_s1::cpp__stmt res;
    {
        cpp__skipst loc__t;
        {
            loc__t = ext__ivy__skipst__to_cpp_int(s, st);
            loc__t.ann = s.ann;
            res = ivyc_s1::cpp__stmt(2, new ivyc_s1::cpp__stmt::twrap<ivyc_s1::cpp__skipst>(loc__t));
        }
    }
    return res;
}
ivyc_s1::cpp__expr ivyc_s1::ext__cpp__vardecl__get_name(const cpp__vardecl& d){
    ivyc_s1::cpp__expr res;
    {
        res = d.vtype.name;
    }
    return res;
}
void ivyc_s1::ext__ivy__undefined__encode(const ivy__undefined& e, pretty& b){
    {
        ext__pretty__extend(b, __lit<str>("Undefined:"));
        ext__pretty__extend(b, __lit<str>(" "));
        {
            ivy__dotident self__COLON__ivy__dotident;
            if (((e.n).tag == 2)) self__COLON__ivy__dotident = ivyc_s1::ivy__ident::unwrap< ivyc_s1::ivy__dotident >(e.n);
            if(((e.n).tag == 2)){
                ext__ivy__dotident__encode(self__COLON__ivy__dotident, b, 0);
            }
            else {
                {
                    ivy__numident self__COLON__ivy__numident;
                    if (((e.n).tag == 1)) self__COLON__ivy__numident = ivyc_s1::ivy__ident::unwrap< ivyc_s1::ivy__numident >(e.n);
                    if(((e.n).tag == 1)){
                        ext__ivy__numident__encode(self__COLON__ivy__numident, b, 0);
                    }
                    else {
                        {
                            ivy__strident self__COLON__ivy__strident;
                            if (((e.n).tag == 0)) self__COLON__ivy__strident = ivyc_s1::ivy__ident::unwrap< ivyc_s1::ivy__strident >(e.n);
                            if(((e.n).tag == 0)){
                                ext__ivy__strident__encode(self__COLON__ivy__strident, b, 0);
                            }
                            else {
                                ext__ivy__ident__encode(e.n, b, 0);
                            }
                        }
                    }
                }
            }
        }
        ext__pretty__newline(b);
    }
}
void ivyc_s1::ext__ivy__structspec__defd(const ivy__structspec& s, ivy__flatst& st, ivyc_s1::ivy__ident id){
    {
        unsigned long long loc__idx;
    loc__idx = (unsigned long long)___ivy_choose(0,"loc:idx",16615);
        {
            loc__idx = vector__ivy__expr____begin(s.destructors);
            while((loc__idx < vector__ivy__expr____end(s.destructors))){
                {
                    {
                        ivyc_s1::ivy__expr loc__e;
                        {
                            loc__e = vector__ivy__expr____value(s.destructors,loc__idx);
                            ext__ivy__auto_defd(loc__e, st);
                            {
                                ivyc_s1::ivy__expr loc__0;
                                {
                                    {
                                        ivy__app self__COLON__ivy__app;
                                        if (((loc__e).tag == 1)) self__COLON__ivy__app = ivyc_s1::ivy__expr::unwrap< ivyc_s1::ivy__app >(loc__e);
                                        if(((loc__e).tag == 1)){
                                            loc__0 = ext__ivy__app__get_arg(self__COLON__ivy__app, 0);
                                        }
                                        else {
                                            loc__0 = ext__ivy__expr__get_arg(loc__e, 0);
                                        }
                                    }
                                    {
                                        ivyc_s1::ivy__expr loc__lhs;
                                        {
                                            loc__lhs = loc__0;
                                            if(((loc__lhs).tag == 1)){
                                                {
                                                    {
                                                        ivy__app self__COLON__ivy__app;
                                                        if (((loc__lhs).tag == 1)) self__COLON__ivy__app = ivyc_s1::ivy__expr::unwrap< ivyc_s1::ivy__app >(loc__lhs);
                                                        if(((loc__lhs).tag == 1)){
                                                            loc__lhs = ext__ivy__app__get_func(self__COLON__ivy__app);
                                                        }
                                                        else {
                                                            loc__lhs = ext__ivy__expr__get_func(loc__lhs);
                                                        }
                                                    }
                                                }
                                            }
                                            {
                                                ivyc_s1::ivy__ident loc__0;
                                                ivyc_s1::ivy__ident loc__1;
                                                {
                                                    {
                                                        ivy__symbol self__COLON__ivy__symbol;
                                                        if (((loc__lhs).tag == 0)) self__COLON__ivy__symbol = ivyc_s1::ivy__expr::unwrap< ivyc_s1::ivy__symbol >(loc__lhs);
                                                        if(((loc__lhs).tag == 0)){
                                                            loc__0 = ext__ivy__symbol__get_name(self__COLON__ivy__symbol);
                                                        }
                                                        else {
                                                            loc__0 = ext__ivy__expr__get_name(loc__lhs);
                                                        }
                                                    }
                                                    {
                                                        ivy__dotident self__COLON__ivy__dotident;
                                                        if (((loc__0).tag == 2)) self__COLON__ivy__dotident = ivyc_s1::ivy__ident::unwrap< ivyc_s1::ivy__dotident >(loc__0);
                                                        if(((loc__0).tag == 2)){
                                                            loc__1 = ext__ivy__dotident__prefix(self__COLON__ivy__dotident, id);
                                                        }
                                                        else {
                                                            {
                                                                ivy__strident self__COLON__ivy__strident;
                                                                if (((loc__0).tag == 0)) self__COLON__ivy__strident = ivyc_s1::ivy__ident::unwrap< ivyc_s1::ivy__strident >(loc__0);
                                                                if(((loc__0).tag == 0)){
                                                                    loc__1 = ext__ivy__strident__prefix(self__COLON__ivy__strident, id);
                                                                }
                                                                else {
                                                                    loc__1 = ext__ivy__ident__prefix(loc__0, id);
                                                                }
                                                            }
                                                        }
                                                    }
                                                    ext__ivy__ident_set__set(st.defs, loc__1, true);
                                                }
                                            }
                                            loc__idx = ext__vector__ivy__expr____domain__next(loc__idx);
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
    }
}
ivyc_s1::cpp__stmt ivyc_s1::ext__cpp__sequence__fold_right(const vector__cpp__stmt__& args, ivyc_s1::annot ann){
    ivyc_s1::cpp__stmt res;
    if((0 < vector__cpp__stmt____end(args))){
        {
            unsigned long long loc__0;
    loc__0 = (unsigned long long)___ivy_choose(0,"loc:0",16617);
            {
                loc__0 = ext__vector__cpp__stmt____domain__prev(vector__cpp__stmt____end(args));
                {
                    unsigned long long loc__idx;
    loc__idx = (unsigned long long)___ivy_choose(0,"loc:idx",16616);
                    {
                        loc__idx = loc__0;
                        res = vector__cpp__stmt____value(args,loc__idx);
                        while((0 < loc__idx)){
                            {
                                loc__idx = ext__vector__cpp__stmt____domain__prev(loc__idx);
                                res = ext__cpp__sequence__make(vector__cpp__stmt____value(args,loc__idx), res, ann);
                            }
                        }
                    }
                }
            }
        }
    }
    return res;
}
void ivyc_s1::ext__ivy__actdc__record_prototypes(const ivy__actdc& s, ivy__tocppst& st){
    {
        {
            ivy__prototype loc__0;
    loc__0.has_ret = (bool)___ivy_choose(0,"loc:0",16620);
    loc__0.ret.is_input = (bool)___ivy_choose(0,"loc:0",16620);
    loc__0.ret.inpos = (unsigned long long)___ivy_choose(0,"loc:0",16620);
    loc__0.ret.is_output = (bool)___ivy_choose(0,"loc:0",16620);
    loc__0.ret.outpos = (unsigned long long)___ivy_choose(0,"loc:0",16620);
    loc__0.ret.is_ref = (bool)___ivy_choose(0,"loc:0",16620);
    loc__0.ret.is_const = (bool)___ivy_choose(0,"loc:0",16620);
            {
                loc__0 = ext__ivy__actdc__get_proto(s);
                {
                    ivy__prototype loc__proto;
    loc__proto.has_ret = (bool)___ivy_choose(0,"loc:proto",16619);
    loc__proto.ret.is_input = (bool)___ivy_choose(0,"loc:proto",16619);
    loc__proto.ret.inpos = (unsigned long long)___ivy_choose(0,"loc:proto",16619);
    loc__proto.ret.is_output = (bool)___ivy_choose(0,"loc:proto",16619);
    loc__proto.ret.outpos = (unsigned long long)___ivy_choose(0,"loc:proto",16619);
    loc__proto.ret.is_ref = (bool)___ivy_choose(0,"loc:proto",16619);
    loc__proto.ret.is_const = (bool)___ivy_choose(0,"loc:proto",16619);
                    {
                        loc__proto = loc__0;
                        {
                            ivyc_s1::ivy__ident loc__0;
                            {
                                {
                                    ivy__symbol self__COLON__ivy__symbol;
                                    if (((s.name).tag == 0)) self__COLON__ivy__symbol = ivyc_s1::ivy__expr::unwrap< ivyc_s1::ivy__symbol >(s.name);
                                    if(((s.name).tag == 0)){
                                        loc__0 = ext__ivy__symbol__get_name(self__COLON__ivy__symbol);
                                    }
                                    else {
                                        loc__0 = ext__ivy__expr__get_name(s.name);
                                    }
                                }
                                ext__ivy__ident_to_prototype__set(st.protos, loc__0, loc__proto);
                            }
                        }
                    }
                }
            }
        }
    }
}
ivyc_s1::ivy__stmt ivyc_s1::ext__ivy__asgn__typeinfer(const ivy__asgn& s, ivy__typeinferst& st){
    ivyc_s1::ivy__stmt ress;
    ress = ext__ivy__asgn__typeinfer_desugar(s, true, st);
    return ress;
}
ivyc_s1::ivy__type_conversion ivyc_s1::ext__ivy__type_conversion__make(ivyc_s1::ivy__expr e, ivyc_s1::ivy__expr t1, ivyc_s1::ivy__expr t2){
    ivyc_s1::ivy__type_conversion res;
    {
        res.e = e;
        res.t1 = t1;
        res.t2 = t2;
    }
    return res;
}
bool ivyc_s1::ext__ivy__ident_to_moduledc__mem(const ivy__ident_to_moduledc& a, ivyc_s1::ivy__ident x){
    bool res;
    res = (bool)___ivy_choose(0,"fml:res",0);
    {

        ivy__ident_to_moduledc::const_iterator it = a.find(x);
        res = (it != a.end());
    }
    return res;
}
ivyc_s1::cpp__varst ivyc_s1::ext__ivy__varst__to_cpp_int(const ivy__varst& s, ivy__tocppst& st){
    ivyc_s1::cpp__varst res;
    res.vtype.is_const = (bool)___ivy_choose(0,"fml:res",0);
    res.vtype.is_ref = (bool)___ivy_choose(0,"fml:res",0);
    {
        {
            ivyc_s1::ivy__expr loc__0;
            {
                {
                    ivy__app self__COLON__ivy__app;
                    if (((s.name).tag == 1)) self__COLON__ivy__app = ivyc_s1::ivy__expr::unwrap< ivyc_s1::ivy__app >(s.name);
                    if(((s.name).tag == 1)){
                        loc__0 = ext__ivy__app__get_arg(self__COLON__ivy__app, 1);
                    }
                    else {
                        loc__0 = ext__ivy__expr__get_arg(s.name, 1);
                    }
                }
                res.vtype._type = ext__ivy__fix_variant_type(loc__0, st);
            }
        }
        {
            ivyc_s1::ivy__expr loc__0;
            {
                {
                    ivy__app self__COLON__ivy__app;
                    if (((s.name).tag == 1)) self__COLON__ivy__app = ivyc_s1::ivy__expr::unwrap< ivyc_s1::ivy__app >(s.name);
                    if(((s.name).tag == 1)){
                        loc__0 = ext__ivy__app__get_arg(self__COLON__ivy__app, 0);
                    }
                    else {
                        loc__0 = ext__ivy__expr__get_arg(s.name, 0);
                    }
                }
                {
                    ivy__app self__COLON__ivy__app;
                    if (((loc__0).tag == 1)) self__COLON__ivy__app = ivyc_s1::ivy__expr::unwrap< ivyc_s1::ivy__app >(loc__0);
                    if(((loc__0).tag == 1)){
                        res.vtype.name = ext__ivy__app__to_cpp(self__COLON__ivy__app, st);
                    }
                    else {
                        {
                            ivy__symbol self__COLON__ivy__symbol;
                            if (((loc__0).tag == 0)) self__COLON__ivy__symbol = ivyc_s1::ivy__expr::unwrap< ivyc_s1::ivy__symbol >(loc__0);
                            if(((loc__0).tag == 0)){
                                res.vtype.name = ext__ivy__symbol__to_cpp(self__COLON__ivy__symbol, st);
                            }
                            else {
                                res.vtype.name = ext__ivy__expr__to_cpp(loc__0, st);
                            }
                        }
                    }
                }
            }
        }
    }
    return res;
}
ivyc_s1::annot ivyc_s1::ext__ivy__decl__get_ann(ivyc_s1::ivy__decl s){
    ivyc_s1::annot res;
    {
    }
    return res;
}
ivyc_s1::ivy__type_context__stack_entry ivyc_s1::ext__vector__ivy__type_context__stack_entry____back(const vector__ivy__type_context__stack_entry__& a){
    ivyc_s1::ivy__type_context__stack_entry res;
    res.any = (bool)___ivy_choose(0,"fml:res",0);
    {

        if ((unsigned long long)a.size() > 0)
            res = a.back();
    }
    return res;
}
void ivyc_s1::ext__ivy__lvalue_paths(ivyc_s1::ivy__expr s, vector__ivy__access_path__& paths, bool ao){
    {
        bool loc__0;
    loc__0 = (bool)___ivy_choose(0,"loc:0",16631);
        {
            {
                ivy__app self__COLON__ivy__app;
                if (((s).tag == 1)) self__COLON__ivy__app = ivyc_s1::ivy__expr::unwrap< ivyc_s1::ivy__app >(s);
                if(((s).tag == 1)){
                    loc__0 = ext__ivy__app__is(self__COLON__ivy__app, ivy__verb__colon);
                }
                else {
                    loc__0 = ext__ivy__expr__is(s, ivy__verb__colon);
                }
            }
            if(loc__0){
                {
                    ivyc_s1::ivy__expr loc__0;
                    {
                        {
                            ivy__app self__COLON__ivy__app;
                            if (((s).tag == 1)) self__COLON__ivy__app = ivyc_s1::ivy__expr::unwrap< ivyc_s1::ivy__app >(s);
                            if(((s).tag == 1)){
                                loc__0 = ext__ivy__app__get_arg(self__COLON__ivy__app, 0);
                            }
                            else {
                                loc__0 = ext__ivy__expr__get_arg(s, 0);
                            }
                        }
                        ext__ivy__lvalue_paths(loc__0, paths, ao);
                    }
                }
            }
            else {
                {
                    if(!ao){
                        {
                            ivy__access_path loc__path;
                            {
                                {
                                    bool loc__ok;
    loc__ok = (bool)___ivy_choose(0,"loc:ok",16624);
                                    {
                                        ext__ivy__lvalue_path(s, loc__path, loc__ok);
                                        if(loc__ok){
                                            {
                                                ext__vector__ivy__access_path____append(paths, loc__path);
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                    if(((s).tag == 1)){
                        {
                            bool loc__0;
    loc__0 = (bool)___ivy_choose(0,"loc:0",16630);
                            {
                                {
                                    ivy__app self__COLON__ivy__app;
                                    if (((s).tag == 1)) self__COLON__ivy__app = ivyc_s1::ivy__expr::unwrap< ivyc_s1::ivy__app >(s);
                                    if(((s).tag == 1)){
                                        loc__0 = ext__ivy__app__is(self__COLON__ivy__app, ivy__verb__dot);
                                    }
                                    else {
                                        loc__0 = ext__ivy__expr__is(s, ivy__verb__dot);
                                    }
                                }
                                if(loc__0){
                                    {
                                        {
                                            ivyc_s1::ivy__expr loc__0;
                                            {
                                                {
                                                    ivy__app self__COLON__ivy__app;
                                                    if (((s).tag == 1)) self__COLON__ivy__app = ivyc_s1::ivy__expr::unwrap< ivyc_s1::ivy__app >(s);
                                                    if(((s).tag == 1)){
                                                        loc__0 = ext__ivy__app__get_arg(self__COLON__ivy__app, 0);
                                                    }
                                                    else {
                                                        loc__0 = ext__ivy__expr__get_arg(s, 0);
                                                    }
                                                }
                                                ext__ivy__lvalue_paths(loc__0, paths, true);
                                            }
                                        }
                                    }
                                }
                                else {
                                    {
                                        vector__ivy__expr__ loc__0;
                                        {
                                            {
                                                ivy__app self__COLON__ivy__app;
                                                if (((s).tag == 1)) self__COLON__ivy__app = ivyc_s1::ivy__expr::unwrap< ivyc_s1::ivy__app >(s);
                                                if(((s).tag == 1)){
                                                    loc__0 = ext__ivy__app__get_args(self__COLON__ivy__app);
                                                }
                                                else {
                                                    loc__0 = ext__ivy__expr__get_args(s);
                                                }
                                            }
                                            {
                                                vector__ivy__expr__ loc__args;
                                                {
                                                    loc__args = loc__0;
                                                    {
                                                        unsigned long long loc__idx;
    loc__idx = (unsigned long long)___ivy_choose(0,"loc:idx",16627);
                                                        {
                                                            loc__idx = vector__ivy__expr____begin(loc__args);
                                                            while((loc__idx < vector__ivy__expr____end(loc__args))){
                                                                {
                                                                    ext__ivy__lvalue_paths(vector__ivy__expr____value(loc__args,loc__idx), paths, false);
                                                                    loc__idx = ext__vector__ivy__expr____domain__next(loc__idx);
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
    }
}
ivyc_s1::cpp__ident ivyc_s1::ext__cpp__symbol__get_name(const cpp__symbol& s){
    ivyc_s1::cpp__ident res;
    res = s.name;
    return res;
}
ivyc_s1::ivy__expr ivyc_s1::ext__ivy__expr__get_func(ivyc_s1::ivy__expr s){
    ivyc_s1::ivy__expr res;
    {
    }
    return res;
}
ivyc_s1::ivy__expr ivyc_s1::ext__ivy__app__type_fill_in(const ivy__app& e, ivy__decost& st){
    ivyc_s1::ivy__expr res;
    {
        {
            ivyc_s1::ivy__expr loc__func;
            {
                {
                    ivy__app self__COLON__ivy__app;
                    if (((e.func).tag == 1)) self__COLON__ivy__app = ivyc_s1::ivy__expr::unwrap< ivyc_s1::ivy__app >(e.func);
                    if(((e.func).tag == 1)){
                        loc__func = ext__ivy__app__type_fill_in(self__COLON__ivy__app, st);
                    }
                    else {
                        {
                            ivy__symbol self__COLON__ivy__symbol;
                            if (((e.func).tag == 0)) self__COLON__ivy__symbol = ivyc_s1::ivy__expr::unwrap< ivyc_s1::ivy__symbol >(e.func);
                            if(((e.func).tag == 0)){
                                loc__func = ext__ivy__symbol__type_fill_in(self__COLON__ivy__symbol, st);
                            }
                            else {
                                loc__func = ext__ivy__expr__type_fill_in(e.func, st);
                            }
                        }
                    }
                }
                {
                    vector__ivy__expr__ loc__newargs;
                    {
                        {
                            unsigned long long loc__idx;
    loc__idx = (unsigned long long)___ivy_choose(0,"loc:idx",16635);
                            {
                                loc__idx = vector__ivy__expr____begin(e.args);
                                while((loc__idx < vector__ivy__expr____end(e.args))){
                                    {
                                        ivyc_s1::ivy__expr loc__arg;
                                        {
                                            {
                                                ivy__app self__COLON__ivy__app;
                                                if (((vector__ivy__expr____value(e.args,loc__idx)).tag == 1)) self__COLON__ivy__app = ivyc_s1::ivy__expr::unwrap< ivyc_s1::ivy__app >(vector__ivy__expr____value(e.args,loc__idx));
                                                if(((vector__ivy__expr____value(e.args,loc__idx)).tag == 1)){
                                                    loc__arg = ext__ivy__app__type_fill_in(self__COLON__ivy__app, st);
                                                }
                                                else {
                                                    {
                                                        ivy__symbol self__COLON__ivy__symbol;
                                                        if (((vector__ivy__expr____value(e.args,loc__idx)).tag == 0)) self__COLON__ivy__symbol = ivyc_s1::ivy__expr::unwrap< ivyc_s1::ivy__symbol >(vector__ivy__expr____value(e.args,loc__idx));
                                                        if(((vector__ivy__expr____value(e.args,loc__idx)).tag == 0)){
                                                            loc__arg = ext__ivy__symbol__type_fill_in(self__COLON__ivy__symbol, st);
                                                        }
                                                        else {
                                                            loc__arg = ext__ivy__expr__type_fill_in(vector__ivy__expr____value(e.args,loc__idx), st);
                                                        }
                                                    }
                                                }
                                            }
                                            ext__vector__ivy__expr____append(loc__newargs, loc__arg);
                                            loc__idx = ext__vector__ivy__expr____domain__next(loc__idx);
                                        }
                                    }
                                }
                                {
                                    bool loc__0;
    loc__0 = (bool)___ivy_choose(0,"loc:0",16634);
                                    {
                                        loc__0 = ext__ivy__app__is(e, ivy__verb__colon);
                                        if(loc__0){
                                            {
                                                bool loc__0;
    loc__0 = (bool)___ivy_choose(0,"loc:0",16633);
                                                {
                                                    {
                                                        ivy__app self__COLON__ivy__app;
                                                        if (((vector__ivy__expr____value(loc__newargs,1)).tag == 1)) self__COLON__ivy__app = ivyc_s1::ivy__expr::unwrap< ivyc_s1::ivy__app >(vector__ivy__expr____value(loc__newargs,1));
                                                        if(((vector__ivy__expr____value(loc__newargs,1)).tag == 1)){
                                                            loc__0 = ext__ivy__app__has_numident(self__COLON__ivy__app);
                                                        }
                                                        else {
                                                            {
                                                                ivy__symbol self__COLON__ivy__symbol;
                                                                if (((vector__ivy__expr____value(loc__newargs,1)).tag == 0)) self__COLON__ivy__symbol = ivyc_s1::ivy__expr::unwrap< ivyc_s1::ivy__symbol >(vector__ivy__expr____value(loc__newargs,1));
                                                                if(((vector__ivy__expr____value(loc__newargs,1)).tag == 0)){
                                                                    loc__0 = ext__ivy__symbol__has_numident(self__COLON__ivy__symbol);
                                                                }
                                                                else {
                                                                    loc__0 = ext__ivy__expr__has_numident(vector__ivy__expr____value(loc__newargs,1));
                                                                }
                                                            }
                                                        }
                                                    }
                                                    if(loc__0){
                                                        {
                                                            ext__ivy__cannot_infer(ivyc_s1::ivy__expr(1, new ivyc_s1::ivy__expr::twrap<ivyc_s1::ivy__app>(e)), vector__ivy__expr____value(loc__newargs,1));
                                                            st.ok = false;
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                                res = ext__ivy__app__make(loc__func, loc__newargs, e.ann);
                            }
                        }
                    }
                }
            }
        }
    }
    return res;
}
ivyc_s1::ivy__sequence ivyc_s1::ext__ivy__sequence__flat_int(const ivy__sequence& s, ivy__flatst& st){
    ivyc_s1::ivy__sequence res;
    {
        res = s;
        if(((res.lhs).tag == 0)){
            {
                {
                    vector__ivy__ident__ loc__del;
                    {
                        loc__del = ext__ivy__setup_local_vars(res.lhs, st);
                        {
                            ivy__varst self__COLON__ivy__varst;
                            if (((res.lhs).tag == 6)) self__COLON__ivy__varst = ivyc_s1::ivy__stmt::unwrap< ivyc_s1::ivy__varst >(res.lhs);
                            if(((res.lhs).tag == 6)){
                                res.lhs = ext__ivy__varst__flat(self__COLON__ivy__varst, st);
                            }
                            else {
                                {
                                    ivy__whilest self__COLON__ivy__whilest;
                                    if (((res.lhs).tag == 4)) self__COLON__ivy__whilest = ivyc_s1::ivy__stmt::unwrap< ivyc_s1::ivy__whilest >(res.lhs);
                                    if(((res.lhs).tag == 4)){
                                        res.lhs = ext__ivy__whilest__flat(self__COLON__ivy__whilest, st);
                                    }
                                    else {
                                        {
                                            ivy__ifst self__COLON__ivy__ifst;
                                            if (((res.lhs).tag == 3)) self__COLON__ivy__ifst = ivyc_s1::ivy__stmt::unwrap< ivyc_s1::ivy__ifst >(res.lhs);
                                            if(((res.lhs).tag == 3)){
                                                res.lhs = ext__ivy__ifst__flat(self__COLON__ivy__ifst, st);
                                            }
                                            else {
                                                {
                                                    ivy__sequence self__COLON__ivy__sequence;
                                                    if (((res.lhs).tag == 1)) self__COLON__ivy__sequence = ivyc_s1::ivy__stmt::unwrap< ivyc_s1::ivy__sequence >(res.lhs);
                                                    if(((res.lhs).tag == 1)){
                                                        res.lhs = ext__ivy__sequence__flat(self__COLON__ivy__sequence, st);
                                                    }
                                                    else {
                                                        {
                                                            ivy__asgn self__COLON__ivy__asgn;
                                                            if (((res.lhs).tag == 0)) self__COLON__ivy__asgn = ivyc_s1::ivy__stmt::unwrap< ivyc_s1::ivy__asgn >(res.lhs);
                                                            if(((res.lhs).tag == 0)){
                                                                res.lhs = ext__ivy__asgn__flat(self__COLON__ivy__asgn, st);
                                                            }
                                                            else {
                                                                res.lhs = ext__ivy__stmt__flat(res.lhs, st);
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                        {
                            ivy__varst self__COLON__ivy__varst;
                            if (((res.rhs).tag == 6)) self__COLON__ivy__varst = ivyc_s1::ivy__stmt::unwrap< ivyc_s1::ivy__varst >(res.rhs);
                            if(((res.rhs).tag == 6)){
                                res.rhs = ext__ivy__varst__flat(self__COLON__ivy__varst, st);
                            }
                            else {
                                {
                                    ivy__whilest self__COLON__ivy__whilest;
                                    if (((res.rhs).tag == 4)) self__COLON__ivy__whilest = ivyc_s1::ivy__stmt::unwrap< ivyc_s1::ivy__whilest >(res.rhs);
                                    if(((res.rhs).tag == 4)){
                                        res.rhs = ext__ivy__whilest__flat(self__COLON__ivy__whilest, st);
                                    }
                                    else {
                                        {
                                            ivy__ifst self__COLON__ivy__ifst;
                                            if (((res.rhs).tag == 3)) self__COLON__ivy__ifst = ivyc_s1::ivy__stmt::unwrap< ivyc_s1::ivy__ifst >(res.rhs);
                                            if(((res.rhs).tag == 3)){
                                                res.rhs = ext__ivy__ifst__flat(self__COLON__ivy__ifst, st);
                                            }
                                            else {
                                                {
                                                    ivy__sequence self__COLON__ivy__sequence;
                                                    if (((res.rhs).tag == 1)) self__COLON__ivy__sequence = ivyc_s1::ivy__stmt::unwrap< ivyc_s1::ivy__sequence >(res.rhs);
                                                    if(((res.rhs).tag == 1)){
                                                        res.rhs = ext__ivy__sequence__flat(self__COLON__ivy__sequence, st);
                                                    }
                                                    else {
                                                        {
                                                            ivy__asgn self__COLON__ivy__asgn;
                                                            if (((res.rhs).tag == 0)) self__COLON__ivy__asgn = ivyc_s1::ivy__stmt::unwrap< ivyc_s1::ivy__asgn >(res.rhs);
                                                            if(((res.rhs).tag == 0)){
                                                                res.rhs = ext__ivy__asgn__flat(self__COLON__ivy__asgn, st);
                                                            }
                                                            else {
                                                                res.rhs = ext__ivy__stmt__flat(res.rhs, st);
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                        ext__ivy__remove_local_vars(loc__del, st);
                    }
                }
            }
        }
        else {
            {
                {
                    ivy__varst self__COLON__ivy__varst;
                    if (((res.lhs).tag == 6)) self__COLON__ivy__varst = ivyc_s1::ivy__stmt::unwrap< ivyc_s1::ivy__varst >(res.lhs);
                    if(((res.lhs).tag == 6)){
                        res.lhs = ext__ivy__varst__flat(self__COLON__ivy__varst, st);
                    }
                    else {
                        {
                            ivy__whilest self__COLON__ivy__whilest;
                            if (((res.lhs).tag == 4)) self__COLON__ivy__whilest = ivyc_s1::ivy__stmt::unwrap< ivyc_s1::ivy__whilest >(res.lhs);
                            if(((res.lhs).tag == 4)){
                                res.lhs = ext__ivy__whilest__flat(self__COLON__ivy__whilest, st);
                            }
                            else {
                                {
                                    ivy__ifst self__COLON__ivy__ifst;
                                    if (((res.lhs).tag == 3)) self__COLON__ivy__ifst = ivyc_s1::ivy__stmt::unwrap< ivyc_s1::ivy__ifst >(res.lhs);
                                    if(((res.lhs).tag == 3)){
                                        res.lhs = ext__ivy__ifst__flat(self__COLON__ivy__ifst, st);
                                    }
                                    else {
                                        {
                                            ivy__sequence self__COLON__ivy__sequence;
                                            if (((res.lhs).tag == 1)) self__COLON__ivy__sequence = ivyc_s1::ivy__stmt::unwrap< ivyc_s1::ivy__sequence >(res.lhs);
                                            if(((res.lhs).tag == 1)){
                                                res.lhs = ext__ivy__sequence__flat(self__COLON__ivy__sequence, st);
                                            }
                                            else {
                                                {
                                                    ivy__asgn self__COLON__ivy__asgn;
                                                    if (((res.lhs).tag == 0)) self__COLON__ivy__asgn = ivyc_s1::ivy__stmt::unwrap< ivyc_s1::ivy__asgn >(res.lhs);
                                                    if(((res.lhs).tag == 0)){
                                                        res.lhs = ext__ivy__asgn__flat(self__COLON__ivy__asgn, st);
                                                    }
                                                    else {
                                                        res.lhs = ext__ivy__stmt__flat(res.lhs, st);
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
                if(((res.lhs).tag == 6)){
                    {
                        {
                            vector__ivy__ident__ loc__del;
                            {
                                {
                                    ivyc_s1::ivy__expr loc__0;
                                    ivyc_s1::ivy__ident loc__1;
                                    {
                                        {
                                            ivy__varst self__COLON__ivy__varst;
                                            if (((res.lhs).tag == 6)) self__COLON__ivy__varst = ivyc_s1::ivy__stmt::unwrap< ivyc_s1::ivy__varst >(res.lhs);
                                            if(((res.lhs).tag == 6)){
                                                loc__0 = ext__ivy__varst__get_expr(self__COLON__ivy__varst);
                                            }
                                            else {
                                                loc__0 = ext__ivy__stmt__get_expr(res.lhs);
                                            }
                                        }
                                        loc__1 = ext__ivy__formal_ident(loc__0);
                                        {
                                            ivyc_s1::ivy__ident loc__id;
                                            {
                                                loc__id = loc__1;
                                                {
                                                    bool loc__0;
    loc__0 = (bool)___ivy_choose(0,"loc:0",16639);
                                                    {
                                                        loc__0 = ext__ivy__ident_set__mem(st.locals, loc__id);
                                                        if(!loc__0){
                                                            {
                                                                ext__vector__ivy__ident____append(loc__del, loc__id);
                                                                ext__ivy__ident_set__set(st.locals, loc__id, true);
                                                            }
                                                        }
                                                    }
                                                }
                                                {
                                                    ivy__varst self__COLON__ivy__varst;
                                                    if (((res.rhs).tag == 6)) self__COLON__ivy__varst = ivyc_s1::ivy__stmt::unwrap< ivyc_s1::ivy__varst >(res.rhs);
                                                    if(((res.rhs).tag == 6)){
                                                        res.rhs = ext__ivy__varst__flat(self__COLON__ivy__varst, st);
                                                    }
                                                    else {
                                                        {
                                                            ivy__whilest self__COLON__ivy__whilest;
                                                            if (((res.rhs).tag == 4)) self__COLON__ivy__whilest = ivyc_s1::ivy__stmt::unwrap< ivyc_s1::ivy__whilest >(res.rhs);
                                                            if(((res.rhs).tag == 4)){
                                                                res.rhs = ext__ivy__whilest__flat(self__COLON__ivy__whilest, st);
                                                            }
                                                            else {
                                                                {
                                                                    ivy__ifst self__COLON__ivy__ifst;
                                                                    if (((res.rhs).tag == 3)) self__COLON__ivy__ifst = ivyc_s1::ivy__stmt::unwrap< ivyc_s1::ivy__ifst >(res.rhs);
                                                                    if(((res.rhs).tag == 3)){
                                                                        res.rhs = ext__ivy__ifst__flat(self__COLON__ivy__ifst, st);
                                                                    }
                                                                    else {
                                                                        {
                                                                            ivy__sequence self__COLON__ivy__sequence;
                                                                            if (((res.rhs).tag == 1)) self__COLON__ivy__sequence = ivyc_s1::ivy__stmt::unwrap< ivyc_s1::ivy__sequence >(res.rhs);
                                                                            if(((res.rhs).tag == 1)){
                                                                                res.rhs = ext__ivy__sequence__flat(self__COLON__ivy__sequence, st);
                                                                            }
                                                                            else {
                                                                                {
                                                                                    ivy__asgn self__COLON__ivy__asgn;
                                                                                    if (((res.rhs).tag == 0)) self__COLON__ivy__asgn = ivyc_s1::ivy__stmt::unwrap< ivyc_s1::ivy__asgn >(res.rhs);
                                                                                    if(((res.rhs).tag == 0)){
                                                                                        res.rhs = ext__ivy__asgn__flat(self__COLON__ivy__asgn, st);
                                                                                    }
                                                                                    else {
                                                                                        res.rhs = ext__ivy__stmt__flat(res.rhs, st);
                                                                                    }
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                                ext__ivy__remove_local_vars(loc__del, st);
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
                else {
                    {
                        {
                            ivy__varst self__COLON__ivy__varst;
                            if (((res.rhs).tag == 6)) self__COLON__ivy__varst = ivyc_s1::ivy__stmt::unwrap< ivyc_s1::ivy__varst >(res.rhs);
                            if(((res.rhs).tag == 6)){
                                res.rhs = ext__ivy__varst__flat(self__COLON__ivy__varst, st);
                            }
                            else {
                                {
                                    ivy__whilest self__COLON__ivy__whilest;
                                    if (((res.rhs).tag == 4)) self__COLON__ivy__whilest = ivyc_s1::ivy__stmt::unwrap< ivyc_s1::ivy__whilest >(res.rhs);
                                    if(((res.rhs).tag == 4)){
                                        res.rhs = ext__ivy__whilest__flat(self__COLON__ivy__whilest, st);
                                    }
                                    else {
                                        {
                                            ivy__ifst self__COLON__ivy__ifst;
                                            if (((res.rhs).tag == 3)) self__COLON__ivy__ifst = ivyc_s1::ivy__stmt::unwrap< ivyc_s1::ivy__ifst >(res.rhs);
                                            if(((res.rhs).tag == 3)){
                                                res.rhs = ext__ivy__ifst__flat(self__COLON__ivy__ifst, st);
                                            }
                                            else {
                                                {
                                                    ivy__sequence self__COLON__ivy__sequence;
                                                    if (((res.rhs).tag == 1)) self__COLON__ivy__sequence = ivyc_s1::ivy__stmt::unwrap< ivyc_s1::ivy__sequence >(res.rhs);
                                                    if(((res.rhs).tag == 1)){
                                                        res.rhs = ext__ivy__sequence__flat(self__COLON__ivy__sequence, st);
                                                    }
                                                    else {
                                                        {
                                                            ivy__asgn self__COLON__ivy__asgn;
                                                            if (((res.rhs).tag == 0)) self__COLON__ivy__asgn = ivyc_s1::ivy__stmt::unwrap< ivyc_s1::ivy__asgn >(res.rhs);
                                                            if(((res.rhs).tag == 0)){
                                                                res.rhs = ext__ivy__asgn__flat(self__COLON__ivy__asgn, st);
                                                            }
                                                            else {
                                                                res.rhs = ext__ivy__stmt__flat(res.rhs, st);
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
    }
    return res;
}
ivyc_s1::cpp__stmt ivyc_s1::ext__cpp__breakst__make(ivyc_s1::annot ann){
    ivyc_s1::cpp__stmt res;
    {
        {
            cpp__breakst loc__s;
            {
                loc__s.ann = ann;
                res = ivyc_s1::cpp__stmt(5, new ivyc_s1::cpp__stmt::twrap<ivyc_s1::cpp__breakst>(loc__s));
            }
        }
    }
    return res;
}
void ivyc_s1::ext__cpp__retst__encode_int(const cpp__retst& s, pretty& b, int prio){
    {
        ext__pretty__nest(b);
        ext__pretty__extend(b, __lit<str>("return"));
        ext__pretty__extend(b, __lit<str>(" "));
        {
            cpp__pi self__COLON__cpp__pi;
            if (((s.val).tag == 3)) self__COLON__cpp__pi = ivyc_s1::cpp__expr::unwrap< ivyc_s1::cpp__pi >(s.val);
            if(((s.val).tag == 3)){
                ext__cpp__pi__encode(self__COLON__cpp__pi, b, prio);
            }
            else {
                {
                    cpp__app self__COLON__cpp__app;
                    if (((s.val).tag == 1)) self__COLON__cpp__app = ivyc_s1::cpp__expr::unwrap< ivyc_s1::cpp__app >(s.val);
                    if(((s.val).tag == 1)){
                        ext__cpp__app__encode(self__COLON__cpp__app, b, prio);
                    }
                    else {
                        {
                            cpp__symbol self__COLON__cpp__symbol;
                            if (((s.val).tag == 0)) self__COLON__cpp__symbol = ivyc_s1::cpp__expr::unwrap< ivyc_s1::cpp__symbol >(s.val);
                            if(((s.val).tag == 0)){
                                ext__cpp__symbol__encode(self__COLON__cpp__symbol, b, prio);
                            }
                            else {
                                ext__cpp__expr__encode(s.val, b, prio);
                            }
                        }
                    }
                }
            }
        }
        ext__pretty__extend(b, __lit<str>(";"));
        ext__pretty__unnest(b);
    }
}
void ivyc_s1::ext__vector__ivy__expr____set(vector__ivy__expr__& a, unsigned long long x, ivyc_s1::ivy__expr y){
    {

        if (0 <= x && x < (unsigned long long)a.size())
            a[x] = y;
    }
}
ivyc_s1::cpp__symbol ivyc_s1::ext__ivy__symbol__to_cpp_int(const ivy__symbol& s, ivy__tocppst& st){
    ivyc_s1::cpp__symbol res;
    res.vrb = (cpp__verb)___ivy_choose(0,"fml:res",0);
    {
        {
            ivy__verb loc__0;
    loc__0 = (ivy__verb)___ivy_choose(0,"loc:0",16648);
            {
                loc__0 = ext__ivy__symbol__get_verb(s);
                {
                    ivy__verb loc__vrb;
    loc__vrb = (ivy__verb)___ivy_choose(0,"loc:vrb",16647);
                    {
                        loc__vrb = loc__0;
                        if((loc__vrb == ivy__verb__not)){
                            res.name = ext__cpp__strident__make(__lit<str>("!"));
                        }
                        else {
                            if((loc__vrb == ivy__verb__equals)){
                                res.name = ext__cpp__strident__make(__lit<str>("=="));
                            }
                            else {
                                if((loc__vrb == ivy__verb__notequals)){
                                    res.name = ext__cpp__strident__make(__lit<str>("!="));
                                }
                                else {
                                    if((loc__vrb == ivy__verb__ite)){
                                        res.name = ext__cpp__strident__make(__lit<str>("?"));
                                    }
                                    else {
                                        if((st.is_member && (s.name == st.this_ident) && !st.dot_rhs)){
                                            {
                                                res.name = ext__cpp__strident__make(__lit<str>("(*this)"));
                                            }
                                        }
                                        else {
                                            {
                                                {
                                                    ivyc_s1::ivy__ident loc__id;
                                                    {
                                                        loc__id = s.name;
                                                        {
                                                            bool loc__0;
    loc__0 = (bool)___ivy_choose(0,"loc:0",16644);
                                                            {
                                                                loc__0 = ext__ivy__local_tracker__mem(st.locals, loc__id);
                                                                if(!loc__0){
                                                                    {
                                                                        ivyc_s1::ivy__ident __tmp69;
                                                                        __tmp69 = s.name; ext__ivy__fix_object_clash(__tmp69, st);
                                                                        loc__id = __tmp69;
                                                                    }
                                                                }
                                                            }
                                                        }
                                                        {
                                                            ivy__dotident self__COLON__ivy__dotident;
                                                            if (((loc__id).tag == 2)) self__COLON__ivy__dotident = ivyc_s1::ivy__ident::unwrap< ivyc_s1::ivy__dotident >(loc__id);
                                                            if(((loc__id).tag == 2)){
                                                                res.name = ext__ivy__dotident__to_cpp(self__COLON__ivy__dotident, st.native);
                                                            }
                                                            else {
                                                                {
                                                                    ivy__strident self__COLON__ivy__strident;
                                                                    if (((loc__id).tag == 0)) self__COLON__ivy__strident = ivyc_s1::ivy__ident::unwrap< ivyc_s1::ivy__strident >(loc__id);
                                                                    if(((loc__id).tag == 0)){
                                                                        res.name = ext__ivy__strident__to_cpp(self__COLON__ivy__strident, st.native);
                                                                    }
                                                                    else {
                                                                        res.name = ext__ivy__ident__to_cpp(loc__id, st.native);
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                        {
                            str loc__0;
                            {
                                {
                                    cpp__dotident self__COLON__cpp__dotident;
                                    if (((res.name).tag == 2)) self__COLON__cpp__dotident = ivyc_s1::cpp__ident::unwrap< ivyc_s1::cpp__dotident >(res.name);
                                    if(((res.name).tag == 2)){
                                        loc__0 = ext__cpp__dotident__to_str(self__COLON__cpp__dotident);
                                    }
                                    else {
                                        {
                                            cpp__strident self__COLON__cpp__strident;
                                            if (((res.name).tag == 0)) self__COLON__cpp__strident = ivyc_s1::cpp__ident::unwrap< ivyc_s1::cpp__strident >(res.name);
                                            if(((res.name).tag == 0)){
                                                loc__0 = ext__cpp__strident__to_str(self__COLON__cpp__strident);
                                            }
                                            else {
                                                loc__0 = ext__cpp__ident__to_str(res.name);
                                            }
                                        }
                                    }
                                }
                                res.vrb = cpp__str_to_verb[loc__0];
                            }
                        }
                    }
                }
            }
        }
    }
    return res;
}
ivyc_s1::ivy__undefined ivyc_s1::ext__ivy__undefined__make(ivyc_s1::ivy__ident n){
    ivyc_s1::ivy__undefined res;
    {
        res.n = n;
    }
    return res;
}
ivyc_s1::cpp__expr ivyc_s1::ext__cpp__arrow__make(ivyc_s1::cpp__expr lhs, ivyc_s1::cpp__expr rhs, ivyc_s1::annot ann){
    ivyc_s1::cpp__expr res;
    {
        cpp__app loc__s;
        {
            loc__s.func = ext__cpp__symbol__makestr(__lit<str>("->"), ann);
            ext__vector__cpp__expr____append(loc__s.args, lhs);
            ext__vector__cpp__expr____append(loc__s.args, rhs);
            loc__s.ann = ann;
            res = ivyc_s1::cpp__expr(1, new ivyc_s1::cpp__expr::twrap<ivyc_s1::cpp__app>(loc__s));
        }
    }
    return res;
}
ivyc_s1::str ivyc_s1::ext__ivy__mangle(ivyc_s1::cpp__ident s){
    ivyc_s1::str res;
    if(((s).tag == 2)){
        {
            {
                ivyc_s1::cpp__ident loc__0;
                {
                    {
                        cpp__dotident self__COLON__cpp__dotident;
                        if (((s).tag == 2)) self__COLON__cpp__dotident = ivyc_s1::cpp__ident::unwrap< ivyc_s1::cpp__dotident >(s);
                        if(((s).tag == 2)){
                            loc__0 = ext__cpp__dotident__get_namesp(self__COLON__cpp__dotident);
                        }
                        else {
                            loc__0 = ext__cpp__ident__get_namesp(s);
                        }
                    }
                    res = ext__ivy__mangle(loc__0);
                }
            }
            ext__str__extend(res, __lit<str>("__"));
            {
                ivyc_s1::cpp__ident loc__0;
                str loc__1;
                {
                    {
                        cpp__dotident self__COLON__cpp__dotident;
                        if (((s).tag == 2)) self__COLON__cpp__dotident = ivyc_s1::cpp__ident::unwrap< ivyc_s1::cpp__dotident >(s);
                        if(((s).tag == 2)){
                            loc__0 = ext__cpp__dotident__get_member(self__COLON__cpp__dotident);
                        }
                        else {
                            loc__0 = ext__cpp__ident__get_member(s);
                        }
                    }
                    {
                        cpp__dotident self__COLON__cpp__dotident;
                        if (((loc__0).tag == 2)) self__COLON__cpp__dotident = ivyc_s1::cpp__ident::unwrap< ivyc_s1::cpp__dotident >(loc__0);
                        if(((loc__0).tag == 2)){
                            loc__1 = ext__cpp__dotident__to_str(self__COLON__cpp__dotident);
                        }
                        else {
                            {
                                cpp__strident self__COLON__cpp__strident;
                                if (((loc__0).tag == 0)) self__COLON__cpp__strident = ivyc_s1::cpp__ident::unwrap< ivyc_s1::cpp__strident >(loc__0);
                                if(((loc__0).tag == 0)){
                                    loc__1 = ext__cpp__strident__to_str(self__COLON__cpp__strident);
                                }
                                else {
                                    loc__1 = ext__cpp__ident__to_str(loc__0);
                                }
                            }
                        }
                    }
                    ext__str__extend(res, loc__1);
                }
            }
        }
    }
    else {
        {
            cpp__dotident self__COLON__cpp__dotident;
            if (((s).tag == 2)) self__COLON__cpp__dotident = ivyc_s1::cpp__ident::unwrap< ivyc_s1::cpp__dotident >(s);
            if(((s).tag == 2)){
                res = ext__cpp__dotident__to_str(self__COLON__cpp__dotident);
            }
            else {
                {
                    cpp__strident self__COLON__cpp__strident;
                    if (((s).tag == 0)) self__COLON__cpp__strident = ivyc_s1::cpp__ident::unwrap< ivyc_s1::cpp__strident >(s);
                    if(((s).tag == 0)){
                        res = ext__cpp__strident__to_str(self__COLON__cpp__strident);
                    }
                    else {
                        res = ext__cpp__ident__to_str(s);
                    }
                }
            }
        }
    }
    return res;
}
void ivyc_s1::ext__ivy__file_not_found__encode(const ivy__file_not_found& e, pretty& b){
    {
        ext__pretty__extend(b, __lit<str>("File not found:"));
        ext__pretty__extend(b, __lit<str>(" "));
        ext__pretty__extend(b, e.n);
        ext__pretty__newline(b);
    }
}
void ivyc_s1::ext__ivy__objectdc__reg_member(const ivy__objectdc& s, ivy__tocppst& st){
    {
        {
            ivyc_s1::ivy__ident loc__0;
            {
                {
                    ivy__symbol self__COLON__ivy__symbol;
                    if (((s.name).tag == 0)) self__COLON__ivy__symbol = ivyc_s1::ivy__expr::unwrap< ivyc_s1::ivy__symbol >(s.name);
                    if(((s.name).tag == 0)){
                        loc__0 = ext__ivy__symbol__get_name(self__COLON__ivy__symbol);
                    }
                    else {
                        loc__0 = ext__ivy__expr__get_name(s.name);
                    }
                }
                ext__ivy__ident_set__set(st.objects, loc__0, true);
            }
        }
    }
}
ivyc_s1::cpp__ident ivyc_s1::ext__cpp__ident__get_namesp(ivyc_s1::cpp__ident s){
    ivyc_s1::cpp__ident res;
    {
    }
    return res;
}
unsigned long long ivyc_s1::ext__vector__ivy__expr____domain__next(unsigned long long x){
    unsigned long long y;
    y = (unsigned long long)___ivy_choose(0,"fml:y",0);
    {
        y = (x + 1);
    }
    return y;
}
void ivyc_s1::ext__pretty__add_length(pretty& self, unsigned long long len, unsigned long long at){
    {
        if((self.st.begin < at)){
            {
                unsigned long long loc__0;
    loc__0 = (unsigned long long)___ivy_choose(0,"loc:0",16656);
                {
                    loc__0 = ext__vector__pretty__token____domain__prev(at);
                    {
                        pretty__token loc__prev;
    loc__prev.pair = (bool)___ivy_choose(0,"loc:prev",16655);
    loc__prev.tdepth = (unsigned long long)___ivy_choose(0,"loc:prev",16655);
    loc__prev.second = (unsigned long long)___ivy_choose(0,"loc:prev",16655);
                        {
                            loc__prev = vector__pretty__token____value(self.tokens,loc__0);
                            if(loc__prev.pair){
                                {
                                    pretty__token loc__newtok;
    loc__newtok.pair = (bool)___ivy_choose(0,"loc:newtok",16654);
    loc__newtok.tdepth = (unsigned long long)___ivy_choose(0,"loc:newtok",16654);
    loc__newtok.second = (unsigned long long)___ivy_choose(0,"loc:newtok",16654);
                                    {
                                        loc__newtok = loc__prev;
                                        loc__newtok.second = (loc__newtok.second + len);
                                        {
                                            unsigned long long loc__0;
    loc__0 = (unsigned long long)___ivy_choose(0,"loc:0",16653);
                                            {
                                                loc__0 = ext__vector__pretty__token____domain__prev(at);
                                                ext__vector__pretty__token____set(self.tokens, loc__0, loc__newtok);
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
    }
}
void ivyc_s1::ext__ivy__auto_defd(ivyc_s1::ivy__expr s, ivy__flatst& st){
    {
        bool loc__0;
    loc__0 = (bool)___ivy_choose(0,"loc:0",16658);
        {
            {
                ivy__app self__COLON__ivy__app;
                if (((s).tag == 1)) self__COLON__ivy__app = ivyc_s1::ivy__expr::unwrap< ivyc_s1::ivy__app >(s);
                if(((s).tag == 1)){
                    loc__0 = ext__ivy__app__is(self__COLON__ivy__app, ivy__verb__colon);
                }
                else {
                    loc__0 = ext__ivy__expr__is(s, ivy__verb__colon);
                }
            }
            if(loc__0){
                {
                    {
                        ivyc_s1::ivy__expr loc__0;
                        {
                            {
                                ivy__app self__COLON__ivy__app;
                                if (((s).tag == 1)) self__COLON__ivy__app = ivyc_s1::ivy__expr::unwrap< ivyc_s1::ivy__app >(s);
                                if(((s).tag == 1)){
                                    loc__0 = ext__ivy__app__get_arg(self__COLON__ivy__app, 1);
                                }
                                else {
                                    loc__0 = ext__ivy__expr__get_arg(s, 1);
                                }
                            }
                            ext__ivy__auto_defd_rec(loc__0, st);
                        }
                    }
                }
            }
        }
    }
}
void ivyc_s1::ext__cpp__dotident__encode(const cpp__dotident& s, pretty& b, int prio){
    {
        {
            cpp__dotident self__COLON__cpp__dotident;
            if (((s.namesp).tag == 2)) self__COLON__cpp__dotident = ivyc_s1::cpp__ident::unwrap< ivyc_s1::cpp__dotident >(s.namesp);
            if(((s.namesp).tag == 2)){
                ext__cpp__dotident__encode(self__COLON__cpp__dotident, b, 0);
            }
            else {
                {
                    cpp__numident self__COLON__cpp__numident;
                    if (((s.namesp).tag == 1)) self__COLON__cpp__numident = ivyc_s1::cpp__ident::unwrap< ivyc_s1::cpp__numident >(s.namesp);
                    if(((s.namesp).tag == 1)){
                        ext__cpp__numident__encode(self__COLON__cpp__numident, b, 0);
                    }
                    else {
                        {
                            cpp__strident self__COLON__cpp__strident;
                            if (((s.namesp).tag == 0)) self__COLON__cpp__strident = ivyc_s1::cpp__ident::unwrap< ivyc_s1::cpp__strident >(s.namesp);
                            if(((s.namesp).tag == 0)){
                                ext__cpp__strident__encode(self__COLON__cpp__strident, b, 0);
                            }
                            else {
                                ext__cpp__ident__encode(s.namesp, b, 0);
                            }
                        }
                    }
                }
            }
        }
        ext__pretty__extend(b, (true ? __lit<str>("::") : __lit<str>(".")));
        ext__cpp__strident__encode(s.member, b, 0);
    }
}
unsigned long long ivyc_s1::ext__vector__ivy__prototype_argument____domain__next(unsigned long long x){
    unsigned long long y;
    y = (unsigned long long)___ivy_choose(0,"fml:y",0);
    {
        y = (x + 1);
    }
    return y;
}
void ivyc_s1::__tick(int __timeout){
}
ivyc_s1::ivyc_s1(str input_file_name){
#ifdef _WIN32
mutex = CreateMutex(NULL,FALSE,NULL);
#else
pthread_mutex_init(&mutex,NULL);
#endif
__lock();
    __CARD__vector__ivy__stmt____domain = 0;
    __CARD__vector__ivy__lvalue_count____domain = 0;
    __CARD__vector__ivy__decl____domain = 0;
    __CARD__pos = 0;
    __CARD__char = 0;
    __CARD__vector__cpp__decl____domain = 0;
    __CARD__vector__cpp__ident____domain = 0;
    __CARD__vector__ivy__expr____domain = 0;
    __CARD__vector__cpp__expr____domain = 0;
    __CARD__vector__ivy__type_context__stack_entry____domain = 0;
    __CARD__vector__pretty__token____domain = 0;
    __CARD__vector__ivy__ident____domain = 0;
    __CARD__vector__cpp__stmt____domain = 0;
    __CARD__vector__cpp__simpletype____domain = 0;
    __CARD__vector__pretty__state____domain = 0;
    __CARD__vector__ivy__prototype_argument____domain = 0;
    __CARD__vector__pos____domain = 0;
    __CARD__vector__str____domain = 0;
    __CARD__vector__ivy__error____domain = 0;
    __CARD__vector__ivy__access_path____domain = 0;
    __CARD__priority = 0;
for (ivy__verb X__0 = (ivy__verb)0; (int) X__0 < 32; X__0 = (ivy__verb)(((int)X__0) + 1)) {
    ivy__verb_out_to_in[X__0] = (bool)___ivy_choose(0,"init",0);
}
for (ivy__verb X__0 = (ivy__verb)0; (int) X__0 < 32; X__0 = (ivy__verb)(((int)X__0) + 1)) {
    ivy__verb_to_arity[X__0] = (unsigned long long)___ivy_choose(0,"init",0);
}
struct __thunk__0 : thunk<ivyc_s1::str,ivyc_s1::cpp__verb>{
    __thunk__0()  {
    }
    ivyc_s1::cpp__verb operator()(const ivyc_s1::str &arg){
        cpp__verb __tmp70;
    __tmp70 = (cpp__verb)___ivy_choose(0,"init",0);
        return __tmp70;
    }
};
cpp__str_to_verb = hash_thunk<ivyc_s1::str,ivyc_s1::cpp__verb>(new __thunk__0());
for (cpp__verb X__0 = (cpp__verb)0; (int) X__0 < 32; X__0 = (cpp__verb)(((int)X__0) + 1)) {
    cpp__verb_to_prio[X__0] = (int)___ivy_choose(0,"init",0);
}
    this->input_file_name = input_file_name;
struct __thunk__1 : thunk<ivyc_s1::str,bool>{
    __thunk__1()  {
    }
    bool operator()(const ivyc_s1::str &arg){
        bool __tmp71;
    __tmp71 = (bool)___ivy_choose(0,"init",0);
        return __tmp71;
    }
};
ivy__cpp_reserved_word = hash_thunk<ivyc_s1::str,bool>(new __thunk__1());
for (ivy__verb X__0 = (ivy__verb)0; (int) X__0 < 32; X__0 = (ivy__verb)(((int)X__0) + 1)) {
    ivy__verb_mono[X__0] = (bool)___ivy_choose(0,"init",0);
}
    _generating = (bool)___ivy_choose(0,"init",0);
for (ivy__verb X__0 = (ivy__verb)0; (int) X__0 < 32; X__0 = (ivy__verb)(((int)X__0) + 1)) {
    ivy__verb_first_to_in[X__0] = (bool)___ivy_choose(0,"init",0);
}
for (ivy__verb X__0 = (ivy__verb)0; (int) X__0 < 32; X__0 = (ivy__verb)(((int)X__0) + 1)) {
    ivy__verb_to_prio[X__0] = (int)___ivy_choose(0,"init",0);
}
for (ivy__verb X__0 = (ivy__verb)0; (int) X__0 < 32; X__0 = (ivy__verb)(((int)X__0) + 1)) {
    ivy__verb_in_to_out[X__0] = (bool)___ivy_choose(0,"init",0);
}
struct __thunk__2 : thunk<ivyc_s1::str,ivyc_s1::ivy__verb>{
    __thunk__2()  {
    }
    ivyc_s1::ivy__verb operator()(const ivyc_s1::str &arg){
        ivy__verb __tmp72;
    __tmp72 = (ivy__verb)___ivy_choose(0,"init",0);
        return __tmp72;
    }
};
ivy__str_to_verb = hash_thunk<ivyc_s1::str,ivyc_s1::ivy__verb>(new __thunk__2());
for (cpp__verb X__0 = (cpp__verb)0; (int) X__0 < 32; X__0 = (cpp__verb)(((int)X__0) + 1)) {
    cpp__verb_to_arity[X__0] = (unsigned long long)___ivy_choose(0,"init",0);
}
}
ivyc_s1::~ivyc_s1(){
    __lock(); // otherwise, thread may die holding lock!
    for (unsigned i = 0; i < thread_ids.size(); i++){
#ifdef _WIN32
       // No idea how to cancel a thread on Windows. We just suspend it
       // so it can't cause any harm as we destruct this object.
       SuspendThread(thread_ids[i]);
#else
        pthread_cancel(thread_ids[i]);
        pthread_join(thread_ids[i],NULL);
#endif
    }
    __unlock();
}
std::ostream &operator <<(std::ostream &s, const ivyc_s1::pretty__token &t){
    s<<"{";
    s<< "pair:";
    s << t.pair;
    s<<",";
    s<< "tdepth:";
    s << t.tdepth;
    s<<",";
    s<< "first:";
    s << t.first;
    s<<",";
    s<< "second:";
    s << t.second;
    s<<"}";
    return s;
}
template <>
void  __ser<ivyc_s1::pretty__token>(ivy_ser &res, const ivyc_s1::pretty__token&t){
    res.open_struct();
    res.open_field("pair");
    __ser<bool>(res,t.pair);
    res.close_field();
    res.open_field("tdepth");
    __ser<unsigned long long>(res,t.tdepth);
    res.close_field();
    res.open_field("first");
    __ser<ivyc_s1::str>(res,t.first);
    res.close_field();
    res.open_field("second");
    __ser<unsigned long long>(res,t.second);
    res.close_field();
    res.close_struct();
}
std::ostream &operator <<(std::ostream &s, const ivyc_s1::pretty__state &t){
    s<<"{";
    s<< "begin:";
    s << t.begin;
    s<<",";
    s<< "total:";
    s << t.total;
    s<<"}";
    return s;
}
template <>
void  __ser<ivyc_s1::pretty__state>(ivy_ser &res, const ivyc_s1::pretty__state&t){
    res.open_struct();
    res.open_field("begin");
    __ser<unsigned long long>(res,t.begin);
    res.close_field();
    res.open_field("total");
    __ser<unsigned long long>(res,t.total);
    res.close_field();
    res.close_struct();
}
std::ostream &operator <<(std::ostream &s, const ivyc_s1::pretty &t){
    s<<"{";
    s<< "tokens:";
    s << t.tokens;
    s<<",";
    s<< "st:";
    s << t.st;
    s<<",";
    s<< "maxline:";
    s << t.maxline;
    s<<",";
    s<< "indent:";
    s << t.indent;
    s<<",";
    s<< "whitespace:";
    s << t.whitespace;
    s<<",";
    s<< "states:";
    s << t.states;
    s<<",";
    s<< "stack:";
    s << t.stack;
    s<<",";
    s<< "output:";
    s << t.output;
    s<<",";
    s<< "space:";
    s << t.space;
    s<<",";
    s<< "depth:";
    s << t.depth;
    s<<",";
    s<< "cppstyle:";
    s << t.cppstyle;
    s<<"}";
    return s;
}
template <>
void  __ser<ivyc_s1::pretty>(ivy_ser &res, const ivyc_s1::pretty&t){
    res.open_struct();
    res.open_field("tokens");
    __ser<ivyc_s1::vector__pretty__token__>(res,t.tokens);
    res.close_field();
    res.open_field("st");
    __ser<ivyc_s1::pretty__state>(res,t.st);
    res.close_field();
    res.open_field("maxline");
    __ser<unsigned long long>(res,t.maxline);
    res.close_field();
    res.open_field("indent");
    __ser<unsigned long long>(res,t.indent);
    res.close_field();
    res.open_field("whitespace");
    __ser<ivyc_s1::str>(res,t.whitespace);
    res.close_field();
    res.open_field("states");
    __ser<ivyc_s1::vector__pretty__state__>(res,t.states);
    res.close_field();
    res.open_field("stack");
    __ser<ivyc_s1::vector__pos__>(res,t.stack);
    res.close_field();
    res.open_field("output");
    __ser<ivyc_s1::str>(res,t.output);
    res.close_field();
    res.open_field("space");
    __ser<unsigned long long>(res,t.space);
    res.close_field();
    res.open_field("depth");
    __ser<unsigned long long>(res,t.depth);
    res.close_field();
    res.open_field("cppstyle");
    __ser<bool>(res,t.cppstyle);
    res.close_field();
    res.close_struct();
}
std::ostream &operator <<(std::ostream &s, const ivyc_s1::annot_i &t){
    s<<"{";
    s<< "comments:";
    s << t.comments;
    s<<",";
    s<< "line:";
    s << t.line;
    s<<",";
    s<< "file:";
    s << t.file;
    s<<"}";
    return s;
}
template <>
void  __ser<ivyc_s1::annot_i>(ivy_ser &res, const ivyc_s1::annot_i&t){
    res.open_struct();
    res.open_field("comments");
    __ser<ivyc_s1::vector__str__>(res,t.comments);
    res.close_field();
    res.open_field("line");
    __ser<unsigned long long>(res,t.line);
    res.close_field();
    res.open_field("file");
    __ser<ivyc_s1::str>(res,t.file);
    res.close_field();
    res.close_struct();
}
std::ostream &operator <<(std::ostream &s, const ivyc_s1::pstate &t){
    s<<"{";
    s<< "b:";
    s << t.b;
    s<<",";
    s<< "p:";
    s << t.p;
    s<<",";
    s<< "tok:";
    s << t.tok;
    s<<",";
    s<< "ann:";
    s << t.ann;
    s<<",";
    s<< "ok:";
    s << t.ok;
    s<<"}";
    return s;
}
template <>
void  __ser<ivyc_s1::pstate>(ivy_ser &res, const ivyc_s1::pstate&t){
    res.open_struct();
    res.open_field("b");
    __ser<ivyc_s1::str>(res,t.b);
    res.close_field();
    res.open_field("p");
    __ser<unsigned long long>(res,t.p);
    res.close_field();
    res.open_field("tok");
    __ser<ivyc_s1::str>(res,t.tok);
    res.close_field();
    res.open_field("ann");
    __ser<ivyc_s1::annot_i>(res,t.ann);
    res.close_field();
    res.open_field("ok");
    __ser<bool>(res,t.ok);
    res.close_field();
    res.close_struct();
}
std::ostream &operator <<(std::ostream &s, const ivyc_s1::ivy__strident &t){
    s<<"{";
    s<< "val:";
    s << t.val;
    s<<",";
    s<< "subscrs:";
    s << t.subscrs;
    s<<"}";
    return s;
}
template <>
void  __ser<ivyc_s1::ivy__strident>(ivy_ser &res, const ivyc_s1::ivy__strident&t){
    res.open_struct();
    res.open_field("val");
    __ser<ivyc_s1::str>(res,t.val);
    res.close_field();
    res.open_field("subscrs");
    __ser<ivyc_s1::vector__ivy__ident__>(res,t.subscrs);
    res.close_field();
    res.close_struct();
}
std::ostream &operator <<(std::ostream &s, const ivyc_s1::ivy__numident &t){
    s<<"{";
    s<< "val:";
    s << t.val;
    s<<"}";
    return s;
}
template <>
void  __ser<ivyc_s1::ivy__numident>(ivy_ser &res, const ivyc_s1::ivy__numident&t){
    res.open_struct();
    res.open_field("val");
    __ser<unsigned long long>(res,t.val);
    res.close_field();
    res.close_struct();
}
std::ostream &operator <<(std::ostream &s, const ivyc_s1::ivy__dotident &t){
    s<<"{";
    s<< "namesp:";
    s << t.namesp;
    s<<",";
    s<< "member:";
    s << t.member;
    s<<"}";
    return s;
}
template <>
void  __ser<ivyc_s1::ivy__dotident>(ivy_ser &res, const ivyc_s1::ivy__dotident&t){
    res.open_struct();
    res.open_field("namesp");
    __ser<ivyc_s1::ivy__ident>(res,t.namesp);
    res.close_field();
    res.open_field("member");
    __ser<ivyc_s1::ivy__strident>(res,t.member);
    res.close_field();
    res.close_struct();
}
std::ostream &operator <<(std::ostream &s, const ivyc_s1::ivy__symbol &t){
    s<<"{";
    s<< "name:";
    s << t.name;
    s<<",";
    s<< "vrb:";
    s << t.vrb;
    s<<",";
    s<< "ann:";
    s << t.ann;
    s<<"}";
    return s;
}
template <>
void  __ser<ivyc_s1::ivy__symbol>(ivy_ser &res, const ivyc_s1::ivy__symbol&t){
    res.open_struct();
    res.open_field("name");
    __ser<ivyc_s1::ivy__ident>(res,t.name);
    res.close_field();
    res.open_field("vrb");
    __ser<ivyc_s1::ivy__verb>(res,t.vrb);
    res.close_field();
    res.open_field("ann");
    __ser<ivyc_s1::annot>(res,t.ann);
    res.close_field();
    res.close_struct();
}
std::ostream &operator <<(std::ostream &s, const ivyc_s1::ivy__app &t){
    s<<"{";
    s<< "func:";
    s << t.func;
    s<<",";
    s<< "args:";
    s << t.args;
    s<<",";
    s<< "ann:";
    s << t.ann;
    s<<"}";
    return s;
}
template <>
void  __ser<ivyc_s1::ivy__app>(ivy_ser &res, const ivyc_s1::ivy__app&t){
    res.open_struct();
    res.open_field("func");
    __ser<ivyc_s1::ivy__expr>(res,t.func);
    res.close_field();
    res.open_field("args");
    __ser<ivyc_s1::vector__ivy__expr__>(res,t.args);
    res.close_field();
    res.open_field("ann");
    __ser<ivyc_s1::annot>(res,t.ann);
    res.close_field();
    res.close_struct();
}
std::ostream &operator <<(std::ostream &s, const ivyc_s1::ivy__variable &t){
    s<<"{";
    s<< "idx:";
    s << t.idx;
    s<<",";
    s<< "ann:";
    s << t.ann;
    s<<"}";
    return s;
}
template <>
void  __ser<ivyc_s1::ivy__variable>(ivy_ser &res, const ivyc_s1::ivy__variable&t){
    res.open_struct();
    res.open_field("idx");
    __ser<unsigned long long>(res,t.idx);
    res.close_field();
    res.open_field("ann");
    __ser<ivyc_s1::annot>(res,t.ann);
    res.close_field();
    res.close_struct();
}
std::ostream &operator <<(std::ostream &s, const ivyc_s1::ivy__pi &t){
    s<<"{";
    s<< "vars:";
    s << t.vars;
    s<<",";
    s<< "body:";
    s << t.body;
    s<<",";
    s<< "ann:";
    s << t.ann;
    s<<"}";
    return s;
}
template <>
void  __ser<ivyc_s1::ivy__pi>(ivy_ser &res, const ivyc_s1::ivy__pi&t){
    res.open_struct();
    res.open_field("vars");
    __ser<ivyc_s1::vector__ivy__expr__>(res,t.vars);
    res.close_field();
    res.open_field("body");
    __ser<ivyc_s1::ivy__expr>(res,t.body);
    res.close_field();
    res.open_field("ann");
    __ser<ivyc_s1::annot>(res,t.ann);
    res.close_field();
    res.close_struct();
}
std::ostream &operator <<(std::ostream &s, const ivyc_s1::ivy__asgn &t){
    s<<"{";
    s<< "lhs:";
    s << t.lhs;
    s<<",";
    s<< "rhs:";
    s << t.rhs;
    s<<",";
    s<< "ann:";
    s << t.ann;
    s<<"}";
    return s;
}
template <>
void  __ser<ivyc_s1::ivy__asgn>(ivy_ser &res, const ivyc_s1::ivy__asgn&t){
    res.open_struct();
    res.open_field("lhs");
    __ser<ivyc_s1::ivy__expr>(res,t.lhs);
    res.close_field();
    res.open_field("rhs");
    __ser<ivyc_s1::ivy__expr>(res,t.rhs);
    res.close_field();
    res.open_field("ann");
    __ser<ivyc_s1::annot>(res,t.ann);
    res.close_field();
    res.close_struct();
}
std::ostream &operator <<(std::ostream &s, const ivyc_s1::ivy__sequence &t){
    s<<"{";
    s<< "lhs:";
    s << t.lhs;
    s<<",";
    s<< "rhs:";
    s << t.rhs;
    s<<",";
    s<< "ann:";
    s << t.ann;
    s<<"}";
    return s;
}
template <>
void  __ser<ivyc_s1::ivy__sequence>(ivy_ser &res, const ivyc_s1::ivy__sequence&t){
    res.open_struct();
    res.open_field("lhs");
    __ser<ivyc_s1::ivy__stmt>(res,t.lhs);
    res.close_field();
    res.open_field("rhs");
    __ser<ivyc_s1::ivy__stmt>(res,t.rhs);
    res.close_field();
    res.open_field("ann");
    __ser<ivyc_s1::annot>(res,t.ann);
    res.close_field();
    res.close_struct();
}
std::ostream &operator <<(std::ostream &s, const ivyc_s1::ivy__skipst &t){
    s<<"{";
    s<< "ann:";
    s << t.ann;
    s<<"}";
    return s;
}
template <>
void  __ser<ivyc_s1::ivy__skipst>(ivy_ser &res, const ivyc_s1::ivy__skipst&t){
    res.open_struct();
    res.open_field("ann");
    __ser<ivyc_s1::annot>(res,t.ann);
    res.close_field();
    res.close_struct();
}
std::ostream &operator <<(std::ostream &s, const ivyc_s1::ivy__ifst &t){
    s<<"{";
    s<< "cond:";
    s << t.cond;
    s<<",";
    s<< "thenst:";
    s << t.thenst;
    s<<",";
    s<< "elsest:";
    s << t.elsest;
    s<<",";
    s<< "ann:";
    s << t.ann;
    s<<"}";
    return s;
}
template <>
void  __ser<ivyc_s1::ivy__ifst>(ivy_ser &res, const ivyc_s1::ivy__ifst&t){
    res.open_struct();
    res.open_field("cond");
    __ser<ivyc_s1::ivy__expr>(res,t.cond);
    res.close_field();
    res.open_field("thenst");
    __ser<ivyc_s1::ivy__stmt>(res,t.thenst);
    res.close_field();
    res.open_field("elsest");
    __ser<ivyc_s1::ivy__stmt>(res,t.elsest);
    res.close_field();
    res.open_field("ann");
    __ser<ivyc_s1::annot>(res,t.ann);
    res.close_field();
    res.close_struct();
}
std::ostream &operator <<(std::ostream &s, const ivyc_s1::ivy__whilest &t){
    s<<"{";
    s<< "cond:";
    s << t.cond;
    s<<",";
    s<< "body:";
    s << t.body;
    s<<",";
    s<< "ann:";
    s << t.ann;
    s<<"}";
    return s;
}
template <>
void  __ser<ivyc_s1::ivy__whilest>(ivy_ser &res, const ivyc_s1::ivy__whilest&t){
    res.open_struct();
    res.open_field("cond");
    __ser<ivyc_s1::ivy__expr>(res,t.cond);
    res.close_field();
    res.open_field("body");
    __ser<ivyc_s1::ivy__stmt>(res,t.body);
    res.close_field();
    res.open_field("ann");
    __ser<ivyc_s1::annot>(res,t.ann);
    res.close_field();
    res.close_struct();
}
std::ostream &operator <<(std::ostream &s, const ivyc_s1::ivy__breakst &t){
    s<<"{";
    s<< "ann:";
    s << t.ann;
    s<<"}";
    return s;
}
template <>
void  __ser<ivyc_s1::ivy__breakst>(ivy_ser &res, const ivyc_s1::ivy__breakst&t){
    res.open_struct();
    res.open_field("ann");
    __ser<ivyc_s1::annot>(res,t.ann);
    res.close_field();
    res.close_struct();
}
std::ostream &operator <<(std::ostream &s, const ivyc_s1::ivy__prototype_argument &t){
    s<<"{";
    s<< "name:";
    s << t.name;
    s<<",";
    s<< "is_input:";
    s << t.is_input;
    s<<",";
    s<< "inpos:";
    s << t.inpos;
    s<<",";
    s<< "is_output:";
    s << t.is_output;
    s<<",";
    s<< "outpos:";
    s << t.outpos;
    s<<",";
    s<< "is_ref:";
    s << t.is_ref;
    s<<",";
    s<< "is_const:";
    s << t.is_const;
    s<<"}";
    return s;
}
template <>
void  __ser<ivyc_s1::ivy__prototype_argument>(ivy_ser &res, const ivyc_s1::ivy__prototype_argument&t){
    res.open_struct();
    res.open_field("name");
    __ser<ivyc_s1::ivy__expr>(res,t.name);
    res.close_field();
    res.open_field("is_input");
    __ser<bool>(res,t.is_input);
    res.close_field();
    res.open_field("inpos");
    __ser<unsigned long long>(res,t.inpos);
    res.close_field();
    res.open_field("is_output");
    __ser<bool>(res,t.is_output);
    res.close_field();
    res.open_field("outpos");
    __ser<unsigned long long>(res,t.outpos);
    res.close_field();
    res.open_field("is_ref");
    __ser<bool>(res,t.is_ref);
    res.close_field();
    res.open_field("is_const");
    __ser<bool>(res,t.is_const);
    res.close_field();
    res.close_struct();
}
std::ostream &operator <<(std::ostream &s, const ivyc_s1::ivy__prototype &t){
    s<<"{";
    s<< "args:";
    s << t.args;
    s<<",";
    s<< "has_ret:";
    s << t.has_ret;
    s<<",";
    s<< "ret:";
    s << t.ret;
    s<<"}";
    return s;
}
template <>
void  __ser<ivyc_s1::ivy__prototype>(ivy_ser &res, const ivyc_s1::ivy__prototype&t){
    res.open_struct();
    res.open_field("args");
    __ser<ivyc_s1::vector__ivy__prototype_argument__>(res,t.args);
    res.close_field();
    res.open_field("has_ret");
    __ser<bool>(res,t.has_ret);
    res.close_field();
    res.open_field("ret");
    __ser<ivyc_s1::ivy__prototype_argument>(res,t.ret);
    res.close_field();
    res.close_struct();
}
std::ostream &operator <<(std::ostream &s, const ivyc_s1::ivy__actdc &t){
    s<<"{";
    s<< "name:";
    s << t.name;
    s<<",";
    s<< "kind:";
    s << t.kind;
    s<<",";
    s<< "inputs:";
    s << t.inputs;
    s<<",";
    s<< "outputs:";
    s << t.outputs;
    s<<",";
    s<< "has_body:";
    s << t.has_body;
    s<<",";
    s<< "body:";
    s << t.body;
    s<<",";
    s<< "ann:";
    s << t.ann;
    s<<",";
    s<< "has_proto:";
    s << t.has_proto;
    s<<",";
    s<< "proto:";
    s << t.proto;
    s<<"}";
    return s;
}
template <>
void  __ser<ivyc_s1::ivy__actdc>(ivy_ser &res, const ivyc_s1::ivy__actdc&t){
    res.open_struct();
    res.open_field("name");
    __ser<ivyc_s1::ivy__expr>(res,t.name);
    res.close_field();
    res.open_field("kind");
    __ser<ivyc_s1::ivy__action_kind>(res,t.kind);
    res.close_field();
    res.open_field("inputs");
    __ser<ivyc_s1::vector__ivy__expr__>(res,t.inputs);
    res.close_field();
    res.open_field("outputs");
    __ser<ivyc_s1::vector__ivy__expr__>(res,t.outputs);
    res.close_field();
    res.open_field("has_body");
    __ser<bool>(res,t.has_body);
    res.close_field();
    res.open_field("body");
    __ser<ivyc_s1::ivy__stmt>(res,t.body);
    res.close_field();
    res.open_field("ann");
    __ser<ivyc_s1::annot>(res,t.ann);
    res.close_field();
    res.open_field("has_proto");
    __ser<bool>(res,t.has_proto);
    res.close_field();
    res.open_field("proto");
    __ser<ivyc_s1::ivy__prototype>(res,t.proto);
    res.close_field();
    res.close_struct();
}
std::ostream &operator <<(std::ostream &s, const ivyc_s1::ivy__varst &t){
    s<<"{";
    s<< "name:";
    s << t.name;
    s<<",";
    s<< "ann:";
    s << t.ann;
    s<<"}";
    return s;
}
template <>
void  __ser<ivyc_s1::ivy__varst>(ivy_ser &res, const ivyc_s1::ivy__varst&t){
    res.open_struct();
    res.open_field("name");
    __ser<ivyc_s1::ivy__expr>(res,t.name);
    res.close_field();
    res.open_field("ann");
    __ser<ivyc_s1::annot>(res,t.ann);
    res.close_field();
    res.close_struct();
}
std::ostream &operator <<(std::ostream &s, const ivyc_s1::ivy__groupdc &t){
    s<<"{";
    s<< "decls:";
    s << t.decls;
    s<<",";
    s<< "ann:";
    s << t.ann;
    s<<"}";
    return s;
}
template <>
void  __ser<ivyc_s1::ivy__groupdc>(ivy_ser &res, const ivyc_s1::ivy__groupdc&t){
    res.open_struct();
    res.open_field("decls");
    __ser<ivyc_s1::vector__ivy__decl__>(res,t.decls);
    res.close_field();
    res.open_field("ann");
    __ser<ivyc_s1::annot>(res,t.ann);
    res.close_field();
    res.close_struct();
}
std::ostream &operator <<(std::ostream &s, const ivyc_s1::ivy__enumspec &t){
    s<<"{";
    s<< "constructors:";
    s << t.constructors;
    s<<",";
    s<< "ann:";
    s << t.ann;
    s<<"}";
    return s;
}
template <>
void  __ser<ivyc_s1::ivy__enumspec>(ivy_ser &res, const ivyc_s1::ivy__enumspec&t){
    res.open_struct();
    res.open_field("constructors");
    __ser<ivyc_s1::vector__ivy__expr__>(res,t.constructors);
    res.close_field();
    res.open_field("ann");
    __ser<ivyc_s1::annot>(res,t.ann);
    res.close_field();
    res.close_struct();
}
std::ostream &operator <<(std::ostream &s, const ivyc_s1::ivy__structspec &t){
    s<<"{";
    s<< "destructors:";
    s << t.destructors;
    s<<",";
    s<< "ann:";
    s << t.ann;
    s<<"}";
    return s;
}
template <>
void  __ser<ivyc_s1::ivy__structspec>(ivy_ser &res, const ivyc_s1::ivy__structspec&t){
    res.open_struct();
    res.open_field("destructors");
    __ser<ivyc_s1::vector__ivy__expr__>(res,t.destructors);
    res.close_field();
    res.open_field("ann");
    __ser<ivyc_s1::annot>(res,t.ann);
    res.close_field();
    res.close_struct();
}
std::ostream &operator <<(std::ostream &s, const ivyc_s1::ivy__typedc &t){
    s<<"{";
    s<< "sort:";
    s << t.sort;
    s<<",";
    s<< "has_super:";
    s << t.has_super;
    s<<",";
    s<< "super:";
    s << t.super;
    s<<",";
    s<< "has_spec:";
    s << t.has_spec;
    s<<",";
    s<< "spec:";
    s << t.spec;
    s<<",";
    s<< "ann:";
    s << t.ann;
    s<<"}";
    return s;
}
template <>
void  __ser<ivyc_s1::ivy__typedc>(ivy_ser &res, const ivyc_s1::ivy__typedc&t){
    res.open_struct();
    res.open_field("sort");
    __ser<ivyc_s1::ivy__expr>(res,t.sort);
    res.close_field();
    res.open_field("has_super");
    __ser<bool>(res,t.has_super);
    res.close_field();
    res.open_field("super");
    __ser<ivyc_s1::ivy__expr>(res,t.super);
    res.close_field();
    res.open_field("has_spec");
    __ser<bool>(res,t.has_spec);
    res.close_field();
    res.open_field("spec");
    __ser<ivyc_s1::ivy__typespec>(res,t.spec);
    res.close_field();
    res.open_field("ann");
    __ser<ivyc_s1::annot>(res,t.ann);
    res.close_field();
    res.close_struct();
}
std::ostream &operator <<(std::ostream &s, const ivyc_s1::ivy__vardc &t){
    s<<"{";
    s<< "typing:";
    s << t.typing;
    s<<",";
    s<< "is_destructor:";
    s << t.is_destructor;
    s<<",";
    s<< "has_def:";
    s << t.has_def;
    s<<",";
    s<< "def:";
    s << t.def;
    s<<",";
    s<< "ann:";
    s << t.ann;
    s<<"}";
    return s;
}
template <>
void  __ser<ivyc_s1::ivy__vardc>(ivy_ser &res, const ivyc_s1::ivy__vardc&t){
    res.open_struct();
    res.open_field("typing");
    __ser<ivyc_s1::ivy__expr>(res,t.typing);
    res.close_field();
    res.open_field("is_destructor");
    __ser<bool>(res,t.is_destructor);
    res.close_field();
    res.open_field("has_def");
    __ser<bool>(res,t.has_def);
    res.close_field();
    res.open_field("def");
    __ser<ivyc_s1::ivy__expr>(res,t.def);
    res.close_field();
    res.open_field("ann");
    __ser<ivyc_s1::annot>(res,t.ann);
    res.close_field();
    res.close_struct();
}
std::ostream &operator <<(std::ostream &s, const ivyc_s1::ivy__header &t){
    s<<"{";
    s<< "filename:";
    s << t.filename;
    s<<",";
    s<< "ann:";
    s << t.ann;
    s<<"}";
    return s;
}
template <>
void  __ser<ivyc_s1::ivy__header>(ivy_ser &res, const ivyc_s1::ivy__header&t){
    res.open_struct();
    res.open_field("filename");
    __ser<ivyc_s1::str>(res,t.filename);
    res.close_field();
    res.open_field("ann");
    __ser<ivyc_s1::annot>(res,t.ann);
    res.close_field();
    res.close_struct();
}
std::ostream &operator <<(std::ostream &s, const ivyc_s1::ivy__interpdc &t){
    s<<"{";
    s<< "itype:";
    s << t.itype;
    s<<",";
    s<< "ctype:";
    s << t.ctype;
    s<<",";
    s<< "ann:";
    s << t.ann;
    s<<"}";
    return s;
}
template <>
void  __ser<ivyc_s1::ivy__interpdc>(ivy_ser &res, const ivyc_s1::ivy__interpdc&t){
    res.open_struct();
    res.open_field("itype");
    __ser<ivyc_s1::ivy__expr>(res,t.itype);
    res.close_field();
    res.open_field("ctype");
    __ser<ivyc_s1::ivy__expr>(res,t.ctype);
    res.close_field();
    res.open_field("ann");
    __ser<ivyc_s1::annot>(res,t.ann);
    res.close_field();
    res.close_struct();
}
std::ostream &operator <<(std::ostream &s, const ivyc_s1::ivy__includedc &t){
    s<<"{";
    s<< "file:";
    s << t.file;
    s<<",";
    s<< "ann:";
    s << t.ann;
    s<<"}";
    return s;
}
template <>
void  __ser<ivyc_s1::ivy__includedc>(ivy_ser &res, const ivyc_s1::ivy__includedc&t){
    res.open_struct();
    res.open_field("file");
    __ser<ivyc_s1::ivy__expr>(res,t.file);
    res.close_field();
    res.open_field("ann");
    __ser<ivyc_s1::annot>(res,t.ann);
    res.close_field();
    res.close_struct();
}
std::ostream &operator <<(std::ostream &s, const ivyc_s1::ivy__moduledc &t){
    s<<"{";
    s<< "name:";
    s << t.name;
    s<<",";
    s<< "prms:";
    s << t.prms;
    s<<",";
    s<< "body:";
    s << t.body;
    s<<",";
    s<< "ann:";
    s << t.ann;
    s<<"}";
    return s;
}
template <>
void  __ser<ivyc_s1::ivy__moduledc>(ivy_ser &res, const ivyc_s1::ivy__moduledc&t){
    res.open_struct();
    res.open_field("name");
    __ser<ivyc_s1::ivy__expr>(res,t.name);
    res.close_field();
    res.open_field("prms");
    __ser<ivyc_s1::vector__ivy__expr__>(res,t.prms);
    res.close_field();
    res.open_field("body");
    __ser<ivyc_s1::ivy__decl>(res,t.body);
    res.close_field();
    res.open_field("ann");
    __ser<ivyc_s1::annot>(res,t.ann);
    res.close_field();
    res.close_struct();
}
std::ostream &operator <<(std::ostream &s, const ivyc_s1::ivy__instantiatedc &t){
    s<<"{";
    s<< "name:";
    s << t.name;
    s<<",";
    s<< "prms:";
    s << t.prms;
    s<<",";
    s<< "ann:";
    s << t.ann;
    s<<"}";
    return s;
}
template <>
void  __ser<ivyc_s1::ivy__instantiatedc>(ivy_ser &res, const ivyc_s1::ivy__instantiatedc&t){
    res.open_struct();
    res.open_field("name");
    __ser<ivyc_s1::ivy__expr>(res,t.name);
    res.close_field();
    res.open_field("prms");
    __ser<ivyc_s1::vector__ivy__expr__>(res,t.prms);
    res.close_field();
    res.open_field("ann");
    __ser<ivyc_s1::annot>(res,t.ann);
    res.close_field();
    res.close_struct();
}
std::ostream &operator <<(std::ostream &s, const ivyc_s1::ivy__objectdc &t){
    s<<"{";
    s<< "name:";
    s << t.name;
    s<<",";
    s<< "body:";
    s << t.body;
    s<<",";
    s<< "ann:";
    s << t.ann;
    s<<"}";
    return s;
}
template <>
void  __ser<ivyc_s1::ivy__objectdc>(ivy_ser &res, const ivyc_s1::ivy__objectdc&t){
    res.open_struct();
    res.open_field("name");
    __ser<ivyc_s1::ivy__expr>(res,t.name);
    res.close_field();
    res.open_field("body");
    __ser<ivyc_s1::ivy__decl>(res,t.body);
    res.close_field();
    res.open_field("ann");
    __ser<ivyc_s1::annot>(res,t.ann);
    res.close_field();
    res.close_struct();
}
std::ostream &operator <<(std::ostream &s, const ivyc_s1::ivy__instancedc &t){
    s<<"{";
    s<< "objname:";
    s << t.objname;
    s<<",";
    s<< "modname:";
    s << t.modname;
    s<<",";
    s<< "prms:";
    s << t.prms;
    s<<",";
    s<< "is_auto:";
    s << t.is_auto;
    s<<",";
    s<< "ann:";
    s << t.ann;
    s<<"}";
    return s;
}
template <>
void  __ser<ivyc_s1::ivy__instancedc>(ivy_ser &res, const ivyc_s1::ivy__instancedc&t){
    res.open_struct();
    res.open_field("objname");
    __ser<ivyc_s1::ivy__expr>(res,t.objname);
    res.close_field();
    res.open_field("modname");
    __ser<ivyc_s1::ivy__expr>(res,t.modname);
    res.close_field();
    res.open_field("prms");
    __ser<ivyc_s1::vector__ivy__expr__>(res,t.prms);
    res.close_field();
    res.open_field("is_auto");
    __ser<bool>(res,t.is_auto);
    res.close_field();
    res.open_field("ann");
    __ser<ivyc_s1::annot>(res,t.ann);
    res.close_field();
    res.close_struct();
}
std::ostream &operator <<(std::ostream &s, const ivyc_s1::ivy__initdc &t){
    s<<"{";
    s<< "body:";
    s << t.body;
    s<<",";
    s<< "ann:";
    s << t.ann;
    s<<"}";
    return s;
}
template <>
void  __ser<ivyc_s1::ivy__initdc>(ivy_ser &res, const ivyc_s1::ivy__initdc&t){
    res.open_struct();
    res.open_field("body");
    __ser<ivyc_s1::ivy__stmt>(res,t.body);
    res.close_field();
    res.open_field("ann");
    __ser<ivyc_s1::annot>(res,t.ann);
    res.close_field();
    res.close_struct();
}
std::ostream &operator <<(std::ostream &s, const ivyc_s1::ivy__version &t){
    s<<"{";
    s<< "nums:";
    s << t.nums;
    s<<"}";
    return s;
}
template <>
void  __ser<ivyc_s1::ivy__version>(ivy_ser &res, const ivyc_s1::ivy__version&t){
    res.open_struct();
    res.open_field("nums");
    __ser<ivyc_s1::vector__pos__>(res,t.nums);
    res.close_field();
    res.close_struct();
}
std::ostream &operator <<(std::ostream &s, const ivyc_s1::ivy__prog &t){
    s<<"{";
    s<< "vers:";
    s << t.vers;
    s<<",";
    s<< "decls:";
    s << t.decls;
    s<<"}";
    return s;
}
template <>
void  __ser<ivyc_s1::ivy__prog>(ivy_ser &res, const ivyc_s1::ivy__prog&t){
    res.open_struct();
    res.open_field("vers");
    __ser<ivyc_s1::ivy__version>(res,t.vers);
    res.close_field();
    res.open_field("decls");
    __ser<ivyc_s1::vector__ivy__decl__>(res,t.decls);
    res.close_field();
    res.close_struct();
}
std::ostream &operator <<(std::ostream &s, const ivyc_s1::ivy__type_clash &t){
    s<<"{";
    s<< "e:";
    s << t.e;
    s<<",";
    s<< "t1:";
    s << t.t1;
    s<<",";
    s<< "t2:";
    s << t.t2;
    s<<"}";
    return s;
}
template <>
void  __ser<ivyc_s1::ivy__type_clash>(ivy_ser &res, const ivyc_s1::ivy__type_clash&t){
    res.open_struct();
    res.open_field("e");
    __ser<ivyc_s1::ivy__expr>(res,t.e);
    res.close_field();
    res.open_field("t1");
    __ser<ivyc_s1::ivy__expr>(res,t.t1);
    res.close_field();
    res.open_field("t2");
    __ser<ivyc_s1::ivy__expr>(res,t.t2);
    res.close_field();
    res.close_struct();
}
std::ostream &operator <<(std::ostream &s, const ivyc_s1::ivy__type_conversion &t){
    s<<"{";
    s<< "e:";
    s << t.e;
    s<<",";
    s<< "t1:";
    s << t.t1;
    s<<",";
    s<< "t2:";
    s << t.t2;
    s<<"}";
    return s;
}
template <>
void  __ser<ivyc_s1::ivy__type_conversion>(ivy_ser &res, const ivyc_s1::ivy__type_conversion&t){
    res.open_struct();
    res.open_field("e");
    __ser<ivyc_s1::ivy__expr>(res,t.e);
    res.close_field();
    res.open_field("t1");
    __ser<ivyc_s1::ivy__expr>(res,t.t1);
    res.close_field();
    res.open_field("t2");
    __ser<ivyc_s1::ivy__expr>(res,t.t2);
    res.close_field();
    res.close_struct();
}
std::ostream &operator <<(std::ostream &s, const ivyc_s1::ivy__untyped &t){
    s<<"{";
    s<< "e:";
    s << t.e;
    s<<",";
    s<< "t1:";
    s << t.t1;
    s<<"}";
    return s;
}
template <>
void  __ser<ivyc_s1::ivy__untyped>(ivy_ser &res, const ivyc_s1::ivy__untyped&t){
    res.open_struct();
    res.open_field("e");
    __ser<ivyc_s1::ivy__expr>(res,t.e);
    res.close_field();
    res.open_field("t1");
    __ser<ivyc_s1::ivy__expr>(res,t.t1);
    res.close_field();
    res.close_struct();
}
std::ostream &operator <<(std::ostream &s, const ivyc_s1::ivy__not_first_order &t){
    s<<"{";
    s<< "e:";
    s << t.e;
    s<<",";
    s<< "t1:";
    s << t.t1;
    s<<"}";
    return s;
}
template <>
void  __ser<ivyc_s1::ivy__not_first_order>(ivy_ser &res, const ivyc_s1::ivy__not_first_order&t){
    res.open_struct();
    res.open_field("e");
    __ser<ivyc_s1::ivy__expr>(res,t.e);
    res.close_field();
    res.open_field("t1");
    __ser<ivyc_s1::ivy__expr>(res,t.t1);
    res.close_field();
    res.close_struct();
}
std::ostream &operator <<(std::ostream &s, const ivyc_s1::ivy__file_not_found &t){
    s<<"{";
    s<< "n:";
    s << t.n;
    s<<"}";
    return s;
}
template <>
void  __ser<ivyc_s1::ivy__file_not_found>(ivy_ser &res, const ivyc_s1::ivy__file_not_found&t){
    res.open_struct();
    res.open_field("n");
    __ser<ivyc_s1::str>(res,t.n);
    res.close_field();
    res.close_struct();
}
std::ostream &operator <<(std::ostream &s, const ivyc_s1::ivy__cannot_write &t){
    s<<"{";
    s<< "n:";
    s << t.n;
    s<<"}";
    return s;
}
template <>
void  __ser<ivyc_s1::ivy__cannot_write>(ivy_ser &res, const ivyc_s1::ivy__cannot_write&t){
    res.open_struct();
    res.open_field("n");
    __ser<ivyc_s1::str>(res,t.n);
    res.close_field();
    res.close_struct();
}
std::ostream &operator <<(std::ostream &s, const ivyc_s1::ivy__undefined &t){
    s<<"{";
    s<< "n:";
    s << t.n;
    s<<"}";
    return s;
}
template <>
void  __ser<ivyc_s1::ivy__undefined>(ivy_ser &res, const ivyc_s1::ivy__undefined&t){
    res.open_struct();
    res.open_field("n");
    __ser<ivyc_s1::ivy__ident>(res,t.n);
    res.close_field();
    res.close_struct();
}
std::ostream &operator <<(std::ostream &s, const ivyc_s1::ivy__wrong_number_params &t){
    s<<"{";
    s<< "n:";
    s << t.n;
    s<<"}";
    return s;
}
template <>
void  __ser<ivyc_s1::ivy__wrong_number_params>(ivy_ser &res, const ivyc_s1::ivy__wrong_number_params&t){
    res.open_struct();
    res.open_field("n");
    __ser<unsigned long long>(res,t.n);
    res.close_field();
    res.close_struct();
}
std::ostream &operator <<(std::ostream &s, const ivyc_s1::ivy__syntax_error &t){
    s<<"{";
    s<< "tok:";
    s << t.tok;
    s<<"}";
    return s;
}
template <>
void  __ser<ivyc_s1::ivy__syntax_error>(ivy_ser &res, const ivyc_s1::ivy__syntax_error&t){
    res.open_struct();
    res.open_field("tok");
    __ser<ivyc_s1::str>(res,t.tok);
    res.close_field();
    res.close_struct();
}
std::ostream &operator <<(std::ostream &s, const ivyc_s1::ivy__prog__readst &t){
    s<<"{";
    s<< "have_read:";
    s << t.have_read;
    s<<"}";
    return s;
}
template <>
void  __ser<ivyc_s1::ivy__prog__readst>(ivy_ser &res, const ivyc_s1::ivy__prog__readst&t){
    res.open_struct();
    res.open_field("have_read");
    __ser<ivyc_s1::ivy__ident_set>(res,t.have_read);
    res.close_field();
    res.close_struct();
}
std::ostream &operator <<(std::ostream &s, const ivyc_s1::ivy__flatst &t){
    s<<"{";
    s<< "decls:";
    s << t.decls;
    s<<",";
    s<< "prmvals:";
    s << t.prmvals;
    s<<",";
    s<< "moddecls:";
    s << t.moddecls;
    s<<",";
    s<< "defs:";
    s << t.defs;
    s<<",";
    s<< "has_root:";
    s << t.has_root;
    s<<",";
    s<< "root:";
    s << t.root;
    s<<",";
    s<< "locals:";
    s << t.locals;
    s<<",";
    s<< "globals:";
    s << t.globals;
    s<<",";
    s<< "defining:";
    s << t.defining;
    s<<",";
    s<< "absolute:";
    s << t.absolute;
    s<<",";
    s<< "dot_rhs:";
    s << t.dot_rhs;
    s<<",";
    s<< "autodefs:";
    s << t.autodefs;
    s<<",";
    s<< "autos_pending:";
    s << t.autos_pending;
    s<<",";
    s<< "no_undefined:";
    s << t.no_undefined;
    s<<"}";
    return s;
}
template <>
void  __ser<ivyc_s1::ivy__flatst>(ivy_ser &res, const ivyc_s1::ivy__flatst&t){
    res.open_struct();
    res.open_field("decls");
    __ser<ivyc_s1::vector__ivy__decl__>(res,t.decls);
    res.close_field();
    res.open_field("prmvals");
    __ser<ivyc_s1::ivy__ident_to_ident>(res,t.prmvals);
    res.close_field();
    res.open_field("moddecls");
    __ser<ivyc_s1::ivy__ident_to_moduledc>(res,t.moddecls);
    res.close_field();
    res.open_field("defs");
    __ser<ivyc_s1::ivy__ident_set>(res,t.defs);
    res.close_field();
    res.open_field("has_root");
    __ser<bool>(res,t.has_root);
    res.close_field();
    res.open_field("root");
    __ser<ivyc_s1::ivy__ident>(res,t.root);
    res.close_field();
    res.open_field("locals");
    __ser<ivyc_s1::ivy__ident_set>(res,t.locals);
    res.close_field();
    res.open_field("globals");
    __ser<ivyc_s1::ivy__ident_set>(res,t.globals);
    res.close_field();
    res.open_field("defining");
    __ser<bool>(res,t.defining);
    res.close_field();
    res.open_field("absolute");
    __ser<bool>(res,t.absolute);
    res.close_field();
    res.open_field("dot_rhs");
    __ser<bool>(res,t.dot_rhs);
    res.close_field();
    res.open_field("autodefs");
    __ser<ivyc_s1::ivy__ident_to_instantiatedc>(res,t.autodefs);
    res.close_field();
    res.open_field("autos_pending");
    __ser<ivyc_s1::ivy__ident_set>(res,t.autos_pending);
    res.close_field();
    res.open_field("no_undefined");
    __ser<bool>(res,t.no_undefined);
    res.close_field();
    res.close_struct();
}
std::ostream &operator <<(std::ostream &s, const ivyc_s1::ivy__subtypes &t){
    s<<"{";
    s<< "subtypes_of:";
    s << t.subtypes_of;
    s<<",";
    s<< "supertype_of:";
    s << t.supertype_of;
    s<<"}";
    return s;
}
template <>
void  __ser<ivyc_s1::ivy__subtypes>(ivy_ser &res, const ivyc_s1::ivy__subtypes&t){
    res.open_struct();
    res.open_field("subtypes_of");
    __ser<ivyc_s1::ivy__ident_to_exprs>(res,t.subtypes_of);
    res.close_field();
    res.open_field("supertype_of");
    __ser<ivyc_s1::ivy__symeval>(res,t.supertype_of);
    res.close_field();
    res.close_struct();
}
std::ostream &operator <<(std::ostream &s, const ivyc_s1::ivy__global_types &t){
    s<<"{";
    s<< "type_of:";
    s << t.type_of;
    s<<",";
    s<< "is_action:";
    s << t.is_action;
    s<<",";
    s<< "curried:";
    s << t.curried;
    s<<"}";
    return s;
}
template <>
void  __ser<ivyc_s1::ivy__global_types>(ivy_ser &res, const ivyc_s1::ivy__global_types&t){
    res.open_struct();
    res.open_field("type_of");
    __ser<ivyc_s1::ivy__symeval>(res,t.type_of);
    res.close_field();
    res.open_field("is_action");
    __ser<ivyc_s1::ivy__ident_set>(res,t.is_action);
    res.close_field();
    res.open_field("curried");
    __ser<bool>(res,t.curried);
    res.close_field();
    res.close_struct();
}
std::ostream &operator <<(std::ostream &s, const ivyc_s1::ivy__push_pop_ident_set &t){
    s<<"{";
    s<< "map:";
    s << t.map;
    s<<",";
    s<< "del:";
    s << t.del;
    s<<",";
    s<< "stack:";
    s << t.stack;
    s<<"}";
    return s;
}
template <>
void  __ser<ivyc_s1::ivy__push_pop_ident_set>(ivy_ser &res, const ivyc_s1::ivy__push_pop_ident_set&t){
    res.open_struct();
    res.open_field("map");
    __ser<ivyc_s1::ivy__push_pop_ident_set__map_t>(res,t.map);
    res.close_field();
    res.open_field("del");
    __ser<ivyc_s1::ivy__push_pop_ident_set__vec_t>(res,t.del);
    res.close_field();
    res.open_field("stack");
    __ser<ivyc_s1::vector__pos__>(res,t.stack);
    res.close_field();
    res.close_struct();
}
std::ostream &operator <<(std::ostream &s, const ivyc_s1::ivy__local_tracker &t){
    s<<"{";
    s<< "map:";
    s << t.map;
    s<<"}";
    return s;
}
template <>
void  __ser<ivyc_s1::ivy__local_tracker>(ivy_ser &res, const ivyc_s1::ivy__local_tracker&t){
    res.open_struct();
    res.open_field("map");
    __ser<ivyc_s1::ivy__push_pop_ident_set>(res,t.map);
    res.close_field();
    res.close_struct();
}
std::ostream &operator <<(std::ostream &s, const ivyc_s1::ivy__decost &t){
    s<<"{";
    s<< "counter:";
    s << t.counter;
    s<<",";
    s<< "m:";
    s << t.m;
    s<<",";
    s<< "ty:";
    s << t.ty;
    s<<",";
    s<< "member:";
    s << t.member;
    s<<",";
    s<< "ok:";
    s << t.ok;
    s<<",";
    s<< "failed:";
    s << t.failed;
    s<<",";
    s<< "error_reported:";
    s << t.error_reported;
    s<<"}";
    return s;
}
template <>
void  __ser<ivyc_s1::ivy__decost>(ivy_ser &res, const ivyc_s1::ivy__decost&t){
    res.open_struct();
    res.open_field("counter");
    __ser<unsigned long long>(res,t.counter);
    res.close_field();
    res.open_field("m");
    __ser<ivyc_s1::ivy__decost__map>(res,t.m);
    res.close_field();
    res.open_field("ty");
    __ser<ivyc_s1::ivy__symeval>(res,t.ty);
    res.close_field();
    res.open_field("member");
    __ser<bool>(res,t.member);
    res.close_field();
    res.open_field("ok");
    __ser<bool>(res,t.ok);
    res.close_field();
    res.open_field("failed");
    __ser<ivyc_s1::vector__ivy__expr__>(res,t.failed);
    res.close_field();
    res.open_field("error_reported");
    __ser<bool>(res,t.error_reported);
    res.close_field();
    res.close_struct();
}
std::ostream &operator <<(std::ostream &s, const ivyc_s1::ivy__elidest &t){
    s<<"{";
    s<< "seen:";
    s << t.seen;
    s<<"}";
    return s;
}
template <>
void  __ser<ivyc_s1::ivy__elidest>(ivy_ser &res, const ivyc_s1::ivy__elidest&t){
    res.open_struct();
    res.open_field("seen");
    __ser<ivyc_s1::ivy__elidest__map>(res,t.seen);
    res.close_field();
    res.close_struct();
}
std::ostream &operator <<(std::ostream &s, const ivyc_s1::ivy__type_context__stack_entry &t){
    s<<"{";
    s<< "id:";
    s << t.id;
    s<<",";
    s<< "any:";
    s << t.any;
    s<<",";
    s<< "val:";
    s << t.val;
    s<<"}";
    return s;
}
template <>
void  __ser<ivyc_s1::ivy__type_context__stack_entry>(ivy_ser &res, const ivyc_s1::ivy__type_context__stack_entry&t){
    res.open_struct();
    res.open_field("id");
    __ser<ivyc_s1::ivy__ident>(res,t.id);
    res.close_field();
    res.open_field("any");
    __ser<bool>(res,t.any);
    res.close_field();
    res.open_field("val");
    __ser<ivyc_s1::ivy__expr>(res,t.val);
    res.close_field();
    res.close_struct();
}
std::ostream &operator <<(std::ostream &s, const ivyc_s1::ivy__type_context &t){
    s<<"{";
    s<< "m:";
    s << t.m;
    s<<",";
    s<< "stack:";
    s << t.stack;
    s<<"}";
    return s;
}
template <>
void  __ser<ivyc_s1::ivy__type_context>(ivy_ser &res, const ivyc_s1::ivy__type_context&t){
    res.open_struct();
    res.open_field("m");
    __ser<ivyc_s1::ivy__symeval>(res,t.m);
    res.close_field();
    res.open_field("stack");
    __ser<ivyc_s1::vector__ivy__type_context__stack_entry__>(res,t.stack);
    res.close_field();
    res.close_struct();
}
std::ostream &operator <<(std::ostream &s, const ivyc_s1::ivy__typeinferst &t){
    s<<"{";
    s<< "tc:";
    s << t.tc;
    s<<",";
    s<< "subtype_rel:";
    s << t.subtype_rel;
    s<<"}";
    return s;
}
template <>
void  __ser<ivyc_s1::ivy__typeinferst>(ivy_ser &res, const ivyc_s1::ivy__typeinferst&t){
    res.open_struct();
    res.open_field("tc");
    __ser<ivyc_s1::ivy__type_context>(res,t.tc);
    res.close_field();
    res.open_field("subtype_rel");
    __ser<ivyc_s1::ivy__subtypes>(res,t.subtype_rel);
    res.close_field();
    res.close_struct();
}
std::ostream &operator <<(std::ostream &s, const ivyc_s1::cpp__strident &t){
    s<<"{";
    s<< "val:";
    s << t.val;
    s<<",";
    s<< "subscrs:";
    s << t.subscrs;
    s<<"}";
    return s;
}
template <>
void  __ser<ivyc_s1::cpp__strident>(ivy_ser &res, const ivyc_s1::cpp__strident&t){
    res.open_struct();
    res.open_field("val");
    __ser<ivyc_s1::str>(res,t.val);
    res.close_field();
    res.open_field("subscrs");
    __ser<ivyc_s1::vector__cpp__ident__>(res,t.subscrs);
    res.close_field();
    res.close_struct();
}
std::ostream &operator <<(std::ostream &s, const ivyc_s1::cpp__numident &t){
    s<<"{";
    s<< "val:";
    s << t.val;
    s<<"}";
    return s;
}
template <>
void  __ser<ivyc_s1::cpp__numident>(ivy_ser &res, const ivyc_s1::cpp__numident&t){
    res.open_struct();
    res.open_field("val");
    __ser<unsigned long long>(res,t.val);
    res.close_field();
    res.close_struct();
}
std::ostream &operator <<(std::ostream &s, const ivyc_s1::cpp__dotident &t){
    s<<"{";
    s<< "namesp:";
    s << t.namesp;
    s<<",";
    s<< "member:";
    s << t.member;
    s<<"}";
    return s;
}
template <>
void  __ser<ivyc_s1::cpp__dotident>(ivy_ser &res, const ivyc_s1::cpp__dotident&t){
    res.open_struct();
    res.open_field("namesp");
    __ser<ivyc_s1::cpp__ident>(res,t.namesp);
    res.close_field();
    res.open_field("member");
    __ser<ivyc_s1::cpp__strident>(res,t.member);
    res.close_field();
    res.close_struct();
}
std::ostream &operator <<(std::ostream &s, const ivyc_s1::cpp__symbol &t){
    s<<"{";
    s<< "name:";
    s << t.name;
    s<<",";
    s<< "vrb:";
    s << t.vrb;
    s<<",";
    s<< "ann:";
    s << t.ann;
    s<<"}";
    return s;
}
template <>
void  __ser<ivyc_s1::cpp__symbol>(ivy_ser &res, const ivyc_s1::cpp__symbol&t){
    res.open_struct();
    res.open_field("name");
    __ser<ivyc_s1::cpp__ident>(res,t.name);
    res.close_field();
    res.open_field("vrb");
    __ser<ivyc_s1::cpp__verb>(res,t.vrb);
    res.close_field();
    res.open_field("ann");
    __ser<ivyc_s1::annot>(res,t.ann);
    res.close_field();
    res.close_struct();
}
std::ostream &operator <<(std::ostream &s, const ivyc_s1::cpp__app &t){
    s<<"{";
    s<< "func:";
    s << t.func;
    s<<",";
    s<< "args:";
    s << t.args;
    s<<",";
    s<< "ann:";
    s << t.ann;
    s<<"}";
    return s;
}
template <>
void  __ser<ivyc_s1::cpp__app>(ivy_ser &res, const ivyc_s1::cpp__app&t){
    res.open_struct();
    res.open_field("func");
    __ser<ivyc_s1::cpp__expr>(res,t.func);
    res.close_field();
    res.open_field("args");
    __ser<ivyc_s1::vector__cpp__expr__>(res,t.args);
    res.close_field();
    res.open_field("ann");
    __ser<ivyc_s1::annot>(res,t.ann);
    res.close_field();
    res.close_struct();
}
std::ostream &operator <<(std::ostream &s, const ivyc_s1::cpp__variable &t){
    s<<"{";
    s<< "idx:";
    s << t.idx;
    s<<",";
    s<< "ann:";
    s << t.ann;
    s<<"}";
    return s;
}
template <>
void  __ser<ivyc_s1::cpp__variable>(ivy_ser &res, const ivyc_s1::cpp__variable&t){
    res.open_struct();
    res.open_field("idx");
    __ser<unsigned long long>(res,t.idx);
    res.close_field();
    res.open_field("ann");
    __ser<ivyc_s1::annot>(res,t.ann);
    res.close_field();
    res.close_struct();
}
std::ostream &operator <<(std::ostream &s, const ivyc_s1::cpp__pi &t){
    s<<"{";
    s<< "vars:";
    s << t.vars;
    s<<",";
    s<< "body:";
    s << t.body;
    s<<",";
    s<< "ann:";
    s << t.ann;
    s<<"}";
    return s;
}
template <>
void  __ser<ivyc_s1::cpp__pi>(ivy_ser &res, const ivyc_s1::cpp__pi&t){
    res.open_struct();
    res.open_field("vars");
    __ser<ivyc_s1::vector__cpp__expr__>(res,t.vars);
    res.close_field();
    res.open_field("body");
    __ser<ivyc_s1::cpp__expr>(res,t.body);
    res.close_field();
    res.open_field("ann");
    __ser<ivyc_s1::annot>(res,t.ann);
    res.close_field();
    res.close_struct();
}
std::ostream &operator <<(std::ostream &s, const ivyc_s1::cpp__asgn &t){
    s<<"{";
    s<< "lhs:";
    s << t.lhs;
    s<<",";
    s<< "rhs:";
    s << t.rhs;
    s<<",";
    s<< "ann:";
    s << t.ann;
    s<<"}";
    return s;
}
template <>
void  __ser<ivyc_s1::cpp__asgn>(ivy_ser &res, const ivyc_s1::cpp__asgn&t){
    res.open_struct();
    res.open_field("lhs");
    __ser<ivyc_s1::cpp__expr>(res,t.lhs);
    res.close_field();
    res.open_field("rhs");
    __ser<ivyc_s1::cpp__expr>(res,t.rhs);
    res.close_field();
    res.open_field("ann");
    __ser<ivyc_s1::annot>(res,t.ann);
    res.close_field();
    res.close_struct();
}
std::ostream &operator <<(std::ostream &s, const ivyc_s1::cpp__sequence &t){
    s<<"{";
    s<< "lhs:";
    s << t.lhs;
    s<<",";
    s<< "rhs:";
    s << t.rhs;
    s<<",";
    s<< "ann:";
    s << t.ann;
    s<<"}";
    return s;
}
template <>
void  __ser<ivyc_s1::cpp__sequence>(ivy_ser &res, const ivyc_s1::cpp__sequence&t){
    res.open_struct();
    res.open_field("lhs");
    __ser<ivyc_s1::cpp__stmt>(res,t.lhs);
    res.close_field();
    res.open_field("rhs");
    __ser<ivyc_s1::cpp__stmt>(res,t.rhs);
    res.close_field();
    res.open_field("ann");
    __ser<ivyc_s1::annot>(res,t.ann);
    res.close_field();
    res.close_struct();
}
std::ostream &operator <<(std::ostream &s, const ivyc_s1::cpp__skipst &t){
    s<<"{";
    s<< "ann:";
    s << t.ann;
    s<<"}";
    return s;
}
template <>
void  __ser<ivyc_s1::cpp__skipst>(ivy_ser &res, const ivyc_s1::cpp__skipst&t){
    res.open_struct();
    res.open_field("ann");
    __ser<ivyc_s1::annot>(res,t.ann);
    res.close_field();
    res.close_struct();
}
std::ostream &operator <<(std::ostream &s, const ivyc_s1::cpp__ifst &t){
    s<<"{";
    s<< "cond:";
    s << t.cond;
    s<<",";
    s<< "thenst:";
    s << t.thenst;
    s<<",";
    s<< "elsest:";
    s << t.elsest;
    s<<",";
    s<< "ann:";
    s << t.ann;
    s<<"}";
    return s;
}
template <>
void  __ser<ivyc_s1::cpp__ifst>(ivy_ser &res, const ivyc_s1::cpp__ifst&t){
    res.open_struct();
    res.open_field("cond");
    __ser<ivyc_s1::cpp__expr>(res,t.cond);
    res.close_field();
    res.open_field("thenst");
    __ser<ivyc_s1::cpp__stmt>(res,t.thenst);
    res.close_field();
    res.open_field("elsest");
    __ser<ivyc_s1::cpp__stmt>(res,t.elsest);
    res.close_field();
    res.open_field("ann");
    __ser<ivyc_s1::annot>(res,t.ann);
    res.close_field();
    res.close_struct();
}
std::ostream &operator <<(std::ostream &s, const ivyc_s1::cpp__whilest &t){
    s<<"{";
    s<< "cond:";
    s << t.cond;
    s<<",";
    s<< "body:";
    s << t.body;
    s<<",";
    s<< "ann:";
    s << t.ann;
    s<<"}";
    return s;
}
template <>
void  __ser<ivyc_s1::cpp__whilest>(ivy_ser &res, const ivyc_s1::cpp__whilest&t){
    res.open_struct();
    res.open_field("cond");
    __ser<ivyc_s1::cpp__expr>(res,t.cond);
    res.close_field();
    res.open_field("body");
    __ser<ivyc_s1::cpp__stmt>(res,t.body);
    res.close_field();
    res.open_field("ann");
    __ser<ivyc_s1::annot>(res,t.ann);
    res.close_field();
    res.close_struct();
}
std::ostream &operator <<(std::ostream &s, const ivyc_s1::cpp__breakst &t){
    s<<"{";
    s<< "ann:";
    s << t.ann;
    s<<"}";
    return s;
}
template <>
void  __ser<ivyc_s1::cpp__breakst>(ivy_ser &res, const ivyc_s1::cpp__breakst&t){
    res.open_struct();
    res.open_field("ann");
    __ser<ivyc_s1::annot>(res,t.ann);
    res.close_field();
    res.close_struct();
}
std::ostream &operator <<(std::ostream &s, const ivyc_s1::cpp__simpletype &t){
    s<<"{";
    s<< "_type:";
    s << t._type;
    s<<",";
    s<< "name:";
    s << t.name;
    s<<",";
    s<< "is_const:";
    s << t.is_const;
    s<<",";
    s<< "is_ref:";
    s << t.is_ref;
    s<<"}";
    return s;
}
template <>
void  __ser<ivyc_s1::cpp__simpletype>(ivy_ser &res, const ivyc_s1::cpp__simpletype&t){
    res.open_struct();
    res.open_field("_type");
    __ser<ivyc_s1::cpp__expr>(res,t._type);
    res.close_field();
    res.open_field("name");
    __ser<ivyc_s1::cpp__expr>(res,t.name);
    res.close_field();
    res.open_field("is_const");
    __ser<bool>(res,t.is_const);
    res.close_field();
    res.open_field("is_ref");
    __ser<bool>(res,t.is_ref);
    res.close_field();
    res.close_struct();
}
std::ostream &operator <<(std::ostream &s, const ivyc_s1::cpp__functype &t){
    s<<"{";
    s<< "base:";
    s << t.base;
    s<<",";
    s<< "args:";
    s << t.args;
    s<<",";
    s<< "is_const:";
    s << t.is_const;
    s<<",";
    s<< "has_initializer:";
    s << t.has_initializer;
    s<<",";
    s<< "initializer:";
    s << t.initializer;
    s<<"}";
    return s;
}
template <>
void  __ser<ivyc_s1::cpp__functype>(ivy_ser &res, const ivyc_s1::cpp__functype&t){
    res.open_struct();
    res.open_field("base");
    __ser<ivyc_s1::cpp__simpletype>(res,t.base);
    res.close_field();
    res.open_field("args");
    __ser<ivyc_s1::vector__cpp__simpletype__>(res,t.args);
    res.close_field();
    res.open_field("is_const");
    __ser<bool>(res,t.is_const);
    res.close_field();
    res.open_field("has_initializer");
    __ser<bool>(res,t.has_initializer);
    res.close_field();
    res.open_field("initializer");
    __ser<ivyc_s1::cpp__expr>(res,t.initializer);
    res.close_field();
    res.close_struct();
}
std::ostream &operator <<(std::ostream &s, const ivyc_s1::cpp__varst &t){
    s<<"{";
    s<< "vtype:";
    s << t.vtype;
    s<<",";
    s<< "ann:";
    s << t.ann;
    s<<"}";
    return s;
}
template <>
void  __ser<ivyc_s1::cpp__varst>(ivy_ser &res, const ivyc_s1::cpp__varst&t){
    res.open_struct();
    res.open_field("vtype");
    __ser<ivyc_s1::cpp__simpletype>(res,t.vtype);
    res.close_field();
    res.open_field("ann");
    __ser<ivyc_s1::annot>(res,t.ann);
    res.close_field();
    res.close_struct();
}
std::ostream &operator <<(std::ostream &s, const ivyc_s1::cpp__retst &t){
    s<<"{";
    s<< "val:";
    s << t.val;
    s<<",";
    s<< "ann:";
    s << t.ann;
    s<<"}";
    return s;
}
template <>
void  __ser<ivyc_s1::cpp__retst>(ivy_ser &res, const ivyc_s1::cpp__retst&t){
    res.open_struct();
    res.open_field("val");
    __ser<ivyc_s1::cpp__expr>(res,t.val);
    res.close_field();
    res.open_field("ann");
    __ser<ivyc_s1::annot>(res,t.ann);
    res.close_field();
    res.close_struct();
}
std::ostream &operator <<(std::ostream &s, const ivyc_s1::cpp__header &t){
    s<<"{";
    s<< "filename:";
    s << t.filename;
    s<<",";
    s<< "ann:";
    s << t.ann;
    s<<"}";
    return s;
}
template <>
void  __ser<ivyc_s1::cpp__header>(ivy_ser &res, const ivyc_s1::cpp__header&t){
    res.open_struct();
    res.open_field("filename");
    __ser<ivyc_s1::str>(res,t.filename);
    res.close_field();
    res.open_field("ann");
    __ser<ivyc_s1::annot>(res,t.ann);
    res.close_field();
    res.close_struct();
}
std::ostream &operator <<(std::ostream &s, const ivyc_s1::cpp__typedecl &t){
    s<<"{";
    s<< "ttype:";
    s << t.ttype;
    s<<",";
    s<< "ann:";
    s << t.ann;
    s<<"}";
    return s;
}
template <>
void  __ser<ivyc_s1::cpp__typedecl>(ivy_ser &res, const ivyc_s1::cpp__typedecl&t){
    res.open_struct();
    res.open_field("ttype");
    __ser<ivyc_s1::cpp__simpletype>(res,t.ttype);
    res.close_field();
    res.open_field("ann");
    __ser<ivyc_s1::annot>(res,t.ann);
    res.close_field();
    res.close_struct();
}
std::ostream &operator <<(std::ostream &s, const ivyc_s1::cpp__enumdecl &t){
    s<<"{";
    s<< "name:";
    s << t.name;
    s<<",";
    s<< "elems:";
    s << t.elems;
    s<<",";
    s<< "ann:";
    s << t.ann;
    s<<"}";
    return s;
}
template <>
void  __ser<ivyc_s1::cpp__enumdecl>(ivy_ser &res, const ivyc_s1::cpp__enumdecl&t){
    res.open_struct();
    res.open_field("name");
    __ser<ivyc_s1::cpp__expr>(res,t.name);
    res.close_field();
    res.open_field("elems");
    __ser<ivyc_s1::vector__cpp__expr__>(res,t.elems);
    res.close_field();
    res.open_field("ann");
    __ser<ivyc_s1::annot>(res,t.ann);
    res.close_field();
    res.close_struct();
}
std::ostream &operator <<(std::ostream &s, const ivyc_s1::cpp__vardecl &t){
    s<<"{";
    s<< "vtype:";
    s << t.vtype;
    s<<",";
    s<< "ann:";
    s << t.ann;
    s<<"}";
    return s;
}
template <>
void  __ser<ivyc_s1::cpp__vardecl>(ivy_ser &res, const ivyc_s1::cpp__vardecl&t){
    res.open_struct();
    res.open_field("vtype");
    __ser<ivyc_s1::cpp__simpletype>(res,t.vtype);
    res.close_field();
    res.open_field("ann");
    __ser<ivyc_s1::annot>(res,t.ann);
    res.close_field();
    res.close_struct();
}
std::ostream &operator <<(std::ostream &s, const ivyc_s1::cpp__funcdecl &t){
    s<<"{";
    s<< "ftype:";
    s << t.ftype;
    s<<",";
    s<< "has_body:";
    s << t.has_body;
    s<<",";
    s<< "body:";
    s << t.body;
    s<<",";
    s<< "is_static:";
    s << t.is_static;
    s<<",";
    s<< "is_virtual:";
    s << t.is_virtual;
    s<<",";
    s<< "ann:";
    s << t.ann;
    s<<"}";
    return s;
}
template <>
void  __ser<ivyc_s1::cpp__funcdecl>(ivy_ser &res, const ivyc_s1::cpp__funcdecl&t){
    res.open_struct();
    res.open_field("ftype");
    __ser<ivyc_s1::cpp__functype>(res,t.ftype);
    res.close_field();
    res.open_field("has_body");
    __ser<bool>(res,t.has_body);
    res.close_field();
    res.open_field("body");
    __ser<ivyc_s1::cpp__stmt>(res,t.body);
    res.close_field();
    res.open_field("is_static");
    __ser<bool>(res,t.is_static);
    res.close_field();
    res.open_field("is_virtual");
    __ser<bool>(res,t.is_virtual);
    res.close_field();
    res.open_field("ann");
    __ser<ivyc_s1::annot>(res,t.ann);
    res.close_field();
    res.close_struct();
}
std::ostream &operator <<(std::ostream &s, const ivyc_s1::cpp__structdecl &t){
    s<<"{";
    s<< "name:";
    s << t.name;
    s<<",";
    s<< "has_super:";
    s << t.has_super;
    s<<",";
    s<< "super:";
    s << t.super;
    s<<",";
    s<< "has_members:";
    s << t.has_members;
    s<<",";
    s<< "members:";
    s << t.members;
    s<<",";
    s<< "ann:";
    s << t.ann;
    s<<"}";
    return s;
}
template <>
void  __ser<ivyc_s1::cpp__structdecl>(ivy_ser &res, const ivyc_s1::cpp__structdecl&t){
    res.open_struct();
    res.open_field("name");
    __ser<ivyc_s1::cpp__expr>(res,t.name);
    res.close_field();
    res.open_field("has_super");
    __ser<bool>(res,t.has_super);
    res.close_field();
    res.open_field("super");
    __ser<ivyc_s1::cpp__expr>(res,t.super);
    res.close_field();
    res.open_field("has_members");
    __ser<bool>(res,t.has_members);
    res.close_field();
    res.open_field("members");
    __ser<ivyc_s1::vector__cpp__decl__>(res,t.members);
    res.close_field();
    res.open_field("ann");
    __ser<ivyc_s1::annot>(res,t.ann);
    res.close_field();
    res.close_struct();
}
std::ostream &operator <<(std::ostream &s, const ivyc_s1::cpp__namespacedecl &t){
    s<<"{";
    s<< "name:";
    s << t.name;
    s<<",";
    s<< "members:";
    s << t.members;
    s<<",";
    s<< "ann:";
    s << t.ann;
    s<<"}";
    return s;
}
template <>
void  __ser<ivyc_s1::cpp__namespacedecl>(ivy_ser &res, const ivyc_s1::cpp__namespacedecl&t){
    res.open_struct();
    res.open_field("name");
    __ser<ivyc_s1::cpp__expr>(res,t.name);
    res.close_field();
    res.open_field("members");
    __ser<ivyc_s1::vector__cpp__decl__>(res,t.members);
    res.close_field();
    res.open_field("ann");
    __ser<ivyc_s1::annot>(res,t.ann);
    res.close_field();
    res.close_struct();
}
std::ostream &operator <<(std::ostream &s, const ivyc_s1::cpp__groupdc &t){
    s<<"{";
    s<< "decls:";
    s << t.decls;
    s<<",";
    s<< "ann:";
    s << t.ann;
    s<<"}";
    return s;
}
template <>
void  __ser<ivyc_s1::cpp__groupdc>(ivy_ser &res, const ivyc_s1::cpp__groupdc&t){
    res.open_struct();
    res.open_field("decls");
    __ser<ivyc_s1::vector__cpp__decl__>(res,t.decls);
    res.close_field();
    res.open_field("ann");
    __ser<ivyc_s1::annot>(res,t.ann);
    res.close_field();
    res.close_struct();
}
std::ostream &operator <<(std::ostream &s, const ivyc_s1::cpp__version &t){
    s<<"{";
    s<< "nums:";
    s << t.nums;
    s<<"}";
    return s;
}
template <>
void  __ser<ivyc_s1::cpp__version>(ivy_ser &res, const ivyc_s1::cpp__version&t){
    res.open_struct();
    res.open_field("nums");
    __ser<ivyc_s1::vector__pos__>(res,t.nums);
    res.close_field();
    res.close_struct();
}
std::ostream &operator <<(std::ostream &s, const ivyc_s1::cpp__prog &t){
    s<<"{";
    s<< "vers:";
    s << t.vers;
    s<<",";
    s<< "decls:";
    s << t.decls;
    s<<"}";
    return s;
}
template <>
void  __ser<ivyc_s1::cpp__prog>(ivy_ser &res, const ivyc_s1::cpp__prog&t){
    res.open_struct();
    res.open_field("vers");
    __ser<ivyc_s1::cpp__version>(res,t.vers);
    res.close_field();
    res.open_field("decls");
    __ser<ivyc_s1::vector__cpp__decl__>(res,t.decls);
    res.close_field();
    res.close_struct();
}
std::ostream &operator <<(std::ostream &s, const ivyc_s1::ivy__access_path &t){
    s<<"{";
    s<< "elems:";
    s << t.elems;
    s<<"}";
    return s;
}
template <>
void  __ser<ivyc_s1::ivy__access_path>(ivy_ser &res, const ivyc_s1::ivy__access_path&t){
    res.open_struct();
    res.open_field("elems");
    __ser<ivyc_s1::vector__ivy__ident__>(res,t.elems);
    res.close_field();
    res.close_struct();
}
std::ostream &operator <<(std::ostream &s, const ivyc_s1::ivy__lvalue_count &t){
    s<<"{";
    s<< "lvalue:";
    s << t.lvalue;
    s<<",";
    s<< "path:";
    s << t.path;
    s<<",";
    s<< "cnt:";
    s << t.cnt;
    s<<"}";
    return s;
}
template <>
void  __ser<ivyc_s1::ivy__lvalue_count>(ivy_ser &res, const ivyc_s1::ivy__lvalue_count&t){
    res.open_struct();
    res.open_field("lvalue");
    __ser<ivyc_s1::cpp__expr>(res,t.lvalue);
    res.close_field();
    res.open_field("path");
    __ser<ivyc_s1::ivy__access_path>(res,t.path);
    res.close_field();
    res.open_field("cnt");
    __ser<unsigned long long>(res,t.cnt);
    res.close_field();
    res.close_struct();
}
std::ostream &operator <<(std::ostream &s, const ivyc_s1::ivy__tocppst &t){
    s<<"{";
    s<< "members:";
    s << t.members;
    s<<",";
    s<< "cppclasses:";
    s << t.cppclasses;
    s<<",";
    s<< "objects:";
    s << t.objects;
    s<<",";
    s<< "globals:";
    s << t.globals;
    s<<",";
    s<< "is_member:";
    s << t.is_member;
    s<<",";
    s<< "this_ident:";
    s << t.this_ident;
    s<<",";
    s<< "in_class:";
    s << t.in_class;
    s<<",";
    s<< "proto_only:";
    s << t.proto_only;
    s<<",";
    s<< "subtype_rel:";
    s << t.subtype_rel;
    s<<",";
    s<< "native:";
    s << t.native;
    s<<",";
    s<< "forward:";
    s << t.forward;
    s<<",";
    s<< "outputs:";
    s << t.outputs;
    s<<",";
    s<< "code:";
    s << t.code;
    s<<",";
    s<< "counter:";
    s << t.counter;
    s<<",";
    s<< "protos:";
    s << t.protos;
    s<<",";
    s<< "dead:";
    s << t.dead;
    s<<",";
    s<< "locals:";
    s << t.locals;
    s<<",";
    s<< "constructors:";
    s << t.constructors;
    s<<",";
    s<< "dot_rhs:";
    s << t.dot_rhs;
    s<<"}";
    return s;
}
template <>
void  __ser<ivyc_s1::ivy__tocppst>(ivy_ser &res, const ivyc_s1::ivy__tocppst&t){
    res.open_struct();
    res.open_field("members");
    __ser<ivyc_s1::ivy__ident_to_declvec>(res,t.members);
    res.close_field();
    res.open_field("cppclasses");
    __ser<ivyc_s1::ivy__ident_to_cppclass>(res,t.cppclasses);
    res.close_field();
    res.open_field("objects");
    __ser<ivyc_s1::ivy__ident_set>(res,t.objects);
    res.close_field();
    res.open_field("globals");
    __ser<ivyc_s1::ivy__global_types>(res,t.globals);
    res.close_field();
    res.open_field("is_member");
    __ser<bool>(res,t.is_member);
    res.close_field();
    res.open_field("this_ident");
    __ser<ivyc_s1::ivy__ident>(res,t.this_ident);
    res.close_field();
    res.open_field("in_class");
    __ser<bool>(res,t.in_class);
    res.close_field();
    res.open_field("proto_only");
    __ser<bool>(res,t.proto_only);
    res.close_field();
    res.open_field("subtype_rel");
    __ser<ivyc_s1::ivy__subtypes>(res,t.subtype_rel);
    res.close_field();
    res.open_field("native");
    __ser<bool>(res,t.native);
    res.close_field();
    res.open_field("forward");
    __ser<bool>(res,t.forward);
    res.close_field();
    res.open_field("outputs");
    __ser<ivyc_s1::vector__ivy__expr__>(res,t.outputs);
    res.close_field();
    res.open_field("code");
    __ser<ivyc_s1::vector__cpp__stmt__>(res,t.code);
    res.close_field();
    res.open_field("counter");
    __ser<unsigned long long>(res,t.counter);
    res.close_field();
    res.open_field("protos");
    __ser<ivyc_s1::ivy__ident_to_prototype>(res,t.protos);
    res.close_field();
    res.open_field("dead");
    __ser<ivyc_s1::vector__ivy__lvalue_count__>(res,t.dead);
    res.close_field();
    res.open_field("locals");
    __ser<ivyc_s1::ivy__local_tracker>(res,t.locals);
    res.close_field();
    res.open_field("constructors");
    __ser<ivyc_s1::ivy__ident_set>(res,t.constructors);
    res.close_field();
    res.open_field("dot_rhs");
    __ser<bool>(res,t.dot_rhs);
    res.close_field();
    res.close_struct();
}
std::ostream &operator <<(std::ostream &s, const ivyc_s1::char__kinds &t){
    if (t == ivyc_s1::char__alphanum) s<<"alphanum";
    if (t == ivyc_s1::char__bracket) s<<"bracket";
    if (t == ivyc_s1::char__punct) s<<"punct";
    return s;
}
template <>
void  __ser<ivyc_s1::char__kinds>(ivy_ser &res, const ivyc_s1::char__kinds&t){
    __ser(res,(int)t);
}
std::ostream &operator <<(std::ostream &s, const ivyc_s1::cpp__verb &t){
    if (t == ivyc_s1::cpp__verb__none) s<<"none";
    if (t == ivyc_s1::cpp__verb__arrow) s<<"arrow";
    if (t == ivyc_s1::cpp__verb__plus) s<<"plus";
    if (t == ivyc_s1::cpp__verb__times) s<<"times";
    if (t == ivyc_s1::cpp__verb__colon) s<<"colon";
    if (t == ivyc_s1::cpp__verb__app) s<<"app";
    if (t == ivyc_s1::cpp__verb__empty) s<<"empty";
    if (t == ivyc_s1::cpp__verb__dot) s<<"dot";
    if (t == ivyc_s1::cpp__verb__new) s<<"new";
    if (t == ivyc_s1::cpp__verb__numeral) s<<"numeral";
    if (t == ivyc_s1::cpp__verb__castv) s<<"castv";
    if (t == ivyc_s1::cpp__verb__boolv) s<<"boolv";
    if (t == ivyc_s1::cpp__verb__truev) s<<"truev";
    if (t == ivyc_s1::cpp__verb__falsev) s<<"falsev";
    if (t == ivyc_s1::cpp__verb__and) s<<"and";
    if (t == ivyc_s1::cpp__verb__or) s<<"or";
    if (t == ivyc_s1::cpp__verb__not) s<<"not";
    if (t == ivyc_s1::cpp__verb__iff) s<<"iff";
    if (t == ivyc_s1::cpp__verb__equals) s<<"equals";
    if (t == ivyc_s1::cpp__verb__notequals) s<<"notequals";
    if (t == ivyc_s1::cpp__verb__lt) s<<"lt";
    if (t == ivyc_s1::cpp__verb__leq) s<<"leq";
    if (t == ivyc_s1::cpp__verb__gt) s<<"gt";
    if (t == ivyc_s1::cpp__verb__geq) s<<"geq";
    if (t == ivyc_s1::cpp__verb__minus) s<<"minus";
    if (t == ivyc_s1::cpp__verb__div) s<<"div";
    if (t == ivyc_s1::cpp__verb__string) s<<"string";
    if (t == ivyc_s1::cpp__verb__ite) s<<"ite";
    if (t == ivyc_s1::cpp__verb__comma) s<<"comma";
    if (t == ivyc_s1::cpp__verb__varv) s<<"varv";
    if (t == ivyc_s1::cpp__verb__logvar) s<<"logvar";
    if (t == ivyc_s1::cpp__verb__isav) s<<"isav";
    return s;
}
template <>
void  __ser<ivyc_s1::cpp__verb>(ivy_ser &res, const ivyc_s1::cpp__verb&t){
    __ser(res,(int)t);
}
std::ostream &operator <<(std::ostream &s, const ivyc_s1::ivy__action_kind &t){
    if (t == ivyc_s1::ivy__action_kind__internal) s<<"internal";
    if (t == ivyc_s1::ivy__action_kind__external) s<<"external";
    if (t == ivyc_s1::ivy__action_kind__imported) s<<"imported";
    if (t == ivyc_s1::ivy__action_kind__exported) s<<"exported";
    return s;
}
template <>
void  __ser<ivyc_s1::ivy__action_kind>(ivy_ser &res, const ivyc_s1::ivy__action_kind&t){
    __ser(res,(int)t);
}
std::ostream &operator <<(std::ostream &s, const ivyc_s1::ivy__verb &t){
    if (t == ivyc_s1::ivy__verb__none) s<<"none";
    if (t == ivyc_s1::ivy__verb__arrow) s<<"arrow";
    if (t == ivyc_s1::ivy__verb__plus) s<<"plus";
    if (t == ivyc_s1::ivy__verb__times) s<<"times";
    if (t == ivyc_s1::ivy__verb__colon) s<<"colon";
    if (t == ivyc_s1::ivy__verb__app) s<<"app";
    if (t == ivyc_s1::ivy__verb__empty) s<<"empty";
    if (t == ivyc_s1::ivy__verb__dot) s<<"dot";
    if (t == ivyc_s1::ivy__verb__new) s<<"new";
    if (t == ivyc_s1::ivy__verb__numeral) s<<"numeral";
    if (t == ivyc_s1::ivy__verb__castv) s<<"castv";
    if (t == ivyc_s1::ivy__verb__boolv) s<<"boolv";
    if (t == ivyc_s1::ivy__verb__truev) s<<"truev";
    if (t == ivyc_s1::ivy__verb__falsev) s<<"falsev";
    if (t == ivyc_s1::ivy__verb__and) s<<"and";
    if (t == ivyc_s1::ivy__verb__or) s<<"or";
    if (t == ivyc_s1::ivy__verb__not) s<<"not";
    if (t == ivyc_s1::ivy__verb__iff) s<<"iff";
    if (t == ivyc_s1::ivy__verb__equals) s<<"equals";
    if (t == ivyc_s1::ivy__verb__notequals) s<<"notequals";
    if (t == ivyc_s1::ivy__verb__lt) s<<"lt";
    if (t == ivyc_s1::ivy__verb__leq) s<<"leq";
    if (t == ivyc_s1::ivy__verb__gt) s<<"gt";
    if (t == ivyc_s1::ivy__verb__geq) s<<"geq";
    if (t == ivyc_s1::ivy__verb__minus) s<<"minus";
    if (t == ivyc_s1::ivy__verb__div) s<<"div";
    if (t == ivyc_s1::ivy__verb__string) s<<"string";
    if (t == ivyc_s1::ivy__verb__ite) s<<"ite";
    if (t == ivyc_s1::ivy__verb__comma) s<<"comma";
    if (t == ivyc_s1::ivy__verb__varv) s<<"varv";
    if (t == ivyc_s1::ivy__verb__logvar) s<<"logvar";
    if (t == ivyc_s1::ivy__verb__isav) s<<"isav";
    return s;
}
template <>
void  __ser<ivyc_s1::ivy__verb>(ivy_ser &res, const ivyc_s1::ivy__verb&t){
    __ser(res,(int)t);
}


int ask_ret(long long bound) {
    int res;
    while(true) {
        __ivy_out << "? ";
        std::cin >> res;
        if (res >= 0 && res < bound) 
            return res;
        std::cerr << "value out of range" << std::endl;
    }
}



    class ivyc_s1_repl : public ivyc_s1 {

    public:

    virtual void ivy_assert(bool truth,const char *msg){
        if (!truth) {
            __ivy_out << "assertion_failed(\"" << msg << "\")" << std::endl;
            std::cerr << msg << ": error: assertion failed\n";
            
            __ivy_exit(1);
        }
    }
    virtual void ivy_assume(bool truth,const char *msg){
        if (!truth) {
            __ivy_out << "assumption_failed(\"" << msg << "\")" << std::endl;
            std::cerr << msg << ": error: assumption failed\n";
            
            __ivy_exit(1);
        }
    }
    ivyc_s1_repl(str input_file_name) : ivyc_s1(input_file_name){}
    virtual void imp__ivy__report_cannot_infer(const str& s1, const str& s2){
    __ivy_out  << "< ivy.report_cannot_infer" << "(" << s1 << "," << s2 << ")" << std::endl;
}
    virtual void imp__ivy__decost__typeinf_show_str(const str& s){
    __ivy_out  << "< ivy.decost.typeinf_show_str" << "(" << s << ")" << std::endl;
}
    virtual void imp__parse_error(unsigned long long p, const str& tok){
    __ivy_out  << "< parse_error" << "(" << p << "," << tok << ")" << std::endl;
}

    };

// Override methods to implement low-level network service

bool is_white(int c) {
    return (c == ' ' || c == '\t' || c == '\n' || c == '\r');
}

bool is_ident(int c) {
    return c == '_' || c == '.' || (c >= 'A' &&  c <= 'Z')
        || (c >= 'a' &&  c <= 'z')
        || (c >= '0' &&  c <= '9');
}

void skip_white(const std::string& str, int &pos){
    while (pos < str.size() && is_white(str[pos]))
        pos++;
}

struct syntax_error {
    int pos;
    syntax_error(int pos) : pos(pos) {}
};

void throw_syntax(int pos){
    throw syntax_error(pos);
}

std::string get_ident(const std::string& str, int &pos) {
    std::string res = "";
    while (pos < str.size() && is_ident(str[pos])) {
        res.push_back(str[pos]);
        pos++;
    }
    if (res.size() == 0)
        throw_syntax(pos);
    return res;
}

ivy_value parse_value(const std::string& cmd, int &pos) {
    ivy_value res;
    res.pos = pos;
    skip_white(cmd,pos);
    if (pos < cmd.size() && cmd[pos] == '[') {
        while (true) {
            pos++;
            skip_white(cmd,pos);
            if (pos < cmd.size() && cmd[pos] == ']')
                break;
            res.fields.push_back(parse_value(cmd,pos));
            skip_white(cmd,pos);
            if (pos < cmd.size() && cmd[pos] == ']')
                break;
            if (!(pos < cmd.size() && cmd[pos] == ','))
                throw_syntax(pos);
        }
        pos++;
    }
    else if (pos < cmd.size() && cmd[pos] == '{') {
        while (true) {
            ivy_value field;
            pos++;
            skip_white(cmd,pos);
            field.atom = get_ident(cmd,pos);
            skip_white(cmd,pos);
            if (!(pos < cmd.size() && cmd[pos] == ':'))
                 throw_syntax(pos);
            pos++;
            skip_white(cmd,pos);
            field.fields.push_back(parse_value(cmd,pos));
            res.fields.push_back(field);
            skip_white(cmd,pos);
            if (pos < cmd.size() && cmd[pos] == '}')
                break;
            if (!(pos < cmd.size() && cmd[pos] == ','))
                throw_syntax(pos);
        }
        pos++;
    }
    else if (pos < cmd.size() && cmd[pos] == '"') {
        pos++;
        res.atom = "";
        while (pos < cmd.size() && cmd[pos] != '"') {
            char c = cmd[pos++];
            if (c == '\\') {
                if (pos == cmd.size())
                    throw_syntax(pos);
                c = cmd[pos++];
                c = (c == 'n') ? 10 : (c == 'r') ? 13 : (c == 't') ? 9 : c;
            }
            res.atom.push_back(c);
        }
        if(pos == cmd.size())
            throw_syntax(pos);
        pos++;
    }
    else 
        res.atom = get_ident(cmd,pos);
    return res;
}

void parse_command(const std::string &cmd, std::string &action, std::vector<ivy_value> &args) {
    int pos = 0;
    skip_white(cmd,pos);
    action = get_ident(cmd,pos);
    skip_white(cmd,pos);
    if (pos < cmd.size() && cmd[pos] == '(') {
        pos++;
        skip_white(cmd,pos);
        args.push_back(parse_value(cmd,pos));
        while(true) {
            skip_white(cmd,pos);
            if (!(pos < cmd.size() && cmd[pos] == ','))
                break;
            pos++;
            args.push_back(parse_value(cmd,pos));
        }
        if (!(pos < cmd.size() && cmd[pos] == ')'))
            throw_syntax(pos);
        pos++;
    }
    skip_white(cmd,pos);
    if (pos != cmd.size())
        throw_syntax(pos);
}

struct bad_arity {
    std::string action;
    int num;
    bad_arity(std::string &_action, unsigned _num) : action(_action), num(_num) {}
};

void check_arity(std::vector<ivy_value> &args, unsigned num, std::string &action) {
    if (args.size() != num)
        throw bad_arity(action,num);
}

template <>
ivyc_s1::annot_i _arg<ivyc_s1::annot_i>(std::vector<ivy_value> &args, unsigned idx, long long bound){
    ivyc_s1::annot_i res;
    ivy_value &arg = args[idx];
    if (arg.atom.size() || arg.fields.size() != 3) throw out_of_bounds("wrong number of fields",args[idx].pos);
    std::vector<ivy_value> tmp_args(1);
    if (arg.fields[0].is_member()){
        tmp_args[0] = arg.fields[0].fields[0];
        if (arg.fields[0].atom != "comments") throw out_of_bounds("unexpected field: " + arg.fields[0].atom,arg.fields[0].pos);
    }
    else{
        tmp_args[0] = arg.fields[0];
    }
    try{
        res.comments = _arg<ivyc_s1::vector__str__>(tmp_args,0,0);
;
    }
    catch(const out_of_bounds &err){
        throw out_of_bounds("in field comments: " + err.txt,err.pos);
    }
    if (arg.fields[1].is_member()){
        tmp_args[0] = arg.fields[1].fields[0];
        if (arg.fields[1].atom != "line") throw out_of_bounds("unexpected field: " + arg.fields[1].atom,arg.fields[1].pos);
    }
    else{
        tmp_args[0] = arg.fields[1];
    }
    try{
        res.line = _arg<unsigned long long>(tmp_args,0,0);
;
    }
    catch(const out_of_bounds &err){
        throw out_of_bounds("in field line: " + err.txt,err.pos);
    }
    if (arg.fields[2].is_member()){
        tmp_args[0] = arg.fields[2].fields[0];
        if (arg.fields[2].atom != "file") throw out_of_bounds("unexpected field: " + arg.fields[2].atom,arg.fields[2].pos);
    }
    else{
        tmp_args[0] = arg.fields[2];
    }
    try{
        res.file = _arg<ivyc_s1::str>(tmp_args,0,0);
;
    }
    catch(const out_of_bounds &err){
        throw out_of_bounds("in field file: " + err.txt,err.pos);
    }
    return res;
}
template <>
void __deser<ivyc_s1::annot_i>(ivy_deser &inp, ivyc_s1::annot_i &res){
    inp.open_struct();
    inp.open_field("comments");
    __deser(inp,res.comments);
    inp.close_field();
    inp.open_field("line");
    __deser(inp,res.line);
    inp.close_field();
    inp.open_field("file");
    __deser(inp,res.file);
    inp.close_field();
    inp.close_struct();
}
template <>
ivyc_s1::cpp__app _arg<ivyc_s1::cpp__app>(std::vector<ivy_value> &args, unsigned idx, long long bound){
    ivyc_s1::cpp__app res;
    ivy_value &arg = args[idx];
    if (arg.atom.size() || arg.fields.size() != 3) throw out_of_bounds("wrong number of fields",args[idx].pos);
    std::vector<ivy_value> tmp_args(1);
    if (arg.fields[0].is_member()){
        tmp_args[0] = arg.fields[0].fields[0];
        if (arg.fields[0].atom != "func") throw out_of_bounds("unexpected field: " + arg.fields[0].atom,arg.fields[0].pos);
    }
    else{
        tmp_args[0] = arg.fields[0];
    }
    try{
        res.func = _arg<ivyc_s1::cpp__expr>(tmp_args,0,0);
;
    }
    catch(const out_of_bounds &err){
        throw out_of_bounds("in field func: " + err.txt,err.pos);
    }
    if (arg.fields[1].is_member()){
        tmp_args[0] = arg.fields[1].fields[0];
        if (arg.fields[1].atom != "args") throw out_of_bounds("unexpected field: " + arg.fields[1].atom,arg.fields[1].pos);
    }
    else{
        tmp_args[0] = arg.fields[1];
    }
    try{
        res.args = _arg<ivyc_s1::vector__cpp__expr__>(tmp_args,0,0);
;
    }
    catch(const out_of_bounds &err){
        throw out_of_bounds("in field args: " + err.txt,err.pos);
    }
    if (arg.fields[2].is_member()){
        tmp_args[0] = arg.fields[2].fields[0];
        if (arg.fields[2].atom != "ann") throw out_of_bounds("unexpected field: " + arg.fields[2].atom,arg.fields[2].pos);
    }
    else{
        tmp_args[0] = arg.fields[2];
    }
    try{
        res.ann = _arg<ivyc_s1::annot>(tmp_args,0,0);
;
    }
    catch(const out_of_bounds &err){
        throw out_of_bounds("in field ann: " + err.txt,err.pos);
    }
    return res;
}
template <>
void __deser<ivyc_s1::cpp__app>(ivy_deser &inp, ivyc_s1::cpp__app &res){
    inp.open_struct();
    inp.open_field("func");
    __deser(inp,res.func);
    inp.close_field();
    inp.open_field("args");
    __deser(inp,res.args);
    inp.close_field();
    inp.open_field("ann");
    __deser(inp,res.ann);
    inp.close_field();
    inp.close_struct();
}
template <>
ivyc_s1::cpp__asgn _arg<ivyc_s1::cpp__asgn>(std::vector<ivy_value> &args, unsigned idx, long long bound){
    ivyc_s1::cpp__asgn res;
    ivy_value &arg = args[idx];
    if (arg.atom.size() || arg.fields.size() != 3) throw out_of_bounds("wrong number of fields",args[idx].pos);
    std::vector<ivy_value> tmp_args(1);
    if (arg.fields[0].is_member()){
        tmp_args[0] = arg.fields[0].fields[0];
        if (arg.fields[0].atom != "lhs") throw out_of_bounds("unexpected field: " + arg.fields[0].atom,arg.fields[0].pos);
    }
    else{
        tmp_args[0] = arg.fields[0];
    }
    try{
        res.lhs = _arg<ivyc_s1::cpp__expr>(tmp_args,0,0);
;
    }
    catch(const out_of_bounds &err){
        throw out_of_bounds("in field lhs: " + err.txt,err.pos);
    }
    if (arg.fields[1].is_member()){
        tmp_args[0] = arg.fields[1].fields[0];
        if (arg.fields[1].atom != "rhs") throw out_of_bounds("unexpected field: " + arg.fields[1].atom,arg.fields[1].pos);
    }
    else{
        tmp_args[0] = arg.fields[1];
    }
    try{
        res.rhs = _arg<ivyc_s1::cpp__expr>(tmp_args,0,0);
;
    }
    catch(const out_of_bounds &err){
        throw out_of_bounds("in field rhs: " + err.txt,err.pos);
    }
    if (arg.fields[2].is_member()){
        tmp_args[0] = arg.fields[2].fields[0];
        if (arg.fields[2].atom != "ann") throw out_of_bounds("unexpected field: " + arg.fields[2].atom,arg.fields[2].pos);
    }
    else{
        tmp_args[0] = arg.fields[2];
    }
    try{
        res.ann = _arg<ivyc_s1::annot>(tmp_args,0,0);
;
    }
    catch(const out_of_bounds &err){
        throw out_of_bounds("in field ann: " + err.txt,err.pos);
    }
    return res;
}
template <>
void __deser<ivyc_s1::cpp__asgn>(ivy_deser &inp, ivyc_s1::cpp__asgn &res){
    inp.open_struct();
    inp.open_field("lhs");
    __deser(inp,res.lhs);
    inp.close_field();
    inp.open_field("rhs");
    __deser(inp,res.rhs);
    inp.close_field();
    inp.open_field("ann");
    __deser(inp,res.ann);
    inp.close_field();
    inp.close_struct();
}
template <>
ivyc_s1::cpp__breakst _arg<ivyc_s1::cpp__breakst>(std::vector<ivy_value> &args, unsigned idx, long long bound){
    ivyc_s1::cpp__breakst res;
    ivy_value &arg = args[idx];
    if (arg.atom.size() || arg.fields.size() != 1) throw out_of_bounds("wrong number of fields",args[idx].pos);
    std::vector<ivy_value> tmp_args(1);
    if (arg.fields[0].is_member()){
        tmp_args[0] = arg.fields[0].fields[0];
        if (arg.fields[0].atom != "ann") throw out_of_bounds("unexpected field: " + arg.fields[0].atom,arg.fields[0].pos);
    }
    else{
        tmp_args[0] = arg.fields[0];
    }
    try{
        res.ann = _arg<ivyc_s1::annot>(tmp_args,0,0);
;
    }
    catch(const out_of_bounds &err){
        throw out_of_bounds("in field ann: " + err.txt,err.pos);
    }
    return res;
}
template <>
void __deser<ivyc_s1::cpp__breakst>(ivy_deser &inp, ivyc_s1::cpp__breakst &res){
    inp.open_struct();
    inp.open_field("ann");
    __deser(inp,res.ann);
    inp.close_field();
    inp.close_struct();
}
template <>
ivyc_s1::cpp__dotident _arg<ivyc_s1::cpp__dotident>(std::vector<ivy_value> &args, unsigned idx, long long bound){
    ivyc_s1::cpp__dotident res;
    ivy_value &arg = args[idx];
    if (arg.atom.size() || arg.fields.size() != 2) throw out_of_bounds("wrong number of fields",args[idx].pos);
    std::vector<ivy_value> tmp_args(1);
    if (arg.fields[0].is_member()){
        tmp_args[0] = arg.fields[0].fields[0];
        if (arg.fields[0].atom != "namesp") throw out_of_bounds("unexpected field: " + arg.fields[0].atom,arg.fields[0].pos);
    }
    else{
        tmp_args[0] = arg.fields[0];
    }
    try{
        res.namesp = _arg<ivyc_s1::cpp__ident>(tmp_args,0,0);
;
    }
    catch(const out_of_bounds &err){
        throw out_of_bounds("in field namesp: " + err.txt,err.pos);
    }
    if (arg.fields[1].is_member()){
        tmp_args[0] = arg.fields[1].fields[0];
        if (arg.fields[1].atom != "member") throw out_of_bounds("unexpected field: " + arg.fields[1].atom,arg.fields[1].pos);
    }
    else{
        tmp_args[0] = arg.fields[1];
    }
    try{
        res.member = _arg<ivyc_s1::cpp__strident>(tmp_args,0,0);
;
    }
    catch(const out_of_bounds &err){
        throw out_of_bounds("in field member: " + err.txt,err.pos);
    }
    return res;
}
template <>
void __deser<ivyc_s1::cpp__dotident>(ivy_deser &inp, ivyc_s1::cpp__dotident &res){
    inp.open_struct();
    inp.open_field("namesp");
    __deser(inp,res.namesp);
    inp.close_field();
    inp.open_field("member");
    __deser(inp,res.member);
    inp.close_field();
    inp.close_struct();
}
template <>
ivyc_s1::cpp__enumdecl _arg<ivyc_s1::cpp__enumdecl>(std::vector<ivy_value> &args, unsigned idx, long long bound){
    ivyc_s1::cpp__enumdecl res;
    ivy_value &arg = args[idx];
    if (arg.atom.size() || arg.fields.size() != 3) throw out_of_bounds("wrong number of fields",args[idx].pos);
    std::vector<ivy_value> tmp_args(1);
    if (arg.fields[0].is_member()){
        tmp_args[0] = arg.fields[0].fields[0];
        if (arg.fields[0].atom != "name") throw out_of_bounds("unexpected field: " + arg.fields[0].atom,arg.fields[0].pos);
    }
    else{
        tmp_args[0] = arg.fields[0];
    }
    try{
        res.name = _arg<ivyc_s1::cpp__expr>(tmp_args,0,0);
;
    }
    catch(const out_of_bounds &err){
        throw out_of_bounds("in field name: " + err.txt,err.pos);
    }
    if (arg.fields[1].is_member()){
        tmp_args[0] = arg.fields[1].fields[0];
        if (arg.fields[1].atom != "elems") throw out_of_bounds("unexpected field: " + arg.fields[1].atom,arg.fields[1].pos);
    }
    else{
        tmp_args[0] = arg.fields[1];
    }
    try{
        res.elems = _arg<ivyc_s1::vector__cpp__expr__>(tmp_args,0,0);
;
    }
    catch(const out_of_bounds &err){
        throw out_of_bounds("in field elems: " + err.txt,err.pos);
    }
    if (arg.fields[2].is_member()){
        tmp_args[0] = arg.fields[2].fields[0];
        if (arg.fields[2].atom != "ann") throw out_of_bounds("unexpected field: " + arg.fields[2].atom,arg.fields[2].pos);
    }
    else{
        tmp_args[0] = arg.fields[2];
    }
    try{
        res.ann = _arg<ivyc_s1::annot>(tmp_args,0,0);
;
    }
    catch(const out_of_bounds &err){
        throw out_of_bounds("in field ann: " + err.txt,err.pos);
    }
    return res;
}
template <>
void __deser<ivyc_s1::cpp__enumdecl>(ivy_deser &inp, ivyc_s1::cpp__enumdecl &res){
    inp.open_struct();
    inp.open_field("name");
    __deser(inp,res.name);
    inp.close_field();
    inp.open_field("elems");
    __deser(inp,res.elems);
    inp.close_field();
    inp.open_field("ann");
    __deser(inp,res.ann);
    inp.close_field();
    inp.close_struct();
}
template <>
ivyc_s1::cpp__funcdecl _arg<ivyc_s1::cpp__funcdecl>(std::vector<ivy_value> &args, unsigned idx, long long bound){
    ivyc_s1::cpp__funcdecl res;
    ivy_value &arg = args[idx];
    if (arg.atom.size() || arg.fields.size() != 6) throw out_of_bounds("wrong number of fields",args[idx].pos);
    std::vector<ivy_value> tmp_args(1);
    if (arg.fields[0].is_member()){
        tmp_args[0] = arg.fields[0].fields[0];
        if (arg.fields[0].atom != "ftype") throw out_of_bounds("unexpected field: " + arg.fields[0].atom,arg.fields[0].pos);
    }
    else{
        tmp_args[0] = arg.fields[0];
    }
    try{
        res.ftype = _arg<ivyc_s1::cpp__functype>(tmp_args,0,0);
;
    }
    catch(const out_of_bounds &err){
        throw out_of_bounds("in field ftype: " + err.txt,err.pos);
    }
    if (arg.fields[1].is_member()){
        tmp_args[0] = arg.fields[1].fields[0];
        if (arg.fields[1].atom != "has_body") throw out_of_bounds("unexpected field: " + arg.fields[1].atom,arg.fields[1].pos);
    }
    else{
        tmp_args[0] = arg.fields[1];
    }
    try{
        res.has_body = _arg<bool>(tmp_args,0,2);
;
    }
    catch(const out_of_bounds &err){
        throw out_of_bounds("in field has_body: " + err.txt,err.pos);
    }
    if (arg.fields[2].is_member()){
        tmp_args[0] = arg.fields[2].fields[0];
        if (arg.fields[2].atom != "body") throw out_of_bounds("unexpected field: " + arg.fields[2].atom,arg.fields[2].pos);
    }
    else{
        tmp_args[0] = arg.fields[2];
    }
    try{
        res.body = _arg<ivyc_s1::cpp__stmt>(tmp_args,0,0);
;
    }
    catch(const out_of_bounds &err){
        throw out_of_bounds("in field body: " + err.txt,err.pos);
    }
    if (arg.fields[3].is_member()){
        tmp_args[0] = arg.fields[3].fields[0];
        if (arg.fields[3].atom != "is_static") throw out_of_bounds("unexpected field: " + arg.fields[3].atom,arg.fields[3].pos);
    }
    else{
        tmp_args[0] = arg.fields[3];
    }
    try{
        res.is_static = _arg<bool>(tmp_args,0,2);
;
    }
    catch(const out_of_bounds &err){
        throw out_of_bounds("in field is_static: " + err.txt,err.pos);
    }
    if (arg.fields[4].is_member()){
        tmp_args[0] = arg.fields[4].fields[0];
        if (arg.fields[4].atom != "is_virtual") throw out_of_bounds("unexpected field: " + arg.fields[4].atom,arg.fields[4].pos);
    }
    else{
        tmp_args[0] = arg.fields[4];
    }
    try{
        res.is_virtual = _arg<bool>(tmp_args,0,2);
;
    }
    catch(const out_of_bounds &err){
        throw out_of_bounds("in field is_virtual: " + err.txt,err.pos);
    }
    if (arg.fields[5].is_member()){
        tmp_args[0] = arg.fields[5].fields[0];
        if (arg.fields[5].atom != "ann") throw out_of_bounds("unexpected field: " + arg.fields[5].atom,arg.fields[5].pos);
    }
    else{
        tmp_args[0] = arg.fields[5];
    }
    try{
        res.ann = _arg<ivyc_s1::annot>(tmp_args,0,0);
;
    }
    catch(const out_of_bounds &err){
        throw out_of_bounds("in field ann: " + err.txt,err.pos);
    }
    return res;
}
template <>
void __deser<ivyc_s1::cpp__funcdecl>(ivy_deser &inp, ivyc_s1::cpp__funcdecl &res){
    inp.open_struct();
    inp.open_field("ftype");
    __deser(inp,res.ftype);
    inp.close_field();
    inp.open_field("has_body");
    __deser(inp,res.has_body);
    inp.close_field();
    inp.open_field("body");
    __deser(inp,res.body);
    inp.close_field();
    inp.open_field("is_static");
    __deser(inp,res.is_static);
    inp.close_field();
    inp.open_field("is_virtual");
    __deser(inp,res.is_virtual);
    inp.close_field();
    inp.open_field("ann");
    __deser(inp,res.ann);
    inp.close_field();
    inp.close_struct();
}
template <>
ivyc_s1::cpp__functype _arg<ivyc_s1::cpp__functype>(std::vector<ivy_value> &args, unsigned idx, long long bound){
    ivyc_s1::cpp__functype res;
    ivy_value &arg = args[idx];
    if (arg.atom.size() || arg.fields.size() != 5) throw out_of_bounds("wrong number of fields",args[idx].pos);
    std::vector<ivy_value> tmp_args(1);
    if (arg.fields[0].is_member()){
        tmp_args[0] = arg.fields[0].fields[0];
        if (arg.fields[0].atom != "base") throw out_of_bounds("unexpected field: " + arg.fields[0].atom,arg.fields[0].pos);
    }
    else{
        tmp_args[0] = arg.fields[0];
    }
    try{
        res.base = _arg<ivyc_s1::cpp__simpletype>(tmp_args,0,0);
;
    }
    catch(const out_of_bounds &err){
        throw out_of_bounds("in field base: " + err.txt,err.pos);
    }
    if (arg.fields[1].is_member()){
        tmp_args[0] = arg.fields[1].fields[0];
        if (arg.fields[1].atom != "args") throw out_of_bounds("unexpected field: " + arg.fields[1].atom,arg.fields[1].pos);
    }
    else{
        tmp_args[0] = arg.fields[1];
    }
    try{
        res.args = _arg<ivyc_s1::vector__cpp__simpletype__>(tmp_args,0,0);
;
    }
    catch(const out_of_bounds &err){
        throw out_of_bounds("in field args: " + err.txt,err.pos);
    }
    if (arg.fields[2].is_member()){
        tmp_args[0] = arg.fields[2].fields[0];
        if (arg.fields[2].atom != "is_const") throw out_of_bounds("unexpected field: " + arg.fields[2].atom,arg.fields[2].pos);
    }
    else{
        tmp_args[0] = arg.fields[2];
    }
    try{
        res.is_const = _arg<bool>(tmp_args,0,2);
;
    }
    catch(const out_of_bounds &err){
        throw out_of_bounds("in field is_const: " + err.txt,err.pos);
    }
    if (arg.fields[3].is_member()){
        tmp_args[0] = arg.fields[3].fields[0];
        if (arg.fields[3].atom != "has_initializer") throw out_of_bounds("unexpected field: " + arg.fields[3].atom,arg.fields[3].pos);
    }
    else{
        tmp_args[0] = arg.fields[3];
    }
    try{
        res.has_initializer = _arg<bool>(tmp_args,0,2);
;
    }
    catch(const out_of_bounds &err){
        throw out_of_bounds("in field has_initializer: " + err.txt,err.pos);
    }
    if (arg.fields[4].is_member()){
        tmp_args[0] = arg.fields[4].fields[0];
        if (arg.fields[4].atom != "initializer") throw out_of_bounds("unexpected field: " + arg.fields[4].atom,arg.fields[4].pos);
    }
    else{
        tmp_args[0] = arg.fields[4];
    }
    try{
        res.initializer = _arg<ivyc_s1::cpp__expr>(tmp_args,0,0);
;
    }
    catch(const out_of_bounds &err){
        throw out_of_bounds("in field initializer: " + err.txt,err.pos);
    }
    return res;
}
template <>
void __deser<ivyc_s1::cpp__functype>(ivy_deser &inp, ivyc_s1::cpp__functype &res){
    inp.open_struct();
    inp.open_field("base");
    __deser(inp,res.base);
    inp.close_field();
    inp.open_field("args");
    __deser(inp,res.args);
    inp.close_field();
    inp.open_field("is_const");
    __deser(inp,res.is_const);
    inp.close_field();
    inp.open_field("has_initializer");
    __deser(inp,res.has_initializer);
    inp.close_field();
    inp.open_field("initializer");
    __deser(inp,res.initializer);
    inp.close_field();
    inp.close_struct();
}
template <>
ivyc_s1::cpp__groupdc _arg<ivyc_s1::cpp__groupdc>(std::vector<ivy_value> &args, unsigned idx, long long bound){
    ivyc_s1::cpp__groupdc res;
    ivy_value &arg = args[idx];
    if (arg.atom.size() || arg.fields.size() != 2) throw out_of_bounds("wrong number of fields",args[idx].pos);
    std::vector<ivy_value> tmp_args(1);
    if (arg.fields[0].is_member()){
        tmp_args[0] = arg.fields[0].fields[0];
        if (arg.fields[0].atom != "decls") throw out_of_bounds("unexpected field: " + arg.fields[0].atom,arg.fields[0].pos);
    }
    else{
        tmp_args[0] = arg.fields[0];
    }
    try{
        res.decls = _arg<ivyc_s1::vector__cpp__decl__>(tmp_args,0,0);
;
    }
    catch(const out_of_bounds &err){
        throw out_of_bounds("in field decls: " + err.txt,err.pos);
    }
    if (arg.fields[1].is_member()){
        tmp_args[0] = arg.fields[1].fields[0];
        if (arg.fields[1].atom != "ann") throw out_of_bounds("unexpected field: " + arg.fields[1].atom,arg.fields[1].pos);
    }
    else{
        tmp_args[0] = arg.fields[1];
    }
    try{
        res.ann = _arg<ivyc_s1::annot>(tmp_args,0,0);
;
    }
    catch(const out_of_bounds &err){
        throw out_of_bounds("in field ann: " + err.txt,err.pos);
    }
    return res;
}
template <>
void __deser<ivyc_s1::cpp__groupdc>(ivy_deser &inp, ivyc_s1::cpp__groupdc &res){
    inp.open_struct();
    inp.open_field("decls");
    __deser(inp,res.decls);
    inp.close_field();
    inp.open_field("ann");
    __deser(inp,res.ann);
    inp.close_field();
    inp.close_struct();
}
template <>
ivyc_s1::cpp__header _arg<ivyc_s1::cpp__header>(std::vector<ivy_value> &args, unsigned idx, long long bound){
    ivyc_s1::cpp__header res;
    ivy_value &arg = args[idx];
    if (arg.atom.size() || arg.fields.size() != 2) throw out_of_bounds("wrong number of fields",args[idx].pos);
    std::vector<ivy_value> tmp_args(1);
    if (arg.fields[0].is_member()){
        tmp_args[0] = arg.fields[0].fields[0];
        if (arg.fields[0].atom != "filename") throw out_of_bounds("unexpected field: " + arg.fields[0].atom,arg.fields[0].pos);
    }
    else{
        tmp_args[0] = arg.fields[0];
    }
    try{
        res.filename = _arg<ivyc_s1::str>(tmp_args,0,0);
;
    }
    catch(const out_of_bounds &err){
        throw out_of_bounds("in field filename: " + err.txt,err.pos);
    }
    if (arg.fields[1].is_member()){
        tmp_args[0] = arg.fields[1].fields[0];
        if (arg.fields[1].atom != "ann") throw out_of_bounds("unexpected field: " + arg.fields[1].atom,arg.fields[1].pos);
    }
    else{
        tmp_args[0] = arg.fields[1];
    }
    try{
        res.ann = _arg<ivyc_s1::annot>(tmp_args,0,0);
;
    }
    catch(const out_of_bounds &err){
        throw out_of_bounds("in field ann: " + err.txt,err.pos);
    }
    return res;
}
template <>
void __deser<ivyc_s1::cpp__header>(ivy_deser &inp, ivyc_s1::cpp__header &res){
    inp.open_struct();
    inp.open_field("filename");
    __deser(inp,res.filename);
    inp.close_field();
    inp.open_field("ann");
    __deser(inp,res.ann);
    inp.close_field();
    inp.close_struct();
}
template <>
ivyc_s1::cpp__ifst _arg<ivyc_s1::cpp__ifst>(std::vector<ivy_value> &args, unsigned idx, long long bound){
    ivyc_s1::cpp__ifst res;
    ivy_value &arg = args[idx];
    if (arg.atom.size() || arg.fields.size() != 4) throw out_of_bounds("wrong number of fields",args[idx].pos);
    std::vector<ivy_value> tmp_args(1);
    if (arg.fields[0].is_member()){
        tmp_args[0] = arg.fields[0].fields[0];
        if (arg.fields[0].atom != "cond") throw out_of_bounds("unexpected field: " + arg.fields[0].atom,arg.fields[0].pos);
    }
    else{
        tmp_args[0] = arg.fields[0];
    }
    try{
        res.cond = _arg<ivyc_s1::cpp__expr>(tmp_args,0,0);
;
    }
    catch(const out_of_bounds &err){
        throw out_of_bounds("in field cond: " + err.txt,err.pos);
    }
    if (arg.fields[1].is_member()){
        tmp_args[0] = arg.fields[1].fields[0];
        if (arg.fields[1].atom != "thenst") throw out_of_bounds("unexpected field: " + arg.fields[1].atom,arg.fields[1].pos);
    }
    else{
        tmp_args[0] = arg.fields[1];
    }
    try{
        res.thenst = _arg<ivyc_s1::cpp__stmt>(tmp_args,0,0);
;
    }
    catch(const out_of_bounds &err){
        throw out_of_bounds("in field thenst: " + err.txt,err.pos);
    }
    if (arg.fields[2].is_member()){
        tmp_args[0] = arg.fields[2].fields[0];
        if (arg.fields[2].atom != "elsest") throw out_of_bounds("unexpected field: " + arg.fields[2].atom,arg.fields[2].pos);
    }
    else{
        tmp_args[0] = arg.fields[2];
    }
    try{
        res.elsest = _arg<ivyc_s1::cpp__stmt>(tmp_args,0,0);
;
    }
    catch(const out_of_bounds &err){
        throw out_of_bounds("in field elsest: " + err.txt,err.pos);
    }
    if (arg.fields[3].is_member()){
        tmp_args[0] = arg.fields[3].fields[0];
        if (arg.fields[3].atom != "ann") throw out_of_bounds("unexpected field: " + arg.fields[3].atom,arg.fields[3].pos);
    }
    else{
        tmp_args[0] = arg.fields[3];
    }
    try{
        res.ann = _arg<ivyc_s1::annot>(tmp_args,0,0);
;
    }
    catch(const out_of_bounds &err){
        throw out_of_bounds("in field ann: " + err.txt,err.pos);
    }
    return res;
}
template <>
void __deser<ivyc_s1::cpp__ifst>(ivy_deser &inp, ivyc_s1::cpp__ifst &res){
    inp.open_struct();
    inp.open_field("cond");
    __deser(inp,res.cond);
    inp.close_field();
    inp.open_field("thenst");
    __deser(inp,res.thenst);
    inp.close_field();
    inp.open_field("elsest");
    __deser(inp,res.elsest);
    inp.close_field();
    inp.open_field("ann");
    __deser(inp,res.ann);
    inp.close_field();
    inp.close_struct();
}
template <>
ivyc_s1::cpp__namespacedecl _arg<ivyc_s1::cpp__namespacedecl>(std::vector<ivy_value> &args, unsigned idx, long long bound){
    ivyc_s1::cpp__namespacedecl res;
    ivy_value &arg = args[idx];
    if (arg.atom.size() || arg.fields.size() != 3) throw out_of_bounds("wrong number of fields",args[idx].pos);
    std::vector<ivy_value> tmp_args(1);
    if (arg.fields[0].is_member()){
        tmp_args[0] = arg.fields[0].fields[0];
        if (arg.fields[0].atom != "name") throw out_of_bounds("unexpected field: " + arg.fields[0].atom,arg.fields[0].pos);
    }
    else{
        tmp_args[0] = arg.fields[0];
    }
    try{
        res.name = _arg<ivyc_s1::cpp__expr>(tmp_args,0,0);
;
    }
    catch(const out_of_bounds &err){
        throw out_of_bounds("in field name: " + err.txt,err.pos);
    }
    if (arg.fields[1].is_member()){
        tmp_args[0] = arg.fields[1].fields[0];
        if (arg.fields[1].atom != "members") throw out_of_bounds("unexpected field: " + arg.fields[1].atom,arg.fields[1].pos);
    }
    else{
        tmp_args[0] = arg.fields[1];
    }
    try{
        res.members = _arg<ivyc_s1::vector__cpp__decl__>(tmp_args,0,0);
;
    }
    catch(const out_of_bounds &err){
        throw out_of_bounds("in field members: " + err.txt,err.pos);
    }
    if (arg.fields[2].is_member()){
        tmp_args[0] = arg.fields[2].fields[0];
        if (arg.fields[2].atom != "ann") throw out_of_bounds("unexpected field: " + arg.fields[2].atom,arg.fields[2].pos);
    }
    else{
        tmp_args[0] = arg.fields[2];
    }
    try{
        res.ann = _arg<ivyc_s1::annot>(tmp_args,0,0);
;
    }
    catch(const out_of_bounds &err){
        throw out_of_bounds("in field ann: " + err.txt,err.pos);
    }
    return res;
}
template <>
void __deser<ivyc_s1::cpp__namespacedecl>(ivy_deser &inp, ivyc_s1::cpp__namespacedecl &res){
    inp.open_struct();
    inp.open_field("name");
    __deser(inp,res.name);
    inp.close_field();
    inp.open_field("members");
    __deser(inp,res.members);
    inp.close_field();
    inp.open_field("ann");
    __deser(inp,res.ann);
    inp.close_field();
    inp.close_struct();
}
template <>
ivyc_s1::cpp__numident _arg<ivyc_s1::cpp__numident>(std::vector<ivy_value> &args, unsigned idx, long long bound){
    ivyc_s1::cpp__numident res;
    ivy_value &arg = args[idx];
    if (arg.atom.size() || arg.fields.size() != 1) throw out_of_bounds("wrong number of fields",args[idx].pos);
    std::vector<ivy_value> tmp_args(1);
    if (arg.fields[0].is_member()){
        tmp_args[0] = arg.fields[0].fields[0];
        if (arg.fields[0].atom != "val") throw out_of_bounds("unexpected field: " + arg.fields[0].atom,arg.fields[0].pos);
    }
    else{
        tmp_args[0] = arg.fields[0];
    }
    try{
        res.val = _arg<unsigned long long>(tmp_args,0,0);
;
    }
    catch(const out_of_bounds &err){
        throw out_of_bounds("in field val: " + err.txt,err.pos);
    }
    return res;
}
template <>
void __deser<ivyc_s1::cpp__numident>(ivy_deser &inp, ivyc_s1::cpp__numident &res){
    inp.open_struct();
    inp.open_field("val");
    __deser(inp,res.val);
    inp.close_field();
    inp.close_struct();
}
template <>
ivyc_s1::cpp__pi _arg<ivyc_s1::cpp__pi>(std::vector<ivy_value> &args, unsigned idx, long long bound){
    ivyc_s1::cpp__pi res;
    ivy_value &arg = args[idx];
    if (arg.atom.size() || arg.fields.size() != 3) throw out_of_bounds("wrong number of fields",args[idx].pos);
    std::vector<ivy_value> tmp_args(1);
    if (arg.fields[0].is_member()){
        tmp_args[0] = arg.fields[0].fields[0];
        if (arg.fields[0].atom != "vars") throw out_of_bounds("unexpected field: " + arg.fields[0].atom,arg.fields[0].pos);
    }
    else{
        tmp_args[0] = arg.fields[0];
    }
    try{
        res.vars = _arg<ivyc_s1::vector__cpp__expr__>(tmp_args,0,0);
;
    }
    catch(const out_of_bounds &err){
        throw out_of_bounds("in field vars: " + err.txt,err.pos);
    }
    if (arg.fields[1].is_member()){
        tmp_args[0] = arg.fields[1].fields[0];
        if (arg.fields[1].atom != "body") throw out_of_bounds("unexpected field: " + arg.fields[1].atom,arg.fields[1].pos);
    }
    else{
        tmp_args[0] = arg.fields[1];
    }
    try{
        res.body = _arg<ivyc_s1::cpp__expr>(tmp_args,0,0);
;
    }
    catch(const out_of_bounds &err){
        throw out_of_bounds("in field body: " + err.txt,err.pos);
    }
    if (arg.fields[2].is_member()){
        tmp_args[0] = arg.fields[2].fields[0];
        if (arg.fields[2].atom != "ann") throw out_of_bounds("unexpected field: " + arg.fields[2].atom,arg.fields[2].pos);
    }
    else{
        tmp_args[0] = arg.fields[2];
    }
    try{
        res.ann = _arg<ivyc_s1::annot>(tmp_args,0,0);
;
    }
    catch(const out_of_bounds &err){
        throw out_of_bounds("in field ann: " + err.txt,err.pos);
    }
    return res;
}
template <>
void __deser<ivyc_s1::cpp__pi>(ivy_deser &inp, ivyc_s1::cpp__pi &res){
    inp.open_struct();
    inp.open_field("vars");
    __deser(inp,res.vars);
    inp.close_field();
    inp.open_field("body");
    __deser(inp,res.body);
    inp.close_field();
    inp.open_field("ann");
    __deser(inp,res.ann);
    inp.close_field();
    inp.close_struct();
}
template <>
ivyc_s1::cpp__prog _arg<ivyc_s1::cpp__prog>(std::vector<ivy_value> &args, unsigned idx, long long bound){
    ivyc_s1::cpp__prog res;
    ivy_value &arg = args[idx];
    if (arg.atom.size() || arg.fields.size() != 2) throw out_of_bounds("wrong number of fields",args[idx].pos);
    std::vector<ivy_value> tmp_args(1);
    if (arg.fields[0].is_member()){
        tmp_args[0] = arg.fields[0].fields[0];
        if (arg.fields[0].atom != "vers") throw out_of_bounds("unexpected field: " + arg.fields[0].atom,arg.fields[0].pos);
    }
    else{
        tmp_args[0] = arg.fields[0];
    }
    try{
        res.vers = _arg<ivyc_s1::cpp__version>(tmp_args,0,0);
;
    }
    catch(const out_of_bounds &err){
        throw out_of_bounds("in field vers: " + err.txt,err.pos);
    }
    if (arg.fields[1].is_member()){
        tmp_args[0] = arg.fields[1].fields[0];
        if (arg.fields[1].atom != "decls") throw out_of_bounds("unexpected field: " + arg.fields[1].atom,arg.fields[1].pos);
    }
    else{
        tmp_args[0] = arg.fields[1];
    }
    try{
        res.decls = _arg<ivyc_s1::vector__cpp__decl__>(tmp_args,0,0);
;
    }
    catch(const out_of_bounds &err){
        throw out_of_bounds("in field decls: " + err.txt,err.pos);
    }
    return res;
}
template <>
void __deser<ivyc_s1::cpp__prog>(ivy_deser &inp, ivyc_s1::cpp__prog &res){
    inp.open_struct();
    inp.open_field("vers");
    __deser(inp,res.vers);
    inp.close_field();
    inp.open_field("decls");
    __deser(inp,res.decls);
    inp.close_field();
    inp.close_struct();
}
template <>
ivyc_s1::cpp__retst _arg<ivyc_s1::cpp__retst>(std::vector<ivy_value> &args, unsigned idx, long long bound){
    ivyc_s1::cpp__retst res;
    ivy_value &arg = args[idx];
    if (arg.atom.size() || arg.fields.size() != 2) throw out_of_bounds("wrong number of fields",args[idx].pos);
    std::vector<ivy_value> tmp_args(1);
    if (arg.fields[0].is_member()){
        tmp_args[0] = arg.fields[0].fields[0];
        if (arg.fields[0].atom != "val") throw out_of_bounds("unexpected field: " + arg.fields[0].atom,arg.fields[0].pos);
    }
    else{
        tmp_args[0] = arg.fields[0];
    }
    try{
        res.val = _arg<ivyc_s1::cpp__expr>(tmp_args,0,0);
;
    }
    catch(const out_of_bounds &err){
        throw out_of_bounds("in field val: " + err.txt,err.pos);
    }
    if (arg.fields[1].is_member()){
        tmp_args[0] = arg.fields[1].fields[0];
        if (arg.fields[1].atom != "ann") throw out_of_bounds("unexpected field: " + arg.fields[1].atom,arg.fields[1].pos);
    }
    else{
        tmp_args[0] = arg.fields[1];
    }
    try{
        res.ann = _arg<ivyc_s1::annot>(tmp_args,0,0);
;
    }
    catch(const out_of_bounds &err){
        throw out_of_bounds("in field ann: " + err.txt,err.pos);
    }
    return res;
}
template <>
void __deser<ivyc_s1::cpp__retst>(ivy_deser &inp, ivyc_s1::cpp__retst &res){
    inp.open_struct();
    inp.open_field("val");
    __deser(inp,res.val);
    inp.close_field();
    inp.open_field("ann");
    __deser(inp,res.ann);
    inp.close_field();
    inp.close_struct();
}
template <>
ivyc_s1::cpp__sequence _arg<ivyc_s1::cpp__sequence>(std::vector<ivy_value> &args, unsigned idx, long long bound){
    ivyc_s1::cpp__sequence res;
    ivy_value &arg = args[idx];
    if (arg.atom.size() || arg.fields.size() != 3) throw out_of_bounds("wrong number of fields",args[idx].pos);
    std::vector<ivy_value> tmp_args(1);
    if (arg.fields[0].is_member()){
        tmp_args[0] = arg.fields[0].fields[0];
        if (arg.fields[0].atom != "lhs") throw out_of_bounds("unexpected field: " + arg.fields[0].atom,arg.fields[0].pos);
    }
    else{
        tmp_args[0] = arg.fields[0];
    }
    try{
        res.lhs = _arg<ivyc_s1::cpp__stmt>(tmp_args,0,0);
;
    }
    catch(const out_of_bounds &err){
        throw out_of_bounds("in field lhs: " + err.txt,err.pos);
    }
    if (arg.fields[1].is_member()){
        tmp_args[0] = arg.fields[1].fields[0];
        if (arg.fields[1].atom != "rhs") throw out_of_bounds("unexpected field: " + arg.fields[1].atom,arg.fields[1].pos);
    }
    else{
        tmp_args[0] = arg.fields[1];
    }
    try{
        res.rhs = _arg<ivyc_s1::cpp__stmt>(tmp_args,0,0);
;
    }
    catch(const out_of_bounds &err){
        throw out_of_bounds("in field rhs: " + err.txt,err.pos);
    }
    if (arg.fields[2].is_member()){
        tmp_args[0] = arg.fields[2].fields[0];
        if (arg.fields[2].atom != "ann") throw out_of_bounds("unexpected field: " + arg.fields[2].atom,arg.fields[2].pos);
    }
    else{
        tmp_args[0] = arg.fields[2];
    }
    try{
        res.ann = _arg<ivyc_s1::annot>(tmp_args,0,0);
;
    }
    catch(const out_of_bounds &err){
        throw out_of_bounds("in field ann: " + err.txt,err.pos);
    }
    return res;
}
template <>
void __deser<ivyc_s1::cpp__sequence>(ivy_deser &inp, ivyc_s1::cpp__sequence &res){
    inp.open_struct();
    inp.open_field("lhs");
    __deser(inp,res.lhs);
    inp.close_field();
    inp.open_field("rhs");
    __deser(inp,res.rhs);
    inp.close_field();
    inp.open_field("ann");
    __deser(inp,res.ann);
    inp.close_field();
    inp.close_struct();
}
template <>
ivyc_s1::cpp__simpletype _arg<ivyc_s1::cpp__simpletype>(std::vector<ivy_value> &args, unsigned idx, long long bound){
    ivyc_s1::cpp__simpletype res;
    ivy_value &arg = args[idx];
    if (arg.atom.size() || arg.fields.size() != 4) throw out_of_bounds("wrong number of fields",args[idx].pos);
    std::vector<ivy_value> tmp_args(1);
    if (arg.fields[0].is_member()){
        tmp_args[0] = arg.fields[0].fields[0];
        if (arg.fields[0].atom != "_type") throw out_of_bounds("unexpected field: " + arg.fields[0].atom,arg.fields[0].pos);
    }
    else{
        tmp_args[0] = arg.fields[0];
    }
    try{
        res._type = _arg<ivyc_s1::cpp__expr>(tmp_args,0,0);
;
    }
    catch(const out_of_bounds &err){
        throw out_of_bounds("in field _type: " + err.txt,err.pos);
    }
    if (arg.fields[1].is_member()){
        tmp_args[0] = arg.fields[1].fields[0];
        if (arg.fields[1].atom != "name") throw out_of_bounds("unexpected field: " + arg.fields[1].atom,arg.fields[1].pos);
    }
    else{
        tmp_args[0] = arg.fields[1];
    }
    try{
        res.name = _arg<ivyc_s1::cpp__expr>(tmp_args,0,0);
;
    }
    catch(const out_of_bounds &err){
        throw out_of_bounds("in field name: " + err.txt,err.pos);
    }
    if (arg.fields[2].is_member()){
        tmp_args[0] = arg.fields[2].fields[0];
        if (arg.fields[2].atom != "is_const") throw out_of_bounds("unexpected field: " + arg.fields[2].atom,arg.fields[2].pos);
    }
    else{
        tmp_args[0] = arg.fields[2];
    }
    try{
        res.is_const = _arg<bool>(tmp_args,0,2);
;
    }
    catch(const out_of_bounds &err){
        throw out_of_bounds("in field is_const: " + err.txt,err.pos);
    }
    if (arg.fields[3].is_member()){
        tmp_args[0] = arg.fields[3].fields[0];
        if (arg.fields[3].atom != "is_ref") throw out_of_bounds("unexpected field: " + arg.fields[3].atom,arg.fields[3].pos);
    }
    else{
        tmp_args[0] = arg.fields[3];
    }
    try{
        res.is_ref = _arg<bool>(tmp_args,0,2);
;
    }
    catch(const out_of_bounds &err){
        throw out_of_bounds("in field is_ref: " + err.txt,err.pos);
    }
    return res;
}
template <>
void __deser<ivyc_s1::cpp__simpletype>(ivy_deser &inp, ivyc_s1::cpp__simpletype &res){
    inp.open_struct();
    inp.open_field("_type");
    __deser(inp,res._type);
    inp.close_field();
    inp.open_field("name");
    __deser(inp,res.name);
    inp.close_field();
    inp.open_field("is_const");
    __deser(inp,res.is_const);
    inp.close_field();
    inp.open_field("is_ref");
    __deser(inp,res.is_ref);
    inp.close_field();
    inp.close_struct();
}
template <>
ivyc_s1::cpp__skipst _arg<ivyc_s1::cpp__skipst>(std::vector<ivy_value> &args, unsigned idx, long long bound){
    ivyc_s1::cpp__skipst res;
    ivy_value &arg = args[idx];
    if (arg.atom.size() || arg.fields.size() != 1) throw out_of_bounds("wrong number of fields",args[idx].pos);
    std::vector<ivy_value> tmp_args(1);
    if (arg.fields[0].is_member()){
        tmp_args[0] = arg.fields[0].fields[0];
        if (arg.fields[0].atom != "ann") throw out_of_bounds("unexpected field: " + arg.fields[0].atom,arg.fields[0].pos);
    }
    else{
        tmp_args[0] = arg.fields[0];
    }
    try{
        res.ann = _arg<ivyc_s1::annot>(tmp_args,0,0);
;
    }
    catch(const out_of_bounds &err){
        throw out_of_bounds("in field ann: " + err.txt,err.pos);
    }
    return res;
}
template <>
void __deser<ivyc_s1::cpp__skipst>(ivy_deser &inp, ivyc_s1::cpp__skipst &res){
    inp.open_struct();
    inp.open_field("ann");
    __deser(inp,res.ann);
    inp.close_field();
    inp.close_struct();
}
template <>
ivyc_s1::cpp__strident _arg<ivyc_s1::cpp__strident>(std::vector<ivy_value> &args, unsigned idx, long long bound){
    ivyc_s1::cpp__strident res;
    ivy_value &arg = args[idx];
    if (arg.atom.size() || arg.fields.size() != 2) throw out_of_bounds("wrong number of fields",args[idx].pos);
    std::vector<ivy_value> tmp_args(1);
    if (arg.fields[0].is_member()){
        tmp_args[0] = arg.fields[0].fields[0];
        if (arg.fields[0].atom != "val") throw out_of_bounds("unexpected field: " + arg.fields[0].atom,arg.fields[0].pos);
    }
    else{
        tmp_args[0] = arg.fields[0];
    }
    try{
        res.val = _arg<ivyc_s1::str>(tmp_args,0,0);
;
    }
    catch(const out_of_bounds &err){
        throw out_of_bounds("in field val: " + err.txt,err.pos);
    }
    if (arg.fields[1].is_member()){
        tmp_args[0] = arg.fields[1].fields[0];
        if (arg.fields[1].atom != "subscrs") throw out_of_bounds("unexpected field: " + arg.fields[1].atom,arg.fields[1].pos);
    }
    else{
        tmp_args[0] = arg.fields[1];
    }
    try{
        res.subscrs = _arg<ivyc_s1::vector__cpp__ident__>(tmp_args,0,0);
;
    }
    catch(const out_of_bounds &err){
        throw out_of_bounds("in field subscrs: " + err.txt,err.pos);
    }
    return res;
}
template <>
void __deser<ivyc_s1::cpp__strident>(ivy_deser &inp, ivyc_s1::cpp__strident &res){
    inp.open_struct();
    inp.open_field("val");
    __deser(inp,res.val);
    inp.close_field();
    inp.open_field("subscrs");
    __deser(inp,res.subscrs);
    inp.close_field();
    inp.close_struct();
}
template <>
ivyc_s1::cpp__structdecl _arg<ivyc_s1::cpp__structdecl>(std::vector<ivy_value> &args, unsigned idx, long long bound){
    ivyc_s1::cpp__structdecl res;
    ivy_value &arg = args[idx];
    if (arg.atom.size() || arg.fields.size() != 6) throw out_of_bounds("wrong number of fields",args[idx].pos);
    std::vector<ivy_value> tmp_args(1);
    if (arg.fields[0].is_member()){
        tmp_args[0] = arg.fields[0].fields[0];
        if (arg.fields[0].atom != "name") throw out_of_bounds("unexpected field: " + arg.fields[0].atom,arg.fields[0].pos);
    }
    else{
        tmp_args[0] = arg.fields[0];
    }
    try{
        res.name = _arg<ivyc_s1::cpp__expr>(tmp_args,0,0);
;
    }
    catch(const out_of_bounds &err){
        throw out_of_bounds("in field name: " + err.txt,err.pos);
    }
    if (arg.fields[1].is_member()){
        tmp_args[0] = arg.fields[1].fields[0];
        if (arg.fields[1].atom != "has_super") throw out_of_bounds("unexpected field: " + arg.fields[1].atom,arg.fields[1].pos);
    }
    else{
        tmp_args[0] = arg.fields[1];
    }
    try{
        res.has_super = _arg<bool>(tmp_args,0,2);
;
    }
    catch(const out_of_bounds &err){
        throw out_of_bounds("in field has_super: " + err.txt,err.pos);
    }
    if (arg.fields[2].is_member()){
        tmp_args[0] = arg.fields[2].fields[0];
        if (arg.fields[2].atom != "super") throw out_of_bounds("unexpected field: " + arg.fields[2].atom,arg.fields[2].pos);
    }
    else{
        tmp_args[0] = arg.fields[2];
    }
    try{
        res.super = _arg<ivyc_s1::cpp__expr>(tmp_args,0,0);
;
    }
    catch(const out_of_bounds &err){
        throw out_of_bounds("in field super: " + err.txt,err.pos);
    }
    if (arg.fields[3].is_member()){
        tmp_args[0] = arg.fields[3].fields[0];
        if (arg.fields[3].atom != "has_members") throw out_of_bounds("unexpected field: " + arg.fields[3].atom,arg.fields[3].pos);
    }
    else{
        tmp_args[0] = arg.fields[3];
    }
    try{
        res.has_members = _arg<bool>(tmp_args,0,2);
;
    }
    catch(const out_of_bounds &err){
        throw out_of_bounds("in field has_members: " + err.txt,err.pos);
    }
    if (arg.fields[4].is_member()){
        tmp_args[0] = arg.fields[4].fields[0];
        if (arg.fields[4].atom != "members") throw out_of_bounds("unexpected field: " + arg.fields[4].atom,arg.fields[4].pos);
    }
    else{
        tmp_args[0] = arg.fields[4];
    }
    try{
        res.members = _arg<ivyc_s1::vector__cpp__decl__>(tmp_args,0,0);
;
    }
    catch(const out_of_bounds &err){
        throw out_of_bounds("in field members: " + err.txt,err.pos);
    }
    if (arg.fields[5].is_member()){
        tmp_args[0] = arg.fields[5].fields[0];
        if (arg.fields[5].atom != "ann") throw out_of_bounds("unexpected field: " + arg.fields[5].atom,arg.fields[5].pos);
    }
    else{
        tmp_args[0] = arg.fields[5];
    }
    try{
        res.ann = _arg<ivyc_s1::annot>(tmp_args,0,0);
;
    }
    catch(const out_of_bounds &err){
        throw out_of_bounds("in field ann: " + err.txt,err.pos);
    }
    return res;
}
template <>
void __deser<ivyc_s1::cpp__structdecl>(ivy_deser &inp, ivyc_s1::cpp__structdecl &res){
    inp.open_struct();
    inp.open_field("name");
    __deser(inp,res.name);
    inp.close_field();
    inp.open_field("has_super");
    __deser(inp,res.has_super);
    inp.close_field();
    inp.open_field("super");
    __deser(inp,res.super);
    inp.close_field();
    inp.open_field("has_members");
    __deser(inp,res.has_members);
    inp.close_field();
    inp.open_field("members");
    __deser(inp,res.members);
    inp.close_field();
    inp.open_field("ann");
    __deser(inp,res.ann);
    inp.close_field();
    inp.close_struct();
}
template <>
ivyc_s1::cpp__symbol _arg<ivyc_s1::cpp__symbol>(std::vector<ivy_value> &args, unsigned idx, long long bound){
    ivyc_s1::cpp__symbol res;
    ivy_value &arg = args[idx];
    if (arg.atom.size() || arg.fields.size() != 3) throw out_of_bounds("wrong number of fields",args[idx].pos);
    std::vector<ivy_value> tmp_args(1);
    if (arg.fields[0].is_member()){
        tmp_args[0] = arg.fields[0].fields[0];
        if (arg.fields[0].atom != "name") throw out_of_bounds("unexpected field: " + arg.fields[0].atom,arg.fields[0].pos);
    }
    else{
        tmp_args[0] = arg.fields[0];
    }
    try{
        res.name = _arg<ivyc_s1::cpp__ident>(tmp_args,0,0);
;
    }
    catch(const out_of_bounds &err){
        throw out_of_bounds("in field name: " + err.txt,err.pos);
    }
    if (arg.fields[1].is_member()){
        tmp_args[0] = arg.fields[1].fields[0];
        if (arg.fields[1].atom != "vrb") throw out_of_bounds("unexpected field: " + arg.fields[1].atom,arg.fields[1].pos);
    }
    else{
        tmp_args[0] = arg.fields[1];
    }
    try{
        res.vrb = _arg<ivyc_s1::cpp__verb>(tmp_args,0,32);
;
    }
    catch(const out_of_bounds &err){
        throw out_of_bounds("in field vrb: " + err.txt,err.pos);
    }
    if (arg.fields[2].is_member()){
        tmp_args[0] = arg.fields[2].fields[0];
        if (arg.fields[2].atom != "ann") throw out_of_bounds("unexpected field: " + arg.fields[2].atom,arg.fields[2].pos);
    }
    else{
        tmp_args[0] = arg.fields[2];
    }
    try{
        res.ann = _arg<ivyc_s1::annot>(tmp_args,0,0);
;
    }
    catch(const out_of_bounds &err){
        throw out_of_bounds("in field ann: " + err.txt,err.pos);
    }
    return res;
}
template <>
void __deser<ivyc_s1::cpp__symbol>(ivy_deser &inp, ivyc_s1::cpp__symbol &res){
    inp.open_struct();
    inp.open_field("name");
    __deser(inp,res.name);
    inp.close_field();
    inp.open_field("vrb");
    __deser(inp,res.vrb);
    inp.close_field();
    inp.open_field("ann");
    __deser(inp,res.ann);
    inp.close_field();
    inp.close_struct();
}
template <>
ivyc_s1::cpp__typedecl _arg<ivyc_s1::cpp__typedecl>(std::vector<ivy_value> &args, unsigned idx, long long bound){
    ivyc_s1::cpp__typedecl res;
    ivy_value &arg = args[idx];
    if (arg.atom.size() || arg.fields.size() != 2) throw out_of_bounds("wrong number of fields",args[idx].pos);
    std::vector<ivy_value> tmp_args(1);
    if (arg.fields[0].is_member()){
        tmp_args[0] = arg.fields[0].fields[0];
        if (arg.fields[0].atom != "ttype") throw out_of_bounds("unexpected field: " + arg.fields[0].atom,arg.fields[0].pos);
    }
    else{
        tmp_args[0] = arg.fields[0];
    }
    try{
        res.ttype = _arg<ivyc_s1::cpp__simpletype>(tmp_args,0,0);
;
    }
    catch(const out_of_bounds &err){
        throw out_of_bounds("in field ttype: " + err.txt,err.pos);
    }
    if (arg.fields[1].is_member()){
        tmp_args[0] = arg.fields[1].fields[0];
        if (arg.fields[1].atom != "ann") throw out_of_bounds("unexpected field: " + arg.fields[1].atom,arg.fields[1].pos);
    }
    else{
        tmp_args[0] = arg.fields[1];
    }
    try{
        res.ann = _arg<ivyc_s1::annot>(tmp_args,0,0);
;
    }
    catch(const out_of_bounds &err){
        throw out_of_bounds("in field ann: " + err.txt,err.pos);
    }
    return res;
}
template <>
void __deser<ivyc_s1::cpp__typedecl>(ivy_deser &inp, ivyc_s1::cpp__typedecl &res){
    inp.open_struct();
    inp.open_field("ttype");
    __deser(inp,res.ttype);
    inp.close_field();
    inp.open_field("ann");
    __deser(inp,res.ann);
    inp.close_field();
    inp.close_struct();
}
template <>
ivyc_s1::cpp__vardecl _arg<ivyc_s1::cpp__vardecl>(std::vector<ivy_value> &args, unsigned idx, long long bound){
    ivyc_s1::cpp__vardecl res;
    ivy_value &arg = args[idx];
    if (arg.atom.size() || arg.fields.size() != 2) throw out_of_bounds("wrong number of fields",args[idx].pos);
    std::vector<ivy_value> tmp_args(1);
    if (arg.fields[0].is_member()){
        tmp_args[0] = arg.fields[0].fields[0];
        if (arg.fields[0].atom != "vtype") throw out_of_bounds("unexpected field: " + arg.fields[0].atom,arg.fields[0].pos);
    }
    else{
        tmp_args[0] = arg.fields[0];
    }
    try{
        res.vtype = _arg<ivyc_s1::cpp__simpletype>(tmp_args,0,0);
;
    }
    catch(const out_of_bounds &err){
        throw out_of_bounds("in field vtype: " + err.txt,err.pos);
    }
    if (arg.fields[1].is_member()){
        tmp_args[0] = arg.fields[1].fields[0];
        if (arg.fields[1].atom != "ann") throw out_of_bounds("unexpected field: " + arg.fields[1].atom,arg.fields[1].pos);
    }
    else{
        tmp_args[0] = arg.fields[1];
    }
    try{
        res.ann = _arg<ivyc_s1::annot>(tmp_args,0,0);
;
    }
    catch(const out_of_bounds &err){
        throw out_of_bounds("in field ann: " + err.txt,err.pos);
    }
    return res;
}
template <>
void __deser<ivyc_s1::cpp__vardecl>(ivy_deser &inp, ivyc_s1::cpp__vardecl &res){
    inp.open_struct();
    inp.open_field("vtype");
    __deser(inp,res.vtype);
    inp.close_field();
    inp.open_field("ann");
    __deser(inp,res.ann);
    inp.close_field();
    inp.close_struct();
}
template <>
ivyc_s1::cpp__variable _arg<ivyc_s1::cpp__variable>(std::vector<ivy_value> &args, unsigned idx, long long bound){
    ivyc_s1::cpp__variable res;
    ivy_value &arg = args[idx];
    if (arg.atom.size() || arg.fields.size() != 2) throw out_of_bounds("wrong number of fields",args[idx].pos);
    std::vector<ivy_value> tmp_args(1);
    if (arg.fields[0].is_member()){
        tmp_args[0] = arg.fields[0].fields[0];
        if (arg.fields[0].atom != "idx") throw out_of_bounds("unexpected field: " + arg.fields[0].atom,arg.fields[0].pos);
    }
    else{
        tmp_args[0] = arg.fields[0];
    }
    try{
        res.idx = _arg<unsigned long long>(tmp_args,0,0);
;
    }
    catch(const out_of_bounds &err){
        throw out_of_bounds("in field idx: " + err.txt,err.pos);
    }
    if (arg.fields[1].is_member()){
        tmp_args[0] = arg.fields[1].fields[0];
        if (arg.fields[1].atom != "ann") throw out_of_bounds("unexpected field: " + arg.fields[1].atom,arg.fields[1].pos);
    }
    else{
        tmp_args[0] = arg.fields[1];
    }
    try{
        res.ann = _arg<ivyc_s1::annot>(tmp_args,0,0);
;
    }
    catch(const out_of_bounds &err){
        throw out_of_bounds("in field ann: " + err.txt,err.pos);
    }
    return res;
}
template <>
void __deser<ivyc_s1::cpp__variable>(ivy_deser &inp, ivyc_s1::cpp__variable &res){
    inp.open_struct();
    inp.open_field("idx");
    __deser(inp,res.idx);
    inp.close_field();
    inp.open_field("ann");
    __deser(inp,res.ann);
    inp.close_field();
    inp.close_struct();
}
template <>
ivyc_s1::cpp__varst _arg<ivyc_s1::cpp__varst>(std::vector<ivy_value> &args, unsigned idx, long long bound){
    ivyc_s1::cpp__varst res;
    ivy_value &arg = args[idx];
    if (arg.atom.size() || arg.fields.size() != 2) throw out_of_bounds("wrong number of fields",args[idx].pos);
    std::vector<ivy_value> tmp_args(1);
    if (arg.fields[0].is_member()){
        tmp_args[0] = arg.fields[0].fields[0];
        if (arg.fields[0].atom != "vtype") throw out_of_bounds("unexpected field: " + arg.fields[0].atom,arg.fields[0].pos);
    }
    else{
        tmp_args[0] = arg.fields[0];
    }
    try{
        res.vtype = _arg<ivyc_s1::cpp__simpletype>(tmp_args,0,0);
;
    }
    catch(const out_of_bounds &err){
        throw out_of_bounds("in field vtype: " + err.txt,err.pos);
    }
    if (arg.fields[1].is_member()){
        tmp_args[0] = arg.fields[1].fields[0];
        if (arg.fields[1].atom != "ann") throw out_of_bounds("unexpected field: " + arg.fields[1].atom,arg.fields[1].pos);
    }
    else{
        tmp_args[0] = arg.fields[1];
    }
    try{
        res.ann = _arg<ivyc_s1::annot>(tmp_args,0,0);
;
    }
    catch(const out_of_bounds &err){
        throw out_of_bounds("in field ann: " + err.txt,err.pos);
    }
    return res;
}
template <>
void __deser<ivyc_s1::cpp__varst>(ivy_deser &inp, ivyc_s1::cpp__varst &res){
    inp.open_struct();
    inp.open_field("vtype");
    __deser(inp,res.vtype);
    inp.close_field();
    inp.open_field("ann");
    __deser(inp,res.ann);
    inp.close_field();
    inp.close_struct();
}
template <>
ivyc_s1::cpp__version _arg<ivyc_s1::cpp__version>(std::vector<ivy_value> &args, unsigned idx, long long bound){
    ivyc_s1::cpp__version res;
    ivy_value &arg = args[idx];
    if (arg.atom.size() || arg.fields.size() != 1) throw out_of_bounds("wrong number of fields",args[idx].pos);
    std::vector<ivy_value> tmp_args(1);
    if (arg.fields[0].is_member()){
        tmp_args[0] = arg.fields[0].fields[0];
        if (arg.fields[0].atom != "nums") throw out_of_bounds("unexpected field: " + arg.fields[0].atom,arg.fields[0].pos);
    }
    else{
        tmp_args[0] = arg.fields[0];
    }
    try{
        res.nums = _arg<ivyc_s1::vector__pos__>(tmp_args,0,0);
;
    }
    catch(const out_of_bounds &err){
        throw out_of_bounds("in field nums: " + err.txt,err.pos);
    }
    return res;
}
template <>
void __deser<ivyc_s1::cpp__version>(ivy_deser &inp, ivyc_s1::cpp__version &res){
    inp.open_struct();
    inp.open_field("nums");
    __deser(inp,res.nums);
    inp.close_field();
    inp.close_struct();
}
template <>
ivyc_s1::cpp__whilest _arg<ivyc_s1::cpp__whilest>(std::vector<ivy_value> &args, unsigned idx, long long bound){
    ivyc_s1::cpp__whilest res;
    ivy_value &arg = args[idx];
    if (arg.atom.size() || arg.fields.size() != 3) throw out_of_bounds("wrong number of fields",args[idx].pos);
    std::vector<ivy_value> tmp_args(1);
    if (arg.fields[0].is_member()){
        tmp_args[0] = arg.fields[0].fields[0];
        if (arg.fields[0].atom != "cond") throw out_of_bounds("unexpected field: " + arg.fields[0].atom,arg.fields[0].pos);
    }
    else{
        tmp_args[0] = arg.fields[0];
    }
    try{
        res.cond = _arg<ivyc_s1::cpp__expr>(tmp_args,0,0);
;
    }
    catch(const out_of_bounds &err){
        throw out_of_bounds("in field cond: " + err.txt,err.pos);
    }
    if (arg.fields[1].is_member()){
        tmp_args[0] = arg.fields[1].fields[0];
        if (arg.fields[1].atom != "body") throw out_of_bounds("unexpected field: " + arg.fields[1].atom,arg.fields[1].pos);
    }
    else{
        tmp_args[0] = arg.fields[1];
    }
    try{
        res.body = _arg<ivyc_s1::cpp__stmt>(tmp_args,0,0);
;
    }
    catch(const out_of_bounds &err){
        throw out_of_bounds("in field body: " + err.txt,err.pos);
    }
    if (arg.fields[2].is_member()){
        tmp_args[0] = arg.fields[2].fields[0];
        if (arg.fields[2].atom != "ann") throw out_of_bounds("unexpected field: " + arg.fields[2].atom,arg.fields[2].pos);
    }
    else{
        tmp_args[0] = arg.fields[2];
    }
    try{
        res.ann = _arg<ivyc_s1::annot>(tmp_args,0,0);
;
    }
    catch(const out_of_bounds &err){
        throw out_of_bounds("in field ann: " + err.txt,err.pos);
    }
    return res;
}
template <>
void __deser<ivyc_s1::cpp__whilest>(ivy_deser &inp, ivyc_s1::cpp__whilest &res){
    inp.open_struct();
    inp.open_field("cond");
    __deser(inp,res.cond);
    inp.close_field();
    inp.open_field("body");
    __deser(inp,res.body);
    inp.close_field();
    inp.open_field("ann");
    __deser(inp,res.ann);
    inp.close_field();
    inp.close_struct();
}
template <>
ivyc_s1::ivy__access_path _arg<ivyc_s1::ivy__access_path>(std::vector<ivy_value> &args, unsigned idx, long long bound){
    ivyc_s1::ivy__access_path res;
    ivy_value &arg = args[idx];
    if (arg.atom.size() || arg.fields.size() != 1) throw out_of_bounds("wrong number of fields",args[idx].pos);
    std::vector<ivy_value> tmp_args(1);
    if (arg.fields[0].is_member()){
        tmp_args[0] = arg.fields[0].fields[0];
        if (arg.fields[0].atom != "elems") throw out_of_bounds("unexpected field: " + arg.fields[0].atom,arg.fields[0].pos);
    }
    else{
        tmp_args[0] = arg.fields[0];
    }
    try{
        res.elems = _arg<ivyc_s1::vector__ivy__ident__>(tmp_args,0,0);
;
    }
    catch(const out_of_bounds &err){
        throw out_of_bounds("in field elems: " + err.txt,err.pos);
    }
    return res;
}
template <>
void __deser<ivyc_s1::ivy__access_path>(ivy_deser &inp, ivyc_s1::ivy__access_path &res){
    inp.open_struct();
    inp.open_field("elems");
    __deser(inp,res.elems);
    inp.close_field();
    inp.close_struct();
}
template <>
ivyc_s1::ivy__actdc _arg<ivyc_s1::ivy__actdc>(std::vector<ivy_value> &args, unsigned idx, long long bound){
    ivyc_s1::ivy__actdc res;
    ivy_value &arg = args[idx];
    if (arg.atom.size() || arg.fields.size() != 9) throw out_of_bounds("wrong number of fields",args[idx].pos);
    std::vector<ivy_value> tmp_args(1);
    if (arg.fields[0].is_member()){
        tmp_args[0] = arg.fields[0].fields[0];
        if (arg.fields[0].atom != "name") throw out_of_bounds("unexpected field: " + arg.fields[0].atom,arg.fields[0].pos);
    }
    else{
        tmp_args[0] = arg.fields[0];
    }
    try{
        res.name = _arg<ivyc_s1::ivy__expr>(tmp_args,0,0);
;
    }
    catch(const out_of_bounds &err){
        throw out_of_bounds("in field name: " + err.txt,err.pos);
    }
    if (arg.fields[1].is_member()){
        tmp_args[0] = arg.fields[1].fields[0];
        if (arg.fields[1].atom != "kind") throw out_of_bounds("unexpected field: " + arg.fields[1].atom,arg.fields[1].pos);
    }
    else{
        tmp_args[0] = arg.fields[1];
    }
    try{
        res.kind = _arg<ivyc_s1::ivy__action_kind>(tmp_args,0,4);
;
    }
    catch(const out_of_bounds &err){
        throw out_of_bounds("in field kind: " + err.txt,err.pos);
    }
    if (arg.fields[2].is_member()){
        tmp_args[0] = arg.fields[2].fields[0];
        if (arg.fields[2].atom != "inputs") throw out_of_bounds("unexpected field: " + arg.fields[2].atom,arg.fields[2].pos);
    }
    else{
        tmp_args[0] = arg.fields[2];
    }
    try{
        res.inputs = _arg<ivyc_s1::vector__ivy__expr__>(tmp_args,0,0);
;
    }
    catch(const out_of_bounds &err){
        throw out_of_bounds("in field inputs: " + err.txt,err.pos);
    }
    if (arg.fields[3].is_member()){
        tmp_args[0] = arg.fields[3].fields[0];
        if (arg.fields[3].atom != "outputs") throw out_of_bounds("unexpected field: " + arg.fields[3].atom,arg.fields[3].pos);
    }
    else{
        tmp_args[0] = arg.fields[3];
    }
    try{
        res.outputs = _arg<ivyc_s1::vector__ivy__expr__>(tmp_args,0,0);
;
    }
    catch(const out_of_bounds &err){
        throw out_of_bounds("in field outputs: " + err.txt,err.pos);
    }
    if (arg.fields[4].is_member()){
        tmp_args[0] = arg.fields[4].fields[0];
        if (arg.fields[4].atom != "has_body") throw out_of_bounds("unexpected field: " + arg.fields[4].atom,arg.fields[4].pos);
    }
    else{
        tmp_args[0] = arg.fields[4];
    }
    try{
        res.has_body = _arg<bool>(tmp_args,0,2);
;
    }
    catch(const out_of_bounds &err){
        throw out_of_bounds("in field has_body: " + err.txt,err.pos);
    }
    if (arg.fields[5].is_member()){
        tmp_args[0] = arg.fields[5].fields[0];
        if (arg.fields[5].atom != "body") throw out_of_bounds("unexpected field: " + arg.fields[5].atom,arg.fields[5].pos);
    }
    else{
        tmp_args[0] = arg.fields[5];
    }
    try{
        res.body = _arg<ivyc_s1::ivy__stmt>(tmp_args,0,0);
;
    }
    catch(const out_of_bounds &err){
        throw out_of_bounds("in field body: " + err.txt,err.pos);
    }
    if (arg.fields[6].is_member()){
        tmp_args[0] = arg.fields[6].fields[0];
        if (arg.fields[6].atom != "ann") throw out_of_bounds("unexpected field: " + arg.fields[6].atom,arg.fields[6].pos);
    }
    else{
        tmp_args[0] = arg.fields[6];
    }
    try{
        res.ann = _arg<ivyc_s1::annot>(tmp_args,0,0);
;
    }
    catch(const out_of_bounds &err){
        throw out_of_bounds("in field ann: " + err.txt,err.pos);
    }
    if (arg.fields[7].is_member()){
        tmp_args[0] = arg.fields[7].fields[0];
        if (arg.fields[7].atom != "has_proto") throw out_of_bounds("unexpected field: " + arg.fields[7].atom,arg.fields[7].pos);
    }
    else{
        tmp_args[0] = arg.fields[7];
    }
    try{
        res.has_proto = _arg<bool>(tmp_args,0,2);
;
    }
    catch(const out_of_bounds &err){
        throw out_of_bounds("in field has_proto: " + err.txt,err.pos);
    }
    if (arg.fields[8].is_member()){
        tmp_args[0] = arg.fields[8].fields[0];
        if (arg.fields[8].atom != "proto") throw out_of_bounds("unexpected field: " + arg.fields[8].atom,arg.fields[8].pos);
    }
    else{
        tmp_args[0] = arg.fields[8];
    }
    try{
        res.proto = _arg<ivyc_s1::ivy__prototype>(tmp_args,0,0);
;
    }
    catch(const out_of_bounds &err){
        throw out_of_bounds("in field proto: " + err.txt,err.pos);
    }
    return res;
}
template <>
void __deser<ivyc_s1::ivy__actdc>(ivy_deser &inp, ivyc_s1::ivy__actdc &res){
    inp.open_struct();
    inp.open_field("name");
    __deser(inp,res.name);
    inp.close_field();
    inp.open_field("kind");
    __deser(inp,res.kind);
    inp.close_field();
    inp.open_field("inputs");
    __deser(inp,res.inputs);
    inp.close_field();
    inp.open_field("outputs");
    __deser(inp,res.outputs);
    inp.close_field();
    inp.open_field("has_body");
    __deser(inp,res.has_body);
    inp.close_field();
    inp.open_field("body");
    __deser(inp,res.body);
    inp.close_field();
    inp.open_field("ann");
    __deser(inp,res.ann);
    inp.close_field();
    inp.open_field("has_proto");
    __deser(inp,res.has_proto);
    inp.close_field();
    inp.open_field("proto");
    __deser(inp,res.proto);
    inp.close_field();
    inp.close_struct();
}
template <>
ivyc_s1::ivy__app _arg<ivyc_s1::ivy__app>(std::vector<ivy_value> &args, unsigned idx, long long bound){
    ivyc_s1::ivy__app res;
    ivy_value &arg = args[idx];
    if (arg.atom.size() || arg.fields.size() != 3) throw out_of_bounds("wrong number of fields",args[idx].pos);
    std::vector<ivy_value> tmp_args(1);
    if (arg.fields[0].is_member()){
        tmp_args[0] = arg.fields[0].fields[0];
        if (arg.fields[0].atom != "func") throw out_of_bounds("unexpected field: " + arg.fields[0].atom,arg.fields[0].pos);
    }
    else{
        tmp_args[0] = arg.fields[0];
    }
    try{
        res.func = _arg<ivyc_s1::ivy__expr>(tmp_args,0,0);
;
    }
    catch(const out_of_bounds &err){
        throw out_of_bounds("in field func: " + err.txt,err.pos);
    }
    if (arg.fields[1].is_member()){
        tmp_args[0] = arg.fields[1].fields[0];
        if (arg.fields[1].atom != "args") throw out_of_bounds("unexpected field: " + arg.fields[1].atom,arg.fields[1].pos);
    }
    else{
        tmp_args[0] = arg.fields[1];
    }
    try{
        res.args = _arg<ivyc_s1::vector__ivy__expr__>(tmp_args,0,0);
;
    }
    catch(const out_of_bounds &err){
        throw out_of_bounds("in field args: " + err.txt,err.pos);
    }
    if (arg.fields[2].is_member()){
        tmp_args[0] = arg.fields[2].fields[0];
        if (arg.fields[2].atom != "ann") throw out_of_bounds("unexpected field: " + arg.fields[2].atom,arg.fields[2].pos);
    }
    else{
        tmp_args[0] = arg.fields[2];
    }
    try{
        res.ann = _arg<ivyc_s1::annot>(tmp_args,0,0);
;
    }
    catch(const out_of_bounds &err){
        throw out_of_bounds("in field ann: " + err.txt,err.pos);
    }
    return res;
}
template <>
void __deser<ivyc_s1::ivy__app>(ivy_deser &inp, ivyc_s1::ivy__app &res){
    inp.open_struct();
    inp.open_field("func");
    __deser(inp,res.func);
    inp.close_field();
    inp.open_field("args");
    __deser(inp,res.args);
    inp.close_field();
    inp.open_field("ann");
    __deser(inp,res.ann);
    inp.close_field();
    inp.close_struct();
}
template <>
ivyc_s1::ivy__asgn _arg<ivyc_s1::ivy__asgn>(std::vector<ivy_value> &args, unsigned idx, long long bound){
    ivyc_s1::ivy__asgn res;
    ivy_value &arg = args[idx];
    if (arg.atom.size() || arg.fields.size() != 3) throw out_of_bounds("wrong number of fields",args[idx].pos);
    std::vector<ivy_value> tmp_args(1);
    if (arg.fields[0].is_member()){
        tmp_args[0] = arg.fields[0].fields[0];
        if (arg.fields[0].atom != "lhs") throw out_of_bounds("unexpected field: " + arg.fields[0].atom,arg.fields[0].pos);
    }
    else{
        tmp_args[0] = arg.fields[0];
    }
    try{
        res.lhs = _arg<ivyc_s1::ivy__expr>(tmp_args,0,0);
;
    }
    catch(const out_of_bounds &err){
        throw out_of_bounds("in field lhs: " + err.txt,err.pos);
    }
    if (arg.fields[1].is_member()){
        tmp_args[0] = arg.fields[1].fields[0];
        if (arg.fields[1].atom != "rhs") throw out_of_bounds("unexpected field: " + arg.fields[1].atom,arg.fields[1].pos);
    }
    else{
        tmp_args[0] = arg.fields[1];
    }
    try{
        res.rhs = _arg<ivyc_s1::ivy__expr>(tmp_args,0,0);
;
    }
    catch(const out_of_bounds &err){
        throw out_of_bounds("in field rhs: " + err.txt,err.pos);
    }
    if (arg.fields[2].is_member()){
        tmp_args[0] = arg.fields[2].fields[0];
        if (arg.fields[2].atom != "ann") throw out_of_bounds("unexpected field: " + arg.fields[2].atom,arg.fields[2].pos);
    }
    else{
        tmp_args[0] = arg.fields[2];
    }
    try{
        res.ann = _arg<ivyc_s1::annot>(tmp_args,0,0);
;
    }
    catch(const out_of_bounds &err){
        throw out_of_bounds("in field ann: " + err.txt,err.pos);
    }
    return res;
}
template <>
void __deser<ivyc_s1::ivy__asgn>(ivy_deser &inp, ivyc_s1::ivy__asgn &res){
    inp.open_struct();
    inp.open_field("lhs");
    __deser(inp,res.lhs);
    inp.close_field();
    inp.open_field("rhs");
    __deser(inp,res.rhs);
    inp.close_field();
    inp.open_field("ann");
    __deser(inp,res.ann);
    inp.close_field();
    inp.close_struct();
}
template <>
ivyc_s1::ivy__breakst _arg<ivyc_s1::ivy__breakst>(std::vector<ivy_value> &args, unsigned idx, long long bound){
    ivyc_s1::ivy__breakst res;
    ivy_value &arg = args[idx];
    if (arg.atom.size() || arg.fields.size() != 1) throw out_of_bounds("wrong number of fields",args[idx].pos);
    std::vector<ivy_value> tmp_args(1);
    if (arg.fields[0].is_member()){
        tmp_args[0] = arg.fields[0].fields[0];
        if (arg.fields[0].atom != "ann") throw out_of_bounds("unexpected field: " + arg.fields[0].atom,arg.fields[0].pos);
    }
    else{
        tmp_args[0] = arg.fields[0];
    }
    try{
        res.ann = _arg<ivyc_s1::annot>(tmp_args,0,0);
;
    }
    catch(const out_of_bounds &err){
        throw out_of_bounds("in field ann: " + err.txt,err.pos);
    }
    return res;
}
template <>
void __deser<ivyc_s1::ivy__breakst>(ivy_deser &inp, ivyc_s1::ivy__breakst &res){
    inp.open_struct();
    inp.open_field("ann");
    __deser(inp,res.ann);
    inp.close_field();
    inp.close_struct();
}
template <>
ivyc_s1::ivy__cannot_write _arg<ivyc_s1::ivy__cannot_write>(std::vector<ivy_value> &args, unsigned idx, long long bound){
    ivyc_s1::ivy__cannot_write res;
    ivy_value &arg = args[idx];
    if (arg.atom.size() || arg.fields.size() != 1) throw out_of_bounds("wrong number of fields",args[idx].pos);
    std::vector<ivy_value> tmp_args(1);
    if (arg.fields[0].is_member()){
        tmp_args[0] = arg.fields[0].fields[0];
        if (arg.fields[0].atom != "n") throw out_of_bounds("unexpected field: " + arg.fields[0].atom,arg.fields[0].pos);
    }
    else{
        tmp_args[0] = arg.fields[0];
    }
    try{
        res.n = _arg<ivyc_s1::str>(tmp_args,0,0);
;
    }
    catch(const out_of_bounds &err){
        throw out_of_bounds("in field n: " + err.txt,err.pos);
    }
    return res;
}
template <>
void __deser<ivyc_s1::ivy__cannot_write>(ivy_deser &inp, ivyc_s1::ivy__cannot_write &res){
    inp.open_struct();
    inp.open_field("n");
    __deser(inp,res.n);
    inp.close_field();
    inp.close_struct();
}
template <>
ivyc_s1::ivy__decost _arg<ivyc_s1::ivy__decost>(std::vector<ivy_value> &args, unsigned idx, long long bound){
    ivyc_s1::ivy__decost res;
    ivy_value &arg = args[idx];
    if (arg.atom.size() || arg.fields.size() != 7) throw out_of_bounds("wrong number of fields",args[idx].pos);
    std::vector<ivy_value> tmp_args(1);
    if (arg.fields[0].is_member()){
        tmp_args[0] = arg.fields[0].fields[0];
        if (arg.fields[0].atom != "counter") throw out_of_bounds("unexpected field: " + arg.fields[0].atom,arg.fields[0].pos);
    }
    else{
        tmp_args[0] = arg.fields[0];
    }
    try{
        res.counter = _arg<unsigned long long>(tmp_args,0,0);
;
    }
    catch(const out_of_bounds &err){
        throw out_of_bounds("in field counter: " + err.txt,err.pos);
    }
    if (arg.fields[1].is_member()){
        tmp_args[0] = arg.fields[1].fields[0];
        if (arg.fields[1].atom != "m") throw out_of_bounds("unexpected field: " + arg.fields[1].atom,arg.fields[1].pos);
    }
    else{
        tmp_args[0] = arg.fields[1];
    }
    try{
        res.m = _arg<ivyc_s1::ivy__decost__map>(tmp_args,0,0);
;
    }
    catch(const out_of_bounds &err){
        throw out_of_bounds("in field m: " + err.txt,err.pos);
    }
    if (arg.fields[2].is_member()){
        tmp_args[0] = arg.fields[2].fields[0];
        if (arg.fields[2].atom != "ty") throw out_of_bounds("unexpected field: " + arg.fields[2].atom,arg.fields[2].pos);
    }
    else{
        tmp_args[0] = arg.fields[2];
    }
    try{
        res.ty = _arg<ivyc_s1::ivy__symeval>(tmp_args,0,0);
;
    }
    catch(const out_of_bounds &err){
        throw out_of_bounds("in field ty: " + err.txt,err.pos);
    }
    if (arg.fields[3].is_member()){
        tmp_args[0] = arg.fields[3].fields[0];
        if (arg.fields[3].atom != "member") throw out_of_bounds("unexpected field: " + arg.fields[3].atom,arg.fields[3].pos);
    }
    else{
        tmp_args[0] = arg.fields[3];
    }
    try{
        res.member = _arg<bool>(tmp_args,0,2);
;
    }
    catch(const out_of_bounds &err){
        throw out_of_bounds("in field member: " + err.txt,err.pos);
    }
    if (arg.fields[4].is_member()){
        tmp_args[0] = arg.fields[4].fields[0];
        if (arg.fields[4].atom != "ok") throw out_of_bounds("unexpected field: " + arg.fields[4].atom,arg.fields[4].pos);
    }
    else{
        tmp_args[0] = arg.fields[4];
    }
    try{
        res.ok = _arg<bool>(tmp_args,0,2);
;
    }
    catch(const out_of_bounds &err){
        throw out_of_bounds("in field ok: " + err.txt,err.pos);
    }
    if (arg.fields[5].is_member()){
        tmp_args[0] = arg.fields[5].fields[0];
        if (arg.fields[5].atom != "failed") throw out_of_bounds("unexpected field: " + arg.fields[5].atom,arg.fields[5].pos);
    }
    else{
        tmp_args[0] = arg.fields[5];
    }
    try{
        res.failed = _arg<ivyc_s1::vector__ivy__expr__>(tmp_args,0,0);
;
    }
    catch(const out_of_bounds &err){
        throw out_of_bounds("in field failed: " + err.txt,err.pos);
    }
    if (arg.fields[6].is_member()){
        tmp_args[0] = arg.fields[6].fields[0];
        if (arg.fields[6].atom != "error_reported") throw out_of_bounds("unexpected field: " + arg.fields[6].atom,arg.fields[6].pos);
    }
    else{
        tmp_args[0] = arg.fields[6];
    }
    try{
        res.error_reported = _arg<bool>(tmp_args,0,2);
;
    }
    catch(const out_of_bounds &err){
        throw out_of_bounds("in field error_reported: " + err.txt,err.pos);
    }
    return res;
}
template <>
void __deser<ivyc_s1::ivy__decost>(ivy_deser &inp, ivyc_s1::ivy__decost &res){
    inp.open_struct();
    inp.open_field("counter");
    __deser(inp,res.counter);
    inp.close_field();
    inp.open_field("m");
    __deser(inp,res.m);
    inp.close_field();
    inp.open_field("ty");
    __deser(inp,res.ty);
    inp.close_field();
    inp.open_field("member");
    __deser(inp,res.member);
    inp.close_field();
    inp.open_field("ok");
    __deser(inp,res.ok);
    inp.close_field();
    inp.open_field("failed");
    __deser(inp,res.failed);
    inp.close_field();
    inp.open_field("error_reported");
    __deser(inp,res.error_reported);
    inp.close_field();
    inp.close_struct();
}
template <>
ivyc_s1::ivy__dotident _arg<ivyc_s1::ivy__dotident>(std::vector<ivy_value> &args, unsigned idx, long long bound){
    ivyc_s1::ivy__dotident res;
    ivy_value &arg = args[idx];
    if (arg.atom.size() || arg.fields.size() != 2) throw out_of_bounds("wrong number of fields",args[idx].pos);
    std::vector<ivy_value> tmp_args(1);
    if (arg.fields[0].is_member()){
        tmp_args[0] = arg.fields[0].fields[0];
        if (arg.fields[0].atom != "namesp") throw out_of_bounds("unexpected field: " + arg.fields[0].atom,arg.fields[0].pos);
    }
    else{
        tmp_args[0] = arg.fields[0];
    }
    try{
        res.namesp = _arg<ivyc_s1::ivy__ident>(tmp_args,0,0);
;
    }
    catch(const out_of_bounds &err){
        throw out_of_bounds("in field namesp: " + err.txt,err.pos);
    }
    if (arg.fields[1].is_member()){
        tmp_args[0] = arg.fields[1].fields[0];
        if (arg.fields[1].atom != "member") throw out_of_bounds("unexpected field: " + arg.fields[1].atom,arg.fields[1].pos);
    }
    else{
        tmp_args[0] = arg.fields[1];
    }
    try{
        res.member = _arg<ivyc_s1::ivy__strident>(tmp_args,0,0);
;
    }
    catch(const out_of_bounds &err){
        throw out_of_bounds("in field member: " + err.txt,err.pos);
    }
    return res;
}
template <>
void __deser<ivyc_s1::ivy__dotident>(ivy_deser &inp, ivyc_s1::ivy__dotident &res){
    inp.open_struct();
    inp.open_field("namesp");
    __deser(inp,res.namesp);
    inp.close_field();
    inp.open_field("member");
    __deser(inp,res.member);
    inp.close_field();
    inp.close_struct();
}
template <>
ivyc_s1::ivy__elidest _arg<ivyc_s1::ivy__elidest>(std::vector<ivy_value> &args, unsigned idx, long long bound){
    ivyc_s1::ivy__elidest res;
    ivy_value &arg = args[idx];
    if (arg.atom.size() || arg.fields.size() != 1) throw out_of_bounds("wrong number of fields",args[idx].pos);
    std::vector<ivy_value> tmp_args(1);
    if (arg.fields[0].is_member()){
        tmp_args[0] = arg.fields[0].fields[0];
        if (arg.fields[0].atom != "seen") throw out_of_bounds("unexpected field: " + arg.fields[0].atom,arg.fields[0].pos);
    }
    else{
        tmp_args[0] = arg.fields[0];
    }
    try{
        res.seen = _arg<ivyc_s1::ivy__elidest__map>(tmp_args,0,0);
;
    }
    catch(const out_of_bounds &err){
        throw out_of_bounds("in field seen: " + err.txt,err.pos);
    }
    return res;
}
template <>
void __deser<ivyc_s1::ivy__elidest>(ivy_deser &inp, ivyc_s1::ivy__elidest &res){
    inp.open_struct();
    inp.open_field("seen");
    __deser(inp,res.seen);
    inp.close_field();
    inp.close_struct();
}
template <>
ivyc_s1::ivy__enumspec _arg<ivyc_s1::ivy__enumspec>(std::vector<ivy_value> &args, unsigned idx, long long bound){
    ivyc_s1::ivy__enumspec res;
    ivy_value &arg = args[idx];
    if (arg.atom.size() || arg.fields.size() != 2) throw out_of_bounds("wrong number of fields",args[idx].pos);
    std::vector<ivy_value> tmp_args(1);
    if (arg.fields[0].is_member()){
        tmp_args[0] = arg.fields[0].fields[0];
        if (arg.fields[0].atom != "constructors") throw out_of_bounds("unexpected field: " + arg.fields[0].atom,arg.fields[0].pos);
    }
    else{
        tmp_args[0] = arg.fields[0];
    }
    try{
        res.constructors = _arg<ivyc_s1::vector__ivy__expr__>(tmp_args,0,0);
;
    }
    catch(const out_of_bounds &err){
        throw out_of_bounds("in field constructors: " + err.txt,err.pos);
    }
    if (arg.fields[1].is_member()){
        tmp_args[0] = arg.fields[1].fields[0];
        if (arg.fields[1].atom != "ann") throw out_of_bounds("unexpected field: " + arg.fields[1].atom,arg.fields[1].pos);
    }
    else{
        tmp_args[0] = arg.fields[1];
    }
    try{
        res.ann = _arg<ivyc_s1::annot>(tmp_args,0,0);
;
    }
    catch(const out_of_bounds &err){
        throw out_of_bounds("in field ann: " + err.txt,err.pos);
    }
    return res;
}
template <>
void __deser<ivyc_s1::ivy__enumspec>(ivy_deser &inp, ivyc_s1::ivy__enumspec &res){
    inp.open_struct();
    inp.open_field("constructors");
    __deser(inp,res.constructors);
    inp.close_field();
    inp.open_field("ann");
    __deser(inp,res.ann);
    inp.close_field();
    inp.close_struct();
}
template <>
ivyc_s1::ivy__file_not_found _arg<ivyc_s1::ivy__file_not_found>(std::vector<ivy_value> &args, unsigned idx, long long bound){
    ivyc_s1::ivy__file_not_found res;
    ivy_value &arg = args[idx];
    if (arg.atom.size() || arg.fields.size() != 1) throw out_of_bounds("wrong number of fields",args[idx].pos);
    std::vector<ivy_value> tmp_args(1);
    if (arg.fields[0].is_member()){
        tmp_args[0] = arg.fields[0].fields[0];
        if (arg.fields[0].atom != "n") throw out_of_bounds("unexpected field: " + arg.fields[0].atom,arg.fields[0].pos);
    }
    else{
        tmp_args[0] = arg.fields[0];
    }
    try{
        res.n = _arg<ivyc_s1::str>(tmp_args,0,0);
;
    }
    catch(const out_of_bounds &err){
        throw out_of_bounds("in field n: " + err.txt,err.pos);
    }
    return res;
}
template <>
void __deser<ivyc_s1::ivy__file_not_found>(ivy_deser &inp, ivyc_s1::ivy__file_not_found &res){
    inp.open_struct();
    inp.open_field("n");
    __deser(inp,res.n);
    inp.close_field();
    inp.close_struct();
}
template <>
ivyc_s1::ivy__flatst _arg<ivyc_s1::ivy__flatst>(std::vector<ivy_value> &args, unsigned idx, long long bound){
    ivyc_s1::ivy__flatst res;
    ivy_value &arg = args[idx];
    if (arg.atom.size() || arg.fields.size() != 14) throw out_of_bounds("wrong number of fields",args[idx].pos);
    std::vector<ivy_value> tmp_args(1);
    if (arg.fields[0].is_member()){
        tmp_args[0] = arg.fields[0].fields[0];
        if (arg.fields[0].atom != "decls") throw out_of_bounds("unexpected field: " + arg.fields[0].atom,arg.fields[0].pos);
    }
    else{
        tmp_args[0] = arg.fields[0];
    }
    try{
        res.decls = _arg<ivyc_s1::vector__ivy__decl__>(tmp_args,0,0);
;
    }
    catch(const out_of_bounds &err){
        throw out_of_bounds("in field decls: " + err.txt,err.pos);
    }
    if (arg.fields[1].is_member()){
        tmp_args[0] = arg.fields[1].fields[0];
        if (arg.fields[1].atom != "prmvals") throw out_of_bounds("unexpected field: " + arg.fields[1].atom,arg.fields[1].pos);
    }
    else{
        tmp_args[0] = arg.fields[1];
    }
    try{
        res.prmvals = _arg<ivyc_s1::ivy__ident_to_ident>(tmp_args,0,0);
;
    }
    catch(const out_of_bounds &err){
        throw out_of_bounds("in field prmvals: " + err.txt,err.pos);
    }
    if (arg.fields[2].is_member()){
        tmp_args[0] = arg.fields[2].fields[0];
        if (arg.fields[2].atom != "moddecls") throw out_of_bounds("unexpected field: " + arg.fields[2].atom,arg.fields[2].pos);
    }
    else{
        tmp_args[0] = arg.fields[2];
    }
    try{
        res.moddecls = _arg<ivyc_s1::ivy__ident_to_moduledc>(tmp_args,0,0);
;
    }
    catch(const out_of_bounds &err){
        throw out_of_bounds("in field moddecls: " + err.txt,err.pos);
    }
    if (arg.fields[3].is_member()){
        tmp_args[0] = arg.fields[3].fields[0];
        if (arg.fields[3].atom != "defs") throw out_of_bounds("unexpected field: " + arg.fields[3].atom,arg.fields[3].pos);
    }
    else{
        tmp_args[0] = arg.fields[3];
    }
    try{
        res.defs = _arg<ivyc_s1::ivy__ident_set>(tmp_args,0,0);
;
    }
    catch(const out_of_bounds &err){
        throw out_of_bounds("in field defs: " + err.txt,err.pos);
    }
    if (arg.fields[4].is_member()){
        tmp_args[0] = arg.fields[4].fields[0];
        if (arg.fields[4].atom != "has_root") throw out_of_bounds("unexpected field: " + arg.fields[4].atom,arg.fields[4].pos);
    }
    else{
        tmp_args[0] = arg.fields[4];
    }
    try{
        res.has_root = _arg<bool>(tmp_args,0,2);
;
    }
    catch(const out_of_bounds &err){
        throw out_of_bounds("in field has_root: " + err.txt,err.pos);
    }
    if (arg.fields[5].is_member()){
        tmp_args[0] = arg.fields[5].fields[0];
        if (arg.fields[5].atom != "root") throw out_of_bounds("unexpected field: " + arg.fields[5].atom,arg.fields[5].pos);
    }
    else{
        tmp_args[0] = arg.fields[5];
    }
    try{
        res.root = _arg<ivyc_s1::ivy__ident>(tmp_args,0,0);
;
    }
    catch(const out_of_bounds &err){
        throw out_of_bounds("in field root: " + err.txt,err.pos);
    }
    if (arg.fields[6].is_member()){
        tmp_args[0] = arg.fields[6].fields[0];
        if (arg.fields[6].atom != "locals") throw out_of_bounds("unexpected field: " + arg.fields[6].atom,arg.fields[6].pos);
    }
    else{
        tmp_args[0] = arg.fields[6];
    }
    try{
        res.locals = _arg<ivyc_s1::ivy__ident_set>(tmp_args,0,0);
;
    }
    catch(const out_of_bounds &err){
        throw out_of_bounds("in field locals: " + err.txt,err.pos);
    }
    if (arg.fields[7].is_member()){
        tmp_args[0] = arg.fields[7].fields[0];
        if (arg.fields[7].atom != "globals") throw out_of_bounds("unexpected field: " + arg.fields[7].atom,arg.fields[7].pos);
    }
    else{
        tmp_args[0] = arg.fields[7];
    }
    try{
        res.globals = _arg<ivyc_s1::ivy__ident_set>(tmp_args,0,0);
;
    }
    catch(const out_of_bounds &err){
        throw out_of_bounds("in field globals: " + err.txt,err.pos);
    }
    if (arg.fields[8].is_member()){
        tmp_args[0] = arg.fields[8].fields[0];
        if (arg.fields[8].atom != "defining") throw out_of_bounds("unexpected field: " + arg.fields[8].atom,arg.fields[8].pos);
    }
    else{
        tmp_args[0] = arg.fields[8];
    }
    try{
        res.defining = _arg<bool>(tmp_args,0,2);
;
    }
    catch(const out_of_bounds &err){
        throw out_of_bounds("in field defining: " + err.txt,err.pos);
    }
    if (arg.fields[9].is_member()){
        tmp_args[0] = arg.fields[9].fields[0];
        if (arg.fields[9].atom != "absolute") throw out_of_bounds("unexpected field: " + arg.fields[9].atom,arg.fields[9].pos);
    }
    else{
        tmp_args[0] = arg.fields[9];
    }
    try{
        res.absolute = _arg<bool>(tmp_args,0,2);
;
    }
    catch(const out_of_bounds &err){
        throw out_of_bounds("in field absolute: " + err.txt,err.pos);
    }
    if (arg.fields[10].is_member()){
        tmp_args[0] = arg.fields[10].fields[0];
        if (arg.fields[10].atom != "dot_rhs") throw out_of_bounds("unexpected field: " + arg.fields[10].atom,arg.fields[10].pos);
    }
    else{
        tmp_args[0] = arg.fields[10];
    }
    try{
        res.dot_rhs = _arg<bool>(tmp_args,0,2);
;
    }
    catch(const out_of_bounds &err){
        throw out_of_bounds("in field dot_rhs: " + err.txt,err.pos);
    }
    if (arg.fields[11].is_member()){
        tmp_args[0] = arg.fields[11].fields[0];
        if (arg.fields[11].atom != "autodefs") throw out_of_bounds("unexpected field: " + arg.fields[11].atom,arg.fields[11].pos);
    }
    else{
        tmp_args[0] = arg.fields[11];
    }
    try{
        res.autodefs = _arg<ivyc_s1::ivy__ident_to_instantiatedc>(tmp_args,0,0);
;
    }
    catch(const out_of_bounds &err){
        throw out_of_bounds("in field autodefs: " + err.txt,err.pos);
    }
    if (arg.fields[12].is_member()){
        tmp_args[0] = arg.fields[12].fields[0];
        if (arg.fields[12].atom != "autos_pending") throw out_of_bounds("unexpected field: " + arg.fields[12].atom,arg.fields[12].pos);
    }
    else{
        tmp_args[0] = arg.fields[12];
    }
    try{
        res.autos_pending = _arg<ivyc_s1::ivy__ident_set>(tmp_args,0,0);
;
    }
    catch(const out_of_bounds &err){
        throw out_of_bounds("in field autos_pending: " + err.txt,err.pos);
    }
    if (arg.fields[13].is_member()){
        tmp_args[0] = arg.fields[13].fields[0];
        if (arg.fields[13].atom != "no_undefined") throw out_of_bounds("unexpected field: " + arg.fields[13].atom,arg.fields[13].pos);
    }
    else{
        tmp_args[0] = arg.fields[13];
    }
    try{
        res.no_undefined = _arg<bool>(tmp_args,0,2);
;
    }
    catch(const out_of_bounds &err){
        throw out_of_bounds("in field no_undefined: " + err.txt,err.pos);
    }
    return res;
}
template <>
void __deser<ivyc_s1::ivy__flatst>(ivy_deser &inp, ivyc_s1::ivy__flatst &res){
    inp.open_struct();
    inp.open_field("decls");
    __deser(inp,res.decls);
    inp.close_field();
    inp.open_field("prmvals");
    __deser(inp,res.prmvals);
    inp.close_field();
    inp.open_field("moddecls");
    __deser(inp,res.moddecls);
    inp.close_field();
    inp.open_field("defs");
    __deser(inp,res.defs);
    inp.close_field();
    inp.open_field("has_root");
    __deser(inp,res.has_root);
    inp.close_field();
    inp.open_field("root");
    __deser(inp,res.root);
    inp.close_field();
    inp.open_field("locals");
    __deser(inp,res.locals);
    inp.close_field();
    inp.open_field("globals");
    __deser(inp,res.globals);
    inp.close_field();
    inp.open_field("defining");
    __deser(inp,res.defining);
    inp.close_field();
    inp.open_field("absolute");
    __deser(inp,res.absolute);
    inp.close_field();
    inp.open_field("dot_rhs");
    __deser(inp,res.dot_rhs);
    inp.close_field();
    inp.open_field("autodefs");
    __deser(inp,res.autodefs);
    inp.close_field();
    inp.open_field("autos_pending");
    __deser(inp,res.autos_pending);
    inp.close_field();
    inp.open_field("no_undefined");
    __deser(inp,res.no_undefined);
    inp.close_field();
    inp.close_struct();
}
template <>
ivyc_s1::ivy__global_types _arg<ivyc_s1::ivy__global_types>(std::vector<ivy_value> &args, unsigned idx, long long bound){
    ivyc_s1::ivy__global_types res;
    ivy_value &arg = args[idx];
    if (arg.atom.size() || arg.fields.size() != 3) throw out_of_bounds("wrong number of fields",args[idx].pos);
    std::vector<ivy_value> tmp_args(1);
    if (arg.fields[0].is_member()){
        tmp_args[0] = arg.fields[0].fields[0];
        if (arg.fields[0].atom != "type_of") throw out_of_bounds("unexpected field: " + arg.fields[0].atom,arg.fields[0].pos);
    }
    else{
        tmp_args[0] = arg.fields[0];
    }
    try{
        res.type_of = _arg<ivyc_s1::ivy__symeval>(tmp_args,0,0);
;
    }
    catch(const out_of_bounds &err){
        throw out_of_bounds("in field type_of: " + err.txt,err.pos);
    }
    if (arg.fields[1].is_member()){
        tmp_args[0] = arg.fields[1].fields[0];
        if (arg.fields[1].atom != "is_action") throw out_of_bounds("unexpected field: " + arg.fields[1].atom,arg.fields[1].pos);
    }
    else{
        tmp_args[0] = arg.fields[1];
    }
    try{
        res.is_action = _arg<ivyc_s1::ivy__ident_set>(tmp_args,0,0);
;
    }
    catch(const out_of_bounds &err){
        throw out_of_bounds("in field is_action: " + err.txt,err.pos);
    }
    if (arg.fields[2].is_member()){
        tmp_args[0] = arg.fields[2].fields[0];
        if (arg.fields[2].atom != "curried") throw out_of_bounds("unexpected field: " + arg.fields[2].atom,arg.fields[2].pos);
    }
    else{
        tmp_args[0] = arg.fields[2];
    }
    try{
        res.curried = _arg<bool>(tmp_args,0,2);
;
    }
    catch(const out_of_bounds &err){
        throw out_of_bounds("in field curried: " + err.txt,err.pos);
    }
    return res;
}
template <>
void __deser<ivyc_s1::ivy__global_types>(ivy_deser &inp, ivyc_s1::ivy__global_types &res){
    inp.open_struct();
    inp.open_field("type_of");
    __deser(inp,res.type_of);
    inp.close_field();
    inp.open_field("is_action");
    __deser(inp,res.is_action);
    inp.close_field();
    inp.open_field("curried");
    __deser(inp,res.curried);
    inp.close_field();
    inp.close_struct();
}
template <>
ivyc_s1::ivy__groupdc _arg<ivyc_s1::ivy__groupdc>(std::vector<ivy_value> &args, unsigned idx, long long bound){
    ivyc_s1::ivy__groupdc res;
    ivy_value &arg = args[idx];
    if (arg.atom.size() || arg.fields.size() != 2) throw out_of_bounds("wrong number of fields",args[idx].pos);
    std::vector<ivy_value> tmp_args(1);
    if (arg.fields[0].is_member()){
        tmp_args[0] = arg.fields[0].fields[0];
        if (arg.fields[0].atom != "decls") throw out_of_bounds("unexpected field: " + arg.fields[0].atom,arg.fields[0].pos);
    }
    else{
        tmp_args[0] = arg.fields[0];
    }
    try{
        res.decls = _arg<ivyc_s1::vector__ivy__decl__>(tmp_args,0,0);
;
    }
    catch(const out_of_bounds &err){
        throw out_of_bounds("in field decls: " + err.txt,err.pos);
    }
    if (arg.fields[1].is_member()){
        tmp_args[0] = arg.fields[1].fields[0];
        if (arg.fields[1].atom != "ann") throw out_of_bounds("unexpected field: " + arg.fields[1].atom,arg.fields[1].pos);
    }
    else{
        tmp_args[0] = arg.fields[1];
    }
    try{
        res.ann = _arg<ivyc_s1::annot>(tmp_args,0,0);
;
    }
    catch(const out_of_bounds &err){
        throw out_of_bounds("in field ann: " + err.txt,err.pos);
    }
    return res;
}
template <>
void __deser<ivyc_s1::ivy__groupdc>(ivy_deser &inp, ivyc_s1::ivy__groupdc &res){
    inp.open_struct();
    inp.open_field("decls");
    __deser(inp,res.decls);
    inp.close_field();
    inp.open_field("ann");
    __deser(inp,res.ann);
    inp.close_field();
    inp.close_struct();
}
template <>
ivyc_s1::ivy__header _arg<ivyc_s1::ivy__header>(std::vector<ivy_value> &args, unsigned idx, long long bound){
    ivyc_s1::ivy__header res;
    ivy_value &arg = args[idx];
    if (arg.atom.size() || arg.fields.size() != 2) throw out_of_bounds("wrong number of fields",args[idx].pos);
    std::vector<ivy_value> tmp_args(1);
    if (arg.fields[0].is_member()){
        tmp_args[0] = arg.fields[0].fields[0];
        if (arg.fields[0].atom != "filename") throw out_of_bounds("unexpected field: " + arg.fields[0].atom,arg.fields[0].pos);
    }
    else{
        tmp_args[0] = arg.fields[0];
    }
    try{
        res.filename = _arg<ivyc_s1::str>(tmp_args,0,0);
;
    }
    catch(const out_of_bounds &err){
        throw out_of_bounds("in field filename: " + err.txt,err.pos);
    }
    if (arg.fields[1].is_member()){
        tmp_args[0] = arg.fields[1].fields[0];
        if (arg.fields[1].atom != "ann") throw out_of_bounds("unexpected field: " + arg.fields[1].atom,arg.fields[1].pos);
    }
    else{
        tmp_args[0] = arg.fields[1];
    }
    try{
        res.ann = _arg<ivyc_s1::annot>(tmp_args,0,0);
;
    }
    catch(const out_of_bounds &err){
        throw out_of_bounds("in field ann: " + err.txt,err.pos);
    }
    return res;
}
template <>
void __deser<ivyc_s1::ivy__header>(ivy_deser &inp, ivyc_s1::ivy__header &res){
    inp.open_struct();
    inp.open_field("filename");
    __deser(inp,res.filename);
    inp.close_field();
    inp.open_field("ann");
    __deser(inp,res.ann);
    inp.close_field();
    inp.close_struct();
}
template <>
ivyc_s1::ivy__ifst _arg<ivyc_s1::ivy__ifst>(std::vector<ivy_value> &args, unsigned idx, long long bound){
    ivyc_s1::ivy__ifst res;
    ivy_value &arg = args[idx];
    if (arg.atom.size() || arg.fields.size() != 4) throw out_of_bounds("wrong number of fields",args[idx].pos);
    std::vector<ivy_value> tmp_args(1);
    if (arg.fields[0].is_member()){
        tmp_args[0] = arg.fields[0].fields[0];
        if (arg.fields[0].atom != "cond") throw out_of_bounds("unexpected field: " + arg.fields[0].atom,arg.fields[0].pos);
    }
    else{
        tmp_args[0] = arg.fields[0];
    }
    try{
        res.cond = _arg<ivyc_s1::ivy__expr>(tmp_args,0,0);
;
    }
    catch(const out_of_bounds &err){
        throw out_of_bounds("in field cond: " + err.txt,err.pos);
    }
    if (arg.fields[1].is_member()){
        tmp_args[0] = arg.fields[1].fields[0];
        if (arg.fields[1].atom != "thenst") throw out_of_bounds("unexpected field: " + arg.fields[1].atom,arg.fields[1].pos);
    }
    else{
        tmp_args[0] = arg.fields[1];
    }
    try{
        res.thenst = _arg<ivyc_s1::ivy__stmt>(tmp_args,0,0);
;
    }
    catch(const out_of_bounds &err){
        throw out_of_bounds("in field thenst: " + err.txt,err.pos);
    }
    if (arg.fields[2].is_member()){
        tmp_args[0] = arg.fields[2].fields[0];
        if (arg.fields[2].atom != "elsest") throw out_of_bounds("unexpected field: " + arg.fields[2].atom,arg.fields[2].pos);
    }
    else{
        tmp_args[0] = arg.fields[2];
    }
    try{
        res.elsest = _arg<ivyc_s1::ivy__stmt>(tmp_args,0,0);
;
    }
    catch(const out_of_bounds &err){
        throw out_of_bounds("in field elsest: " + err.txt,err.pos);
    }
    if (arg.fields[3].is_member()){
        tmp_args[0] = arg.fields[3].fields[0];
        if (arg.fields[3].atom != "ann") throw out_of_bounds("unexpected field: " + arg.fields[3].atom,arg.fields[3].pos);
    }
    else{
        tmp_args[0] = arg.fields[3];
    }
    try{
        res.ann = _arg<ivyc_s1::annot>(tmp_args,0,0);
;
    }
    catch(const out_of_bounds &err){
        throw out_of_bounds("in field ann: " + err.txt,err.pos);
    }
    return res;
}
template <>
void __deser<ivyc_s1::ivy__ifst>(ivy_deser &inp, ivyc_s1::ivy__ifst &res){
    inp.open_struct();
    inp.open_field("cond");
    __deser(inp,res.cond);
    inp.close_field();
    inp.open_field("thenst");
    __deser(inp,res.thenst);
    inp.close_field();
    inp.open_field("elsest");
    __deser(inp,res.elsest);
    inp.close_field();
    inp.open_field("ann");
    __deser(inp,res.ann);
    inp.close_field();
    inp.close_struct();
}
template <>
ivyc_s1::ivy__includedc _arg<ivyc_s1::ivy__includedc>(std::vector<ivy_value> &args, unsigned idx, long long bound){
    ivyc_s1::ivy__includedc res;
    ivy_value &arg = args[idx];
    if (arg.atom.size() || arg.fields.size() != 2) throw out_of_bounds("wrong number of fields",args[idx].pos);
    std::vector<ivy_value> tmp_args(1);
    if (arg.fields[0].is_member()){
        tmp_args[0] = arg.fields[0].fields[0];
        if (arg.fields[0].atom != "file") throw out_of_bounds("unexpected field: " + arg.fields[0].atom,arg.fields[0].pos);
    }
    else{
        tmp_args[0] = arg.fields[0];
    }
    try{
        res.file = _arg<ivyc_s1::ivy__expr>(tmp_args,0,0);
;
    }
    catch(const out_of_bounds &err){
        throw out_of_bounds("in field file: " + err.txt,err.pos);
    }
    if (arg.fields[1].is_member()){
        tmp_args[0] = arg.fields[1].fields[0];
        if (arg.fields[1].atom != "ann") throw out_of_bounds("unexpected field: " + arg.fields[1].atom,arg.fields[1].pos);
    }
    else{
        tmp_args[0] = arg.fields[1];
    }
    try{
        res.ann = _arg<ivyc_s1::annot>(tmp_args,0,0);
;
    }
    catch(const out_of_bounds &err){
        throw out_of_bounds("in field ann: " + err.txt,err.pos);
    }
    return res;
}
template <>
void __deser<ivyc_s1::ivy__includedc>(ivy_deser &inp, ivyc_s1::ivy__includedc &res){
    inp.open_struct();
    inp.open_field("file");
    __deser(inp,res.file);
    inp.close_field();
    inp.open_field("ann");
    __deser(inp,res.ann);
    inp.close_field();
    inp.close_struct();
}
template <>
ivyc_s1::ivy__initdc _arg<ivyc_s1::ivy__initdc>(std::vector<ivy_value> &args, unsigned idx, long long bound){
    ivyc_s1::ivy__initdc res;
    ivy_value &arg = args[idx];
    if (arg.atom.size() || arg.fields.size() != 2) throw out_of_bounds("wrong number of fields",args[idx].pos);
    std::vector<ivy_value> tmp_args(1);
    if (arg.fields[0].is_member()){
        tmp_args[0] = arg.fields[0].fields[0];
        if (arg.fields[0].atom != "body") throw out_of_bounds("unexpected field: " + arg.fields[0].atom,arg.fields[0].pos);
    }
    else{
        tmp_args[0] = arg.fields[0];
    }
    try{
        res.body = _arg<ivyc_s1::ivy__stmt>(tmp_args,0,0);
;
    }
    catch(const out_of_bounds &err){
        throw out_of_bounds("in field body: " + err.txt,err.pos);
    }
    if (arg.fields[1].is_member()){
        tmp_args[0] = arg.fields[1].fields[0];
        if (arg.fields[1].atom != "ann") throw out_of_bounds("unexpected field: " + arg.fields[1].atom,arg.fields[1].pos);
    }
    else{
        tmp_args[0] = arg.fields[1];
    }
    try{
        res.ann = _arg<ivyc_s1::annot>(tmp_args,0,0);
;
    }
    catch(const out_of_bounds &err){
        throw out_of_bounds("in field ann: " + err.txt,err.pos);
    }
    return res;
}
template <>
void __deser<ivyc_s1::ivy__initdc>(ivy_deser &inp, ivyc_s1::ivy__initdc &res){
    inp.open_struct();
    inp.open_field("body");
    __deser(inp,res.body);
    inp.close_field();
    inp.open_field("ann");
    __deser(inp,res.ann);
    inp.close_field();
    inp.close_struct();
}
template <>
ivyc_s1::ivy__instancedc _arg<ivyc_s1::ivy__instancedc>(std::vector<ivy_value> &args, unsigned idx, long long bound){
    ivyc_s1::ivy__instancedc res;
    ivy_value &arg = args[idx];
    if (arg.atom.size() || arg.fields.size() != 5) throw out_of_bounds("wrong number of fields",args[idx].pos);
    std::vector<ivy_value> tmp_args(1);
    if (arg.fields[0].is_member()){
        tmp_args[0] = arg.fields[0].fields[0];
        if (arg.fields[0].atom != "objname") throw out_of_bounds("unexpected field: " + arg.fields[0].atom,arg.fields[0].pos);
    }
    else{
        tmp_args[0] = arg.fields[0];
    }
    try{
        res.objname = _arg<ivyc_s1::ivy__expr>(tmp_args,0,0);
;
    }
    catch(const out_of_bounds &err){
        throw out_of_bounds("in field objname: " + err.txt,err.pos);
    }
    if (arg.fields[1].is_member()){
        tmp_args[0] = arg.fields[1].fields[0];
        if (arg.fields[1].atom != "modname") throw out_of_bounds("unexpected field: " + arg.fields[1].atom,arg.fields[1].pos);
    }
    else{
        tmp_args[0] = arg.fields[1];
    }
    try{
        res.modname = _arg<ivyc_s1::ivy__expr>(tmp_args,0,0);
;
    }
    catch(const out_of_bounds &err){
        throw out_of_bounds("in field modname: " + err.txt,err.pos);
    }
    if (arg.fields[2].is_member()){
        tmp_args[0] = arg.fields[2].fields[0];
        if (arg.fields[2].atom != "prms") throw out_of_bounds("unexpected field: " + arg.fields[2].atom,arg.fields[2].pos);
    }
    else{
        tmp_args[0] = arg.fields[2];
    }
    try{
        res.prms = _arg<ivyc_s1::vector__ivy__expr__>(tmp_args,0,0);
;
    }
    catch(const out_of_bounds &err){
        throw out_of_bounds("in field prms: " + err.txt,err.pos);
    }
    if (arg.fields[3].is_member()){
        tmp_args[0] = arg.fields[3].fields[0];
        if (arg.fields[3].atom != "is_auto") throw out_of_bounds("unexpected field: " + arg.fields[3].atom,arg.fields[3].pos);
    }
    else{
        tmp_args[0] = arg.fields[3];
    }
    try{
        res.is_auto = _arg<bool>(tmp_args,0,2);
;
    }
    catch(const out_of_bounds &err){
        throw out_of_bounds("in field is_auto: " + err.txt,err.pos);
    }
    if (arg.fields[4].is_member()){
        tmp_args[0] = arg.fields[4].fields[0];
        if (arg.fields[4].atom != "ann") throw out_of_bounds("unexpected field: " + arg.fields[4].atom,arg.fields[4].pos);
    }
    else{
        tmp_args[0] = arg.fields[4];
    }
    try{
        res.ann = _arg<ivyc_s1::annot>(tmp_args,0,0);
;
    }
    catch(const out_of_bounds &err){
        throw out_of_bounds("in field ann: " + err.txt,err.pos);
    }
    return res;
}
template <>
void __deser<ivyc_s1::ivy__instancedc>(ivy_deser &inp, ivyc_s1::ivy__instancedc &res){
    inp.open_struct();
    inp.open_field("objname");
    __deser(inp,res.objname);
    inp.close_field();
    inp.open_field("modname");
    __deser(inp,res.modname);
    inp.close_field();
    inp.open_field("prms");
    __deser(inp,res.prms);
    inp.close_field();
    inp.open_field("is_auto");
    __deser(inp,res.is_auto);
    inp.close_field();
    inp.open_field("ann");
    __deser(inp,res.ann);
    inp.close_field();
    inp.close_struct();
}
template <>
ivyc_s1::ivy__instantiatedc _arg<ivyc_s1::ivy__instantiatedc>(std::vector<ivy_value> &args, unsigned idx, long long bound){
    ivyc_s1::ivy__instantiatedc res;
    ivy_value &arg = args[idx];
    if (arg.atom.size() || arg.fields.size() != 3) throw out_of_bounds("wrong number of fields",args[idx].pos);
    std::vector<ivy_value> tmp_args(1);
    if (arg.fields[0].is_member()){
        tmp_args[0] = arg.fields[0].fields[0];
        if (arg.fields[0].atom != "name") throw out_of_bounds("unexpected field: " + arg.fields[0].atom,arg.fields[0].pos);
    }
    else{
        tmp_args[0] = arg.fields[0];
    }
    try{
        res.name = _arg<ivyc_s1::ivy__expr>(tmp_args,0,0);
;
    }
    catch(const out_of_bounds &err){
        throw out_of_bounds("in field name: " + err.txt,err.pos);
    }
    if (arg.fields[1].is_member()){
        tmp_args[0] = arg.fields[1].fields[0];
        if (arg.fields[1].atom != "prms") throw out_of_bounds("unexpected field: " + arg.fields[1].atom,arg.fields[1].pos);
    }
    else{
        tmp_args[0] = arg.fields[1];
    }
    try{
        res.prms = _arg<ivyc_s1::vector__ivy__expr__>(tmp_args,0,0);
;
    }
    catch(const out_of_bounds &err){
        throw out_of_bounds("in field prms: " + err.txt,err.pos);
    }
    if (arg.fields[2].is_member()){
        tmp_args[0] = arg.fields[2].fields[0];
        if (arg.fields[2].atom != "ann") throw out_of_bounds("unexpected field: " + arg.fields[2].atom,arg.fields[2].pos);
    }
    else{
        tmp_args[0] = arg.fields[2];
    }
    try{
        res.ann = _arg<ivyc_s1::annot>(tmp_args,0,0);
;
    }
    catch(const out_of_bounds &err){
        throw out_of_bounds("in field ann: " + err.txt,err.pos);
    }
    return res;
}
template <>
void __deser<ivyc_s1::ivy__instantiatedc>(ivy_deser &inp, ivyc_s1::ivy__instantiatedc &res){
    inp.open_struct();
    inp.open_field("name");
    __deser(inp,res.name);
    inp.close_field();
    inp.open_field("prms");
    __deser(inp,res.prms);
    inp.close_field();
    inp.open_field("ann");
    __deser(inp,res.ann);
    inp.close_field();
    inp.close_struct();
}
template <>
ivyc_s1::ivy__interpdc _arg<ivyc_s1::ivy__interpdc>(std::vector<ivy_value> &args, unsigned idx, long long bound){
    ivyc_s1::ivy__interpdc res;
    ivy_value &arg = args[idx];
    if (arg.atom.size() || arg.fields.size() != 3) throw out_of_bounds("wrong number of fields",args[idx].pos);
    std::vector<ivy_value> tmp_args(1);
    if (arg.fields[0].is_member()){
        tmp_args[0] = arg.fields[0].fields[0];
        if (arg.fields[0].atom != "itype") throw out_of_bounds("unexpected field: " + arg.fields[0].atom,arg.fields[0].pos);
    }
    else{
        tmp_args[0] = arg.fields[0];
    }
    try{
        res.itype = _arg<ivyc_s1::ivy__expr>(tmp_args,0,0);
;
    }
    catch(const out_of_bounds &err){
        throw out_of_bounds("in field itype: " + err.txt,err.pos);
    }
    if (arg.fields[1].is_member()){
        tmp_args[0] = arg.fields[1].fields[0];
        if (arg.fields[1].atom != "ctype") throw out_of_bounds("unexpected field: " + arg.fields[1].atom,arg.fields[1].pos);
    }
    else{
        tmp_args[0] = arg.fields[1];
    }
    try{
        res.ctype = _arg<ivyc_s1::ivy__expr>(tmp_args,0,0);
;
    }
    catch(const out_of_bounds &err){
        throw out_of_bounds("in field ctype: " + err.txt,err.pos);
    }
    if (arg.fields[2].is_member()){
        tmp_args[0] = arg.fields[2].fields[0];
        if (arg.fields[2].atom != "ann") throw out_of_bounds("unexpected field: " + arg.fields[2].atom,arg.fields[2].pos);
    }
    else{
        tmp_args[0] = arg.fields[2];
    }
    try{
        res.ann = _arg<ivyc_s1::annot>(tmp_args,0,0);
;
    }
    catch(const out_of_bounds &err){
        throw out_of_bounds("in field ann: " + err.txt,err.pos);
    }
    return res;
}
template <>
void __deser<ivyc_s1::ivy__interpdc>(ivy_deser &inp, ivyc_s1::ivy__interpdc &res){
    inp.open_struct();
    inp.open_field("itype");
    __deser(inp,res.itype);
    inp.close_field();
    inp.open_field("ctype");
    __deser(inp,res.ctype);
    inp.close_field();
    inp.open_field("ann");
    __deser(inp,res.ann);
    inp.close_field();
    inp.close_struct();
}
template <>
ivyc_s1::ivy__local_tracker _arg<ivyc_s1::ivy__local_tracker>(std::vector<ivy_value> &args, unsigned idx, long long bound){
    ivyc_s1::ivy__local_tracker res;
    ivy_value &arg = args[idx];
    if (arg.atom.size() || arg.fields.size() != 1) throw out_of_bounds("wrong number of fields",args[idx].pos);
    std::vector<ivy_value> tmp_args(1);
    if (arg.fields[0].is_member()){
        tmp_args[0] = arg.fields[0].fields[0];
        if (arg.fields[0].atom != "map") throw out_of_bounds("unexpected field: " + arg.fields[0].atom,arg.fields[0].pos);
    }
    else{
        tmp_args[0] = arg.fields[0];
    }
    try{
        res.map = _arg<ivyc_s1::ivy__push_pop_ident_set>(tmp_args,0,0);
;
    }
    catch(const out_of_bounds &err){
        throw out_of_bounds("in field map: " + err.txt,err.pos);
    }
    return res;
}
template <>
void __deser<ivyc_s1::ivy__local_tracker>(ivy_deser &inp, ivyc_s1::ivy__local_tracker &res){
    inp.open_struct();
    inp.open_field("map");
    __deser(inp,res.map);
    inp.close_field();
    inp.close_struct();
}
template <>
ivyc_s1::ivy__lvalue_count _arg<ivyc_s1::ivy__lvalue_count>(std::vector<ivy_value> &args, unsigned idx, long long bound){
    ivyc_s1::ivy__lvalue_count res;
    ivy_value &arg = args[idx];
    if (arg.atom.size() || arg.fields.size() != 3) throw out_of_bounds("wrong number of fields",args[idx].pos);
    std::vector<ivy_value> tmp_args(1);
    if (arg.fields[0].is_member()){
        tmp_args[0] = arg.fields[0].fields[0];
        if (arg.fields[0].atom != "lvalue") throw out_of_bounds("unexpected field: " + arg.fields[0].atom,arg.fields[0].pos);
    }
    else{
        tmp_args[0] = arg.fields[0];
    }
    try{
        res.lvalue = _arg<ivyc_s1::cpp__expr>(tmp_args,0,0);
;
    }
    catch(const out_of_bounds &err){
        throw out_of_bounds("in field lvalue: " + err.txt,err.pos);
    }
    if (arg.fields[1].is_member()){
        tmp_args[0] = arg.fields[1].fields[0];
        if (arg.fields[1].atom != "path") throw out_of_bounds("unexpected field: " + arg.fields[1].atom,arg.fields[1].pos);
    }
    else{
        tmp_args[0] = arg.fields[1];
    }
    try{
        res.path = _arg<ivyc_s1::ivy__access_path>(tmp_args,0,0);
;
    }
    catch(const out_of_bounds &err){
        throw out_of_bounds("in field path: " + err.txt,err.pos);
    }
    if (arg.fields[2].is_member()){
        tmp_args[0] = arg.fields[2].fields[0];
        if (arg.fields[2].atom != "cnt") throw out_of_bounds("unexpected field: " + arg.fields[2].atom,arg.fields[2].pos);
    }
    else{
        tmp_args[0] = arg.fields[2];
    }
    try{
        res.cnt = _arg<unsigned long long>(tmp_args,0,0);
;
    }
    catch(const out_of_bounds &err){
        throw out_of_bounds("in field cnt: " + err.txt,err.pos);
    }
    return res;
}
template <>
void __deser<ivyc_s1::ivy__lvalue_count>(ivy_deser &inp, ivyc_s1::ivy__lvalue_count &res){
    inp.open_struct();
    inp.open_field("lvalue");
    __deser(inp,res.lvalue);
    inp.close_field();
    inp.open_field("path");
    __deser(inp,res.path);
    inp.close_field();
    inp.open_field("cnt");
    __deser(inp,res.cnt);
    inp.close_field();
    inp.close_struct();
}
template <>
ivyc_s1::ivy__moduledc _arg<ivyc_s1::ivy__moduledc>(std::vector<ivy_value> &args, unsigned idx, long long bound){
    ivyc_s1::ivy__moduledc res;
    ivy_value &arg = args[idx];
    if (arg.atom.size() || arg.fields.size() != 4) throw out_of_bounds("wrong number of fields",args[idx].pos);
    std::vector<ivy_value> tmp_args(1);
    if (arg.fields[0].is_member()){
        tmp_args[0] = arg.fields[0].fields[0];
        if (arg.fields[0].atom != "name") throw out_of_bounds("unexpected field: " + arg.fields[0].atom,arg.fields[0].pos);
    }
    else{
        tmp_args[0] = arg.fields[0];
    }
    try{
        res.name = _arg<ivyc_s1::ivy__expr>(tmp_args,0,0);
;
    }
    catch(const out_of_bounds &err){
        throw out_of_bounds("in field name: " + err.txt,err.pos);
    }
    if (arg.fields[1].is_member()){
        tmp_args[0] = arg.fields[1].fields[0];
        if (arg.fields[1].atom != "prms") throw out_of_bounds("unexpected field: " + arg.fields[1].atom,arg.fields[1].pos);
    }
    else{
        tmp_args[0] = arg.fields[1];
    }
    try{
        res.prms = _arg<ivyc_s1::vector__ivy__expr__>(tmp_args,0,0);
;
    }
    catch(const out_of_bounds &err){
        throw out_of_bounds("in field prms: " + err.txt,err.pos);
    }
    if (arg.fields[2].is_member()){
        tmp_args[0] = arg.fields[2].fields[0];
        if (arg.fields[2].atom != "body") throw out_of_bounds("unexpected field: " + arg.fields[2].atom,arg.fields[2].pos);
    }
    else{
        tmp_args[0] = arg.fields[2];
    }
    try{
        res.body = _arg<ivyc_s1::ivy__decl>(tmp_args,0,0);
;
    }
    catch(const out_of_bounds &err){
        throw out_of_bounds("in field body: " + err.txt,err.pos);
    }
    if (arg.fields[3].is_member()){
        tmp_args[0] = arg.fields[3].fields[0];
        if (arg.fields[3].atom != "ann") throw out_of_bounds("unexpected field: " + arg.fields[3].atom,arg.fields[3].pos);
    }
    else{
        tmp_args[0] = arg.fields[3];
    }
    try{
        res.ann = _arg<ivyc_s1::annot>(tmp_args,0,0);
;
    }
    catch(const out_of_bounds &err){
        throw out_of_bounds("in field ann: " + err.txt,err.pos);
    }
    return res;
}
template <>
void __deser<ivyc_s1::ivy__moduledc>(ivy_deser &inp, ivyc_s1::ivy__moduledc &res){
    inp.open_struct();
    inp.open_field("name");
    __deser(inp,res.name);
    inp.close_field();
    inp.open_field("prms");
    __deser(inp,res.prms);
    inp.close_field();
    inp.open_field("body");
    __deser(inp,res.body);
    inp.close_field();
    inp.open_field("ann");
    __deser(inp,res.ann);
    inp.close_field();
    inp.close_struct();
}
template <>
ivyc_s1::ivy__not_first_order _arg<ivyc_s1::ivy__not_first_order>(std::vector<ivy_value> &args, unsigned idx, long long bound){
    ivyc_s1::ivy__not_first_order res;
    ivy_value &arg = args[idx];
    if (arg.atom.size() || arg.fields.size() != 2) throw out_of_bounds("wrong number of fields",args[idx].pos);
    std::vector<ivy_value> tmp_args(1);
    if (arg.fields[0].is_member()){
        tmp_args[0] = arg.fields[0].fields[0];
        if (arg.fields[0].atom != "e") throw out_of_bounds("unexpected field: " + arg.fields[0].atom,arg.fields[0].pos);
    }
    else{
        tmp_args[0] = arg.fields[0];
    }
    try{
        res.e = _arg<ivyc_s1::ivy__expr>(tmp_args,0,0);
;
    }
    catch(const out_of_bounds &err){
        throw out_of_bounds("in field e: " + err.txt,err.pos);
    }
    if (arg.fields[1].is_member()){
        tmp_args[0] = arg.fields[1].fields[0];
        if (arg.fields[1].atom != "t1") throw out_of_bounds("unexpected field: " + arg.fields[1].atom,arg.fields[1].pos);
    }
    else{
        tmp_args[0] = arg.fields[1];
    }
    try{
        res.t1 = _arg<ivyc_s1::ivy__expr>(tmp_args,0,0);
;
    }
    catch(const out_of_bounds &err){
        throw out_of_bounds("in field t1: " + err.txt,err.pos);
    }
    return res;
}
template <>
void __deser<ivyc_s1::ivy__not_first_order>(ivy_deser &inp, ivyc_s1::ivy__not_first_order &res){
    inp.open_struct();
    inp.open_field("e");
    __deser(inp,res.e);
    inp.close_field();
    inp.open_field("t1");
    __deser(inp,res.t1);
    inp.close_field();
    inp.close_struct();
}
template <>
ivyc_s1::ivy__numident _arg<ivyc_s1::ivy__numident>(std::vector<ivy_value> &args, unsigned idx, long long bound){
    ivyc_s1::ivy__numident res;
    ivy_value &arg = args[idx];
    if (arg.atom.size() || arg.fields.size() != 1) throw out_of_bounds("wrong number of fields",args[idx].pos);
    std::vector<ivy_value> tmp_args(1);
    if (arg.fields[0].is_member()){
        tmp_args[0] = arg.fields[0].fields[0];
        if (arg.fields[0].atom != "val") throw out_of_bounds("unexpected field: " + arg.fields[0].atom,arg.fields[0].pos);
    }
    else{
        tmp_args[0] = arg.fields[0];
    }
    try{
        res.val = _arg<unsigned long long>(tmp_args,0,0);
;
    }
    catch(const out_of_bounds &err){
        throw out_of_bounds("in field val: " + err.txt,err.pos);
    }
    return res;
}
template <>
void __deser<ivyc_s1::ivy__numident>(ivy_deser &inp, ivyc_s1::ivy__numident &res){
    inp.open_struct();
    inp.open_field("val");
    __deser(inp,res.val);
    inp.close_field();
    inp.close_struct();
}
template <>
ivyc_s1::ivy__objectdc _arg<ivyc_s1::ivy__objectdc>(std::vector<ivy_value> &args, unsigned idx, long long bound){
    ivyc_s1::ivy__objectdc res;
    ivy_value &arg = args[idx];
    if (arg.atom.size() || arg.fields.size() != 3) throw out_of_bounds("wrong number of fields",args[idx].pos);
    std::vector<ivy_value> tmp_args(1);
    if (arg.fields[0].is_member()){
        tmp_args[0] = arg.fields[0].fields[0];
        if (arg.fields[0].atom != "name") throw out_of_bounds("unexpected field: " + arg.fields[0].atom,arg.fields[0].pos);
    }
    else{
        tmp_args[0] = arg.fields[0];
    }
    try{
        res.name = _arg<ivyc_s1::ivy__expr>(tmp_args,0,0);
;
    }
    catch(const out_of_bounds &err){
        throw out_of_bounds("in field name: " + err.txt,err.pos);
    }
    if (arg.fields[1].is_member()){
        tmp_args[0] = arg.fields[1].fields[0];
        if (arg.fields[1].atom != "body") throw out_of_bounds("unexpected field: " + arg.fields[1].atom,arg.fields[1].pos);
    }
    else{
        tmp_args[0] = arg.fields[1];
    }
    try{
        res.body = _arg<ivyc_s1::ivy__decl>(tmp_args,0,0);
;
    }
    catch(const out_of_bounds &err){
        throw out_of_bounds("in field body: " + err.txt,err.pos);
    }
    if (arg.fields[2].is_member()){
        tmp_args[0] = arg.fields[2].fields[0];
        if (arg.fields[2].atom != "ann") throw out_of_bounds("unexpected field: " + arg.fields[2].atom,arg.fields[2].pos);
    }
    else{
        tmp_args[0] = arg.fields[2];
    }
    try{
        res.ann = _arg<ivyc_s1::annot>(tmp_args,0,0);
;
    }
    catch(const out_of_bounds &err){
        throw out_of_bounds("in field ann: " + err.txt,err.pos);
    }
    return res;
}
template <>
void __deser<ivyc_s1::ivy__objectdc>(ivy_deser &inp, ivyc_s1::ivy__objectdc &res){
    inp.open_struct();
    inp.open_field("name");
    __deser(inp,res.name);
    inp.close_field();
    inp.open_field("body");
    __deser(inp,res.body);
    inp.close_field();
    inp.open_field("ann");
    __deser(inp,res.ann);
    inp.close_field();
    inp.close_struct();
}
template <>
ivyc_s1::ivy__pi _arg<ivyc_s1::ivy__pi>(std::vector<ivy_value> &args, unsigned idx, long long bound){
    ivyc_s1::ivy__pi res;
    ivy_value &arg = args[idx];
    if (arg.atom.size() || arg.fields.size() != 3) throw out_of_bounds("wrong number of fields",args[idx].pos);
    std::vector<ivy_value> tmp_args(1);
    if (arg.fields[0].is_member()){
        tmp_args[0] = arg.fields[0].fields[0];
        if (arg.fields[0].atom != "vars") throw out_of_bounds("unexpected field: " + arg.fields[0].atom,arg.fields[0].pos);
    }
    else{
        tmp_args[0] = arg.fields[0];
    }
    try{
        res.vars = _arg<ivyc_s1::vector__ivy__expr__>(tmp_args,0,0);
;
    }
    catch(const out_of_bounds &err){
        throw out_of_bounds("in field vars: " + err.txt,err.pos);
    }
    if (arg.fields[1].is_member()){
        tmp_args[0] = arg.fields[1].fields[0];
        if (arg.fields[1].atom != "body") throw out_of_bounds("unexpected field: " + arg.fields[1].atom,arg.fields[1].pos);
    }
    else{
        tmp_args[0] = arg.fields[1];
    }
    try{
        res.body = _arg<ivyc_s1::ivy__expr>(tmp_args,0,0);
;
    }
    catch(const out_of_bounds &err){
        throw out_of_bounds("in field body: " + err.txt,err.pos);
    }
    if (arg.fields[2].is_member()){
        tmp_args[0] = arg.fields[2].fields[0];
        if (arg.fields[2].atom != "ann") throw out_of_bounds("unexpected field: " + arg.fields[2].atom,arg.fields[2].pos);
    }
    else{
        tmp_args[0] = arg.fields[2];
    }
    try{
        res.ann = _arg<ivyc_s1::annot>(tmp_args,0,0);
;
    }
    catch(const out_of_bounds &err){
        throw out_of_bounds("in field ann: " + err.txt,err.pos);
    }
    return res;
}
template <>
void __deser<ivyc_s1::ivy__pi>(ivy_deser &inp, ivyc_s1::ivy__pi &res){
    inp.open_struct();
    inp.open_field("vars");
    __deser(inp,res.vars);
    inp.close_field();
    inp.open_field("body");
    __deser(inp,res.body);
    inp.close_field();
    inp.open_field("ann");
    __deser(inp,res.ann);
    inp.close_field();
    inp.close_struct();
}
template <>
ivyc_s1::ivy__prog _arg<ivyc_s1::ivy__prog>(std::vector<ivy_value> &args, unsigned idx, long long bound){
    ivyc_s1::ivy__prog res;
    ivy_value &arg = args[idx];
    if (arg.atom.size() || arg.fields.size() != 2) throw out_of_bounds("wrong number of fields",args[idx].pos);
    std::vector<ivy_value> tmp_args(1);
    if (arg.fields[0].is_member()){
        tmp_args[0] = arg.fields[0].fields[0];
        if (arg.fields[0].atom != "vers") throw out_of_bounds("unexpected field: " + arg.fields[0].atom,arg.fields[0].pos);
    }
    else{
        tmp_args[0] = arg.fields[0];
    }
    try{
        res.vers = _arg<ivyc_s1::ivy__version>(tmp_args,0,0);
;
    }
    catch(const out_of_bounds &err){
        throw out_of_bounds("in field vers: " + err.txt,err.pos);
    }
    if (arg.fields[1].is_member()){
        tmp_args[0] = arg.fields[1].fields[0];
        if (arg.fields[1].atom != "decls") throw out_of_bounds("unexpected field: " + arg.fields[1].atom,arg.fields[1].pos);
    }
    else{
        tmp_args[0] = arg.fields[1];
    }
    try{
        res.decls = _arg<ivyc_s1::vector__ivy__decl__>(tmp_args,0,0);
;
    }
    catch(const out_of_bounds &err){
        throw out_of_bounds("in field decls: " + err.txt,err.pos);
    }
    return res;
}
template <>
void __deser<ivyc_s1::ivy__prog>(ivy_deser &inp, ivyc_s1::ivy__prog &res){
    inp.open_struct();
    inp.open_field("vers");
    __deser(inp,res.vers);
    inp.close_field();
    inp.open_field("decls");
    __deser(inp,res.decls);
    inp.close_field();
    inp.close_struct();
}
template <>
ivyc_s1::ivy__prog__readst _arg<ivyc_s1::ivy__prog__readst>(std::vector<ivy_value> &args, unsigned idx, long long bound){
    ivyc_s1::ivy__prog__readst res;
    ivy_value &arg = args[idx];
    if (arg.atom.size() || arg.fields.size() != 1) throw out_of_bounds("wrong number of fields",args[idx].pos);
    std::vector<ivy_value> tmp_args(1);
    if (arg.fields[0].is_member()){
        tmp_args[0] = arg.fields[0].fields[0];
        if (arg.fields[0].atom != "have_read") throw out_of_bounds("unexpected field: " + arg.fields[0].atom,arg.fields[0].pos);
    }
    else{
        tmp_args[0] = arg.fields[0];
    }
    try{
        res.have_read = _arg<ivyc_s1::ivy__ident_set>(tmp_args,0,0);
;
    }
    catch(const out_of_bounds &err){
        throw out_of_bounds("in field have_read: " + err.txt,err.pos);
    }
    return res;
}
template <>
void __deser<ivyc_s1::ivy__prog__readst>(ivy_deser &inp, ivyc_s1::ivy__prog__readst &res){
    inp.open_struct();
    inp.open_field("have_read");
    __deser(inp,res.have_read);
    inp.close_field();
    inp.close_struct();
}
template <>
ivyc_s1::ivy__prototype _arg<ivyc_s1::ivy__prototype>(std::vector<ivy_value> &args, unsigned idx, long long bound){
    ivyc_s1::ivy__prototype res;
    ivy_value &arg = args[idx];
    if (arg.atom.size() || arg.fields.size() != 3) throw out_of_bounds("wrong number of fields",args[idx].pos);
    std::vector<ivy_value> tmp_args(1);
    if (arg.fields[0].is_member()){
        tmp_args[0] = arg.fields[0].fields[0];
        if (arg.fields[0].atom != "args") throw out_of_bounds("unexpected field: " + arg.fields[0].atom,arg.fields[0].pos);
    }
    else{
        tmp_args[0] = arg.fields[0];
    }
    try{
        res.args = _arg<ivyc_s1::vector__ivy__prototype_argument__>(tmp_args,0,0);
;
    }
    catch(const out_of_bounds &err){
        throw out_of_bounds("in field args: " + err.txt,err.pos);
    }
    if (arg.fields[1].is_member()){
        tmp_args[0] = arg.fields[1].fields[0];
        if (arg.fields[1].atom != "has_ret") throw out_of_bounds("unexpected field: " + arg.fields[1].atom,arg.fields[1].pos);
    }
    else{
        tmp_args[0] = arg.fields[1];
    }
    try{
        res.has_ret = _arg<bool>(tmp_args,0,2);
;
    }
    catch(const out_of_bounds &err){
        throw out_of_bounds("in field has_ret: " + err.txt,err.pos);
    }
    if (arg.fields[2].is_member()){
        tmp_args[0] = arg.fields[2].fields[0];
        if (arg.fields[2].atom != "ret") throw out_of_bounds("unexpected field: " + arg.fields[2].atom,arg.fields[2].pos);
    }
    else{
        tmp_args[0] = arg.fields[2];
    }
    try{
        res.ret = _arg<ivyc_s1::ivy__prototype_argument>(tmp_args,0,0);
;
    }
    catch(const out_of_bounds &err){
        throw out_of_bounds("in field ret: " + err.txt,err.pos);
    }
    return res;
}
template <>
void __deser<ivyc_s1::ivy__prototype>(ivy_deser &inp, ivyc_s1::ivy__prototype &res){
    inp.open_struct();
    inp.open_field("args");
    __deser(inp,res.args);
    inp.close_field();
    inp.open_field("has_ret");
    __deser(inp,res.has_ret);
    inp.close_field();
    inp.open_field("ret");
    __deser(inp,res.ret);
    inp.close_field();
    inp.close_struct();
}
template <>
ivyc_s1::ivy__prototype_argument _arg<ivyc_s1::ivy__prototype_argument>(std::vector<ivy_value> &args, unsigned idx, long long bound){
    ivyc_s1::ivy__prototype_argument res;
    ivy_value &arg = args[idx];
    if (arg.atom.size() || arg.fields.size() != 7) throw out_of_bounds("wrong number of fields",args[idx].pos);
    std::vector<ivy_value> tmp_args(1);
    if (arg.fields[0].is_member()){
        tmp_args[0] = arg.fields[0].fields[0];
        if (arg.fields[0].atom != "name") throw out_of_bounds("unexpected field: " + arg.fields[0].atom,arg.fields[0].pos);
    }
    else{
        tmp_args[0] = arg.fields[0];
    }
    try{
        res.name = _arg<ivyc_s1::ivy__expr>(tmp_args,0,0);
;
    }
    catch(const out_of_bounds &err){
        throw out_of_bounds("in field name: " + err.txt,err.pos);
    }
    if (arg.fields[1].is_member()){
        tmp_args[0] = arg.fields[1].fields[0];
        if (arg.fields[1].atom != "is_input") throw out_of_bounds("unexpected field: " + arg.fields[1].atom,arg.fields[1].pos);
    }
    else{
        tmp_args[0] = arg.fields[1];
    }
    try{
        res.is_input = _arg<bool>(tmp_args,0,2);
;
    }
    catch(const out_of_bounds &err){
        throw out_of_bounds("in field is_input: " + err.txt,err.pos);
    }
    if (arg.fields[2].is_member()){
        tmp_args[0] = arg.fields[2].fields[0];
        if (arg.fields[2].atom != "inpos") throw out_of_bounds("unexpected field: " + arg.fields[2].atom,arg.fields[2].pos);
    }
    else{
        tmp_args[0] = arg.fields[2];
    }
    try{
        res.inpos = _arg<unsigned long long>(tmp_args,0,0);
;
    }
    catch(const out_of_bounds &err){
        throw out_of_bounds("in field inpos: " + err.txt,err.pos);
    }
    if (arg.fields[3].is_member()){
        tmp_args[0] = arg.fields[3].fields[0];
        if (arg.fields[3].atom != "is_output") throw out_of_bounds("unexpected field: " + arg.fields[3].atom,arg.fields[3].pos);
    }
    else{
        tmp_args[0] = arg.fields[3];
    }
    try{
        res.is_output = _arg<bool>(tmp_args,0,2);
;
    }
    catch(const out_of_bounds &err){
        throw out_of_bounds("in field is_output: " + err.txt,err.pos);
    }
    if (arg.fields[4].is_member()){
        tmp_args[0] = arg.fields[4].fields[0];
        if (arg.fields[4].atom != "outpos") throw out_of_bounds("unexpected field: " + arg.fields[4].atom,arg.fields[4].pos);
    }
    else{
        tmp_args[0] = arg.fields[4];
    }
    try{
        res.outpos = _arg<unsigned long long>(tmp_args,0,0);
;
    }
    catch(const out_of_bounds &err){
        throw out_of_bounds("in field outpos: " + err.txt,err.pos);
    }
    if (arg.fields[5].is_member()){
        tmp_args[0] = arg.fields[5].fields[0];
        if (arg.fields[5].atom != "is_ref") throw out_of_bounds("unexpected field: " + arg.fields[5].atom,arg.fields[5].pos);
    }
    else{
        tmp_args[0] = arg.fields[5];
    }
    try{
        res.is_ref = _arg<bool>(tmp_args,0,2);
;
    }
    catch(const out_of_bounds &err){
        throw out_of_bounds("in field is_ref: " + err.txt,err.pos);
    }
    if (arg.fields[6].is_member()){
        tmp_args[0] = arg.fields[6].fields[0];
        if (arg.fields[6].atom != "is_const") throw out_of_bounds("unexpected field: " + arg.fields[6].atom,arg.fields[6].pos);
    }
    else{
        tmp_args[0] = arg.fields[6];
    }
    try{
        res.is_const = _arg<bool>(tmp_args,0,2);
;
    }
    catch(const out_of_bounds &err){
        throw out_of_bounds("in field is_const: " + err.txt,err.pos);
    }
    return res;
}
template <>
void __deser<ivyc_s1::ivy__prototype_argument>(ivy_deser &inp, ivyc_s1::ivy__prototype_argument &res){
    inp.open_struct();
    inp.open_field("name");
    __deser(inp,res.name);
    inp.close_field();
    inp.open_field("is_input");
    __deser(inp,res.is_input);
    inp.close_field();
    inp.open_field("inpos");
    __deser(inp,res.inpos);
    inp.close_field();
    inp.open_field("is_output");
    __deser(inp,res.is_output);
    inp.close_field();
    inp.open_field("outpos");
    __deser(inp,res.outpos);
    inp.close_field();
    inp.open_field("is_ref");
    __deser(inp,res.is_ref);
    inp.close_field();
    inp.open_field("is_const");
    __deser(inp,res.is_const);
    inp.close_field();
    inp.close_struct();
}
template <>
ivyc_s1::ivy__push_pop_ident_set _arg<ivyc_s1::ivy__push_pop_ident_set>(std::vector<ivy_value> &args, unsigned idx, long long bound){
    ivyc_s1::ivy__push_pop_ident_set res;
    ivy_value &arg = args[idx];
    if (arg.atom.size() || arg.fields.size() != 3) throw out_of_bounds("wrong number of fields",args[idx].pos);
    std::vector<ivy_value> tmp_args(1);
    if (arg.fields[0].is_member()){
        tmp_args[0] = arg.fields[0].fields[0];
        if (arg.fields[0].atom != "map") throw out_of_bounds("unexpected field: " + arg.fields[0].atom,arg.fields[0].pos);
    }
    else{
        tmp_args[0] = arg.fields[0];
    }
    try{
        res.map = _arg<ivyc_s1::ivy__push_pop_ident_set__map_t>(tmp_args,0,0);
;
    }
    catch(const out_of_bounds &err){
        throw out_of_bounds("in field map: " + err.txt,err.pos);
    }
    if (arg.fields[1].is_member()){
        tmp_args[0] = arg.fields[1].fields[0];
        if (arg.fields[1].atom != "del") throw out_of_bounds("unexpected field: " + arg.fields[1].atom,arg.fields[1].pos);
    }
    else{
        tmp_args[0] = arg.fields[1];
    }
    try{
        res.del = _arg<ivyc_s1::ivy__push_pop_ident_set__vec_t>(tmp_args,0,0);
;
    }
    catch(const out_of_bounds &err){
        throw out_of_bounds("in field del: " + err.txt,err.pos);
    }
    if (arg.fields[2].is_member()){
        tmp_args[0] = arg.fields[2].fields[0];
        if (arg.fields[2].atom != "stack") throw out_of_bounds("unexpected field: " + arg.fields[2].atom,arg.fields[2].pos);
    }
    else{
        tmp_args[0] = arg.fields[2];
    }
    try{
        res.stack = _arg<ivyc_s1::vector__pos__>(tmp_args,0,0);
;
    }
    catch(const out_of_bounds &err){
        throw out_of_bounds("in field stack: " + err.txt,err.pos);
    }
    return res;
}
template <>
void __deser<ivyc_s1::ivy__push_pop_ident_set>(ivy_deser &inp, ivyc_s1::ivy__push_pop_ident_set &res){
    inp.open_struct();
    inp.open_field("map");
    __deser(inp,res.map);
    inp.close_field();
    inp.open_field("del");
    __deser(inp,res.del);
    inp.close_field();
    inp.open_field("stack");
    __deser(inp,res.stack);
    inp.close_field();
    inp.close_struct();
}
template <>
ivyc_s1::ivy__sequence _arg<ivyc_s1::ivy__sequence>(std::vector<ivy_value> &args, unsigned idx, long long bound){
    ivyc_s1::ivy__sequence res;
    ivy_value &arg = args[idx];
    if (arg.atom.size() || arg.fields.size() != 3) throw out_of_bounds("wrong number of fields",args[idx].pos);
    std::vector<ivy_value> tmp_args(1);
    if (arg.fields[0].is_member()){
        tmp_args[0] = arg.fields[0].fields[0];
        if (arg.fields[0].atom != "lhs") throw out_of_bounds("unexpected field: " + arg.fields[0].atom,arg.fields[0].pos);
    }
    else{
        tmp_args[0] = arg.fields[0];
    }
    try{
        res.lhs = _arg<ivyc_s1::ivy__stmt>(tmp_args,0,0);
;
    }
    catch(const out_of_bounds &err){
        throw out_of_bounds("in field lhs: " + err.txt,err.pos);
    }
    if (arg.fields[1].is_member()){
        tmp_args[0] = arg.fields[1].fields[0];
        if (arg.fields[1].atom != "rhs") throw out_of_bounds("unexpected field: " + arg.fields[1].atom,arg.fields[1].pos);
    }
    else{
        tmp_args[0] = arg.fields[1];
    }
    try{
        res.rhs = _arg<ivyc_s1::ivy__stmt>(tmp_args,0,0);
;
    }
    catch(const out_of_bounds &err){
        throw out_of_bounds("in field rhs: " + err.txt,err.pos);
    }
    if (arg.fields[2].is_member()){
        tmp_args[0] = arg.fields[2].fields[0];
        if (arg.fields[2].atom != "ann") throw out_of_bounds("unexpected field: " + arg.fields[2].atom,arg.fields[2].pos);
    }
    else{
        tmp_args[0] = arg.fields[2];
    }
    try{
        res.ann = _arg<ivyc_s1::annot>(tmp_args,0,0);
;
    }
    catch(const out_of_bounds &err){
        throw out_of_bounds("in field ann: " + err.txt,err.pos);
    }
    return res;
}
template <>
void __deser<ivyc_s1::ivy__sequence>(ivy_deser &inp, ivyc_s1::ivy__sequence &res){
    inp.open_struct();
    inp.open_field("lhs");
    __deser(inp,res.lhs);
    inp.close_field();
    inp.open_field("rhs");
    __deser(inp,res.rhs);
    inp.close_field();
    inp.open_field("ann");
    __deser(inp,res.ann);
    inp.close_field();
    inp.close_struct();
}
template <>
ivyc_s1::ivy__skipst _arg<ivyc_s1::ivy__skipst>(std::vector<ivy_value> &args, unsigned idx, long long bound){
    ivyc_s1::ivy__skipst res;
    ivy_value &arg = args[idx];
    if (arg.atom.size() || arg.fields.size() != 1) throw out_of_bounds("wrong number of fields",args[idx].pos);
    std::vector<ivy_value> tmp_args(1);
    if (arg.fields[0].is_member()){
        tmp_args[0] = arg.fields[0].fields[0];
        if (arg.fields[0].atom != "ann") throw out_of_bounds("unexpected field: " + arg.fields[0].atom,arg.fields[0].pos);
    }
    else{
        tmp_args[0] = arg.fields[0];
    }
    try{
        res.ann = _arg<ivyc_s1::annot>(tmp_args,0,0);
;
    }
    catch(const out_of_bounds &err){
        throw out_of_bounds("in field ann: " + err.txt,err.pos);
    }
    return res;
}
template <>
void __deser<ivyc_s1::ivy__skipst>(ivy_deser &inp, ivyc_s1::ivy__skipst &res){
    inp.open_struct();
    inp.open_field("ann");
    __deser(inp,res.ann);
    inp.close_field();
    inp.close_struct();
}
template <>
ivyc_s1::ivy__strident _arg<ivyc_s1::ivy__strident>(std::vector<ivy_value> &args, unsigned idx, long long bound){
    ivyc_s1::ivy__strident res;
    ivy_value &arg = args[idx];
    if (arg.atom.size() || arg.fields.size() != 2) throw out_of_bounds("wrong number of fields",args[idx].pos);
    std::vector<ivy_value> tmp_args(1);
    if (arg.fields[0].is_member()){
        tmp_args[0] = arg.fields[0].fields[0];
        if (arg.fields[0].atom != "val") throw out_of_bounds("unexpected field: " + arg.fields[0].atom,arg.fields[0].pos);
    }
    else{
        tmp_args[0] = arg.fields[0];
    }
    try{
        res.val = _arg<ivyc_s1::str>(tmp_args,0,0);
;
    }
    catch(const out_of_bounds &err){
        throw out_of_bounds("in field val: " + err.txt,err.pos);
    }
    if (arg.fields[1].is_member()){
        tmp_args[0] = arg.fields[1].fields[0];
        if (arg.fields[1].atom != "subscrs") throw out_of_bounds("unexpected field: " + arg.fields[1].atom,arg.fields[1].pos);
    }
    else{
        tmp_args[0] = arg.fields[1];
    }
    try{
        res.subscrs = _arg<ivyc_s1::vector__ivy__ident__>(tmp_args,0,0);
;
    }
    catch(const out_of_bounds &err){
        throw out_of_bounds("in field subscrs: " + err.txt,err.pos);
    }
    return res;
}
template <>
void __deser<ivyc_s1::ivy__strident>(ivy_deser &inp, ivyc_s1::ivy__strident &res){
    inp.open_struct();
    inp.open_field("val");
    __deser(inp,res.val);
    inp.close_field();
    inp.open_field("subscrs");
    __deser(inp,res.subscrs);
    inp.close_field();
    inp.close_struct();
}
template <>
ivyc_s1::ivy__structspec _arg<ivyc_s1::ivy__structspec>(std::vector<ivy_value> &args, unsigned idx, long long bound){
    ivyc_s1::ivy__structspec res;
    ivy_value &arg = args[idx];
    if (arg.atom.size() || arg.fields.size() != 2) throw out_of_bounds("wrong number of fields",args[idx].pos);
    std::vector<ivy_value> tmp_args(1);
    if (arg.fields[0].is_member()){
        tmp_args[0] = arg.fields[0].fields[0];
        if (arg.fields[0].atom != "destructors") throw out_of_bounds("unexpected field: " + arg.fields[0].atom,arg.fields[0].pos);
    }
    else{
        tmp_args[0] = arg.fields[0];
    }
    try{
        res.destructors = _arg<ivyc_s1::vector__ivy__expr__>(tmp_args,0,0);
;
    }
    catch(const out_of_bounds &err){
        throw out_of_bounds("in field destructors: " + err.txt,err.pos);
    }
    if (arg.fields[1].is_member()){
        tmp_args[0] = arg.fields[1].fields[0];
        if (arg.fields[1].atom != "ann") throw out_of_bounds("unexpected field: " + arg.fields[1].atom,arg.fields[1].pos);
    }
    else{
        tmp_args[0] = arg.fields[1];
    }
    try{
        res.ann = _arg<ivyc_s1::annot>(tmp_args,0,0);
;
    }
    catch(const out_of_bounds &err){
        throw out_of_bounds("in field ann: " + err.txt,err.pos);
    }
    return res;
}
template <>
void __deser<ivyc_s1::ivy__structspec>(ivy_deser &inp, ivyc_s1::ivy__structspec &res){
    inp.open_struct();
    inp.open_field("destructors");
    __deser(inp,res.destructors);
    inp.close_field();
    inp.open_field("ann");
    __deser(inp,res.ann);
    inp.close_field();
    inp.close_struct();
}
template <>
ivyc_s1::ivy__subtypes _arg<ivyc_s1::ivy__subtypes>(std::vector<ivy_value> &args, unsigned idx, long long bound){
    ivyc_s1::ivy__subtypes res;
    ivy_value &arg = args[idx];
    if (arg.atom.size() || arg.fields.size() != 2) throw out_of_bounds("wrong number of fields",args[idx].pos);
    std::vector<ivy_value> tmp_args(1);
    if (arg.fields[0].is_member()){
        tmp_args[0] = arg.fields[0].fields[0];
        if (arg.fields[0].atom != "subtypes_of") throw out_of_bounds("unexpected field: " + arg.fields[0].atom,arg.fields[0].pos);
    }
    else{
        tmp_args[0] = arg.fields[0];
    }
    try{
        res.subtypes_of = _arg<ivyc_s1::ivy__ident_to_exprs>(tmp_args,0,0);
;
    }
    catch(const out_of_bounds &err){
        throw out_of_bounds("in field subtypes_of: " + err.txt,err.pos);
    }
    if (arg.fields[1].is_member()){
        tmp_args[0] = arg.fields[1].fields[0];
        if (arg.fields[1].atom != "supertype_of") throw out_of_bounds("unexpected field: " + arg.fields[1].atom,arg.fields[1].pos);
    }
    else{
        tmp_args[0] = arg.fields[1];
    }
    try{
        res.supertype_of = _arg<ivyc_s1::ivy__symeval>(tmp_args,0,0);
;
    }
    catch(const out_of_bounds &err){
        throw out_of_bounds("in field supertype_of: " + err.txt,err.pos);
    }
    return res;
}
template <>
void __deser<ivyc_s1::ivy__subtypes>(ivy_deser &inp, ivyc_s1::ivy__subtypes &res){
    inp.open_struct();
    inp.open_field("subtypes_of");
    __deser(inp,res.subtypes_of);
    inp.close_field();
    inp.open_field("supertype_of");
    __deser(inp,res.supertype_of);
    inp.close_field();
    inp.close_struct();
}
template <>
ivyc_s1::ivy__symbol _arg<ivyc_s1::ivy__symbol>(std::vector<ivy_value> &args, unsigned idx, long long bound){
    ivyc_s1::ivy__symbol res;
    ivy_value &arg = args[idx];
    if (arg.atom.size() || arg.fields.size() != 3) throw out_of_bounds("wrong number of fields",args[idx].pos);
    std::vector<ivy_value> tmp_args(1);
    if (arg.fields[0].is_member()){
        tmp_args[0] = arg.fields[0].fields[0];
        if (arg.fields[0].atom != "name") throw out_of_bounds("unexpected field: " + arg.fields[0].atom,arg.fields[0].pos);
    }
    else{
        tmp_args[0] = arg.fields[0];
    }
    try{
        res.name = _arg<ivyc_s1::ivy__ident>(tmp_args,0,0);
;
    }
    catch(const out_of_bounds &err){
        throw out_of_bounds("in field name: " + err.txt,err.pos);
    }
    if (arg.fields[1].is_member()){
        tmp_args[0] = arg.fields[1].fields[0];
        if (arg.fields[1].atom != "vrb") throw out_of_bounds("unexpected field: " + arg.fields[1].atom,arg.fields[1].pos);
    }
    else{
        tmp_args[0] = arg.fields[1];
    }
    try{
        res.vrb = _arg<ivyc_s1::ivy__verb>(tmp_args,0,32);
;
    }
    catch(const out_of_bounds &err){
        throw out_of_bounds("in field vrb: " + err.txt,err.pos);
    }
    if (arg.fields[2].is_member()){
        tmp_args[0] = arg.fields[2].fields[0];
        if (arg.fields[2].atom != "ann") throw out_of_bounds("unexpected field: " + arg.fields[2].atom,arg.fields[2].pos);
    }
    else{
        tmp_args[0] = arg.fields[2];
    }
    try{
        res.ann = _arg<ivyc_s1::annot>(tmp_args,0,0);
;
    }
    catch(const out_of_bounds &err){
        throw out_of_bounds("in field ann: " + err.txt,err.pos);
    }
    return res;
}
template <>
void __deser<ivyc_s1::ivy__symbol>(ivy_deser &inp, ivyc_s1::ivy__symbol &res){
    inp.open_struct();
    inp.open_field("name");
    __deser(inp,res.name);
    inp.close_field();
    inp.open_field("vrb");
    __deser(inp,res.vrb);
    inp.close_field();
    inp.open_field("ann");
    __deser(inp,res.ann);
    inp.close_field();
    inp.close_struct();
}
template <>
ivyc_s1::ivy__syntax_error _arg<ivyc_s1::ivy__syntax_error>(std::vector<ivy_value> &args, unsigned idx, long long bound){
    ivyc_s1::ivy__syntax_error res;
    ivy_value &arg = args[idx];
    if (arg.atom.size() || arg.fields.size() != 1) throw out_of_bounds("wrong number of fields",args[idx].pos);
    std::vector<ivy_value> tmp_args(1);
    if (arg.fields[0].is_member()){
        tmp_args[0] = arg.fields[0].fields[0];
        if (arg.fields[0].atom != "tok") throw out_of_bounds("unexpected field: " + arg.fields[0].atom,arg.fields[0].pos);
    }
    else{
        tmp_args[0] = arg.fields[0];
    }
    try{
        res.tok = _arg<ivyc_s1::str>(tmp_args,0,0);
;
    }
    catch(const out_of_bounds &err){
        throw out_of_bounds("in field tok: " + err.txt,err.pos);
    }
    return res;
}
template <>
void __deser<ivyc_s1::ivy__syntax_error>(ivy_deser &inp, ivyc_s1::ivy__syntax_error &res){
    inp.open_struct();
    inp.open_field("tok");
    __deser(inp,res.tok);
    inp.close_field();
    inp.close_struct();
}
template <>
ivyc_s1::ivy__tocppst _arg<ivyc_s1::ivy__tocppst>(std::vector<ivy_value> &args, unsigned idx, long long bound){
    ivyc_s1::ivy__tocppst res;
    ivy_value &arg = args[idx];
    if (arg.atom.size() || arg.fields.size() != 19) throw out_of_bounds("wrong number of fields",args[idx].pos);
    std::vector<ivy_value> tmp_args(1);
    if (arg.fields[0].is_member()){
        tmp_args[0] = arg.fields[0].fields[0];
        if (arg.fields[0].atom != "members") throw out_of_bounds("unexpected field: " + arg.fields[0].atom,arg.fields[0].pos);
    }
    else{
        tmp_args[0] = arg.fields[0];
    }
    try{
        res.members = _arg<ivyc_s1::ivy__ident_to_declvec>(tmp_args,0,0);
;
    }
    catch(const out_of_bounds &err){
        throw out_of_bounds("in field members: " + err.txt,err.pos);
    }
    if (arg.fields[1].is_member()){
        tmp_args[0] = arg.fields[1].fields[0];
        if (arg.fields[1].atom != "cppclasses") throw out_of_bounds("unexpected field: " + arg.fields[1].atom,arg.fields[1].pos);
    }
    else{
        tmp_args[0] = arg.fields[1];
    }
    try{
        res.cppclasses = _arg<ivyc_s1::ivy__ident_to_cppclass>(tmp_args,0,0);
;
    }
    catch(const out_of_bounds &err){
        throw out_of_bounds("in field cppclasses: " + err.txt,err.pos);
    }
    if (arg.fields[2].is_member()){
        tmp_args[0] = arg.fields[2].fields[0];
        if (arg.fields[2].atom != "objects") throw out_of_bounds("unexpected field: " + arg.fields[2].atom,arg.fields[2].pos);
    }
    else{
        tmp_args[0] = arg.fields[2];
    }
    try{
        res.objects = _arg<ivyc_s1::ivy__ident_set>(tmp_args,0,0);
;
    }
    catch(const out_of_bounds &err){
        throw out_of_bounds("in field objects: " + err.txt,err.pos);
    }
    if (arg.fields[3].is_member()){
        tmp_args[0] = arg.fields[3].fields[0];
        if (arg.fields[3].atom != "globals") throw out_of_bounds("unexpected field: " + arg.fields[3].atom,arg.fields[3].pos);
    }
    else{
        tmp_args[0] = arg.fields[3];
    }
    try{
        res.globals = _arg<ivyc_s1::ivy__global_types>(tmp_args,0,0);
;
    }
    catch(const out_of_bounds &err){
        throw out_of_bounds("in field globals: " + err.txt,err.pos);
    }
    if (arg.fields[4].is_member()){
        tmp_args[0] = arg.fields[4].fields[0];
        if (arg.fields[4].atom != "is_member") throw out_of_bounds("unexpected field: " + arg.fields[4].atom,arg.fields[4].pos);
    }
    else{
        tmp_args[0] = arg.fields[4];
    }
    try{
        res.is_member = _arg<bool>(tmp_args,0,2);
;
    }
    catch(const out_of_bounds &err){
        throw out_of_bounds("in field is_member: " + err.txt,err.pos);
    }
    if (arg.fields[5].is_member()){
        tmp_args[0] = arg.fields[5].fields[0];
        if (arg.fields[5].atom != "this_ident") throw out_of_bounds("unexpected field: " + arg.fields[5].atom,arg.fields[5].pos);
    }
    else{
        tmp_args[0] = arg.fields[5];
    }
    try{
        res.this_ident = _arg<ivyc_s1::ivy__ident>(tmp_args,0,0);
;
    }
    catch(const out_of_bounds &err){
        throw out_of_bounds("in field this_ident: " + err.txt,err.pos);
    }
    if (arg.fields[6].is_member()){
        tmp_args[0] = arg.fields[6].fields[0];
        if (arg.fields[6].atom != "in_class") throw out_of_bounds("unexpected field: " + arg.fields[6].atom,arg.fields[6].pos);
    }
    else{
        tmp_args[0] = arg.fields[6];
    }
    try{
        res.in_class = _arg<bool>(tmp_args,0,2);
;
    }
    catch(const out_of_bounds &err){
        throw out_of_bounds("in field in_class: " + err.txt,err.pos);
    }
    if (arg.fields[7].is_member()){
        tmp_args[0] = arg.fields[7].fields[0];
        if (arg.fields[7].atom != "proto_only") throw out_of_bounds("unexpected field: " + arg.fields[7].atom,arg.fields[7].pos);
    }
    else{
        tmp_args[0] = arg.fields[7];
    }
    try{
        res.proto_only = _arg<bool>(tmp_args,0,2);
;
    }
    catch(const out_of_bounds &err){
        throw out_of_bounds("in field proto_only: " + err.txt,err.pos);
    }
    if (arg.fields[8].is_member()){
        tmp_args[0] = arg.fields[8].fields[0];
        if (arg.fields[8].atom != "subtype_rel") throw out_of_bounds("unexpected field: " + arg.fields[8].atom,arg.fields[8].pos);
    }
    else{
        tmp_args[0] = arg.fields[8];
    }
    try{
        res.subtype_rel = _arg<ivyc_s1::ivy__subtypes>(tmp_args,0,0);
;
    }
    catch(const out_of_bounds &err){
        throw out_of_bounds("in field subtype_rel: " + err.txt,err.pos);
    }
    if (arg.fields[9].is_member()){
        tmp_args[0] = arg.fields[9].fields[0];
        if (arg.fields[9].atom != "native") throw out_of_bounds("unexpected field: " + arg.fields[9].atom,arg.fields[9].pos);
    }
    else{
        tmp_args[0] = arg.fields[9];
    }
    try{
        res.native = _arg<bool>(tmp_args,0,2);
;
    }
    catch(const out_of_bounds &err){
        throw out_of_bounds("in field native: " + err.txt,err.pos);
    }
    if (arg.fields[10].is_member()){
        tmp_args[0] = arg.fields[10].fields[0];
        if (arg.fields[10].atom != "forward") throw out_of_bounds("unexpected field: " + arg.fields[10].atom,arg.fields[10].pos);
    }
    else{
        tmp_args[0] = arg.fields[10];
    }
    try{
        res.forward = _arg<bool>(tmp_args,0,2);
;
    }
    catch(const out_of_bounds &err){
        throw out_of_bounds("in field forward: " + err.txt,err.pos);
    }
    if (arg.fields[11].is_member()){
        tmp_args[0] = arg.fields[11].fields[0];
        if (arg.fields[11].atom != "outputs") throw out_of_bounds("unexpected field: " + arg.fields[11].atom,arg.fields[11].pos);
    }
    else{
        tmp_args[0] = arg.fields[11];
    }
    try{
        res.outputs = _arg<ivyc_s1::vector__ivy__expr__>(tmp_args,0,0);
;
    }
    catch(const out_of_bounds &err){
        throw out_of_bounds("in field outputs: " + err.txt,err.pos);
    }
    if (arg.fields[12].is_member()){
        tmp_args[0] = arg.fields[12].fields[0];
        if (arg.fields[12].atom != "code") throw out_of_bounds("unexpected field: " + arg.fields[12].atom,arg.fields[12].pos);
    }
    else{
        tmp_args[0] = arg.fields[12];
    }
    try{
        res.code = _arg<ivyc_s1::vector__cpp__stmt__>(tmp_args,0,0);
;
    }
    catch(const out_of_bounds &err){
        throw out_of_bounds("in field code: " + err.txt,err.pos);
    }
    if (arg.fields[13].is_member()){
        tmp_args[0] = arg.fields[13].fields[0];
        if (arg.fields[13].atom != "counter") throw out_of_bounds("unexpected field: " + arg.fields[13].atom,arg.fields[13].pos);
    }
    else{
        tmp_args[0] = arg.fields[13];
    }
    try{
        res.counter = _arg<unsigned long long>(tmp_args,0,0);
;
    }
    catch(const out_of_bounds &err){
        throw out_of_bounds("in field counter: " + err.txt,err.pos);
    }
    if (arg.fields[14].is_member()){
        tmp_args[0] = arg.fields[14].fields[0];
        if (arg.fields[14].atom != "protos") throw out_of_bounds("unexpected field: " + arg.fields[14].atom,arg.fields[14].pos);
    }
    else{
        tmp_args[0] = arg.fields[14];
    }
    try{
        res.protos = _arg<ivyc_s1::ivy__ident_to_prototype>(tmp_args,0,0);
;
    }
    catch(const out_of_bounds &err){
        throw out_of_bounds("in field protos: " + err.txt,err.pos);
    }
    if (arg.fields[15].is_member()){
        tmp_args[0] = arg.fields[15].fields[0];
        if (arg.fields[15].atom != "dead") throw out_of_bounds("unexpected field: " + arg.fields[15].atom,arg.fields[15].pos);
    }
    else{
        tmp_args[0] = arg.fields[15];
    }
    try{
        res.dead = _arg<ivyc_s1::vector__ivy__lvalue_count__>(tmp_args,0,0);
;
    }
    catch(const out_of_bounds &err){
        throw out_of_bounds("in field dead: " + err.txt,err.pos);
    }
    if (arg.fields[16].is_member()){
        tmp_args[0] = arg.fields[16].fields[0];
        if (arg.fields[16].atom != "locals") throw out_of_bounds("unexpected field: " + arg.fields[16].atom,arg.fields[16].pos);
    }
    else{
        tmp_args[0] = arg.fields[16];
    }
    try{
        res.locals = _arg<ivyc_s1::ivy__local_tracker>(tmp_args,0,0);
;
    }
    catch(const out_of_bounds &err){
        throw out_of_bounds("in field locals: " + err.txt,err.pos);
    }
    if (arg.fields[17].is_member()){
        tmp_args[0] = arg.fields[17].fields[0];
        if (arg.fields[17].atom != "constructors") throw out_of_bounds("unexpected field: " + arg.fields[17].atom,arg.fields[17].pos);
    }
    else{
        tmp_args[0] = arg.fields[17];
    }
    try{
        res.constructors = _arg<ivyc_s1::ivy__ident_set>(tmp_args,0,0);
;
    }
    catch(const out_of_bounds &err){
        throw out_of_bounds("in field constructors: " + err.txt,err.pos);
    }
    if (arg.fields[18].is_member()){
        tmp_args[0] = arg.fields[18].fields[0];
        if (arg.fields[18].atom != "dot_rhs") throw out_of_bounds("unexpected field: " + arg.fields[18].atom,arg.fields[18].pos);
    }
    else{
        tmp_args[0] = arg.fields[18];
    }
    try{
        res.dot_rhs = _arg<bool>(tmp_args,0,2);
;
    }
    catch(const out_of_bounds &err){
        throw out_of_bounds("in field dot_rhs: " + err.txt,err.pos);
    }
    return res;
}
template <>
void __deser<ivyc_s1::ivy__tocppst>(ivy_deser &inp, ivyc_s1::ivy__tocppst &res){
    inp.open_struct();
    inp.open_field("members");
    __deser(inp,res.members);
    inp.close_field();
    inp.open_field("cppclasses");
    __deser(inp,res.cppclasses);
    inp.close_field();
    inp.open_field("objects");
    __deser(inp,res.objects);
    inp.close_field();
    inp.open_field("globals");
    __deser(inp,res.globals);
    inp.close_field();
    inp.open_field("is_member");
    __deser(inp,res.is_member);
    inp.close_field();
    inp.open_field("this_ident");
    __deser(inp,res.this_ident);
    inp.close_field();
    inp.open_field("in_class");
    __deser(inp,res.in_class);
    inp.close_field();
    inp.open_field("proto_only");
    __deser(inp,res.proto_only);
    inp.close_field();
    inp.open_field("subtype_rel");
    __deser(inp,res.subtype_rel);
    inp.close_field();
    inp.open_field("native");
    __deser(inp,res.native);
    inp.close_field();
    inp.open_field("forward");
    __deser(inp,res.forward);
    inp.close_field();
    inp.open_field("outputs");
    __deser(inp,res.outputs);
    inp.close_field();
    inp.open_field("code");
    __deser(inp,res.code);
    inp.close_field();
    inp.open_field("counter");
    __deser(inp,res.counter);
    inp.close_field();
    inp.open_field("protos");
    __deser(inp,res.protos);
    inp.close_field();
    inp.open_field("dead");
    __deser(inp,res.dead);
    inp.close_field();
    inp.open_field("locals");
    __deser(inp,res.locals);
    inp.close_field();
    inp.open_field("constructors");
    __deser(inp,res.constructors);
    inp.close_field();
    inp.open_field("dot_rhs");
    __deser(inp,res.dot_rhs);
    inp.close_field();
    inp.close_struct();
}
template <>
ivyc_s1::ivy__type_clash _arg<ivyc_s1::ivy__type_clash>(std::vector<ivy_value> &args, unsigned idx, long long bound){
    ivyc_s1::ivy__type_clash res;
    ivy_value &arg = args[idx];
    if (arg.atom.size() || arg.fields.size() != 3) throw out_of_bounds("wrong number of fields",args[idx].pos);
    std::vector<ivy_value> tmp_args(1);
    if (arg.fields[0].is_member()){
        tmp_args[0] = arg.fields[0].fields[0];
        if (arg.fields[0].atom != "e") throw out_of_bounds("unexpected field: " + arg.fields[0].atom,arg.fields[0].pos);
    }
    else{
        tmp_args[0] = arg.fields[0];
    }
    try{
        res.e = _arg<ivyc_s1::ivy__expr>(tmp_args,0,0);
;
    }
    catch(const out_of_bounds &err){
        throw out_of_bounds("in field e: " + err.txt,err.pos);
    }
    if (arg.fields[1].is_member()){
        tmp_args[0] = arg.fields[1].fields[0];
        if (arg.fields[1].atom != "t1") throw out_of_bounds("unexpected field: " + arg.fields[1].atom,arg.fields[1].pos);
    }
    else{
        tmp_args[0] = arg.fields[1];
    }
    try{
        res.t1 = _arg<ivyc_s1::ivy__expr>(tmp_args,0,0);
;
    }
    catch(const out_of_bounds &err){
        throw out_of_bounds("in field t1: " + err.txt,err.pos);
    }
    if (arg.fields[2].is_member()){
        tmp_args[0] = arg.fields[2].fields[0];
        if (arg.fields[2].atom != "t2") throw out_of_bounds("unexpected field: " + arg.fields[2].atom,arg.fields[2].pos);
    }
    else{
        tmp_args[0] = arg.fields[2];
    }
    try{
        res.t2 = _arg<ivyc_s1::ivy__expr>(tmp_args,0,0);
;
    }
    catch(const out_of_bounds &err){
        throw out_of_bounds("in field t2: " + err.txt,err.pos);
    }
    return res;
}
template <>
void __deser<ivyc_s1::ivy__type_clash>(ivy_deser &inp, ivyc_s1::ivy__type_clash &res){
    inp.open_struct();
    inp.open_field("e");
    __deser(inp,res.e);
    inp.close_field();
    inp.open_field("t1");
    __deser(inp,res.t1);
    inp.close_field();
    inp.open_field("t2");
    __deser(inp,res.t2);
    inp.close_field();
    inp.close_struct();
}
template <>
ivyc_s1::ivy__type_context _arg<ivyc_s1::ivy__type_context>(std::vector<ivy_value> &args, unsigned idx, long long bound){
    ivyc_s1::ivy__type_context res;
    ivy_value &arg = args[idx];
    if (arg.atom.size() || arg.fields.size() != 2) throw out_of_bounds("wrong number of fields",args[idx].pos);
    std::vector<ivy_value> tmp_args(1);
    if (arg.fields[0].is_member()){
        tmp_args[0] = arg.fields[0].fields[0];
        if (arg.fields[0].atom != "m") throw out_of_bounds("unexpected field: " + arg.fields[0].atom,arg.fields[0].pos);
    }
    else{
        tmp_args[0] = arg.fields[0];
    }
    try{
        res.m = _arg<ivyc_s1::ivy__symeval>(tmp_args,0,0);
;
    }
    catch(const out_of_bounds &err){
        throw out_of_bounds("in field m: " + err.txt,err.pos);
    }
    if (arg.fields[1].is_member()){
        tmp_args[0] = arg.fields[1].fields[0];
        if (arg.fields[1].atom != "stack") throw out_of_bounds("unexpected field: " + arg.fields[1].atom,arg.fields[1].pos);
    }
    else{
        tmp_args[0] = arg.fields[1];
    }
    try{
        res.stack = _arg<ivyc_s1::vector__ivy__type_context__stack_entry__>(tmp_args,0,0);
;
    }
    catch(const out_of_bounds &err){
        throw out_of_bounds("in field stack: " + err.txt,err.pos);
    }
    return res;
}
template <>
void __deser<ivyc_s1::ivy__type_context>(ivy_deser &inp, ivyc_s1::ivy__type_context &res){
    inp.open_struct();
    inp.open_field("m");
    __deser(inp,res.m);
    inp.close_field();
    inp.open_field("stack");
    __deser(inp,res.stack);
    inp.close_field();
    inp.close_struct();
}
template <>
ivyc_s1::ivy__type_context__stack_entry _arg<ivyc_s1::ivy__type_context__stack_entry>(std::vector<ivy_value> &args, unsigned idx, long long bound){
    ivyc_s1::ivy__type_context__stack_entry res;
    ivy_value &arg = args[idx];
    if (arg.atom.size() || arg.fields.size() != 3) throw out_of_bounds("wrong number of fields",args[idx].pos);
    std::vector<ivy_value> tmp_args(1);
    if (arg.fields[0].is_member()){
        tmp_args[0] = arg.fields[0].fields[0];
        if (arg.fields[0].atom != "id") throw out_of_bounds("unexpected field: " + arg.fields[0].atom,arg.fields[0].pos);
    }
    else{
        tmp_args[0] = arg.fields[0];
    }
    try{
        res.id = _arg<ivyc_s1::ivy__ident>(tmp_args,0,0);
;
    }
    catch(const out_of_bounds &err){
        throw out_of_bounds("in field id: " + err.txt,err.pos);
    }
    if (arg.fields[1].is_member()){
        tmp_args[0] = arg.fields[1].fields[0];
        if (arg.fields[1].atom != "any") throw out_of_bounds("unexpected field: " + arg.fields[1].atom,arg.fields[1].pos);
    }
    else{
        tmp_args[0] = arg.fields[1];
    }
    try{
        res.any = _arg<bool>(tmp_args,0,2);
;
    }
    catch(const out_of_bounds &err){
        throw out_of_bounds("in field any: " + err.txt,err.pos);
    }
    if (arg.fields[2].is_member()){
        tmp_args[0] = arg.fields[2].fields[0];
        if (arg.fields[2].atom != "val") throw out_of_bounds("unexpected field: " + arg.fields[2].atom,arg.fields[2].pos);
    }
    else{
        tmp_args[0] = arg.fields[2];
    }
    try{
        res.val = _arg<ivyc_s1::ivy__expr>(tmp_args,0,0);
;
    }
    catch(const out_of_bounds &err){
        throw out_of_bounds("in field val: " + err.txt,err.pos);
    }
    return res;
}
template <>
void __deser<ivyc_s1::ivy__type_context__stack_entry>(ivy_deser &inp, ivyc_s1::ivy__type_context__stack_entry &res){
    inp.open_struct();
    inp.open_field("id");
    __deser(inp,res.id);
    inp.close_field();
    inp.open_field("any");
    __deser(inp,res.any);
    inp.close_field();
    inp.open_field("val");
    __deser(inp,res.val);
    inp.close_field();
    inp.close_struct();
}
template <>
ivyc_s1::ivy__type_conversion _arg<ivyc_s1::ivy__type_conversion>(std::vector<ivy_value> &args, unsigned idx, long long bound){
    ivyc_s1::ivy__type_conversion res;
    ivy_value &arg = args[idx];
    if (arg.atom.size() || arg.fields.size() != 3) throw out_of_bounds("wrong number of fields",args[idx].pos);
    std::vector<ivy_value> tmp_args(1);
    if (arg.fields[0].is_member()){
        tmp_args[0] = arg.fields[0].fields[0];
        if (arg.fields[0].atom != "e") throw out_of_bounds("unexpected field: " + arg.fields[0].atom,arg.fields[0].pos);
    }
    else{
        tmp_args[0] = arg.fields[0];
    }
    try{
        res.e = _arg<ivyc_s1::ivy__expr>(tmp_args,0,0);
;
    }
    catch(const out_of_bounds &err){
        throw out_of_bounds("in field e: " + err.txt,err.pos);
    }
    if (arg.fields[1].is_member()){
        tmp_args[0] = arg.fields[1].fields[0];
        if (arg.fields[1].atom != "t1") throw out_of_bounds("unexpected field: " + arg.fields[1].atom,arg.fields[1].pos);
    }
    else{
        tmp_args[0] = arg.fields[1];
    }
    try{
        res.t1 = _arg<ivyc_s1::ivy__expr>(tmp_args,0,0);
;
    }
    catch(const out_of_bounds &err){
        throw out_of_bounds("in field t1: " + err.txt,err.pos);
    }
    if (arg.fields[2].is_member()){
        tmp_args[0] = arg.fields[2].fields[0];
        if (arg.fields[2].atom != "t2") throw out_of_bounds("unexpected field: " + arg.fields[2].atom,arg.fields[2].pos);
    }
    else{
        tmp_args[0] = arg.fields[2];
    }
    try{
        res.t2 = _arg<ivyc_s1::ivy__expr>(tmp_args,0,0);
;
    }
    catch(const out_of_bounds &err){
        throw out_of_bounds("in field t2: " + err.txt,err.pos);
    }
    return res;
}
template <>
void __deser<ivyc_s1::ivy__type_conversion>(ivy_deser &inp, ivyc_s1::ivy__type_conversion &res){
    inp.open_struct();
    inp.open_field("e");
    __deser(inp,res.e);
    inp.close_field();
    inp.open_field("t1");
    __deser(inp,res.t1);
    inp.close_field();
    inp.open_field("t2");
    __deser(inp,res.t2);
    inp.close_field();
    inp.close_struct();
}
template <>
ivyc_s1::ivy__typedc _arg<ivyc_s1::ivy__typedc>(std::vector<ivy_value> &args, unsigned idx, long long bound){
    ivyc_s1::ivy__typedc res;
    ivy_value &arg = args[idx];
    if (arg.atom.size() || arg.fields.size() != 6) throw out_of_bounds("wrong number of fields",args[idx].pos);
    std::vector<ivy_value> tmp_args(1);
    if (arg.fields[0].is_member()){
        tmp_args[0] = arg.fields[0].fields[0];
        if (arg.fields[0].atom != "sort") throw out_of_bounds("unexpected field: " + arg.fields[0].atom,arg.fields[0].pos);
    }
    else{
        tmp_args[0] = arg.fields[0];
    }
    try{
        res.sort = _arg<ivyc_s1::ivy__expr>(tmp_args,0,0);
;
    }
    catch(const out_of_bounds &err){
        throw out_of_bounds("in field sort: " + err.txt,err.pos);
    }
    if (arg.fields[1].is_member()){
        tmp_args[0] = arg.fields[1].fields[0];
        if (arg.fields[1].atom != "has_super") throw out_of_bounds("unexpected field: " + arg.fields[1].atom,arg.fields[1].pos);
    }
    else{
        tmp_args[0] = arg.fields[1];
    }
    try{
        res.has_super = _arg<bool>(tmp_args,0,2);
;
    }
    catch(const out_of_bounds &err){
        throw out_of_bounds("in field has_super: " + err.txt,err.pos);
    }
    if (arg.fields[2].is_member()){
        tmp_args[0] = arg.fields[2].fields[0];
        if (arg.fields[2].atom != "super") throw out_of_bounds("unexpected field: " + arg.fields[2].atom,arg.fields[2].pos);
    }
    else{
        tmp_args[0] = arg.fields[2];
    }
    try{
        res.super = _arg<ivyc_s1::ivy__expr>(tmp_args,0,0);
;
    }
    catch(const out_of_bounds &err){
        throw out_of_bounds("in field super: " + err.txt,err.pos);
    }
    if (arg.fields[3].is_member()){
        tmp_args[0] = arg.fields[3].fields[0];
        if (arg.fields[3].atom != "has_spec") throw out_of_bounds("unexpected field: " + arg.fields[3].atom,arg.fields[3].pos);
    }
    else{
        tmp_args[0] = arg.fields[3];
    }
    try{
        res.has_spec = _arg<bool>(tmp_args,0,2);
;
    }
    catch(const out_of_bounds &err){
        throw out_of_bounds("in field has_spec: " + err.txt,err.pos);
    }
    if (arg.fields[4].is_member()){
        tmp_args[0] = arg.fields[4].fields[0];
        if (arg.fields[4].atom != "spec") throw out_of_bounds("unexpected field: " + arg.fields[4].atom,arg.fields[4].pos);
    }
    else{
        tmp_args[0] = arg.fields[4];
    }
    try{
        res.spec = _arg<ivyc_s1::ivy__typespec>(tmp_args,0,0);
;
    }
    catch(const out_of_bounds &err){
        throw out_of_bounds("in field spec: " + err.txt,err.pos);
    }
    if (arg.fields[5].is_member()){
        tmp_args[0] = arg.fields[5].fields[0];
        if (arg.fields[5].atom != "ann") throw out_of_bounds("unexpected field: " + arg.fields[5].atom,arg.fields[5].pos);
    }
    else{
        tmp_args[0] = arg.fields[5];
    }
    try{
        res.ann = _arg<ivyc_s1::annot>(tmp_args,0,0);
;
    }
    catch(const out_of_bounds &err){
        throw out_of_bounds("in field ann: " + err.txt,err.pos);
    }
    return res;
}
template <>
void __deser<ivyc_s1::ivy__typedc>(ivy_deser &inp, ivyc_s1::ivy__typedc &res){
    inp.open_struct();
    inp.open_field("sort");
    __deser(inp,res.sort);
    inp.close_field();
    inp.open_field("has_super");
    __deser(inp,res.has_super);
    inp.close_field();
    inp.open_field("super");
    __deser(inp,res.super);
    inp.close_field();
    inp.open_field("has_spec");
    __deser(inp,res.has_spec);
    inp.close_field();
    inp.open_field("spec");
    __deser(inp,res.spec);
    inp.close_field();
    inp.open_field("ann");
    __deser(inp,res.ann);
    inp.close_field();
    inp.close_struct();
}
template <>
ivyc_s1::ivy__typeinferst _arg<ivyc_s1::ivy__typeinferst>(std::vector<ivy_value> &args, unsigned idx, long long bound){
    ivyc_s1::ivy__typeinferst res;
    ivy_value &arg = args[idx];
    if (arg.atom.size() || arg.fields.size() != 2) throw out_of_bounds("wrong number of fields",args[idx].pos);
    std::vector<ivy_value> tmp_args(1);
    if (arg.fields[0].is_member()){
        tmp_args[0] = arg.fields[0].fields[0];
        if (arg.fields[0].atom != "tc") throw out_of_bounds("unexpected field: " + arg.fields[0].atom,arg.fields[0].pos);
    }
    else{
        tmp_args[0] = arg.fields[0];
    }
    try{
        res.tc = _arg<ivyc_s1::ivy__type_context>(tmp_args,0,0);
;
    }
    catch(const out_of_bounds &err){
        throw out_of_bounds("in field tc: " + err.txt,err.pos);
    }
    if (arg.fields[1].is_member()){
        tmp_args[0] = arg.fields[1].fields[0];
        if (arg.fields[1].atom != "subtype_rel") throw out_of_bounds("unexpected field: " + arg.fields[1].atom,arg.fields[1].pos);
    }
    else{
        tmp_args[0] = arg.fields[1];
    }
    try{
        res.subtype_rel = _arg<ivyc_s1::ivy__subtypes>(tmp_args,0,0);
;
    }
    catch(const out_of_bounds &err){
        throw out_of_bounds("in field subtype_rel: " + err.txt,err.pos);
    }
    return res;
}
template <>
void __deser<ivyc_s1::ivy__typeinferst>(ivy_deser &inp, ivyc_s1::ivy__typeinferst &res){
    inp.open_struct();
    inp.open_field("tc");
    __deser(inp,res.tc);
    inp.close_field();
    inp.open_field("subtype_rel");
    __deser(inp,res.subtype_rel);
    inp.close_field();
    inp.close_struct();
}
template <>
ivyc_s1::ivy__undefined _arg<ivyc_s1::ivy__undefined>(std::vector<ivy_value> &args, unsigned idx, long long bound){
    ivyc_s1::ivy__undefined res;
    ivy_value &arg = args[idx];
    if (arg.atom.size() || arg.fields.size() != 1) throw out_of_bounds("wrong number of fields",args[idx].pos);
    std::vector<ivy_value> tmp_args(1);
    if (arg.fields[0].is_member()){
        tmp_args[0] = arg.fields[0].fields[0];
        if (arg.fields[0].atom != "n") throw out_of_bounds("unexpected field: " + arg.fields[0].atom,arg.fields[0].pos);
    }
    else{
        tmp_args[0] = arg.fields[0];
    }
    try{
        res.n = _arg<ivyc_s1::ivy__ident>(tmp_args,0,0);
;
    }
    catch(const out_of_bounds &err){
        throw out_of_bounds("in field n: " + err.txt,err.pos);
    }
    return res;
}
template <>
void __deser<ivyc_s1::ivy__undefined>(ivy_deser &inp, ivyc_s1::ivy__undefined &res){
    inp.open_struct();
    inp.open_field("n");
    __deser(inp,res.n);
    inp.close_field();
    inp.close_struct();
}
template <>
ivyc_s1::ivy__untyped _arg<ivyc_s1::ivy__untyped>(std::vector<ivy_value> &args, unsigned idx, long long bound){
    ivyc_s1::ivy__untyped res;
    ivy_value &arg = args[idx];
    if (arg.atom.size() || arg.fields.size() != 2) throw out_of_bounds("wrong number of fields",args[idx].pos);
    std::vector<ivy_value> tmp_args(1);
    if (arg.fields[0].is_member()){
        tmp_args[0] = arg.fields[0].fields[0];
        if (arg.fields[0].atom != "e") throw out_of_bounds("unexpected field: " + arg.fields[0].atom,arg.fields[0].pos);
    }
    else{
        tmp_args[0] = arg.fields[0];
    }
    try{
        res.e = _arg<ivyc_s1::ivy__expr>(tmp_args,0,0);
;
    }
    catch(const out_of_bounds &err){
        throw out_of_bounds("in field e: " + err.txt,err.pos);
    }
    if (arg.fields[1].is_member()){
        tmp_args[0] = arg.fields[1].fields[0];
        if (arg.fields[1].atom != "t1") throw out_of_bounds("unexpected field: " + arg.fields[1].atom,arg.fields[1].pos);
    }
    else{
        tmp_args[0] = arg.fields[1];
    }
    try{
        res.t1 = _arg<ivyc_s1::ivy__expr>(tmp_args,0,0);
;
    }
    catch(const out_of_bounds &err){
        throw out_of_bounds("in field t1: " + err.txt,err.pos);
    }
    return res;
}
template <>
void __deser<ivyc_s1::ivy__untyped>(ivy_deser &inp, ivyc_s1::ivy__untyped &res){
    inp.open_struct();
    inp.open_field("e");
    __deser(inp,res.e);
    inp.close_field();
    inp.open_field("t1");
    __deser(inp,res.t1);
    inp.close_field();
    inp.close_struct();
}
template <>
ivyc_s1::ivy__vardc _arg<ivyc_s1::ivy__vardc>(std::vector<ivy_value> &args, unsigned idx, long long bound){
    ivyc_s1::ivy__vardc res;
    ivy_value &arg = args[idx];
    if (arg.atom.size() || arg.fields.size() != 5) throw out_of_bounds("wrong number of fields",args[idx].pos);
    std::vector<ivy_value> tmp_args(1);
    if (arg.fields[0].is_member()){
        tmp_args[0] = arg.fields[0].fields[0];
        if (arg.fields[0].atom != "typing") throw out_of_bounds("unexpected field: " + arg.fields[0].atom,arg.fields[0].pos);
    }
    else{
        tmp_args[0] = arg.fields[0];
    }
    try{
        res.typing = _arg<ivyc_s1::ivy__expr>(tmp_args,0,0);
;
    }
    catch(const out_of_bounds &err){
        throw out_of_bounds("in field typing: " + err.txt,err.pos);
    }
    if (arg.fields[1].is_member()){
        tmp_args[0] = arg.fields[1].fields[0];
        if (arg.fields[1].atom != "is_destructor") throw out_of_bounds("unexpected field: " + arg.fields[1].atom,arg.fields[1].pos);
    }
    else{
        tmp_args[0] = arg.fields[1];
    }
    try{
        res.is_destructor = _arg<bool>(tmp_args,0,2);
;
    }
    catch(const out_of_bounds &err){
        throw out_of_bounds("in field is_destructor: " + err.txt,err.pos);
    }
    if (arg.fields[2].is_member()){
        tmp_args[0] = arg.fields[2].fields[0];
        if (arg.fields[2].atom != "has_def") throw out_of_bounds("unexpected field: " + arg.fields[2].atom,arg.fields[2].pos);
    }
    else{
        tmp_args[0] = arg.fields[2];
    }
    try{
        res.has_def = _arg<bool>(tmp_args,0,2);
;
    }
    catch(const out_of_bounds &err){
        throw out_of_bounds("in field has_def: " + err.txt,err.pos);
    }
    if (arg.fields[3].is_member()){
        tmp_args[0] = arg.fields[3].fields[0];
        if (arg.fields[3].atom != "def") throw out_of_bounds("unexpected field: " + arg.fields[3].atom,arg.fields[3].pos);
    }
    else{
        tmp_args[0] = arg.fields[3];
    }
    try{
        res.def = _arg<ivyc_s1::ivy__expr>(tmp_args,0,0);
;
    }
    catch(const out_of_bounds &err){
        throw out_of_bounds("in field def: " + err.txt,err.pos);
    }
    if (arg.fields[4].is_member()){
        tmp_args[0] = arg.fields[4].fields[0];
        if (arg.fields[4].atom != "ann") throw out_of_bounds("unexpected field: " + arg.fields[4].atom,arg.fields[4].pos);
    }
    else{
        tmp_args[0] = arg.fields[4];
    }
    try{
        res.ann = _arg<ivyc_s1::annot>(tmp_args,0,0);
;
    }
    catch(const out_of_bounds &err){
        throw out_of_bounds("in field ann: " + err.txt,err.pos);
    }
    return res;
}
template <>
void __deser<ivyc_s1::ivy__vardc>(ivy_deser &inp, ivyc_s1::ivy__vardc &res){
    inp.open_struct();
    inp.open_field("typing");
    __deser(inp,res.typing);
    inp.close_field();
    inp.open_field("is_destructor");
    __deser(inp,res.is_destructor);
    inp.close_field();
    inp.open_field("has_def");
    __deser(inp,res.has_def);
    inp.close_field();
    inp.open_field("def");
    __deser(inp,res.def);
    inp.close_field();
    inp.open_field("ann");
    __deser(inp,res.ann);
    inp.close_field();
    inp.close_struct();
}
template <>
ivyc_s1::ivy__variable _arg<ivyc_s1::ivy__variable>(std::vector<ivy_value> &args, unsigned idx, long long bound){
    ivyc_s1::ivy__variable res;
    ivy_value &arg = args[idx];
    if (arg.atom.size() || arg.fields.size() != 2) throw out_of_bounds("wrong number of fields",args[idx].pos);
    std::vector<ivy_value> tmp_args(1);
    if (arg.fields[0].is_member()){
        tmp_args[0] = arg.fields[0].fields[0];
        if (arg.fields[0].atom != "idx") throw out_of_bounds("unexpected field: " + arg.fields[0].atom,arg.fields[0].pos);
    }
    else{
        tmp_args[0] = arg.fields[0];
    }
    try{
        res.idx = _arg<unsigned long long>(tmp_args,0,0);
;
    }
    catch(const out_of_bounds &err){
        throw out_of_bounds("in field idx: " + err.txt,err.pos);
    }
    if (arg.fields[1].is_member()){
        tmp_args[0] = arg.fields[1].fields[0];
        if (arg.fields[1].atom != "ann") throw out_of_bounds("unexpected field: " + arg.fields[1].atom,arg.fields[1].pos);
    }
    else{
        tmp_args[0] = arg.fields[1];
    }
    try{
        res.ann = _arg<ivyc_s1::annot>(tmp_args,0,0);
;
    }
    catch(const out_of_bounds &err){
        throw out_of_bounds("in field ann: " + err.txt,err.pos);
    }
    return res;
}
template <>
void __deser<ivyc_s1::ivy__variable>(ivy_deser &inp, ivyc_s1::ivy__variable &res){
    inp.open_struct();
    inp.open_field("idx");
    __deser(inp,res.idx);
    inp.close_field();
    inp.open_field("ann");
    __deser(inp,res.ann);
    inp.close_field();
    inp.close_struct();
}
template <>
ivyc_s1::ivy__varst _arg<ivyc_s1::ivy__varst>(std::vector<ivy_value> &args, unsigned idx, long long bound){
    ivyc_s1::ivy__varst res;
    ivy_value &arg = args[idx];
    if (arg.atom.size() || arg.fields.size() != 2) throw out_of_bounds("wrong number of fields",args[idx].pos);
    std::vector<ivy_value> tmp_args(1);
    if (arg.fields[0].is_member()){
        tmp_args[0] = arg.fields[0].fields[0];
        if (arg.fields[0].atom != "name") throw out_of_bounds("unexpected field: " + arg.fields[0].atom,arg.fields[0].pos);
    }
    else{
        tmp_args[0] = arg.fields[0];
    }
    try{
        res.name = _arg<ivyc_s1::ivy__expr>(tmp_args,0,0);
;
    }
    catch(const out_of_bounds &err){
        throw out_of_bounds("in field name: " + err.txt,err.pos);
    }
    if (arg.fields[1].is_member()){
        tmp_args[0] = arg.fields[1].fields[0];
        if (arg.fields[1].atom != "ann") throw out_of_bounds("unexpected field: " + arg.fields[1].atom,arg.fields[1].pos);
    }
    else{
        tmp_args[0] = arg.fields[1];
    }
    try{
        res.ann = _arg<ivyc_s1::annot>(tmp_args,0,0);
;
    }
    catch(const out_of_bounds &err){
        throw out_of_bounds("in field ann: " + err.txt,err.pos);
    }
    return res;
}
template <>
void __deser<ivyc_s1::ivy__varst>(ivy_deser &inp, ivyc_s1::ivy__varst &res){
    inp.open_struct();
    inp.open_field("name");
    __deser(inp,res.name);
    inp.close_field();
    inp.open_field("ann");
    __deser(inp,res.ann);
    inp.close_field();
    inp.close_struct();
}
template <>
ivyc_s1::ivy__version _arg<ivyc_s1::ivy__version>(std::vector<ivy_value> &args, unsigned idx, long long bound){
    ivyc_s1::ivy__version res;
    ivy_value &arg = args[idx];
    if (arg.atom.size() || arg.fields.size() != 1) throw out_of_bounds("wrong number of fields",args[idx].pos);
    std::vector<ivy_value> tmp_args(1);
    if (arg.fields[0].is_member()){
        tmp_args[0] = arg.fields[0].fields[0];
        if (arg.fields[0].atom != "nums") throw out_of_bounds("unexpected field: " + arg.fields[0].atom,arg.fields[0].pos);
    }
    else{
        tmp_args[0] = arg.fields[0];
    }
    try{
        res.nums = _arg<ivyc_s1::vector__pos__>(tmp_args,0,0);
;
    }
    catch(const out_of_bounds &err){
        throw out_of_bounds("in field nums: " + err.txt,err.pos);
    }
    return res;
}
template <>
void __deser<ivyc_s1::ivy__version>(ivy_deser &inp, ivyc_s1::ivy__version &res){
    inp.open_struct();
    inp.open_field("nums");
    __deser(inp,res.nums);
    inp.close_field();
    inp.close_struct();
}
template <>
ivyc_s1::ivy__whilest _arg<ivyc_s1::ivy__whilest>(std::vector<ivy_value> &args, unsigned idx, long long bound){
    ivyc_s1::ivy__whilest res;
    ivy_value &arg = args[idx];
    if (arg.atom.size() || arg.fields.size() != 3) throw out_of_bounds("wrong number of fields",args[idx].pos);
    std::vector<ivy_value> tmp_args(1);
    if (arg.fields[0].is_member()){
        tmp_args[0] = arg.fields[0].fields[0];
        if (arg.fields[0].atom != "cond") throw out_of_bounds("unexpected field: " + arg.fields[0].atom,arg.fields[0].pos);
    }
    else{
        tmp_args[0] = arg.fields[0];
    }
    try{
        res.cond = _arg<ivyc_s1::ivy__expr>(tmp_args,0,0);
;
    }
    catch(const out_of_bounds &err){
        throw out_of_bounds("in field cond: " + err.txt,err.pos);
    }
    if (arg.fields[1].is_member()){
        tmp_args[0] = arg.fields[1].fields[0];
        if (arg.fields[1].atom != "body") throw out_of_bounds("unexpected field: " + arg.fields[1].atom,arg.fields[1].pos);
    }
    else{
        tmp_args[0] = arg.fields[1];
    }
    try{
        res.body = _arg<ivyc_s1::ivy__stmt>(tmp_args,0,0);
;
    }
    catch(const out_of_bounds &err){
        throw out_of_bounds("in field body: " + err.txt,err.pos);
    }
    if (arg.fields[2].is_member()){
        tmp_args[0] = arg.fields[2].fields[0];
        if (arg.fields[2].atom != "ann") throw out_of_bounds("unexpected field: " + arg.fields[2].atom,arg.fields[2].pos);
    }
    else{
        tmp_args[0] = arg.fields[2];
    }
    try{
        res.ann = _arg<ivyc_s1::annot>(tmp_args,0,0);
;
    }
    catch(const out_of_bounds &err){
        throw out_of_bounds("in field ann: " + err.txt,err.pos);
    }
    return res;
}
template <>
void __deser<ivyc_s1::ivy__whilest>(ivy_deser &inp, ivyc_s1::ivy__whilest &res){
    inp.open_struct();
    inp.open_field("cond");
    __deser(inp,res.cond);
    inp.close_field();
    inp.open_field("body");
    __deser(inp,res.body);
    inp.close_field();
    inp.open_field("ann");
    __deser(inp,res.ann);
    inp.close_field();
    inp.close_struct();
}
template <>
ivyc_s1::ivy__wrong_number_params _arg<ivyc_s1::ivy__wrong_number_params>(std::vector<ivy_value> &args, unsigned idx, long long bound){
    ivyc_s1::ivy__wrong_number_params res;
    ivy_value &arg = args[idx];
    if (arg.atom.size() || arg.fields.size() != 1) throw out_of_bounds("wrong number of fields",args[idx].pos);
    std::vector<ivy_value> tmp_args(1);
    if (arg.fields[0].is_member()){
        tmp_args[0] = arg.fields[0].fields[0];
        if (arg.fields[0].atom != "n") throw out_of_bounds("unexpected field: " + arg.fields[0].atom,arg.fields[0].pos);
    }
    else{
        tmp_args[0] = arg.fields[0];
    }
    try{
        res.n = _arg<unsigned long long>(tmp_args,0,0);
;
    }
    catch(const out_of_bounds &err){
        throw out_of_bounds("in field n: " + err.txt,err.pos);
    }
    return res;
}
template <>
void __deser<ivyc_s1::ivy__wrong_number_params>(ivy_deser &inp, ivyc_s1::ivy__wrong_number_params &res){
    inp.open_struct();
    inp.open_field("n");
    __deser(inp,res.n);
    inp.close_field();
    inp.close_struct();
}
template <>
ivyc_s1::pretty _arg<ivyc_s1::pretty>(std::vector<ivy_value> &args, unsigned idx, long long bound){
    ivyc_s1::pretty res;
    ivy_value &arg = args[idx];
    if (arg.atom.size() || arg.fields.size() != 11) throw out_of_bounds("wrong number of fields",args[idx].pos);
    std::vector<ivy_value> tmp_args(1);
    if (arg.fields[0].is_member()){
        tmp_args[0] = arg.fields[0].fields[0];
        if (arg.fields[0].atom != "tokens") throw out_of_bounds("unexpected field: " + arg.fields[0].atom,arg.fields[0].pos);
    }
    else{
        tmp_args[0] = arg.fields[0];
    }
    try{
        res.tokens = _arg<ivyc_s1::vector__pretty__token__>(tmp_args,0,0);
;
    }
    catch(const out_of_bounds &err){
        throw out_of_bounds("in field tokens: " + err.txt,err.pos);
    }
    if (arg.fields[1].is_member()){
        tmp_args[0] = arg.fields[1].fields[0];
        if (arg.fields[1].atom != "st") throw out_of_bounds("unexpected field: " + arg.fields[1].atom,arg.fields[1].pos);
    }
    else{
        tmp_args[0] = arg.fields[1];
    }
    try{
        res.st = _arg<ivyc_s1::pretty__state>(tmp_args,0,0);
;
    }
    catch(const out_of_bounds &err){
        throw out_of_bounds("in field st: " + err.txt,err.pos);
    }
    if (arg.fields[2].is_member()){
        tmp_args[0] = arg.fields[2].fields[0];
        if (arg.fields[2].atom != "maxline") throw out_of_bounds("unexpected field: " + arg.fields[2].atom,arg.fields[2].pos);
    }
    else{
        tmp_args[0] = arg.fields[2];
    }
    try{
        res.maxline = _arg<unsigned long long>(tmp_args,0,0);
;
    }
    catch(const out_of_bounds &err){
        throw out_of_bounds("in field maxline: " + err.txt,err.pos);
    }
    if (arg.fields[3].is_member()){
        tmp_args[0] = arg.fields[3].fields[0];
        if (arg.fields[3].atom != "indent") throw out_of_bounds("unexpected field: " + arg.fields[3].atom,arg.fields[3].pos);
    }
    else{
        tmp_args[0] = arg.fields[3];
    }
    try{
        res.indent = _arg<unsigned long long>(tmp_args,0,0);
;
    }
    catch(const out_of_bounds &err){
        throw out_of_bounds("in field indent: " + err.txt,err.pos);
    }
    if (arg.fields[4].is_member()){
        tmp_args[0] = arg.fields[4].fields[0];
        if (arg.fields[4].atom != "whitespace") throw out_of_bounds("unexpected field: " + arg.fields[4].atom,arg.fields[4].pos);
    }
    else{
        tmp_args[0] = arg.fields[4];
    }
    try{
        res.whitespace = _arg<ivyc_s1::str>(tmp_args,0,0);
;
    }
    catch(const out_of_bounds &err){
        throw out_of_bounds("in field whitespace: " + err.txt,err.pos);
    }
    if (arg.fields[5].is_member()){
        tmp_args[0] = arg.fields[5].fields[0];
        if (arg.fields[5].atom != "states") throw out_of_bounds("unexpected field: " + arg.fields[5].atom,arg.fields[5].pos);
    }
    else{
        tmp_args[0] = arg.fields[5];
    }
    try{
        res.states = _arg<ivyc_s1::vector__pretty__state__>(tmp_args,0,0);
;
    }
    catch(const out_of_bounds &err){
        throw out_of_bounds("in field states: " + err.txt,err.pos);
    }
    if (arg.fields[6].is_member()){
        tmp_args[0] = arg.fields[6].fields[0];
        if (arg.fields[6].atom != "stack") throw out_of_bounds("unexpected field: " + arg.fields[6].atom,arg.fields[6].pos);
    }
    else{
        tmp_args[0] = arg.fields[6];
    }
    try{
        res.stack = _arg<ivyc_s1::vector__pos__>(tmp_args,0,0);
;
    }
    catch(const out_of_bounds &err){
        throw out_of_bounds("in field stack: " + err.txt,err.pos);
    }
    if (arg.fields[7].is_member()){
        tmp_args[0] = arg.fields[7].fields[0];
        if (arg.fields[7].atom != "output") throw out_of_bounds("unexpected field: " + arg.fields[7].atom,arg.fields[7].pos);
    }
    else{
        tmp_args[0] = arg.fields[7];
    }
    try{
        res.output = _arg<ivyc_s1::str>(tmp_args,0,0);
;
    }
    catch(const out_of_bounds &err){
        throw out_of_bounds("in field output: " + err.txt,err.pos);
    }
    if (arg.fields[8].is_member()){
        tmp_args[0] = arg.fields[8].fields[0];
        if (arg.fields[8].atom != "space") throw out_of_bounds("unexpected field: " + arg.fields[8].atom,arg.fields[8].pos);
    }
    else{
        tmp_args[0] = arg.fields[8];
    }
    try{
        res.space = _arg<unsigned long long>(tmp_args,0,0);
;
    }
    catch(const out_of_bounds &err){
        throw out_of_bounds("in field space: " + err.txt,err.pos);
    }
    if (arg.fields[9].is_member()){
        tmp_args[0] = arg.fields[9].fields[0];
        if (arg.fields[9].atom != "depth") throw out_of_bounds("unexpected field: " + arg.fields[9].atom,arg.fields[9].pos);
    }
    else{
        tmp_args[0] = arg.fields[9];
    }
    try{
        res.depth = _arg<unsigned long long>(tmp_args,0,0);
;
    }
    catch(const out_of_bounds &err){
        throw out_of_bounds("in field depth: " + err.txt,err.pos);
    }
    if (arg.fields[10].is_member()){
        tmp_args[0] = arg.fields[10].fields[0];
        if (arg.fields[10].atom != "cppstyle") throw out_of_bounds("unexpected field: " + arg.fields[10].atom,arg.fields[10].pos);
    }
    else{
        tmp_args[0] = arg.fields[10];
    }
    try{
        res.cppstyle = _arg<bool>(tmp_args,0,2);
;
    }
    catch(const out_of_bounds &err){
        throw out_of_bounds("in field cppstyle: " + err.txt,err.pos);
    }
    return res;
}
template <>
void __deser<ivyc_s1::pretty>(ivy_deser &inp, ivyc_s1::pretty &res){
    inp.open_struct();
    inp.open_field("tokens");
    __deser(inp,res.tokens);
    inp.close_field();
    inp.open_field("st");
    __deser(inp,res.st);
    inp.close_field();
    inp.open_field("maxline");
    __deser(inp,res.maxline);
    inp.close_field();
    inp.open_field("indent");
    __deser(inp,res.indent);
    inp.close_field();
    inp.open_field("whitespace");
    __deser(inp,res.whitespace);
    inp.close_field();
    inp.open_field("states");
    __deser(inp,res.states);
    inp.close_field();
    inp.open_field("stack");
    __deser(inp,res.stack);
    inp.close_field();
    inp.open_field("output");
    __deser(inp,res.output);
    inp.close_field();
    inp.open_field("space");
    __deser(inp,res.space);
    inp.close_field();
    inp.open_field("depth");
    __deser(inp,res.depth);
    inp.close_field();
    inp.open_field("cppstyle");
    __deser(inp,res.cppstyle);
    inp.close_field();
    inp.close_struct();
}
template <>
ivyc_s1::pretty__state _arg<ivyc_s1::pretty__state>(std::vector<ivy_value> &args, unsigned idx, long long bound){
    ivyc_s1::pretty__state res;
    ivy_value &arg = args[idx];
    if (arg.atom.size() || arg.fields.size() != 2) throw out_of_bounds("wrong number of fields",args[idx].pos);
    std::vector<ivy_value> tmp_args(1);
    if (arg.fields[0].is_member()){
        tmp_args[0] = arg.fields[0].fields[0];
        if (arg.fields[0].atom != "begin") throw out_of_bounds("unexpected field: " + arg.fields[0].atom,arg.fields[0].pos);
    }
    else{
        tmp_args[0] = arg.fields[0];
    }
    try{
        res.begin = _arg<unsigned long long>(tmp_args,0,0);
;
    }
    catch(const out_of_bounds &err){
        throw out_of_bounds("in field begin: " + err.txt,err.pos);
    }
    if (arg.fields[1].is_member()){
        tmp_args[0] = arg.fields[1].fields[0];
        if (arg.fields[1].atom != "total") throw out_of_bounds("unexpected field: " + arg.fields[1].atom,arg.fields[1].pos);
    }
    else{
        tmp_args[0] = arg.fields[1];
    }
    try{
        res.total = _arg<unsigned long long>(tmp_args,0,0);
;
    }
    catch(const out_of_bounds &err){
        throw out_of_bounds("in field total: " + err.txt,err.pos);
    }
    return res;
}
template <>
void __deser<ivyc_s1::pretty__state>(ivy_deser &inp, ivyc_s1::pretty__state &res){
    inp.open_struct();
    inp.open_field("begin");
    __deser(inp,res.begin);
    inp.close_field();
    inp.open_field("total");
    __deser(inp,res.total);
    inp.close_field();
    inp.close_struct();
}
template <>
ivyc_s1::pretty__token _arg<ivyc_s1::pretty__token>(std::vector<ivy_value> &args, unsigned idx, long long bound){
    ivyc_s1::pretty__token res;
    ivy_value &arg = args[idx];
    if (arg.atom.size() || arg.fields.size() != 4) throw out_of_bounds("wrong number of fields",args[idx].pos);
    std::vector<ivy_value> tmp_args(1);
    if (arg.fields[0].is_member()){
        tmp_args[0] = arg.fields[0].fields[0];
        if (arg.fields[0].atom != "pair") throw out_of_bounds("unexpected field: " + arg.fields[0].atom,arg.fields[0].pos);
    }
    else{
        tmp_args[0] = arg.fields[0];
    }
    try{
        res.pair = _arg<bool>(tmp_args,0,2);
;
    }
    catch(const out_of_bounds &err){
        throw out_of_bounds("in field pair: " + err.txt,err.pos);
    }
    if (arg.fields[1].is_member()){
        tmp_args[0] = arg.fields[1].fields[0];
        if (arg.fields[1].atom != "tdepth") throw out_of_bounds("unexpected field: " + arg.fields[1].atom,arg.fields[1].pos);
    }
    else{
        tmp_args[0] = arg.fields[1];
    }
    try{
        res.tdepth = _arg<unsigned long long>(tmp_args,0,0);
;
    }
    catch(const out_of_bounds &err){
        throw out_of_bounds("in field tdepth: " + err.txt,err.pos);
    }
    if (arg.fields[2].is_member()){
        tmp_args[0] = arg.fields[2].fields[0];
        if (arg.fields[2].atom != "first") throw out_of_bounds("unexpected field: " + arg.fields[2].atom,arg.fields[2].pos);
    }
    else{
        tmp_args[0] = arg.fields[2];
    }
    try{
        res.first = _arg<ivyc_s1::str>(tmp_args,0,0);
;
    }
    catch(const out_of_bounds &err){
        throw out_of_bounds("in field first: " + err.txt,err.pos);
    }
    if (arg.fields[3].is_member()){
        tmp_args[0] = arg.fields[3].fields[0];
        if (arg.fields[3].atom != "second") throw out_of_bounds("unexpected field: " + arg.fields[3].atom,arg.fields[3].pos);
    }
    else{
        tmp_args[0] = arg.fields[3];
    }
    try{
        res.second = _arg<unsigned long long>(tmp_args,0,0);
;
    }
    catch(const out_of_bounds &err){
        throw out_of_bounds("in field second: " + err.txt,err.pos);
    }
    return res;
}
template <>
void __deser<ivyc_s1::pretty__token>(ivy_deser &inp, ivyc_s1::pretty__token &res){
    inp.open_struct();
    inp.open_field("pair");
    __deser(inp,res.pair);
    inp.close_field();
    inp.open_field("tdepth");
    __deser(inp,res.tdepth);
    inp.close_field();
    inp.open_field("first");
    __deser(inp,res.first);
    inp.close_field();
    inp.open_field("second");
    __deser(inp,res.second);
    inp.close_field();
    inp.close_struct();
}
template <>
ivyc_s1::pstate _arg<ivyc_s1::pstate>(std::vector<ivy_value> &args, unsigned idx, long long bound){
    ivyc_s1::pstate res;
    ivy_value &arg = args[idx];
    if (arg.atom.size() || arg.fields.size() != 5) throw out_of_bounds("wrong number of fields",args[idx].pos);
    std::vector<ivy_value> tmp_args(1);
    if (arg.fields[0].is_member()){
        tmp_args[0] = arg.fields[0].fields[0];
        if (arg.fields[0].atom != "b") throw out_of_bounds("unexpected field: " + arg.fields[0].atom,arg.fields[0].pos);
    }
    else{
        tmp_args[0] = arg.fields[0];
    }
    try{
        res.b = _arg<ivyc_s1::str>(tmp_args,0,0);
;
    }
    catch(const out_of_bounds &err){
        throw out_of_bounds("in field b: " + err.txt,err.pos);
    }
    if (arg.fields[1].is_member()){
        tmp_args[0] = arg.fields[1].fields[0];
        if (arg.fields[1].atom != "p") throw out_of_bounds("unexpected field: " + arg.fields[1].atom,arg.fields[1].pos);
    }
    else{
        tmp_args[0] = arg.fields[1];
    }
    try{
        res.p = _arg<unsigned long long>(tmp_args,0,0);
;
    }
    catch(const out_of_bounds &err){
        throw out_of_bounds("in field p: " + err.txt,err.pos);
    }
    if (arg.fields[2].is_member()){
        tmp_args[0] = arg.fields[2].fields[0];
        if (arg.fields[2].atom != "tok") throw out_of_bounds("unexpected field: " + arg.fields[2].atom,arg.fields[2].pos);
    }
    else{
        tmp_args[0] = arg.fields[2];
    }
    try{
        res.tok = _arg<ivyc_s1::str>(tmp_args,0,0);
;
    }
    catch(const out_of_bounds &err){
        throw out_of_bounds("in field tok: " + err.txt,err.pos);
    }
    if (arg.fields[3].is_member()){
        tmp_args[0] = arg.fields[3].fields[0];
        if (arg.fields[3].atom != "ann") throw out_of_bounds("unexpected field: " + arg.fields[3].atom,arg.fields[3].pos);
    }
    else{
        tmp_args[0] = arg.fields[3];
    }
    try{
        res.ann = _arg<ivyc_s1::annot_i>(tmp_args,0,0);
;
    }
    catch(const out_of_bounds &err){
        throw out_of_bounds("in field ann: " + err.txt,err.pos);
    }
    if (arg.fields[4].is_member()){
        tmp_args[0] = arg.fields[4].fields[0];
        if (arg.fields[4].atom != "ok") throw out_of_bounds("unexpected field: " + arg.fields[4].atom,arg.fields[4].pos);
    }
    else{
        tmp_args[0] = arg.fields[4];
    }
    try{
        res.ok = _arg<bool>(tmp_args,0,2);
;
    }
    catch(const out_of_bounds &err){
        throw out_of_bounds("in field ok: " + err.txt,err.pos);
    }
    return res;
}
template <>
void __deser<ivyc_s1::pstate>(ivy_deser &inp, ivyc_s1::pstate &res){
    inp.open_struct();
    inp.open_field("b");
    __deser(inp,res.b);
    inp.close_field();
    inp.open_field("p");
    __deser(inp,res.p);
    inp.close_field();
    inp.open_field("tok");
    __deser(inp,res.tok);
    inp.close_field();
    inp.open_field("ann");
    __deser(inp,res.ann);
    inp.close_field();
    inp.open_field("ok");
    __deser(inp,res.ok);
    inp.close_field();
    inp.close_struct();
}
template <>
ivyc_s1::char__kinds _arg<ivyc_s1::char__kinds>(std::vector<ivy_value> &args, unsigned idx, long long bound){
    ivy_value &arg = args[idx];
    if (arg.atom.size() == 0 || arg.fields.size() != 0) throw out_of_bounds(idx,arg.pos);
    if(arg.atom == "alphanum") return ivyc_s1::char__alphanum;
    if(arg.atom == "bracket") return ivyc_s1::char__bracket;
    if(arg.atom == "punct") return ivyc_s1::char__punct;
    throw out_of_bounds("bad value: " + arg.atom,arg.pos);
}
template <>
void __deser<ivyc_s1::char__kinds>(ivy_deser &inp, ivyc_s1::char__kinds &res){
    int __res;
    __deser(inp,__res);
    res = (ivyc_s1::char__kinds)__res;
}
template <>
ivyc_s1::cpp__verb _arg<ivyc_s1::cpp__verb>(std::vector<ivy_value> &args, unsigned idx, long long bound){
    ivy_value &arg = args[idx];
    if (arg.atom.size() == 0 || arg.fields.size() != 0) throw out_of_bounds(idx,arg.pos);
    if(arg.atom == "none") return ivyc_s1::cpp__verb__none;
    if(arg.atom == "arrow") return ivyc_s1::cpp__verb__arrow;
    if(arg.atom == "plus") return ivyc_s1::cpp__verb__plus;
    if(arg.atom == "times") return ivyc_s1::cpp__verb__times;
    if(arg.atom == "colon") return ivyc_s1::cpp__verb__colon;
    if(arg.atom == "app") return ivyc_s1::cpp__verb__app;
    if(arg.atom == "empty") return ivyc_s1::cpp__verb__empty;
    if(arg.atom == "dot") return ivyc_s1::cpp__verb__dot;
    if(arg.atom == "new") return ivyc_s1::cpp__verb__new;
    if(arg.atom == "numeral") return ivyc_s1::cpp__verb__numeral;
    if(arg.atom == "castv") return ivyc_s1::cpp__verb__castv;
    if(arg.atom == "boolv") return ivyc_s1::cpp__verb__boolv;
    if(arg.atom == "truev") return ivyc_s1::cpp__verb__truev;
    if(arg.atom == "falsev") return ivyc_s1::cpp__verb__falsev;
    if(arg.atom == "and") return ivyc_s1::cpp__verb__and;
    if(arg.atom == "or") return ivyc_s1::cpp__verb__or;
    if(arg.atom == "not") return ivyc_s1::cpp__verb__not;
    if(arg.atom == "iff") return ivyc_s1::cpp__verb__iff;
    if(arg.atom == "equals") return ivyc_s1::cpp__verb__equals;
    if(arg.atom == "notequals") return ivyc_s1::cpp__verb__notequals;
    if(arg.atom == "lt") return ivyc_s1::cpp__verb__lt;
    if(arg.atom == "leq") return ivyc_s1::cpp__verb__leq;
    if(arg.atom == "gt") return ivyc_s1::cpp__verb__gt;
    if(arg.atom == "geq") return ivyc_s1::cpp__verb__geq;
    if(arg.atom == "minus") return ivyc_s1::cpp__verb__minus;
    if(arg.atom == "div") return ivyc_s1::cpp__verb__div;
    if(arg.atom == "string") return ivyc_s1::cpp__verb__string;
    if(arg.atom == "ite") return ivyc_s1::cpp__verb__ite;
    if(arg.atom == "comma") return ivyc_s1::cpp__verb__comma;
    if(arg.atom == "varv") return ivyc_s1::cpp__verb__varv;
    if(arg.atom == "logvar") return ivyc_s1::cpp__verb__logvar;
    if(arg.atom == "isav") return ivyc_s1::cpp__verb__isav;
    throw out_of_bounds("bad value: " + arg.atom,arg.pos);
}
template <>
void __deser<ivyc_s1::cpp__verb>(ivy_deser &inp, ivyc_s1::cpp__verb &res){
    int __res;
    __deser(inp,__res);
    res = (ivyc_s1::cpp__verb)__res;
}
template <>
ivyc_s1::ivy__action_kind _arg<ivyc_s1::ivy__action_kind>(std::vector<ivy_value> &args, unsigned idx, long long bound){
    ivy_value &arg = args[idx];
    if (arg.atom.size() == 0 || arg.fields.size() != 0) throw out_of_bounds(idx,arg.pos);
    if(arg.atom == "internal") return ivyc_s1::ivy__action_kind__internal;
    if(arg.atom == "external") return ivyc_s1::ivy__action_kind__external;
    if(arg.atom == "imported") return ivyc_s1::ivy__action_kind__imported;
    if(arg.atom == "exported") return ivyc_s1::ivy__action_kind__exported;
    throw out_of_bounds("bad value: " + arg.atom,arg.pos);
}
template <>
void __deser<ivyc_s1::ivy__action_kind>(ivy_deser &inp, ivyc_s1::ivy__action_kind &res){
    int __res;
    __deser(inp,__res);
    res = (ivyc_s1::ivy__action_kind)__res;
}
template <>
ivyc_s1::ivy__verb _arg<ivyc_s1::ivy__verb>(std::vector<ivy_value> &args, unsigned idx, long long bound){
    ivy_value &arg = args[idx];
    if (arg.atom.size() == 0 || arg.fields.size() != 0) throw out_of_bounds(idx,arg.pos);
    if(arg.atom == "none") return ivyc_s1::ivy__verb__none;
    if(arg.atom == "arrow") return ivyc_s1::ivy__verb__arrow;
    if(arg.atom == "plus") return ivyc_s1::ivy__verb__plus;
    if(arg.atom == "times") return ivyc_s1::ivy__verb__times;
    if(arg.atom == "colon") return ivyc_s1::ivy__verb__colon;
    if(arg.atom == "app") return ivyc_s1::ivy__verb__app;
    if(arg.atom == "empty") return ivyc_s1::ivy__verb__empty;
    if(arg.atom == "dot") return ivyc_s1::ivy__verb__dot;
    if(arg.atom == "new") return ivyc_s1::ivy__verb__new;
    if(arg.atom == "numeral") return ivyc_s1::ivy__verb__numeral;
    if(arg.atom == "castv") return ivyc_s1::ivy__verb__castv;
    if(arg.atom == "boolv") return ivyc_s1::ivy__verb__boolv;
    if(arg.atom == "truev") return ivyc_s1::ivy__verb__truev;
    if(arg.atom == "falsev") return ivyc_s1::ivy__verb__falsev;
    if(arg.atom == "and") return ivyc_s1::ivy__verb__and;
    if(arg.atom == "or") return ivyc_s1::ivy__verb__or;
    if(arg.atom == "not") return ivyc_s1::ivy__verb__not;
    if(arg.atom == "iff") return ivyc_s1::ivy__verb__iff;
    if(arg.atom == "equals") return ivyc_s1::ivy__verb__equals;
    if(arg.atom == "notequals") return ivyc_s1::ivy__verb__notequals;
    if(arg.atom == "lt") return ivyc_s1::ivy__verb__lt;
    if(arg.atom == "leq") return ivyc_s1::ivy__verb__leq;
    if(arg.atom == "gt") return ivyc_s1::ivy__verb__gt;
    if(arg.atom == "geq") return ivyc_s1::ivy__verb__geq;
    if(arg.atom == "minus") return ivyc_s1::ivy__verb__minus;
    if(arg.atom == "div") return ivyc_s1::ivy__verb__div;
    if(arg.atom == "string") return ivyc_s1::ivy__verb__string;
    if(arg.atom == "ite") return ivyc_s1::ivy__verb__ite;
    if(arg.atom == "comma") return ivyc_s1::ivy__verb__comma;
    if(arg.atom == "varv") return ivyc_s1::ivy__verb__varv;
    if(arg.atom == "logvar") return ivyc_s1::ivy__verb__logvar;
    if(arg.atom == "isav") return ivyc_s1::ivy__verb__isav;
    throw out_of_bounds("bad value: " + arg.atom,arg.pos);
}
template <>
void __deser<ivyc_s1::ivy__verb>(ivy_deser &inp, ivyc_s1::ivy__verb &res){
    int __res;
    __deser(inp,__res);
    res = (ivyc_s1::ivy__verb)__res;
}


class stdin_reader: public reader {
    std::string buf;
    std::string eof_flag;

public:
    bool eof(){
      return eof_flag.size();
    }
    virtual int fdes(){
        return 0;
    }
    virtual void read() {
        char tmp[257];
        int chars = ::read(0,tmp,256);
        if (chars == 0) {  // EOF
            if (buf.size())
                process(buf);
            eof_flag = "eof";
        }
        tmp[chars] = 0;
        buf += std::string(tmp);
        size_t pos;
        while ((pos = buf.find('\n')) != std::string::npos) {
            std::string line = buf.substr(0,pos+1);
            buf.erase(0,pos+1);
            process(line);
        }
    }
    virtual void process(const std::string &line) {
        __ivy_out << line;
    }
};

class cmd_reader: public stdin_reader {
    int lineno;
public:
    ivyc_s1_repl &ivy;    

    cmd_reader(ivyc_s1_repl &_ivy) : ivy(_ivy) {
        lineno = 1;
        if (isatty(fdes()))
            __ivy_out << "> "; __ivy_out.flush();
    }

    virtual void process(const std::string &cmd) {
        std::string action;
        std::vector<ivy_value> args;
        try {
            parse_command(cmd,action,args);
            ivy.__lock();

            {
                std::cerr << "undefined action: " << action << std::endl;
            }
            ivy.__unlock();
        }
        catch (syntax_error& err) {
            ivy.__unlock();
            std::cerr << "line " << lineno << ":" << err.pos << ": syntax error" << std::endl;
        }
        catch (out_of_bounds &err) {
            ivy.__unlock();
            std::cerr << "line " << lineno << ":" << err.pos << ": " << err.txt << " bad value" << std::endl;
        }
        catch (bad_arity &err) {
            ivy.__unlock();
            std::cerr << "action " << err.action << " takes " << err.num  << " input parameters" << std::endl;
        }
        if (isatty(fdes()))
            __ivy_out << "> "; __ivy_out.flush();
        lineno++;
    }
};



int main(int argc, char **argv){
        int test_iters = 100;
        int runs = 1;
    ivyc_s1::str p__input_file_name;

    int seed = 1;
    int sleep_ms = 10;
    int final_ms = 0; 
    
    std::vector<char *> pargs; // positional args
    pargs.push_back(argv[0]);
    for (int i = 1; i < argc; i++) {
        std::string arg = argv[i];
        size_t p = arg.find('=');
        if (p == std::string::npos)
            pargs.push_back(argv[i]);
        else {
            std::string param = arg.substr(0,p);
            std::string value = arg.substr(p+1);

            if (param == "out") {
                __ivy_out.open(value.c_str());
                if (!__ivy_out) {
                    std::cerr << "cannot open to write: " << value << std::endl;
                    return 1;
                }
            }
            else if (param == "iters") {
                test_iters = atoi(value.c_str());
            }
            else if (param == "runs") {
                runs = atoi(value.c_str());
            }
            else if (param == "seed") {
                seed = atoi(value.c_str());
            }
            else if (param == "delay") {
                sleep_ms = atoi(value.c_str());
            }
            else if (param == "wait") {
                final_ms = atoi(value.c_str());
            }
            else if (param == "modelfile") {
                __ivy_modelfile.open(value.c_str());
                if (!__ivy_modelfile) {
                    std::cerr << "cannot open to write: " << value << std::endl;
                    return 1;
                }
            }
            else {
                std::cerr << "unknown option: " << param << std::endl;
                return 1;
            }
        }
    }
    srand(seed);
    if (!__ivy_out.is_open())
        __ivy_out.basic_ios<char>::rdbuf(std::cout.rdbuf());
    argc = pargs.size();
    argv = &pargs[0];
    if (argc == 3){
        argc--;
        int fd = _open(argv[argc],0);
        if (fd < 0){
            std::cerr << "cannot open to read: " << argv[argc] << "\n";
            __ivy_exit(1);
        }
        _dup2(fd, 0);
    }
    if (argc != 2){
        std::cerr << "usage: ivyc_s1 input_file_name\n";
        __ivy_exit(1);
    }
    std::vector<std::string> args;
    std::vector<ivy_value> arg_values(1);
    for(int i = 1; i < argc;i++){args.push_back(argv[i]);}
    try {
        int pos = 0;
        arg_values[0] = parse_value(args[0],pos);
        p__input_file_name =  _arg<ivyc_s1::str>(arg_values,0,0);
    }
    catch(out_of_bounds &) {
        std::cerr << "parameter input_file_name out of bounds\n";
        __ivy_exit(1);
    }
    catch(syntax_error &) {
        std::cerr << "syntax error in command argument\n";
        __ivy_exit(1);
    }

#ifdef _WIN32
    // Boilerplate from windows docs

    {
        WORD wVersionRequested;
        WSADATA wsaData;
        int err;

    /* Use the MAKEWORD(lowbyte, highbyte) macro declared in Windef.h */
        wVersionRequested = MAKEWORD(2, 2);

        err = WSAStartup(wVersionRequested, &wsaData);
        if (err != 0) {
            /* Tell the user that we could not find a usable */
            /* Winsock DLL.                                  */
            printf("WSAStartup failed with error: %d\n", err);
            return 1;
        }

    /* Confirm that the WinSock DLL supports 2.2.*/
    /* Note that if the DLL supports versions greater    */
    /* than 2.2 in addition to 2.2, it will still return */
    /* 2.2 in wVersion since that is the version we      */
    /* requested.                                        */

        if (LOBYTE(wsaData.wVersion) != 2 || HIBYTE(wsaData.wVersion) != 2) {
            /* Tell the user that we could not find a usable */
            /* WinSock DLL.                                  */
            printf("Could not find a usable version of Winsock.dll\n");
            WSACleanup();
            return 1;
        }
    }
#endif
    ivyc_s1_repl ivy(p__input_file_name);
    for(unsigned i = 0; i < argc; i++) {ivy.__argv.push_back(argv[i]);}
    ivy.__init();


    
    ivy.__unlock();

    // The main thread waits for all reader threads to die

    for(unsigned i = 0; true ; i++) {
        ivy.__lock();
        if (i >= ivy.thread_ids.size()){
            ivy.__unlock();
            break;
        }
        pthread_t tid = ivy.thread_ids[i];
        ivy.__unlock();
        pthread_join(tid,NULL);
    }
    return 0;

    return 0;
}
