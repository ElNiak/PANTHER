#lang ivy1.7

include quic_types
include quic_transport_error_code
include quic_frame
include quic_transport_parameters
include ip
include quic_fsm_sending
include quic_fsm_receiving

# The packet protocol
#
# The packet protocol has several funcitons including establishing
# connections and loss detection. Packets carry frames whihc implement
# many other funcition of QUIC.
#
# QUIC Packets
# ------------

# This section defines the QUIC packet datatype. Packets are the basic
# unit of communication between endpoints. A packet may be encoded in
# either the long or the short format. There are packet types:
# `initial`, `handshake`, `zero_rtt` and `one_rtt`. The `zero_rtt`
# type is encoded in the short format, while others are encoded in the
# long format.  Packets have associated source cid (long format only)
# and destination cid, protocol version (long format only), and a
# packet sequence number. An initial packet also has a *retry token*, which
# is a (possibly empty) sequence of bytes.  The *payload* of the
# packet consists of a sequence of *frames* (see frame.ivy).

# TODO: retry and one_rtt packet types

# ### Packet

# The type `quic_packet` represents packet. 

# The fields are:
#
# - *ptype*: the packet type [2]
# - *pversion*: the protocol version, if long format, else 0 [3]
# - *dst_cid*: the destination cid [4]
# - *src_cid*: the source cid, if long format, else 0  [5]
# - *token*: the retry token (see section 4.4.1)  [6]
# - *seq_num*: the packet sequence number  [7]
# - *payload*: the payload, a sequence of frames  [8]

object forged_protected_quic_packet = {
    type this = struct {
        ptype : quic_packet_type, # [2]
        pversion : version, # [3]
        dst_cid : cid, # [4]
        src_cid : cid, # [5]
        token : stream_data, # [6]
        seq_num : pkt_num, # [7]
        payload : frame.arr # [8]
    }

    instance idx : unbounded_sequence
    instance arr : array(idx,this)

    #Hamid
    instance retired_cids : array(idx, cid_seq)
    #Hamid

    action long(pkt:this) returns(res:bool) = {
        res := pkt.ptype ~= quic_packet_type.one_rtt;
    }
}

# Note: Short header are considered to have scid of 0 so it is quite important to use this value

# Packet protocol events
# -----------------------

# The packet event
# ================
#
# This event corresponds to transmission of a QUIC packet.
#
# Parameters
# ----------
#
# - `src`: the source endpoint
# - `dst`: the destination endpoint
# - `pkt` : the packet contents

action modify_protected_packet_event(src:ip.endpoint,dst:ip.endpoint,pkt:forged_protected_quic_packet) = {}

#action forged_packet_event_multiple_src(src1:ip.endpoint,src2:ip.endpoint,dst:ip.endpoint,pkt:forged_protected_quic_packet) = {}

# Packet protocol state
# ---------------------

# This section defines the history variables that track the state of
# the packet protocol. Some of these variables are shared between
# protocol layers, so that the allowed interleavings of events at
# different layers can be specified.
#

# Packet protocol state
# ---------------------




# Initial state
# -------------

# The history variables are initialized as follows.  Initially, no
# connections have been seen and no packets have been sent or
# acknowledged.

after init {

}

# Packet event specification
# --------------------------

# A packet event represents the transmision of a QUIC packet `pkt`
# from source endpoint `src` to a QUIC destination endpoint `dst`
# containing a sequence of queued frames.
#
# ### Requirements
#
# - The packet payload may not be empty [7].
#
# - A sender may not re-use a packet number on a given connection [4].
#
# - A packet containing only ack frames and padding is *ack-only*.
#   For a given cid, the number of ack-only packets sent from src to dst
#   must not be greater than the number of non-ack-only packets sent
#   from dst to src [5].
#
# - For a given connection, a server must only send packets to an
#   address that at one time in the past sent the as packet with
#   the highest packet numer thus far received. See notes below on
#   migration and path challenge. [10]

#   - Token Length:  A variable-length integer specifying the length of the
#      Token field, in bytes.  This value is zero if no token is present.
#      Initial packets sent by the server MUST set the Token Length field
#      to zero; clients that receive an Initial packet with a non-zero
#      Token Length field MUST either discard the packet or generate a
#      connection error of type PROTOCOL_VIOLATION. [11]

# Upon receiving the client's Initial packet, the server can request address validation 
# by sending a Retry packet (Section 17.2.5) containing a token. This token MUST be 
# repeated by the client in all Initial packets it sends for that connection after it 
# receives the Retry packet.

# ### Effects
#
# - The `conn_seen` and `sent_pkt` relations are updated to reflect
#   the observed packet [1].
# - The `last_pkt_num` function is updated to indicate the observed
#   packets as most recent for the packet's source and cid.
#   
#
# ### Notes
#
# - In the low-level packet encoding, the packet number may be encoded using
#   a small number of bytes, in a way that loses information.
#   At this layer of the protocol, however, the packets contain the original full
#   packet number.
#
# - On seeing a packet form a new address with the highest packect
#   number see thus far, the server detects migration of the
#   client. It begins sending packets to this address and initiates
#   path validation for this address. Until path validation succeeds,
#   the server limits data sent to the new address. Currently we
#   cannot specify this limit because we don't know the byte size of
#   packets or the timings of packets. 

#   An endpoint MUST treat the following as a connection error of type
#   TRANSPORT_PARAMETER_ERROR or PROTOCOL_VIOLATION:
#   *  absence of the retry_source_connection_id transport parameter from
#      the server after receiving a Retry packet, [1]
#   *  presence of the retry_source_connection_id transport parameter
#      when no Retry packet was received, or [3]
#   *  a mismatch between values received from a peer in these transport
#      parameters and the value sent in the corresponding Destination or
#      Source Connection ID fields of Initial packets. [2]
#   If a zero-length connection ID is selected, the corresponding
#   transport parameter is included with a zero-length value.

around modify_protected_packet_event(src:ip.endpoint,dst:ip.endpoint,pkt:forged_protected_quic_packet) {
    #call show_connected(connected(the_cid), connected_to(the_cid));

    # TEMPORARY: Do not allow zero_rtt packets

    require pkt.ptype ~= quic_packet_type.zero_rtt & pkt.ptype ~= quic_packet_type.version_negociation & pkt.ptype ~= quic_packet_type.retry;
    
    # Extract the source and destination cid's and packet number from the packet.

    var dcid := pkt.dst_cid;
    var scid := pkt.src_cid;
    if cid_mapped(dcid) {
	    dcid := cid_to_aid(dcid);
    };
    require pkt.token.end ~= 0 -> (retry_sent(client_initial_rcid) | retry_recv(scid) | pkt.token = tls_api.upper.get_old_new_token);

    if (src = client_alt | dst = client_alt) & nclients = 1 {
	    migration_done := true;
	    #call net.close(endpoint_id.client,sock);	# destroy connection ?
    };

    # Similarly, an endpoint MUST NOT reuse a connection ID when sending to
    # more than one destination address.  
    
    #if ~_generating  {
    #    if ~migration_done {
    #        cid_ip_mapped(dst) := pkt.dst_cid;
    #    } else {
    #        cid_ip_mapped(dst) := pkt.dst_cid;
    #    };
    #};

    # The destination cid must represent an existing connection,
    # except in the case of a client initial packet, when the
    # destination cid may be the nonce cid chosen by the client for
    # the given source cid. TODO: The standard says that on receiving
    # the the server's cid, the clint must switch to it. However, we
    # can't know when that server's cid has actually been received by
    # the client. As an example, after the server sends its first
    # initial packet, the client might still retransmit its initial
    # packet using the nonce cid. In some cases, we can infer that the
    # client has in fact seen the server's cid (for example, if it
    # packet contains an ACK frame, or a CRYPTO frame that is
    # reponsive to a server FRAME. This is trick to check, however,
    # and the actual servers do not seem to check it.

    require connected(dcid) |
        pkt.ptype = quic_packet_type.initial
        & is_client(scid)
        & dcid = nonce_cid(scid);
    

    # On long headers, both cids are given. If the destination cid is
    # connected, it must be connected to the source cid (otherwise it
    # must be a nonce generated by a client). 
    # On short headers (meaning one_rtt) the scid is not given, so we
    # use the recorded value.

    if pkt.long {
        require connected(dcid) -> connected_to(dcid) = scid;
    } else {
        scid := connected_to(dcid);
    };

    if retry_sent(dcid) & ~_generating & ~zero_length_token & pkt.ptype = quic_packet_type.initial {
        require dcid = client_initial_rcid;
    };

    # The packet type must match the encryption level of the queued
    # frames at the source. 

    require pkt.ptype = queued_level(scid);

    # TEMPORARY: prevent big packet number jumps (work around minquic bug)
    # Removed for MVFST that start with big PKT_NUM -> OK now
    if  _generating {
        # if ~is_client(scid) {
        #     #client
        #     require pkt.seq_num > last_pkt_num(scid,pkt.ptype);
        #     require pkt.seq_num <= last_pkt_num(scid,pkt.ptype) + 0x15;
        # } else {
        #server
        require pkt.seq_num = last_pkt_num(scid,pkt.ptype) + 0x1; # OK
        # };
        #require pkt.seq_num < last_pkt_num(scid,pkt.ptype) + 0x1 & pkt.seq_num > last_pkt_num(scid,pkt.ptype);
    };
    last_pkt_num(scid,pkt.ptype) := pkt.seq_num;
    require ~sent_pkt(scid,pkt.ptype,pkt.seq_num);  # [4]
    sent_pkt(scid,pkt.ptype,pkt.seq_num) := true;  # [1]

    # The payload may not be empty

    require num_queued_frames(scid) > 0;  # [7]

    # The payload must exactly match the queued frames.

    require pkt.payload = queued_frames(scid);

    # TEMPORARY: don't allow client migration during handshake

    require conn_seen(scid) & pkt.long & is_client(scid) -> conn_requested(src,dst,scid);

    # Packet must be sent to the endpoint from which the highest numbered
    # packet has been received. ~queued_challenge(dcid) & 
    #call show_probing(dcid ,hi_non_probing(dcid));
    require  conn_seen(dcid) -> hi_non_probing_endpoint(dcid,dst);  # [10]

    # TEMPORARY: do not apply ack-only rule to generated packets
    # This can be removed when we have a frame queue per encryption level

    #call show_ack_credit(scid, ack_credit(scid), queued_ack_eliciting(scid), queued_non_ack(scid), pkt.seq_num);
    require ~_generating & ~queued_non_ack(scid) -> ack_credit(scid) > 0;  # [5]

    #Hamid - This is wrong, because if there is no ack credits, it prevents from sending a packet 
    #        containing only a CONNECTION_CLOSE frame but we want to stop packets that contain only ACKs 
    #    require ~_generating & ~queued_ack_eliciting(scid) -> ack_credit(scid) > 0;
    #Hamid

    # QUESTION: THis sentence is from draft-18 section 13.1: "An
    #   endpoint MUST NOT send a packet containing only an ACK frame
    #   in response to a packet containing only ACK or PADDING frames,
    #   even if there are packet gaps which precede the received
    #   packet." Do we interpret this to mean that an ack-only packet
    #   cannot ack *only* ack-only packets?  Or that an ack-only
    #   packet cannot ack *any* ack-only packets?
    
    # If the sender is in the draining state, this is the draining packet.
    # Make sure that a draining packet has not previously been sent and
    # that the packet contains a connection_close frame;

    if conn_draining(scid) {
        require ~draining_pkt_sent(scid) & queued_close(scid);
    };

    ...

    # Here, we have the updates to the packet protocol state.

    # TEMPORARY: The following are repeated because currently locals defined in
    # the "before" section cannot be accessed in the "after" section.

    var dcid := pkt.dst_cid;
    var scid := pkt.src_cid if pkt.long else connected_to(dcid);

    if cid_mapped(dcid) {
	    dcid := cid_to_aid(dcid);
    };

    # TODO: the following should not be here

    if pkt.ptype = quic_packet_type.initial {
        initial_token := pkt.token;
        # An initial packet with an unseen destination cid is a connection request.
        if ~conn_seen(dcid)  {
            call show_initial_request_initial;
            if ~zero_rtt_sent {
                call tls_client_initial_request(src,dst,dcid,pkt.pversion,src_tls_id(src));
            };
            conn_requested(src,dst,scid) := true;
        };
        cid_to_token(dcid) := pkt.token;
    };

    conn_seen(scid) := true;  # [1]

    # Update the ack credits. A non-ack packet sent to a destination
    # increases the destination's ack credit. An ack packet decreases
    # the sender's ack credit.

#Hamid

#    if queued_non_ack(scid) {
#	ack_credit(dcid) := ack_credit(dcid) + 1;
#    } else {
#	ack_credit(scid) := ack_credit(scid) - 1;
#    };

    if queued_ack_eliciting(scid) {
       ack_credit(dcid) := ack_credit(dcid) + 1;
    };
    if ~queued_non_ack(scid) {
       ack_credit(scid) := ack_credit(scid) - 1;
    };

#Hamid

    # If this is a non-probing packet, update the highest non-probing
    # packet number seen on from this aid.
    # QUESTION: what if two different paths send the same packet number?
    # QUESTION: how do you compare packet numbers with different encryption levels?

    if queued_non_probing(scid) {
        if pkt.ptype = quic_packet_type.one_rtt {
            if pkt.seq_num >= hi_non_probing(scid) {
                hi_non_probing(scid) := pkt.seq_num;
                hi_non_probing_endpoint(scid,src) := true;
            }
        } else {
            hi_non_probing_endpoint(scid,src) := true;
        }
    };

    # If the packet contains a close frame, then set `pkt_has_close`

    if queued_close(scid) {
        pkt_has_close(scid,pkt.ptype,pkt.seq_num) := true;
    };

    # If the sender is in the draining state, this is the draining packet.

    if conn_draining(scid) {
        draining_pkt_sent(scid) := true
    };

    if pkt.ptype = quic_packet_type.initial & ~first_initial_send & zero_rtt_allowed {
        first_initial_send := true;
        initial_scid := scid;
        initial_dcid := dcid;
        queued_level(the_cid) := quic_packet_type.zero_rtt; # todo multiple client
    } else {
        first_initial_send := false;
    };

    # The queued frames are deleted
    
    queued_frames(scid) := frame.arr.empty;
    queued_non_probing(scid) := false;
    queued_non_ack(scid) := false;
    queued_close(scid) := false;
    num_queued_frames(scid) := 0;
#Hamid
    queued_ack_eliciting(scid) := false;
#Hamid
}

