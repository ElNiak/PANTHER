#lang ivy1.7

# a fake deserializer for quic

object quic_deser_forged = {}

<<< member

    class `quic_deser_forged`;

>>>

<<< impl
    //TODO
#include "/PFV/Protocols-Ivy/protocol-testing/quic/quic_utils/quic_ser_deser.h"
    int scid_mim = 8;
    int dcid_mim = 8;

    class `quic_deser_forged` : public ivy_binary_deser_128 {
    //class `quic_deser_forged` : public ivy_binary_deser {
        enum {quic_s_init,
              quic_s_type,
              quic_s_version,
	          quic_s_dcil,
	          quic_s_scil,
              quic_s_dcid,
              quic_s_scid,
              quic_s_retry_token_length,
              quic_s_retry_token,
	          quic_s_payload_length,
              quic_s_pkt_num,
              quic_s_payload
              } state;
        bool long_format;
        char hdr_type;
        int dcil_long;
        int dcil;
        int scil;
        long frame_type;
        int data_remaining;
        int128_t ack_blocks_expected;
        int128_t ack_block_count;
        //long long ack_blocks_expected;
        //long long ack_block_count;
        int payload_length;
        int fence;
	    bool have_scid = false;
        bool ecn = false;
        int token_length;
        int token_count = 0;
        int token_len = 0;

    
    public:
        quic_deser_forged(const std::vector<char> &inp) : ivy_binary_deser_128(inp),state(quic_s_init) {
        //quic_deser_forged(const std::vector<char> &inp) : ivy_binary_deser(inp),state(quic_s_init) {
            // pos = 42; // skip 42 bytes of IP and UDP header
            fence = 0;
        }
        virtual void  get(int128_t &res) {
        //virtual void  get(long long &res) {
            switch (state) {
            case quic_s_init:
            {
                getn(res,1);
                long_format = (res & 0x80) ? true : false;
                //0x7f is 0111 1111 in binary. This means the lower 7 bits of res are significant.
                //0x30    0011 0000
                hdr_type = res & 0x7f; //0x7f;
                //This is then shifted by 4 so that only the original 0xxx 0000 (3) bits are significant.
                res = long_format ? ((hdr_type & 0x30) >> 4) : 3;
                state = quic_s_version;
            }
            break;
            case quic_s_version:
            {
                if (long_format) {
                    ivy_binary_deser_128::getn(res,4);
                    //ivy_binary_deser::getn(res,4);
	        	}
                else
                    res = 0;
                state = quic_s_dcid;
            }
            break;
            case quic_s_dcid:
            {   
                if (long_format) {
                    int128_t cil;
                    //long long cil;
                    getn(cil,1);
                    std::cerr << "dstID size " << cil << "\n";
                    dcil = cil;
                    dcid_mim = cil;
                } else {
                    dcil = dcid_mim; //dcil_long
                }
		        getn(res,(dcil));
                std::cerr << "dstID res " << res << "\n";
                state = quic_s_scid;
            }
            break;
            case quic_s_scid:
            {
                if (long_format) {
                    int128_t cil;
                    //long long cil;
                    getn(cil,1);
                    std::cerr << "sourceID size " << cil << "\n";  
                    if(cil > 0)
                        have_scid = true;
                    else 
                        have_scid = false;
                    scil = cil;
                    scid_mim = cil;
                } else {
                    scil = 0;
                }
                getn(res,scil);
                /*if(scil != 8) { //tricks
                tls_field_bytes_map["scid"] = scil;
                }*/
                std::cerr << "sourceID res " << res << "\n";
                int128_t len;
                //long long len;
                if (long_format & ((hdr_type & 0x30) == 0x00)){
                    get_var_int(len);
		        }
                else len = 0;
                data_remaining = len; //token len
		        std::cerr << "sourceID data_remaining " << data_remaining << "\n";
                state = quic_s_retry_token;
            }
            break;
            case quic_s_retry_token:
            {
		        //std::cerr << "sourceID quic_s_retry_token 1 " <<  std::hex <<  res << "\n";
                ivy_binary_deser_128::getn(res,1);
                //ivy_binary_deser::getn(res,1);
                
                /*if(const char* env_p3 = std::getenv("RETRY_TOKEN_LENGTH")) {
                        std::cerr << "RETRY_TOKEN_LENGTH " << env_p3 << "\n";
                        token_len = atoi(env_p3);
                    }
                    if(token_count == 0)
                        token_len = token_length;

                    std::cerr << "token_count " << token_count << "\n";
                    
                    if(token_count < token_len){
                        getn(res,1);    
                        token_count += 1;
                        if(token_count == token_len) {
                            fence = 0;
                            if (payload_length > 0) {
                                fence = pos + payload_length - QUIC_DESER_FAKE_CHECKSUM_LENGTH;
                            } else {
                                fence = inp.size() - QUIC_DESER_FAKE_CHECKSUM_LENGTH;
                            }
                            state = quic_s_payload;
                        }
                        else
                        state = quic_s_retry_token; //useless ?
                    }
                    else 
                        state = quic_s_pkt_num;*/
		       // std::cerr << "sourceID quic_s_retry_token 2" << std::hex << res << "\n";
            }
            break;
            case quic_s_payload:
            {
                /*if (payload_length > 0) {
                    fence = pos + payload_length - QUIC_DESER_FAKE_CHECKSUM_LENGTH;
                } else {
                    fence = inp.size() - QUIC_DESER_FAKE_CHECKSUM_LENGTH;
                }*/
                ivy_binary_deser_128::getn(res,1);
            }
            break;
            default:
                std::cerr << "quic_deser_forged 3\n";  
                throw deser_err();
            }
        }

        void get_var_int(int128_t &res) {
        //void get_var_int(long long &res) {
            static int lens[4] = {0,1,3,7};
            int128_t lobyte;
            ivy_binary_deser_128::getn(lobyte,1);
            //long long lobyte;
            //ivy_binary_deser::getn(lobyte,1);
            int bytes = lens[(lobyte & 0xc0) >> 6];
            ivy_binary_deser_128::getn(res,bytes);
            //ivy_binary_deser::getn(res,bytes);
            res |= (lobyte & 0x3f) << (bytes << 3);
        }

        void get_pkt_num(int128_t &res) {
            ivy_binary_deser_128::getn(res,(hdr_type & 3)+1);
       // void get_pkt_num(long long &res) {
       //     ivy_binary_deser::getn(res,(hdr_type & 3)+1);
            return;
            static int lens[4] = {0,0,1,3};
            int128_t lobyte;
            ivy_binary_deser_128::getn(lobyte,1);
            //long long lobyte;
            //ivy_binary_deser::getn(lobyte,1);
            int bytes = lens[(lobyte & 0xc0) >> 6];
            if (bytes == 0) {
                res = lobyte;
                return;
            }
            ivy_binary_deser_128::getn(res,bytes);
            //ivy_binary_deser::getn(res,bytes);
            res |= (lobyte & 0x3f) << (bytes << 3);
        }

        virtual int open_tag(const std::vector<std::string> &tags) {
            std::cerr << "state          = " << state << "\n";  
            std::cerr << "quic_s_payload = " << quic_s_payload << "\n";
            std::cerr << "quic_s_payload == " << (quic_s_payload == state) << "\n";
            std::cerr << "quic_deser_forged 2\n";  
            throw deser_err();
        }

        virtual bool open_list_elem() {
            if (state == quic_s_payload)
                return payload_length-- > 0;
            
            if (state == quic_s_retry_token)
                return data_remaining-- > 0;
        
            if (state == quic_s_init)
                return more(1);

            std::cerr << "quic_deser_forged 1\n";  
            throw deser_err();
        }

        void open_list() {
            
        }
        void close_list() {
            if (state == quic_s_payload) {
                state = quic_s_init;
                pos += QUIC_DESER_FAKE_CHECKSUM_LENGTH; // skip the fake checksum
            }
            if (state == quic_s_retry_token) {
                int128_t len;
                //long long len;
                if (long_format) {
                    get_var_int(len);
                } else {
                    len = 0;
                }
                payload_length = len;
                std::cerr << "quic_deser_forged  payload_length 1" << payload_length << "\n";  
                if (payload_length > 0) {
                    fence = pos + payload_length - QUIC_DESER_FAKE_CHECKSUM_LENGTH;
                } else {
                    fence = inp.size() - QUIC_DESER_FAKE_CHECKSUM_LENGTH;
                }
                state = quic_s_payload;
            }
        }
        void close_list_elem() {}

        virtual void close_tag() {
            state = quic_s_payload;
        }

        ~quic_deser_forged(){}
    };

>>>

