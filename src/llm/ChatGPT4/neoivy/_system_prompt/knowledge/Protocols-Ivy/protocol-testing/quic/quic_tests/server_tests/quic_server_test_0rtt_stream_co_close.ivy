#lang ivy1.7

include order
include quic_infer
include file
include ivy_quic_shim_client
include quic_locale
include ivy_quic_client_behavior
# Mandatory for longbv else truncated
# after init {
#     the_cid := 0x0; # 0x0;
#     server_cid := 0x1; # 0x1;
# }
#
# We fix the initial transport parameters here. TODO: In principle these
# parameters should be selected randomly by some event.
#

include ivy_quic_client_0rtt_tp

# Mandatory for longbv else truncated
# quinn 0x0 & 0x1 !!!
# TODO TEST 400 error with 1 & 2
# after init {
#     the_cid := 0x0; # 0x3; # 0x0;
#     server_cid := 0x1; # 0x4; # 0x1;
# }
after init {
    sock := net.open(endpoint_id.client,client.ep);
    sock_alt := net.open(endpoint_id.client_alt,client_alt);
    sock_vn := sock; #net.open(endpoint_id.client_vn,client_vn);
    client.set_tls_id(0);
    second_client.set_tls_id(0); # TODO to avoid error
    server.set_tls_id(1);
    var extns := tls_extensions.empty;
    extns := extns.append(make_transport_parameters);
    call tls_api.upper.create(0,false,extns);  # false means this instance of tls is not a server
}


# Generate connection_close frames only for the environment process(es).
#
# Note: requiring the `err_code` is zero on non-generated frames means that
# we stop the test if the peer reports a protocol error. 

before frame.connection_close.handle(f:frame.connection_close,scid:cid,dcid:cid) {
    if _generating {
        require conn_total_data(the_cid) > 10 | conn_total_data(connected_to(the_cid)) > 10; # tricks
        require last_pkt_num(the_cid,quic_packet_type.one_rtt) > 3;
        require scid = the_cid;
        require f.frame_type = 0;
        require f.reason_phrase_length = 0;
        require f.err_code = 0;

    } else {
        require is_no_error;
        call _finalize;
    }
}

# Generate application_close frames only for the environment process(es).

before frame.application_close.handle(f:frame.application_close,scid:cid,dcid:cid) {
    if _generating {
        require scid = the_cid;
    } else {
        require is_no_error;
        call _finalize;
    }
}
around client_send_event {
    require s = current_stream;
    var tp := trans_params(the_cid);

    if version_negociated {
        require src = client_vn;
    } else {
        if ~disable_active_migration.is_set(tp) {
            if ~migration_done | allowed_multiple_migration  { #only one migration
                require src = client.ep | src = client_alt;
            } else {
                require src = client_alt;
            }
        } else {
            require src = client.ep;
        }
    };

    require dst = server.ep;
    require connected(the_cid) & dcid = connected_to(the_cid);
    require stream_length(dcid,s) = stream_app_data_end(dcid,s);
    require stream_length(dcid,s) < end & end <= http_request.end;
    require current_stream < 60;
    ...
    while end < http_request.end & http_request.value(end) ~= 10 {
        end := end.next
    };
    if end < http_request.end {
        end := end.next
    };
    var data := http_request.segment(stream_length(dcid,s),end);
#    call app_send_event(src,dst,dcid,s,data,end = http_request.end);
    call app_send_event(src,dst,dcid,s,data,stream_length(dcid,s),true);
    current_stream := current_stream + 4;
}
# The actions listed below will be generated by the mirror.
#
# Note: some of these are commented out. They are added in other files
# that include this one.

export frame.ack.handle
export frame.stream.handle
export frame.crypto.handle
export frame.path_response.handle
export packet_event
export client_send_event
export tls_recv_event
#export frame.new_connection_id.handle
#export frame.retire_connection_id.handle
#export frame.rst_stream.handle
#export frame.max_stream_id.handle
export frame.connection_close.handle # not working with quic-go
#export frame.max_stream_data.handle
#export frame.max_data.handle
attribute frame.crypto.handle.weight = "5"
attribute frame.path_response.handle.weight = "5"


# Final check
#
# When the test is complete, the tester calls the special action `_finalize`.
# We use this action to make some heuristic checks, for example that some
# data was actually received from the server. We can add advice to this
# action with additional checks.

export action _finalize = {
    # chris TODO 
    require is_no_error;
    require conn_total_data(the_cid) > 0;
}

