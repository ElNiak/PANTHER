#lang ivy1.7

include order
include quic_infer
include file
include ivy_quic_shim_client
include quic_locale

include ivy_quic_client_behavior

#
# We fix the initial transport parameters here. TODO: In principle these
# parameters should be selected randomly by some event.
#

include ivy_quic_client_standard_tp

include quic_time

after init {
    call time_api.c_timer.start;
    #call time_api.chrono_timer.start;
}

after init {
    sock := net.open(endpoint_id.client,client.ep);
    sock_alt := net.open(endpoint_id.client_alt,client_alt);
    sock_vn := sock; # net.open(endpoint_id.client_vn,client_vn);
    client.set_tls_id(0);
    second_client.set_tls_id(0); # TODO to avoid error
    server.set_tls_id(1);
    var extns := tls_extensions.empty;
    extns := extns.append(make_transport_parameters);
    call tls_api.upper.create(0,false,extns);  # false means this instance of tls is not a server
}


# TODO connection migration seems to bug in shadow, to test outsides of shadow

# relation is_not_sleeping

after init {
    slept := false;
}

before packet_event(src:ip.endpoint,dst:ip.endpoint,pkt:quic_packet) {
    #call show_last_pkt_num_for_cid(last_pkt_num(pkt.src_cid,quic_packet_type.one_rtt),pkt.src_cid,quic_packet_type.one_rtt,last_pkt_num(pkt.src_cid,quic_packet_type.one_rtt)/2);
    # TODO check with & without handshake_done_recv
    # # is_not_sleeping := time_api.c_timer.is_sleep_fake_timeout;
    #require is_not_sleeping -> _generating;
    call show_is_sleep_fake_timeout(time_api.c_timer.is_sleep_fake_timeout);
    # require _generating -> is_not_sleeping;
    # require _generating <-> is_not_sleeping;
    # require (_generating  -> is_not_sleeping);
    # # require (~is_not_sleeping -> ~_generating);
    
    if _generating {
        
    } 
    else {
        # call show_is_sleep_fake_timeout(time_api.c_timer.is_sleep_fake_timeout);
        # require time_api.c_timer.is_sleep_fake_timeout <-> _generating;
        # require (_generating  -> is_not_sleeping);
            # require (~is_not_sleeping -> ~_generating);
        if last_pkt_num(pkt.src_cid,quic_packet_type.one_rtt) > 5 & ~slept & handshake_done_recv & path_validated & pkt.seq_num > path_validated_pkt_num {  #  & path_validated
            var idle_timeout_forced := max_idle_timeout_used;
            var force_packet_retransmission_timeout := max_ack_delay_tp;
            call sleep_event(idle_timeout_forced);
            sleep_start := time_api.c_timer.sleep_fake(microseconds_to_milliseconds(idle_timeout_forced));
            slept := true;
        }
    }
}

before send_ack_eliciting_handshake_packet(src:ip.endpoint,dst:ip.endpoint,pkt:quic_packet) {
    if _generating {
        var tp := trans_params(the_cid);
        if version_negociated {
            require src = client_vn;
        } else {
            if ~disable_active_migration.is_set(tp) {
                if ~migration_done | allowed_multiple_migration { 
                    #only one migration
                    require src = client.ep | src = client_alt;
                } else {
                    require src = client_alt;
                }
            } else {
                require src = client.ep;
            }
        };
        require dst = server.ep;
        #require pkt.token.end = 0; 
        if pkt.ptype = quic_packet_type.initial & retry_recv(pkt.src_cid) & ~zero_length_token {
            require pkt.token = retry_token(pkt.src_cid); # TODO new_token
        } else {
            require pkt.token.end = 0; 
        };
    };
    if final_version = 0x00000000 {
        #require pkt.long -> pkt.pversion = 0xff00001d  #version 29
        #require pkt.long -> pkt.pversion = 0xff000020  #version 32
        #require pkt.long -> pkt.pversion = 0xff00001e  #version 30
        require pkt.long -> pkt.pversion = initial_version  #version 30
    } else {
        require pkt.long -> pkt.pversion = final_version
    };
}

before send_ack_eliciting_initial_packet(src:ip.endpoint,dst:ip.endpoint,pkt:quic_packet) {
    if _generating {
        var tp := trans_params(the_cid);
        if version_negociated {
            require src = client_vn;
        } else {
            if ~disable_active_migration.is_set(tp) {
                if ~migration_done | allowed_multiple_migration { 
                    #only one migration
                    require src = client.ep | src = client_alt;
                } else {
                    require src = client_alt;
                }
            } else {
                require src = client.ep;
            }
        };
        require dst = server.ep;
        #require pkt.token.end = 0; 
        if pkt.ptype = quic_packet_type.initial & retry_recv(pkt.src_cid) & ~zero_length_token {
            require pkt.token = retry_token(pkt.src_cid); # TODO new_token
        } else {
            require pkt.token.end = 0; 
        };
    };
    if final_version = 0x00000000 {
        #require pkt.long -> pkt.pversion = 0xff00001d  #version 29
        #require pkt.long -> pkt.pversion = 0xff000020  #version 32
        #require pkt.long -> pkt.pversion = 0xff00001e  #version 30
        require pkt.long -> pkt.pversion = initial_version  #version 30
    } else {
        require pkt.long -> pkt.pversion = final_version
    };
}

before send_ack_eliciting_application_packet(src:ip.endpoint,dst:ip.endpoint,pkt:quic_packet) {
    if _generating {
        var tp := trans_params(the_cid);
        if version_negociated {
            require src = client_vn;
        } else {
            if ~disable_active_migration.is_set(tp) {
                if ~migration_done | allowed_multiple_migration { 
                    #only one migration
                    require src = client.ep | src = client_alt;
                } else {
                    require src = client_alt;
                }
            } else {
                require src = client.ep;
            }
        };
        require dst = server.ep;
        #require pkt.token.end = 0; 
        if pkt.ptype = quic_packet_type.initial & retry_recv(pkt.src_cid) & ~zero_length_token {
            require pkt.token = retry_token(pkt.src_cid); # TODO new_token
        } else {
            require pkt.token.end = 0; 
        };
    };
    if final_version = 0x00000000 {
        #require pkt.long -> pkt.pversion = 0xff00001d  #version 29
        #require pkt.long -> pkt.pversion = 0xff000020  #version 32
        #require pkt.long -> pkt.pversion = 0xff00001e  #version 30
        require pkt.long -> pkt.pversion = initial_version  #version 30
    } else {
        require pkt.long -> pkt.pversion = final_version
    };
}


# The actions listed below will be generated by the mirror.
#
# Note: some of these are commented out. They are added in other files
# that include this one.

export frame.ack.handle
export frame.stream.handle
export frame.crypto.handle
export frame.path_challenge.handle
# export frame.path_response.handle
export packet_event
export client_send_event
export tls_recv_event
#export frame.new_connection_id.handle
#export frame.retire_connection_id.handle
#export frame.rst_stream.handle
#export frame.max_stream_id.handle
# export frame.connection_close.handle # TODO
#export frame.max_stream_data.handle
#export frame.max_data.handle

# import action show_is_sleep_fake_timeout(is_sleep_fake_timeout:bool)

import action show_last_pkt_num_for_cid(pktnum:pkt_num,dst_cid:cid,ptype:quic_packet_type, div:pkt_num)
export send_ack_eliciting_handshake_packet
export send_ack_eliciting_initial_packet
export send_ack_eliciting_application_packet
export frame.ping.handle

export action _finalize = {
    # chris TODO 
    require is_no_error;
    require conn_total_data(the_cid) > 0;
    require ~connection_closed; # silent close
    require ~ (received_packets_time_sent(quic_packet_type.one_rtt, streampos_to_seqnum(received_packets_end(quic_packet_type.one_rtt))) - milliseconds_to_microseconds(sleep_start) > max_idle_timeout_used + 0x10);
    require received_packets_time_sent(quic_packet_type.one_rtt, streampos_to_seqnum(received_packets_end(quic_packet_type.one_rtt))) - milliseconds_to_microseconds(sleep_start) <= max_idle_timeout_used + 0x10;
    #call 
}