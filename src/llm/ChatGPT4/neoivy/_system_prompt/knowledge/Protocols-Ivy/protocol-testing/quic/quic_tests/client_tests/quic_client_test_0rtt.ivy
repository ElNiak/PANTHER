#lang ivy1.7

include ivy_quic_server_behavior

after init {
    # server_port := 4444;
    # server_port_alt := 4444;
    # the_cid := 0x1; # zero length => 0x1 mvfst and other 0x0
    zero_rtt_allowed := true;
    zero_rtt_client_test := true;
}

after init {
    initial_max_stream_data_uni_server_0rtt := 5000;
    initial_max_stream_data_bidi_remote_server_0rtt := 5000;
    initial_max_data_server_0rtt := 5000;
    initial_max_stream_data_bidi_local_server_0rtt := 5000;
    initial_max_stream_id_bidi_server_0rtt := 200;
    active_connection_id_limit_server_0rtt := 200;
}

#
# We fix the initial transport parameters here. TODO: In principle these
# parameters should be selected randomly by some event.
#

include ivy_quic_server_0rtt_tp

# The actions listed below will be generated by the mirror.
#
# Note: some of these are commented out. They are added in other files
# that include this one.

export frame.ack.handle
export frame.stream.handle
export frame.crypto.handle
export frame.path_response.handle
export frame.handshake_done.handle
export packet_event
export client_send_event
export tls_recv_event
#export frame.new_connection_id.handle
#export frame.retire_connection_id.handle
#export frame.rst_stream.handle
#export frame.max_stream_id.handle
#export frame.connection_close.handle
#export frame.max_stream_data.handle

# Final check
#
# When the test is complete, the tester calls the special action `_finalize`.
# We use this action to make some heuristic checks, for example that some
# data was actually received from the server. We can add advice to this
# action with additional checks.

export action _finalize = {
    # chris TODO 
    require is_no_error;
    require last_zrtt_pkt.end > 0;
    require conn_total_data(the_cid) > 0;
}


