#lang ivy1.7

include order
include quic_infer
include file
include ivy_quic_shim_server_timeout
include quic_locale
include ivy_quic_server_behavior

#
# We fix the initial transport parameters here. TODO: In principle these
# parameters should be selected randomly by some event.
#

include ivy_quic_server_standard_tp
include quic_time

after init {
    call time_api.c_timer.start;
    call time_api.c_timer.start;
}
# Note, we don't need a tester precondition for packet protocol
# events, since the frame queue for the server end will always be
# empty. This is because server frames are only inferred in response to
# a server packet event, which immediately dequeues them.

export frame.ack.handle
export frame.stream.handle
export frame.crypto.handle
export frame.path_response.handle #challenge ?
export frame.handshake_done.handle
#attribute frame.handshake_done.handle.weight = "0.02"
export packet_event
export client_send_event
export tls_recv_event

relation slept

after init {
    slept := false;
}

before packet_event(src:ip.endpoint,dst:ip.endpoint,pkt:quic_packet) {
    if ~_generating {
        if last_pkt_num(the_cid,quic_packet_type.one_rtt) > 5  & ~slept & handshake_done_send{  # 
            var idle_timeout_forced := max_idle_timeout_used;
            call sleep_event(idle_timeout_forced);
            var force_packet_retransmission_timeout := max_ack_delay_tp;
            call time_api.c_timer.sleep(microseconds_to_milliseconds(idle_timeout_forced));
            slept := true;
        }
    }
    # else {
    #     if last_pkt_num(the_cid,pkt.ptype) = 5  & ~slept {  # 
    #         call sleep_event;
    #         var idle_timeout_forced := max_idle_timeout_used;
    #         var force_packet_retransmission_timeout := max_ack_delay_tp;
    #         call time_api.c_timer.sleep(microseconds_to_milliseconds(idle_timeout_forced));
    #         slept := true;
    #     }
    # }
}

export send_ack_eliciting_handshake_packet
export send_ack_eliciting_initial_packet
export frame.ping.handle

export action _finalize = {
    # chris TODO 
    require is_no_error;
    require conn_total_data(the_cid) > 0;
    require ~connection_closed; # silent close
    #call 
}