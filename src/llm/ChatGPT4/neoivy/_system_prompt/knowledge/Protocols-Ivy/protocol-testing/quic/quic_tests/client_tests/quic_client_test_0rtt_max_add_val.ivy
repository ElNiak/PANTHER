#lang ivy1.7

include ivy_quic_server_behavior

after init {
    #the_cid := 0x0; # zero length => 0x1 mvfst and other 0x0
    client_addr := 0;
    client_port := 0;
    client_port_alt := 0;
}

#
# We fix the initial transport parameters here. TODO: In principle these
# parameters should be selected randomly by some event.
#
after init {
    initial_max_stream_data_uni_server_0rtt := 5000;
    initial_max_stream_data_bidi_remote_server_0rtt := 5000;
    initial_max_data_server_0rtt := 5000;
    initial_max_stream_data_bidi_local_server_0rtt := 5000;
    initial_max_stream_id_bidi_server_0rtt := 200;
    active_connection_id_limit_server_0rtt := 200;
}

include ivy_quic_server_0rtt_tp


# Generate max_streams frames only for the client.

before frame.max_streams_bidi.handle(f:frame.max_streams_bidi,scid:cid,dcid:cid) {
    if _generating {
        require client.ep.addr ~= 0;
        require scid = the_cid;
        require f.id = 100;
    }
}

# Generate connection_close frames only for the client.

before frame.connection_close.handle(f:frame.connection_close,scid:cid,dcid:cid) {
    if _generating {
        require conn_total_data(the_cid) > 30; # tricks
        require last_pkt_num(the_cid,quic_packet_type.one_rtt) > 5;
        require client.ep.addr ~= 0;  
        require tls_handshake_finished;
        require f.err_code = 0;   
        require f.frame_type = 0;    
        require scid = the_cid;
    } else {
        require is_no_error;
        call _finalize;
    }
}

# Generate connection_close frames only for the client.

before frame.application_close.handle(f:frame.application_close,scid:cid,dcid:cid,e:quic_packet_type) {
    if _generating {
        require conn_total_data(the_cid) > 30; # tricks
        require last_pkt_num(the_cid,quic_packet_type.one_rtt) > 5;
        require client.ep.addr ~= 0;  
        require tls_handshake_finished;
        require f.err_code = 0;   
        require scid = the_cid;
        require e = quic_packet_type.one_rtt;
    } else {
        require is_no_error;
        call _finalize;
        #call net.close(endpoint_id.client,sock);
    }
}


before frame.max_stream_data.handle(f:frame.max_stream_data,scid:cid,dcid:cid,e:quic_packet_type) {
    if _generating {
        require f.pos = 32 | f.pos = 16;
    }
}

before frame.stream_data_blocked.handle(f:frame.stream_data_blocked,scid:cid,dcid:cid,e:quic_packet_type) {
    if _generating {
        require f.pos > 32;
    }
}

before frame.max_data.handle(f:frame.max_data,scid:cid,dcid:cid,e:quic_packet_type) {
    if _generating {
        require f.pos = 2048 | f.pos = 40;
    }
}

before frame.new_token.handle(f:frame.new_token,scid:cid,dcid:cid) {
    if _generating {
        require client.ep.addr ~= 0;
        require scid = the_cid;
        require f.length = 1; # TODO bug for > 1
    }
}

export frame.ack.handle
export frame.stream.handle
export frame.crypto.handle
export frame.path_response.handle #challenge ?
export frame.handshake_done.handle
#attribute frame.handshake_done.handle.weight = "0.02"
export packet_event
export client_send_event
export tls_recv_event
#export frame.rst_stream.handle
#export frame.max_streams_bidi.handle
#export frame.connection_close.handle # for quinn no closing co
#export frame.max_stream_data.handle

#export frame.max_streams.handle
#export frame.max_stream_data.handle
#export frame.max_data.handle
#export frame.stream_blocked.handle
#export frame.rst_stream.handle
# attribute frame.rst_stream.handle.weight = "0.02"
# attribute frame.max_streams.handle.weight = "0.02"
# attribute frame.max_stream_data.handle.weight = "0.02"
# attribute frame.max_data.handle.weight = "0.02"


#export frame.connection_close.handle
# attribute frame.connection_close.handle.weight = "0.02"
#if zero_rtt_server_test {
#export frame.application_close.handle # TODO need to be close for picoquic, but not for quant
#}
#attribute frame.application_close.handle.weight = "0.02"

export frame.new_token.handle



#export frame.ping.handle
#attribute frame.ping.handle.weight = "0.02"

# Final check
#
# When the test is complete, the tester calls the special action `_finalize`.
# We use this action to make some heuristic checks, for example that some
# data was actually received from the server. We can add advice to this
# action with additional checks.

export action _finalize = {
    require is_no_error;
    require conn_total_data(the_cid) > 0;
    #call net.close(endpoint_id.client,sock);
}
