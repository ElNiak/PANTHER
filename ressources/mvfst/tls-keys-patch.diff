diff --git a/quic/fizz/client/handshake/FizzClientHandshake.cpp b/quic/fizz/client/handshake/FizzClientHandshake.cpp
index fb08a771..c8767aa0 100644
--- a/quic/fizz/client/handshake/FizzClientHandshake.cpp
+++ b/quic/fizz/client/handshake/FizzClientHandshake.cpp
@@ -266,11 +266,13 @@ class FizzClientHandshake::ActionMoveVisitor {
             client_.computeCiphers(
                 CipherKind::HandshakeWrite,
                 folly::range(secretAvailable.secret.secret));
+            FizzClientHandshake::writeToKeylogFile("CLIENT_HANDSHAKE_TRAFFIC_SECRET", client_.state_.clientRandom().value(), secretAvailable.secret.secret);
             break;
           case fizz::HandshakeSecrets::ServerHandshakeTraffic:
             client_.computeCiphers(
                 CipherKind::HandshakeRead,
                 folly::range(secretAvailable.secret.secret));
+            FizzClientHandshake::writeToKeylogFile("SERVER_HANDSHAKE_TRAFFIC_SECRET", client_.getFizzState().clientRandom().value(), secretAvailable.secret.secret);
             break;
         }
         break;
@@ -280,11 +282,13 @@ class FizzClientHandshake::ActionMoveVisitor {
             client_.computeCiphers(
                 CipherKind::OneRttWrite,
                 folly::range(secretAvailable.secret.secret));
+            FizzClientHandshake::writeToKeylogFile("CLIENT_TRAFFIC_SECRET_0", client_.state_.clientRandom().value(), secretAvailable.secret.secret);
             break;
           case fizz::AppTrafficSecrets::ServerAppTraffic:
             client_.computeCiphers(
                 CipherKind::OneRttRead,
                 folly::range(secretAvailable.secret.secret));
+            FizzClientHandshake::writeToKeylogFile("SERVER_TRAFFIC_SECRET_0", client_.state_.clientRandom().value(), secretAvailable.secret.secret);
             break;
         }
         break;
@@ -338,4 +342,23 @@ void FizzClientHandshake::processActions(fizz::client::Actions actions) {
   }
 }
 
+void FizzClientHandshake::writeToKeylogFile(std::string label, std::array<uint8_t, 32> random, std::vector<uint8_t> secret) {
+    static int n = 0;
+    if (!keylogFile.is_open()) {
+        auto keylog_filename = getenv("SSLKEYLOGFILE");
+        if(keylog_filename) {
+            FizzClientHandshake::keylogFile.open(keylog_filename);
+        }
+    }
+    if (FizzClientHandshake::keylogFile.is_open()) {
+        n++;
+        FizzClientHandshake::keylogFile << fmt::format("{0} {1} {2}\n", label, folly::hexlify(folly::range(random)), folly::hexlify(folly::range(secret)));
+    }
+    if (n == 4) {
+        keylogFile.close();
+    }
+}
+
+std::ofstream FizzClientHandshake::keylogFile;
+
 } // namespace quic
diff --git a/quic/fizz/client/handshake/FizzClientHandshake.h b/quic/fizz/client/handshake/FizzClientHandshake.h
index 0d14ac54..dc86b3a3 100644
--- a/quic/fizz/client/handshake/FizzClientHandshake.h
+++ b/quic/fizz/client/handshake/FizzClientHandshake.h
@@ -12,6 +12,7 @@
 #include <quic/fizz/handshake/FizzCryptoFactory.h>
 
 #include <fizz/client/ClientProtocol.h>
+#include <fstream>
 
 namespace quic {
 
@@ -65,6 +66,10 @@ class FizzClientHandshake : public ClientHandshake {
   FizzCryptoFactory cryptoFactory_;
 
   std::shared_ptr<FizzClientQuicHandshakeContext> fizzContext_;
+
+  static std::ofstream keylogFile;
+
+  static void writeToKeylogFile(std::string label, std::array<uint8_t, 32> random, std::vector<uint8_t> secret);
 };
 
 } // namespace quic
