{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"sources/","title":"\ud83d\udc2f PANTHER - Protocol formal Analysis and formal Network Threat Evaluation Resource \ud83d\udc2f","text":"<pre><code>@@@@@@@@@@@@@@@@&amp;&amp;@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@&amp;&amp;@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\n@@@@@@@@@@@@@@@: .~JG#&amp;@@@@@@@@@@@@@@@@@@@@@@@@@@&amp;BJ~. .&amp;@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\n@@@@@@@@@@@@@@G   .::: :?5G57~:.........:^!YG5J^.:^:.   5@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\n@@@@@@@@@@@@@@G :.  :~                           ^:  .: Y@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\n@@@@@@@@@@@@@@&amp; .:  ^    .                   .    ^  :. #@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\n@@@@@@@@@@@@@@@7   .:  .     .^.        ~:     .  ..   ~@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\n@@@@@@@@@@@@@@@@7      ~~^.  ^7^::~ ~::^7^  .^~~.     !&amp;@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\n@@@@@@@@@@@@@@@@@7     :!~??~. :?!: .!?^ .~??~~^     :@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\n@@@@@@@@@@@@@@@@J       .Y5~7J7..^   ^..7J?^YY.       ^&amp;@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\n@@@@@@@@@@@@@@@^   .   . !P7!^. .~. .^.  ~7!5~ .   :  ..B@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\n@@@@@@@@@@@@@@:.  :~   !^  .:^^  .^.^.  ^^:.  ^J.  ^^  :.#@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\n@@@@@@@@@@@@@P.^  ?^    ..:: :^.       .^^ .:.:.   .J  :~!@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\n@@@@@@@@@@@@@Y^^  5!    :??.  7!!?7!7J7!?.  ??^    ^5. :!!@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\n@@@@@@@@@@@@@#.!  Y5.   :J:^:  ..~P75!..  :^:?^   .YY  ~:G@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\n@@@@@@@@@@@@@@?:. .YY7^. ~^^^^    ...    :^^^!  .!5Y: .: P@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\n@@@@@@@@@@@@@@@...  J557 .7:.     .:..    .:7. !5Y~  .^  .@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\n@@@@@@@@@@@@@@5  ^7.~55.... ^B5:!?YY57!^J#! ....5. .77 .. Y@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\n@@@@@@@@@@@@@P :~ .7Y55.  . !@&amp;:!!^.^!!:#@? .  ~Y7JJ^  :Y. #@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\n@@@@@@@@@@@@J .YJ   .^7:    .^G?5YJ^?J5?G~.    ~~^.     ^5!.?@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\n@@@@@@@@@@@! :Y!             .~~!YYJYY7~~.         .     J5Y.^@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\n@@@@@@@@@@7 ^5~  :~         .JG!^~:.:~~~GY.         7!:^?5555 .@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\n@@@@@@@@@5  Y5  .P~        .5!!: ^~:~^ .!~Y.         ~J555555^ ~@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\n@@@@@@@@@   Y5!:?57         ?^  .::.::.  :J.            .:!55^  B@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\n@@@@@@@@G   .?5555~          :!^.      .~:        J:       :5^  7@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\n@@@@@@@@Y    .555^      ..     .^~~~~^:.          :~~:.     ~7  !@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\n@@@@@@@#      !P7     .!J^                            :?^    :. .@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\n@@@@@@@.       ~?    .Y^                         ....  :^        !@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\n@@@@@@P     .   ..   ::                      ^~::....::^^.        .&amp;@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\n@@@@@~     ~J        !                  .:::^.           ^^.       .&amp;@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\n@@@&amp;.      ~57.     !7        .....::::::.           .:             ?@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\n@@@.         .^~^   :.     .!?#^ .:...                              .@@@@@@@@@@@@@@@@@@@@@@@@@@#J7P@\n@@!             :J:        :~G^ .?#~   .:..         :...             @@@@@@@@@@@@@@@@@@@@&amp;G5J~.    P\n@&amp;               :5.        .. .7#!  .^^~   .:.    ^^                @@@@@@@@@@@@@@@@#7.           G\n@Y              .757            !    .?&amp;#..:.    .~     ..           &amp;@@@@@@@@@@@@@#:            .P@\n@J              ....!J?^             ^G:  ~GG  .::      .:^:.        &amp;@@@@@@@@@@@@5         .^75#@@@\n@@:..                :~?!::.         .    PJ^..            ...      Y@@@@@@@@@@@@&amp;        :#@@@@@@@@\n@@@^ .                :   ~~...          ..                      JG#@@@@@@@@@@@@@#        &amp;@@@@@@@@@\n@@@@?.                ..:.5&amp;G.:                                  G@@@@@@@@@@@@@@@@:       &amp;@@@@@@@@@\n@@@@@&amp;5~.         ::  .  :.:J?.                                 ^ .~P&amp;@@@@@@@@@@@@&amp;       7@@@@@@@@@\n@@@@@@@@@&amp;^       .  .~.                                        ^   .~J#@@@@@@@@@@@B    .  ?@@@@@@@@\n@@@@@@@@@@B        : ^G#B! .                    5&amp;.             ^     :^7&amp;@@@@@@@@@@J   :.  P@@@@@@@\n@@@@@@@@@@@Y   .^   :.  .7PP&amp;B!                 @@J^.          ^        ::B@@@@@@@@@&amp;   .   :@@@@@@@\n@@@@@@@@@@@@&amp;. :^  .    :&amp;@@@@@P.               ^&amp;P.~         ~~GY^.     ..P@@@@@@@@J    !. .@@@@@@@\n@@@@@@@@@@@@@7     G&amp;B! J@@@@@@@@?                : .^:.     ~~B@@@5.     . :JGBBBY:    ^P: J@@@@@@@\n@@@@@@@@@@@@@P.  ~7: :5G5G@@@@@@@@@Y            .:    ~..    .:5@@@@&amp;~    ..           .Y? ~@@@@@@@@\n@@@@@@@@@@@@@@&amp;? .YB?^G@@@@@@@@@@@@@&amp;?           :    7        .@@@@@@G:   .^:.      .~J!.5@@@@@@@@@\n@@@@@@@@@@@@@@@@&amp;P7^?G5@@@@@@@@@@@@@@@&amp;Y~:::~: .::    !         P@@@@@@@B~    :^^^^~!!~~5@@@@@@@@@@@\n@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@&amp;5!:   .!         .&amp;@@@@@@@@@#57~^^^~~7Y#@@@@@@@@@@@@@\n@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@#!  ~    .  .   !@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\n@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@&amp;7..        :! #@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\n@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@!!:.  .: :^~ &amp;@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\n@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@&amp;?.^?7~7YJ. !@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\n@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@&amp;. .^. ::  .7&amp;@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\n@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@# :.        :#@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\n@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@P 7.    ..!~ ?@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\n@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@J.~         5@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\n@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@#!   ..:^~G@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\n@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@&amp;BPYYG&amp;@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\n                                            Made with \u2764\ufe0f \n                                For the Community, By the Community   \n\n                                ###################################\n\n                                        Made by ElNiak\n                linkedin  - https://www.linkedin.com/in/christophe-crochet-5318a8182/ \n                                Github - https://github.com/elniak\n</code></pre>"},{"location":"sources/#overview","title":"\ud83d\ude80 Overview","text":"<p>PANTHER combines advanced techniques in network protocol verification, integrating the Shadow network simulator with the Ivy formal verification tool. This powerful synergy allows for the detailed examination of time properties in network protocols. A specialized time module enhances Ivy's capabilities, enabling it to handle complex quantitative-time properties with greater precision.</p> <p>PANTHER's effectiveness is demonstrated through its application to the QUIC protocol. By refining QUIC's formal specification in Ivy, PANTHER not only verifies essential aspects of the protocol but also identifies real-world implementation errors, showcasing its practical utility. This innovative integration paves the way for more thorough, efficient, and precise protocol testing and verification.</p>"},{"location":"sources/#multi-protocol-support","title":"\u2795 Multi-Protocol Support","text":"<p>PANTHER supports multiple protocols. To add new protocol specifications, place them in the <code>protocols</code> directory following the existing structure. Currently supported protocols include: - [X] QUIC - [X] MiniP - [ ] BGP - [ ] CoAP</p>"},{"location":"sources/#multi-implementation-support","title":"\u2795 Multi-Implementation Support","text":"<p>PANTHER supports multiple implementations. To add new implementations, place them in the <code>implementations</code> directory following the existing structure.</p>"},{"location":"sources/#advanced-persistent-threat-simulation","title":"\u2795 Advanced Persistent Threat Simulation","text":"<p>PANTHER can simulate advanced persistent threats (APTs) in network protocols. By leveraging the Shadow network simulator, PANTHER models and analyzes the behavior of APTs in a controlled environment, providing valuable insights into potential vulnerabilities and attack vectors. Supported simulations include: - [X] QUIC - [X] MiniP</p>"},{"location":"sources/#installation","title":"\ud83d\udd27 Installation","text":"<p>Note, before implementation were added as submodule. Now we only consider Docker containers installation. (To be updated)</p> Click to expand  ### :computer: Local Installation (Not Recommended)   Click to expand  See Dockerfile for dependencies and commands    ### :whale: Single implementation    Click to expand <pre><code># For a full installation including all dependencies and configurations:\nIMPLEM=\"picoquic\" make build-docker\n</code></pre>   ### :whale: WebApp (Recommended)    <pre><code># For first installation \nmake install\n\n# For modification: \n## For major update in ivy:\nmake build-docker-compose-full\n## For a minor update in some implementation:\nmake build-docker-compose\n</code></pre>   ### :warning: Clean Up   Click to expand <pre><code># To clean Docker images and system:\nmake clean-docker-full\n</code></pre>"},{"location":"sources/#usage","title":"\ud83d\udcbb Usage","text":"Click to expand  ### :book: Tests parameters   Click to expand  *Global parameters:*  | Argument               | Description                                                                                               | Default Value           | |------------------------|-----------------------------------------------------------------------------------------------------------|-------------------------| | `--dir`                | Output directory to create                                                                                | `temp/`                 | | `--build_dir`          | Build directory to create                                                                                 | `build/`                | | `--tests_dir`          | Tests directory to create                                                                                 | `build/`                | | `--iter`               | Number of iterations per test                                                                             | `1`                     | | `--internal_iteration` | Number of Ivy iterations per test                                                                         | `100`                   | | `--getstats`           | Print all stats                                                                                           | `True`                  | | `--compile`            | Compile Ivy tests                                                                                         | `True`                  | | `--run`                | Launch or not the tested implementation                                                                   | `True`                  | | `--timeout`            | Timeout                                                                                                   | `100 sec`               | | `--keep_alive`         | Keep alive Ivy implementation                                                                             | `False`                 | | `--update_ivy`         | Update `` folder for picoTLS files of Ivy (defined by g++)                                       | `True`                  | | `--docker`             | Use docker                                                                                                | `True`                  | | `--gperf`              | gperf                                                                                                     | `False`                 | | `--gdb`                | Use gdb to debug                                                                                          | `False`                 | | `--memprof`            | Perform memory profiling                                                                                  | `False`                 | | `--localhost`          | Use localhost network                                                                                     | `True`                  | | `--vnet`               | Use virtual network                                                                                       | `False`                 | | `--shadow`             | Use Shadow simulator                                                                                      | `False`                 | | `--webapp`             | WebApp UI                                                                                                 | `False`                 | | `--worker`             | Worker server mode                                                                                        | `False`                 |  *Simulator parameters:* | Argument               | Description                                                                                               | Default Value           | |------------------------|-----------------------------------------------------------------------------------------------------------|-------------------------| | `--loss`               | Shadow: loss percentage                                                                                   | `0`                     | | `--jitter`             | Shadow: jitter in milliseconds                                                                            | `10`                    | | `--latency`            | Shadow: latency in milliseconds                                                                           | `10`                    |  *QUIC parameters:* | Argument               | Description                                                                                               | Default Value           | |------------------------|-----------------------------------------------------------------------------------------------------------|-------------------------| | `--nb_request`         | Number of request send by implementations (not always possible)                                           | `10`                    | | `--initial_version`    | Initial version for protocol testing                                                                      | `1`                     | | `--nclient`            | Number of clients per test for server implementation                                                      | `1`                     | | `--alpn`               | Application-Layer Protocol Negotiation options                                                            | `hq-interop`, `hq-29`, `hq-28` |  *BGP parameters:*  *CoAP parameters:*     ### :computer: Single implementation (Command Line)   Click to expand <pre><code># Start a Docker container for interactive Bash access\nIMPLEM=\"picoquic\" make start-bash\npython3 panther.py --mode client --categories all --update_include_tls \\\n        --timeout 180 --implementations $(IMPLEM) --iter $(ITER) --compile  --initial_version 29 --alpn hq-29  \n# Example: Runs a Docker container with 'picoquic' for interactive Bash access\n</code></pre>   ### :whale: WebApp (Recommended)   Update the `docker-compose.yml` file with the protocol implementation and run the following command:   <pre><code># Compose the full Docker environment for all implementations\nmake compose\n</code></pre>   Then go to `172.27.1.10` to access the WebApp."},{"location":"sources/#tutorial","title":"\ud83d\udcd6 Tutorial","text":"Click to expand  ### :computer: WebApp (Recommended)  **Introduction**:  This quick guide assists you in using the Ivy QUIC web application for testing QUIC implementations.  First go to: `http://172.27.1.10/index.html`  **Configuration Steps**:  1. **Choose Protocol**: Start by selecting the protocol (QUIC, MINIP, BGP) you want to test.  ![Choose Protocol](readme-res/2.png)  2. **Set Network Type**: Opt for localhost, vnet, or shadow based on your network testing environment.  3. **Global Parameters**: Define directories for output, build, and tests using the 'Browse...' options and set the iteration count.  4. **Debugging Options**: Toggle performance and memory profiling tools like gperf, gdb, and memprof as needed.  ![Set Global parameters](readme-res/1.png)  5. **Adjust Test Settings**: Customize Shadow parameters such as loss, jitter, and latency for simulation accuracy.  ![Adjust Test Settings](readme-res/3.png)  6. **Protocol custom configuration**: Set the number of requests, initial version, number of clients, and ALPN for, e.g QUIC tests.  ![QUIC Verification](readme-res/4.png)  7. **Select Tests**: Choose from server, client, and MIM tests to target specific aspects of the QUIC protocol.  ![Select Tests](readme-res/5.png)  8. **Implementation Testing**: Pick the QUIC implementation you want to test from the available options.  9. **Start Experiments**: Hit 'Start Experiments' to begin the testing process with your configured settings.  ![Implementation Testing](readme-res/6.png)  **Running the Tests**:  After setup, monitor the tests' progress and analyze the results. Make adjustments and re-run as necessary to ensure thorough testing.  Refer to the in-app documentation for detailed instructions or contact support for troubleshooting assistance.  **Note that the similar approach can be used in the command line.**   ### :computer: Adding new protocol   Click to expand  1. Add the corresponding configuration files in `src/panther/configs//`:     * Host related configurations:         * `src/panther/configs//implem-server/`: configuration files for the server implementation         * `src/panther/configs//implem-client/`: configuration files for the client implementation         * (`src/panther/configs//implem-/`: configuration files for the  implementation)     * Protocol related configurations:         * `src/panther/configs//[default_]_config.ini`         * `src/panther/configs//default__implem.ini` 2. Create a folder in `panther/panther_worker/app/implementations/-implementations/` for the new protocol implementation 3. Add in `src/panther/panther.py` and in `src/panther/panther_runner/panther__runner.py` the new protocol implementation Runner. 4. Add in `src/panther/panther_tester/panther__tester.py` the new protocol implementation Tester. 5. Add in `src/panther/panther_stats/panther__stats.py` the new protocol implementation stats collector.    ### :computer: Adding new protocol implementation   Click to expand  1. Create the corresponding Dockerfile in `src/containers/Dockerfile.`, it should run over Ubuntu 20.04  <pre><code>ARG image\nFROM $image:latest\nADD panther/panther_worker/app/implementations/&lt;protocol&gt;-implementations/&lt;implem&gt; /PANTHER/implementations/&lt;protocol&gt;-implementations/&lt;implem&gt;\nWORKDIR /PANTHER/implementations/&lt;protocol&gt;-implementations/&lt;implem&gt;/\n\n### Install dependencies\n\nWORKDIR /PANTHER\n</code></pre>   2. Add the corresponding configuration file in `src/panther/configs//.../.ini` 3. Build the docker image with `IMPLEM= make build-docker`     * Also update the Makefile to add the new implementation (commit, building, etc) 4. Add the new implementation in `docker-compose.yml` file such as:  <pre><code>  &lt;implem&gt;-ivy:\n    hostname: &lt;implem&gt;-ivy\n    container_name: &lt;implem&gt;-ivy\n    image: \"&lt;implem&gt;-ivy:latest\"\n    command: python3 panther.py --update_ivy --getstats --worker --compile  --docker\n    ports:\n      - \"&lt;new_p\u00f4rt&gt;:80\"\n    volumes:\n      - ${PWD}/src/webapp/panther_client.py:/PANTHER/webapp/panther_client.py\n      - ${PWD}/src/panther/panther.py:/PANTHER/panther.py\n      - ${PWD}/src/panther/res/shadow/shadow_client_test.yml:/PANTHER/topo.gml\n      - ${PWD}/src/panther/res/shadow/shadow_client_test.yml:/PANTHER/shadow_client_test.yml\n      - ${PWD}/src/panther/res/shadow/shadow_server_test.yml:/PANTHER/shadow_server_test.yml\n      - ${PWD}/src/panther/res/shadow/shadow_client_test_template.yml:/PANTHER/shadow_client_test_template.yml\n      - ${PWD}/src/panther/res/shadow/shadow_server_test_template.yml:/PANTHER/shadow_server_test_template.yml\n      - ${PWD}/data/tls-keys:/PANTHER/tls-keys\n      - ${PWD}/data/tickets:/PANTHER/tickets\n      - ${PWD}/data/qlogs:/PANTHER/qlogs\n      - ${PWD}/src/panther/panther_utils/:/PANTHER/panther_utils/\n      - ${PWD}/src/panther/panther_stats/:/PANTHER/panther_stats/\n      - ${PWD}/src/panther/panther_runner/:/PANTHER/panther_runner/\n      - ${PWD}/src/panther/panther_tester/:/PANTHER/panther_tester/\n      - ${PWD}/src/panther/ivy_utils/:/PANTHER/ivy_utils/\n      - ${PWD}/src/panther/logger/:/PANTHER/logger/\n      - ${PWD}/src/panther/argument_parser/:/PANTHER/argument_parser/\n      - ${PWD}/src/panther/configs/:/PANTHER/configs/\n      - ${PWD}/src/Protocols-Ivy/protocol-testing/:/PANTHER/Protocols-Ivy/protocol-testing/\n      - ${PWD}/src/Protocols-Ivy/doc/examples/quic:/PANTHER/Protocols-Ivy/doc/examples/quic\n      - ${PWD}/src/Protocols-Ivy/ivy/:/PANTHER/Protocols-Ivy/ivy/\n      - ${PWD}/src/Protocols-Ivy/ivy/include/1.7:/PANTHER/Protocols-Ivy/ivy/include/1.7\n      - /tmp/.X11-unix:/tmp/.X11-unix\n    networks:\n      net:\n        ipv4_address: 172.27.0.&lt;TODO&gt;\n    privileged: true\n    security_opt:\n      - seccomp:unconfined\n    cap_add:\n      - NET_ADMIN\n    tmpfs:\n      - /dev/shm:rw,nosuid,nodev,exec,size=1024g\n    environment:\n      - DISPLAY=${DISPLAY}\n      - XAUTHORITY=~/.Xauthority\n      - ROOT_PATH=${PWD} \n      - MPLBACKEND='Agg'\n    restart: always\n    devices:\n      - /dev/dri:/dev/dri\n    depends_on:\n      - ivy-standalone\n</code></pre>   ### :computer: Ivy Model Creation   Click to expand  Follow these steps to create an Ivy model for protocol verification:  1. **RFC Analysis**: Carefully read the RFC to identify the protocol components, such as packet types and endpoints.  2. **Modeling Components**: Model the identified components without the requirements initially. Focus on their fields, potential events, etc.  3. **Serialization/Deserialization**: Implement serialization and deserialization functions for each event that could be transmitted over the network.  4. **Incorporating RFC Requirements**: Integrate the requirements specified in the RFC with the modeled components to complete the Ivy model."},{"location":"sources/#project-structure","title":"\ud83d\udcc2 Project Structure","text":"Click to expand  ### :open_file_folder: Directory Structure   Click to expand  The PANTHER project is organized into the following key directories:   <pre><code>PANTHER/\n\u2514\u2500\u2500 data/\n\u2514\u2500\u2500 src/\n    \u251c\u2500\u2500 Protocols-Ivy/\n    \u2502   \u251c\u2500\u2500 protocol-testing/\n    \u2502   \u2502   \u251c\u2500\u2500 quic/\n    \u2502   \u2502   \u251c\u2500\u2500 minip/\n    \u2502   \u2502   \u251c\u2500\u2500 coap/\n    \u2502   \u2502   \u2514\u2500\u2500 [other protocols]\n    \u2502   \u2514\u2500\u2500 ivy/[ivy-core]\n    \u251c\u2500\u2500 implementations/\n    \u2502   \u251c\u2500\u2500 quic-implementations/\n    \u2502   \u2502       \u251c\u2500\u2500 picoquic/\n    \u2502   \u2502       \u251c\u2500\u2500 aioquic/\n    \u2502   \u2502       \u251c\u2500\u2500 lsquic/\n    \u2502   \u2502       \u2514\u2500\u2500 [protocol implementations]\n    \u2502   \u2514\u2500\u2500 [other protocols]\n    \u251c\u2500\u2500 containers/\n    \u2502   \u2514\u2500\u2500 [Dockerfile definitions]\n    \u2514\u2500\u2500 panther/\n        \u251c\u2500\u2500 panther.py\n        \u251c\u2500\u2500 panther_runner/ [test preparation]\n        \u251c\u2500\u2500 ...\n        \u251c\u2500\u2500 panther_tester/ [test execution]\n        \u2514\u2500\u2500 configs/\n            \u2514\u2500\u2500 [configuration files]\n</code></pre>  - `data/`: Data directory for storing results and logs. - `panther/`: Main PANTHER module. - `Protocols-Ivy/`: Core of protocol specifications and testing. - `implementations/`: Various QUIC implementation modules. - `containers/`: Dockerfile definitions for different environments.     ### :framed_picture: Architecture Diagrams   Click to expand  | Docker Compose Architecture | Docker Container Internal Architecture | |:---------------------------:|:--------------------------------------:| | ![Docker Compose Architecture](readme-res/DALL\u00b7E%202024-01-05%2006.59.32%20-%20A%20diagram%20illustrating%20the%20architecture%20of%20a%20Docker%20Compose%20setup%20for%20the%20PFV%20(Protocols%20Formal%20Verification)%20project.%20It%20shows%20various%20Docker%20contain.png) | ![Docker Container Internal Architecture](readme-res/DALL\u00b7E%202024-01-05%2007.00.02%20-%20An%20internal%20architecture%20diagram%20of%20a%20Docker%20container%20for%20the%20PFV%20(Protocols%20Formal%20Verification)%20project.%20The%20diagram%20should%20show%20the%20layering%20of%20co.png) |"},{"location":"sources/#references","title":"\ud83d\udcd6 References","text":"Click to expand  For further reading and context on the topics and methodologies used in this tool, refer to the following articles: - Crochet, C., Rousseaux, T., Piraux, M., Sambon, J.-F., &amp; Legay, A. (2021). Verifying quic implementations using ivy. In *Proceedings of the 2021 Workshop on Evolution, Performance and Interoperability of QUIC*. [DOI](10.1145/3488660.3493803)  - Crochet, C., &amp; Sambon, J.-F. (2021). Towards verification of QUIC and its extensions. (Master's thesis, UCL - Ecole polytechnique de Louvain). Available at [UCLouvain](http://hdl.handle.net/2078.1/thesis:30559). Keywords: QUIC, Formal Verification, RFC, IETF, Specification, Ivy, Network.   For other useful resources, see the following:  - McMillan, K. L., &amp; Padon, O. (2018). Deductive Verification in Decidable Fragments with Ivy. In A. Podelski (Ed.), *Static Analysis - 25th International Symposium, SAS 2018, Freiburg, Germany, August 29-31, 2018, Proceedings* (pp. 43\u201355). Springer. [DOI](10.1007/978-3-319-99725-4_4) - [PDF](SAS18.pdf)  - Taube, M., Losa, G., McMillan, K. L., Padon, O., Sagiv, M., Shoham, S., Wilcox, J. R., &amp; Woos, D. (2018). Modularity for decidability of deductive verification with applications to distributed systems. In *Proceedings of the 39th ACM SIGPLAN Conference on Programming Language Design and Implementation, PLDI 2018, Philadelphia, PA, USA, June 18-22, 2018* (pp. 662\u2013677). ACM. [DOI](10.1145/3192366.3192414)  - Padon, O., Hoenicke, J., McMillan, K. L., Podelski, A., Sagiv, M., &amp; Shoham, S. (2018). Temporal Prophecy for Proving Temporal Properties of Infinite-State Systems. In *2018 Formal Methods in Computer Aided Design, FMCAD 2018, Austin, TX, USA, October 30 - November 2, 2018* (pp. 1\u201311). IEEE. [DOI](10.23919/FMCAD.2018.8603008) - [PDF](FMCAD18.pdf)  - Padon, O., McMillan, K. L., Panda, A., Sagiv, M., &amp; Shoham, S. (2016). Ivy: safety verification by interactive generalization. In *Proceedings of the 37th ACM SIGPLAN Conference on Programming Language Design and Implementation, PLDI 2016, Santa Barbara, CA, USA, June 13-17, 2016* (pp. 614\u2013630). ACM. [DOI](10.1145/2908080.2908118)  - McMillan, K. L. (2016). Modular specification and verification of a cache-coherent interface. In *2016 Formal Methods in Computer-Aided Design, FMCAD 2016, Mountain View, CA, USA, October 3-6, 2016* (pp. 109\u2013116). [DOI](10.1109/FMCAD.2016.7886668)  - McMillan, K. L., &amp; Zuck, L. D. (2019). Formal specification and testing of QUIC. In *Proceedings of ACM Special Interest Group on Data Communication (SIGCOMM\u201919)*. ACM. Note: to appear. [PDF](SIGCOMM19.pdf) - [Ivy Documentation](https://microsoft.github.io/ivy/) - [Ivy GitHub Repository](https://github.com/microsoft/ivy)"},{"location":"sources/panther/panther_cli/","title":"Panther cli","text":""},{"location":"sources/panther/panther_cli/#load_config","title":"load_config","text":"<pre><code>.load_config(\n   config_path\n)\n</code></pre>"},{"location":"sources/panther/panther_cli/#execute_command","title":"execute_command","text":"<pre><code>.execute_command(\n   command, tmux = None, cwd = None\n)\n</code></pre>"},{"location":"sources/panther/panther_cli/#get_current_branch","title":"get_current_branch","text":"<pre><code>.get_current_branch()\n</code></pre>"},{"location":"sources/panther/panther_cli/#start_tool","title":"start_tool","text":"<pre><code>.start_tool(\n   config, swarm = False\n)\n</code></pre>"},{"location":"sources/panther/panther_cli/#install_tool","title":"install_tool","text":"<pre><code>.install_tool(\n   config, branch = None\n)\n</code></pre>"},{"location":"sources/panther/panther_cli/#clean_tool","title":"clean_tool","text":"<pre><code>.clean_tool(\n   config\n)\n</code></pre>"},{"location":"sources/panther/panther_cli/#build_webapp","title":"build_webapp","text":"<pre><code>.build_webapp(\n   push = False\n)\n</code></pre>"},{"location":"sources/panther/panther_cli/#build_worker","title":"build_worker","text":"<pre><code>.build_worker(\n   implem, config, push = False\n)\n</code></pre>"},{"location":"sources/panther/panther_cli/#build_docker_visualizer","title":"build_docker_visualizer","text":"<pre><code>.build_docker_visualizer(\n   push = False\n)\n</code></pre>"},{"location":"sources/panther/panther_cli/#stop_tool","title":"stop_tool","text":"<pre><code>.stop_tool()\n</code></pre>"},{"location":"sources/panther/panther_cli/#start_bash_container","title":"start_bash_container","text":"<pre><code>.start_bash_container(\n   implem\n)\n</code></pre> <p>Start a Docker container with the specified parameters.</p>"},{"location":"sources/panther/panther_cli/#is_tmux_session","title":"is_tmux_session","text":"<pre><code>.is_tmux_session()\n</code></pre> <p>Check if running inside a tmux session.</p>"},{"location":"sources/panther/panther_cli_click/","title":"Panther cli click","text":""},{"location":"sources/panther/panther_cli_click/#log_docker_output","title":"log_docker_output","text":"<pre><code>.log_docker_output(\n   generator, task_name: str = 'dockercommandexecution'\n)\n</code></pre> <p>Log output to console from a generator returned from docker client :param Any generator: The generator to log the output of :param str task_name: A name to give the task, i.e. 'Build database image', used for logging</p>"},{"location":"sources/panther/panther_cli_click/#container_exists","title":"container_exists","text":"<pre><code>.container_exists(\n   client, container_name\n)\n</code></pre> <p>Check if the Docker container exists.</p>"},{"location":"sources/panther/panther_cli_click/#get_container_ip","title":"get_container_ip","text":"<pre><code>.get_container_ip(\n   client, container_name\n)\n</code></pre> <p>Get the IP address of the Docker container.</p>"},{"location":"sources/panther/panther_cli_click/#restore_hosts_file","title":"restore_hosts_file","text":"<pre><code>.restore_hosts_file()\n</code></pre> <p>Restore the original /etc/hosts file from the backup.</p>"},{"location":"sources/panther/panther_cli_click/#append_to_hosts_file","title":"append_to_hosts_file","text":"<pre><code>.append_to_hosts_file(\n   entry\n)\n</code></pre> <p>Append a new entry to the /etc/hosts file.</p>"},{"location":"sources/panther/panther_cli_click/#load_config","title":"load_config","text":"<pre><code>.load_config(\n   config_path\n)\n</code></pre>"},{"location":"sources/panther/panther_cli_click/#execute_command","title":"execute_command","text":"<pre><code>.execute_command(\n   command\n)\n</code></pre>"},{"location":"sources/panther/panther_cli_click/#get_current_branch","title":"get_current_branch","text":"<pre><code>.get_current_branch()\n</code></pre>"},{"location":"sources/panther/panther_cli_click/#network_exists","title":"network_exists","text":"<pre><code>.network_exists(\n   client, network_name\n)\n</code></pre> <p>Check if the Docker network exists.</p>"},{"location":"sources/panther/panther_cli_click/#create_network","title":"create_network","text":"<pre><code>.create_network(\n   client, network_name, gateway, subnet\n)\n</code></pre> <p>Create a Docker network with the specified gateway and subnet.</p>"},{"location":"sources/panther/panther_cli_click/#create_docker_network","title":"create_docker_network","text":"<pre><code>.create_docker_network()\n</code></pre>"},{"location":"sources/panther/panther_cli_click/#create_docker_compose_config","title":"create_docker_compose_config","text":"<pre><code>.create_docker_compose_config()\n</code></pre>"},{"location":"sources/panther/panther_cli_click/#start_tool","title":"start_tool","text":"<pre><code>.start_tool(\n   config_file\n)\n</code></pre>"},{"location":"sources/panther/panther_cli_click/#monitor_docker_usage","title":"monitor_docker_usage","text":"<pre><code>.monitor_docker_usage(\n   container_name, interval = 1.0, duration = 10.0\n)\n</code></pre> <p>Monitor the CPU and memory usage of a Docker container.</p> <p>:param container_name: Name or ID of the Docker container to monitor :param interval: Time interval (in seconds) between checks :param duration: Total duration (in seconds) to monitor</p>"},{"location":"sources/panther/panther_cli_click/#update_docker_compose","title":"update_docker_compose","text":"<pre><code>.update_docker_compose(\n   config_file, yaml_path = 'docker-compose.yml'\n)\n</code></pre>"},{"location":"sources/panther/panther_cli_click/#install_tool","title":"install_tool","text":"<pre><code>.install_tool(\n   config_file, branch = None\n)\n</code></pre>"},{"location":"sources/panther/panther_cli_click/#clean_tool","title":"clean_tool","text":"<pre><code>.clean_tool(\n   config_file\n)\n</code></pre>"},{"location":"sources/panther/panther_cli_click/#build_ivy_webapp","title":"build_ivy_webapp","text":"<pre><code>.build_ivy_webapp()\n</code></pre>"},{"location":"sources/panther/panther_cli_click/#build_worker","title":"build_worker","text":"<pre><code>.build_worker(\n   implem, config_file\n)\n</code></pre>"},{"location":"sources/panther/panther_cli_click/#build_docker_visualizer","title":"build_docker_visualizer","text":"<pre><code>.build_docker_visualizer()\n</code></pre>"},{"location":"sources/panther/panther_cli_click/#stop_tool","title":"stop_tool","text":"<pre><code>.stop_tool()\n</code></pre>"},{"location":"sources/panther/panther_cli_click/#get_nproc","title":"get_nproc","text":"<pre><code>.get_nproc()\n</code></pre> <p>Get the number of processors available.</p>"},{"location":"sources/panther/panther_cli_click/#start_bash_container","title":"start_bash_container","text":"<pre><code>.start_bash_container(\n   implem\n)\n</code></pre> <p>Start a Docker container with the specified parameters.</p>"},{"location":"sources/panther/panther_cli_click/#cli","title":"cli","text":"<pre><code>.cli()\n</code></pre>"},{"location":"sources/panther/panther_compose/","title":"Panther compose","text":""},{"location":"sources/panther/panther_compose/#update_docker_compose","title":"update_docker_compose","text":"<pre><code>.update_docker_compose(\n   config, yaml_path = 'docker-compose.yml', prod = False\n)\n</code></pre>"},{"location":"sources/panther/panther_docker/","title":"Panther docker","text":""},{"location":"sources/panther/panther_docker/#log_docker_output","title":"log_docker_output","text":"<pre><code>.log_docker_output(\n   generator, task_name: str = 'dockercommandexecution'\n)\n</code></pre> <p>Log output to console from a generator returned from docker client :param Any generator: The generator to log the output of :param str task_name: A name to give the task, i.e. 'Build database image', used for logging</p>"},{"location":"sources/panther/panther_docker/#container_exists","title":"container_exists","text":"<pre><code>.container_exists(\n   client, container_name\n)\n</code></pre> <p>Check if the Docker container exists.</p>"},{"location":"sources/panther/panther_docker/#get_container_ip","title":"get_container_ip","text":"<pre><code>.get_container_ip(\n   client, container_name\n)\n</code></pre> <p>Get the IP address of the Docker container.</p>"},{"location":"sources/panther/panther_docker/#get_panther_container","title":"get_panther_container","text":"<pre><code>.get_panther_container()\n</code></pre>"},{"location":"sources/panther/panther_docker/#push_image_to_registry","title":"push_image_to_registry","text":"<pre><code>.push_image_to_registry(\n   image_name, registry_url = 'elniak', tag = 'latest'\n)\n</code></pre> <p>Push a Docker image to a registry.</p>"},{"location":"sources/panther/panther_docker/#restore_hosts_file","title":"restore_hosts_file","text":"<pre><code>.restore_hosts_file()\n</code></pre> <p>Restore the original /etc/hosts file from the backup.</p>"},{"location":"sources/panther/panther_docker/#append_to_hosts_file","title":"append_to_hosts_file","text":"<pre><code>.append_to_hosts_file(\n   entry\n)\n</code></pre> <p>Append a new entry to the /etc/hosts file.</p>"},{"location":"sources/panther/panther_docker/#network_exists","title":"network_exists","text":"<pre><code>.network_exists(\n   client, network_name\n)\n</code></pre> <p>Check if the Docker network exists.</p>"},{"location":"sources/panther/panther_docker/#create_network","title":"create_network","text":"<pre><code>.create_network(\n   client, network_name, gateway, subnet\n)\n</code></pre> <p>Create a Docker network with the specified gateway and subnet.</p>"},{"location":"sources/panther/panther_docker/#create_docker_network","title":"create_docker_network","text":"<pre><code>.create_docker_network()\n</code></pre>"},{"location":"sources/panther/panther_docker/#monitor_docker_usage","title":"monitor_docker_usage","text":"<pre><code>.monitor_docker_usage(\n   docker_to_monitor, interval = 1.0, duration = 10.0\n)\n</code></pre> <p>Monitor the CPU and memory usage of a Docker container.</p> <p>:param container_name: Name or ID of the Docker container to monitor :param interval: Time interval (in seconds) between checks :param duration: Total duration (in seconds) to monitor</p>"},{"location":"sources/panther/panther_swarm/","title":"Panther swarm","text":""},{"location":"sources/panther/panther_swarm/#update_docker_swarm","title":"update_docker_swarm","text":"<pre><code>.update_docker_swarm(\n   config, yaml_path = 'docker-swarm.yml', prod = False\n)\n</code></pre>"},{"location":"sources/panther/panther_swarm/#apply_scalability","title":"apply_scalability","text":"<pre><code>.apply_scalability(\n   service_name, threshold, scale_factor, stack_name = 'panther'\n)\n</code></pre>"},{"location":"sources/panther/outputs/results/create-csv/","title":"Create csv","text":""},{"location":"sources/panther/outputs/results/create-csv/#readlastline","title":"readlastline","text":"<pre><code>.readlastline(\n   filename\n)\n</code></pre>"},{"location":"sources/panther/outputs/results/create-csv/#lines_that_contain","title":"lines_that_contain","text":"<pre><code>.lines_that_contain(\n   string, filename\n)\n</code></pre>"},{"location":"sources/panther/outputs/results/trace_to_tex/","title":"Trace to tex","text":""},{"location":"sources/panther/outputs/results/trace_to_tex/#replace_tag","title":"replace_tag","text":"<pre><code>.replace_tag(\n   fr\n)\n</code></pre>"},{"location":"sources/panther/outputs/results/trace_to_tex/#write_header_tex","title":"write_header_tex","text":"<pre><code>.write_header_tex(\n   writer\n)\n</code></pre>"},{"location":"sources/panther/outputs/results/trace_to_tex/#write_footer_tex","title":"write_footer_tex","text":"<pre><code>.write_footer_tex(\n   writer\n)\n</code></pre>"},{"location":"sources/panther/outputs/results/trace_to_tex/#get_line","title":"get_line","text":"<pre><code>.get_line(\n   frames, last_pnum, pkt, pkt_len, pkt_type, dcid\n)\n</code></pre>"},{"location":"sources/panther/outputs/results/trace_to_tex/#write_line","title":"write_line","text":"<pre><code>.write_line(\n   f, dst_port, src_port, line\n)\n</code></pre>"},{"location":"sources/panther/panther_scalability/scalability_policy/","title":"Scalability policy","text":""},{"location":"sources/panther/panther_scalability/scalability_policy/#end_script","title":"end_script","text":"<pre><code>.end_script(\n   reason\n)\n</code></pre>"},{"location":"sources/panther/panther_scalability/scalability_policy/#get_workers_ips","title":"get_workers_ips","text":"<pre><code>.get_workers_ips()\n</code></pre>"},{"location":"sources/panther/panther_scalability/scalability_policy/#update_avg","title":"update_avg","text":"<pre><code>.update_avg(\n   service, workers_ips\n)\n</code></pre>"},{"location":"sources/panther/panther_scalability/scalability_policy/#get_container_cpu_usage","title":"get_container_cpu_usage","text":"<pre><code>.get_container_cpu_usage(\n   container_id\n)\n</code></pre>"},{"location":"sources/panther/panther_scalability/scalability_policy/#get_stats_cpu_usage","title":"get_stats_cpu_usage","text":"<pre><code>.get_stats_cpu_usage(\n   stats\n)\n</code></pre>"},{"location":"sources/panther/panther_scalability/scalability_policy/#threshold_not_reached","title":"threshold_not_reached","text":"<pre><code>.threshold_not_reached(\n   avg_cpu, threshold\n)\n</code></pre>"},{"location":"sources/panther/panther_webapp/app/panther_server/","title":"Panther server","text":""},{"location":"sources/panther/panther_webapp/app/panther_server/#main","title":"main","text":"<pre><code>.main()\n</code></pre>"},{"location":"sources/panther/panther_webapp/app/utils/cytoscape_generator/","title":"Cytoscape generator","text":""},{"location":"sources/panther/panther_webapp/app/utils/cytoscape_generator/#setup_cytoscape","title":"setup_cytoscape","text":"<pre><code>.setup_cytoscape()\n</code></pre>"},{"location":"sources/panther/panther_webapp/app/utils/cytoscape_generator/#setup_quic_model","title":"setup_quic_model","text":"<pre><code>.setup_quic_model(\n   ivy_test_path\n)\n</code></pre>"},{"location":"sources/panther/panther_webapp/app/utils/cytoscape_generator/#get_relations","title":"get_relations","text":"<pre><code>.get_relations(\n   mapping\n)\n</code></pre>"},{"location":"sources/panther/panther_webapp/app/utils/cytoscape_generator/#add_assertion","title":"add_assertion","text":"<pre><code>.add_assertion(\n   in_action, mapping, splitted_line\n)\n</code></pre>"},{"location":"sources/panther/panther_webapp/app/utils/cytoscape_generator/#setup_assertions","title":"setup_assertions","text":"<pre><code>.setup_assertions(\n   act, in_action, in_action_assumptions, in_action_guarantees, line, mapping\n)\n</code></pre>"},{"location":"sources/panther/panther_webapp/app/utils/cytoscape_generator/#find_external_action","title":"find_external_action","text":"<pre><code>.find_external_action(\n   action_name, current_action, file, found, mapping\n)\n</code></pre>"},{"location":"sources/panther/panther_webapp/app/utils/cytoscape_generator/#find_external_object_action","title":"find_external_object_action","text":"<pre><code>.find_external_object_action(\n   action_name, current_action, file, found, mapping\n)\n</code></pre>"},{"location":"sources/panther/panther_webapp/app/utils/cytoscape_generator/#get_action_implementation","title":"get_action_implementation","text":"<pre><code>.get_action_implementation(\n   content, implem_elem, line, new_file, splitted_line\n)\n</code></pre>"},{"location":"sources/panther/panther_webapp/app/utils/cytoscape_generator/#get_called_action_implementation","title":"get_called_action_implementation","text":"<pre><code>.get_called_action_implementation(\n   content, line, new_file, splitted_line\n)\n</code></pre>"},{"location":"sources/panther/panther_webapp/app/utils/cytoscape_generator/#get_action_return","title":"get_action_return","text":"<pre><code>.get_action_return(\n   current_elem, signature\n)\n</code></pre>"},{"location":"sources/panther/panther_webapp/app/utils/cytoscape_generator/#get_action_parameters","title":"get_action_parameters","text":"<pre><code>.get_action_parameters(\n   action_parameters, current_elem\n)\n</code></pre>"},{"location":"sources/panther/panther_webapp/app/utils/cytoscape_generator/#init_mapping","title":"init_mapping","text":"<pre><code>.init_mapping(\n   action_name, content, has_implem, is_init, is_module_object,\n   is_module_object_present, line, mapping, object_name, splitted_line\n)\n</code></pre>"},{"location":"sources/panther/panther_webapp/app/utils/cytoscape_generator/#get_module_object_attributes","title":"get_module_object_attributes","text":"<pre><code>.get_module_object_attributes(\n   action_name, content, line, mapping, object_name, splitted_line\n)\n</code></pre>"},{"location":"sources/panther/panther_webapp/app/utils/cytoscape_generator/#check_object_present","title":"check_object_present","text":"<pre><code>.check_object_present(\n   action_name, content, is_module_object_present, line, mapping, object_name,\n   splitted_line\n)\n</code></pre>"},{"location":"sources/panther/panther_webapp/app/utils/cytoscape_generator/#init_tp_mapping","title":"init_tp_mapping","text":"<pre><code>.init_tp_mapping(\n   content, mapping, splitted_line\n)\n</code></pre>"},{"location":"sources/panther/panther_webapp/app/utils/cytoscape_generator/#get_prefix","title":"get_prefix","text":"<pre><code>.get_prefix(\n   splitted_line\n)\n</code></pre>"},{"location":"sources/panther/panther_webapp/app/utils/cytoscape_generator/#change_permission","title":"change_permission","text":"<pre><code>.change_permission(\n   ivy_test_path\n)\n</code></pre>"},{"location":"sources/panther/panther_webapp/app/utils/cytoscape_generator/#split_line","title":"split_line","text":"<pre><code>.split_line(\n   line\n)\n</code></pre>"},{"location":"sources/panther/panther_webapp/scripts/run_docker_image/","title":"Run docker image","text":""},{"location":"sources/panther/panther_webapp/scripts/run_docker_image/#main","title":"main","text":"<pre><code>.main(\n   argv\n)\n</code></pre>"},{"location":"sources/panther/panther_worker/app/panther/","title":"Panther","text":""},{"location":"sources/panther/panther_worker/app/panther/#main","title":"main","text":"<pre><code>.main()\n</code></pre>"},{"location":"sources/panther/panther_worker/app/panther_client/","title":"Panther client","text":""},{"location":"sources/panther/panther_worker/app/panther_client/#main","title":"main","text":"<pre><code>.main()\n</code></pre>"},{"location":"sources/panther/panther_worker/app/implementations/quic-implementations/aioquic/aioquic/connection/","title":"Connection","text":""},{"location":"sources/panther/panther_worker/app/implementations/quic-implementations/aioquic/aioquic/connection/#epochs","title":"EPOCHS","text":"<pre><code>.EPOCHS(\n   shortcut: str\n)\n</code></pre>"},{"location":"sources/panther/panther_worker/app/implementations/quic-implementations/aioquic/aioquic/connection/#dump_cid","title":"dump_cid","text":"<pre><code>.dump_cid(\n   cid: bytes\n)\n</code></pre>"},{"location":"sources/panther/panther_worker/app/implementations/quic-implementations/aioquic/aioquic/connection/#get_epoch","title":"get_epoch","text":"<pre><code>.get_epoch(\n   packet_type: int\n)\n</code></pre>"},{"location":"sources/panther/panther_worker/app/implementations/quic-implementations/aioquic/aioquic/connection/#stream_is_client_initiated","title":"stream_is_client_initiated","text":"<pre><code>.stream_is_client_initiated(\n   stream_id: int\n)\n</code></pre> <p>Returns True if the stream is client initiated.</p>"},{"location":"sources/panther/panther_worker/app/implementations/quic-implementations/aioquic/aioquic/connection/#stream_is_unidirectional","title":"stream_is_unidirectional","text":"<pre><code>.stream_is_unidirectional(\n   stream_id: int\n)\n</code></pre> <p>Returns True if the stream is unidirectional.</p>"},{"location":"sources/panther/panther_worker/app/panther_config/panther_config/","title":"Panther config","text":""},{"location":"sources/panther/panther_worker/app/panther_config/panther_config/#update_config_from_global_conf","title":"update_config_from_global_conf","text":"<pre><code>.update_config_from_global_conf(\n   config: PantherConfig, global_conf_file: str\n)\n</code></pre>"},{"location":"sources/panther/panther_worker/app/panther_config/panther_config/#update_experiment_config","title":"update_experiment_config","text":"<pre><code>.update_experiment_config(\n   experiment_parameters, current_protocol\n)\n</code></pre>"},{"location":"sources/panther/panther_worker/app/panther_config/panther_config/#execute_command","title":"execute_command","text":"<pre><code>.execute_command(\n   command, must_pass = True\n)\n</code></pre>"},{"location":"sources/panther/panther_worker/app/panther_config/panther_config/#restore_config","title":"restore_config","text":"<pre><code>.restore_config()\n</code></pre>"},{"location":"sources/panther/panther_worker/app/panther_config/panther_config/#update_config","title":"update_config","text":"<pre><code>.update_config(\n   experiment_parameters, current_protocol\n)\n</code></pre>"},{"location":"sources/panther/panther_worker/app/panther_config/panther_config/#update_protocol_config","title":"update_protocol_config","text":"<pre><code>.update_protocol_config(\n   protocol_argument, current_protocol, current_tests\n)\n</code></pre>"},{"location":"sources/panther/panther_worker/app/panther_config/panther_config/#get_experiment_config","title":"get_experiment_config","text":"<pre><code>.get_experiment_config(\n   new_current_protocol = None, get_all_test = False, get_default_conf = False\n)\n</code></pre>"},{"location":"sources/panther/panther_worker/app/panther_config/panther_config/#get_protocol_config","title":"get_protocol_config","text":"<pre><code>.get_protocol_config(\n   config, protocol, get_all_test = False, get_default_conf = False\n)\n</code></pre>"},{"location":"sources/panther/panther_worker/app/panther_stats/panther_apt_stats/","title":"Panther apt stats","text":""},{"location":"sources/panther/panther_worker/app/panther_stats/panther_apt_stats/#count","title":"count","text":"<pre><code>.count(\n   x\n)\n</code></pre>"},{"location":"sources/panther/panther_worker/app/panther_stats/panther_apt_stats/#maxz","title":"maxz","text":"<pre><code>.maxz(\n   x\n)\n</code></pre>"},{"location":"sources/panther/panther_worker/app/panther_stats/panther_apt_stats/#update_csv","title":"update_csv","text":"<pre><code>.update_csv(\n   run_id, implem_name, mode, test_name, pcapFile, OutputFile, out,\n   initial_version\n)\n</code></pre>"},{"location":"sources/panther/panther_worker/app/panther_stats/panther_apt_stats/#merge_dats","title":"merge_dats","text":"<pre><code>.merge_dats()\n</code></pre>"},{"location":"sources/panther/panther_worker/app/panther_stats/panther_apt_stats/#make_dat","title":"make_dat","text":"<pre><code>.make_dat(\n   fbase, out\n)\n</code></pre>"},{"location":"sources/panther/panther_worker/app/panther_stats/panther_apt_stats/#main","title":"main","text":"<pre><code>.main()\n</code></pre>"},{"location":"sources/panther/panther_worker/app/panther_stats/panther_minip_stats/","title":"Panther minip stats","text":""},{"location":"sources/panther/panther_worker/app/panther_stats/panther_minip_stats/#count","title":"count","text":"<pre><code>.count(\n   x\n)\n</code></pre>"},{"location":"sources/panther/panther_worker/app/panther_stats/panther_minip_stats/#maxz","title":"maxz","text":"<pre><code>.maxz(\n   x\n)\n</code></pre>"},{"location":"sources/panther/panther_worker/app/panther_stats/panther_minip_stats/#update_csv","title":"update_csv","text":"<pre><code>.update_csv(\n   run_id, implem_name, mode, test_name, pcapFile, OutputFile, out,\n   initial_version\n)\n</code></pre>"},{"location":"sources/panther/panther_worker/app/panther_stats/panther_minip_stats/#merge_dats","title":"merge_dats","text":"<pre><code>.merge_dats()\n</code></pre>"},{"location":"sources/panther/panther_worker/app/panther_stats/panther_minip_stats/#make_dat","title":"make_dat","text":"<pre><code>.make_dat(\n   fbase, out\n)\n</code></pre>"},{"location":"sources/panther/panther_worker/app/panther_stats/panther_minip_stats/#main","title":"main","text":"<pre><code>.main()\n</code></pre>"},{"location":"sources/panther/panther_worker/app/panther_stats/panther_quic_stats/","title":"Panther quic stats","text":""},{"location":"sources/panther/panther_worker/app/panther_stats/panther_quic_stats/#count","title":"count","text":"<pre><code>.count(\n   x\n)\n</code></pre>"},{"location":"sources/panther/panther_worker/app/panther_stats/panther_quic_stats/#maxz","title":"maxz","text":"<pre><code>.maxz(\n   x\n)\n</code></pre>"},{"location":"sources/panther/panther_worker/app/panther_stats/panther_quic_stats/#update_csv","title":"update_csv","text":"<pre><code>.update_csv(\n   run_id, implem_name, mode, test_name, pcapFile, OutputFile, out,\n   initial_version\n)\n</code></pre>"},{"location":"sources/panther/panther_worker/app/panther_stats/panther_quic_stats/#merge_dats","title":"merge_dats","text":"<pre><code>.merge_dats()\n</code></pre>"},{"location":"sources/panther/panther_worker/app/panther_stats/panther_quic_stats/#make_dat","title":"make_dat","text":"<pre><code>.make_dat(\n   fbase, out\n)\n</code></pre>"},{"location":"sources/panther/panther_worker/app/panther_stats/panther_quic_stats/#main","title":"main","text":"<pre><code>.main()\n</code></pre>"},{"location":"sources/panther/panther_worker/app/scripts/installers/get-pip/","title":"Get pip","text":""},{"location":"sources/panther/panther_worker/app/scripts/installers/get-pip/#bootstrap","title":"bootstrap","text":"<pre><code>.bootstrap(\n   tmpdir = None\n)\n</code></pre>"},{"location":"sources/panther/panther_worker/app/scripts/installers/get-pip/#main","title":"main","text":"<pre><code>.main()\n</code></pre>"},{"location":"sources/panther/panther_worker/app/scripts/installers/get-pip2.7/","title":"Get pip2.7","text":""},{"location":"sources/panther/panther_worker/app/scripts/installers/get-pip2.7/#bootstrap","title":"bootstrap","text":"<pre><code>.bootstrap(\n   tmpdir = None\n)\n</code></pre>"},{"location":"sources/panther/panther_worker/app/scripts/installers/get-pip2.7/#main","title":"main","text":"<pre><code>.main()\n</code></pre>"},{"location":"sources/panther/panther_worker/app/scripts/installers/update-for-docker/","title":"Update for docker","text":""},{"location":"sources/panther/panther_worker/app/scripts/installers/update-for-docker/#getlistoffiles","title":"getListOfFiles","text":"<pre><code>.getListOfFiles(\n   dirName\n)\n</code></pre> <p>For the given path, get the List of all files in the directory tree </p>"},{"location":"sources/panther/panther_worker/app/scripts/updater/update-for-docker/","title":"Update for docker","text":""},{"location":"sources/panther/panther_worker/app/scripts/updater/update-for-docker/#getlistoffiles","title":"getListOfFiles","text":"<pre><code>.getListOfFiles(\n   dirName\n)\n</code></pre> <p>For the given path, get the List of all files in the directory tree </p>"}]}