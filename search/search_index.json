{"config":{"lang":["en"],"separator":"[\\s\\-,:!=\\[\\]()\"/]+|(?!\\b)(?=[A-Z][a-z])|\\.(?!\\d)|&[lg]t;","pipeline":["stopWordFilter"]},"docs":[{"location":"index.html","title":"PANTHER \ud83d\udc2f","text":""},{"location":"index.html#protocol-formal-analysis-and-formal-network-threat-evaluation-resources","title":"\ud83d\udc2f Protocol formal Analysis and formal Network Threat Evaluation Resources","text":"<pre><code>@@@@@@@@@@@@@@@@&amp;&amp;@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@&amp;&amp;@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\n@@@@@@@@@@@@@@@: .~JG#&amp;@@@@@@@@@@@@@@@@@@@@@@@@@@&amp;BJ~. .&amp;@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\n@@@@@@@@@@@@@@G   .::: :?5G57~:.........:^!YG5J^.:^:.   5@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\n@@@@@@@@@@@@@@G :.  :~                           ^:  .: Y@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\n@@@@@@@@@@@@@@&amp; .:  ^    .                   .    ^  :. #@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\n@@@@@@@@@@@@@@@7   .:  .     .^.        ~:     .  ..   ~@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\n@@@@@@@@@@@@@@@@7      ~~^.  ^7^::~ ~::^7^  .^~~.     !&amp;@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\n@@@@@@@@@@@@@@@@@7     :!~??~. :?!: .!?^ .~??~~^     :@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\n@@@@@@@@@@@@@@@@J       .Y5~7J7..^   ^..7J?^YY.       ^&amp;@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\n@@@@@@@@@@@@@@@^   .   . !P7!^. .~. .^.  ~7!5~ .   :  ..B@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\n@@@@@@@@@@@@@@:.  :~   !^  .:^^  .^.^.  ^^:.  ^J.  ^^  :.#@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\n@@@@@@@@@@@@@P.^  ?^    ..:: :^.       .^^ .:.:.   .J  :~!@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\n@@@@@@@@@@@@@Y^^  5!    :??.  7!!?7!7J7!?.  ??^    ^5. :!!@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\n@@@@@@@@@@@@@#.!  Y5.   :J:^:  ..~P75!..  :^:?^   .YY  ~:G@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\n@@@@@@@@@@@@@@?:. .YY7^. ~^^^^    ...    :^^^!  .!5Y: .: P@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\n@@@@@@@@@@@@@@@...  J557 .7:.     .:..    .:7. !5Y~  .^  .@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\n@@@@@@@@@@@@@@5  ^7.~55.... ^B5:!?YY57!^J#! ....5. .77 .. Y@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\n@@@@@@@@@@@@@P :~ .7Y55.  . !@&amp;:!!^.^!!:#@? .  ~Y7JJ^  :Y. #@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\n@@@@@@@@@@@@J .YJ   .^7:    .^G?5YJ^?J5?G~.    ~~^.     ^5!.?@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\n@@@@@@@@@@@! :Y!             .~~!YYJYY7~~.         .     J5Y.^@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\n@@@@@@@@@@7 ^5~  :~         .JG!^~:.:~~~GY.         7!:^?5555 .@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\n@@@@@@@@@5  Y5  .P~        .5!!: ^~:~^ .!~Y.         ~J555555^ ~@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\n@@@@@@@@@   Y5!:?57         ?^  .::.::.  :J.            .:!55^  B@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\n@@@@@@@@G   .?5555~          :!^.      .~:        J:       :5^  7@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\n@@@@@@@@Y    .555^      ..     .^~~~~^:.          :~~:.     ~7  !@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\n@@@@@@@#      !P7     .!J^                            :?^    :. .@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\n@@@@@@@.       ~?    .Y^                         ....  :^        !@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\n@@@@@@P     .   ..   ::                      ^~::....::^^.        .&amp;@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\n@@@@@~     ~J        !                  .:::^.           ^^.       .&amp;@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\n@@@&amp;.      ~57.     !7        .....::::::.           .:             ?@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\n@@@.         .^~^   :.     .!?#^ .:...                              .@@@@@@@@@@@@@@@@@@@@@@@@@@#J7P@\n@@!             :J:        :~G^ .?#~   .:..         :...             @@@@@@@@@@@@@@@@@@@@&amp;G5J~.    P\n@&amp;               :5.        .. .7#!  .^^~   .:.    ^^                @@@@@@@@@@@@@@@@#7.           G\n@Y              .757            !    .?&amp;#..:.    .~     ..           &amp;@@@@@@@@@@@@@#:            .P@\n@J              ....!J?^             ^G:  ~GG  .::      .:^:.        &amp;@@@@@@@@@@@@5         .^75#@@@\n@@:..                :~?!::.         .    PJ^..            ...      Y@@@@@@@@@@@@&amp;        :#@@@@@@@@\n@@@^ .                :   ~~...          ..                      JG#@@@@@@@@@@@@@#        &amp;@@@@@@@@@\n@@@@?.                ..:.5&amp;G.:                                  G@@@@@@@@@@@@@@@@:       &amp;@@@@@@@@@\n@@@@@&amp;5~.         ::  .  :.:J?.                                 ^ .~P&amp;@@@@@@@@@@@@&amp;       7@@@@@@@@@\n@@@@@@@@@&amp;^       .  .~.                                        ^   .~J#@@@@@@@@@@@B    .  ?@@@@@@@@\n@@@@@@@@@@B        : ^G#B! .                    5&amp;.             ^     :^7&amp;@@@@@@@@@@J   :.  P@@@@@@@\n@@@@@@@@@@@Y   .^   :.  .7PP&amp;B!                 @@J^.          ^        ::B@@@@@@@@@&amp;   .   :@@@@@@@\n@@@@@@@@@@@@&amp;. :^  .    :&amp;@@@@@P.               ^&amp;P.~         ~~GY^.     ..P@@@@@@@@J    !. .@@@@@@@\n@@@@@@@@@@@@@7     G&amp;B! J@@@@@@@@?                : .^:.     ~~B@@@5.     . :JGBBBY:    ^P: J@@@@@@@\n@@@@@@@@@@@@@P.  ~7: :5G5G@@@@@@@@@Y            .:    ~..    .:5@@@@&amp;~    ..           .Y? ~@@@@@@@@\n@@@@@@@@@@@@@@&amp;? .YB?^G@@@@@@@@@@@@@&amp;?           :    7        .@@@@@@G:   .^:.      .~J!.5@@@@@@@@@\n@@@@@@@@@@@@@@@@&amp;P7^?G5@@@@@@@@@@@@@@@&amp;Y~:::~: .::    !         P@@@@@@@B~    :^^^^~!!~~5@@@@@@@@@@@\n@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@&amp;5!:   .!         .&amp;@@@@@@@@@#57~^^^~~7Y#@@@@@@@@@@@@@\n@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@#!  ~    .  .   !@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\n@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@&amp;7..        :! #@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\n@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@!!:.  .: :^~ &amp;@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\n@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@&amp;?.^?7~7YJ. !@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\n@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@&amp;. .^. ::  .7&amp;@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\n@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@# :.        :#@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\n@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@P 7.    ..!~ ?@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\n@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@J.~         5@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\n@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@#!   ..:^~G@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\n@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@&amp;BPYYG&amp;@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\n                                            Made with \u2764\ufe0f \n                                For the Community, By the Community   \n\n                                ###################################\n\n                                        Made by ElNiak\n                linkedin  - https://www.linkedin.com/in/christophe-crochet-5318a8182/ \n                                Github - https://github.com/elniak\n</code></pre>"},{"location":"index.html#overview","title":"\ud83d\ude80 Overview","text":"<p>PANTHER combines advanced techniques in network protocol verification, integrating the Shadow network simulator with the Ivy formal verification tool. This powerful synergy allows for the detailed examination of time properties in network protocols. A specialized time module enhances Ivy's capabilities, enabling it to handle complex quantitative-time properties with greater precision.</p> <p>PANTHER's effectiveness is demonstrated through its application to the QUIC protocol. By refining QUIC's formal specification in Ivy, PANTHER not only verifies essential aspects of the protocol but also identifies real-world implementation errors, showcasing its practical utility. This innovative integration paves the way for more thorough, efficient, and precise protocol testing and verification.</p>"},{"location":"index.html#multi-protocol-support","title":"\u2795 Multi-Protocol Support","text":"<p>PANTHER supports multiple protocols. To add new protocol specifications, place them in the <code>protocols</code> directory following the existing structure. Currently supported protocols include: - [X] QUIC</p> <ul> <li> <p> MiniP</p> </li> <li> <p> BGP</p> </li> <li> <p> CoAP</p> </li> </ul>"},{"location":"index.html#multi-implementation-support","title":"\u2795 Multi-Implementation Support","text":"<p>PANTHER supports multiple implementations. To add new implementations, place them in the <code>implementations</code> directory following the existing structure.</p>"},{"location":"index.html#advanced-persistent-threat-simulation","title":"\u2795 Advanced Persistent Threat Simulation","text":"<p>PANTHER can simulate advanced persistent threats (APTs) in network protocols. By leveraging the Shadow network simulator, PANTHER models and analyzes the behavior of APTs in a controlled environment, providing valuable insights into potential vulnerabilities and attack vectors. Supported simulations include: - [X] QUIC</p> <ul> <li> MiniP</li> </ul>"},{"location":"index.html#useful-links","title":"Useful links","text":"<ul> <li> <p>Usage</p> </li> <li> <p>Installation</p> </li> <li> <p>Contributing</p> </li> <li> <p>License</p> </li> </ul>"},{"location":"index.html#references","title":"\ud83d\udcd6 References","text":"<p>For further reading and context on the topics and methodologies used in this tool, refer to the following articles:</p> <ul> <li> <p>Crochet, C., Rousseaux, T., Piraux, M., Sambon, J.-F., &amp; Legay, A. (2021). Verifying quic implementations using ivy. In Proceedings of the 2021 Workshop on Evolution, Performance and Interoperability of QUIC. DOI</p> </li> <li> <p>Crochet, C., &amp; Sambon, J.-F. (2021). Towards verification of QUIC and its extensions. (Master's thesis, UCL - Ecole polytechnique de Louvain). Available at UCLouvain. Keywords: QUIC, Formal Verification, RFC, IETF, Specification, Ivy, Network.</p> </li> </ul> <p>For other useful resources, see the following:</p> <ul> <li> <p>McMillan, K. L., &amp; Padon, O. (2018). Deductive Verification in Decidable Fragments with Ivy. In A. Podelski (Ed.), Static Analysis - 25th International Symposium, SAS 2018, Freiburg, Germany, August 29-31, 2018, Proceedings (pp. 43\u201355). Springer. DOI - PDF</p> </li> <li> <p>Taube, M., Losa, G., McMillan, K. L., Padon, O., Sagiv, M., Shoham, S., Wilcox, J. R., &amp; Woos, D. (2018). Modularity for decidability of deductive verification with applications to distributed systems. In Proceedings of the 39th ACM SIGPLAN Conference on Programming Language Design and Implementation, PLDI 2018, Philadelphia, PA, USA, June 18-22, 2018 (pp. 662\u2013677). ACM. DOI</p> </li> <li> <p>Padon, O., Hoenicke, J., McMillan, K. L., Podelski, A., Sagiv, M., &amp; Shoham, S. (2018). Temporal Prophecy for Proving Temporal Properties of Infinite-State Systems. In 2018 Formal Methods in Computer Aided Design, FMCAD 2018, Austin, TX, USA, October 30 - November 2, 2018 (pp. 1\u201311). IEEE. DOI - PDF</p> </li> <li> <p>Padon, O., McMillan, K. L., Panda, A., Sagiv, M., &amp; Shoham, S. (2016). Ivy: safety verification by interactive generalization. In Proceedings of the 37th ACM SIGPLAN Conference on Programming Language Design and Implementation, PLDI 2016, Santa Barbara, CA, USA, June 13-17, 2016 (pp. 614\u2013630). ACM. DOI</p> </li> <li> <p>McMillan, K. L. (2016). Modular specification and verification of a cache-coherent interface. In 2016 Formal Methods in Computer-Aided Design, FMCAD 2016, Mountain View, CA, USA, October 3-6, 2016 (pp. 109\u2013116). DOI</p> </li> <li> <p>McMillan, K. L., &amp; Zuck, L. D. (2019). Formal specification and testing of QUIC. In Proceedings of ACM Special Interest Group on Data Communication (SIGCOMM\u201919). ACM. Note: to appear. PDF</p> </li> <li> <p>Ivy Documentation</p> </li> <li> <p>Ivy GitHub Repository</p> </li> </ul>"},{"location":"CHANGELOG.html","title":"Changelog","text":""},{"location":"CONTRIBUTING.html","title":"Contributing","text":""},{"location":"CONTRIBUTING.html#project-structure","title":"\ud83d\udcc2 Project Structure","text":""},{"location":"CONTRIBUTING.html#directory-structure","title":"\ud83d\udcc2 Directory Structure","text":"<p>The PANTHER project is organized into the following key directories:</p> <p><pre><code>PANTHER/\n\u2514\u2500\u2500 data/\n\u2514\u2500\u2500 src/\n    \u251c\u2500\u2500 Protocols-Ivy/\n    \u2502   \u251c\u2500\u2500 protocol-testing/\n    \u2502   \u2502   \u251c\u2500\u2500 quic/\n    \u2502   \u2502   \u251c\u2500\u2500 minip/\n    \u2502   \u2502   \u251c\u2500\u2500 coap/\n    \u2502   \u2502   \u2514\u2500\u2500 [other protocols]\n    \u2502   \u2514\u2500\u2500 ivy/[ivy-core]\n    \u251c\u2500\u2500 implementations/\n    \u2502   \u251c\u2500\u2500 quic-implementations/\n    \u2502   \u2502       \u251c\u2500\u2500 picoquic/\n    \u2502   \u2502       \u251c\u2500\u2500 aioquic/\n    \u2502   \u2502       \u251c\u2500\u2500 lsquic/\n    \u2502   \u2502       \u2514\u2500\u2500 [protocol implementations]\n    \u2502   \u2514\u2500\u2500 [other protocols]\n    \u251c\u2500\u2500 containers/\n    \u2502   \u2514\u2500\u2500 [Dockerfile definitions]\n    \u2514\u2500\u2500 panther/\n        \u251c\u2500\u2500 panther.py\n        \u251c\u2500\u2500 panther_runner/ [test preparation]\n        \u251c\u2500\u2500 ...\n        \u251c\u2500\u2500 panther_tester/ [test execution]\n        \u2514\u2500\u2500 configs/\n            \u2514\u2500\u2500 [configuration files]\n</code></pre> - <code>data/</code>: Data directory for storing results and logs. - <code>panther/</code>: Main PANTHER module. - <code>Protocols-Ivy/</code>: Core of protocol specifications and testing. - <code>implementations/</code>: Various QUIC implementation modules. - <code>containers/</code>: Dockerfile definitions for different environments.</p>"},{"location":"CONTRIBUTING.html#architecture-diagrams","title":"\ud83d\uddbc\ufe0f Architecture Diagrams","text":"Docker Compose Architecture Docker Container Internal Architecture"},{"location":"INSTALL.html","title":"\ud83d\udd27 Installation","text":"<p>Note, before implementation were added as submodule. Now we only consider Docker containers installation. (To be updated)</p>"},{"location":"INSTALL.html#local-installation-not-recommended","title":"\ud83d\udcbb Local Installation (Not Recommended)","text":"<p>See Dockerfile for dependencies and commands</p>"},{"location":"INSTALL.html#single-implementation","title":"\ud83d\udc33 Single implementation","text":"<pre><code># For a full installation including all dependencies and configurations:\nIMPLEM=\"picoquic\" make build-docker\n</code></pre>"},{"location":"INSTALL.html#webapp-recommended","title":"\ud83d\udc33 WebApp (Recommended)","text":"<pre><code># For first installation \nmake install\n\n# For modification: \n# For major update in ivy:\nmake build-docker-compose-full\n# For a minor update in some implementation:\nmake build-docker-compose\n</code></pre>"},{"location":"INSTALL.html#clean-up","title":"\u26a0\ufe0f Clean Up","text":"<pre><code># To clean Docker images and system:\nmake clean-docker-full\n</code></pre>"},{"location":"TODO.html","title":"TODOs","text":"<ul> <li>Rename gits</li> </ul>"},{"location":"TODO.html#panther","title":"PANTHER","text":"<ul> <li> <p>refactor</p> </li> <li> <p>change os.system with subprocess or with python funct</p> </li> <li> <p>add barplot progression</p> </li> <li> <p>Complete config file</p> </li> <li> <p>Add template to automatise the addition of new protocols without modifying the code</p> <ul> <li> <p>should remove the _runner/tester/stats.py <li> <p>Add envariable to config file and automatise</p> </li>"},{"location":"TODO.html#panther-webapp","title":"PANTHER webapp","text":"<ul> <li> <p>refactor /creator with accordingly -&gt; to allow and adapt multiple protocol</p> </li> <li> <p>refactor /result with accordingly -&gt; to allow and adapt multiple protocol</p> </li> <li> <p>Allow to add new implementation configuration</p> </li> <li> <p>https://github.com/Kanaries/pygwalker</p> </li> <li> <p>parler du framework</p> </li> </ul>"},{"location":"TODO.html#pvf-architecture","title":"PVF architecture","text":"<ul> <li> <p>Make docker internal system match to current system</p> </li> <li> <p>build.py to replace makefile</p> </li> <li> <p>update docker compose file</p> </li> </ul>"},{"location":"USAGE.html","title":"\ud83d\udcbb Usage","text":""},{"location":"USAGE.html#tests-parameters","title":"\ud83d\udcd6 Tests parameters","text":"<p>Global parameters:</p> Argument Description Default Value <code>--dir</code> Output directory to create <code>temp/</code> <code>--build_dir</code> Build directory to create <code>build/</code> <code>--tests_dir</code> Tests directory to create <code>build/</code> <code>--iter</code> Number of iterations per test <code>1</code> <code>--internal_iteration</code> Number of Ivy iterations per test <code>100</code> <code>--getstats</code> Print all stats <code>True</code> <code>--compile</code> Compile Ivy tests <code>True</code> <code>--run</code> Launch or not the tested implementation <code>True</code> <code>--timeout</code> Timeout <code>100 sec</code> <code>--keep_alive</code> Keep alive Ivy implementation <code>False</code> <code>--update_ivy</code> Update <code>&lt;include&gt;</code> folder for picoTLS files of Ivy (defined by g++) <code>True</code> <code>--docker</code> Use docker <code>True</code> <code>--gperf</code> gperf <code>False</code> <code>--gdb</code> Use gdb to debug <code>False</code> <code>--memprof</code> Perform memory profiling <code>False</code> <code>--localhost</code> Use localhost network <code>True</code> <code>--vnet</code> Use virtual network <code>False</code> <code>--shadow</code> Use Shadow simulator <code>False</code> <code>--webapp</code> WebApp UI <code>False</code> <code>--worker</code> Worker server mode <code>False</code> <p>Simulator parameters:</p> Argument Description Default Value <code>--loss</code> Shadow: loss percentage <code>0</code> <code>--jitter</code> Shadow: jitter in milliseconds <code>10</code> <code>--latency</code> Shadow: latency in milliseconds <code>10</code> <p>QUIC parameters:</p> Argument Description Default Value <code>--nb_request</code> Number of request send by implementations (not always possible) <code>10</code> <code>--initial_version</code> Initial version for protocol testing <code>1</code> <code>--nclient</code> Number of clients per test for server implementation <code>1</code> <code>--alpn</code> Application-Layer Protocol Negotiation options <code>hq-interop</code>, <code>hq-29</code>, <code>hq-28</code> <p>BGP parameters:</p> <p>CoAP parameters:</p>"},{"location":"USAGE.html#single-implementation-command-line","title":"\ud83d\udcbb Single implementation (Command Line)","text":"<pre><code># Start a Docker container for interactive Bash access\nIMPLEM=\"picoquic\" make start-bash\npython3 panther.py --mode client --categories all --update_include_tls \\\n        --timeout 180 --implementations $(IMPLEM) --iter $(ITER) --compile  --initial_version 29 --alpn hq-29  \n# Example: Runs a Docker container with 'picoquic' for interactive Bash access\n</code></pre>"},{"location":"USAGE.html#webapp-recommended","title":"\ud83d\udc33 WebApp (Recommended)","text":"<p>Update the <code>docker-compose.yml</code> file with the protocol implementation and run the following command:</p> <pre><code># Compose the full Docker environment for all implementations\nmake compose\n</code></pre> <p>Then go to <code>172.27.1.10</code> to access the WebApp.</p>"},{"location":"USAGE.html#tutorial","title":"\ud83d\udcd6 Tutorial","text":""},{"location":"USAGE.html#webapp-recommended_1","title":"\ud83d\udcbb WebApp (Recommended)","text":"<p>Introduction:</p> <p>This quick guide assists you in using the Ivy QUIC web application for testing QUIC implementations.</p> <p>First go to: <code>http://172.27.1.10/index.html</code></p> <p>Configuration Steps:</p> <ol> <li>Choose Protocol: Start by selecting the protocol (QUIC, MINIP, BGP) you want to test.</li> </ol> <p></p> <ol> <li> <p>Set Network Type: Opt for localhost, vnet, or shadow based on your network testing environment.</p> </li> <li> <p>Global Parameters: Define directories for output, build, and tests using the 'Browse...' options and set the iteration count.</p> </li> <li> <p>Debugging Options: Toggle performance and memory profiling tools like gperf, gdb, and memprof as needed.</p> </li> </ol> <p></p> <ol> <li>Adjust Test Settings: Customize Shadow parameters such as loss, jitter, and latency for simulation accuracy.</li> </ol> <p></p> <ol> <li>Protocol custom configuration: Set the number of requests, initial version, number of clients, and ALPN for, e.g QUIC tests.</li> </ol> <p></p> <ol> <li>Select Tests: Choose from server, client, and MIM tests to target specific aspects of the QUIC protocol.</li> </ol> <p></p> <ol> <li> <p>Implementation Testing: Pick the QUIC implementation you want to test from the available options.</p> </li> <li> <p>Start Experiments: Hit 'Start Experiments' to begin the testing process with your configured settings.</p> </li> </ol> <p></p> <p>Running the Tests:</p> <p>After setup, monitor the tests' progress and analyze the results. Make adjustments and re-run as necessary to ensure thorough testing.</p> <p>Refer to the in-app documentation for detailed instructions or contact support for troubleshooting assistance.</p> <p>Note that the similar approach can be used in the command line.</p>"},{"location":"USAGE.html#adding-new-protocol","title":"\ud83d\udcbb Adding new protocol","text":"<ol> <li>Add the corresponding configuration files in <code>src/panther/configs/&lt;new_protocol&gt;/</code>:<ul> <li>Host related configurations:<ul> <li><code>src/panther/configs/&lt;new_protocol&gt;/implem-server/</code>: configuration files for the server implementation</li> <li><code>src/panther/configs/&lt;new_protocol&gt;/implem-client/</code>: configuration files for the client implementation</li> <li>(<code>src/panther/configs/&lt;new_protocol&gt;/implem-&lt;host_type&gt;/</code>: configuration files for the  implementation) <li>Protocol related configurations:<ul> <li><code>src/panther/configs/&lt;new_protocol&gt;/[default_]&lt;new_protocol&gt;_config.ini</code></li> <li><code>src/panther/configs/&lt;new_protocol&gt;/default_&lt;new_protocol&gt;_implem.ini</code></li> </ul> </li> <li>Create a folder in <code>panther/panther_worker/app/implementations/&lt;new_protocol&gt;-implementations/</code> for the new protocol implementation</li> <li>Add in <code>src/panther/panther.py</code> and in <code>src/panther/panther_runner/panther_&lt;new_protocol&gt;_runner.py</code> the new protocol implementation Runner.</li> <li>Add in <code>src/panther/panther_tester/panther_&lt;new_protocol&gt;_tester.py</code> the new protocol implementation Tester.</li> <li>Add in <code>src/panther/panther_stats/panther_&lt;new_protocol&gt;_stats.py</code> the new protocol implementation stats collector.</li>"},{"location":"USAGE.html#adding-new-protocol-implementation","title":"\ud83d\udcbb Adding new protocol implementation","text":"<ol> <li> <p>Create the corresponding Dockerfile in <code>src/containers/Dockerfile.&lt;implem&gt;</code>, it should run over Ubuntu 20.04 <pre><code>ARG image\nFROM $image:latest\nADD panther/panther_worker/app/implementations/&lt;protocol&gt;-implementations/&lt;implem&gt; /PANTHER/implementations/&lt;protocol&gt;-implementations/&lt;implem&gt;\nWORKDIR /PANTHER/implementations/&lt;protocol&gt;-implementations/&lt;implem&gt;/\n\n### Install dependencies\n\nWORKDIR /PANTHER\n</code></pre></p> </li> <li> <p>Add the corresponding configuration file in <code>src/panther/configs/&lt;protocol&gt;/.../&lt;implem&gt;.ini</code></p> </li> <li>Build the docker image with <code>IMPLEM=&lt;implem&gt; make build-docker</code><ul> <li>Also update the Makefile to add the new implementation (commit, building, etc)</li> </ul> </li> <li>Add the new implementation in <code>docker-compose.yml</code> file such as: <pre><code>  &lt;implem&gt;-ivy:\n    hostname: &lt;implem&gt;-ivy\n    container_name: &lt;implem&gt;-ivy\n    image: \"&lt;implem&gt;-ivy:latest\"\n    command: python3 panther.py --update_ivy --getstats --worker --compile  --docker\n    ports:\n      - \"&lt;new_p\u00f4rt&gt;:80\"\n    volumes:\n      - ${PWD}/src/webapp/panther_client.py:/PANTHER/webapp/panther_client.py\n      - ${PWD}/src/panther/panther.py:/PANTHER/panther.py\n      - ${PWD}/src/panther/res/shadow/shadow_client_test.yml:/PANTHER/topo.gml\n      - ${PWD}/src/panther/res/shadow/shadow_client_test.yml:/PANTHER/shadow_client_test.yml\n      - ${PWD}/src/panther/res/shadow/shadow_server_test.yml:/PANTHER/shadow_server_test.yml\n      - ${PWD}/src/panther/res/shadow/shadow_client_test_template.yml:/PANTHER/shadow_client_test_template.yml\n      - ${PWD}/src/panther/res/shadow/shadow_server_test_template.yml:/PANTHER/shadow_server_test_template.yml\n      - ${PWD}/data/tls-keys:/PANTHER/tls-keys\n      - ${PWD}/data/tickets:/PANTHER/tickets\n      - ${PWD}/data/qlogs:/PANTHER/qlogs\n      - ${PWD}/src/panther/panther_utils/:/PANTHER/panther_utils/\n      - ${PWD}/src/panther/panther_stats/:/PANTHER/panther_stats/\n      - ${PWD}/src/panther/panther_runner/:/PANTHER/panther_runner/\n      - ${PWD}/src/panther/panther_tester/:/PANTHER/panther_tester/\n      - ${PWD}/src/panther/ivy_utils/:/PANTHER/ivy_utils/\n      - ${PWD}/src/panther/logger/:/PANTHER/logger/\n      - ${PWD}/src/panther/argument_parser/:/PANTHER/argument_parser/\n      - ${PWD}/src/panther/configs/:/PANTHER/configs/\n      - ${PWD}/src/Protocols-Ivy/protocol-testing/:/PANTHER/Protocols-Ivy/protocol-testing/\n      - ${PWD}/src/Protocols-Ivy/doc/examples/quic:/PANTHER/Protocols-Ivy/doc/examples/quic\n      - ${PWD}/src/Protocols-Ivy/ivy/:/PANTHER/Protocols-Ivy/ivy/\n      - ${PWD}/src/Protocols-Ivy/ivy/include/1.7:/PANTHER/Protocols-Ivy/ivy/include/1.7\n      - /tmp/.X11-unix:/tmp/.X11-unix\n    networks:\n      net:\n        ipv4_address: 172.27.0.&lt;TODO&gt;\n    privileged: true\n    security_opt:\n      - seccomp:unconfined\n    cap_add:\n      - NET_ADMIN\n    tmpfs:\n      - /dev/shm:rw,nosuid,nodev,exec,size=1024g\n    environment:\n      - DISPLAY=${DISPLAY}\n      - XAUTHORITY=~/.Xauthority\n      - ROOT_PATH=${PWD} \n      - MPLBACKEND='Agg'\n    restart: always\n    devices:\n      - /dev/dri:/dev/dri\n    depends_on:\n      - ivy-standalone\n</code></pre></li> </ol>"},{"location":"USAGE.html#ivy-model-creation","title":"\ud83d\udcbb Ivy Model Creation","text":"<p>Follow these steps to create an Ivy model for protocol verification:</p> <ol> <li> <p>RFC Analysis: Carefully read the RFC to identify the protocol components, such as packet types and endpoints.</p> </li> <li> <p>Modeling Components: Model the identified components without the requirements initially. Focus on their fields, potential events, etc.</p> </li> <li> <p>Serialization/Deserialization: Implement serialization and deserialization functions for each event that could be transmitted over the network.</p> </li> <li> <p>Incorporating RFC Requirements: Integrate the requirements specified in the RFC with the modeled components to complete the Ivy model.</p> </li> </ol>"},{"location":"automate_mkdocs.html","title":"Automate mkdocs","text":""},{"location":"automate_mkdocs.html#add_val","title":"add_val","text":"<p>source <pre><code>.add_val(\n   indices, value, data\n)\n</code></pre></p>"},{"location":"automate_mkdocs.html#automate_mkdocs_from_docstring","title":"automate_mkdocs_from_docstring","text":"<p>source <pre><code>.automate_mkdocs_from_docstring(\n   mkdocs_dir: Union[str, Path], mkgendocs_f: str, repo_dir: Path,\n   match_string: str\n)\n</code></pre></p> <p>Automates the -pages for mkgendocs package by adding all Python functions in a directory to the mkgendocs config.</p> <p>Args</p> <ul> <li>mkdocs_dir (typing.Union[str, pathlib.Path]) : textual directory for the hierarchical directory &amp; navigation in Mkdocs</li> <li>mkgendocs_f (str) : The configurations file for the mkgendocs package</li> <li>repo_dir (pathlib.Path) : textual directory to search for Python functions in</li> <li>match_string (str) : the text to be matches, after which the functions will be added in mkgendocs format</li> </ul> <p>Example</p> <pre><code>&gt;&gt;&gt; automate_mkdocs_from_docstring('scripts', repo_dir=Path.cwd(), match_string='pages:')\n</code></pre> <p>Returns</p> <ul> <li>list  : list of created markdown files and their relative paths</li> </ul>"},{"location":"automate_mkdocs.html#automate_nav_structure","title":"automate_nav_structure","text":"<p>source <pre><code>.automate_nav_structure(\n   mkdocs_dir: Union[str, Path], mkdocs_f: str, repo_dir: Path, match_string: str,\n   structure: dict\n)\n</code></pre></p> <p>Automates the -pages for mkgendocs package by adding all Python functions in a directory to the mkgendocs config.</p> <p>Args</p> <ul> <li>mkdocs_dir (typing.Union[str, pathlib.Path]) : textual directory for the hierarchical directory &amp; navigation in Mkdocs</li> <li>mkgendocs_f (str) : The configurations file for the mkgendocs package</li> <li>repo_dir (pathlib.Path) : textual directory to search for Python functions in</li> <li>match_string (str) : the text to be matches, after which the functions will be added in mkgendocs format</li> </ul> <p>Example</p> <pre><code>&gt;&gt;&gt; automate_mkdocs_from_docstring('scripts', repo_dir=Path.cwd(), match_string='pages:')\n</code></pre> <p>Returns</p> <ul> <li>str  : feedback message</li> </ul>"},{"location":"automate_mkdocs.html#fix","title":"fix","text":"<p>source <pre><code>.fix(\n   f\n)\n</code></pre></p> <p>Allows creation of arbitrary length dict item</p> <p>Args</p> <ul> <li>f (type) : Description of parameter <code>f</code>.</li> </ul> <p>Returns</p> <ul> <li>type  : Description of returned object.</li> </ul>"},{"location":"automate_mkdocs.html#indent","title":"indent","text":"<p>source <pre><code>.indent(\n   string: str\n)\n</code></pre></p> <p>Count the indentation in whitespace characters.</p> <p>Args</p> <ul> <li>string (str) : text with indents</li> </ul> <p>Returns</p> <ul> <li>int  : Number of whitespace indentations</li> </ul>"},{"location":"contributing.html","title":"Contributing","text":""},{"location":"contributing.html#project-structure","title":"\ud83d\udcc2 Project Structure","text":""},{"location":"contributing.html#directory-structure","title":"\ud83d\udcc2 Directory Structure","text":"<p>The PANTHER project is organized into the following key directories:</p> <p><pre><code>PANTHER/\n\u2514\u2500\u2500 data/\n\u2514\u2500\u2500 src/\n    \u251c\u2500\u2500 Protocols-Ivy/\n    \u2502   \u251c\u2500\u2500 protocol-testing/\n    \u2502   \u2502   \u251c\u2500\u2500 quic/\n    \u2502   \u2502   \u251c\u2500\u2500 minip/\n    \u2502   \u2502   \u251c\u2500\u2500 coap/\n    \u2502   \u2502   \u2514\u2500\u2500 [other protocols]\n    \u2502   \u2514\u2500\u2500 ivy/[ivy-core]\n    \u251c\u2500\u2500 implementations/\n    \u2502   \u251c\u2500\u2500 quic-implementations/\n    \u2502   \u2502       \u251c\u2500\u2500 picoquic/\n    \u2502   \u2502       \u251c\u2500\u2500 aioquic/\n    \u2502   \u2502       \u251c\u2500\u2500 lsquic/\n    \u2502   \u2502       \u2514\u2500\u2500 [protocol implementations]\n    \u2502   \u2514\u2500\u2500 [other protocols]\n    \u251c\u2500\u2500 containers/\n    \u2502   \u2514\u2500\u2500 [Dockerfile definitions]\n    \u2514\u2500\u2500 panther/\n        \u251c\u2500\u2500 panther.py\n        \u251c\u2500\u2500 panther_runner/ [test preparation]\n        \u251c\u2500\u2500 ...\n        \u251c\u2500\u2500 panther_tester/ [test execution]\n        \u2514\u2500\u2500 configs/\n            \u2514\u2500\u2500 [configuration files]\n</code></pre> - <code>data/</code>: Data directory for storing results and logs. - <code>panther/</code>: Main PANTHER module. - <code>Protocols-Ivy/</code>: Core of protocol specifications and testing. - <code>implementations/</code>: Various QUIC implementation modules. - <code>containers/</code>: Dockerfile definitions for different environments.</p>"},{"location":"contributing.html#architecture-diagrams","title":"\ud83d\uddbc\ufe0f Architecture Diagrams","text":"Docker Compose Architecture Docker Container Internal Architecture"},{"location":"home.html","title":"PANTHER \ud83d\udc2f","text":""},{"location":"home.html#protocol-formal-analysis-and-formal-network-threat-evaluation-resources","title":"\ud83d\udc2f Protocol formal Analysis and formal Network Threat Evaluation Resources","text":"<pre><code>@@@@@@@@@@@@@@@@&amp;&amp;@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@&amp;&amp;@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\n@@@@@@@@@@@@@@@: .~JG#&amp;@@@@@@@@@@@@@@@@@@@@@@@@@@&amp;BJ~. .&amp;@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\n@@@@@@@@@@@@@@G   .::: :?5G57~:.........:^!YG5J^.:^:.   5@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\n@@@@@@@@@@@@@@G :.  :~                           ^:  .: Y@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\n@@@@@@@@@@@@@@&amp; .:  ^    .                   .    ^  :. #@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\n@@@@@@@@@@@@@@@7   .:  .     .^.        ~:     .  ..   ~@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\n@@@@@@@@@@@@@@@@7      ~~^.  ^7^::~ ~::^7^  .^~~.     !&amp;@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\n@@@@@@@@@@@@@@@@@7     :!~??~. :?!: .!?^ .~??~~^     :@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\n@@@@@@@@@@@@@@@@J       .Y5~7J7..^   ^..7J?^YY.       ^&amp;@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\n@@@@@@@@@@@@@@@^   .   . !P7!^. .~. .^.  ~7!5~ .   :  ..B@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\n@@@@@@@@@@@@@@:.  :~   !^  .:^^  .^.^.  ^^:.  ^J.  ^^  :.#@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\n@@@@@@@@@@@@@P.^  ?^    ..:: :^.       .^^ .:.:.   .J  :~!@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\n@@@@@@@@@@@@@Y^^  5!    :??.  7!!?7!7J7!?.  ??^    ^5. :!!@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\n@@@@@@@@@@@@@#.!  Y5.   :J:^:  ..~P75!..  :^:?^   .YY  ~:G@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\n@@@@@@@@@@@@@@?:. .YY7^. ~^^^^    ...    :^^^!  .!5Y: .: P@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\n@@@@@@@@@@@@@@@...  J557 .7:.     .:..    .:7. !5Y~  .^  .@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\n@@@@@@@@@@@@@@5  ^7.~55.... ^B5:!?YY57!^J#! ....5. .77 .. Y@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\n@@@@@@@@@@@@@P :~ .7Y55.  . !@&amp;:!!^.^!!:#@? .  ~Y7JJ^  :Y. #@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\n@@@@@@@@@@@@J .YJ   .^7:    .^G?5YJ^?J5?G~.    ~~^.     ^5!.?@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\n@@@@@@@@@@@! :Y!             .~~!YYJYY7~~.         .     J5Y.^@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\n@@@@@@@@@@7 ^5~  :~         .JG!^~:.:~~~GY.         7!:^?5555 .@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\n@@@@@@@@@5  Y5  .P~        .5!!: ^~:~^ .!~Y.         ~J555555^ ~@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\n@@@@@@@@@   Y5!:?57         ?^  .::.::.  :J.            .:!55^  B@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\n@@@@@@@@G   .?5555~          :!^.      .~:        J:       :5^  7@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\n@@@@@@@@Y    .555^      ..     .^~~~~^:.          :~~:.     ~7  !@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\n@@@@@@@#      !P7     .!J^                            :?^    :. .@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\n@@@@@@@.       ~?    .Y^                         ....  :^        !@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\n@@@@@@P     .   ..   ::                      ^~::....::^^.        .&amp;@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\n@@@@@~     ~J        !                  .:::^.           ^^.       .&amp;@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\n@@@&amp;.      ~57.     !7        .....::::::.           .:             ?@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\n@@@.         .^~^   :.     .!?#^ .:...                              .@@@@@@@@@@@@@@@@@@@@@@@@@@#J7P@\n@@!             :J:        :~G^ .?#~   .:..         :...             @@@@@@@@@@@@@@@@@@@@&amp;G5J~.    P\n@&amp;               :5.        .. .7#!  .^^~   .:.    ^^                @@@@@@@@@@@@@@@@#7.           G\n@Y              .757            !    .?&amp;#..:.    .~     ..           &amp;@@@@@@@@@@@@@#:            .P@\n@J              ....!J?^             ^G:  ~GG  .::      .:^:.        &amp;@@@@@@@@@@@@5         .^75#@@@\n@@:..                :~?!::.         .    PJ^..            ...      Y@@@@@@@@@@@@&amp;        :#@@@@@@@@\n@@@^ .                :   ~~...          ..                      JG#@@@@@@@@@@@@@#        &amp;@@@@@@@@@\n@@@@?.                ..:.5&amp;G.:                                  G@@@@@@@@@@@@@@@@:       &amp;@@@@@@@@@\n@@@@@&amp;5~.         ::  .  :.:J?.                                 ^ .~P&amp;@@@@@@@@@@@@&amp;       7@@@@@@@@@\n@@@@@@@@@&amp;^       .  .~.                                        ^   .~J#@@@@@@@@@@@B    .  ?@@@@@@@@\n@@@@@@@@@@B        : ^G#B! .                    5&amp;.             ^     :^7&amp;@@@@@@@@@@J   :.  P@@@@@@@\n@@@@@@@@@@@Y   .^   :.  .7PP&amp;B!                 @@J^.          ^        ::B@@@@@@@@@&amp;   .   :@@@@@@@\n@@@@@@@@@@@@&amp;. :^  .    :&amp;@@@@@P.               ^&amp;P.~         ~~GY^.     ..P@@@@@@@@J    !. .@@@@@@@\n@@@@@@@@@@@@@7     G&amp;B! J@@@@@@@@?                : .^:.     ~~B@@@5.     . :JGBBBY:    ^P: J@@@@@@@\n@@@@@@@@@@@@@P.  ~7: :5G5G@@@@@@@@@Y            .:    ~..    .:5@@@@&amp;~    ..           .Y? ~@@@@@@@@\n@@@@@@@@@@@@@@&amp;? .YB?^G@@@@@@@@@@@@@&amp;?           :    7        .@@@@@@G:   .^:.      .~J!.5@@@@@@@@@\n@@@@@@@@@@@@@@@@&amp;P7^?G5@@@@@@@@@@@@@@@&amp;Y~:::~: .::    !         P@@@@@@@B~    :^^^^~!!~~5@@@@@@@@@@@\n@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@&amp;5!:   .!         .&amp;@@@@@@@@@#57~^^^~~7Y#@@@@@@@@@@@@@\n@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@#!  ~    .  .   !@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\n@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@&amp;7..        :! #@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\n@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@!!:.  .: :^~ &amp;@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\n@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@&amp;?.^?7~7YJ. !@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\n@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@&amp;. .^. ::  .7&amp;@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\n@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@# :.        :#@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\n@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@P 7.    ..!~ ?@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\n@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@J.~         5@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\n@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@#!   ..:^~G@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\n@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@&amp;BPYYG&amp;@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\n                                            Made with \u2764\ufe0f \n                                For the Community, By the Community   \n\n                                ###################################\n\n                                        Made by ElNiak\n                linkedin  - https://www.linkedin.com/in/christophe-crochet-5318a8182/ \n                                Github - https://github.com/elniak\n</code></pre>"},{"location":"home.html#overview","title":"\ud83d\ude80 Overview","text":"<p>PANTHER combines advanced techniques in network protocol verification, integrating the Shadow network simulator with the Ivy formal verification tool. This powerful synergy allows for the detailed examination of time properties in network protocols. A specialized time module enhances Ivy's capabilities, enabling it to handle complex quantitative-time properties with greater precision.</p> <p>PANTHER's effectiveness is demonstrated through its application to the QUIC protocol. By refining QUIC's formal specification in Ivy, PANTHER not only verifies essential aspects of the protocol but also identifies real-world implementation errors, showcasing its practical utility. This innovative integration paves the way for more thorough, efficient, and precise protocol testing and verification.</p>"},{"location":"home.html#multi-protocol-support","title":"\u2795 Multi-Protocol Support","text":"<p>PANTHER supports multiple protocols. To add new protocol specifications, place them in the <code>protocols</code> directory following the existing structure. Currently supported protocols include: - [X] QUIC</p> <ul> <li> <p> MiniP</p> </li> <li> <p> BGP</p> </li> <li> <p> CoAP</p> </li> </ul>"},{"location":"home.html#multi-implementation-support","title":"\u2795 Multi-Implementation Support","text":"<p>PANTHER supports multiple implementations. To add new implementations, place them in the <code>implementations</code> directory following the existing structure.</p>"},{"location":"home.html#advanced-persistent-threat-simulation","title":"\u2795 Advanced Persistent Threat Simulation","text":"<p>PANTHER can simulate advanced persistent threats (APTs) in network protocols. By leveraging the Shadow network simulator, PANTHER models and analyzes the behavior of APTs in a controlled environment, providing valuable insights into potential vulnerabilities and attack vectors. Supported simulations include: - [X] QUIC</p> <ul> <li> MiniP</li> </ul>"},{"location":"home.html#useful-links","title":"Useful links","text":"<ul> <li> <p>Usage</p> </li> <li> <p>Installation</p> </li> <li> <p>Contributing</p> </li> <li> <p>License</p> </li> </ul>"},{"location":"home.html#references","title":"\ud83d\udcd6 References","text":"<p>For further reading and context on the topics and methodologies used in this tool, refer to the following articles:</p> <ul> <li> <p>Crochet, C., Rousseaux, T., Piraux, M., Sambon, J.-F., &amp; Legay, A. (2021). Verifying quic implementations using ivy. In Proceedings of the 2021 Workshop on Evolution, Performance and Interoperability of QUIC. DOI</p> </li> <li> <p>Crochet, C., &amp; Sambon, J.-F. (2021). Towards verification of QUIC and its extensions. (Master's thesis, UCL - Ecole polytechnique de Louvain). Available at UCLouvain. Keywords: QUIC, Formal Verification, RFC, IETF, Specification, Ivy, Network.</p> </li> </ul> <p>For other useful resources, see the following:</p> <ul> <li> <p>McMillan, K. L., &amp; Padon, O. (2018). Deductive Verification in Decidable Fragments with Ivy. In A. Podelski (Ed.), Static Analysis - 25th International Symposium, SAS 2018, Freiburg, Germany, August 29-31, 2018, Proceedings (pp. 43\u201355). Springer. DOI - PDF</p> </li> <li> <p>Taube, M., Losa, G., McMillan, K. L., Padon, O., Sagiv, M., Shoham, S., Wilcox, J. R., &amp; Woos, D. (2018). Modularity for decidability of deductive verification with applications to distributed systems. In Proceedings of the 39th ACM SIGPLAN Conference on Programming Language Design and Implementation, PLDI 2018, Philadelphia, PA, USA, June 18-22, 2018 (pp. 662\u2013677). ACM. DOI</p> </li> <li> <p>Padon, O., Hoenicke, J., McMillan, K. L., Podelski, A., Sagiv, M., &amp; Shoham, S. (2018). Temporal Prophecy for Proving Temporal Properties of Infinite-State Systems. In 2018 Formal Methods in Computer Aided Design, FMCAD 2018, Austin, TX, USA, October 30 - November 2, 2018 (pp. 1\u201311). IEEE. DOI - PDF</p> </li> <li> <p>Padon, O., McMillan, K. L., Panda, A., Sagiv, M., &amp; Shoham, S. (2016). Ivy: safety verification by interactive generalization. In Proceedings of the 37th ACM SIGPLAN Conference on Programming Language Design and Implementation, PLDI 2016, Santa Barbara, CA, USA, June 13-17, 2016 (pp. 614\u2013630). ACM. DOI</p> </li> <li> <p>McMillan, K. L. (2016). Modular specification and verification of a cache-coherent interface. In 2016 Formal Methods in Computer-Aided Design, FMCAD 2016, Mountain View, CA, USA, October 3-6, 2016 (pp. 109\u2013116). DOI</p> </li> <li> <p>McMillan, K. L., &amp; Zuck, L. D. (2019). Formal specification and testing of QUIC. In Proceedings of ACM Special Interest Group on Data Communication (SIGCOMM\u201919). ACM. Note: to appear. PDF</p> </li> <li> <p>Ivy Documentation</p> </li> <li> <p>Ivy GitHub Repository</p> </li> </ul>"},{"location":"panther/panther_cli.html","title":"Panther cli","text":""},{"location":"panther/panther_cli.html#load_config","title":"load_config","text":"<p>source <pre><code>.load_config(\n   config_path\n)\n</code></pre></p> <p>summary</p> <p>Args</p> <ul> <li>config_path (type) : description</li> </ul> <p>Returns</p> <ul> <li>type  : description</li> </ul>"},{"location":"panther/panther_cli.html#execute_command","title":"execute_command","text":"<p>source <pre><code>.execute_command(\n   command, tmux = None, cwd = None\n)\n</code></pre></p> <p>summary</p> <p>Args</p> <ul> <li>command (type) : description</li> <li>tmux (type, optional) : description. Defaults to None.</li> <li>cwd (type, optional) : description. Defaults to None.</li> </ul> <p>Raises</p> <ul> <li>CalledProcessError  : description</li> </ul>"},{"location":"panther/panther_cli.html#get_current_branch","title":"get_current_branch","text":"<p>source <pre><code>.get_current_branch()\n</code></pre></p> <p>summary</p> <p>Returns</p> <ul> <li>type  : description</li> </ul>"},{"location":"panther/panther_cli.html#start_tool","title":"start_tool","text":"<p>source <pre><code>.start_tool(\n   config, swarm = False\n)\n</code></pre></p> <p>summary</p> <p>Args</p> <ul> <li>config (type) : description</li> <li>swarm (bool, optional) : description. Defaults to False.</li> </ul>"},{"location":"panther/panther_cli.html#install_tool","title":"install_tool","text":"<p>source <pre><code>.install_tool(\n   config, branch = None\n)\n</code></pre></p> <p>summary</p> <p>Args</p> <ul> <li>config (type) : description</li> <li>branch (type, optional) : description. Defaults to None.</li> </ul>"},{"location":"panther/panther_cli.html#clean_tool","title":"clean_tool","text":"<p>source <pre><code>.clean_tool(\n   config\n)\n</code></pre></p> <p>summary</p> <p>Args</p> <ul> <li>config (type) : description</li> </ul>"},{"location":"panther/panther_cli.html#build_webapp","title":"build_webapp","text":"<p>source <pre><code>.build_webapp(\n   push = False\n)\n</code></pre></p> <p>summary</p> <p>Args</p> <ul> <li>push (bool, optional) : description. Defaults to False.</li> </ul>"},{"location":"panther/panther_cli.html#build_worker","title":"build_worker","text":"<p>source <pre><code>.build_worker(\n   implem, config, push = False\n)\n</code></pre></p> <p>summary</p> <p>Args</p> <ul> <li>implem (type) : description</li> <li>config (type) : description</li> <li>push (bool, optional) : description. Defaults to False.</li> </ul>"},{"location":"panther/panther_cli.html#build_docker_visualizer","title":"build_docker_visualizer","text":"<p>source <pre><code>.build_docker_visualizer(\n   push = False\n)\n</code></pre></p> <p>summary</p> <p>Args</p> <ul> <li>push (bool, optional) : description. Defaults to False.</li> </ul>"},{"location":"panther/panther_cli.html#stop_tool","title":"stop_tool","text":"<p>source <pre><code>.stop_tool()\n</code></pre></p> <p>summary</p>"},{"location":"panther/panther_cli.html#start_bash_container","title":"start_bash_container","text":"<p>source <pre><code>.start_bash_container(\n   implem\n)\n</code></pre></p> <p>summary Start a Docker container with the specified parameters.</p> <p>Args</p> <ul> <li>implem (type) : description</li> </ul> <p>Returns</p> <ul> <li>type  : description</li> </ul>"},{"location":"panther/panther_cli.html#is_tmux_session","title":"is_tmux_session","text":"<p>source <pre><code>.is_tmux_session()\n</code></pre></p> <p>Check if running inside a tmux session.</p>"},{"location":"panther/panther_cli_click.html","title":"Panther cli click","text":""},{"location":"panther/panther_cli_click.html#log_docker_output","title":"log_docker_output","text":"<p>source <pre><code>.log_docker_output(\n   generator, task_name: str = 'dockercommandexecution'\n)\n</code></pre></p> <p>Log output to console from a generator returned from docker client :param Any generator: The generator to log the output of :param str task_name: A name to give the task, i.e. 'Build database image', used for logging</p>"},{"location":"panther/panther_cli_click.html#container_exists","title":"container_exists","text":"<p>source <pre><code>.container_exists(\n   client, container_name\n)\n</code></pre></p> <p>Check if the Docker container exists.</p>"},{"location":"panther/panther_cli_click.html#get_container_ip","title":"get_container_ip","text":"<p>source <pre><code>.get_container_ip(\n   client, container_name\n)\n</code></pre></p> <p>Get the IP address of the Docker container.</p>"},{"location":"panther/panther_cli_click.html#restore_hosts_file","title":"restore_hosts_file","text":"<p>source <pre><code>.restore_hosts_file()\n</code></pre></p> <p>Restore the original /etc/hosts file from the backup.</p>"},{"location":"panther/panther_cli_click.html#append_to_hosts_file","title":"append_to_hosts_file","text":"<p>source <pre><code>.append_to_hosts_file(\n   entry\n)\n</code></pre></p> <p>Append a new entry to the /etc/hosts file.</p>"},{"location":"panther/panther_cli_click.html#load_config","title":"load_config","text":"<p>source <pre><code>.load_config(\n   config_path\n)\n</code></pre></p>"},{"location":"panther/panther_cli_click.html#execute_command","title":"execute_command","text":"<p>source <pre><code>.execute_command(\n   command\n)\n</code></pre></p>"},{"location":"panther/panther_cli_click.html#get_current_branch","title":"get_current_branch","text":"<p>source <pre><code>.get_current_branch()\n</code></pre></p>"},{"location":"panther/panther_cli_click.html#network_exists","title":"network_exists","text":"<p>source <pre><code>.network_exists(\n   client, network_name\n)\n</code></pre></p> <p>Check if the Docker network exists.</p>"},{"location":"panther/panther_cli_click.html#create_network","title":"create_network","text":"<p>source <pre><code>.create_network(\n   client, network_name, gateway, subnet\n)\n</code></pre></p> <p>Create a Docker network with the specified gateway and subnet.</p>"},{"location":"panther/panther_cli_click.html#create_docker_network","title":"create_docker_network","text":"<p>source <pre><code>.create_docker_network()\n</code></pre></p>"},{"location":"panther/panther_cli_click.html#create_docker_compose_config","title":"create_docker_compose_config","text":"<p>source <pre><code>.create_docker_compose_config()\n</code></pre></p>"},{"location":"panther/panther_cli_click.html#monitor_docker_usage","title":"monitor_docker_usage","text":"<p>source <pre><code>.monitor_docker_usage(\n   container_name, interval = 1.0, duration = 10.0\n)\n</code></pre></p> <p>Monitor the CPU and memory usage of a Docker container.</p> <p>:param container_name: Name or ID of the Docker container to monitor :param interval: Time interval (in seconds) between checks :param duration: Total duration (in seconds) to monitor</p>"},{"location":"panther/panther_cli_click.html#build_docker_visualizer","title":"build_docker_visualizer","text":"<p>source <pre><code>.build_docker_visualizer()\n</code></pre></p>"},{"location":"panther/panther_cli_click.html#get_nproc","title":"get_nproc","text":"<p>source <pre><code>.get_nproc()\n</code></pre></p> <p>Get the number of processors available.</p>"},{"location":"panther/panther_compose.html","title":"Panther compose","text":""},{"location":"panther/panther_compose.html#update_docker_compose","title":"update_docker_compose","text":"<p>source <pre><code>.update_docker_compose(\n   config, yaml_path = 'docker-compose.yml', prod = False\n)\n</code></pre></p> <p>summary</p> <p>Args</p> <ul> <li>config (type) : description</li> <li>yaml_path (str, optional) : description. Defaults to \"docker-compose.yml\".</li> <li>prod (bool, optional) : description. Defaults to False.</li> </ul> <p>Returns</p> <ul> <li>type  : description</li> </ul>"},{"location":"panther/panther_docker.html","title":"Panther docker","text":""},{"location":"panther/panther_docker.html#log_docker_output","title":"log_docker_output","text":"<p>source <pre><code>.log_docker_output(\n   generator, task_name: str = 'dockercommandexecution'\n)\n</code></pre></p> <p>summary</p> <p>Args</p> <ul> <li>generator (type) : description</li> <li>task_name (str, optional) : description. Defaults to \"docker command execution\".</li> </ul> <p>Raises</p> <ul> <li>ValueError  : description</li> </ul>"},{"location":"panther/panther_docker.html#container_exists","title":"container_exists","text":"<p>source <pre><code>.container_exists(\n   client, container_name\n)\n</code></pre></p> <p>summary Check if the Docker container exists.</p> <p>Args</p> <ul> <li>client (type) : description</li> <li>container_name (type) : description</li> </ul> <p>Returns</p> <ul> <li>type  : description</li> </ul>"},{"location":"panther/panther_docker.html#get_container_ip","title":"get_container_ip","text":"<p>source <pre><code>.get_container_ip(\n   client, container_name\n)\n</code></pre></p> <p>summary Get the IP address of the Docker container.</p> <p>Args</p> <ul> <li>client (type) : description</li> <li>container_name (type) : description</li> </ul> <p>Returns</p> <ul> <li>type  : description</li> </ul>"},{"location":"panther/panther_docker.html#get_panther_container","title":"get_panther_container","text":"<p>source <pre><code>.get_panther_container()\n</code></pre></p> <p>summary</p> <p>Returns</p> <ul> <li>type  : description</li> </ul>"},{"location":"panther/panther_docker.html#push_image_to_registry","title":"push_image_to_registry","text":"<p>source <pre><code>.push_image_to_registry(\n   image_name, registry_url = 'elniak', tag = 'latest'\n)\n</code></pre></p> <p>summary Push a Docker image to a registry.</p> <p>Args</p> <ul> <li>image_name (type) : description</li> <li>registry_url (str, optional) : description. Defaults to \"elniak\".</li> <li>tag (str, optional) : description. Defaults to \"latest\".</li> </ul>"},{"location":"panther/panther_docker.html#restore_hosts_file","title":"restore_hosts_file","text":"<p>source <pre><code>.restore_hosts_file()\n</code></pre></p> <p>summary Restore the original /etc/hosts file from the backup.</p>"},{"location":"panther/panther_docker.html#append_to_hosts_file","title":"append_to_hosts_file","text":"<p>source <pre><code>.append_to_hosts_file(\n   entry\n)\n</code></pre></p> <p>summary Append a new entry to the /etc/hosts file.</p> <p>Args</p> <ul> <li>entry (type) : description</li> </ul>"},{"location":"panther/panther_docker.html#network_exists","title":"network_exists","text":"<p>source <pre><code>.network_exists(\n   client, network_name\n)\n</code></pre></p> <p>summary Check if the Docker network exists.</p> <p>Args</p> <ul> <li>client (type) : description</li> <li>network_name (type) : description</li> </ul> <p>Returns</p> <ul> <li>type  : description</li> </ul>"},{"location":"panther/panther_docker.html#create_network","title":"create_network","text":"<p>source <pre><code>.create_network(\n   client, network_name, gateway, subnet\n)\n</code></pre></p> <p>summary Create a Docker network with the specified gateway and subnet.</p> <p>Args</p> <ul> <li>client (type) : description</li> <li>network_name (type) : description</li> <li>gateway (type) : description</li> <li>subnet (type) : description</li> </ul>"},{"location":"panther/panther_docker.html#create_docker_network","title":"create_docker_network","text":"<p>source <pre><code>.create_docker_network()\n</code></pre></p> <p>summary Create the docker network</p>"},{"location":"panther/panther_docker.html#monitor_docker_usage","title":"monitor_docker_usage","text":"<p>source <pre><code>.monitor_docker_usage(\n   docker_to_monitor, interval = 1.0, duration = 10.0\n)\n</code></pre></p> <p>summary Monitor the CPU and memory usage of a Docker container.</p> <p>Args</p> <ul> <li>docker_to_monitor (type) : description</li> <li>interval (float, optional) : description. Defaults to 1.0.</li> <li>duration (float, optional) : description. Defaults to 10.0.</li> </ul>"},{"location":"panther/panther_swarm.html","title":"Panther swarm","text":""},{"location":"panther/panther_swarm.html#update_docker_swarm","title":"update_docker_swarm","text":"<p>source <pre><code>.update_docker_swarm(\n   config, yaml_path = 'docker-swarm.yml', prod = False\n)\n</code></pre></p> <p>summary</p> <p>Args</p> <ul> <li>config (type) : description</li> <li>yaml_path (str, optional) : description. Defaults to \"docker-swarm.yml\".</li> <li>prod (bool, optional) : description. Defaults to False.</li> </ul> <p>Returns</p> <ul> <li>type  : description</li> </ul>"},{"location":"panther/panther_swarm.html#apply_scalability","title":"apply_scalability","text":"<p>source <pre><code>.apply_scalability(\n   service_name, threshold, scale_factor, stack_name = 'panther'\n)\n</code></pre></p>"},{"location":"panther/panther_scalability/scalability_policy.html","title":"Scalability policy","text":""},{"location":"panther/panther_scalability/scalability_policy.html#end_script","title":"end_script","text":"<p>source <pre><code>.end_script(\n   reason\n)\n</code></pre></p>"},{"location":"panther/panther_scalability/scalability_policy.html#get_workers_ips","title":"get_workers_ips","text":"<p>source <pre><code>.get_workers_ips()\n</code></pre></p>"},{"location":"panther/panther_scalability/scalability_policy.html#update_avg","title":"update_avg","text":"<p>source <pre><code>.update_avg(\n   service, workers_ips\n)\n</code></pre></p>"},{"location":"panther/panther_scalability/scalability_policy.html#get_container_cpu_usage","title":"get_container_cpu_usage","text":"<p>source <pre><code>.get_container_cpu_usage(\n   container_id\n)\n</code></pre></p>"},{"location":"panther/panther_scalability/scalability_policy.html#get_stats_cpu_usage","title":"get_stats_cpu_usage","text":"<p>source <pre><code>.get_stats_cpu_usage(\n   stats\n)\n</code></pre></p>"},{"location":"panther/panther_scalability/scalability_policy.html#threshold_not_reached","title":"threshold_not_reached","text":"<p>source <pre><code>.threshold_not_reached(\n   avg_cpu, threshold\n)\n</code></pre></p>"},{"location":"panther/panther_webapp/app/panther_server.html","title":"Panther server","text":""},{"location":"panther/panther_webapp/app/panther_server.html#pfvserver","title":"PFVServer","text":"<p>source <pre><code>PFVServer(\n   dir_path = None\n)\n</code></pre></p> <p>Methods:</p>"},{"location":"panther/panther_webapp/app/panther_server.html#get_quic_vizualier","title":".get_quic_vizualier","text":"<p>source <pre><code>.get_quic_vizualier()\n</code></pre></p>"},{"location":"panther/panther_webapp/app/panther_server.html#reset_experiment_state","title":".reset_experiment_state","text":"<p>source <pre><code>.reset_experiment_state()\n</code></pre></p>"},{"location":"panther/panther_webapp/app/panther_server.html#emit_progress_update","title":".emit_progress_update","text":"<p>source <pre><code>.emit_progress_update()\n</code></pre></p>"},{"location":"panther/panther_webapp/app/panther_server.html#get_args","title":".get_args","text":"<p>source <pre><code>.get_args()\n</code></pre></p> <p>summary Get list of argument for automatic GUI generation</p> <p>Returns</p> <ul> <li>type  : description</li> </ul>"},{"location":"panther/panther_webapp/app/panther_server.html#start_exp","title":".start_exp","text":"<p>source <pre><code>.start_exp(\n   experiment_arguments, protocol_arguments, sequencial_test = True\n)\n</code></pre></p>"},{"location":"panther/panther_webapp/app/panther_server.html#start_experiment_thread","title":".start_experiment_thread","text":"<p>source <pre><code>.start_experiment_thread(\n   experiment_arguments, protocol_arguments\n)\n</code></pre></p>"},{"location":"panther/panther_webapp/app/panther_server.html#change_current_protocol","title":".change_current_protocol","text":"<p>source <pre><code>.change_current_protocol(\n   protocol\n)\n</code></pre></p>"},{"location":"panther/panther_webapp/app/panther_server.html#get_attack_model","title":".get_attack_model","text":"<p>source <pre><code>.get_attack_model(\n   attack_model\n)\n</code></pre></p> <p>It returns the attack model :param attack_model: the attack model :return: the attack model</p>"},{"location":"panther/panther_webapp/app/panther_server.html#run","title":".run","text":"<p>source <pre><code>.run()\n</code></pre></p>"},{"location":"panther/panther_webapp/app/utils/cytoscape_generator.html","title":"Cytoscape generator","text":""},{"location":"panther/panther_webapp/app/utils/cytoscape_generator.html#setup_cytoscape","title":"setup_cytoscape","text":"<p>source <pre><code>.setup_cytoscape()\n</code></pre></p>"},{"location":"panther/panther_webapp/app/utils/cytoscape_generator.html#setup_quic_model","title":"setup_quic_model","text":"<p>source <pre><code>.setup_quic_model(\n   ivy_test_path\n)\n</code></pre></p>"},{"location":"panther/panther_webapp/app/utils/cytoscape_generator.html#get_relations","title":"get_relations","text":"<p>source <pre><code>.get_relations(\n   mapping\n)\n</code></pre></p>"},{"location":"panther/panther_webapp/app/utils/cytoscape_generator.html#add_assertion","title":"add_assertion","text":"<p>source <pre><code>.add_assertion(\n   in_action, mapping, splitted_line\n)\n</code></pre></p>"},{"location":"panther/panther_webapp/app/utils/cytoscape_generator.html#setup_assertions","title":"setup_assertions","text":"<p>source <pre><code>.setup_assertions(\n   act, in_action, in_action_assumptions, in_action_guarantees, line, mapping\n)\n</code></pre></p>"},{"location":"panther/panther_webapp/app/utils/cytoscape_generator.html#find_external_action","title":"find_external_action","text":"<p>source <pre><code>.find_external_action(\n   action_name, current_action, file, found, mapping\n)\n</code></pre></p>"},{"location":"panther/panther_webapp/app/utils/cytoscape_generator.html#find_external_object_action","title":"find_external_object_action","text":"<p>source <pre><code>.find_external_object_action(\n   action_name, current_action, file, found, mapping\n)\n</code></pre></p>"},{"location":"panther/panther_webapp/app/utils/cytoscape_generator.html#get_action_implementation","title":"get_action_implementation","text":"<p>source <pre><code>.get_action_implementation(\n   content, implem_elem, line, new_file, splitted_line\n)\n</code></pre></p>"},{"location":"panther/panther_webapp/app/utils/cytoscape_generator.html#get_called_action_implementation","title":"get_called_action_implementation","text":"<p>source <pre><code>.get_called_action_implementation(\n   content, line, new_file, splitted_line\n)\n</code></pre></p>"},{"location":"panther/panther_webapp/app/utils/cytoscape_generator.html#get_action_return","title":"get_action_return","text":"<p>source <pre><code>.get_action_return(\n   current_elem, signature\n)\n</code></pre></p>"},{"location":"panther/panther_webapp/app/utils/cytoscape_generator.html#get_action_parameters","title":"get_action_parameters","text":"<p>source <pre><code>.get_action_parameters(\n   action_parameters, current_elem\n)\n</code></pre></p>"},{"location":"panther/panther_webapp/app/utils/cytoscape_generator.html#init_mapping","title":"init_mapping","text":"<p>source <pre><code>.init_mapping(\n   action_name, content, has_implem, is_init, is_module_object,\n   is_module_object_present, line, mapping, object_name, splitted_line\n)\n</code></pre></p>"},{"location":"panther/panther_webapp/app/utils/cytoscape_generator.html#get_module_object_attributes","title":"get_module_object_attributes","text":"<p>source <pre><code>.get_module_object_attributes(\n   action_name, content, line, mapping, object_name, splitted_line\n)\n</code></pre></p>"},{"location":"panther/panther_webapp/app/utils/cytoscape_generator.html#check_object_present","title":"check_object_present","text":"<p>source <pre><code>.check_object_present(\n   action_name, content, is_module_object_present, line, mapping, object_name,\n   splitted_line\n)\n</code></pre></p>"},{"location":"panther/panther_webapp/app/utils/cytoscape_generator.html#init_tp_mapping","title":"init_tp_mapping","text":"<p>source <pre><code>.init_tp_mapping(\n   content, mapping, splitted_line\n)\n</code></pre></p>"},{"location":"panther/panther_webapp/app/utils/cytoscape_generator.html#get_prefix","title":"get_prefix","text":"<p>source <pre><code>.get_prefix(\n   splitted_line\n)\n</code></pre></p>"},{"location":"panther/panther_webapp/app/utils/cytoscape_generator.html#change_permission","title":"change_permission","text":"<p>source <pre><code>.change_permission(\n   ivy_test_path\n)\n</code></pre></p>"},{"location":"panther/panther_webapp/app/utils/cytoscape_generator.html#split_line","title":"split_line","text":"<p>source <pre><code>.split_line(\n   line\n)\n</code></pre></p>"},{"location":"panther/panther_worker/app/panther.html","title":"Panther","text":""},{"location":"panther/panther_worker/app/panther.html#panther","title":"Panther","text":"<p>source </p> <p>Methods:</p>"},{"location":"panther/panther_worker/app/panther.html#find_ivy_files","title":".find_ivy_files","text":"<p>source <pre><code>.find_ivy_files()\n</code></pre></p> <p>Recursively find all .ivy files in the specified folder and its subfolders, excluding those with 'test' in the filename.</p> <p>:param root_folder: The root folder to start the search from. :return: A list of paths to the found .ivy files.</p>"},{"location":"panther/panther_worker/app/panther.html#update_ivy_tool","title":".update_ivy_tool","text":"<p>source <pre><code>.update_ivy_tool()\n</code></pre></p>"},{"location":"panther/panther_worker/app/panther.html#setup_ivy_model","title":".setup_ivy_model","text":"<p>source <pre><code>.setup_ivy_model()\n</code></pre></p>"},{"location":"panther/panther_worker/app/panther.html#remove_includes","title":".remove_includes","text":"<p>source <pre><code>.remove_includes()\n</code></pre></p>"},{"location":"panther/panther_worker/app/panther.html#build_tests","title":".build_tests","text":"<p>source <pre><code>.build_tests(\n   test_to_do = {}\n)\n</code></pre></p>"},{"location":"panther/panther_worker/app/panther.html#pair_compile_file","title":".pair_compile_file","text":"<p>source <pre><code>.pair_compile_file(\n   file, replacements\n)\n</code></pre></p>"},{"location":"panther/panther_worker/app/panther.html#build_file","title":".build_file","text":"<p>source <pre><code>.build_file(\n   file\n)\n</code></pre></p>"},{"location":"panther/panther_worker/app/panther.html#compile_file","title":".compile_file","text":"<p>source <pre><code>.compile_file(\n   file\n)\n</code></pre></p>"},{"location":"panther/panther_worker/app/panther.html#launch_experiments","title":".launch_experiments","text":"<p>source <pre><code>.launch_experiments(\n   implementations = None\n)\n</code></pre></p>"},{"location":"panther/panther_worker/app/panther.html#generate_uml_trace","title":".generate_uml_trace","text":"<p>source <pre><code>.generate_uml_trace()\n</code></pre></p>"},{"location":"panther/panther_worker/app/panther.html#stop_stdout","title":".stop_stdout","text":"<p>source <pre><code>.stop_stdout()\n</code></pre></p>"},{"location":"panther/panther_worker/app/panther_client.html","title":"Panther client","text":""},{"location":"panther/panther_worker/app/panther_client.html#pfvclient","title":"PFVClient","text":"<p>source <pre><code>PFVClient(\n   dir_path = None\n)\n</code></pre></p> <p>Methods:</p>"},{"location":"panther/panther_worker/app/panther_client.html#start_experiment_in_thread","title":".start_experiment_in_thread","text":"<p>source <pre><code>.start_experiment_in_thread(\n   user_data, tool\n)\n</code></pre></p>"},{"location":"panther/panther_worker/app/panther_client.html#run","title":".run","text":"<p>source <pre><code>.run()\n</code></pre></p>"},{"location":"panther/panther_worker/app/argument_parser/ArgumentParserRunner.html","title":"ArgumentParserRunner","text":""},{"location":"panther/panther_worker/app/argument_parser/ArgumentParserRunner.html#argumentparserrunner","title":"ArgumentParserRunner","text":"<p>source </p> <p>Methods:</p>"},{"location":"panther/panther_worker/app/argument_parser/ArgumentParserRunner.html#parse_arguments","title":".parse_arguments","text":"<p>source <pre><code>.parse_arguments(\n   allow_unk = False\n)\n</code></pre></p>"},{"location":"panther/panther_worker/app/logger/CustomFormatter.html","title":"CustomFormatter","text":""},{"location":"panther/panther_worker/app/logger/CustomFormatter.html#customformatter","title":"CustomFormatter","text":"<p>source </p> <p>Methods:</p>"},{"location":"panther/panther_worker/app/logger/CustomFormatter.html#format","title":".format","text":"<p>source <pre><code>.format(\n   record\n)\n</code></pre></p>"},{"location":"panther/panther_worker/app/panther_config/panther_config.html","title":"Panther config","text":""},{"location":"panther/panther_worker/app/panther_config/panther_config.html#globalconfig","title":"GlobalConfig","text":"<p>source <pre><code>GlobalConfig()\n</code></pre></p>"},{"location":"panther/panther_worker/app/panther_config/panther_config.html#quicimplementations","title":"QuicImplementations","text":"<p>source <pre><code>QuicImplementations()\n</code></pre></p>"},{"location":"panther/panther_worker/app/panther_config/panther_config.html#quictools","title":"QuicTools","text":"<p>source <pre><code>QuicTools()\n</code></pre></p>"},{"location":"panther/panther_worker/app/panther_config/panther_config.html#minipimplementations","title":"MinipImplementations","text":"<p>source <pre><code>MinipImplementations()\n</code></pre></p>"},{"location":"panther/panther_worker/app/panther_config/panther_config.html#bgpimplementations","title":"BgpImplementations","text":"<p>source <pre><code>BgpImplementations()\n</code></pre></p>"},{"location":"panther/panther_worker/app/panther_config/panther_config.html#aptimplementations","title":"AptImplementations","text":"<p>source <pre><code>AptImplementations()\n</code></pre></p>"},{"location":"panther/panther_worker/app/panther_config/panther_config.html#pantherconfig","title":"PantherConfig","text":"<p>source <pre><code>PantherConfig()\n</code></pre></p>"},{"location":"panther/panther_worker/app/panther_config/panther_config.html#globalparameters","title":"GlobalParameters","text":"<p>source <pre><code>GlobalParameters()\n</code></pre></p>"},{"location":"panther/panther_worker/app/panther_config/panther_config.html#debugparameters","title":"DebugParameters","text":"<p>source <pre><code>DebugParameters()\n</code></pre></p>"},{"location":"panther/panther_worker/app/panther_config/panther_config.html#netparameters","title":"NetParameters","text":"<p>source <pre><code>NetParameters()\n</code></pre></p>"},{"location":"panther/panther_worker/app/panther_config/panther_config.html#shadowparameters","title":"ShadowParameters","text":"<p>source <pre><code>ShadowParameters()\n</code></pre></p>"},{"location":"panther/panther_worker/app/panther_config/panther_config.html#verifiedprotocol","title":"VerifiedProtocol","text":"<p>source <pre><code>VerifiedProtocol()\n</code></pre></p>"},{"location":"panther/panther_worker/app/panther_config/panther_config.html#experimentconfig","title":"ExperimentConfig","text":"<p>source <pre><code>ExperimentConfig()\n</code></pre></p>"},{"location":"panther/panther_worker/app/panther_config/panther_config.html#update_config_from_global_conf","title":"update_config_from_global_conf","text":"<p>source <pre><code>.update_config_from_global_conf(\n   config: PantherConfig, global_conf_file: str\n)\n</code></pre></p>"},{"location":"panther/panther_worker/app/panther_config/panther_config.html#update_experiment_config","title":"update_experiment_config","text":"<p>source <pre><code>.update_experiment_config(\n   experiment_parameters, current_protocol\n)\n</code></pre></p>"},{"location":"panther/panther_worker/app/panther_config/panther_config.html#execute_command","title":"execute_command","text":"<p>source <pre><code>.execute_command(\n   command, must_pass = True\n)\n</code></pre></p>"},{"location":"panther/panther_worker/app/panther_config/panther_config.html#restore_config","title":"restore_config","text":"<p>source <pre><code>.restore_config()\n</code></pre></p>"},{"location":"panther/panther_worker/app/panther_config/panther_config.html#update_config","title":"update_config","text":"<p>source <pre><code>.update_config(\n   experiment_parameters, current_protocol\n)\n</code></pre></p>"},{"location":"panther/panther_worker/app/panther_config/panther_config.html#update_protocol_config","title":"update_protocol_config","text":"<p>source <pre><code>.update_protocol_config(\n   protocol_argument, current_protocol, current_tests\n)\n</code></pre></p>"},{"location":"panther/panther_worker/app/panther_config/panther_config.html#get_experiment_config","title":"get_experiment_config","text":"<p>source <pre><code>.get_experiment_config(\n   new_current_protocol = None, get_all_test = False, get_default_conf = False\n)\n</code></pre></p>"},{"location":"panther/panther_worker/app/panther_config/panther_config.html#get_protocol_config","title":"get_protocol_config","text":"<p>source <pre><code>.get_protocol_config(\n   config, protocol, get_all_test = False, get_default_conf = False\n)\n</code></pre></p>"},{"location":"panther/panther_worker/app/panther_runner/panther_apt_runner.html","title":"Panther apt runner","text":""},{"location":"panther/panther_worker/app/panther_runner/panther_apt_runner.html#aptrunner","title":"APTRunner","text":"<p>source <pre><code>APTRunner(\n   config, protocol_config, current_protocol, implems, executed_test = []\n)\n</code></pre></p> <p>Methods:</p>"},{"location":"panther/panther_worker/app/panther_runner/panther_apt_runner.html#get_exp_stats","title":".get_exp_stats","text":"<p>source <pre><code>.get_exp_stats(\n   implem, test, run_id, pcap_name, i\n)\n</code></pre></p>"},{"location":"panther/panther_worker/app/panther_runner/panther_apt_runner.html#run_exp","title":".run_exp","text":"<p>source <pre><code>.run_exp(\n   implem\n)\n</code></pre></p>"},{"location":"panther/panther_worker/app/panther_runner/panther_minip_runner.html","title":"Panther minip runner","text":""},{"location":"panther/panther_worker/app/panther_runner/panther_minip_runner.html#miniprunner","title":"MiniPRunner","text":"<p>source <pre><code>MiniPRunner(\n   config, protocol_config, current_protocol, implems, executed_test = []\n)\n</code></pre></p> <p>Methods:</p>"},{"location":"panther/panther_worker/app/panther_runner/panther_minip_runner.html#get_exp_stats","title":".get_exp_stats","text":"<p>source <pre><code>.get_exp_stats(\n   implem, test, run_id, pcap_name, i\n)\n</code></pre></p>"},{"location":"panther/panther_worker/app/panther_runner/panther_minip_runner.html#set_process_limits","title":".set_process_limits","text":"<p>source <pre><code>.set_process_limits()\n</code></pre></p>"},{"location":"panther/panther_worker/app/panther_runner/panther_minip_runner.html#run_exp","title":".run_exp","text":"<p>source <pre><code>.run_exp(\n   implem\n)\n</code></pre></p>"},{"location":"panther/panther_worker/app/panther_runner/panther_quic_runner.html","title":"Panther quic runner","text":""},{"location":"panther/panther_worker/app/panther_runner/panther_quic_runner.html#quicrunner","title":"QUICRunner","text":"<p>source <pre><code>QUICRunner(\n   config, protocol_config, current_protocol, implems, executed_test = []\n)\n</code></pre></p> <p>Methods:</p>"},{"location":"panther/panther_worker/app/panther_runner/panther_quic_runner.html#get_exp_stats","title":".get_exp_stats","text":"<p>source <pre><code>.get_exp_stats(\n   implem, test, run_id, pcap_name, i\n)\n</code></pre></p>"},{"location":"panther/panther_worker/app/panther_runner/panther_quic_runner.html#run_exp","title":".run_exp","text":"<p>source <pre><code>.run_exp(\n   implem\n)\n</code></pre></p>"},{"location":"panther/panther_worker/app/panther_runner/panther_runner.html","title":"Panther runner","text":""},{"location":"panther/panther_worker/app/panther_runner/panther_runner.html#runner","title":"Runner","text":"<p>source <pre><code>Runner(\n   config, protocol_config, current_protocol, implems, executed_test = []\n)\n</code></pre></p> <p>Methods:</p>"},{"location":"panther/panther_worker/app/panther_runner/panther_runner.html#save_shadow_binaries","title":".save_shadow_binaries","text":"<p>source <pre><code>.save_shadow_binaries(\n   implem, test, run_id\n)\n</code></pre></p> <p>Save shadow binaries for the given implementation and test.</p> <p>Parameters: implem (str): Implementation name. test (object): Test object containing test details. run_id (int): Unique run identifier.</p>"},{"location":"panther/panther_worker/app/panther_runner/panther_runner.html#get_binary_details","title":".get_binary_details","text":"<p>source <pre><code>.get_binary_details(\n   implem, mode\n)\n</code></pre></p> <p>Get binary path and name for the given implementation and mode.</p> <p>Parameters: implem (str): Implementation name. mode (str): Mode of the test (client/server).</p> <p>Returns</p> <ul> <li>tuple  : (binary_path, binary_name)</li> </ul>"},{"location":"panther/panther_worker/app/panther_runner/panther_runner.html#copy_file","title":".copy_file","text":"<p>source <pre><code>.copy_file(\n   src, dst\n)\n</code></pre></p> <p>Copy a file from source to destination.</p> <p>Parameters: src (str): Source file path. dst (str): Destination file path.</p>"},{"location":"panther/panther_worker/app/panther_runner/panther_runner.html#get_implementation_dir","title":".get_implementation_dir","text":"<p>source <pre><code>.get_implementation_dir(\n   implem\n)\n</code></pre></p>"},{"location":"panther/panther_worker/app/panther_runner/panther_runner.html#record_pcap","title":".record_pcap","text":"<p>source <pre><code>.record_pcap(\n   pcap_name\n)\n</code></pre></p>"},{"location":"panther/panther_worker/app/panther_runner/panther_runner.html#config_pcap","title":".config_pcap","text":"<p>source <pre><code>.config_pcap(\n   ivy_dir, implem, test\n)\n</code></pre></p>"},{"location":"panther/panther_worker/app/panther_runner/panther_runner.html#create_exp_folder","title":".create_exp_folder","text":"<p>source <pre><code>.create_exp_folder()\n</code></pre></p>"},{"location":"panther/panther_worker/app/panther_runner/panther_runner.html#setup_exp","title":".setup_exp","text":"<p>source <pre><code>.setup_exp(\n   implem\n)\n</code></pre></p>"},{"location":"panther/panther_worker/app/panther_runner/panther_runner.html#get_exp_stats","title":".get_exp_stats","text":"<p>source <pre><code>.get_exp_stats(\n   implem, test, run_id, pcap_name, i\n)\n</code></pre></p>"},{"location":"panther/panther_worker/app/panther_runner/panther_runner.html#save_shadow_res","title":".save_shadow_res","text":"<p>source <pre><code>.save_shadow_res(\n   test, i, pcap_name, run_id\n)\n</code></pre></p>"},{"location":"panther/panther_worker/app/panther_runner/panther_runner.html#run_exp","title":".run_exp","text":"<p>source <pre><code>.run_exp(\n   implem\n)\n</code></pre></p>"},{"location":"panther/panther_worker/app/panther_stats/panther_apt_stats.html","title":"Panther apt stats","text":""},{"location":"panther/panther_worker/app/panther_stats/panther_apt_stats.html#count","title":"count","text":"<p>source <pre><code>.count(\n   x\n)\n</code></pre></p>"},{"location":"panther/panther_worker/app/panther_stats/panther_apt_stats.html#maxz","title":"maxz","text":"<p>source <pre><code>.maxz(\n   x\n)\n</code></pre></p>"},{"location":"panther/panther_worker/app/panther_stats/panther_apt_stats.html#update_csv","title":"update_csv","text":"<p>source <pre><code>.update_csv(\n   run_id, implem_name, mode, test_name, pcapFile, OutputFile, out,\n   initial_version\n)\n</code></pre></p>"},{"location":"panther/panther_worker/app/panther_stats/panther_apt_stats.html#merge_dats","title":"merge_dats","text":"<p>source <pre><code>.merge_dats()\n</code></pre></p>"},{"location":"panther/panther_worker/app/panther_stats/panther_apt_stats.html#make_dat","title":"make_dat","text":"<p>source <pre><code>.make_dat(\n   fbase, out\n)\n</code></pre></p>"},{"location":"panther/panther_worker/app/panther_stats/panther_minip_stats.html","title":"Panther minip stats","text":""},{"location":"panther/panther_worker/app/panther_stats/panther_minip_stats.html#count","title":"count","text":"<p>source <pre><code>.count(\n   x\n)\n</code></pre></p>"},{"location":"panther/panther_worker/app/panther_stats/panther_minip_stats.html#maxz","title":"maxz","text":"<p>source <pre><code>.maxz(\n   x\n)\n</code></pre></p>"},{"location":"panther/panther_worker/app/panther_stats/panther_minip_stats.html#update_csv","title":"update_csv","text":"<p>source <pre><code>.update_csv(\n   run_id, implem_name, mode, test_name, pcapFile, OutputFile, out,\n   initial_version\n)\n</code></pre></p>"},{"location":"panther/panther_worker/app/panther_stats/panther_minip_stats.html#merge_dats","title":"merge_dats","text":"<p>source <pre><code>.merge_dats()\n</code></pre></p>"},{"location":"panther/panther_worker/app/panther_stats/panther_minip_stats.html#make_dat","title":"make_dat","text":"<p>source <pre><code>.make_dat(\n   fbase, out\n)\n</code></pre></p>"},{"location":"panther/panther_worker/app/panther_stats/panther_quic_stats.html","title":"Panther quic stats","text":""},{"location":"panther/panther_worker/app/panther_stats/panther_quic_stats.html#count","title":"count","text":"<p>source <pre><code>.count(\n   x\n)\n</code></pre></p>"},{"location":"panther/panther_worker/app/panther_stats/panther_quic_stats.html#maxz","title":"maxz","text":"<p>source <pre><code>.maxz(\n   x\n)\n</code></pre></p>"},{"location":"panther/panther_worker/app/panther_stats/panther_quic_stats.html#update_csv","title":"update_csv","text":"<p>source <pre><code>.update_csv(\n   run_id, implem_name, mode, test_name, pcapFile, OutputFile, out,\n   initial_version\n)\n</code></pre></p>"},{"location":"panther/panther_worker/app/panther_stats/panther_quic_stats.html#merge_dats","title":"merge_dats","text":"<p>source <pre><code>.merge_dats()\n</code></pre></p>"},{"location":"panther/panther_worker/app/panther_stats/panther_quic_stats.html#make_dat","title":"make_dat","text":"<p>source <pre><code>.make_dat(\n   fbase, out\n)\n</code></pre></p>"},{"location":"panther/panther_worker/app/panther_tester/panther_apt_tester.html","title":"Panther apt tester","text":""},{"location":"panther/panther_worker/app/panther_tester/panther_apt_tester.html#aptivytest","title":"APTIvyTest","text":"<p>source <pre><code>APTIvyTest(\n   args, implem_dir_server, implem_dir_client, extra_args, implementation_name,\n   mode, config, protocol_conf, implem_conf, current_protocol\n)\n</code></pre></p> <p>Methods:</p>"},{"location":"panther/panther_worker/app/panther_tester/panther_apt_tester.html#update_implementation_command","title":".update_implementation_command","text":"<p>source <pre><code>.update_implementation_command(\n   i\n)\n</code></pre></p>"},{"location":"panther/panther_worker/app/panther_tester/panther_apt_tester.html#set_process_limits","title":".set_process_limits","text":"<p>source <pre><code>.set_process_limits()\n</code></pre></p>"},{"location":"panther/panther_worker/app/panther_tester/panther_apt_tester.html#generate_shadow_config","title":".generate_shadow_config","text":"<p>source <pre><code>.generate_shadow_config()\n</code></pre></p>"},{"location":"panther/panther_worker/app/panther_tester/panther_apt_tester.html#generate_implementation_command","title":".generate_implementation_command","text":"<p>source <pre><code>.generate_implementation_command()\n</code></pre></p>"},{"location":"panther/panther_worker/app/panther_tester/panther_apt_tester.html#start_implementation","title":".start_implementation","text":"<p>source <pre><code>.start_implementation(\n   i, out, err\n)\n</code></pre></p>"},{"location":"panther/panther_worker/app/panther_tester/panther_apt_tester.html#start_tester","title":".start_tester","text":"<p>source <pre><code>.start_tester(\n   iteration, iev, i\n)\n</code></pre></p>"},{"location":"panther/panther_worker/app/panther_tester/panther_apt_tester.html#stop_processes","title":".stop_processes","text":"<p>source <pre><code>.stop_processes()\n</code></pre></p>"},{"location":"panther/panther_worker/app/panther_tester/panther_apt_tester.html#generate_tester_command","title":".generate_tester_command","text":"<p>source <pre><code>.generate_tester_command(\n   iteration, iclient\n)\n</code></pre></p>"},{"location":"panther/panther_worker/app/panther_tester/panther_minip_tester.html","title":"Panther minip tester","text":""},{"location":"panther/panther_worker/app/panther_tester/panther_minip_tester.html#minipivytest","title":"MiniPIvyTest","text":"<p>source <pre><code>MiniPIvyTest(\n   args, implem_dir_server, implem_dir_client, extra_args, implementation_name,\n   mode, config, protocol_conf, implem_conf, current_protocol\n)\n</code></pre></p> <p>Methods:</p>"},{"location":"panther/panther_worker/app/panther_tester/panther_minip_tester.html#update_implementation_command","title":".update_implementation_command","text":"<p>source <pre><code>.update_implementation_command(\n   i\n)\n</code></pre></p>"},{"location":"panther/panther_worker/app/panther_tester/panther_minip_tester.html#generate_shadow_config","title":".generate_shadow_config","text":"<p>source <pre><code>.generate_shadow_config()\n</code></pre></p>"},{"location":"panther/panther_worker/app/panther_tester/panther_minip_tester.html#generate_implementation_command","title":".generate_implementation_command","text":"<p>source <pre><code>.generate_implementation_command()\n</code></pre></p>"},{"location":"panther/panther_worker/app/panther_tester/panther_minip_tester.html#start_implementation","title":".start_implementation","text":"<p>source <pre><code>.start_implementation(\n   i, out, err\n)\n</code></pre></p>"},{"location":"panther/panther_worker/app/panther_tester/panther_minip_tester.html#start_tester","title":".start_tester","text":"<p>source <pre><code>.start_tester(\n   iteration, iev, i\n)\n</code></pre></p>"},{"location":"panther/panther_worker/app/panther_tester/panther_minip_tester.html#stop_processes","title":".stop_processes","text":"<p>source <pre><code>.stop_processes()\n</code></pre></p>"},{"location":"panther/panther_worker/app/panther_tester/panther_minip_tester.html#generate_tester_command","title":".generate_tester_command","text":"<p>source <pre><code>.generate_tester_command(\n   iteration, iclient\n)\n</code></pre></p>"},{"location":"panther/panther_worker/app/panther_tester/panther_quic_tester.html","title":"Panther quic tester","text":""},{"location":"panther/panther_worker/app/panther_tester/panther_quic_tester.html#quicivytest","title":"QUICIvyTest","text":"<p>source <pre><code>QUICIvyTest(\n   args, implem_dir_server, implem_dir_client, extra_args, implementation_name,\n   mode, config, protocol_conf, implem_conf, current_protocol\n)\n</code></pre></p> <p>Methods:</p>"},{"location":"panther/panther_worker/app/panther_tester/panther_quic_tester.html#update_implementation_command","title":".update_implementation_command","text":"<p>source <pre><code>.update_implementation_command(\n   i\n)\n</code></pre></p>"},{"location":"panther/panther_worker/app/panther_tester/panther_quic_tester.html#generate_shadow_config","title":".generate_shadow_config","text":"<p>source <pre><code>.generate_shadow_config()\n</code></pre></p>"},{"location":"panther/panther_worker/app/panther_tester/panther_quic_tester.html#generate_implementation_command","title":".generate_implementation_command","text":"<p>source <pre><code>.generate_implementation_command()\n</code></pre></p>"},{"location":"panther/panther_worker/app/panther_tester/panther_quic_tester.html#set_process_limits","title":".set_process_limits","text":"<p>source <pre><code>.set_process_limits()\n</code></pre></p>"},{"location":"panther/panther_worker/app/panther_tester/panther_quic_tester.html#start_implementation","title":".start_implementation","text":"<p>source <pre><code>.start_implementation(\n   i, out, err\n)\n</code></pre></p>"},{"location":"panther/panther_worker/app/panther_tester/panther_quic_tester.html#start_tester","title":".start_tester","text":"<p>source <pre><code>.start_tester(\n   iteration, iev, i\n)\n</code></pre></p>"},{"location":"panther/panther_worker/app/panther_tester/panther_quic_tester.html#stop_processes","title":".stop_processes","text":"<p>source <pre><code>.stop_processes()\n</code></pre></p>"},{"location":"panther/panther_worker/app/panther_tester/panther_quic_tester.html#generate_tester_command","title":".generate_tester_command","text":"<p>source <pre><code>.generate_tester_command(\n   iteration, iclient\n)\n</code></pre></p>"},{"location":"panther/panther_worker/app/panther_tester/panther_tester.html","title":"Panther tester","text":""},{"location":"panther/panther_worker/app/panther_tester/panther_tester.html#ivytest","title":"IvyTest","text":"<p>source <pre><code>IvyTest(\n   args, implem_dir_server, implem_dir_client, extra_args, implementation_name,\n   mode, config, protocol_conf, implem_conf, current_protocol\n)\n</code></pre></p> <p>Methods:</p>"},{"location":"panther/panther_worker/app/panther_tester/panther_tester.html#restore_implementation_command","title":".restore_implementation_command","text":"<p>source <pre><code>.restore_implementation_command()\n</code></pre></p>"},{"location":"panther/panther_worker/app/panther_tester/panther_tester.html#run","title":".run","text":"<p>source <pre><code>.run(\n   iteration, j, nclient, exp_folder\n)\n</code></pre></p>"},{"location":"panther/panther_worker/app/panther_tester/panther_tester.html#prep_gperf","title":".prep_gperf","text":"<p>source <pre><code>.prep_gperf(\n   iteration\n)\n</code></pre></p>"},{"location":"panther/panther_worker/app/panther_tester/panther_tester.html#generate_shadow_config","title":".generate_shadow_config","text":"<p>source <pre><code>.generate_shadow_config()\n</code></pre></p>"},{"location":"panther/panther_worker/app/panther_tester/panther_tester.html#run_gperf","title":".run_gperf","text":"<p>source <pre><code>.run_gperf(\n   command\n)\n</code></pre></p>"},{"location":"panther/panther_worker/app/panther_tester/panther_tester.html#run_expect","title":".run_expect","text":"<p>source <pre><code>.run_expect(\n   iteration\n)\n</code></pre></p>"},{"location":"panther/panther_worker/app/panther_tester/panther_tester.html#start_implementation","title":".start_implementation","text":"<p>source <pre><code>.start_implementation(\n   i, out, err\n)\n</code></pre></p>"},{"location":"panther/panther_worker/app/panther_tester/panther_tester.html#start_tester","title":".start_tester","text":"<p>source <pre><code>.start_tester(\n   iteration, iev, i\n)\n</code></pre></p>"},{"location":"panther/panther_worker/app/panther_tester/panther_tester.html#stop_processes","title":".stop_processes","text":"<p>source <pre><code>.stop_processes()\n</code></pre></p>"},{"location":"panther/panther_worker/app/panther_tester/panther_tester.html#set_process_limits","title":".set_process_limits","text":"<p>source <pre><code>.set_process_limits()\n</code></pre></p>"},{"location":"panther/panther_worker/app/panther_tester/panther_tester.html#run_tester","title":".run_tester","text":"<p>source <pre><code>.run_tester(\n   iteration, iev, i, iclient\n)\n</code></pre></p>"},{"location":"panther/panther_worker/app/panther_tester/panther_tester.html#open_out","title":".open_out","text":"<p>source <pre><code>.open_out(\n   name\n)\n</code></pre></p>"},{"location":"panther/panther_worker/app/panther_tester/panther_tester.html#update_implementation_command","title":".update_implementation_command","text":"<p>source <pre><code>.update_implementation_command()\n</code></pre></p>"},{"location":"panther/panther_worker/app/panther_tester/panther_tester.html#generate_implementation_command","title":".generate_implementation_command","text":"<p>source <pre><code>.generate_implementation_command()\n</code></pre></p>"},{"location":"panther/panther_worker/app/panther_tester/panther_tester.html#generate_tester_command","title":".generate_tester_command","text":"<p>source <pre><code>.generate_tester_command(\n   iteration, iclient\n)\n</code></pre></p>"},{"location":"reference/SUMMARY.html","title":"SUMMARY","text":"<ul> <li>panther<ul> <li>panther_cli</li> <li>panther_cli_click</li> <li>panther_compose</li> <li>panther_docker</li> <li>panther_scalability<ul> <li>scalability_policy</li> </ul> </li> <li>panther_swarm</li> <li>panther_webapp<ul> <li>app<ul> <li>panther_server</li> <li>utils<ul> <li>cytoscape_generator</li> <li>results_viewer</li> </ul> </li> </ul> </li> </ul> </li> <li>panther_worker<ul> <li>app<ul> <li>argument_parser<ul> <li>ArgumentParserRunner</li> </ul> </li> <li>logger<ul> <li>CustomFormatter</li> </ul> </li> <li>panther</li> <li>panther_client</li> <li>panther_config<ul> <li>panther_config</li> </ul> </li> <li>panther_runner<ul> <li>panther_apt_runner</li> <li>panther_minip_runner</li> <li>panther_quic_runner</li> <li>panther_runner</li> </ul> </li> <li>panther_stats<ul> <li>panther_apt_stats</li> <li>panther_minip_stats</li> <li>panther_quic_stats</li> </ul> </li> <li>panther_tester<ul> <li>panther_apt_tester</li> <li>panther_minip_tester</li> <li>panther_quic_tester</li> <li>panther_tester</li> </ul> </li> <li>panther_utils<ul> <li>panther_constant</li> </ul> </li> </ul> </li> </ul> </li> </ul> </li> </ul>"},{"location":"reference/panther/index.html","title":"Index","text":""},{"location":"reference/panther/index.html#panther","title":"panther","text":"<p>panther package.</p> <p>This package contains the panther application and its modules.</p>"},{"location":"reference/panther/panther_cli.html","title":"panther_cli","text":""},{"location":"reference/panther/panther_cli.html#panther.panther_cli","title":"panther_cli","text":"<p>This script is the main entry point for the PANTHER CLI. It provides a command-line interface to manage the PANTHER tool.</p>"},{"location":"reference/panther/panther_cli.html#panther.panther_cli.build_docker_visualizer","title":"build_docker_visualizer","text":"<pre><code>build_docker_visualizer(push=False)\n</code></pre> <p>summary</p> <p>Parameters:</p> <ul> <li> <code>push</code>               (<code>bool</code>, default:                   <code>False</code> )           \u2013            <p>description. Defaults to False.</p> </li> </ul> Source code in <code>panther/panther_cli.py</code> <pre><code>def build_docker_visualizer(push=False):\n    \"\"\"_summary_\n\n    Args:\n        push (bool, optional): _description_. Defaults to False.\n    \"\"\"\n    client = docker.from_env()\n    logger.info(\"Building Docker image visualizer\")\n    client.images.build(\n        path=\"panther_webapp/tools/\",\n        rm=True,\n        dockerfile=\"Dockerfile.visualizer\",\n        tag=\"ivy-visualizer\",\n        network_mode=\"host\",\n    )\n    if push:\n        push_image_to_registry(\"ivy-visualizer\")\n</code></pre>"},{"location":"reference/panther/panther_cli.html#panther.panther_cli.build_webapp","title":"build_webapp","text":"<pre><code>build_webapp(push=False)\n</code></pre> <p>summary</p> <p>Parameters:</p> <ul> <li> <code>push</code>               (<code>bool</code>, default:                   <code>False</code> )           \u2013            <p>description. Defaults to False.</p> </li> </ul> Source code in <code>panther/panther_cli.py</code> <pre><code>def build_webapp(push=False):\n    \"\"\"_summary_\n\n    Args:\n        push (bool, optional): _description_. Defaults to False.\n    \"\"\"\n    client = docker.from_env()\n    logger.info(\"Building Docker image panther-webapp\")\n    execute_command(\"sudo chown -R $USER:$GROUPS $PWD/panther_webapp/\")\n    image_obj, log_generator = client.images.build(\n        path=\"panther_webapp\",\n        dockerfile=\"Dockerfile.ivy_webapp\",\n        tag=\"panther-webapp\",\n        network_mode=\"host\",\n        rm=True,\n        quiet=False,\n    )  # squash=True,\n    log_docker_output(log_generator, \"Building Docker image panther-webap\")\n    if push:\n        push_image_to_registry(\"panther-webapp\")\n</code></pre>"},{"location":"reference/panther/panther_cli.html#panther.panther_cli.build_worker","title":"build_worker","text":"<pre><code>build_worker(implem, config, push=False)\n</code></pre> <p>summary</p> <p>Parameters:</p> <ul> <li> <code>implem</code>               (<code>_type_</code>)           \u2013            <p>description</p> </li> <li> <code>config</code>               (<code>_type_</code>)           \u2013            <p>description</p> </li> <li> <code>push</code>               (<code>bool</code>, default:                   <code>False</code> )           \u2013            <p>description. Defaults to False.</p> </li> </ul> Source code in <code>panther/panther_cli.py</code> <pre><code>def build_worker(implem, config, push=False):\n    \"\"\"_summary_\n\n    Args:\n        implem (_type_): _description_\n        config (_type_): _description_\n        push (bool, optional): _description_. Defaults to False.\n    \"\"\"\n    stop_tool()\n    execute_command(\"git clean -f -d panther_worker/panther-ivy;\")\n    client = docker.from_env()\n\n    implem_build_commands = dict(config.items('implem_build_commands'))\n    shadow_support = config['shadow_support']\n    tag, path, dockerfile = eval(implem_build_commands[implem])\n\n    logger.info(f\"Building Docker image {tag} from {dockerfile}\")\n    # Build the base ubuntu-panther image\n    logger.debug(\"Building Docker image ubuntu-panther\")\n    image_obj, log_generator = client.images.build(\n        path=\"panther_worker/\",\n        dockerfile=\"Dockerfile.ubuntu\",\n        tag=\"ubuntu-panther\",\n        rm=True,\n        network_mode=\"host\",\n    )\n    log_docker_output(log_generator, \"Building Docker image ubuntu-panther\")\n\n    # Build the first ivy image\n    logger.debug(\"Building Docker image ivy\")\n    image_obj, log_generator = client.images.build(\n        path=\"panther_worker/\",\n        dockerfile=\"Dockerfile.ivy_1\",\n        tag=\"ivy\",\n        rm=True,\n        # buildargs={\"CACHEBUST\": str(time.time())}, # Cache invalidation\n        network_mode=\"host\",\n    )\n    log_docker_output(log_generator, \"Building Docker image ivy\")\n\n    # Check if shadow build is needed\n    shadow_tag = None\n    final_tag = f\"{tag}-panther\"\n\n    if shadow_support.getboolean(implem):\n        logger.debug(\"Building Docker image shadow-panther\")\n        image_obj, log_generator = client.images.build(\n            path=\"panther_worker/\",\n            dockerfile=\"Dockerfile.shadow\",\n            tag=\"shadow-panther\",\n            rm=True,\n            network_mode=\"host\",\n        )\n        log_docker_output(log_generator, \"Building Docker image shadow-panther\")\n        shadow_tag = \"shadow-panther\"\n\n        # Build the picotls image\n        build_args = {\"image\": shadow_tag}\n        itag = \"shadow-panther-picotls\"\n        logger.debug(f\"Building Docker image {itag} from tag {build_args}\")\n        image_obj, log_generator = client.images.build(\n            path=\"panther_worker/app/implementations/quic-implementations/picotls/\",\n            dockerfile=\"Dockerfile.picotls\",\n            tag=itag,\n            rm=True,\n            network_mode=\"host\",\n            buildargs=build_args,\n        )\n        log_docker_output(log_generator, \"Building Docker image shadow-panther-picotls\")\n    else:\n        # Build the picotls image\n        build_args = {\"image\": \"ivy\"}\n        itag = \"panther-picotls\"\n        logger.debug(f\"Building Docker image {itag} from tag {build_args}\")\n        image_obj, log_generator = client.images.build(\n            path=\"panther_worker/app/implementations/quic-implementations/picotls/\",\n            dockerfile=\"Dockerfile.picotls\",\n            tag=itag,\n            rm=True,\n            network_mode=\"host\",\n            buildargs=build_args,\n        )\n        log_docker_output(log_generator, \"Building Docker image panther-picotls\")\n\n    # Build the specified implementation image\n    build_args = (\n        {\"image\": \"shadow-panther-picotls\"} if shadow_tag else {\"image\": \"panther-picotls\"}\n    )\n    logger.debug(f\"Building Docker image {tag} from tag {build_args}\")\n    image_obj, log_generator = client.images.build(\n        path=path,\n        dockerfile=dockerfile,\n        tag=tag,\n        rm=True,\n        network_mode=\"host\",\n        buildargs=build_args,\n    )\n\n    log_docker_output(log_generator, f\"Building Docker image {tag}\")\n    # Build the final implementation-ivy image\n    build_args = {\"image\": tag}\n    logger.debug(f\"Building Docker image {final_tag} from tag {build_args}\")\n    image_obj, log_generator = client.images.build(\n        path=\"panther_worker/\",\n        dockerfile=\"Dockerfile.ivy_2\",\n        tag=final_tag,\n        rm=True,\n        network_mode=\"host\",\n        buildargs=build_args,\n    )\n    log_docker_output(log_generator, f\"Building Docker image {final_tag}\")\n\n    if push:\n        push_image_to_registry(final_tag)\n</code></pre>"},{"location":"reference/panther/panther_cli.html#panther.panther_cli.clean_tool","title":"clean_tool","text":"<pre><code>clean_tool(config)\n</code></pre> <p>summary</p> <p>Parameters:</p> <ul> <li> <code>config</code>               (<code>_type_</code>)           \u2013            <p>description</p> </li> </ul> Source code in <code>panther/panther_cli.py</code> <pre><code>def clean_tool(config):\n    \"\"\"_summary_\n\n    Args:\n        config (_type_): _description_\n    \"\"\"\n    client = docker.from_env()\n    docker_containers = client.containers.list(all=True)\n    for dc in docker_containers:\n        dc.remove(force=True)\n    logger.info(client.containers.prune())\n    logger.info(client.images.prune(filters={\"dangling\": False}))\n    logger.info(client.networks.prune())\n    logger.info(client.volumes.prune())\n</code></pre>"},{"location":"reference/panther/panther_cli.html#panther.panther_cli.execute_command","title":"execute_command","text":"<pre><code>execute_command(command, tmux=None, cwd=None)\n</code></pre> <p>summary</p> <p>Parameters:</p> <ul> <li> <code>command</code>               (<code>_type_</code>)           \u2013            <p>description</p> </li> <li> <code>tmux</code>               (<code>_type_</code>, default:                   <code>None</code> )           \u2013            <p>description. Defaults to None.</p> </li> <li> <code>cwd</code>               (<code>_type_</code>, default:                   <code>None</code> )           \u2013            <p>description. Defaults to None.</p> </li> </ul> <p>Raises:</p> <ul> <li> <code>CalledProcessError</code>             \u2013            <p>description</p> </li> </ul> Source code in <code>panther/panther_cli.py</code> <pre><code>def execute_command(command, tmux=None, cwd=None):\n    \"\"\"_summary_\n\n    Args:\n        command (_type_): _description_\n        tmux (_type_, optional): _description_. Defaults to None.\n        cwd (_type_, optional): _description_. Defaults to None.\n\n    Raises:\n        subprocess.CalledProcessError: _description_\n    \"\"\"\n    logger.debug(f\"Executing command: {command}\")\n\n    if tmux:\n        logger.info(f\"Executing command in tmux with log file:  \\\"{command}\\\"\")\n        session_name = subprocess.check_output(['tmux', 'display-message', '-p', '#S']).strip().decode('utf-8')\n        os.system(f\"tmux split-window -h -l 80%; tmux send-keys -t  {session_name}:0.1 \\\"{command}\\\" C-m;\")\n    else:\n        if cwd:\n            result = subprocess.run(command, shell=True, cwd=cwd)\n        else:\n            result = subprocess.run(command, shell=True)\n        if result.returncode != 0:\n            raise subprocess.CalledProcessError(result.returncode, command)\n</code></pre>"},{"location":"reference/panther/panther_cli.html#panther.panther_cli.get_current_branch","title":"get_current_branch","text":"<pre><code>get_current_branch()\n</code></pre> <p>summary</p> <p>Returns:</p> <ul> <li> <code>_type_</code>          \u2013            <p>description</p> </li> </ul> Source code in <code>panther/panther_cli.py</code> <pre><code>def get_current_branch():\n    \"\"\"_summary_\n\n    Returns:\n        _type_: _description_\n    \"\"\"\n    result = subprocess.run(\n        f\"git rev-parse --abbrev-ref HEAD\",\n        shell=True,\n        stdout=subprocess.PIPE,\n        text=True,\n    )\n    logger.info(f\"Current branch: {result.stdout.strip()}\")\n    return result.stdout.strip()\n</code></pre>"},{"location":"reference/panther/panther_cli.html#panther.panther_cli.install_tool","title":"install_tool","text":"<pre><code>install_tool(config, branch=None)\n</code></pre> <p>summary</p> <p>Parameters:</p> <ul> <li> <code>config</code>               (<code>_type_</code>)           \u2013            <p>description</p> </li> <li> <code>branch</code>               (<code>_type_</code>, default:                   <code>None</code> )           \u2013            <p>description. Defaults to None.</p> </li> </ul> Source code in <code>panther/panther_cli.py</code> <pre><code>def install_tool(config, branch=None):\n    \"\"\"_summary_\n\n    Args:\n        config (_type_): _description_\n        branch (_type_, optional): _description_. Defaults to None.\n    \"\"\"\n    # Pre-installation commands\n    logger.info(\"Running pre-installation commands\")\n\n    # Create necessary directories\n    # TODO already done in other scripts\n    for folder in config[\"directories\"]:\n        logger.info(f\"Creating directory: {config['directories'][folder]}\")\n        # Create build/ and test/temp/ directories inside folder\n        os.makedirs(os.path.join(folder, \"build\"), exist_ok=True)\n        os.makedirs(os.path.join(folder, \"test\", \"temp\"), exist_ok=True)\n\n    # Install modules\n    if config[\"modules\"].getboolean(\"checkout_git\"):\n        logger.info(\"Checking out git repositories\")\n        if branch is not None:\n            execute_command(f\"git checkout {branch}\")\n        current_branch = get_current_branch()\n        execute_command(\"git submodule update --init --recursive\")\n        # TODO cd not working -&gt; chdir\n        execute_command(\n            f\"git fetch\",\n            cwd=\"panther_worker/panther-ivy/\"\n        )\n        execute_command(\n            f\"git checkout {current_branch}\",\n            cwd=\"panther_worker/panther-ivy/\"\n        )\n        execute_command(\n            f\"git pull\",\n            cwd=\"panther_worker/panther-ivy/\"\n        )\n        execute_command(\n            f\"git submodule update --init --recursive\",\n            cwd=\"panther_worker/panther-ivy/\"\n        )\n        execute_command(\n            f\"git pull\",\n            cwd=\"panther_worker/panther-ivy/\"\n        )\n        # execute_command(\n        #     \"cd panther_worker/app/implementations/quic-implementations/picotls-implem;\" + \\  \n        #     \"git checkout 047c5fe20bb9ea91c1caded8977134f19681ec76;\" + \\\n        #     \"git submodule update --init --recursive\" + \\\n        # )\n\n    if config[\"modules\"].getboolean(\"build_webapp\"):\n        build_webapp()\n\n    if config[\"modules\"].getboolean(\"build_worker\"):\n        for implem, should_build in config[\"implems\"].items():\n            if should_build.lower() == \"true\":\n                if not \"shadow\" in implem:\n                    build_worker(implem, config)\n                elif config[\"modules\"][\"build_shadow\"].lower() == \"true\":\n                    build_worker(implem, config)\n\n    if config[\"modules\"].getboolean(\"build_visualizer\"):\n        build_docker_visualizer()\n\n    update_docker_compose(config)\n</code></pre>"},{"location":"reference/panther/panther_cli.html#panther.panther_cli.is_tmux_session","title":"is_tmux_session","text":"<pre><code>is_tmux_session()\n</code></pre> <p>Check if running inside a tmux session.</p> Source code in <code>panther/panther_cli.py</code> <pre><code>def is_tmux_session():\n    \"\"\"Check if running inside a tmux session.\"\"\"\n    return 'TMUX' in subprocess.run(['env'], capture_output=True, text=True).stdout\n</code></pre>"},{"location":"reference/panther/panther_cli.html#panther.panther_cli.load_config","title":"load_config","text":"<pre><code>load_config(config_path)\n</code></pre> <p>summary</p> <p>Parameters:</p> <ul> <li> <code>config_path</code>               (<code>_type_</code>)           \u2013            <p>description</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>_type_</code>          \u2013            <p>description</p> </li> </ul> Source code in <code>panther/panther_cli.py</code> <pre><code>def load_config(config_path):\n    \"\"\"_summary_\n\n    Args:\n        config_path (_type_): _description_\n\n    Returns:\n        _type_: _description_\n    \"\"\"\n    config = configparser.ConfigParser(interpolation=configparser.ExtendedInterpolation())\n    config.read(config_path)\n    return config\n</code></pre>"},{"location":"reference/panther/panther_cli.html#panther.panther_cli.start_bash_container","title":"start_bash_container","text":"<pre><code>start_bash_container(implem)\n</code></pre> <p>summary Start a Docker container with the specified parameters.</p> <p>Parameters:</p> <ul> <li> <code>implem</code>               (<code>_type_</code>)           \u2013            <p>description</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>_type_</code>          \u2013            <p>description</p> </li> </ul> Source code in <code>panther/panther_cli.py</code> <pre><code>def start_bash_container(implem):\n    \"\"\"_summary_\n    Start a Docker container with the specified parameters.\n\n    Args:\n        implem (_type_): _description_\n\n    Returns:\n        _type_: _description_\n    \"\"\"\n    client = docker.from_env()\n    pwd = os.getcwd()\n    def get_nproc():\n        \"\"\"Get the number of processors available.\"\"\"\n        try:\n            result = subprocess.run([\"nproc\"], capture_output=True, text=True, check=True)\n            return result.stdout.strip()\n        except subprocess.CalledProcessError as e:\n            print(f\"Error getting the number of processors: {e}\")\n            return \"1\"\n    nproc = get_nproc()\n    cpus = f\"{nproc}.0\"\n\n    container_name = f\"{implem}-panther\"\n\n    volumes = {\n        f\"{pwd}/tls-keys\": {\"bind\": \"/app/tls-keys\", \"mode\": \"rw\"},\n        f\"{pwd}/tickets\":  {\"bind\": \"/app/tickets\", \"mode\": \"rw\"},\n        f\"{pwd}/qlogs\":    {\"bind\": \"/app/qlogs\", \"mode\": \"rw\"},\n        f\"{pwd}/panther_worker/app/panther-ivy/protocol-testing/\": {\n            \"bind\": \"/app/panther-ivy/protocol-testing/\",\n            \"mode\": \"rw\",\n        },\n        f\"{pwd}/panther_worker/app/panther-ivy/ivy/include/1.7\": {\n            \"bind\": \"/app/panther-ivy/ivy/include/1.7\",\n            \"mode\": \"rw\",\n        },\n    }\n\n    try:\n        container = client.containers.run(\n            image=container_name,\n            command=\"bash\",\n            privileged=True,\n            cpus=cpus,\n            mem_limit=\"10g\",\n            mem_reservation=\"9.5g\",\n            volumes=volumes,\n            tty=True,\n            stdin_open=True,\n            detach=True,\n        )\n        print(f\"Started container {container.id} ({container_name})\")\n    except Exception as e:\n        print(f\"Error starting the container: {e}\")\n</code></pre>"},{"location":"reference/panther/panther_cli.html#panther.panther_cli.start_tool","title":"start_tool","text":"<pre><code>start_tool(config, swarm=False)\n</code></pre> <p>summary</p> <p>Parameters:</p> <ul> <li> <code>config</code>               (<code>_type_</code>)           \u2013            <p>description</p> </li> <li> <code>swarm</code>               (<code>bool</code>, default:                   <code>False</code> )           \u2013            <p>description. Defaults to False.</p> </li> </ul> Source code in <code>panther/panther_cli.py</code> <pre><code>def start_tool(config, swarm=False):\n    \"\"\"_summary_\n\n    Args:\n        config (_type_): _description_\n        swarm (bool, optional): _description_. Defaults to False.\n    \"\"\"\n    client = docker.from_env()\n\n    create_docker_network()\n\n    execute_command(\"sudo chown -R $USER:$GROUPS $PWD/\")\n    execute_command(\"xhost +\")\n\n    if swarm:\n        execute_command(\"docker swarm init\")\n        yaml_path, defined_services = update_docker_swarm(config)\n    else:\n        yaml_path, defined_services = update_docker_compose(config)\n\n    execute_command(f\"cat {yaml_path}\")\n\n    if swarm:\n        execute_command(f\"docker stack rm panther\")\n        execute_command(f\"docker stack -c {yaml_path} panther\")\n    else:\n        execute_command(f\"docker compose -f {yaml_path} up -d\")\n\n    execute_command(\"clear\")\n\n    docker_to_monitor = []\n    for container_name in defined_services:\n        if container_exists(client, container_name):\n            docker_to_monitor.append(container_name)\n            ip_address = get_container_ip(client, container_name)\n            if ip_address:\n                entry = f\"{ip_address} {container_name}\\n\"\n                append_to_hosts_file(entry)\n        else:\n            logger.info(f\"Container '{container_name}' does not exist.\")\n\n    thread = threading.Thread(target=monitor_docker_usage, args=([docker_to_monitor, 1, -1])) \n    thread.start()\n\n    if swarm:\n        compose_log = f\"\\'logs/swarm_{datetime.now()}.log\\'\"\n        execute_command(f\"docker stack services panther | tee {compose_log}\", tmux=compose_log)\n    else:\n        compose_log = f\"\\'logs/compose_{datetime.now()}.log\\'\"\n        execute_command(f\"docker compose -f {yaml_path} logs -f | tee {compose_log}\", tmux=compose_log)\n\n    # TODO: should split the first \n    session_name = subprocess.check_output(['tmux', 'display-message', '-p', '#S']).strip().decode('utf-8')\n    os.system(f\"tmux split-window -v -l 10%; tmux send-keys -t  {session_name}:0.0 \\\"bash\\\" C-m;\")\n</code></pre>"},{"location":"reference/panther/panther_cli.html#panther.panther_cli.stop_tool","title":"stop_tool","text":"<pre><code>stop_tool()\n</code></pre> <p>summary</p> Source code in <code>panther/panther_cli.py</code> <pre><code>def stop_tool():\n    \"\"\"_summary_\n    \"\"\"\n    client = docker.from_env()\n    docker_containers = client.containers.list(all=True)\n    for dc in docker_containers:\n        dc.stop()\n</code></pre>"},{"location":"reference/panther/panther_cli_click.html","title":"panther_cli_click","text":""},{"location":"reference/panther/panther_cli_click.html#panther.panther_cli_click","title":"panther_cli_click","text":""},{"location":"reference/panther/panther_cli_click.html#panther.panther_cli_click.append_to_hosts_file","title":"append_to_hosts_file","text":"<pre><code>append_to_hosts_file(entry)\n</code></pre> <p>Append a new entry to the /etc/hosts file.</p> Source code in <code>panther/panther_cli_click.py</code> <pre><code>def append_to_hosts_file(entry):\n    \"\"\"Append a new entry to the /etc/hosts file.\"\"\"\n    try:\n        command = f\"echo '{entry.strip()}' | sudo tee -a /etc/hosts\"\n        execute_command(command)\n        logging.info(f\"Added entry to /etc/hosts: {entry.strip()}\")\n    except subprocess.CalledProcessError as e:\n        logging.error(f\"Error adding entry to /etc/hosts: {e}\")\n</code></pre>"},{"location":"reference/panther/panther_cli_click.html#panther.panther_cli_click.container_exists","title":"container_exists","text":"<pre><code>container_exists(client, container_name)\n</code></pre> <p>Check if the Docker container exists.</p> Source code in <code>panther/panther_cli_click.py</code> <pre><code>def container_exists(client, container_name):\n    \"\"\"Check if the Docker container exists.\"\"\"\n    try:\n        client.containers.get(container_name)\n        return True\n    except docker.errors.NotFound:\n        return False\n    except Exception as e:\n        logging.error(f\"Error checking container existence: {e}\")\n        return False\n</code></pre>"},{"location":"reference/panther/panther_cli_click.html#panther.panther_cli_click.create_network","title":"create_network","text":"<pre><code>create_network(client, network_name, gateway, subnet)\n</code></pre> <p>Create a Docker network with the specified gateway and subnet.</p> Source code in <code>panther/panther_cli_click.py</code> <pre><code>def create_network(client, network_name, gateway, subnet):\n    \"\"\"Create a Docker network with the specified gateway and subnet.\"\"\"\n    try:\n        client.networks.create(\n            name=network_name,\n            driver=\"bridge\",\n            ipam={\"Config\": [{\"Subnet\": subnet, \"Gateway\": gateway}]},\n        )\n        print(f\"Network '{network_name}' created successfully.\")\n    except Exception as e:\n        print(f\"Error creating network: {e}\")\n</code></pre>"},{"location":"reference/panther/panther_cli_click.html#panther.panther_cli_click.get_container_ip","title":"get_container_ip","text":"<pre><code>get_container_ip(client, container_name)\n</code></pre> <p>Get the IP address of the Docker container.</p> Source code in <code>panther/panther_cli_click.py</code> <pre><code>def get_container_ip(client, container_name):\n    \"\"\"Get the IP address of the Docker container.\"\"\"\n    try:\n        container = client.containers.get(container_name)\n        ip_address = container.attrs[\"NetworkSettings\"][\"Networks\"].values()\n        return list(ip_address)[0][\"IPAddress\"]\n    except Exception as e:\n        logging.error(f\"Error getting IP address for container '{container_name}': {e}\")\n        return None\n</code></pre>"},{"location":"reference/panther/panther_cli_click.html#panther.panther_cli_click.get_nproc","title":"get_nproc","text":"<pre><code>get_nproc()\n</code></pre> <p>Get the number of processors available.</p> Source code in <code>panther/panther_cli_click.py</code> <pre><code>def get_nproc():\n    \"\"\"Get the number of processors available.\"\"\"\n    try:\n        result = subprocess.run([\"nproc\"], capture_output=True, text=True, check=True)\n        return result.stdout.strip()\n    except subprocess.CalledProcessError as e:\n        print(f\"Error getting the number of processors: {e}\")\n        return \"1\"\n</code></pre>"},{"location":"reference/panther/panther_cli_click.html#panther.panther_cli_click.log_docker_output","title":"log_docker_output","text":"<pre><code>log_docker_output(generator, task_name: str = 'docker command execution') -&gt; None\n</code></pre> <p>Log output to console from a generator returned from docker client :param Any generator: The generator to log the output of :param str task_name: A name to give the task, i.e. 'Build database image', used for logging</p> Source code in <code>panther/panther_cli_click.py</code> <pre><code>def log_docker_output(generator, task_name: str = \"docker command execution\") -&gt; None:\n    \"\"\"\n    Log output to console from a generator returned from docker client\n    :param Any generator: The generator to log the output of\n    :param str task_name: A name to give the task, i.e. 'Build database image', used for logging\n    \"\"\"\n    while True:\n        try:\n            output = generator.__next__()\n            if \"stream\" in output:\n                output_str = output[\"stream\"].strip(\"\\r\\n\").strip(\"\\n\")\n                logging.info(f\"{task_name}: {output_str}\")\n            elif \"error\" in output:\n                raise ValueError(f'Error from {task_name}: {output[\"error\"]}')\n        except StopIteration:\n            logging.info(f\"{task_name} complete.\")\n            break\n        except ValueError:\n            logging.error(f\"Error parsing output from {task_name}: {output}\")\n</code></pre>"},{"location":"reference/panther/panther_cli_click.html#panther.panther_cli_click.monitor_docker_usage","title":"monitor_docker_usage","text":"<pre><code>monitor_docker_usage(container_name, interval=1.0, duration=10.0)\n</code></pre> <p>Monitor the CPU and memory usage of a Docker container.</p> <p>:param container_name: Name or ID of the Docker container to monitor :param interval: Time interval (in seconds) between checks :param duration: Total duration (in seconds) to monitor</p> Source code in <code>panther/panther_cli_click.py</code> <pre><code>def monitor_docker_usage(container_name, interval=1.0, duration=10.0):\n    \"\"\"\n    Monitor the CPU and memory usage of a Docker container.\n\n    :param container_name: Name or ID of the Docker container to monitor\n    :param interval: Time interval (in seconds) between checks\n    :param duration: Total duration (in seconds) to monitor\n    \"\"\"\n    client = docker.from_env()\n\n    try:\n        container = client.containers.get(container_name)\n    except docker.errors.NotFound:\n        logging.info(f\"No container found with name or ID {container_name}\")\n        return\n\n    start_time = time.time()\n    duration_condition = lambda: (\n        (time.time() - start_time) &lt; duration if duration &gt; 0 else True\n    )\n    while duration_condition():\n        try:\n            stats = container.stats(stream=False)\n\n            # Check for missing keys and default to 0 if missing\n            cpu_delta = stats[\"cpu_stats\"][\"cpu_usage\"].get(\"total_usage\", 0) - stats[\n                \"precpu_stats\"\n            ][\"cpu_usage\"].get(\"total_usage\", 0)\n            system_cpu_delta = stats[\"cpu_stats\"].get(\"system_cpu_usage\", 0) - stats[\n                \"precpu_stats\"\n            ].get(\"system_cpu_usage\", 0)\n            number_cpus = len(stats[\"cpu_stats\"][\"cpu_usage\"].get(\"percpu_usage\", []))\n            cpu_usage = (\n                (cpu_delta / system_cpu_delta) * number_cpus * 100.0\n                if system_cpu_delta &gt; 0\n                else 0.0\n            )\n\n            memory_usage = stats[\"memory_stats\"].get(\"usage\", 0) / (\n                1024 * 1024\n            )  # Convert to MB\n            memory_limit = stats[\"memory_stats\"].get(\"limit\", 1) / (\n                1024 * 1024\n            )  # Convert to MB\n            memory_percentage = (\n                (memory_usage / memory_limit) * 100.0 if memory_limit &gt; 0 else 0.0\n            )\n\n            logging.info(\n                f\"Name {container_name} - Time: {time.time() - start_time:.2f}s - CPU Usage: {cpu_usage:.2f}% - Memory Usage: {memory_usage:.2f}MB ({memory_percentage:.2f}%)\"\n            )\n        except docker.errors.APIError as e:\n            logging.error(f\"An error occurred: {e}\")\n            break\n        except KeyError as e:\n            logging.warning(f\"Missing key in stats: {e}\")\n        time.sleep(interval)\n</code></pre>"},{"location":"reference/panther/panther_cli_click.html#panther.panther_cli_click.network_exists","title":"network_exists","text":"<pre><code>network_exists(client, network_name)\n</code></pre> <p>Check if the Docker network exists.</p> Source code in <code>panther/panther_cli_click.py</code> <pre><code>def network_exists(client, network_name):\n    \"\"\"Check if the Docker network exists.\"\"\"\n    try:\n        client.networks.get(network_name)\n        return True\n    except NotFound:\n        return False\n    except Exception as e:\n        print(f\"Error checking network existence: {e}\")\n        return False\n</code></pre>"},{"location":"reference/panther/panther_cli_click.html#panther.panther_cli_click.restore_hosts_file","title":"restore_hosts_file","text":"<pre><code>restore_hosts_file()\n</code></pre> <p>Restore the original /etc/hosts file from the backup.</p> Source code in <code>panther/panther_cli_click.py</code> <pre><code>def restore_hosts_file():\n    \"\"\"Restore the original /etc/hosts file from the backup.\"\"\"\n    try:\n        execute_command(\"sudo cp /etc/hosts.bak /etc/hosts\")\n        logging.info(\"Restored the original /etc/hosts file.\")\n    except subprocess.CalledProcessError as e:\n        logging.error(f\"Error restoring /etc/hosts: {e}\")\n</code></pre>"},{"location":"reference/panther/panther_cli_click.html#panther.panther_cli_click.start_bash_container","title":"start_bash_container","text":"<pre><code>start_bash_container(implem)\n</code></pre> <p>Start a Docker container with the specified parameters.</p> Source code in <code>panther/panther_cli_click.py</code> <pre><code>@click.command()\n@click.pass_context\ndef start_bash_container(implem):\n    \"\"\"Start a Docker container with the specified parameters.\"\"\"\n    client = docker.from_env()\n    pwd = os.getcwd()\n    nproc = get_nproc()\n    cpus = f\"{nproc}.0\"\n\n    container_name = f\"{implem}-ivy\"\n\n    volumes = {\n        f\"{pwd}/tls-keys\": {\"bind\": \"/PANTHER/tls-keys\", \"mode\": \"rw\"},\n        f\"{pwd}/tickets\": {\"bind\": \"/PANTHER/tickets\", \"mode\": \"rw\"},\n        f\"{pwd}/qlogs\": {\"bind\": \"/PANTHER/qlogs\", \"mode\": \"rw\"},\n        f\"{pwd}/src/Protocols-Ivy/doc/examples/quic\": {\n            \"bind\": \"/PANTHER/Protocols-Ivy/doc/examples/quic\",\n            \"mode\": \"rw\",\n        },\n        f\"{pwd}/src/Protocols-Ivy/ivy/include/1.7\": {\n            \"bind\": \"/PANTHER/Protocols-Ivy/ivy/include/1.7\",\n            \"mode\": \"rw\",\n        },\n    }\n\n    try:\n        container = client.containers.run(\n            image=container_name,\n            command=\"bash\",\n            privileged=True,\n            cpus=cpus,\n            mem_limit=\"10g\",\n            mem_reservation=\"9.5g\",\n            volumes=volumes,\n            tty=True,\n            stdin_open=True,\n            detach=True,\n        )\n        print(f\"Started container {container.id} ({container_name})\")\n    except Exception as e:\n        print(f\"Error starting the container: {e}\")\n</code></pre>"},{"location":"reference/panther/panther_compose.html","title":"panther_compose","text":""},{"location":"reference/panther/panther_compose.html#panther.panther_compose","title":"panther_compose","text":""},{"location":"reference/panther/panther_compose.html#panther.panther_compose.update_docker_compose","title":"update_docker_compose","text":"<pre><code>update_docker_compose(config, yaml_path='docker-compose.yml', prod=False)\n</code></pre> <p>summary</p> <p>Parameters:</p> <ul> <li> <code>config</code>               (<code>_type_</code>)           \u2013            <p>description</p> </li> <li> <code>yaml_path</code>               (<code>str</code>, default:                   <code>'docker-compose.yml'</code> )           \u2013            <p>description. Defaults to \"docker-compose.yml\".</p> </li> <li> <code>prod</code>               (<code>bool</code>, default:                   <code>False</code> )           \u2013            <p>description. Defaults to False.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>_type_</code>          \u2013            <p>description</p> </li> </ul> Source code in <code>panther/panther_compose.py</code> <pre><code>def update_docker_compose(config, yaml_path=\"docker-compose.yml\", prod=False):\n    \"\"\"_summary_\n\n    Args:\n        config (_type_): _description_\n        yaml_path (str, optional): _description_. Defaults to \"docker-compose.yml\".\n        prod (bool, optional): _description_. Defaults to False.\n\n    Returns:\n        _type_: _description_\n    \"\"\"\n    with open(yaml_path, \"r\") as file:\n        # save backup version\n        shutil.copyfile(yaml_path, f\"{yaml_path}.bak\")\n        docker_compose = yaml.safe_load(file)\n\n    # TODO update for production\n    base_ip = [172, 27, 1, 11]\n    base_port = 49160\n    defined_services = set()\n    defined_services.add(\"panther-webapp\")\n    implem_build_commands = dict(config.items(\"implem_build_commands\"))\n\n    # Get docker limits from config\n    normal_cpu = config['docker_limits']['normal_cpu']\n    normal_mem = config['docker_limits']['normal_mem']\n    shadow_cpu = config['docker_limits']['shadow_cpu']\n    shadow_mem = config['docker_limits']['shadow_mem']\n    shadow_support = config['shadow_support']\n\n    for implem, should_build in config[\"implems\"].items():\n        if should_build.lower() == \"true\":\n            tag, path, dockerfile = eval(implem_build_commands[implem])\n            service_name = tag.replace(\"_\", \"-\") + \"-panther\"\n            defined_services.add(service_name)\n\n            base_ip[-1] += 1\n            base_port += 1\n            ipv4_address = \".\".join(map(str, base_ip))\n            port = base_port\n\n            is_shadow = shadow_support.getboolean(implem)\n            cpus = shadow_cpu if is_shadow else normal_cpu\n            memory = shadow_mem if is_shadow else normal_mem\n\n            if prod:\n                volumes = [ \n                    \"/tmp/.X11-unix:/tmp/.X11-unix\" \n                ]\n            else:\n                volumes = [\n                    \"/tmp/.X11-unix:/tmp/.X11-unix\",\n                    \"${PWD}/panther_worker/app/:/app/\",\n                    \"/app/panther-ivy/\",\n                    \"/app/implementations/\",\n                    \"${PWD}/panther_worker/app/panther-ivy/protocol-testing/:/app/panther-ivy/protocol-testing/\",\n                    \"${PWD}/panther_worker/app/panther-ivy/ivy/include/:/app/panther-ivy/ivy/include/\",\n                    \"${PWD}/outputs/tls-keys:/app/tls-keys\",\n                    \"${PWD}/outputs/tickets:/app/tickets\",\n                    \"${PWD}/outputs/qlogs:/app/qlogs\",\n                ]\n\n            docker_compose[\"services\"][service_name] = {\n                \"hostname\": service_name,\n                \"container_name\": service_name,\n                \"image\": f\"{service_name}:latest\",\n                \"command\": 'bash -c \"stty cols 100 rows 100 &amp;&amp; python3 panther_client.py\"',\n                \"ports\": [f\"{port}:80\"],\n                \"volumes\": volumes,\n                \"networks\": {\"net\": {\"ipv4_address\": ipv4_address}},\n                \"privileged\": True, # TODO what are the security implications of this?\n                \"tty\": True,\n                \"stdin_open\": True,\n                \"environment\": [\n                    \"DISPLAY=${DISPLAY}\",\n                    \"XAUTHORITY=~/.Xauthority\",\n                    \"ROOT_PATH=${PWD}\",\n                    'MPLBACKEND=\"Agg\"',\n                    \"COLUMNS=100\",\n                    \"LINES=100\",\n                    \"PYTHONUNBUFFERED=1\",\n                    \"PYTHONPATH=${PYTHONPATH}:/app/implementations/quic-implementations/aioquic/src\"\n                ],\n                \"restart\": \"always\",\n                \"deploy\": {\n                    \"resources\": {\n                        \"limits\": {\n                            \"cpus\": cpus,\n                            \"memory\": memory,\n                        },\n                        \"reservations\": {\n                            \"cpus\": str(float(cpus)/2), \n                            \"memory\": str(int(memory.replace(\"M\",\"\"))/2)+\"M\",\n                        },\n                    },\n                },\n                \"depends_on\": [\"panther-webapp\"],\n            }\n\n            if not prod:\n                # Spectre/Meltdown mitigation ~30% performance hit\n                docker_compose[\"services\"][service_name][\"security_opt\"] = [\"seccomp:unconfined\"]\n\n    # Remove services not defined in config\n    services_to_remove = set(docker_compose[\"services\"].keys()) - defined_services\n    for service in services_to_remove:\n        del docker_compose[\"services\"][service]\n\n    with open(yaml_path, \"w\") as file:\n        yaml.safe_dump(docker_compose, file)\n\n    logging.info(\"Docker Compose configuration updated successfully.\")\n    return yaml_path, defined_services\n</code></pre>"},{"location":"reference/panther/panther_docker.html","title":"panther_docker","text":""},{"location":"reference/panther/panther_docker.html#panther.panther_docker","title":"panther_docker","text":""},{"location":"reference/panther/panther_docker.html#panther.panther_docker.append_to_hosts_file","title":"append_to_hosts_file","text":"<pre><code>append_to_hosts_file(entry)\n</code></pre> <p>summary Append a new entry to the /etc/hosts file.</p> <p>Parameters:</p> <ul> <li> <code>entry</code>               (<code>_type_</code>)           \u2013            <p>description</p> </li> </ul> Source code in <code>panther/panther_docker.py</code> <pre><code>def append_to_hosts_file(entry):\n    \"\"\"_summary_\n    Append a new entry to the /etc/hosts file.\n\n    Args:\n        entry (_type_): _description_\n    \"\"\"\n    try:\n        command = f\"echo '{entry.strip()}' | sudo tee -a /etc/hosts\"\n        execute_command(command)\n        logging.info(f\"Added entry to /etc/hosts: {entry.strip()}\")\n    except subprocess.CalledProcessError as e:\n        logging.error(f\"Error adding entry to /etc/hosts: {e}\")\n</code></pre>"},{"location":"reference/panther/panther_docker.html#panther.panther_docker.container_exists","title":"container_exists","text":"<pre><code>container_exists(client, container_name)\n</code></pre> <p>summary Check if the Docker container exists.</p> <p>Parameters:</p> <ul> <li> <code>client</code>               (<code>_type_</code>)           \u2013            <p>description</p> </li> <li> <code>container_name</code>               (<code>_type_</code>)           \u2013            <p>description</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>_type_</code>          \u2013            <p>description</p> </li> </ul> Source code in <code>panther/panther_docker.py</code> <pre><code>def container_exists(client, container_name):\n    \"\"\"_summary_\n    Check if the Docker container exists.\n\n    Args:\n        client (_type_): _description_\n        container_name (_type_): _description_\n\n    Returns:\n        _type_: _description_\n    \"\"\"\n    try:\n        client.containers.get(container_name)\n        return True\n    except docker.errors.NotFound:\n        return False\n    except Exception as e:\n        logging.error(f\"Error checking container existence: {e}\")\n        return False\n</code></pre>"},{"location":"reference/panther/panther_docker.html#panther.panther_docker.create_docker_network","title":"create_docker_network","text":"<pre><code>create_docker_network()\n</code></pre> <p>summary Create the docker network</p> Source code in <code>panther/panther_docker.py</code> <pre><code>def create_docker_network():\n    \"\"\"_summary_\n    Create the docker network\n    \"\"\"\n    network_name = \"net\"\n    gateway = \"172.27.1.1\"\n    subnet = \"172.27.1.0/24\"\n\n    client = docker.from_env()\n\n    if network_exists(client, network_name):\n        print(f\"Network '{network_name}' already exists.\")\n    else:\n        create_network(client, network_name, gateway, subnet)\n</code></pre>"},{"location":"reference/panther/panther_docker.html#panther.panther_docker.create_network","title":"create_network","text":"<pre><code>create_network(client, network_name, gateway, subnet)\n</code></pre> <p>summary Create a Docker network with the specified gateway and subnet.</p> <p>Parameters:</p> <ul> <li> <code>client</code>               (<code>_type_</code>)           \u2013            <p>description</p> </li> <li> <code>network_name</code>               (<code>_type_</code>)           \u2013            <p>description</p> </li> <li> <code>gateway</code>               (<code>_type_</code>)           \u2013            <p>description</p> </li> <li> <code>subnet</code>               (<code>_type_</code>)           \u2013            <p>description</p> </li> </ul> Source code in <code>panther/panther_docker.py</code> <pre><code>def create_network(client, network_name, gateway, subnet):\n    \"\"\"_summary_\n    Create a Docker network with the specified gateway and subnet.\n\n    Args:\n        client (_type_): _description_\n        network_name (_type_): _description_\n        gateway (_type_): _description_\n        subnet (_type_): _description_\n    \"\"\"\n    try:\n        client.networks.create(\n            name=network_name,\n            driver=\"bridge\",\n            ipam={\"Config\": [{\"Subnet\": subnet, \"Gateway\": gateway}]},\n        )\n        print(f\"Network '{network_name}' created successfully.\")\n    except Exception as e:\n        print(f\"Error creating network: {e}\")\n</code></pre>"},{"location":"reference/panther/panther_docker.html#panther.panther_docker.get_container_ip","title":"get_container_ip","text":"<pre><code>get_container_ip(client, container_name)\n</code></pre> <p>summary Get the IP address of the Docker container.</p> <p>Parameters:</p> <ul> <li> <code>client</code>               (<code>_type_</code>)           \u2013            <p>description</p> </li> <li> <code>container_name</code>               (<code>_type_</code>)           \u2013            <p>description</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>_type_</code>          \u2013            <p>description</p> </li> </ul> Source code in <code>panther/panther_docker.py</code> <pre><code>def get_container_ip(client, container_name):\n    \"\"\"_summary_\n    Get the IP address of the Docker container.\n\n    Args:\n        client (_type_): _description_\n        container_name (_type_): _description_\n\n    Returns:\n        _type_: _description_\n    \"\"\"\n    try:\n        container = client.containers.get(container_name)\n        ip_address = container.attrs[\"NetworkSettings\"][\"Networks\"].values()\n        return list(ip_address)[0][\"IPAddress\"]\n    except Exception as e:\n        logging.error(f\"Error getting IP address for container '{container_name}': {e}\")\n        return None\n</code></pre>"},{"location":"reference/panther/panther_docker.html#panther.panther_docker.get_panther_container","title":"get_panther_container","text":"<pre><code>get_panther_container()\n</code></pre> <p>summary</p> <p>Returns:</p> <ul> <li> <code>_type_</code>          \u2013            <p>description</p> </li> </ul> Source code in <code>panther/panther_docker.py</code> <pre><code>def get_panther_container():\n    \"\"\"_summary_\n\n    Returns:\n        _type_: _description_\n    \"\"\"\n    client = docker.from_env()\n    panther_containers = []\n    for container in client.containers.list():\n        if \"panther\" in container.name:\n            panther_containers.append(container.name)\n    return panther_containers\n</code></pre>"},{"location":"reference/panther/panther_docker.html#panther.panther_docker.log_docker_output","title":"log_docker_output","text":"<pre><code>log_docker_output(generator, task_name: str = 'docker command execution') -&gt; None\n</code></pre> <p>summary</p> <p>Parameters:</p> <ul> <li> <code>generator</code>               (<code>_type_</code>)           \u2013            <p>description</p> </li> <li> <code>task_name</code>               (<code>str</code>, default:                   <code>'docker command execution'</code> )           \u2013            <p>description. Defaults to \"docker command execution\".</p> </li> </ul> <p>Raises:</p> <ul> <li> <code>ValueError</code>             \u2013            <p>description</p> </li> </ul> Source code in <code>panther/panther_docker.py</code> <pre><code>def log_docker_output(generator, task_name: str = \"docker command execution\") -&gt; None:\n    \"\"\"_summary_\n\n    Args:\n        generator (_type_): _description_\n        task_name (str, optional): _description_. Defaults to \"docker command execution\".\n\n    Raises:\n        ValueError: _description_\n    \"\"\"\n\n    while True:\n        try:\n            output = generator.__next__()\n            if \"stream\" in output:\n                output_str = output[\"stream\"].strip(\"\\r\\n\").strip(\"\\n\")\n                logging.info(f\"{task_name}: {output_str}\")\n            elif \"error\" in output:\n                raise ValueError(f'Error from {task_name}: {output[\"error\"]}')\n        except StopIteration:\n            logging.info(f\"{task_name} complete.\")\n            break\n        except ValueError:\n            logging.error(f\"Error parsing output from {task_name}: {output}\")\n</code></pre>"},{"location":"reference/panther/panther_docker.html#panther.panther_docker.monitor_docker_usage","title":"monitor_docker_usage","text":"<pre><code>monitor_docker_usage(docker_to_monitor, interval=1.0, duration=10.0)\n</code></pre> <p>summary Monitor the CPU and memory usage of a Docker container.</p> <p>Parameters:</p> <ul> <li> <code>docker_to_monitor</code>               (<code>_type_</code>)           \u2013            <p>description</p> </li> <li> <code>interval</code>               (<code>float</code>, default:                   <code>1.0</code> )           \u2013            <p>description. Defaults to 1.0.</p> </li> <li> <code>duration</code>               (<code>float</code>, default:                   <code>10.0</code> )           \u2013            <p>description. Defaults to 10.0.</p> </li> </ul> Source code in <code>panther/panther_docker.py</code> <pre><code>def monitor_docker_usage(docker_to_monitor, interval=1.0, duration=10.0):\n    \"\"\"_summary_\n    Monitor the CPU and memory usage of a Docker container.\n\n    Args:\n        docker_to_monitor (_type_): _description_\n        interval (float, optional): _description_. Defaults to 1.0.\n        duration (float, optional): _description_. Defaults to 10.0.\n    \"\"\"\n    client = docker.from_env()\n\n    for container_name in docker_to_monitor:\n        try:\n            container = client.containers.get(container_name)\n        except docker.errors.NotFound:\n            logging.info(f\"No container found with name or ID {container_name}\")\n            return\n\n    start_time = time.time()\n    duration_condition = lambda: (\n        (time.time() - start_time) &lt; duration if duration &gt; 0 else True\n    )\n    while duration_condition():\n        execute_command(\"clear\")\n        for container_name in docker_to_monitor:\n            try:\n                container = client.containers.get(container_name)\n\n                stats = container.stats(stream=False)\n\n                # Check for missing keys and default to 0 if missing\n                cpu_delta = stats[\"cpu_stats\"][\"cpu_usage\"].get(\n                    \"total_usage\", 0\n                ) - stats[\"precpu_stats\"][\"cpu_usage\"].get(\"total_usage\", 0)\n                system_cpu_delta = stats[\"cpu_stats\"].get(\n                    \"system_cpu_usage\", 0\n                ) - stats[\"precpu_stats\"].get(\"system_cpu_usage\", 0)\n                number_cpus = len(\n                    stats[\"cpu_stats\"][\"cpu_usage\"].get(\"percpu_usage\", [])\n                )\n                cpu_usage = (\n                    (cpu_delta / system_cpu_delta) * number_cpus * 100.0\n                    if system_cpu_delta &gt; 0\n                    else 0.0\n                )\n\n                memory_usage = stats[\"memory_stats\"].get(\"usage\", 0) / (\n                    1024 * 1024\n                )  # Convert to MB\n                memory_limit = stats[\"memory_stats\"].get(\"limit\", 1) / (\n                    1024 * 1024\n                )  # Convert to MB\n                memory_percentage = (\n                    (memory_usage / memory_limit) * 100.0 if memory_limit &gt; 0 else 0.0\n                )\n\n                logging.info(\n                    f\"Name {container_name}\\n\\t - Time: {time.time() - start_time:.2f}s\\n\\t - CPU Usage: {cpu_usage:.2f}%\\n\\t - Memory Usage: {memory_usage:.2f}MB ({memory_percentage:.2f}%)\"\n                )\n            except docker.errors.APIError as e:\n                logging.error(f\"An error occurred: {e}\")\n                break\n            except KeyError as e:\n                logging.warning(f\"Missing key in stats: {e}\")\n        time.sleep(interval)\n</code></pre>"},{"location":"reference/panther/panther_docker.html#panther.panther_docker.network_exists","title":"network_exists","text":"<pre><code>network_exists(client, network_name)\n</code></pre> <p>summary Check if the Docker network exists.</p> <p>Parameters:</p> <ul> <li> <code>client</code>               (<code>_type_</code>)           \u2013            <p>description</p> </li> <li> <code>network_name</code>               (<code>_type_</code>)           \u2013            <p>description</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>_type_</code>          \u2013            <p>description</p> </li> </ul> Source code in <code>panther/panther_docker.py</code> <pre><code>def network_exists(client, network_name):\n    \"\"\"_summary_\n    Check if the Docker network exists.\n\n    Args:\n        client (_type_): _description_\n        network_name (_type_): _description_\n\n    Returns:\n        _type_: _description_\n    \"\"\"\n    try:\n        client.networks.get(network_name)\n        return True\n    except NotFound:\n        return False\n    except Exception as e:\n        print(f\"Error checking network existence: {e}\")\n        return False\n</code></pre>"},{"location":"reference/panther/panther_docker.html#panther.panther_docker.push_image_to_registry","title":"push_image_to_registry","text":"<pre><code>push_image_to_registry(image_name, registry_url='elniak', tag='latest')\n</code></pre> <p>summary Push a Docker image to a registry.</p> <p>Parameters:</p> <ul> <li> <code>image_name</code>               (<code>_type_</code>)           \u2013            <p>description</p> </li> <li> <code>registry_url</code>               (<code>str</code>, default:                   <code>'elniak'</code> )           \u2013            <p>description. Defaults to \"elniak\".</p> </li> <li> <code>tag</code>               (<code>str</code>, default:                   <code>'latest'</code> )           \u2013            <p>description. Defaults to \"latest\".</p> </li> </ul> Source code in <code>panther/panther_docker.py</code> <pre><code>def push_image_to_registry(image_name, registry_url=\"elniak\", tag=\"latest\"):\n    \"\"\"_summary_\n    Push a Docker image to a registry.\n\n    Args:\n        image_name (_type_): _description_\n        registry_url (str, optional): _description_. Defaults to \"elniak\".\n        tag (str, optional): _description_. Defaults to \"latest\".\n    \"\"\"\n    try:\n        command = f\"docker tag {image_name} {registry_url}/{image_name}:{tag}\"\n        execute_command(command)\n        command = f\"docker push {registry_url}/{image_name}:{tag}\"\n        execute_command(command)\n        logging.info(f\"Pushed image '{image_name}' to registry '{registry_url}'.\")\n    except subprocess.CalledProcessError as e:\n        logging.error(f\"Error pushing image to registry: {e}\")\n</code></pre>"},{"location":"reference/panther/panther_docker.html#panther.panther_docker.restore_hosts_file","title":"restore_hosts_file","text":"<pre><code>restore_hosts_file()\n</code></pre> <p>summary Restore the original /etc/hosts file from the backup.</p> Source code in <code>panther/panther_docker.py</code> <pre><code>def restore_hosts_file():\n    \"\"\"_summary_\n    Restore the original /etc/hosts file from the backup.\n    \"\"\"\n    try:\n        execute_command(\"sudo cp /etc/hosts.bak /etc/hosts\")\n        logging.info(\"Restored the original /etc/hosts file.\")\n    except subprocess.CalledProcessError as e:\n        logging.error(f\"Error restoring /etc/hosts: {e}\")\n</code></pre>"},{"location":"reference/panther/panther_swarm.html","title":"panther_swarm","text":""},{"location":"reference/panther/panther_swarm.html#panther.panther_swarm","title":"panther_swarm","text":""},{"location":"reference/panther/panther_swarm.html#panther.panther_swarm.update_docker_swarm","title":"update_docker_swarm","text":"<pre><code>update_docker_swarm(config, yaml_path='docker-swarm.yml', prod=False)\n</code></pre> <p>summary</p> <p>Parameters:</p> <ul> <li> <code>config</code>               (<code>_type_</code>)           \u2013            <p>description</p> </li> <li> <code>yaml_path</code>               (<code>str</code>, default:                   <code>'docker-swarm.yml'</code> )           \u2013            <p>description. Defaults to \"docker-swarm.yml\".</p> </li> <li> <code>prod</code>               (<code>bool</code>, default:                   <code>False</code> )           \u2013            <p>description. Defaults to False.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>_type_</code>          \u2013            <p>description</p> </li> </ul> Source code in <code>panther/panther_swarm.py</code> <pre><code>def update_docker_swarm(config, yaml_path=\"docker-swarm.yml\", prod=False):\n    \"\"\"_summary_\n\n    Args:\n        config (_type_): _description_\n        yaml_path (str, optional): _description_. Defaults to \"docker-swarm.yml\".\n        prod (bool, optional): _description_. Defaults to False.\n\n    Returns:\n        _type_: _description_\n    \"\"\"\n    with open(yaml_path, \"r\") as file:\n        # save backup version\n        shutil.copyfile(yaml_path, f\"{yaml_path}.bak\")\n        docker_compose = yaml.safe_load(file)\n\n    base_ip = [172, 27, 1, 11]\n    base_port = 49160\n    defined_services = set()\n    defined_services.add(\"panther-webapp\")\n    implem_build_commands = dict(config.items(\"implem_build_commands\"))\n\n     # Get docker limits from config\n    normal_cpu = config['docker_limits']['normal_cpu']\n    normal_mem = config['docker_limits']['normal_mem']\n    shadow_cpu = config['docker_limits']['shadow_cpu']\n    shadow_mem = config['docker_limits']['shadow_mem']\n    shadow_support = config['shadow_support']\n\n\n    for implem, should_build in config[\"implems\"].items():\n        if should_build.lower() == \"true\":\n            tag, path, dockerfile = eval(implem_build_commands[implem])\n            service_name = tag.replace(\"_\", \"-\") + \"-panther\"\n            defined_services.add(service_name)\n\n            base_ip[-1] += 1\n            base_port += 1\n            ipv4_address = \".\".join(map(str, base_ip))\n            port = base_port\n\n            if prod:\n                volumes = [ \n                    \"/tmp/.X11-unix:/tmp/.X11-unix\" \n                ]\n            else:\n                volumes = [\n                    \"/tmp/.X11-unix:/tmp/.X11-unix\",\n                    \"${PWD}/panther_worker/app/:/app/\",\n                    \"/app/panther-ivy/\",\n                    \"/app/implementations/\",\n                    \"${PWD}/panther_worker/app/panther-ivy/protocol-testing/:/app/panther-ivy/protocol-testing/\",\n                    \"${PWD}/panther_worker/app/panther-ivy/ivy/include/:/app/panther-ivy/ivy/include/\",\n                    \"${PWD}/outputs/tls-keys:/app/tls-keys\",\n                    \"${PWD}/outputs/tickets:/app/tickets\",\n                    \"${PWD}/outputs/qlogs:/app/qlogs\",\n                ]\n\n            is_shadow = shadow_support.getboolean(implem)\n            cpus = shadow_cpu if is_shadow else normal_cpu\n            memory = shadow_mem if is_shadow else normal_mem\n\n            docker_compose[\"services\"][service_name] = {\n                \"hostname\": service_name,\n                \"container_name\": service_name,\n                \"image\": f\"{service_name}:latest\",\n                \"command\": 'bash -c \"stty cols 100 rows 100 &amp;&amp; python3 panther_client.py\"',\n                \"ports\": [f\"{port}:80\"],\n                \"volumes\": volumes,\n                \"networks\": {\"net\": {\"ipv4_address\": ipv4_address}},\n                \"privileged\": True,\n                \"tty\": True,\n                \"stdin_open\": True,\n                # Spectre/Meltdown mitigation ~30% performance hit\n                \"security_opt\": [\"seccomp:unconfined\"],\n                \"environment\": [\n                    \"DISPLAY=${DISPLAY}\",\n                    \"XAUTHORITY=~/.Xauthority\",\n                    \"ROOT_PATH=${PWD}\",\n                    'MPLBACKEND=\"Agg\"',\n                    \"COLUMNS=100\",\n                    \"LINES=100\",\n                ],\n                \"restart\": \"always\",\n                \"deploy\": {\n                    \"resources\": {\n                        \"limits\": {\n                            \"cpus\": cpus,\n                            \"memory\": memory,\n                        },\n                        \"reservations\": {\n                            \"cpus\": str(float(cpus)/2), \n                            \"memory\": str(int(memory.replace(\"M\",\"\"))/2)+\"M\",\n                        },\n                    },\n                },\n                \"depends_on\": [\"panther-webapp\"],\n            }\n\n            if not prod:\n                # Spectre/Meltdown mitigation ~30% performance hit\n                docker_compose[\"services\"][service_name][\"security_opt\"] = [\"seccomp:unconfined\"]\n\n    # Remove services not defined in config\n    services_to_remove = set(docker_compose[\"services\"].keys()) - defined_services\n    for service in services_to_remove:\n        del docker_compose[\"services\"][service]\n\n    with open(yaml_path, \"w\") as file:\n        yaml.safe_dump(docker_compose, file)\n\n    logging.info(\"Docker Swarm configuration updated successfully.\")\n    return yaml_path, defined_services\n</code></pre>"},{"location":"reference/panther/panther_scalability/index.html","title":"Index","text":""},{"location":"reference/panther/panther_scalability/index.html#panther.panther_scalability","title":"panther_scalability","text":""},{"location":"reference/panther/panther_scalability/scalability_policy.html","title":"scalability_policy","text":""},{"location":"reference/panther/panther_scalability/scalability_policy.html#panther.panther_scalability.scalability_policy","title":"scalability_policy","text":""},{"location":"reference/panther/panther_webapp/index.html","title":"Index","text":""},{"location":"reference/panther/panther_webapp/index.html#panther.panther_webapp","title":"panther_webapp","text":""},{"location":"reference/panther/panther_webapp/app/index.html","title":"Index","text":""},{"location":"reference/panther/panther_webapp/app/index.html#panther.panther_webapp.app","title":"app","text":""},{"location":"reference/panther/panther_webapp/app/panther_server.html","title":"panther_server","text":""},{"location":"reference/panther/panther_webapp/app/panther_server.html#panther.panther_webapp.app.panther_server","title":"panther_server","text":""},{"location":"reference/panther/panther_webapp/app/panther_server.html#panther.panther_webapp.app.panther_server.PFVServer","title":"PFVServer","text":"<pre><code>PFVServer(dir_path=None)\n</code></pre> Source code in <code>panther/panther_webapp/app/panther_server.py</code> <pre><code>def __init__(self, dir_path=None):\n    restore_config()\n\n    # Initialize SocketIO\n    PFVServer.socketio = SocketIO(PFVServer.app)\n\n    # Setup configuration\n    PFVServer.app.logger.info(\"Setup configuration ...\")\n    (\n        PFVServer.supported_protocols,\n        PFVServer.current_protocol,\n        PFVServer.tests_enabled,\n        PFVServer.conf_implementation_enable,\n        PFVServer.implementation_enable,\n        PFVServer.protocol_model_path,\n        PFVServer.protocol_results_path,\n        PFVServer.protocol_test_path,\n        PFVServer.config,\n        PFVServer.protocol_conf,\n    ) = get_experiment_config(None, True, True)\n\n    # Count number of directories in PFVServer.protocol_results_path\n    PFVServer.total_exp_in_dir = 0\n    with os.scandir(PFVServer.protocol_results_path) as entries:\n        PFVServer.total_exp_in_dir = sum(1 for entry in entries if entry.is_dir())\n\n    PFVServer.current_exp_path = os.path.join(\n        PFVServer.protocol_results_path, str(PFVServer.total_exp_in_dir)\n    )\n\n    # Experiment parameters\n    PFVServer.tests_requested = []\n    PFVServer.implementation_requested = []\n    PFVServer.experiment_iteration = 0\n    PFVServer.experiment_current_iteration = 0\n    PFVServer.is_experiment_started = False\n\n    # Automatic GUI\n    PFVServer.choices_args = {}\n\n    PFVServer.get_quic_vizualier()\n</code></pre>"},{"location":"reference/panther/panther_webapp/app/panther_server.html#panther.panther_webapp.app.panther_server.PFVServer.add_header","title":"add_header","text":"<pre><code>add_header(r)\n</code></pre> <p>It sets the cache control headers to prevent caching</p> <p>:param r: The response object :return: the response object with the headers added.</p> Source code in <code>panther/panther_webapp/app/panther_server.py</code> <pre><code>@app.after_request\ndef add_header(r):\n    \"\"\"\n    It sets the cache control headers to prevent caching\n\n    :param r: The response object\n    :return: the response object with the headers added.\n    \"\"\"\n    r.headers[\"Cache-Control\"] = \"no-cache, no-store, must-revalidate\"\n    r.headers[\"Pragma\"] = \"no-cache\"\n    r.headers[\"Expires\"] = \"0\"\n    r.headers[\"Cache-Control\"] = \"public, max-age=0\"\n    r.headers.add(\"Access-Control-Allow-Headers\", \"authorization,content-type\")\n    r.headers.add(\n        \"Access-Control-Allow-Methods\",\n        \"DELETE, GET, HEAD, OPTIONS, PATCH, POST, PUT\",\n    )\n    r.headers.add(\"Access-Control-Allow-Origin\", \"*\")\n    return r\n</code></pre>"},{"location":"reference/panther/panther_webapp/app/panther_server.html#panther.panther_webapp.app.panther_server.PFVServer.get_args","title":"get_args","text":"<pre><code>get_args()\n</code></pre> <p>summary Get list of argument for automatic GUI generation Returns:     type: description</p> Source code in <code>panther/panther_webapp/app/panther_server.py</code> <pre><code>def get_args():\n    \"\"\"_summary_\n    Get list of argument for automatic GUI generation\n    Returns:\n        _type_: _description_\n    \"\"\"\n    # TODO refactor\n    PFVServer.choices_args = {}\n    args_parser = ArgumentParserRunner().parser\n    args_list = [{}]\n    is_mutually_exclusive = True\n    for group_type in [\n        args_parser._mutually_exclusive_groups,\n        args_parser._action_groups,\n    ]:\n        for group in group_type:\n            if group.title == \"positional arguments\":\n                continue\n            if group.title == \"optional arguments\":\n                continue\n            if group.title == \"Usage type\":\n                continue\n\n            cont = False\n            for p in PFVServer.supported_protocols:\n                if p in group.title.lower():\n                    cont = True\n            if cont:\n                continue\n\n            if len(args_list[-1]) == 3:\n                args_list.append({})\n\n            for action in group._group_actions:\n                group_name = group.title\n                if group_name not in args_list[-1]:\n                    args_list[-1][group_name] = []\n                if isinstance(action, argparse._StoreTrueAction):\n                    args_list[-1][group_name].append(\n                        {\n                            \"name\": action.dest,\n                            \"help\": action.help,\n                            \"type\": \"bool\",\n                            \"default\": False,\n                            \"is_mutually_exclusive\": is_mutually_exclusive,\n                            \"description\": action.metavar,\n                        }\n                    )\n                elif isinstance(action, argparse._StoreFalseAction):\n                    args_list[-1][group_name].append(\n                        {\n                            \"name\": action.dest,\n                            \"help\": action.help,\n                            \"type\": \"bool\",\n                            \"default\": True,\n                            \"is_mutually_exclusive\": is_mutually_exclusive,\n                            \"description\": action.metavar,\n                        }\n                    )\n                elif not isinstance(action, argparse._HelpAction):\n                    if hasattr(action, \"choices\"):\n                        if action.choices:\n                            PFVServer.choices_args[action.dest] = action.choices\n                        args_list[-1][group_name].append(\n                            {\n                                \"name\": action.dest,\n                                \"help\": action.help,\n                                \"type\": str(action.type),\n                                \"default\": action.default,\n                                \"is_mutually_exclusive\": is_mutually_exclusive,\n                                \"choices\": action.choices,\n                                \"description\": action.metavar,\n                            }\n                        )\n                    else:\n                        args_list[-1][group_name].append(\n                            {\n                                \"name\": action.dest,\n                                \"help\": action.help,\n                                \"type\": str(action.type),\n                                \"default\": action.default,\n                                \"is_mutually_exclusive\": is_mutually_exclusive,\n                                \"description\": action.metavar,\n                            }\n                        )\n        is_mutually_exclusive = False\n\n    json_arg = args_list\n\n    args_list = [{}]\n    is_mutually_exclusive = True\n    for group_type in [\n        args_parser._mutually_exclusive_groups,\n        args_parser._action_groups,\n    ]:\n        for group in group_type:\n            for p in PFVServer.supported_protocols:\n                if p in group.title.lower():\n                    if p in PFVServer.current_protocol:\n                        if len(args_list[-1]) == 3:\n                            args_list.append({})\n\n                        for action in group._group_actions:\n                            group_name = group.title\n                            if group_name not in args_list[-1]:\n                                args_list[-1][group_name] = []\n                            if isinstance(action, argparse._StoreTrueAction):\n                                args_list[-1][group_name].append(\n                                    {\n                                        \"name\": action.dest,\n                                        \"help\": action.help,\n                                        \"type\": \"bool\",\n                                        \"default\": False,\n                                        \"is_mutually_exclusive\": is_mutually_exclusive,\n                                        \"description\": action.metavar,\n                                    }\n                                )\n                            elif isinstance(action, argparse._StoreFalseAction):\n                                args_list[-1][group_name].append(\n                                    {\n                                        \"name\": action.dest,\n                                        \"help\": action.help,\n                                        \"type\": \"bool\",\n                                        \"default\": True,\n                                        \"is_mutually_exclusive\": is_mutually_exclusive,\n                                        \"description\": action.metavar,\n                                    }\n                                )\n                            elif not isinstance(action, argparse._HelpAction):\n                                if hasattr(action, \"choices\"):\n                                    if action.choices:\n                                        PFVServer.choices_args[action.dest] = (\n                                            action.choices\n                                        )\n                                    args_list[-1][group_name].append(\n                                        {\n                                            \"name\": action.dest,\n                                            \"help\": action.help,\n                                            \"type\": str(action.type),\n                                            \"default\": action.default,\n                                            \"is_mutually_exclusive\": is_mutually_exclusive,\n                                            \"choices\": action.choices,\n                                            \"description\": action.metavar,\n                                        }\n                                    )\n                                else:\n                                    args_list[-1][group_name].append(\n                                        {\n                                            \"name\": action.dest,\n                                            \"help\": action.help,\n                                            \"type\": str(action.type),\n                                            \"default\": action.default,\n                                            \"is_mutually_exclusive\": is_mutually_exclusive,\n                                            \"description\": action.metavar,\n                                        }\n                                    )\n                    is_mutually_exclusive = False\n    prot_arg = args_list\n    return json_arg, prot_arg\n</code></pre>"},{"location":"reference/panther/panther_webapp/app/panther_server.html#panther.panther_webapp.app.panther_server.PFVServer.get_attack_model","title":"get_attack_model","text":"<pre><code>get_attack_model(attack_model)\n</code></pre> <p>It returns the attack model :param attack_model: the attack model :return: the attack model</p> Source code in <code>panther/panther_webapp/app/panther_server.py</code> <pre><code>def get_attack_model(self, attack_model):\n    \"\"\"\n    It returns the attack model\n    :param attack_model: the attack model\n    :return: the attack model\n    \"\"\"\n    return attack_model\n</code></pre>"},{"location":"reference/panther/panther_webapp/app/panther_server.html#panther.panther_webapp.app.panther_server.PFVServer.get_json_graph","title":"get_json_graph","text":"<pre><code>get_json_graph()\n</code></pre> <p>It returns the json graph of the knowledge graph :return: the json graph of the knowledge graph</p> Source code in <code>panther/panther_webapp/app/panther_server.py</code> <pre><code>@app.route(\"/kg/graph/json\", methods=[\"GET\"])\ndef get_json_graph():\n    \"\"\"\n    It returns the json graph of the knowledge graph\n    :return: the json graph of the knowledge graph\n    \"\"\"\n    with open(\"/tmp/cytoscape_config.json\", \"r\") as json_file:\n        data = json.load(json_file)\n\n    response = PFVServer.app.response_class(\n        response=json.dumps(data), status=200, mimetype=\"application/json\"\n    )\n    return response\n</code></pre>"},{"location":"reference/panther/panther_webapp/app/panther_server.html#panther.panther_webapp.app.panther_server.PFVServer.redirection","title":"redirection","text":"<pre><code>redirection()\n</code></pre> <p>It redirects the user to the index.html page :return: a redirect to the index.html page.</p> Source code in <code>panther/panther_webapp/app/panther_server.py</code> <pre><code>@app.route(\"/\")\ndef redirection():\n    \"\"\"\n    It redirects the user to the index.html page\n    :return: a redirect to the index.html page.\n    \"\"\"\n    return redirect(\"index.html\", code=302)\n</code></pre>"},{"location":"reference/panther/panther_webapp/app/panther_server.html#panther.panther_webapp.app.panther_server.PFVServer.serve_attack","title":"serve_attack","text":"<pre><code>serve_attack()\n</code></pre> <p>It creates a folder for the project, and then calls the upload function :return: the upload function.</p> Source code in <code>panther/panther_webapp/app/panther_server.py</code> <pre><code>@app.route(\"/creator.html\", methods=[\"GET\", \"POST\"])\ndef serve_attack():\n    \"\"\"\n    It creates a folder for the project, and then calls the upload function\n    :return: the upload function.\n    \"\"\"\n    # PFVServer.experiments.update_includes_ptls()\n    # PFVServer.experiments.update_includes()\n    setup_quic_model(PFVServer.protocol_test_path)\n    setup_cytoscape()\n    return render_template(\"creator.html\")\n</code></pre>"},{"location":"reference/panther/panther_webapp/app/panther_server.html#panther.panther_webapp.app.panther_server.PFVServer.serve_index","title":"serve_index","text":"<pre><code>serve_index()\n</code></pre> <p>It creates a folder for the project, and then calls the upload function :return: the upload function.</p> Source code in <code>panther/panther_webapp/app/panther_server.py</code> <pre><code>@app.route(\"/index.html\", methods=[\"GET\", \"POST\"])\ndef serve_index():\n    \"\"\"\n    It creates a folder for the project, and then calls the upload function\n    :return: the upload function.\n    \"\"\"\n    PFVServer.app.logger.info(\"Protocols under test: \" + PFVServer.current_protocol)\n\n    if DEBUG:\n        json_arg, prot_arg = PFVServer.get_args()\n        PFVServer.app.logger.info(\"JSON arguments availables:\")\n        for elem in json_arg:\n            PFVServer.app.logger.info(elem)\n        PFVServer.app.logger.info(\"PROTOCOL arguments availables:\")\n        for elem in prot_arg:\n            PFVServer.app.logger.info(elem)\n\n    if request.method == \"POST\":\n        # TODO link json_arg and prot_arg to config so we can restore old config\n        # TODO fix problem with alpn &amp; initial version\n        if (\n            request.args.get(\"prot\", \"\")\n            and request.args.get(\"prot\", \"\") in PFVServer.supported_protocols\n        ):\n            # The Selected Protocol change -&gt; change GUI\n            json_arg, prot_arg = PFVServer.change_current_protocol(\n                request.args.get(\"prot\", \"\")\n            )\n\n            (\n                PFVServer.supported_protocols,\n                PFVServer.current_protocol,\n                PFVServer.tests_enabled,\n                PFVServer.conf_implementation_enable,\n                PFVServer.implementation_enable,\n                PFVServer.protocol_model_path,\n                PFVServer.protocol_results_path,\n                PFVServer.protocol_test_path,\n                PFVServer.config,\n                PFVServer.protocol_conf,\n            ) = get_experiment_config(PFVServer.current_protocol, True, False)\n\n        # TODO implem progress, avoid to use post if experience already launched\n        # TODO force to select at least one test and one implem\n        PFVServer.app.logger.info(\"Form in POST request:\")\n        PFVServer.app.logger.info(request.form)\n        if DEBUG:\n            for c in request.form:\n                for elem in request.form.getlist(c):\n                    PFVServer.app.logger.info(elem)\n\n        PFVServer.implementation_requested = []\n        experiment_arguments = {}\n        protocol_arguments = {}\n        PFVServer.tests_requested = []\n\n        arguments = dict(request.form)\n        exp_number = 1\n        for key, value in arguments.items():\n            if (key, value) == (\"boundary\", \"experiment separation\"):\n                exp_number += 1\n            elif (\n                key in PFVServer.implementation_enable.keys() and value == \"true\"\n            ):\n                PFVServer.implementation_requested.append(key)\n            elif \"test\" in key and value == \"true\":\n                PFVServer.tests_requested.append(key)\n            elif value != \"\":\n                if key in PFVServer.choices_args:\n                    print(PFVServer.choices_args[key])\n                    value = str(PFVServer.choices_args[key][int(value) - 1])\n                if exp_number == 1:\n                    experiment_arguments[key] = value\n                elif exp_number == 2:\n                    protocol_arguments[key] = value\n\n        PFVServer.app.logger.info(\n            \"Experiment arguments: \" + str(experiment_arguments)\n        )\n        PFVServer.app.logger.info(\"Protocol arguments: \" + str(protocol_arguments))\n        PFVServer.app.logger.info(\n            \"Experiment tests requested: \" + str(PFVServer.tests_requested)\n        )\n\n        PFVServer.is_experiment_started = True\n        PFVServer.experiment_iteration = (\n            len(PFVServer.implementation_requested)\n            * len(PFVServer.tests_requested)\n            * int(experiment_arguments[\"iter\"])\n        )\n\n        PFVServer.start_experiment_thread(experiment_arguments, protocol_arguments)\n    else:\n        if (\n            request.args.get(\"prot\", \"\")\n            and request.args.get(\"prot\", \"\") in PFVServer.supported_protocols\n        ):\n            json_arg, prot_arg = PFVServer.change_current_protocol(\n                request.args.get(\"prot\", \"\")\n            )\n            (\n                PFVServer.supported_protocols,\n                PFVServer.current_protocol,\n                PFVServer.tests_enabled,\n                PFVServer.conf_implementation_enable,\n                PFVServer.implementation_enable,\n                PFVServer.protocol_model_path,\n                PFVServer.protocol_results_path,\n                PFVServer.protocol_test_path,\n                PFVServer.config,\n                PFVServer.protocol_conf,\n            ) = get_experiment_config(PFVServer.current_protocol, True, False)\n\n    return render_template(\n        \"index.html\",\n        json_arg=json_arg,\n        prot_arg=prot_arg,\n\n        base_conf          =PFVServer.config,\n        protocol_conf      =PFVServer.protocol_conf,\n        supported_protocols=PFVServer.supported_protocols,\n        current_protocol   =PFVServer.current_protocol,\n\n        nb_exp                  =PFVServer.total_exp_in_dir,\n        tests_enable            =PFVServer.tests_enabled,\n        implementation_enable   =PFVServer.implementation_enable,\n        implementation_requested=PFVServer.implementation_requested,\n        progress                =PFVServer.experiment_current_iteration,  # PFVServer.experiments.count_1,\n        iteration               =PFVServer.experiment_iteration,\n    )\n</code></pre>"},{"location":"reference/panther/panther_webapp/app/panther_server.html#panther.panther_webapp.app.panther_server.PFVServer.serve_results","title":"serve_results","text":"<pre><code>serve_results()\n</code></pre> <p>It creates a folder for the project, and then calls the upload function :return: the upload function.</p> Source code in <code>panther/panther_webapp/app/panther_server.py</code> <pre><code>@app.route(\"/results.html\", methods=[\"GET\", \"POST\"])\ndef serve_results():\n    \"\"\"\n    It creates a folder for the project, and then calls the upload function\n    :return: the upload function.\n    \"\"\"\n    PFVServer.app.logger.info(\n        \"Current Protocol Tests output folder: \" + PFVServer.protocol_results_path\n    )\n    PFVServer.app.logger.info(os.listdir(PFVServer.protocol_results_path))\n\n    with os.scandir(PFVServer.protocol_results_path) as entries:\n        PFVServer.total_exp_in_dir = sum(1 for entry in entries if entry.is_dir())\n\n    default_page = 0\n    page = request.args.get(\"page\", default_page)\n    try:\n        page = page.number\n    except:\n        pass\n    # Get queryset of items to paginate\n    rge = range(PFVServer.total_exp_in_dir, 0, -1)\n    PFVServer.app.logger.info([i for i in rge])\n    PFVServer.app.logger.info(page)\n    items = [i for i in rge]\n\n    # Paginate items\n    items_per_page = 1\n    paginator = Paginator(items, per_page=items_per_page)\n\n    try:\n        items_page = paginator.page(page)\n    except PageNotAnInteger:\n        items_page = paginator.page(default_page)\n    except EmptyPage:\n        items_page = paginator.page(paginator.num_pages)\n\n    df_csv = pd.read_csv(PFVServer.protocol_results_path + \"data.csv\").set_index(\n        \"Run\"\n    )\n    PFVServer.app.logger.info(PFVServer.total_exp_in_dir - int(page))\n\n    result_row = df_csv.iloc[-1]\n    output = \"df_csv_row.html\"\n    # TODO change the label\n    # result_row.to_frame().T\n    # subdf = df_csv.drop(\"ErrorIEV\", axis=1).drop(\"OutputFile\", axis=1).drop(\"date\", axis=1).drop(\"date\", axis=1).drop(\"date\", axis=1) #.reset_index()\n    subdf = df_csv[[\"Implementation\", \"NbPktSend\", \"packet_event\", \"recv_packet\"]]\n    subdf.fillna(0, inplace=True)\n    # subdf[\"isPass\"] = subdf[\"isPass\"].astype(int)\n    subdf[\"NbPktSend\"] = subdf[\"NbPktSend\"].astype(int)\n    # PFVServer.app.logger.info(subdf)\n    # PFVServer.app.logger.info(df_csv.columns)\n    # PFVServer.app.logger.info(subdf.columns)\n    # subdf.columns = df_csv.columns\n    configurationData = [\n        {\n            \"id\": str(uuid.uuid4()),  # Must be unique TODO df_csv_scdg['filename']\n            \"name\": \"Experiences coverage view\",\n            \"parameters\": [\"Run\"],  # \"Implementation\",\n            \"measurements\": [\n                \"NbPktSend\"\n            ],  # , \"Total number of blocks\",'Number Syscall found' , 'Number Address found', 'Number of blocks visited', \"Total number of blocks\",\"time\"\n            \"data\": subdf.to_csv(),\n        },\n        {\n            \"id\": str(uuid.uuid4()),  # Must be unique TODO df_csv_scdg['filename']\n            \"name\": \"Experiences packet view\",\n            \"parameters\": [\"Run\"],  # \"Implementation\"\n            \"measurements\": [\n                \"packet_event\",\n                \"recv_packet\",\n            ],  # , \"Total number of blocks\",'Number Syscall found' , 'Number Address found', 'Number of blocks visited', \"Total number of blocks\",\"time\"\n            \"data\": subdf.to_csv(),  # index=False -&gt; need index\n        },\n    ]\n\n    export(configurationData, output)\n\n    # PFVServer.app.logger.info(configurationData)\n\n    with open(output, \"r\") as f:\n        df_csv_content = f.read()\n\n    summary = {}\n    summary[\"nb_pkt\"] = result_row[\"NbPktSend\"]\n    summary[\"initial_version\"] = result_row[\"initial_version\"]\n\n    PFVServer.current_exp_path = PFVServer.protocol_results_path + str(\n        PFVServer.total_exp_in_dir - int(page)\n    )\n    exp_dir = os.listdir(PFVServer.current_exp_path)\n    ivy_stderr = \"No output\"\n    ivy_stdout = \"No output\"\n    implem_err = \"No output\"\n    implem_out = \"No output\"\n    iev_out = \"No output\"\n    qlog_file = \"\"\n    pcap_file = \"\"\n    for file in exp_dir:\n        PFVServer.app.logger.info(file)\n        if \"ivy_stderr.txt\" in file:\n            with open(PFVServer.current_exp_path + \"/\" + file, \"r\") as f:\n                content = f.read()\n                if content == \"\":\n                    pass\n                else:\n                    ivy_stderr = content\n        elif \"ivy_stdout.txt\" in file:\n            with open(PFVServer.current_exp_path + \"/\" + file, \"r\") as f:\n                content = f.read()\n                if content == \"\":\n                    pass\n                else:\n                    ivy_stdout = content\n        elif \".err\" in file:\n            with open(PFVServer.current_exp_path + \"/\" + file, \"r\") as f:\n                content = f.read()\n                if content == \"\":\n                    pass\n                else:\n                    implem_err = content\n        elif \".out\" in file:\n            with open(PFVServer.current_exp_path + \"/\" + file, \"r\") as f:\n                content = f.read()\n                if content == \"\":\n                    pass\n                else:\n                    implem_out = content\n        elif \".iev\" in file:\n            # TODO use csv file\n            # file creation timestamp in float\n            c_time = os.path.getctime(PFVServer.current_exp_path + \"/\" + file)\n            # convert creation timestamp into DateTime object\n            dt_c = datetime.datetime.fromtimestamp(c_time)\n            PFVServer.app.logger.info(\"Created on:\" + str(dt_c))\n            summary[\"date\"] = dt_c\n            test_name = file.replace(\".iev\", \"\")[0:-1]\n            summary[\"test_name\"] = test_name\n            with open(PFVServer.current_exp_path + \"/\" + file, \"r\") as f:\n                content = f.read()\n                summary[\"test_result\"] = (\n                    \"Pass\" if \"test_completed\" in content else \"Fail\"\n                )\n\n            try:\n                plantuml_file = PFVServer.current_exp_path + \"/plantuml.puml\"\n                generate_graph_input(\n                    PFVServer.current_exp_path + \"/\" + file, plantuml_file\n                )\n                plantuml_obj = PlantUML(\n                    url=\"http://www.plantuml.com/plantuml/img/\",\n                    basic_auth={},\n                    form_auth={},\n                    http_opts={},\n                    request_opts={},\n                )\n\n                plantuml_file_png = plantuml_file.replace(\n                    \".puml\", \".png\"\n                )  # \"media/\" + str(nb_exp) + \"_plantuml.png\"\n                plantuml_obj.processes_file(plantuml_file, plantuml_file_png)\n\n                with open(PFVServer.current_exp_path + \"/\" + file, \"r\") as f:\n                    content = f.read()\n                    if content == \"\":\n                        pass\n                    else:\n                        iev_out = content\n            except:\n                pass\n        elif \".pcap\" in file:\n            pcap_file = file\n            # Now we need qlogs and pcap informations\n            summary[\"implementation\"] = file.split(\"_\")[0]\n            summary[\"test_type\"] = file.split(\"_\")[2]\n\n        elif \".qlog\" in file:\n            qlog_file = file\n\n    # Get page number from request,\n    # default to first page\n    try:\n        binary_fc = open(plantuml_file_png, \"rb\").read()  # fc aka file_content\n        base64_utf8_str = b64encode(binary_fc).decode(\"utf-8\")\n\n        ext = plantuml_file_png.split(\".\")[-1]\n    except:\n        base64_utf8_str = \"\"\n        ext = \"png\"\n    dataurl = f\"data:image/{ext};base64,{base64_utf8_str}\"\n    PFVServer.app.logger.info(items_page)\n    PFVServer.app.logger.info(paginator)\n\n    return render_template(\n        \"results.html\",\n        items_page=items_page,\n        nb_exp=PFVServer.total_exp_in_dir,\n        page=int(page),\n        current_exp=PFVServer.current_exp_path,\n        ivy_stderr=ivy_stderr,\n        ivy_stdout=ivy_stdout,\n        implem_err=implem_err,\n        implem_out=implem_out,\n        iev_out=iev_out,\n        plantuml_file_png=dataurl,\n        summary=summary,  # \"http://\"+PFVServer.vizualiser_ip+\":80/?file=http://\"\n        pcap_frame_link=(\n            \"http://ivy-visualizer:80/?file=http://ivy-standalone:80/directory/\"\n            + str(PFVServer.total_exp_in_dir - int(page))\n            + \"/file/\"\n            + pcap_file\n            + \"&amp;secrets=http://ivy-standalone:80/key/\"\n            + summary[\"implementation\"]\n            + \"_key.log\"\n            if pcap_file != \"\"\n            else None\n        ),\n        qlog_frame_link=(\n            \"http://ivy-visualizer:80/?file=http://ivy-standalone:80/directory/\"\n            + str(PFVServer.total_exp_in_dir - int(page))\n            + \"/file/\"\n            + qlog_file\n            if qlog_file != \"\"\n            else None\n        ),\n        df_csv_content=df_csv_content,\n    )\n</code></pre>"},{"location":"reference/panther/panther_webapp/app/panther_server.html#panther.panther_webapp.app.panther_server.PFVServer.serve_results_global","title":"serve_results_global","text":"<pre><code>serve_results_global()\n</code></pre> <p>It creates a folder for the project, and then calls the upload function :return: the upload function.</p> Source code in <code>panther/panther_webapp/app/panther_server.py</code> <pre><code>@app.route(\"/results-global.html\", methods=[\"GET\", \"POST\"])\ndef serve_results_global():\n    \"\"\"\n    It creates a folder for the project, and then calls the upload function\n    :return: the upload function.\n    \"\"\"\n    PFVServer.total_exp_in_dir = (\n        len(os.listdir(PFVServer.protocol_results_path)) - 2\n    )\n\n    PFVServer.app.logger.info(request.form)\n\n    summary = {}\n    df_csv = pd.read_csv(\n        PFVServer.protocol_results_path + \"data.csv\", parse_dates=[\"date\"]\n    )\n\n    df_simplify_date = df_csv\n    df_simplify_date[\"date\"] = df_csv[\"date\"].dt.strftime(\"%d/%m/%Y\")\n    df_date_min_max = df_simplify_date[\"date\"].agg([\"min\", \"max\"])\n    df_nb_date = df_simplify_date[\"date\"].nunique()\n    df_dates = df_simplify_date[\"date\"].unique()\n    PFVServer.app.logger.info(list(df_dates))\n    PFVServer.app.logger.info(df_date_min_max)\n    PFVServer.app.logger.info(df_nb_date)\n    minimum_date = df_date_min_max[\"min\"]\n    maximum_date = df_date_min_max[\"max\"]\n\n    subdf = None\n    # if len(request.form) &gt;= 0:\n    for key in request.form:\n        if key == \"date_range\":\n            minimum = df_dates[int(request.form.get(\"date_range\").split(\",\")[0])]\n            maximum = df_dates[int(request.form.get(\"date_range\").split(\",\")[1])]\n            if subdf is None:\n                subdf = df_csv.query(\"date &gt;= @minimum and date &lt;= @maximum\")\n            else:\n                subdf = subdf.query(\"date &gt;= @minimum and date &lt;= @maximum\")\n        elif key == \"iter_range\":\n            minimum = request.form.get(\"iter_range\").split(\",\")[0]\n            maximum = request.form.get(\"iter_range\").split(\",\")[1]\n            if subdf is None:  # TOODO\n                subdf = df_csv.loc[df_csv[\"Run\"] &gt;= int(minimum)]\n                subdf = subdf.loc[subdf[\"Run\"] &lt;= int(maximum)]\n            else:\n                subdf = subdf.loc[subdf[\"Run\"] &gt;= int(minimum)]\n                subdf = subdf.loc[subdf[\"Run\"] &lt;= int(maximum)]\n        elif key == \"version\":\n            if request.form.get(\"version\") != \"all\":\n                if subdf is None:  # TOODO\n                    subdf = df_csv.loc[\n                        df_csv[\"initial_version\"] == request.form.get(\"version\")\n                    ]\n                else:\n                    subdf = subdf.loc[\n                        subdf[\"initial_version\"] == request.form.get(\"version\")\n                    ]\n        elif key == \"ALPN\":\n            if request.form.get(\"ALPN\") != \"all\":\n                if subdf is None:  # TOODO\n                    subdf = df_csv.loc[\n                        df_csv[\"Mode\"] == request.form.get(\"test_type\")\n                    ]\n                else:\n                    subdf = subdf.loc[\n                        subdf[\"Mode\"] == request.form.get(\"test_type\")\n                    ]\n        elif key == \"test_type\":\n            if request.form.get(\"test_type\") != \"all\":\n                if subdf is None:\n                    subdf = df_csv.loc[\n                        df_csv[\"Mode\"] == request.form.get(\"test_type\")\n                    ]\n                else:\n                    subdf = subdf.loc[\n                        subdf[\"Mode\"] == request.form.get(\"test_type\")\n                    ]\n        elif key == \"isPass\":\n            ispass = True if \"True\" in request.form.get(\"isPass\") else False\n            if request.form.get(\"isPass\") != \"all\":\n                if subdf is None:\n                    subdf = df_csv.loc[df_csv[\"isPass\"] == ispass]\n                else:\n                    subdf = subdf.loc[subdf[\"isPass\"] == ispass]\n        elif key == \"implem\":\n            for i in request.form.getlist(\"implem\"):\n                PFVServer.app.logger.info(i)\n                if subdf is None:\n                    subdf = df_csv.loc[df_csv[\"Implementation\"] == i]\n                else:\n                    subdf = subdf.loc[subdf[\"Implementation\"] == i]\n        elif key == \"server_test\":\n            for i in request.form.getlist(\"server_test\"):\n                if subdf is None:\n                    subdf = df_csv.loc[df_csv[\"TestName\"] == i]\n                else:\n                    subdf = subdf.loc[subdf[\"TestName\"] == i]\n        elif key == \"client_test\":\n            for i in request.form.getlist(\"client_test\"):\n                if subdf is None:\n                    subdf = df_csv.loc[df_csv[\"TestName\"] == i]\n                else:\n                    subdf = subdf.loc[subdf[\"TestName\"] == i]\n\n    if subdf is not None:\n        df_csv = subdf\n\n    csv_text = df_csv.to_csv()\n\n    output = \"df_csv.html\"\n    # TODO change the label\n    configurationData = [\n        {\n            \"id\": str(uuid.uuid4()),  # Must be unique TODO df_csv_scdg['filename']\n            \"name\": \"Experiences coverage view\",\n            \"parameters\": [\"Implementation\", \"Mode\", \"TestName\"],\n            \"measurements\": [\n                \"isPass\",\n                \"ErrorIEV\",\n                \"packet_event\",\n                \"packet_event_retry\",\n                \"packet_event_vn\",\n                \"packet_event_0rtt\",\n                \"packet_event_coal_0rtt\",\n                \"recv_packet\",\n                \"recv_packet_retry\",\n                \"handshake_done\",\n                \"tls.finished\",\n                \"recv_packet_vn\",\n                \"recv_packet_0rtt\",\n                \"undecryptable_packet_event\",\n                \"version_not_found_event\",\n                \"date\",\n                \"initial_version\",\n                \"NbPktSend\",\n                \"version_not_found\",\n            ],  # , \"Total number of blocks\",'Number Syscall found' , 'Number Address found', 'Number of blocks visited', \"Total number of blocks\",\"time\"\n            \"data\": df_csv.to_csv(index=False),\n        },\n        {\n            \"id\": str(uuid.uuid4()),  # Must be unique TODO df_csv_scdg['filename']\n            \"name\": \"Experiences coverage view\",\n            \"parameters\": [\"Implementation\", \"Mode\", \"TestName\"],\n            \"measurements\": [\n                \"isPass\",\n                \"ErrorIEV\",\n                \"packet_event\",\n                \"packet_event_retry\",\n                \"packet_event_vn\",\n                \"packet_event_0rtt\",\n                \"packet_event_coal_0rtt\",\n                \"recv_packet\",\n                \"recv_packet_retry\",\n                \"handshake_done\",\n                \"tls.finished\",\n                \"recv_packet_vn\",\n                \"recv_packet_0rtt\",\n                \"undecryptable_packet_event\",\n                \"version_not_found_event\",\n                \"date\",\n                \"initial_version\",\n                \"NbPktSend\",\n                \"version_not_found\",\n            ],  # , \"Total number of blocks\",'Number Syscall found' , 'Number Address found', 'Number of blocks visited', \"Total number of blocks\",\"time\"\n            \"data\": df_csv.to_csv(index=False),\n        },\n        {\n            \"id\": str(uuid.uuid4()),  # Must be unique TODO df_csv_scdg['filename']\n            \"name\": \"Experiences coverage view\",\n            \"parameters\": [\"Implementation\", \"Mode\", \"TestName\"],\n            \"measurements\": [\n                \"isPass\",\n                \"ErrorIEV\",\n                \"packet_event\",\n                \"packet_event_retry\",\n                \"packet_event_vn\",\n                \"packet_event_0rtt\",\n                \"packet_event_coal_0rtt\",\n                \"recv_packet\",\n                \"recv_packet_retry\",\n                \"handshake_done\",\n                \"tls.finished\",\n                \"recv_packet_vn\",\n                \"recv_packet_0rtt\",\n                \"undecryptable_packet_event\",\n                \"version_not_found_event\",\n                \"date\",\n                \"initial_version\",\n                \"NbPktSend\",\n                \"version_not_found\",\n            ],  # , \"Total number of blocks\",'Number Syscall found' , 'Number Address found', 'Number of blocks visited', \"Total number of blocks\",\"time\"\n            \"data\": df_csv.to_csv(index=False),\n        },\n    ]\n    # The above code is not valid Python code. It appears to be the beginning of a comment or\n    # documentation string, but it is missing the closing characters.\n\n    export(configurationData, output)\n\n    # PFVServer.app.logger.info(configurationData)\n\n    with open(output, \"r\") as f:\n        df_csv_content = f.read()\n\n    return render_template(\n        \"result-global.html\",\n        nb_exp=PFVServer.total_exp_in_dir,\n        current_exp=PFVServer.current_exp_path,\n        summary=summary,\n        csv_text=csv_text,\n        tests_requested=PFVServer.tests_requested,\n        client_tests=PFVServer.client_tests,\n        implementation_requested=PFVServer.implementation_requested,\n        min_date=None,\n        max_date=None,\n        df_nb_date=df_nb_date,\n        df_dates=list(df_dates),\n        df_csv_content=df_csv_content,\n    )\n</code></pre>"},{"location":"reference/panther/panther_webapp/app/utils/index.html","title":"Index","text":""},{"location":"reference/panther/panther_webapp/app/utils/index.html#panther.panther_webapp.app.utils","title":"utils","text":""},{"location":"reference/panther/panther_webapp/app/utils/cytoscape_generator.html","title":"cytoscape_generator","text":""},{"location":"reference/panther/panther_webapp/app/utils/cytoscape_generator.html#panther.panther_webapp.app.utils.cytoscape_generator","title":"cytoscape_generator","text":""},{"location":"reference/panther/panther_webapp/app/utils/results_viewer.html","title":"results_viewer","text":""},{"location":"reference/panther/panther_webapp/app/utils/results_viewer.html#panther.panther_webapp.app.utils.results_viewer","title":"results_viewer","text":""},{"location":"reference/panther/panther_worker/index.html","title":"Index","text":""},{"location":"reference/panther/panther_worker/index.html#panther.panther_worker","title":"panther_worker","text":""},{"location":"reference/panther/panther_worker/app/index.html","title":"Index","text":""},{"location":"reference/panther/panther_worker/app/index.html#panther.panther_worker.app","title":"app","text":""},{"location":"reference/panther/panther_worker/app/panther.html","title":"panther","text":""},{"location":"reference/panther/panther_worker/app/panther.html#panther.panther_worker.app.panther","title":"panther","text":""},{"location":"reference/panther/panther_worker/app/panther.html#panther.panther_worker.app.panther.Panther","title":"Panther","text":"<pre><code>Panther()\n</code></pre> Source code in <code>panther/panther_worker/app/panther.py</code> <pre><code>def __init__(self):\n    # Setup cargo\n    subprocess.Popen(\"\", shell=True, executable=\"/bin/bash\").wait()  # TODO source\n\n    # Setup logger\n    self.log = logging.getLogger(\"panther\")\n    self.log.setLevel(logging.INFO)\n    if self.log.hasHandlers():\n        self.log.handlers.clear()\n    self.log.addHandler(ch)\n    self.log.propagate = False\n\n    # Setup argument parser\n    self.args = ArgumentParserRunner().parse_arguments()\n\n    # Setup environment variables\n    for env_var in ENV_VAR:\n        os.environ[env_var] = str(ENV_VAR[env_var])\n        if DEBUG:\n            self.log.info(\"ENV_VAR=\" + env_var)\n            self.log.info(\"ENV_VAL=\" + str(ENV_VAR[env_var]))\n\n    # Setup configuration\n    self.log.info(\"Getting Experiment configuration:\")\n    (\n        self.supported_protocols,\n        self.current_protocol,\n        self.tests_enabled,\n        self.conf_implementation_enable,\n        self.implementation_enable,\n        self.protocol_model_path,\n        self.protocol_results_path,\n        self.protocol_test_path,\n        self.config,\n        self.protocol_conf,\n    ) = get_experiment_config(None, False, False)\n\n    self.log.info(\"Selected protocol: \" + self.current_protocol)\n\n    with os.scandir(self.protocol_results_path) as entries:\n        self.total_exp_in_dir = sum(1 for entry in entries if entry.is_dir())\n    self.current_exp_path = os.path.join(\n        self.protocol_results_path, str(self.total_exp_in_dir)\n    )\n\n    self.available_test_modes = []\n    self.included_files = list()\n\n    if self.config[\"debug_parameters\"].getboolean(\"memprof\"):\n        self.memory_snapshots = []\n</code></pre>"},{"location":"reference/panther/panther_worker/app/panther.html#panther.panther_worker.app.panther.Panther.find_ivy_files","title":"find_ivy_files","text":"<pre><code>find_ivy_files()\n</code></pre> <p>Recursively find all .ivy files in the specified folder and its subfolders, excluding those with 'test' in the filename.</p> <p>:param root_folder: The root folder to start the search from. :return: A list of paths to the found .ivy files.</p> Source code in <code>panther/panther_worker/app/panther.py</code> <pre><code>def find_ivy_files(self):\n    \"\"\"\n    Recursively find all .ivy files in the specified folder and its subfolders, excluding those with 'test' in the filename.\n\n    :param root_folder: The root folder to start the search from.\n    :return: A list of paths to the found .ivy files.\n    \"\"\"\n    ivy_files = []\n    for dirpath, _, filenames in os.walk(self.protocol_model_path):\n        for f in filenames:\n            if f.endswith(\".ivy\") and \"test\" not in f:\n                ivy_files.append(os.path.join(dirpath, f))\n    return ivy_files\n</code></pre>"},{"location":"reference/panther/panther_worker/app/panther_client.html","title":"panther_client","text":""},{"location":"reference/panther/panther_worker/app/panther_client.html#panther.panther_worker.app.panther_client","title":"panther_client","text":""},{"location":"reference/panther/panther_worker/app/panther_client.html#panther.panther_worker.app.panther_client.PFVClient","title":"PFVClient","text":"<pre><code>PFVClient(dir_path=None)\n</code></pre> Source code in <code>panther/panther_worker/app/panther_client.py</code> <pre><code>def __init__(self, dir_path=None):\n    pass\n</code></pre>"},{"location":"reference/panther/panther_worker/app/panther_client.html#panther.panther_worker.app.panther_client.PFVClient.add_header","title":"add_header","text":"<pre><code>add_header(r)\n</code></pre> <p>It sets the cache control headers to prevent caching</p> <p>:param r: The response object :return: the response object with the headers added.</p> Source code in <code>panther/panther_worker/app/panther_client.py</code> <pre><code>@app.after_request\ndef add_header(r):\n    \"\"\"\n    It sets the cache control headers to prevent caching\n\n    :param r: The response object\n    :return: the response object with the headers added.\n    \"\"\"\n    r.headers[\"Cache-Control\"] = \"no-cache, no-store, must-revalidate\"\n    r.headers[\"Pragma\"] = \"no-cache\"\n    r.headers[\"Expires\"] = \"0\"\n    r.headers[\"Cache-Control\"] = \"public, max-age=0\"\n    return r\n</code></pre>"},{"location":"reference/panther/panther_worker/app/argument_parser/index.html","title":"Index","text":""},{"location":"reference/panther/panther_worker/app/argument_parser/index.html#panther.panther_worker.app.argument_parser","title":"argument_parser","text":""},{"location":"reference/panther/panther_worker/app/argument_parser/ArgumentParserRunner.html","title":"ArgumentParserRunner","text":""},{"location":"reference/panther/panther_worker/app/argument_parser/ArgumentParserRunner.html#panther.panther_worker.app.argument_parser.ArgumentParserRunner","title":"ArgumentParserRunner","text":""},{"location":"reference/panther/panther_worker/app/logger/index.html","title":"Index","text":""},{"location":"reference/panther/panther_worker/app/logger/index.html#panther.panther_worker.app.logger","title":"logger","text":""},{"location":"reference/panther/panther_worker/app/logger/CustomFormatter.html","title":"CustomFormatter","text":""},{"location":"reference/panther/panther_worker/app/logger/CustomFormatter.html#panther.panther_worker.app.logger.CustomFormatter","title":"CustomFormatter","text":""},{"location":"reference/panther/panther_worker/app/panther_config/index.html","title":"Index","text":""},{"location":"reference/panther/panther_worker/app/panther_config/index.html#panther.panther_worker.app.panther_config","title":"panther_config","text":""},{"location":"reference/panther/panther_worker/app/panther_config/panther_config.html","title":"panther_config","text":""},{"location":"reference/panther/panther_worker/app/panther_config/panther_config.html#panther.panther_worker.app.panther_config.panther_config","title":"panther_config","text":""},{"location":"reference/panther/panther_worker/app/panther_runner/index.html","title":"Index","text":""},{"location":"reference/panther/panther_worker/app/panther_runner/index.html#panther.panther_worker.app.panther_runner","title":"panther_runner","text":""},{"location":"reference/panther/panther_worker/app/panther_runner/panther_apt_runner.html","title":"panther_apt_runner","text":""},{"location":"reference/panther/panther_worker/app/panther_runner/panther_apt_runner.html#panther.panther_worker.app.panther_runner.panther_apt_runner","title":"panther_apt_runner","text":""},{"location":"reference/panther/panther_worker/app/panther_runner/panther_minip_runner.html","title":"panther_minip_runner","text":""},{"location":"reference/panther/panther_worker/app/panther_runner/panther_minip_runner.html#panther.panther_worker.app.panther_runner.panther_minip_runner","title":"panther_minip_runner","text":""},{"location":"reference/panther/panther_worker/app/panther_runner/panther_quic_runner.html","title":"panther_quic_runner","text":""},{"location":"reference/panther/panther_worker/app/panther_runner/panther_quic_runner.html#panther.panther_worker.app.panther_runner.panther_quic_runner","title":"panther_quic_runner","text":""},{"location":"reference/panther/panther_worker/app/panther_runner/panther_runner.html","title":"panther_runner","text":""},{"location":"reference/panther/panther_worker/app/panther_runner/panther_runner.html#panther.panther_worker.app.panther_runner.panther_runner","title":"panther_runner","text":""},{"location":"reference/panther/panther_worker/app/panther_runner/panther_runner.html#panther.panther_worker.app.panther_runner.panther_runner.Runner","title":"Runner","text":"<pre><code>Runner(config, protocol_config, current_protocol, implems, executed_test=[])\n</code></pre> Source code in <code>panther/panther_worker/app/panther_runner/panther_runner.py</code> <pre><code>def __init__(\n    self, config, protocol_config, current_protocol, implems, executed_test=[]\n):\n    # Setup logger\n    self.log = logging.getLogger(\"panther-runner\")\n    self.log.setLevel(logging.INFO)\n    # if (self.log.hasHandlers()):\n    #     self.log.handlers.clear()\n    self.log.addHandler(ch)\n    self.log.propagate = False\n\n    # Setup configuration\n    self.log.info(\"START SETUP CONFIGURATION\")\n    self.current_protocol = current_protocol\n    self.config = config\n    self.log.info(\"SELECTED PROTOCOL: \" + self.current_protocol)\n    self.protocol_conf = protocol_config\n    self.log.info(\"END SETUP PROTOCOL PARAMETERS\")\n\n    # TODO refactor\n    self.iters = self.config[\"global_parameters\"].getint(\n        \"iter\"\n    )  # Number of iteration per test           # TODO enforce in this file\n    self.test_pattern = \"*\"  # Test to launch regex, * match all test # TODO\n\n    self.extra_args = []  # TODO\n    self.executed_tests = executed_test\n    self.nb_test_to_execute = 0\n    for mode in self.executed_tests.keys():\n        self.nb_test_to_execute += len(self.executed_tests[mode])\n    self.current_executed_test_count = 0\n\n    self.implems = implems\n\n    self.webapp_ip = socket.gethostbyname(\"panther-webapp\")\n    print(self.webapp_ip)\n    print(self.nb_test_to_execute)\n    print(self.nb_test_to_execute * self.config[\"global_parameters\"].getint(\"iter\"))\n    # TODO make less general\n    if (\n        \"quic_server_test_0rtt\" in executed_test\n        or \"quic_client_test_0rtt\" in executed_test\n    ):\n        self.bar_total_test = progressbar.ProgressBar(\n            max_value=(self.nb_test_to_execute + 2)\n            * self.config[\"global_parameters\"].getint(\"iter\")\n        )\n    else:\n        self.bar_total_test = progressbar.ProgressBar(\n            max_value=self.nb_test_to_execute\n            * self.config[\"global_parameters\"].getint(\"iter\")\n        )\n</code></pre>"},{"location":"reference/panther/panther_worker/app/panther_runner/panther_runner.html#panther.panther_worker.app.panther_runner.panther_runner.Runner.copy_file","title":"copy_file","text":"<pre><code>copy_file(src, dst)\n</code></pre> <p>Copy a file from source to destination.</p> <p>Parameters: src (str): Source file path. dst (str): Destination file path.</p> Source code in <code>panther/panther_worker/app/panther_runner/panther_runner.py</code> <pre><code>def copy_file(self, src, dst):\n    \"\"\"\n    Copy a file from source to destination.\n\n    Parameters:\n    src (str): Source file path.\n    dst (str): Destination file path.\n    \"\"\"\n    self.log.info(f\"Copy file: {src} to {dst}\")\n    shutil.copyfile(src, dst)\n</code></pre>"},{"location":"reference/panther/panther_worker/app/panther_runner/panther_runner.html#panther.panther_worker.app.panther_runner.panther_runner.Runner.get_binary_details","title":"get_binary_details","text":"<pre><code>get_binary_details(implem, mode)\n</code></pre> <p>Get binary path and name for the given implementation and mode.</p> <p>Parameters: implem (str): Implementation name. mode (str): Mode of the test (client/server).</p> <p>Returns:</p> <ul> <li> <code>tuple</code>          \u2013            <p>(binary_path, binary_name)</p> </li> </ul> Source code in <code>panther/panther_worker/app/panther_runner/panther_runner.py</code> <pre><code>def get_binary_details(self, implem, mode):\n    \"\"\"\n    Get binary path and name for the given implementation and mode.\n\n    Parameters:\n    implem (str): Implementation name.\n    mode (str): Mode of the test (client/server).\n\n    Returns:\n        tuple: (binary_path, binary_name)\n    \"\"\"\n    index = 0 if mode == \"client\" else 1\n    binary_dir = self.implems[implem][index][implem][\"binary-dir\"]\n    binary_name = self.implems[implem][index][implem][\"binary-name\"]\n\n    binary_path = (\n        binary_dir.replace(\"$IMPLEM_DIR\", IMPLEM_DIR.replace(\"$PROT\", self.current_protocol))\n        .replace(\"$MODEL_DIR\", MODEL_DIR)\n        + \"/\"\n        + binary_name.replace(\"$IMPLEM_DIR\", IMPLEM_DIR.replace(\"$PROT\", self.current_protocol))\n        .replace(\"$MODEL_DIR\", MODEL_DIR)\n        .split(\" \")[-1]\n    )\n\n    binary_name = binary_name.split(\"/\")[-1].split(\" \")[-1]\n    return binary_path, binary_name\n</code></pre>"},{"location":"reference/panther/panther_worker/app/panther_runner/panther_runner.html#panther.panther_worker.app.panther_runner.panther_runner.Runner.save_shadow_binaries","title":"save_shadow_binaries","text":"<pre><code>save_shadow_binaries(implem, test, run_id)\n</code></pre> <p>Save shadow binaries for the given implementation and test.</p> <p>Parameters: implem (str): Implementation name. test (object): Test object containing test details. run_id (int): Unique run identifier.</p> Source code in <code>panther/panther_worker/app/panther_runner/panther_runner.py</code> <pre><code>def save_shadow_binaries(self, implem, test, run_id):\n    \"\"\"\n    Save shadow binaries for the given implementation and test.\n\n    Parameters:\n    implem (str): Implementation name.\n    test (object): Test object containing test details.\n    run_id (int): Unique run identifier.\n    \"\"\"\n    if not self.config[\"net_parameters\"].getboolean(\"shadow\"):\n        return\n\n    self.log.info(\"Save shadow binaries:\")\n\n    try:\n        binary_path, binary_name = self.get_binary_details(implem, test.mode)\n        self.copy_file(binary_path, os.path.join(self.config[\"global_parameters\"][\"dir\"], str(run_id), binary_name))\n\n        test_path = os.path.join(self.config[\"global_parameters\"][\"build_dir\"], test.name)\n        dest_test_path = os.path.join(self.config[\"global_parameters\"][\"dir\"], str(run_id), test.name)\n        self.copy_file(test_path, dest_test_path)\n\n    except Exception as e:\n        self.log.error(f\"Failed to save shadow binaries: {e}\")\n</code></pre>"},{"location":"reference/panther/panther_worker/app/panther_stats/index.html","title":"Index","text":""},{"location":"reference/panther/panther_worker/app/panther_stats/index.html#panther.panther_worker.app.panther_stats","title":"panther_stats","text":""},{"location":"reference/panther/panther_worker/app/panther_stats/panther_apt_stats.html","title":"panther_apt_stats","text":""},{"location":"reference/panther/panther_worker/app/panther_stats/panther_apt_stats.html#panther.panther_worker.app.panther_stats.panther_apt_stats","title":"panther_apt_stats","text":""},{"location":"reference/panther/panther_worker/app/panther_stats/panther_minip_stats.html","title":"panther_minip_stats","text":""},{"location":"reference/panther/panther_worker/app/panther_stats/panther_minip_stats.html#panther.panther_worker.app.panther_stats.panther_minip_stats","title":"panther_minip_stats","text":""},{"location":"reference/panther/panther_worker/app/panther_stats/panther_quic_stats.html","title":"panther_quic_stats","text":""},{"location":"reference/panther/panther_worker/app/panther_stats/panther_quic_stats.html#panther.panther_worker.app.panther_stats.panther_quic_stats","title":"panther_quic_stats","text":""},{"location":"reference/panther/panther_worker/app/panther_tester/index.html","title":"Index","text":""},{"location":"reference/panther/panther_worker/app/panther_tester/index.html#panther.panther_worker.app.panther_tester","title":"panther_tester","text":""},{"location":"reference/panther/panther_worker/app/panther_tester/panther_apt_tester.html","title":"panther_apt_tester","text":""},{"location":"reference/panther/panther_worker/app/panther_tester/panther_apt_tester.html#panther.panther_worker.app.panther_tester.panther_apt_tester","title":"panther_apt_tester","text":""},{"location":"reference/panther/panther_worker/app/panther_tester/panther_minip_tester.html","title":"panther_minip_tester","text":""},{"location":"reference/panther/panther_worker/app/panther_tester/panther_minip_tester.html#panther.panther_worker.app.panther_tester.panther_minip_tester","title":"panther_minip_tester","text":""},{"location":"reference/panther/panther_worker/app/panther_tester/panther_quic_tester.html","title":"panther_quic_tester","text":""},{"location":"reference/panther/panther_worker/app/panther_tester/panther_quic_tester.html#panther.panther_worker.app.panther_tester.panther_quic_tester","title":"panther_quic_tester","text":""},{"location":"reference/panther/panther_worker/app/panther_tester/panther_tester.html","title":"panther_tester","text":""},{"location":"reference/panther/panther_worker/app/panther_tester/panther_tester.html#panther.panther_worker.app.panther_tester.panther_tester","title":"panther_tester","text":""},{"location":"reference/panther/panther_worker/app/panther_utils/index.html","title":"Index","text":""},{"location":"reference/panther/panther_worker/app/panther_utils/index.html#panther.panther_worker.app.panther_utils","title":"panther_utils","text":""},{"location":"reference/panther/panther_worker/app/panther_utils/panther_constant.html","title":"panther_constant","text":""},{"location":"reference/panther/panther_worker/app/panther_utils/panther_constant.html#panther.panther_worker.app.panther_utils.panther_constant","title":"panther_constant","text":""},{"location":"coverage.html","title":"Coverage","text":""}]}