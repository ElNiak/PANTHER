{
    "domain": {
        "isolate_proof": null,
        "named": [],
        "ghost_sorts": [],
        "hierarchy": [
            "set(['correct_pnum', 'arr', 'hdr_long', 'get_packet_sample', 'pkt_num_pos', 'get_var_int_len', 'decrypt', 'get_level', 'payload_length_pos', 'get_var_int', 'decrypt[implement432]', 'get_pnum', 'show_header', 'hdr_type', 'get_pnum_len_b', 'get_pnum_len', 'retry_integrity_tag', 'byte_xor', 'dcid', 'bytes_to_pos', 'encrypt_rtt', 'scid', 'show_token_len', 'show_pkt_length', 'header_info', 'token_length', 'get_header_info', 'show_pkt', 'encrypt[implement430]', 'pos_to_byte', 'encrypt', 'encrypt_rtt[implement431]', 'retry_integrity_tag[implement433]', 'stream_data_xor', 'idx', 'payload_length', 'bytes_to_cid', 'show_payload', 'to_var_int_16', 'cid_to_tls_id'])",
            "set(['get[after110]', 'size[after111]', 'empty[after104]', 'get[before109]', 'extensionality', 'set[before107]', 'create[before105]', 'prop103', 'append[after113]', 'set[after108]', 'resize[after112]', 'create[after106]'])",
            "set(['next[implement8]', 'prev[implement9]', 'def7', 'interp6'])",
            "set(['create[implement88]', 'def100', 'append[implement96]', 'resize[implement93]', 'reverse[implement98]', 'empty[implement89]', 'size[implement92]', 'set[implement90]', 'interp85', 'back[implement94]', 'get[implement91]', 'pop_back[implement95]', 'extend[implement97]', 'def86', 'def87'])",
            "set(['handle[after296]', 'handle[before295]', 'handle'])",
            "set(['get[after110]', 'extensionality', 'get[before109]', 'size[after111]', 'set[before107]', 'create[before105]', 'prop103', 'set[after108]', 'empty[after104]', 'append[after113]', 'resize[after112]', 'create[after106]'])",
            "set(['create[implement88]', 'resize[implement93]', 'append[implement96]', 'reverse[implement98]', 'empty[implement89]', 'size[implement92]', 'set[implement90]', 'interp85', 'back[implement94]', 'def100', 'get[implement91]', 'pop_back[implement95]', 'extend[implement97]', 'def86', 'def87'])",
            "set(['begin', 'domain', 'set', 'end', 'reverse', 'extend', 'get', 'create', 'back', 'value', 't', 'def102', 'empty', 'resize', 'append', 'pop_back', 'iso', 'segment', 'spec', 'impl', 'size'])",
            "set(['create[implement88]', 'def100', 'append[implement96]', 'resize[implement93]', 'reverse[implement98]', 'empty[implement89]', 'size[implement92]', 'set[implement90]', 'interp85', 'back[implement94]', 'get[implement91]', 'pop_back[implement95]', 'extend[implement97]', 'def86', 'def87'])",
            "set(['compression_method]', 'extension]', 'cipher_suite]', 'psk_identity]', 'handshake]'])",
            "set(['next[implement8]', 'prev[implement9]', 'def7', 'interp6'])",
            "set(['begin', 'set', 'end', 'reverse', 'extend', 'get', 'create', 'back', 'value', 't', 'empty', 'def102', 'resize', 'iso', 'impl', 'pop_back', 'segment', 'spec', 'append', 'size'])",
            "set(['next', 'succ', 'iso', 't', 'prev', 'spec', 'impl'])",
            "set(['create[implement88]', 'resize[implement93]', 'append[implement96]', 'reverse[implement98]', 'empty[implement89]', 'size[implement92]', 'set[implement90]', 'pop_back[implement95]', 'def100', 'back[implement94]', 'get[implement91]', 'interp85', 'extend[implement97]', 'def86', 'def87'])",
            "set(['create[implement88]', 'def100', 'append[implement96]', 'resize[implement93]', 'reverse[implement98]', 'empty[implement89]', 'size[implement92]', 'set[implement90]', 'pop_back[implement95]', 'back[implement94]', 'get[implement91]', 'interp85', 'extend[implement97]', 'def86', 'def87'])",
            "set(['set', 'value', 'stream_id_16', 'is_set'])",
            "set(['next[implement16]', 'interp14', 'def15', 'prev[implement17]'])",
            "set(['next[implement8]', 'prev[implement9]', 'def7', 'interp6'])",
            "set(['next', 'succ', 'iso', 't', 'prev', 'spec', 'impl'])",
            "set(['next', 'succ', 'iso', 't', 'prev', 'spec', 'impl'])",
            "set(['get[after110]', 'create[before105]', 'sieze[after111]', 'get[before109]', 'extensionality', 'set[before107]', 'prop103', 'set[after108]', 'append[after113]', 'empty[after104]', 'resize[after112]', 'create[after106]'])",
            "set(['victim_ep', 'server_ep', 'clients_ep', 'mim_ep', 'servers_ep', 'attacker_ep', 'client_ep', 'client_server_ep'])",
            "set(['get[after110]', 'extensionality', 'get[before109]', 'size[after111]', 'set[before107]', 'create[before105]', 'prop103', 'set[after108]', 'empty[after104]', 'append[after113]', 'resize[after112]', 'create[after106]'])",
            "set(['next[implement8]', 'prev[implement9]', 'def7', 'interp6'])",
            "set(['value', 'begin', 'set', 'end', 'reverse', 'extend', 'get', 'create', 'back', 'append', 'def102', 'empty', 'iso', 'impl', 'pop_back', 'size', 'segment', 'spec', 'resize', 't'])",
            "set([])",
            "set(['get[after110]', 'size[after111]', 'empty[after104]', 'get[before109]', 'extensionality', 'set[before107]', 'create[before105]', 'prop103', 'append[after113]', 'set[after108]', 'resize[after112]', 'create[after106]'])",
            "set(['next', 'succ', 'iso', 't', 'prev', 'spec', 'impl'])",
            "set([])",
            "set(['get[after110]', 'extensionality', 'set[after108]', 'get[before109]', 'size[after111]', 'set[before107]', 'create[before105]', 'prop103', 'append[after113]', 'empty[after104]', 'resize[after112]', 'create[after106]'])",
            "set(['is_set', 'set', 'value', 'other_version', 'chosen_version'])",
            "set(['get[after110]', 'create[before105]', 'size[after111]', 'empty[after104]', 'get[before109]', 'extensionality', 'set[before107]', 'prop103', 'append[after113]', 'set[after108]', 'resize[after112]', 'create[after106]'])",
            "set(['totality', 'next[after3]', 'prop2', 'prev[before4]', 'antisymmetry', 'prop1', 'prev[after5]', 'transitivity'])",
            "set(['begin', 'append', 'end', 'reverse', 'extend', 'get', 'create', 'back', 'value', 'empty', 'def102', 'set', 'iso', 'resize', 'pop_back', 'size', 'segment', 'spec', 'impl', 't'])",
            "set(['value', 'domain', 'set', 'end', 'reverse', 'extend', 'get', 'create', 'begin', 'append', 'back', 'def102', 'empty', 'iso', 't', 'resize', 'pop_back', 'segment', 'spec', 'impl', 'size'])",
            "set(['create[implement88]', 'def100', 'append[implement96]', 'resize[implement93]', 'reverse[implement98]', 'empty[implement89]', 'size[implement92]', 'set[implement90]', 'pop_back[implement95]', 'back[implement94]', 'get[implement91]', 'interp85', 'extend[implement97]', 'def86', 'def87'])",
            "set(['set', 'stream_pos_32', 'value', 'is_set'])",
            "set(['get[after110]', 'extensionality', 'get[before109]', 'size[after111]', 'set[before107]', 'create[before105]', 'prop103', 'set[after108]', 'empty[after104]', 'append[after113]', 'resize[after112]', 'create[after106]'])",
            "set(['begin', 'set', 'end', 'reverse', 'extend', 'get', 'create', 'back', 'value', 'def102', 'empty', 'iso', 'resize', 'pop_back', 'append', 'size', 'segment', 'spec', 'impl', 't'])",
            "set(['set', 'stream_pos_32', 'value', 'is_set'])",
            "set(['socket', 'recv', 'send', 'iso', 'close', 'open', 'impl', 'listen'])",
            "set(['totality', 'next[after3]', 'prev[after5]', 'prev[before4]', 'antisymmetry', 'prop1', 'prop2', 'transitivity'])",
            "set(['set', 'scid', 'value', 'is_set'])",
            "set(['ppkt_to_be_forwarded_to_server', 'init_cids', 'force_client_forward', 'modify_packet', 'reset_NAT', 'configure_NAT_attack_out', 'get_saved_packets', 'configure_NAT_attack_out_trick', 'ep_out', 'replay_packet', 'init[after457]', 'configure_NAT_attack_out_localhost', 'ppkt_saved', 'ppkt_to_be_forge_parsed', 'cppkt_forwarded_to_client', 'tls_id', 'last_cppkt_forwarded_to_client', 'cppkt_forwarded_to_server', 'ppkt_to_be_forwarded_to_client', 'ppkt_to_be_forge', 'enc_level', 'ppkt_to_be_replayed_to_server', 'wait_forward', 'forward_turn', 'nat_configured', 'last_cppkt_forwarded_to_server', 'enc_level_ppkt_to_be_forge', 'set_ep', 'force_server_forward', 'max_retransmit', 'ep_in', 'ppkt_to_be_reflected_to_victim', 'forward_packet_to', 'configure_NAT_attack_in', 'save_packets', 'ppkt_saved_b', 'set_tls_id', 'forward_turn_count', 'behavior', 'reflection_packets'])",
            "set(['content'])",
            "set(['next', 'succ', 'iso', 't', 'prev', 'spec', 'impl'])",
            "set(['create[implement88]', 'def100', 'append[implement96]', 'reverse[implement98]', 'empty[implement89]', 'size[implement92]', 'set[implement90]', 'interp85', 'resize[implement93]', 'back[implement94]', 'get[implement91]', 'pop_back[implement95]', 'extend[implement97]', 'def86', 'def87'])",
            "set(['from_bytes[implement399]', 'to_bytes', 'iso', 'to_bytes[implement398]', 'from_bytes'])",
            "set([])",
            "set([])",
            "set(['next', 'succ', 'iso', 't', 'prev', 'spec', 'impl'])",
            "set(['back', 'value', 'domain', 'set', 'end', 'reverse', 'extend', 'get', 'create', 'begin', 'append', 't', 'def102', 'resize', 'iso', 'impl', 'pop_back', 'segment', 'spec', 'empty', 'size'])",
            "set([])",
            "set(['get[after110]', 'extensionality', 'empty[after104]', 'get[before109]', 'size[after111]', 'set[before107]', 'create[before105]', 'prop103', 'append[after113]', 'set[after108]', 'resize[after112]', 'create[after106]'])",
            "set([])",
            "set([])",
            "set(['get[after110]', 'extensionality', 'size[after111]', 'get[before109]', 'create[before105]', 'set[before107]', 'prop103', 'set[after108]', 'append[after113]', 'empty[after104]', 'resize[after112]', 'create[after106]'])",
            "set([])",
            "set(['prev[after5]', 'next[after3]', 'prop2', 'prev[before4]', 'antisymmetry', 'prop1', 'totality', 'transitivity'])",
            "set(['get[after110]', 'size[after111]', 'get[before109]', 'extensionality', 'set[before107]', 'create[before105]', 'prop103', 'set[after108]', 'append[after113]', 'empty[after104]', 'resize[after112]', 'create[after106]'])",
            "set(['iso', 'to_bytes', 'from_bytes[implement399]', 'to_bytes[implement398]', 'from_bytes'])",
            "set(['begin', 'set', 'end', 'reverse', 'extend', 'get', 'create', 'back', 'value', 't', 'def102', 'resize', 'iso', 'empty', 'append', 'pop_back', 'segment', 'spec', 'impl', 'size'])",
            "set(['create[implement88]', 'back[implement94]', 'append[implement96]', 'resize[implement93]', 'reverse[implement98]', 'empty[implement89]', 'size[implement92]', 'set[implement90]', 'interp85', 'def100', 'get[implement91]', 'pop_back[implement95]', 'extend[implement97]', 'def86', 'def87'])",
            "set(['deserialize[implement253]', 'deserialize', 'result', 'value', 'pos'])",
            "set(['max_early_data_size'])",
            "set(['selected_identity'])",
            "set(['begin', 'set', 'end', 'reverse', 'extend', 'get', 'create', 'back', 'value', 'def102', 'empty', 'iso', 't', 'append', 'resize', 'pop_back', 'segment', 'spec', 'impl', 'size'])",
            "set(['next[implement8]', 'prev[implement9]', 'def7', 'interp6'])",
            "set(['upper', 'lower', 'id'])",
            "set(['ticket_nonce', 'ticket_lifetime', 'ticket_age_add', 'extensions', 'ticket'])",
            "set(['begin', 'set', 'end', 'reverse', 'extend', 'get', 'create', 'back', 'value', 't', 'def102', 'empty', 'resize', 'impl', 'pop_back', 'iso', 'segment', 'spec', 'append', 'size'])",
            "set(['get[after110]', 'size[after111]', 'empty[after104]', 'get[before109]', 'extensionality', 'set[before107]', 'create[before105]', 'prop103', 'append[after113]', 'set[after108]', 'resize[after112]', 'create[after106]'])",
            "set(['prev[after5]', 'next[after3]', 'prop2', 'prev[before4]', 'antisymmetry', 'prop1', 'totality', 'transitivity'])",
            "set(['back', 'domain', 'set', 'end', 'impl', 'extend', 'get', 'create', 'begin', 'value', 't', 'def102', 'empty', 'iso', 'resize', 'pop_back', 'size', 'segment', 'spec', 'append', 'reverse'])",
            "set(['begin', 'value', 'domain', 'set', 'end', 'reverse', 'extend', 'get', 'create', 'back', 'append', 't', 'def102', 'empty', 'iso', 'resize', 'pop_back', 'segment', 'spec', 'impl', 'size'])",
            "set(['tls_id', 'ppkt_recvd', 'init[after459]', 'enc_level', 'setup_socket', 'set_tls_id', 'behavior', 'ep', 'set_ep'])",
            "set(['min_ack_delay', 'show_crypto_length', 'tls_id_to_cid', 'is_flow_control_error', 'show_last_datagram_size', 'inverse_functional', 'endpoint_to_pid', 'init[after334]', 'sending_resetSent', 'bounded_sequence', 'quic_ser', 'show_fsm_sending_send_event', 'vector[tls', 'max_acked', 'enqueue_frame_rtt', 'server_addr', 'init[after256]', 'random_stream_id', 'versions_bv', 'max_stream_data_val', 'app_server_open_event_vn', 'random_stream_id[implement441]', 'initial_max_stream_id_bidi', 'zero_rtt_allowed', 'crypto_data_present', 'tls_send_event[after468]', 'retry_recv', 'stream_seen', 'forward_packets_victim', 'packet_scid', 'initial_max_stream_data_bidi_local_server_0rtt', 'send_retire_cid', 'tls_client_version_response[after473]', 'init[after465]', 'quic_ser_retry', 'app_server_open_event', 'vector', 'receiving_resetRecvd', 'quic_endpoint', 'forward_packet_to_client_event[before339]', 'bounded_sequence_spec', 'nclients', 'microsecs', 'quic_deser', 'receiving_resetRead', 'queued_frames_rtt', 'packet_event[before323]', 'handle_tls_handshake', 'random_stream_pos[implement438]', 'quic_ser_zerortt', 'show_tls_keys_established_event', 'port', 'cid_mapped_token', 'version_information', 'first_initial_send', 'zero_rtt_server_test', 'last_packet_length', 'modify_packets', 'version', 'last_pkt_num', 'initial_max_stream_data_bidi_local', 'net', 'undecryptable_packet_event', 'client_initial_scid', 'num_queued_frames', 'client_initial_scil', 'mim_agent', 'client_initial_rcid', 'infer_tls_events_retry', 'established_0rtt_keys', 'path', 'interp236', 'infer_frame', 'cid_to_us', 'init[after483]', 'max_stream_data', 'quic_prot_ser', 'quic_deser_retry', 'version_negociated', 'tls_api_upper_keys_established[implement469]', 'tls_id_to_src', 'stream_app_data', 'infer_tls_events_vn', 'tls_ser', 'deserializer', 'packet_event_retry[after478]', 'init[after460]', 'tls_client_initial_request', 'infer_tls_events_0rtt', 'pkt_serdes_retry', 'queued_level', 'infer_tls_events', 'sending_ready', 'socket_endpoint_mim', 'byte', 'is_stream_state_error', 'tls_intf', 'show_l', 'zero_rtt_client_test', 'conn_seen', 'issued_zero_length_cid', 'initial_dcid', 'header_retry', 'tls_api', 'handle_receiving_recv', 'replay_packet_to_server_event[after344]', 'init[after508]', 'forged_packet_event_retry[after350]', 'victim_agent', 'show_fsm_sending_dataSent_event', 'clients', 'reset_token', 'ip_endpoints', 'greater_stream_pos', 'version_not_found', 'first_zrtt_pkt', 'sock_victim', 'send_connection_close', 'frame_stream_data_blocked_handle[before498]', 'net_recv[implement466]', 'second_server', 'client_port_alt', 'modify_protected_packet_event[before337]', 'initial_max_stream_data_bidi_remote', 'show_fsm_receiving_ack_event', 'is_frame_encoding_error', 'bit_vector', 'init[after464]', 'tls_recv_event[after259]', '_finalize', 'udp_impl', 'arr_pkt_num_s', 'lower_stream_pos', 'hi_byte_pos', 'initial_max_stream_data_uni_server_0rtt', 'min_ack_delay_check', 'init[after320]', 'show_fsm_sending_ready_event', 'stream_reset', 'initial_max_data', 'map', 'connection_closed', 'packet_event_retry[before327]', 'cid_length', 'packet_event_0rtt[before330]', 'sock_alt', 'grease_quic_bit', 'unidir', 'unbounded_sequence', 'client_alt', 'arr_pkt_num_r', 'zrtt_pkt_set', 'n_clients', 'reflect_packet_to_victim_event[after346]', 'sdb_frame_restransmitted', 'forged_quic_packet_retry', 'show_version', 'pkt_num', 'packed_forwarded_arr', 'infer_tls', 'inc_cid', 'forged_packet_send', 'retry_source_connection_id', 'max_ack_delay', 'app_server_open_event_1rtt', 'established_1rtt_keys', 'jdx_r', 'jdx_s', 'handle_transport_error', 'quic_packet_vn', 'recv_packet_victim', 'lastest_stream_id_receiving', 'sock_attacker', 'frame_application_close_handle[before496]', 'pkt_serdes_0rtt', 'modify_protected_packet_event[after338]', 'serdes', 'show_set_initial_keys', 'supported_versions', 'hi_non_probing_endpoint', 'sending_send', 'packet_event_retry[after328]', 'first_datagram_received', 'count_rcid_frame', 'stream_app_data_end', 'used_cid', 'packet_encryption_level_up', 'app_server_open_event[after241]', 'reflect_packet_to_victim_event', 'lastest_pkt_num_receiving', 'final_version', 'retry_response', 'tls_client_initial_response', 'forged_pkt_serdes_retry', 'ordered_set', 'version_not_found_event', 'dst_tls_id', 'init[after262]', 'cipher_packet', 'is_connection_id_limit_error', 'lastest_stream_id_sender', 'forward_packets', 'zrtt_pkt_update', 'count_stream_frame', 'show_fsm_receiving_dataRead_event', 'forged_packet_event', 'export_length_cid_extension', 'lower_stream_pos[implement440]', 'max_data_set', 'frame_new_token_handle[before490]', 'interp77', 'tls_hand_extensions', 'stream_finished', 'interp79', 'interp78', 'init[after348]', 'vector[transport_parameter]', 'mim_addr', 'undefined_host_error', 'mim_client_target', 'is_transport_parameter_error', 'is_stream_limit_test', 'quic_packet_retry', 'packet_event[after476]', 'connected_to', 'handshake_done_send', 'init[after463]', 'totally_ordered', 'iversion', 'client_non_zero_scil', 'the_cids', 'app_server_open_event[before240]', 'show_fsm_receiving_resetRecvd_event', 'count_reset_frame', 'victim_addr', 'http_request', 'forward_packet_to_client_event', 'dst_is_generated', 'packet_encryption_level', 'partial_function', 'forward_packet_to_server_event', 'endpoint_id_addr', 'tp_client_set', 'client_initial_dcid', 'client_send_event[before501]', 'client_initial_dcil', 'error_code', 'frame_max_stream_data_handle[before497]', 'show_cond', 'max_seq_num', 'sequence_iterator', 'ordered_map_impl', 'sending_resetRecvd', 'greater_stream_id[implement442]', 'forward_packet_to_client_event[after340]', 'is_client', 'initial_max_stream_data_uni', 'server_port_alt', 'array', 'loss_bits', 'tls_client_initial_request[after471]', 'interp325', 'recv_protected_packet_mim', 'packet_event_coal_0rtt[before332]', 'server_cid_alt', 'tls_client_retry_response', 'option', 'lower_microsecs[implement447]', 'get_stream_kind', 'dst_is_generated_tls', 'zero_length_token', 'is_key_update_error', 'the_cid', 'show_biatch', 'idx_s', 'idx_r', 'forged_packet_event_retry[before349]', 'show_receiving_fsm_event', 'unbounded_queue', 'packet_event[after324]', 'frame_max_data_handle[before499]', 'nonce_cid', 'tls_gnutls', 'max_stream_data_set', 'show_fsm_receiving_recv_event', 'replayed_packet_event_0rtt[before354]', 'tls_recv_event[before258]', 'show_fsm_receiving_sizeKnown_event', 'token_saved', 'retry_client_test', 'client_send_event[after502]', 'tls_client_initial_response[after472]', 'double_cid', 'lower_stream_id[implement443]', 'client', 'show_stream', 'handle_receiving_resetRead', 'initial_token', 'map_cids', 'export_length_cid_mim', 'index', 'disable_active_migration', 'interp83', 'http_request_file', 'interp81', 'show_fsm_receiving_dataRecvd_event', 'tls_deser', 'connected', 'initial_keys_set', 'packet_event', 'is_no_viable_path', 'segment', 'server_cid', 'reference_pkt_num', 'set_encryption_level', 'std_serializer', 'vnversion', 'is_internal_error', 'stream_id_to_cid', 'initial_max_stream_id_bidi_server_0rtt', 'count_newcid_frame', 'the_cid_alt', 'random_stream_data[implement444]', 'max_stream_set', 'init[after326]', 'keyval', 'stream_max_data', 'show_iretry', 'quic_ser_vn', 'initial_scid', 'is_victim', 'show_fsm_sending_resetSent_event', 'show_endpoint', 'trans_params_struct', 'tls_send_event', 'app_server_open_event_0rtt', 'sending_dataRecvd', 'enable_time_stamp', 'crypto_handler_pos', 'num_queued_frames_rtt', 'handle_receiving_dataRecvd', 'original_destination_connection_id', 'is_mim_standalone', 'stream_app_data_finished', 'count_sdb_frame', 'cidseq_to_seqnum', 'initial_max_streams_bidi', 'array_impl', 'ack_credit', 'order_iterator_impl', 'null_type', 'handle_sending_ack', 'is_invalid_token', 'show_iretryb', 'packet_event[before485]', 'tls_lower_intf', 'cid', 'bytes', 'app_server_open_event_retry', 'replay_packet_to_server_event', 'lower_stream_id', 'init[after321]', 'forged_packet_event_vn', 'initial_max_data_server_0rtt', 'show_sending_fsm_event', 'max_data_val', 'pkt_serdes_vn', 'handle_receiving_dataRead', 'show_app_send_event', 'migration_done', 'frame', 'tls_client_retry_response[after474]', 'forged_packet_event_vn[before351]', 'packet_event_0rtt[after331]', 'pkt_has_close', 'conn_draining', 'handle_receiving_resetRecvd', 'random_stream_pos', 'interp503', 'app_send_event[after243]', 'interp506', 'interp507', 'interp504', 'interp505', 'fake_client', 'last_cid_seq', 'tls_client_0rtt_response[after475]', 'endpoint_to_socket', 'tls_handshake_data_event[after470]', 'packet_event_vn', 'client_vn', 'handle_receiving_sizeKnown', 'tls_send_event[before257]', 'initial_source_connection_id', 'save_packet', 'is_random_padding_packet', 'queued_challenge', 'replay_packet_to_server_event[before343]', 'tls', 'num_conn', 'is_final_size_error', 'long_unbounded_sequence', 'show_tls_id_to_cid', 'show_enc_level', 'crypto_data', 'clear_packet', 'keep_coalesed', 'receiving_dataRecvd', 'set_encryption_level[after261]', 'tls_client_0rtt_response', 'init[after322]', 'init[after462]', 'show_pstats', 'scid_size_pos', 'app_send_event', 'trans_params_set', 'last_datagram_received_size', 'cid_to_token', 'iterable', 'quic_packet_0rtt', 'forged_packet_event[after336]', 'client_server', 'last_packet_type', 'cid_seq', 'max_rtp_num', 'established_handshake_keys', 'pkt_serdes_0rtt_coal', 'tls_api_lower_send[implement467]', 'show_fsm_sending_dataRecvd_event', 'init[after481]', 'stream_kind', 'totally_ordered_with_zero', 'conn_closed', 'stream_frame_restransmitted', 'show_biatch_2', 'handle_receiving_ack', 'negocation_of_version_initiated', 'show_test', 'attacker', 'trans_params_ops', 'show_initial_request_vn', 'frame_stream_handle[before486]', 'queued_level_rtt', 'tls_id_to_dst', 'conn_enc_level', 'interp315', 'queued_non_ack', 'show_fsm_receiving_resetRead_event', 'handle_sending_resetSent', 'show_initial_request_initial', 'receiving_recv', 'padding_packet_event', 'aid', 'type_bits', 'stream_id_allowed', 'ip', 'second_client', 'quic_prot_deser', 'lo_byte_pos', 'tls_client_version_response', 'frame_stop_sending_handle[before491]', 'queued_ack_eliciting', 'forged_pkt_serdes', 'is_stream_limit_error', 'export_length_cid', 'forged_quic_packet_vn', 'init[after242]', 'replayed_packet_event_0rtt', 'first_ack_freq_received', 'acked_pkt', 'forged_quic_packet', 'packet_event_0rtt[after480]', 'conn_total_data', 'server_cids', 'greater_stream_id', 'stream_id', 'acti_coid_check', 'tls_keys_established_event[after260]', 'allowed_migration', 'greater_stream_pos[implement439]', 'frame_ack_handle[before488]', 'client_initial_version', 'is_no_error', 'hi_non_probing', 'zero_rtt_sent', 'handle_sending_resetRecvd', 'max_stream', 'negocation_of_version', 'show_ack_credit', 'current_stream', 'handle_sending_send', 'reflect_packet_to_victim_event[before345]', 'initial_version', 'unknown_transport_parameter', 'victim_port', 'is_protocol_violation', 'init[after484]', 'replay_packets', 'dcid_size_pos', 'queued_frames', 'init[after461]', 'recv_0rtt_pkt', 'forged_protected_pkt_serdes', 'quic_deser_zerortt', 'is_server_busy', 'zrtt_pkt_process', 'sock_mim_server', 'frame_crypto_handle[before487]', 'crypto_length', 'bytes_to_itoken', 'crypto_pos', 'queued_non_probing', 'sock_mim_client', 'cid_to_aid', 'preferred_address', 'random_microsecs[implement445]', 'active_connection_id_limit', 'bit', 'allowed_multiple_migration', 'packet_event_vn[before316]', 'replayed_quic_packet_0rtt', 'show_probing', 'client_addr', 'quic_ser_forged', 'stream_length', 'mim_port_out', 'server', 'map_wrapper', 'handle_sending_dataRecvd', 'packet_event_coal_0rtt', 'ordered_map', 'quic_packet_type', 'stream_pos', 'unknown_ignore', 'initial_max_stream_data_bidi_remote_server_0rtt', 'packet_event_coal_0rtt[after479]', 'is_crypto_buffer_exceeded', 'packet_event_0rtt', 'replayed_packet_event_0rtt[after355]', 'show_level_offset_length', 'rel_array', 'bidir', 'pkt_serdes', 'receiving_dataRead', 'transport_parameter', 'init[after500]', 'crypto_reset', 'interp347', 'prot', 'tls_extensions', 'cid_mapped', 'interp82', 'packet_event_vn[after317]', 'server_port', 'interp80', 'client_port_vn', 'frame_rst_stream_handle[before489]', 'initial_max_stream_id_uni', 'replayed_pkt_serdes_0rtt', 'enqueue_frame', 'client_port', 'forward_packet_to_server_event[after342]', 'show_fsm_sending_resetRecvd_event', 'make_transport_parameters', 'modify_protected_packet_event', 'packet_event_coal_0rtt[after333]', 'sock_vn', 'force_new_ack', 'idx', 'endpoint_to_socket_mim', 'frame_new_connection_id_handle[before493]', 'crypto_data_end', 'dcid_size_cl', 'packet_event_retry', 'endpoint_id', 'stream_data', 'forged_packet_event_retry', 'receiving_sizeKnown', 'order_iterator', 'handle_tls_extensions', 'tls_client_version_request', 'stream_app_pos', 'last_ack_freq_seq', 'frame_retire_connection_id_handle[before494]', 'is_application_error', 'functional', 'queued_close', 'servers', 'cid_to_bytes', 'std_deserializer', 'is_aead_limit_reached', 'is_crypto_error', 'queued_level_type', 'retry_token', 'tls_ser_server', 'quic_protection', 'is_version_negociation_error', 'is_mim', 'packed_forwarded', 'sock', 'draining_pkt_sent', 'get_stream_role', 'show_tls_lower_send', 'ipv4', 'recv_packet_mim', 'ipv6', 'init[after239]', 'init[after84]', 'quic_transport_parameters', 'stop_sending_in_bad_state', 'is_padding_packet', 'stateless_reset_token', 'cid_to_stream_id', 'trans_params', 'max_packet_size', 'cids', 'forged_pkts', 'active_connection_id_limit_server_0rtt', 'versions', 'init[after353]', 'recv_vn_pkt', 'frame_max_streams_handle[before492]', 'handle_sending_dataSent', 'sending_dataSent', 'show_tls_send_event', 'max_idle_timeout', 'client_send_event', 'handle_client_transport_parameters', 'quic_packet_coal_0rtt', 'lastest_pkt_num_sender', 'binary_input_file', 'conn_requested', 'random_microsecs', 'forged_pkt_serdes_vn', 'forward_packet_to_server_event[before341]', 'quic_deser_vn', 'packet_event_vn[after477]', 'show_aead', 'tls_keys_established_event', 'arr_streamid_r', 'arr_streamid_s', 'init[after482]', 'greater_microsecs[implement446]', 'reset_frame_restransmitted', 'recv_retry_pkt', 'recv_packet', 'frame_connection_close_handle[before495]', 'show_cid', 'role', 'witness', 'src_tls_id', 'set_wrapper', 'tls_handshake_finished', 'forged_packet_event_vn[after352]', 'show_connected', 'lower_microsecs', 'itoken', 'tls_recv_event', 'bytes_to_cid', 'random_stream_data', 'bytes_to_version', 'show_kk', 'mim_port_in', 'supported_versions_bv', 'init[after329]', 'ack_delay_exponent', 'quic_deser_forged', 'greater_microsecs', 'seqnum_to_cid', 'max_additional_data', 'forged_packet_event[before335]', 'last_zrtt_pkt', 'socket_endpoint', 'mim_server_target', 'retry_sent', 'show_socket', 'forged_protected_quic_packet', 'quic_packet', 'path_challenge_pending', 'sent_pkt', 'is_crypto_limit_test'])",
            "set(['clients', 'init_tls_ids', 'src_tls_id', 'client', 'set_tls_id', 'init[after453]', 'set_ep'])",
            "set(['value', 'begin', 'set', 'end', 'reverse', 'extend', 'get', 'create', 'back', 'append', 't', 'def102', 'resize', 'iso', 'impl', 'pop_back', 'segment', 'spec', 'empty', 'size'])",
            "set(['value', 'begin', 'set', 'end', 'reverse', 'extend', 'get', 'create', 'back', 'append', 'def102', 'empty', 'resize', 't', 'pop_back', 'iso', 'segment', 'spec', 'impl', 'size'])",
            "set(['arr', 'tls_id', 'idx', 'enc_level', 'set_tls_id', 'ep', 'set_ep'])",
            "set(['compression_methods', 'cipher_suites', 'session_id', 'extensions', 'client_version', 'rand_info'])",
            "set(['tls_id', 'enc_level', 'set_tls_id', 'behavior', 'ep', 'set_ep', 'init[after454]'])",
            "set(['reason_phrase', 'handle[before279]', 'handle', 'frame_type', 'handle[after280]', 'reason_phrase_length', 'err_code'])",
            "set(['set', 'stream_pos_32', 'value', 'is_set'])",
            "set(['create[implement88]', 'resize[implement93]', 'append[implement96]', 'reverse[implement98]', 'extend[implement97]', 'empty[implement89]', 'size[implement92]', 'set[implement90]', 'interp85', 'back[implement94]', 'get[implement91]', 'pop_back[implement95]', 'def100', 'def86', 'def87'])",
            "set(['begin', 'set', 'end', 'reverse', 'extend', 'get', 'create', 'back', 'value', 'def102', 'resize', 'iso', 'empty', 'append', 'pop_back', 'size', 'segment', 'spec', 'impl', 't'])",
            "set(['begin', 'set', 'end', 'reverse', 'extend', 'get', 'create', 'back', 'value', 't', 'def102', 'empty', 'resize', 'impl', 'pop_back', 'iso', 'segment', 'spec', 'append', 'size'])",
            "set(['value', 'begin', 'set', 'end', 'reverse', 'extend', 'get', 'create', 'back', 'append', 'empty', 'def102', 'resize', 'iso', 't', 'pop_back', 'segment', 'spec', 'impl', 'size'])",
            "set(['cb', 'open', 'handle_recv', 'listen'])",
            "set(['totality', 'next[after3]', 'prop2', 'prev[before4]', 'antisymmetry', 'prop1', 'prev[after5]', 'transitivity'])",
            "set(['next[implement8]', 'prev[implement9]', 'def7', 'interp6'])",
            "set(['get[after110]', 'extensionality', 'set[after108]', 'get[before109]', 'size[after111]', 'set[before107]', 'create[before105]', 'prop103', 'append[after113]', 'empty[after104]', 'resize[after112]', 'create[after106]'])",
            "set(['set', 'stream_pos_32', 'value', 'is_set'])",
            "set(['arr', 'tls_id', 'idx', 'enc_level', 'set_tls_id', 'ep', 'set_ep'])",
            "set([])",
            "set(['prop2', 'next[after3]', 'prev[after5]', 'prev[before4]', 'antisymmetry', 'prop1', 'totality', 'transitivity'])",
            "set(['handle', 'id', 'handle[before275]', 'handle[after276]'])",
            "set(['prev[after5]', 'next[after3]', 'totality', 'prev[before4]', 'antisymmetry', 'prop1', 'prop2', 'transitivity'])",
            "set(['create[implement88]', 'def100', 'append[implement96]', 'reverse[implement98]', 'empty[implement89]', 'size[implement92]', 'set[implement90]', 'pop_back[implement95]', 'resize[implement93]', 'back[implement94]', 'get[implement91]', 'interp85', 'extend[implement97]', 'def86', 'def87'])",
            "set(['totality', 'next[after3]', 'prop2', 'prev[before4]', 'antisymmetry', 'prop1', 'prev[after5]', 'transitivity'])",
            "set(['create[implement88]', 'resize[implement93]', 'append[implement96]', 'reverse[implement98]', 'empty[implement89]', 'size[implement92]', 'set[implement90]', 'interp85', 'def100', 'back[implement94]', 'get[implement91]', 'pop_back[implement95]', 'extend[implement97]', 'def86', 'def87'])",
            "set(['rcid', 'set', 'value', 'is_set'])",
            "set(['exponent_8', 'set', 'value', 'is_set'])",
            "set(['next', 'succ', 'iso', 't', 'prev', 'spec', 'impl'])",
            "set(['next', 'succ', 'iso', 't', 'prev', 'spec', 'impl'])",
            "set(['arr', 'idx', 'supported_version', 'pversion', 'ptype', 'dst_cid', 'src_cid'])",
            "set([])",
            "set(['prev[after5]', 'next[after3]', 'totality', 'prev[before4]', 'antisymmetry', 'prop1', 'prop2', 'transitivity'])",
            "set(['from_bytes[implement399]', 'to_bytes', 'iso', 'from_bytes', 'to_bytes[implement398]'])",
            "set(['prev[after5]', 'next[after3]', 'prop2', 'prev[before4]', 'antisymmetry', 'prop1', 'totality', 'transitivity'])",
            "set(['get[after110]', 'extensionality', 'get[before109]', 'size[after111]', 'set[before107]', 'prop103', 'set[after108]', 'empty[after104]', 'append[after113]', 'create[before105]', 'resize[after112]', 'create[after106]'])",
            "set(['totality', 'next[after3]', 'prop2', 'prev[before4]', 'antisymmetry', 'prop1', 'prev[after5]', 'transitivity'])",
            "set(['create[implement88]', 'back[implement94]', 'append[implement96]', 'reverse[implement98]', 'empty[implement89]', 'size[implement92]', 'set[implement90]', 'interp85', 'resize[implement93]', 'def100', 'get[implement91]', 'pop_back[implement95]', 'extend[implement97]', 'def86', 'def87'])",
            "set(['create[implement88]', 'def100', 'append[implement96]', 'resize[implement93]', 'reverse[implement98]', 'empty[implement89]', 'size[implement92]', 'set[implement90]', 'pop_back[implement95]', 'back[implement94]', 'get[implement91]', 'interp85', 'extend[implement97]', 'def86', 'def87'])",
            "set(['handle', 'seq_num', 'handle[after302]', 'handle[before301]', 'length', 'token', 'scid', 'retire_prior_to'])",
            "set(['iso', 'to_bytes', 'from_bytes[implement399]', 'from_bytes', 'to_bytes[implement398]'])",
            "set(['next', 'succ', 'iso', 't', 'prev', 'spec', 'impl'])",
            "set(['arr', 'idx', 'seq_num', 'pversion', 'ptype', 'long', 'dst_cid', 'src_cid', 'retired_cids', 'payload'])",
            "set(['next[implement8]', 'prev[implement9]', 'def7', 'interp6'])",
            "set(['begin', 'append', 'end', 'reverse', 'extend', 'get', 'create', 'back', 'value', 't', 'def102', 'empty', 'iso', 'resize', 'pop_back', 'set', 'segment', 'spec', 'impl', 'size'])",
            "set(['handle', 'handle[after306]', 'data', 'handle[before305]'])",
            "set(['prev[after5]', 'next[after3]', 'prop2', 'prev[before4]', 'antisymmetry', 'prop1', 'totality', 'transitivity'])",
            "set(['begin', 'domain', 'set', 'end', 'reverse', 'extend', 'get', 'create', 'back', 'value', 't', 'def102', 'empty', 'iso', 'impl', 'resize', 'pop_back', 'segment', 'spec', 'append', 'size'])",
            "set(['next', 'succ', 'iso', 't', 'prev', 'spec', 'impl'])",
            "set(['next[implement8]', 'prev[implement9]', 'def7', 'interp6'])",
            "set(['the_cipher_suite', 'session_id', 'extensions', 'the_compression_method', 'rand_info', 'server_version'])",
            "set(['begin', 'append', 'end', 'reverse', 'extend', 'get', 'create', 'domain', 'value', 'back', 'def102', 'resize', 'iso', 'impl', 'pop_back', 'set', 'size', 'segment', 'spec', 'empty', 't'])",
            "set(['handle[before277]', 'handle', 'id', 'handle[after278]'])",
            "set(['tls_id', 'enc_level', 'set_tls_id', 'init[after452]', 'behavior', 'ep', 'set_ep'])",
            "set(['next', 'succ', 'iso', 't', 'prev', 'spec', 'impl'])",
            "set(['arr', 'idx', 'pversion', 'ptype', 'long', 'dst_cid', 'src_cid', 'retired_cids', 'token', 'integrity_token'])",
            "set(['create[implement88]', 'back[implement94]', 'append[implement96]', 'reverse[implement98]', 'empty[implement89]', 'size[implement92]', 'set[implement90]', 'pop_back[implement95]', 'resize[implement93]', 'def100', 'get[implement91]', 'interp85', 'extend[implement97]', 'def86', 'def87'])",
            "set(['next', 'succ', 'iso', 't', 'prev', 'spec', 'impl'])",
            "set(['next[implement8]', 'prev[implement9]', 'def7', 'interp6'])",
            "set(['unknown', 'set', 'value', 'is_set'])",
            "set(['next', 'succ', 'iso', 't', 'prev', 'spec', 'impl'])",
            "set([])",
            "set(['set', 'value', 'is_set'])",
            "set(['get[after110]', 'create[before105]', 'set[after108]', 'get[before109]', 'size[after111]', 'set[before107]', 'extensionality', 'prop103', 'empty[after104]', 'append[after113]', 'resize[after112]', 'create[after106]'])",
            "set(['get[after110]', 'size[after111]', 'get[before109]', 'extensionality', 'set[before107]', 'create[before105]', 'prop103', 'set[after108]', 'append[after113]', 'empty[after104]', 'resize[after112]', 'create[after106]'])",
            "set(['next[implement8]', 'prev[implement9]', 'def7', 'interp6'])",
            "set(['from_bytes[implement399]', 'to_bytes', 'iso', 'to_bytes[implement398]', 'from_bytes'])",
            "set(['protocol', 'port', 'addr'])",
            "set(['fragment', 'version'])",
            "set(['create[implement88]', 'resize[implement93]', 'append[implement96]', 'reverse[implement98]', 'empty[implement89]', 'size[implement92]', 'set[implement90]', 'pop_back[implement95]', 'def100', 'back[implement94]', 'get[implement91]', 'interp85', 'extend[implement97]', 'def86', 'def87'])",
            "set(['set', 'stream_pos_32', 'value', 'is_set'])",
            "set(['get[after110]', 'extensionality', 'size[after111]', 'set[after108]', 'get[before109]', 'create[before105]', 'set[before107]', 'prop103', 'empty[after104]', 'append[after113]', 'resize[after112]', 'create[after106]'])",
            "set(['next[implement8]', 'prev[implement9]', 'def7', 'interp6'])",
            "set(['next', 'succ', 'iso', 't', 'prev', 'spec', 'impl'])",
            "set(['get[after110]', 'extensionality', 'size[after111]', 'get[before109]', 'create[before105]', 'set[before107]', 'prop103', 'set[after108]', 'append[after113]', 'empty[after104]', 'resize[after112]', 'create[after106]'])",
            "set(['handle[after290]', 'handle', 'id', 'handle[before289]'])",
            "set([])",
            "set(['get[after110]', 'size[after111]', 'set[after108]', 'get[before109]', 'create[before105]', 'set[before107]', 'extensionality', 'prop103', 'empty[after104]', 'append[after113]', 'resize[after112]', 'create[after106]'])",
            "set(['next[implement8]', 'prev[implement9]', 'def7', 'interp6'])",
            "set([])",
            "set(['handle[before291]', 'handle', 'handle[after292]', 'id'])",
            "set(['ranges', 'arr', 'idx', 'gap'])",
            "set(['prev[after5]', 'next[after3]', 'prop2', 'prev[before4]', 'antisymmetry', 'prop1', 'totality', 'transitivity'])",
            "set(['create[implement88]', 'def100', 'append[implement96]', 'reverse[implement98]', 'empty[implement89]', 'size[implement92]', 'set[implement90]', 'pop_back[implement95]', 'resize[implement93]', 'back[implement94]', 'get[implement91]', 'interp85', 'extend[implement97]', 'def86', 'def87'])",
            "set(['create[implement88]', 'def100', 'append[implement96]', 'resize[implement93]', 'reverse[implement98]', 'empty[implement89]', 'size[implement92]', 'set[implement90]', 'pop_back[implement95]', 'back[implement94]', 'get[implement91]', 'interp85', 'extend[implement97]', 'def86', 'def87'])",
            "set(['arr', 'idx', 'pversion', 'ptype', 'long', 'dst_cid', 'src_cid', 'retired_cids', 'token', 'integrity_token'])",
            "set(['create[implement88]', 'def100', 'append[implement96]', 'reverse[implement98]', 'empty[implement89]', 'size[implement92]', 'set[implement90]', 'interp85', 'resize[implement93]', 'back[implement94]', 'get[implement91]', 'pop_back[implement95]', 'extend[implement97]', 'def86', 'def87'])",
            "set(['next', 'succ', 'iso', 't', 'prev', 'spec', 'impl'])",
            "set(['next', 'succ', 'iso', 't', 'prev', 'spec', 'impl'])",
            "set(['content', 'version'])",
            "set(['create[implement88]', 'def100', 'append[implement96]', 'resize[implement93]', 'reverse[implement98]', 'empty[implement89]', 'size[implement92]', 'set[implement90]', 'interp85', 'back[implement94]', 'get[implement91]', 'pop_back[implement95]', 'extend[implement97]', 'def86', 'def87'])",
            "set(['next[implement8]', 'prev[implement9]', 'def7', 'interp6'])",
            "set(['psk_binder', 'psk_identities'])",
            "set(['handle', 'pos', 'handle[before293]', 'handle[after294]'])",
            "set(['next', 'succ', 'iso', 't', 'prev', 'spec', 'impl'])",
            "set(['next[implement8]', 'prev[implement9]', 'def7', 'interp6'])",
            "set(['get[after110]', 'size[after111]', 'get[before109]', 'extensionality', 'set[before107]', 'create[before105]', 'prop103', 'set[after108]', 'empty[after104]', 'append[after113]', 'resize[after112]', 'create[after106]'])",
            "set(['next[implement8]', 'prev[implement9]', 'def7', 'interp6'])",
            "set(['handle[before297]', 'handle[after298]', 'handle'])",
            "set(['next', 'succ', 'iso', 't', 'prev', 'spec', 'impl'])",
            "set(['next[implement8]', 'prev[implement9]', 'def7', 'interp6'])",
            "set(['get[after110]', 'extensionality', 'size[after111]', 'get[before109]', 'create[before105]', 'set[before107]', 'prop103', 'set[after108]', 'empty[after104]', 'append[after113]', 'resize[after112]', 'create[after106]'])",
            "set(['prev[after5]', 'next[after3]', 'totality', 'prev[before4]', 'antisymmetry', 'prop1', 'prop2', 'transitivity'])",
            "set(['next', 'succ', 'iso', 't', 'prev', 'spec', 'impl'])",
            "set(['set', 'value', 'is_set'])",
            "set(['fildes', 'read[implement71]', 'synced[before67]', 'write[before64]', 'read', 'sync[implement73]', 'handle_synced', 'sync', 'sync[before66]', 'write', 'iso', 'pending', 'synced', 'init[after63]', 'read[after65]', 'write[implement70]', 'contents'])",
            "set([])",
            "set(['begin', 'set', 'end', 'reverse', 'extend', 'get', 'create', 'back', 'value', 't', 'def102', 'empty', 'iso', 'impl', 'append', 'pop_back', 'segment', 'spec', 'resize', 'size'])",
            "set(['next', 'succ', 'iso', 't', 'prev', 'spec', 'impl'])",
            "set(['next', 'succ', 'iso', 't', 'prev', 'spec', 'impl'])",
            "set([])",
            "set(['recv', 'send', 'level'])",
            "set(['extensions'])",
            "set(['ranges', 'arr', 'idx', 'gap'])",
            "set(['next[implement8]', 'prev[implement9]', 'def7', 'interp6'])",
            "set(['create[implement88]', 'def100', 'append[implement96]', 'reverse[implement98]', 'empty[implement89]', 'size[implement92]', 'set[implement90]', 'interp85', 'resize[implement93]', 'back[implement94]', 'get[implement91]', 'pop_back[implement95]', 'extend[implement97]', 'def86', 'def87'])",
            "set(['get[after110]', 'extensionality', 'size[after111]', 'get[before109]', 'create[before105]', 'set[before107]', 'prop103', 'set[after108]', 'empty[after104]', 'append[after113]', 'resize[after112]', 'create[after106]'])",
            "set([])",
            "set(['create[implement88]', 'def100', 'append[implement96]', 'reverse[implement98]', 'empty[implement89]', 'size[implement92]', 'set[implement90]', 'interp85', 'resize[implement93]', 'back[implement94]', 'get[implement91]', 'pop_back[implement95]', 'extend[implement97]', 'def86', 'def87'])",
            "set(['totality', 'next[after3]', 'prev[after5]', 'prev[before4]', 'antisymmetry', 'prop1', 'prop2', 'transitivity'])",
            "set(['create[implement88]', 'back[implement94]', 'append[implement96]', 'resize[implement93]', 'reverse[implement98]', 'empty[implement89]', 'size[implement92]', 'set[implement90]', 'interp85', 'def100', 'get[implement91]', 'pop_back[implement95]', 'extend[implement97]', 'def86', 'def87'])",
            "set(['prev[after5]', 'next[after3]', 'totality', 'prev[before4]', 'antisymmetry', 'prop1', 'prop2', 'transitivity'])",
            "set(['set', 'dcid', 'value', 'is_set'])",
            "set(['totality', 'next[after3]', 'prev[after5]', 'prev[before4]', 'antisymmetry', 'prop1', 'prop2', 'transitivity'])",
            "set(['create[implement88]', 'resize[implement93]', 'append[implement96]', 'reverse[implement98]', 'empty[implement89]', 'size[implement92]', 'set[implement90]', 'interp85', 'back[implement94]', 'def100', 'get[implement91]', 'pop_back[implement95]', 'extend[implement97]', 'def86', 'def87'])",
            "set(['begin', 'set', 'end', 'reverse', 'extend', 'get', 'create', 'back', 'value', 'def102', 'empty', 'iso', 'impl', 'resize', 'pop_back', 'size', 'segment', 'spec', 'append', 't'])",
            "set(['value', 'begin', 'set', 'end', 'reverse', 'extend', 'get', 'create', 'back', 'append', 'def102', 'empty', 'resize', 't', 'pop_back', 'iso', 'segment', 'spec', 'impl', 'size'])",
            "set(['create[implement88]', 'def100', 'append[implement96]', 'reverse[implement98]', 'empty[implement89]', 'size[implement92]', 'set[implement90]', 'interp85', 'resize[implement93]', 'back[implement94]', 'get[implement91]', 'pop_back[implement95]', 'extend[implement97]', 'def86', 'def87'])",
            "set(['unknown', 'set', 'value', 'is_set'])",
            "set(['next[implement8]', 'prev[implement9]', 'def7', 'interp6'])",
            "set(['reverse', 'begin', 'set', 'end', 'impl', 'extend', 'get', 'create', 'back', 'value', 't', 'def102', 'resize', 'append', 'pop_back', 'iso', 'segment', 'spec', 'empty', 'size'])",
            "set(['get[after110]', 'extensionality', 'set[after108]', 'get[before109]', 'size[after111]', 'set[before107]', 'create[before105]', 'prop103', 'empty[after104]', 'append[after113]', 'resize[after112]', 'create[after106]'])",
            "set(['next[implement8]', 'prev[implement9]', 'def7', 'interp6'])",
            "set(['create[implement88]', 'def100', 'append[implement96]', 'reverse[implement98]', 'empty[implement89]', 'size[implement92]', 'set[implement90]', 'interp85', 'resize[implement93]', 'back[implement94]', 'get[implement91]', 'pop_back[implement95]', 'extend[implement97]', 'def86', 'def87'])",
            "set(['begin', 'set', 'end', 'reverse', 'extend', 'get', 'create', 'back', 'value', 't', 'def102', 'empty', 'iso', 'append', 'resize', 'pop_back', 'segment', 'spec', 'impl', 'size'])",
            "set(['handle[after288]', 'handle[before287]', 'handle', 'pos'])",
            "set(['handle', 'handle[before285]', 'handle[after286]', 'id', 'pos'])",
            "set(['totality', 'next[after3]', 'prev[after5]', 'prev[before4]', 'antisymmetry', 'prop1', 'prop2', 'transitivity'])",
            "set(['get[after110]', 'create[before105]', 'size[after111]', 'get[before109]', 'extensionality', 'set[before107]', 'prop103', 'set[after108]', 'append[after113]', 'empty[after104]', 'resize[after112]', 'create[after106]'])",
            "set(['arr', 'stream', 'crypto', 'malicious_frame', 'new_connection_id', 'stop_sending', 'unknown_frame', 'max_streams_bidi', 'ping', 'path_response', 'new_token', 'handle', 'rst_stream', 'data_blocked', 'connection_close', 'max_streams', 'path_challenge', 'handshake_done', 'streams_blocked', 'max_stream_data', 'stream_data_blocked', 'idx', 'ack', 'ack_frequency', 'application_close', 'max_data', 'ack_ecn', 'streams_blocked_bidi', 'retire_connection_id'])",
            "set(['decrypt_cipher[implement369]', 'save_initial_max_stream_id_bidi[implement379]', 'destroy[implement365]', 'create[implement360]', 'create_0rtt[implement362]', 'save_token[implement370]', 'get_initial_max_stream_id_bidi[implement380]', 'get_old_new_token[implement364]', 'lower_recv[implement387]', 'get_active_connection_id_limit[implement382]', 'save_initial_max_stream_data_bidi_local[implement377]', 'compute_retry_integrity_tag[implement383]', 'get_initial_max_stream_data_uni[implement372]', 'save_initial_max_stream_data_uni[implement371]', 'get_initial_max_stream_data_bidi_remote[implement374]', 'get_old_retry_token[implement363]', 'encrypt_cipher[implement368]', 'upper_send[implement386]', 'save_initial_max_data[implement375]', 'create_0rtt_client[implement361]', 'get_initial_max_data[implement376]', 'get_initial_max_stream_data_bidi_local[implement378]', 'save_initial_max_stream_data_bidi_remote[implement373]', 'decrypt_aead[implement385]', 'set_initial_keys[implement366]', 'iv_size[implement367]', 'iso', 'encrypt_aead[implement384]', 'save_active_connection_id_limit[implement381]'])",
            "set(['handle', 'handle[before269]', 'handle[after270]', 'length', 'offset', 'data'])",
            "set(['tls_id', 'enc_level', 'set_tls_id', 'init[after452]', 'behavior', 'ep', 'set_ep'])",
            "set(['next[implement8]', 'prev[implement9]', 'def7', 'interp6'])",
            "set(['create[implement88]', 'back[implement94]', 'append[implement96]', 'reverse[implement98]', 'empty[implement89]', 'size[implement92]', 'set[implement90]', 'pop_back[implement95]', 'resize[implement93]', 'def100', 'get[implement91]', 'interp85', 'extend[implement97]', 'def86', 'def87'])",
            "set(['random', 'cipher_suite', 'pre_shared_key_client', 'server_hello', 'handshake_data_event', 'interp249', 'interp248', 'handshake', 'pre_shared_key_server', 'interp245', 'interp244', 'interp247', 'interp246', 'early_data', 'client_hello', 'handshake_record', 'handshakes', 'psk_key_exchange_modes', 'gmt', 'encrypted_extensions', 'end_of_early_data', 'psk_identity', 'extension_type', 'random_bytes', 'finished', 'application_data_record', 'unknown_message', 'protocol_version', 'handshake_event', 'new_session_ticket', 'extension', 'change_cipher_spec', 'gmt_unix_time', 'compression_method', 'record', 'unknown_extension', 'message_type', 'handshake_parser'])",
            "set(['prop10', 'prev[after13]', 'next[after11]', 'prev[before12]', 'antisymmetry', 'prop1', 'totality', 'transitivity'])",
            "set(['get[after110]', 'create[before105]', 'size[after111]', 'get[before109]', 'extensionality', 'set[before107]', 'prop103', 'set[after108]', 'empty[after104]', 'append[after113]', 'resize[after112]', 'create[after106]'])",
            "set(['next', 'succ', 'iso', 't', 'prev', 'spec', 'impl'])",
            "set(['get[after110]', 'extensionality', 'set[after108]', 'get[before109]', 'size[after111]', 'set[before107]', 'prop103', 'append[after113]', 'empty[after104]', 'create[before105]', 'resize[after112]', 'create[after106]'])",
            "set(['get[after110]', 'extensionality', 'set[after108]', 'get[before109]', 'size[after111]', 'set[before107]', 'create[before105]', 'prop103', 'append[after113]', 'empty[after104]', 'resize[after112]', 'create[after106]'])",
            "set(['create[implement88]', 'resize[implement93]', 'append[implement96]', 'reverse[implement98]', 'empty[implement89]', 'size[implement92]', 'set[implement90]', 'interp85', 'def100', 'back[implement94]', 'get[implement91]', 'pop_back[implement95]', 'extend[implement97]', 'def86', 'def87'])",
            "set(['prev[after5]', 'next[after3]', 'prop2', 'prev[before4]', 'antisymmetry', 'prop1', 'totality', 'transitivity'])",
            "set(['next[implement8]', 'prev[implement9]', 'def7', 'interp6'])",
            "set(['next', 'succ', 'iso', 't', 'prev', 'spec', 'impl'])",
            "set(['handle[after266]', 'handle', 'ack_delay', 'ack_ranges', 'range', 'handle[before265]', 'largest_acked'])",
            "set(['init[after456]', 'ep_in', 'tls_id_client', 'init_cids', 'enc_level', 'tls_id_server', 'behavior', 'ep_out', 'set_tls_id', 'set_ep'])",
            "set(['content', 'version'])",
            "set(['next', 'succ', 'iso', 't', 'prev', 'spec', 'impl'])",
            "set(['from_bytes[implement399]', 'to_bytes', 'iso', 'to_bytes[implement398]', 'from_bytes'])",
            "set(['handle', 'handle[before273]', 'id', 'handle[after274]', 'err_code'])",
            "set(['handle[before299]', 'handle[after300]', 'handle'])",
            "set(['tls_id', 'configure_NAT_attack_in_spoof', 'init[after458]', 'reset_NAT', 'enc_level', 'set_tls_id', 'configure_NAT_attack_in_spoof_hack', 'behavior', 'ep', 'set_ep'])",
            "set(['create[implement88]', 'def100', 'append[implement96]', 'reverse[implement98]', 'empty[implement89]', 'size[implement92]', 'set[implement90]', 'pop_back[implement95]', 'resize[implement93]', 'back[implement94]', 'get[implement91]', 'interp85', 'extend[implement97]', 'def86', 'def87'])",
            "set(['reverse', 'begin', 'set', 'end', 'impl', 'extend', 'get', 'create', 'back', 'value', 'def102', 'resize', 't', 'append', 'pop_back', 'iso', 'segment', 'spec', 'empty', 'size'])",
            "set(['update_max_ack_delay', 'handle', 'seq_num', 'handle[after312]', 'packet_tolerence', 'ignore_order', 'handle[before311]'])",
            "set(['next[implement8]', 'prev[implement9]', 'def7', 'interp6'])",
            "set(['get[after110]', 'create[before105]', 'empty[after104]', 'get[before109]', 'size[after111]', 'set[before107]', 'extensionality', 'prop103', 'append[after113]', 'set[after108]', 'resize[after112]', 'create[after106]'])",
            "set(['next', 'succ', 'iso', 't', 'prev', 'spec', 'impl'])",
            "set(['prev[after5]', 'next[after3]', 'prop2', 'prev[before4]', 'antisymmetry', 'prop1', 'totality', 'transitivity'])",
            "set(['udp', 'endpoint', 'protocol', 'addr', 'lo', 'tcp', 'interp255', 'port', 'interp254', 'interface', 'ivy'])",
            "set(['tls_id', 'enc_level', 'set_tls_id', 'init[after452]', 'behavior', 'ep', 'set_ep'])",
            "set(['get[after110]', 'size[after111]', 'get[before109]', 'extensionality', 'set[before107]', 'create[before105]', 'prop103', 'set[after108]', 'append[after113]', 'empty[after104]', 'resize[after112]', 'create[after106]'])",
            "set(['prop2', 'next[after3]', 'prev[after5]', 'prev[before4]', 'antisymmetry', 'prop1', 'totality', 'transitivity'])",
            "set(['value', 'begin', 'set', 'end', 'reverse', 'extend', 'get', 'create', 'back', 'append', 't', 'def102', 'empty', 'iso', 'resize', 'pop_back', 'segment', 'spec', 'impl', 'size'])",
            "set(['from_bytes[implement399]', 'to_bytes', 'iso', 'from_bytes', 'to_bytes[implement398]'])",
            "set(['create[implement88]', 'resize[implement93]', 'append[implement96]', 'reverse[implement98]', 'empty[implement89]', 'size[implement92]', 'set[implement90]', 'interp85', 'def100', 'back[implement94]', 'get[implement91]', 'pop_back[implement95]', 'extend[implement97]', 'def86', 'def87'])",
            "set(['cid_map', 'cb', 'impl'])",
            "set(['next[implement8]', 'prev[implement9]', 'def7', 'interp6'])",
            "set(['create[implement88]', 'resize[implement93]', 'append[implement96]', 'reverse[implement98]', 'empty[implement89]', 'size[implement92]', 'set[implement90]', 'interp85', 'def100', 'back[implement94]', 'get[implement91]', 'pop_back[implement95]', 'extend[implement97]', 'def86', 'def87'])",
            "set(['arr', 'idx', 'supported_version', 'pversion', 'ptype', 'dst_cid', 'src_cid'])",
            "set(['begin', 'set', 'end', 'reverse', 'extend', 'get', 'create', 'back', 'value', 'def102', 'empty', 'iso', 'impl', 'resize', 'pop_back', 'size', 'segment', 'spec', 'append', 't'])",
            "set(['next[implement8]', 'prev[implement9]', 'def7', 'interp6'])",
            "set(['arr', 'idx', 'seq_num', 'pversion', 'ptype', 'long', 'dst_cid', 'src_cid', 'retired_cids', 'token', 'payload'])",
            "set(['create[before105]', 'extensionality', 'set[after108]', 'get[after110]', 'get[before109]', 'size[after111]', 'set[before107]', 'prop103', 'empty[after104]', 'append[after113]', 'resize[after112]', 'create[after106]'])",
            "set(['value', 'begin', 'set', 'end', 'reverse', 'extend', 'get', 'create', 'back', 'append', 'empty', 'def102', 'resize', 'iso', 't', 'pop_back', 'segment', 'spec', 'impl', 'size'])",
            "set(['get[after110]', 'extensionality', 'size[after111]', 'get[before109]', 'create[before105]', 'set[before107]', 'prop103', 'set[after108]', 'empty[after104]', 'append[after113]', 'resize[after112]', 'create[after106]'])",
            "set(['next[implement8]', 'prev[implement9]', 'def7', 'interp6'])",
            "set(['next[implement8]', 'prev[implement9]', 'def7', 'interp6'])",
            "set(['handle[after310]', 'handle', 'handle[before309]', 'data', 'length'])",
            "set(['begin', 'set', 'end', 'reverse', 'extend', 'get', 'create', 'back', 'value', 't', 'def102', 'empty', 'iso', 'resize', 'append', 'pop_back', 'segment', 'spec', 'impl', 'size'])",
            "set(['next', 'succ', 'iso', 't', 'prev', 'spec', 'impl'])",
            "set(['tls_id', 'enc_level', 'set_tls_id', 'init[after452]', 'behavior', 'ep', 'set_ep'])",
            "set(['mtype', 'unknown_message_bytes'])",
            "set(['extend', 'begin', 'set', 'end', 'reverse', 'append', 'get', 'create', 'back', 'value', 'def102', 'empty', 'resize', 't', 'pop_back', 'iso', 'segment', 'spec', 'impl', 'size'])",
            "set(['create[implement88]', 'back[implement94]', 'append[implement96]', 'resize[implement93]', 'reverse[implement98]', 'empty[implement89]', 'size[implement92]', 'set[implement90]', 'interp85', 'def100', 'get[implement91]', 'pop_back[implement95]', 'extend[implement97]', 'def86', 'def87'])",
            "set(['create[implement88]', 'def100', 'append[implement96]', 'resize[implement93]', 'reverse[implement98]', 'empty[implement89]', 'size[implement92]', 'set[implement90]', 'interp85', 'back[implement94]', 'get[implement91]', 'pop_back[implement95]', 'extend[implement97]', 'def86', 'def87'])",
            "set(['next', 'succ', 'iso', 't', 'prev', 'spec', 'impl'])",
            "set(['get[after110]', 'extensionality', 'size[after111]', 'empty[after104]', 'get[before109]', 'create[before105]', 'set[before107]', 'prop103', 'append[after113]', 'set[after108]', 'resize[after112]', 'create[after106]'])",
            "set(['handle', 'handle[before267]', 'handle[after268]', 'len', 'length', 'offset', 'off', 'data', 'id', 'fin'])",
            "set(['obfuscated_ticket_age', 'identity'])",
            "set(['next[implement8]', 'prev[implement9]', 'def7', 'interp6'])",
            "set(['create[implement88]', 'resize[implement93]', 'append[implement96]', 'reverse[implement98]', 'empty[implement89]', 'size[implement92]', 'set[implement90]', 'interp85', 'back[implement94]', 'def100', 'get[implement91]', 'pop_back[implement95]', 'extend[implement97]', 'def86', 'def87'])",
            "set(['next', 'succ', 'iso', 't', 'prev', 'spec', 'impl'])",
            "set(['value', 'begin', 'set', 'end', 'reverse', 'extend', 'get', 'create', 'back', 'append', 'def102', 'resize', 'iso', 'empty', 'pop_back', 'size', 'segment', 'spec', 'impl', 't'])",
            "set(['client', 'server'])",
            "set(['from_bytes[implement399]', 'to_bytes', 'iso', 'from_bytes', 'to_bytes[implement398]'])",
            "set(['prop2', 'next[after3]', 'totality', 'prev[before4]', 'antisymmetry', 'prop1', 'prev[after5]', 'transitivity'])",
            "set(['prop2', 'next[after3]', 'prev[after5]', 'prev[before4]', 'antisymmetry', 'prop1', 'totality', 'transitivity'])",
            "set(['pcid', 'set', 'ip_addr', 'ip6_addr', 'pref_token', 'value', 'ip_port', 'is_set', 'pcid_len', 'ip6_port'])",
            "set(['set', 'stream_pos_32', 'value', 'is_set'])",
            "set(['create[implement88]', 'resize[implement93]', 'append[implement96]', 'reverse[implement98]', 'empty[implement89]', 'size[implement92]', 'set[implement90]', 'interp85', 'back[implement94]', 'def100', 'get[implement91]', 'pop_back[implement95]', 'extend[implement97]', 'def86', 'def87'])",
            "set(['def75', 'zero', 'interp74', 'def76', 'one'])",
            "set(['next', 'succ', 'iso', 't', 'prev', 'spec', 'impl'])",
            "set(['arr', 'idx', 'seq_num', 'pversion', 'ptype', 'long', 'dst_cid', 'src_cid', 'retired_cids', 'payload'])",
            "set([])",
            "set(['tls_id', 'enc_level', 'set_tls_id', 'behavior', 'ep', 'set_ep', 'init[after454]'])",
            "set(['prop2', 'next[after3]', 'totality', 'prev[before4]', 'antisymmetry', 'prop1', 'prev[after5]', 'transitivity'])",
            "set(['next[implement8]', 'prev[implement9]', 'def7', 'interp6'])",
            "set(['handle[before303]', 'handle', 'handle[after304]', 'seq_num'])",
            "set(['handshake', 'retry', 'one_rtt', 'version_negociation', 'initial', 'zero_rtt', 'next'])",
            "set(['next', 'succ', 'iso', 't', 'prev', 'spec', 'impl'])",
            "set(['set', 'value', 'is_set'])",
            "set(['mtype', 'unknown_message_bytes'])",
            "set(['interface', 'protocol', 'addr', 'port'])",
            "set(['iso', 'to_bytes', 'from_bytes[implement399]', 'to_bytes[implement398]', 'from_bytes'])",
            "set(['set'])",
            "set(['get[after110]', 'size[after111]', 'set[after108]', 'get[before109]', 'extensionality', 'set[before107]', 'create[before105]', 'prop103', 'empty[after104]', 'append[after113]', 'resize[after112]', 'create[after106]'])",
            "set(['handle[after282]', 'reason_phrase', 'handle', 'reason_phrase_length', 'handle[before281]', 'err_code'])",
            "set(['exponent_8', 'set', 'value', 'is_set'])",
            "set(['get[after110]', 'create[before105]', 'size[after111]', 'set[after108]', 'get[before109]', 'extensionality', 'set[before107]', 'prop103', 'empty[after104]', 'append[after113]', 'resize[after112]', 'create[after106]'])",
            "set(['domain', 'set', 'end', 'reverse', 'extend', 'get', 'create', 'begin', 'value', 'back', 'def102', 'empty', 'iso', 'append', 'resize', 'pop_back', 'size', 'segment', 'spec', 'impl', 't'])",
            "set(['begin', 'set', 'end', 'reverse', 'extend', 'get', 'create', 'back', 'value', 'def102', 'empty', 'iso', 'resize', 'append', 'pop_back', 'size', 'segment', 'spec', 'impl', 't'])",
            "set(['create[implement88]', 'back[implement94]', 'append[implement96]', 'resize[implement93]', 'reverse[implement98]', 'empty[implement89]', 'size[implement92]', 'set[implement90]', 'interp85', 'def100', 'get[implement91]', 'pop_back[implement95]', 'extend[implement97]', 'def86', 'def87'])",
            "set(['get[after110]', 'size[after111]', 'get[before109]', 'create[before105]', 'set[before107]', 'extensionality', 'prop103', 'append[after113]', 'empty[after104]', 'set[after108]', 'resize[after112]', 'create[after106]'])",
            "set(['totality', 'next[after3]', 'prev[after5]', 'prev[before4]', 'antisymmetry', 'prop1', 'prop2', 'transitivity'])",
            "set(['begin', 'set', 'end', 'reverse', 'extend', 'get', 'create', 'back', 'value', 't', 'def102', 'empty', 'iso', 'append', 'resize', 'pop_back', 'segment', 'spec', 'impl', 'size'])",
            "set(['set', 'stream_id_16', 'value', 'is_set'])",
            "set(['get[after110]', 'extensionality', 'get[before109]', 'size[after111]', 'set[before107]', 'create[before105]', 'prop103', 'set[after108]', 'empty[after104]', 'append[after113]', 'resize[after112]', 'create[after106]'])",
            "set(['totality', 'next[after3]', 'prev[after5]', 'prev[before4]', 'antisymmetry', 'prop1', 'prop2', 'transitivity'])",
            "set(['create[implement88]', 'back[implement94]', 'append[implement96]', 'resize[implement93]', 'reverse[implement98]', 'empty[implement89]', 'size[implement92]', 'set[implement90]', 'pop_back[implement95]', 'def100', 'get[implement91]', 'interp85', 'extend[implement97]', 'def86', 'def87'])",
            "set(['create[implement88]', 'back[implement94]', 'append[implement96]', 'reverse[implement98]', 'empty[implement89]', 'size[implement92]', 'set[implement90]', 'pop_back[implement95]', 'resize[implement93]', 'def100', 'get[implement91]', 'interp85', 'extend[implement97]', 'def86', 'def87'])",
            "set(['next', 'succ', 'iso', 't', 'prev', 'spec', 'impl'])",
            "set(['value', 'begin', 'set', 'end', 'reverse', 'extend', 'get', 'create', 'back', 'append', 'def102', 'resize', 'iso', 't', 'pop_back', 'size', 'segment', 'spec', 'empty', 'impl'])",
            "set(['get[after110]', 'create[before105]', 'get[before109]', 'size[after111]', 'set[before107]', 'prop103', 'extensionality', 'set[after108]', 'empty[after104]', 'append[after113]', 'resize[after112]', 'create[after106]'])",
            "set(['handle[before283]', 'handle', 'id', 'handle[after284]', 'pos'])",
            "set(['client_server', 'client_vn', 'client_alt', 'server', 'attacker', 'client', 'victim', 'mim', 'server_alt'])",
            "set(['create[implement88]', 'def100', 'append[implement96]', 'resize[implement93]', 'reverse[implement98]', 'empty[implement89]', 'size[implement92]', 'set[implement90]', 'pop_back[implement95]', 'back[implement94]', 'get[implement91]', 'interp85', 'extend[implement97]', 'def86', 'def87'])",
            "set(['get[after110]', 'size[after111]', 'set[after108]', 'get[before109]', 'create[before105]', 'set[before107]', 'extensionality', 'prop103', 'empty[after104]', 'append[after113]', 'resize[after112]', 'create[after106]'])",
            "set(['handle', 'handle[after272]', 'final_offset', 'handle[before271]', 'id', 'err_code'])",
            "set(['totality', 'next[after3]', 'prop2', 'prev[before4]', 'antisymmetry', 'prop1', 'prev[after5]', 'transitivity'])",
            "set(['next[implement8]', 'prev[implement9]', 'def7', 'interp6'])",
            "set(['create[implement88]', 'back[implement94]', 'append[implement96]', 'resize[implement93]', 'reverse[implement98]', 'empty[implement89]', 'size[implement92]', 'set[implement90]', 'interp85', 'def100', 'get[implement91]', 'pop_back[implement95]', 'extend[implement97]', 'def86', 'def87'])",
            "set(['prev[after5]', 'next[after3]', 'totality', 'prev[before4]', 'antisymmetry', 'prop1', 'prop2', 'transitivity'])",
            "set(['next[implement8]', 'prev[implement9]', 'def7', 'interp6'])",
            "set(['totality', 'next[after3]', 'prev[after5]', 'prev[before4]', 'antisymmetry', 'prop1', 'prop2', 'transitivity'])",
            "set(['init_tls_ids', 'servers', 'src_tls_id', 'set_tls_id', 'server', 'init[after455]', 'set_ep'])",
            "set([])",
            "set([])",
            "set(['begin', 'set', 'end', 'reverse', 'extend', 'get', 'create', 'back', 'value', 't', 'def102', 'empty', 'iso', 'resize', 'pop_back', 'append', 'segment', 'spec', 'impl', 'size'])",
            "set(['create[implement88]', 'def100', 'append[implement96]', 'reverse[implement98]', 'empty[implement89]', 'size[implement92]', 'set[implement90]', 'pop_back[implement95]', 'resize[implement93]', 'back[implement94]', 'get[implement91]', 'interp85', 'extend[implement97]', 'def86', 'def87'])",
            "set(['handle', 'ack_delay', 'ack_ranges', 'range', 'largest_acked', 'handle[before263]', 'handle[after264]'])",
            "set(['endpoint', 'protocol', 'addr', 'udp6', 'interp319', 'interp318', 'tcp6', 'port'])",
            "set(['get[after110]', 'extensionality', 'size[after111]', 'set[after108]', 'get[before109]', 'create[before105]', 'set[before107]', 'prop103', 'empty[after104]', 'append[after113]', 'resize[after112]', 'create[after106]'])",
            "set(['transport_parameters'])",
            "set(['prev[after5]', 'next[after3]', 'prop2', 'prev[before4]', 'antisymmetry', 'prop1', 'totality', 'transitivity'])",
            "set(['data_8', 'set', 'value', 'is_set'])",
            "set(['key_material_export[before396]', 'session_established[before395]', 'get_old_retry_token', 'save_initial_max_stream_id_bidi', 'encrypt_aead', 'iv_size', 'get_initial_max_stream_data_bidi_local', 'invar397', 'open', 'payload', 'established', 'create_0rtt_client', 'compute_retry_integrity_tag', 'recv', 'create', 'save_token', 'send', 'save_initial_max_stream_data_bidi_local', 'save_active_connection_id_limit', 'set_initial_keys', 'save_initial_max_stream_data_bidi_remote', 'foo', 'create[after390]', 'create_0rtt', 'get_initial_max_stream_data_uni', 'get_initial_max_stream_id_bidi', 'destroy[after392]', 'save_initial_max_data', 'alert', 'destroy[before391]', 'keys_established', 'recv[before393]', 'destroy', 'data', 'key_material_export', 'decrypt_aead', 'create[before389]', 'ok', 'get_active_connection_id_limit', 'get_old_new_token', 'level', 'save_initial_max_stream_data_uni', 'decrypt_cipher', 'decrypt_result', 'init[after388]', 'get_initial_max_data', 'send[before394]', 'session_established', 'get_initial_max_stream_data_bidi_remote', 'encrypt_cipher'])",
            "set(['get[after110]', 'extensionality', 'set[after108]', 'get[before109]', 'size[after111]', 'set[before107]', 'create[before105]', 'prop103', 'append[after113]', 'empty[after104]', 'resize[after112]', 'create[after106]'])",
            "set([])",
            "set(['begin', 'set', 'end', 'reverse', 'extend', 'get', 'create', 'back', 'value', 'def102', 'empty', 'iso', 'impl', 'append', 'pop_back', 'size', 'segment', 'spec', 'resize', 't'])",
            "set(['begin', 'set', 'end', 'reverse', 'extend', 'get', 'create', 'empty', 'value', 'back', 'def102', 'resize', 'iso', 'append', 't', 'pop_back', 'segment', 'spec', 'impl', 'size'])",
            "set(['begin', 'set', 'end', 'reverse', 'extend', 'get', 'create', 'back', 'value', 't', 'def102', 'empty', 'resize', 'append', 'pop_back', 'iso', 'segment', 'spec', 'impl', 'size'])",
            "set(['next', 'succ', 'iso', 't', 'prev', 'spec', 'impl'])",
            "set(['seconds_16', 'set', 'value', 'is_set'])",
            "set([])",
            "set(['token_i', 'arr', 'long', 'idx', 'seq_num', 'pversion', 'ptype', 'src_cid_i', 'seq_num_i', 'src_cid', 'retired_cids', 'ptype_i', 'payload_i', 'dst_cid_i', 'pversion_i', 'dst_cid', 'payload'])",
            "set(['get[after110]', 'size[after111]', 'set[after108]', 'get[before109]', 'extensionality', 'set[before107]', 'create[before105]', 'prop103', 'empty[after104]', 'append[after113]', 'resize[after112]', 'create[after106]'])",
            "set(['get[after110]', 'create[before105]', 'size[after111]', 'set[after108]', 'get[before109]', 'extensionality', 'set[before107]', 'prop103', 'append[after113]', 'empty[after104]', 'resize[after112]', 'create[after106]'])",
            "set(['etype', 'content'])",
            "set(['create[implement88]', 'def100', 'append[implement96]', 'reverse[implement98]', 'empty[implement89]', 'size[implement92]', 'set[implement90]', 'pop_back[implement95]', 'resize[implement93]', 'back[implement94]', 'get[implement91]', 'interp85', 'extend[implement97]', 'def86', 'def87'])",
            "set(['prop2', 'next[after3]', 'totality', 'prev[before4]', 'antisymmetry', 'prop1', 'prev[after5]', 'transitivity'])",
            "set(['get[after110]', 'create[before105]', 'set[after108]', 'get[before109]', 'size[after111]', 'set[before107]', 'extensionality', 'prop103', 'append[after113]', 'empty[after104]', 'resize[after112]', 'create[after106]'])",
            "set(['get[after110]', 'size[after111]', 'set[after108]', 'get[before109]', 'extensionality', 'set[before107]', 'create[before105]', 'prop103', 'append[after113]', 'empty[after104]', 'resize[after112]', 'create[after106]'])",
            "set(['from_bytes[implement399]', 'to_bytes', 'iso', 'from_bytes', 'to_bytes[implement398]'])",
            "set([])",
            "set(['create[implement88]', 'def100', 'append[implement96]', 'resize[implement93]', 'reverse[implement98]', 'empty[implement89]', 'size[implement92]', 'set[implement90]', 'pop_back[implement95]', 'back[implement94]', 'get[implement91]', 'interp85', 'extend[implement97]', 'def86', 'def87'])",
            "set(['next', 'succ', 'iso', 't', 'prev', 'spec', 'impl'])",
            "set(['value', 'begin', 'set', 'end', 'reverse', 'extend', 'get', 'create', 'back', 'append', 't', 'def102', 'empty', 'iso', 'resize', 'pop_back', 'segment', 'spec', 'impl', 'size'])",
            "set(['begin', 'set', 'end', 'reverse', 'extend', 'get', 'create', 'back', 'value', 'def102', 'empty', 'resize', 't', 'append', 'pop_back', 'iso', 'segment', 'spec', 'impl', 'size'])",
            "set(['begin', 'domain', 'set', 'end', 'reverse', 'extend', 'get', 'create', 'back', 'value', 'def102', 'empty', 'resize', 't', 'append', 'pop_back', 'iso', 'segment', 'spec', 'impl', 'size'])",
            "set(['prev[after5]', 'next[after3]', 'totality', 'prev[before4]', 'antisymmetry', 'prop1', 'prop2', 'transitivity'])",
            "set(['handle[after314]', 'handle', 'handle[before313]', 'data'])",
            "set(['handle[before307]', 'data', 'handle', 'handle[after308]'])",
            "set(['create[implement88]', 'resize[implement93]', 'append[implement96]', 'reverse[implement98]', 'empty[implement89]', 'size[implement92]', 'set[implement90]', 'pop_back[implement95]', 'def100', 'back[implement94]', 'get[implement91]', 'interp85', 'extend[implement97]', 'def86', 'def87'])",
            "set(['next[implement8]', 'prev[implement9]', 'def7', 'interp6'])",
            "set(['begin', 'set', 'end', 'reverse', 'extend', 'get', 'create', 'back', 'value', 't', 'def102', 'resize', 'iso', 'empty', 'append', 'pop_back', 'segment', 'spec', 'impl', 'size'])",
            "set(['exponent_8', 'set', 'value', 'is_set'])",
            "set(['create[implement88]', 'resize[implement93]', 'append[implement96]', 'reverse[implement98]', 'empty[implement89]', 'size[implement92]', 'set[implement90]', 'pop_back[implement95]', 'back[implement94]', 'def100', 'get[implement91]', 'interp85', 'extend[implement97]', 'def86', 'def87'])",
            "set(['stream_pos_16', 'set', 'value', 'is_set'])",
            "set(['tls_id', 'enc_level', 'set_tls_id', 'behavior', 'ep', 'set_ep', 'init[after454]'])",
            "set(['protected_payload', 'arr', 'idx', 'pversion', 'ptype', 'long', 'dst_cid', 'src_cid', 'retired_cids', 'token'])",
            "set(['next[implement8]', 'prev[implement9]', 'def7', 'interp6'])",
            "set(['arr', 'idx', 'seq_num', 'pversion', 'ptype', 'long', 'dst_cid', 'src_cid', 'retired_cids', 'token', 'payload'])"
        ],
        "imports": [
            {
                "args": "(show_biatch_2, )"
            },
            {
                "args": "(infer_tls, )"
            },
            {
                "args": "(app_server_open_event_1rtt, )"
            },
            {
                "args": "(app_server_open_event_0rtt, )"
            },
            {
                "args": "(app_server_open_event_retry, )"
            },
            {
                "args": "(app_server_open_event_vn, )"
            },
            {
                "args": "(infer_frame, )"
            },
            {
                "args": "(show_app_send_event, )"
            },
            {
                "args": "(tls.handshake_event, )",
                "lineno": {}
            },
            {
                "args": "(show_test, )"
            },
            {
                "args": "(show_tls_keys_established_event, )"
            },
            {
                "args": "(show_crypto_length, )"
            },
            {
                "args": "(show_initial_request_vn, )"
            },
            {
                "args": "(show_sending_fsm_event, )"
            },
            {
                "args": "(show_fsm_sending_ready_event, )"
            },
            {
                "args": "(show_fsm_sending_send_event, )"
            },
            {
                "args": "(show_fsm_sending_dataSent_event, )"
            },
            {
                "args": "(show_fsm_sending_dataRecvd_event, )"
            },
            {
                "args": "(show_fsm_sending_resetSent_event, )"
            },
            {
                "args": "(show_fsm_sending_resetRecvd_event, )"
            },
            {
                "args": "(show_receiving_fsm_event, )"
            },
            {
                "args": "(show_fsm_receiving_recv_event, )"
            },
            {
                "args": "(show_fsm_receiving_sizeKnown_event, )"
            },
            {
                "args": "(show_fsm_receiving_dataRecvd_event, )"
            },
            {
                "args": "(show_fsm_receiving_dataRead_event, )"
            },
            {
                "args": "(show_fsm_receiving_resetRecvd_event, )"
            },
            {
                "args": "(show_fsm_receiving_resetRead_event, )"
            },
            {
                "args": "(show_fsm_receiving_ack_event, )"
            },
            {
                "args": "(show_initial_request_initial, )"
            },
            {
                "args": "(show_enc_level, )"
            },
            {
                "args": "(show_cond, )"
            },
            {
                "args": "(show_cid, )"
            },
            {
                "args": "(show_pstats, )"
            },
            {
                "args": "(show_ack_credit, )"
            },
            {
                "args": "(show_probing, )"
            },
            {
                "args": "(show_iretryb, )"
            },
            {
                "args": "(show_iretry, )"
            },
            {
                "args": "(prot.show_pkt_length, )"
            },
            {
                "args": "(prot.show_pkt, )"
            },
            {
                "args": "(prot.show_payload, )"
            },
            {
                "args": "(prot.show_token_len, )"
            },
            {
                "args": "(prot.show_header, )"
            },
            {
                "args": "(show_endpoint, )"
            },
            {
                "args": "(recv_packet, )"
            },
            {
                "args": "(recv_packet_mim, )"
            },
            {
                "args": "(recv_protected_packet_mim, )"
            },
            {
                "args": "(recv_packet_victim, )"
            },
            {
                "args": "(padding_packet_event, )"
            },
            {
                "args": "(undecryptable_packet_event, )"
            },
            {
                "args": "(undefined_host_error, )"
            },
            {
                "args": "(show_last_datagram_size, )"
            },
            {
                "args": "(show_socket, )"
            },
            {
                "args": "(show_biatch, )"
            },
            {
                "args": "(show_tls_lower_send, )"
            },
            {
                "args": "(show_tls_id_to_cid, )"
            },
            {
                "args": "(show_l, )"
            },
            {
                "args": "(show_set_initial_keys, )"
            },
            {
                "args": "(show_version, )"
            },
            {
                "args": "(show_kk, )"
            },
            {
                "args": "(recv_vn_pkt, )"
            },
            {
                "args": "(recv_retry_pkt, )"
            },
            {
                "args": "(recv_0rtt_pkt, )"
            },
            {
                "args": "(version_not_found_event, )"
            },
            {
                "args": "(show_tls_send_event, )"
            },
            {
                "args": "(show_level_offset_length, )"
            },
            {
                "args": "(clear_packet, )"
            },
            {
                "args": "(cipher_packet, )"
            },
            {
                "args": "(show_stream, )"
            },
            {
                "args": "(show_connected, )"
            },
            {
                "args": "(show_aead, )"
            }
        ],
        "supertypes": [
            "frame",
            "frame",
            "frame",
            "frame",
            "tls.extension",
            "quic_endpoint",
            "frame",
            "tls.extension",
            "tls.record",
            "quic_endpoint",
            "frame",
            "transport_parameter",
            "tls.handshake",
            "tls.handshake",
            "transport_parameter",
            "frame",
            "tls.extension",
            "frame",
            "transport_parameter",
            "quic_endpoint",
            "tls.extension",
            "frame",
            "frame",
            "transport_parameter",
            "frame",
            "quic_endpoint",
            "frame",
            "frame",
            "transport_parameter",
            "tls.record",
            "quic_endpoint",
            "transport_parameter",
            "frame",
            "frame",
            "quic_endpoint",
            "transport_parameter",
            "transport_parameter",
            "frame",
            "frame",
            "frame",
            "transport_parameter",
            "frame",
            "tls.extension",
            "frame",
            "quic_endpoint",
            "transport_parameter",
            "transport_parameter",
            "transport_parameter",
            "transport_parameter",
            "tls.handshake",
            "quic_endpoint",
            "frame",
            "tls.extension",
            "transport_parameter",
            "frame",
            "transport_parameter",
            "transport_parameter",
            "transport_parameter",
            "frame",
            "transport_parameter",
            "transport_parameter",
            "transport_parameter",
            "frame",
            "quic_endpoint",
            "quic_endpoint",
            "quic_endpoint",
            "tls.record",
            "quic_endpoint",
            "transport_parameter",
            "tls.handshake",
            "quic_endpoint",
            "tls.extension",
            "transport_parameter",
            "transport_parameter",
            "transport_parameter",
            "tls.handshake",
            "frame",
            "tls.handshake",
            "frame"
        ],
        "finite_sorts": [],
        "actions": [
            "assert 0:servers.server.idx < fml:x",
            "{}",
            "{}",
            "{}",
            "<<<\n\t        if (`fml:a`.size() > 0) {\n\t            a.pop_back();\n\t        }\n            >>>",
            "{}",
            "{}",
            "{}",
            "{}",
            "<<<\n\t        `fml:a`.push_back(`fml:v`);\n            >>>",
            "{version_information.is_set(fml:s) := true; version_information.value(fml:s) := fml:p}",
            "{}",
            "{}",
            "<<<\n\t        if (0 <= `fml:x` && `fml:x` < (`jdx_s`)`fml:a`.size()) \n\t            `fml:y` = `fml:a`[`fml:x`];\n\t    >>>",
            "<<<        std::cerr << \"encrypt_cipher start \" << \"\\n\";\n        std::cerr << \"encrypt_cipher c \" << c << \"\\n\";\n        std::cerr << \"encrypt_cipher iv \" << iv << \"\\n\";\n\t    picotls_connection *s = `tls_api.upper.foo.cid_map`[c];\n        ptls_cipher_context_t *pn_enc;\n        if (recv) {\n            pn_enc = (ptls_cipher_context_t *)(s->crypto_context[l].pn_dec);\n            std::cerr << \"encrypt_cipher pn_dec \" << pn_enc << \"\\n\";\n        } \n        else {\n            pn_enc = (ptls_cipher_context_t *)(s->crypto_context[l].pn_enc);\n            std::cerr << \"encrypt_cipher pn_enc \" << pn_enc << \"\\n\";\n        }\n\t    if(pn_enc != 0)\n        \tencrypt_symm(pn_enc,clear,iv,cipher);\n        std::cerr << \"encrypt_cipher end \" << cipher << \"\\n\";\n        >>>",
            "{}",
            "{}",
            "{}",
            "{}",
            "{assert forged_quic_packet.retired_cids.end(fml:a) > forged_quic_packet.retired_cids.end(old_fml:a) & ~(forged_quic_packet.retired_cids.end(old_fml:a) < X & X < forged_quic_packet.retired_cids.end(fml:a)); assert 0:forged_quic_packet.idx <= X & X < forged_quic_packet.retired_cids.end(old_fml:a) -> forged_quic_packet.retired_cids.value(fml:a,X) = forged_quic_packet.retired_cids.value(old_fml:a,X); assert forged_quic_packet.retired_cids.value(fml:a,forged_quic_packet.retired_cids.end(old_fml:a)) = fml:v}",
            "local loc:0 {call loc:0 := socket_endpoint(fml:host, fml:s); local loc:dst {loc:dst := loc:0; local loc:idx {loc:idx := prot.arr.begin(fml:pkts); while loc:idx < prot.arr.end(fml:pkts)\n{local loc:ppkt {loc:ppkt := prot.arr.value(fml:pkts,loc:idx); local loc:0 {call loc:0 := src_tls_id(loc:dst); local loc:tls_id {loc:tls_id := loc:0; local loc:header {loc:header := stream_data.value(loc:ppkt,0); local loc:hdr_type {loc:hdr_type := bfe[0][6](stream_data.value(loc:ppkt,0)); local loc:tt {loc:tt := bvand(loc:hdr_type,0x30); local loc:is_long {loc:is_long := bvand(0x80:byte,loc:header) ~= 0; local loc:version {loc:version := stream_data.segment(loc:ppkt,1,1 + 4); local loc:0 {call loc:0 := bytes_to_version(loc:version); local loc:bversion {loc:bversion := loc:0; local loc:ptype {loc:ptype := bvand(0x30:byte,loc:header); if zrtt_pkt_set & ~zrtt_pkt_process {zrtt_pkt_process := true; local loc:0 {call loc:0 := reference_pkt_num(last_zrtt_pkt, true); local loc:rnum {loc:rnum := loc:0; local loc:0 {call loc:0 := prot.decrypt(loc:tls_id, loc:rnum, last_zrtt_pkt); local loc:res {loc:res := loc:0; if tls_api.upper.ok(loc:res) {if loc:bversion ~= 0 {call tls_client_0rtt_response(fml:src, loc:dst, tls_api.upper.data(loc:res))}}\nelse {call undecryptable_packet_event(fml:host, fml:src, loc:dst, last_zrtt_pkt)}}}}}}; if bvand(stream_data.value(loc:ppkt,0),0xf0) = 0xc0 {call tls_client_initial_response(fml:src, loc:dst, loc:ppkt)}; local loc:0 {call loc:0 := reference_pkt_num(loc:ppkt, true); local loc:rnum {loc:rnum := loc:0; local loc:0 {call loc:0 := prot.decrypt(loc:tls_id, loc:rnum, loc:ppkt); local loc:res {loc:res := loc:0; if tls_api.upper.ok(loc:res) {local loc:0 {call loc:0 := is_padding_packet(tls_api.upper.payload(loc:res)); local loc:is_pad {loc:is_pad := loc:0; if loc:is_pad {call padding_packet_event(fml:host, fml:src, loc:dst, loc:ppkt)}\nelse {if loc:tt = 0x10 & loc:bversion ~= 0 {call tls_client_0rtt_response(fml:src, loc:dst, tls_api.upper.data(loc:res))}\nelse {local loc:0 {call loc:0 := pkt_serdes.from_bytes(tls_api.upper.data(loc:res)); local loc:pkt {loc:pkt := loc:0; local loc:0 {call loc:0 := prot.get_pnum_len(tls_api.upper.data(loc:res)); call quic_packet.seq_num(loc:pkt) := prot.correct_pnum(loc:rnum, quic_packet.seq_num(loc:pkt), loc:0)}; call recv_packet(fml:host, fml:src, loc:dst, loc:pkt); call infer_tls_events(fml:src, loc:dst, loc:pkt); call packet_event(fml:src, loc:dst, loc:pkt); if nclients > 1 {local loc:cdx {loc:cdx := cids.begin(the_cids); while loc:cdx < cids.end(the_cids)\n{local loc:tcid {loc:tcid := cids.value(the_cids,loc:cdx); if bvand(stream_data.value(loc:ppkt,0),0xf0) = 0xc0 & ~connected(loc:tcid) {call app_server_open_event(loc:dst, fml:src, loc:tcid, quic_packet.src_cid(loc:pkt))}; call loc:cdx := index.next(loc:cdx)}}}}\nelse {if bvand(stream_data.value(loc:ppkt,0),0xf0) = 0xc0 & ~connected(the_cid) {call app_server_open_event(loc:dst, fml:src, the_cid, quic_packet.src_cid(loc:pkt))}}}}}}}}}\nelse {call undecryptable_packet_event(fml:host, fml:src, loc:dst, loc:ppkt)}; call loc:idx := prot.idx.next(loc:idx)}}}}}}}}}}}}}}}}; version_not_found(fml:src) := false; call show_last_datagram_size(last_datagram_received_size); if ~first_datagram_received {first_datagram_received := true}; last_datagram_received_size := 0:stream_pos}}}",
            "<<<\n\t        `fml:a`.resize(`fml:s`);\n\t        for (unsigned i = 0; i < `fml:s`; i++)\n\t            `fml:a`[i] = y;\n\t    >>>",
            "<<<\n\t    >>>",
            "{assert vector[transport_parameter].end(fml:a) = vector[transport_parameter].end(old_fml:a); assert vector[transport_parameter].value(fml:a,X) = (fml:y if (X = fml:x) else vector[transport_parameter].value(old_fml:a,X))}",
            "{}",
            "{}",
            "<<<\n                if ((`quic_packet_retry.idx`)`fml:a`.size() > 0)\n                    `fml:res` = `fml:a`.back();\n            >>>",
            "{path_challenge_pending(fml:dcid,frame.path_challenge.data(fml:f)) := true; call enqueue_frame(fml:scid, fml:f, fml:e, true)}",
            "{}",
            "assert 0:forged_protected_quic_packet.idx <= fml:x & fml:x < forged_protected_quic_packet.retired_cids.end(fml:a)",
            "{}",
            "{assert quic_packet.retired_cids.end(fml:a) = quic_packet.retired_cids.end(old_fml:a); assert quic_packet.retired_cids.value(fml:a,X) = (fml:y if (X = fml:x) else quic_packet.retired_cids.value(old_fml:a,X))}",
            "{}",
            "{}",
            "{assert forged_quic_packet_vn.arr.end(fml:a) > forged_quic_packet_vn.arr.end(old_fml:a) & ~(forged_quic_packet_vn.arr.end(old_fml:a) < X & X < forged_quic_packet_vn.arr.end(fml:a)); assert 0:forged_quic_packet_vn.idx <= X & X < forged_quic_packet_vn.arr.end(old_fml:a) -> forged_quic_packet_vn.arr.value(fml:a,X) = forged_quic_packet_vn.arr.value(old_fml:a,X); assert forged_quic_packet_vn.arr.value(fml:a,forged_quic_packet_vn.arr.end(old_fml:a)) = fml:v}",
            "{}",
            "<<<\n\t        `fml:s` = (`frame.ack_ecn.range.idx`) `fml:a`.size();\n\t    >>>",
            "{original_destination_connection_id.is_set(fml:s) := true; original_destination_connection_id.value(fml:s) := fml:p}",
            "<<<\n                for (unsigned i = 0; i < `fml:b`.size(); i++)\n\t            `fml:a`.push_back(`fml:b`[i]);\n            >>>",
            "fml:y := fml:x + 1",
            "<<<\n                if ((`jdx_r`)`fml:a`.size() > 0)\n                    `fml:res` = `fml:a`.back();\n            >>>",
            "<<<\n                for (unsigned i = 0; i < `fml:b`.size(); i++)\n\t            `fml:a`.push_back(`fml:b`[i]);\n            >>>",
            "{mim_server_target.enc_level := quic_packet_type.initial; ip.endpoint.protocol(mim_server_target.ep) := ip.udp; ip.endpoint.addr(mim_server_target.ep) := server_addr; ip.endpoint.port(mim_server_target.ep) := server_port; if ip.endpoint.addr(mim_server_target.ep) = 0x7f000001 | is_mim {ip.endpoint.interface(mim_server_target.ep) := ip.lo}\nelse {ip.endpoint.interface(mim_server_target.ep) := ip.ivy}}",
            "{}",
            "<<<\n\t        unsigned __old_size = `fml:a`.size();\n\t        `fml:a`.resize(`fml:s`);\n\t        for (unsigned i = __old_size; i < (unsigned)`fml:s`; i++)\n\t            `fml:a`[i] = v;\n            >>>",
            "{}",
            "{}",
            "{}",
            "{}",
            "{}",
            "local loc:scid {loc:scid := quic_packet_retry.src_cid(fml:pkt); local loc:dcid {loc:dcid := quic_packet_retry.dst_cid(fml:pkt); if quic_packet_retry.ptype(fml:pkt) = quic_packet_type.retry {nonce_cid(loc:scid) := loc:dcid}; if conn_requested(fml:dst,fml:src,loc:dcid) & ~connected(loc:dcid) & ~connected(loc:scid) {call app_server_open_event_retry(fml:src, fml:dst, loc:scid, loc:dcid); call app_server_open_event(fml:src, fml:dst, loc:scid, loc:dcid)}}}",
            "{assert ip_endpoints.end(fml:a) > ip_endpoints.end(old_fml:a) & ~(ip_endpoints.end(old_fml:a) < X & X < ip_endpoints.end(fml:a)); assert 0:index <= X & X < ip_endpoints.end(old_fml:a) -> ip_endpoints.value(fml:a,X) = ip_endpoints.value(old_fml:a,X); assert ip_endpoints.value(fml:a,ip_endpoints.end(old_fml:a)) = fml:v}",
            "{assert fml:x < fml:y & (fml:x < Y -> fml:y <= Y); assert quic_packet_retry.idx.succ(fml:x,fml:y)}",
            "<<<\n                for (unsigned i = 0; i < `fml:a`.size()/2; i++) {\n                    std::swap(`fml:a`[i],`fml:a`[`fml:a`.size()-i-1]);\n                }\n            >>>",
            "assert prot.arr.value(fml:a,fml:x) = fml:y",
            "<<<\n                for (unsigned i = 0; i < `fml:b`.size(); i++)\n\t            `fml:a`.push_back(`fml:b`[i]);\n            >>>",
            "fml:src := (client.ep if (fml:tls_id = client.tls_id & ~version_negociated) else (client_vn if (fml:tls_id = client.tls_id & version_negociated) else server.ep))",
            "<<<\n\t        `fml:s` = (`index`) `fml:a`.size();\n\t    >>>",
            "{assert fml:x < fml:y & (fml:x < Y -> fml:y <= Y); assert replayed_quic_packet_0rtt.idx.succ(fml:x,fml:y)}",
            "{}",
            "<<<\n\t        if (`fml:a`.size() > 0) {\n\t            a.pop_back();\n\t        }\n            >>>",
            "local loc:scid {loc:scid := quic_packet_vn.src_cid(fml:pkt); local loc:dcid {loc:dcid := quic_packet_vn.dst_cid(fml:pkt); if quic_packet_vn.ptype(fml:pkt) = quic_packet_type.version_negociation {nonce_cid(loc:scid) := loc:dcid}; if conn_requested(fml:dst,fml:src,loc:dcid) & ~connected(loc:dcid) & ~connected(loc:scid) {call app_server_open_event_vn(fml:src, fml:dst, loc:scid, loc:dcid); call app_server_open_event(fml:src, fml:dst, loc:scid, loc:dcid)}}}",
            "<<<\n\t        if (`fml:a`.size() > 0) {\n\t            a.pop_back();\n\t        }\n            >>>",
            "{assert versions_bv.end(fml:a) = fml:s; assert 0:index <= X & X < versions_bv.end(old_fml:a) -> versions_bv.value(fml:a,X) = versions_bv.value(old_fml:a,X); assert versions_bv.end(old_fml:a) <= X & X < fml:s -> versions_bv.value(fml:a,X) = fml:v}",
            "<<<\n\t    >>>",
            "{}",
            "assert 0:vector[tls.extension].domain <= fml:s",
            "<<<\n\t        if (`fml:a`.size() > 0) {\n\t            a.pop_back();\n\t        }\n            >>>",
            "{}",
            "<<<\n\t        `fml:a`.push_back(`fml:v`);\n            >>>",
            "assert ip_endpoints.value(fml:a,fml:x) = fml:y",
            "{}",
            "{assert vector[tls.psk_identity].end(fml:a) > vector[tls.psk_identity].end(old_fml:a) & ~(vector[tls.psk_identity].end(old_fml:a) < X & X < vector[tls.psk_identity].end(fml:a)); assert 0:vector[tls.psk_identity].domain <= X & X < vector[tls.psk_identity].end(old_fml:a) -> vector[tls.psk_identity].value(fml:a,X) = vector[tls.psk_identity].value(old_fml:a,X); assert vector[tls.psk_identity].value(fml:a,vector[tls.psk_identity].end(old_fml:a)) = fml:v}",
            "{}",
            "<<<\n\t        if (0 <= `fml:x` && `fml:x` < (`quic_packet_coal_0rtt.idx`)`fml:a`.size()) \n\t            `fml:y` = `fml:a`[`fml:x`];\n\t    >>>",
            "<<<\n                for (unsigned i = 0; i < `fml:b`.size(); i++)\n\t            `fml:a`.push_back(`fml:b`[i]);\n            >>>",
            "<<<\n\t    >>>",
            "<<<\n\t        if (0 <= `fml:x` && `fml:x` < (`quic_packet_coal_0rtt.idx`)`fml:a`.size()) \n\t            `fml:y` = `fml:a`[`fml:x`];\n\t    >>>",
            "{}",
            "<<<\n\t        `fml:s` = (`vector[tls.handshake].domain`) `fml:a`.size();\n\t    >>>",
            "fml:y := fml:x - 1",
            "assert 0:idx_r <= fml:x & fml:x < arr_streamid_r.end(fml:a)",
            "assert tls_api.upper.open(fml:c) & tls_api.upper.established(fml:c)",
            "{assert quic_packet_coal_0rtt.arr.end(fml:a) = quic_packet_coal_0rtt.arr.end(old_fml:a); assert quic_packet_coal_0rtt.arr.value(fml:a,X) = (fml:y if (X = fml:x) else quic_packet_coal_0rtt.arr.value(old_fml:a,X))}",
            "<<<\n                if ((`vector[tls.extension].domain`)`fml:a`.size() > 0)\n                    `fml:res` = `fml:a`.back();\n            >>>",
            "{assert connected(fml:dcid) & connected_to(fml:dcid) = fml:scid; assert fml:e = quic_packet_type.one_rtt & established_1rtt_keys(fml:scid); assert num_queued_frames(fml:scid) > 0 -> fml:e = queued_level(fml:scid)}",
            "<<<\n\t        `fml:s` = (`quic_packet.idx`) `fml:a`.size();\n\t    >>>",
            "local loc:dst {loc:dst := server.ep; local loc:0 {call loc:0 := prot.arr.empty; local loc:pkts_mim {loc:pkts_mim := loc:0; call loc:pkts_mim := prot.arr.append(loc:pkts_mim, fml:ppkt); call net.send(endpoint_id.victim, sock_victim, loc:dst, loc:pkts_mim)}}}",
            "{}",
            "{}",
            "<<<\n\t        unsigned __old_size = `fml:a`.size();\n\t        `fml:a`.resize(`fml:s`);\n\t        for (unsigned i = __old_size; i < (unsigned)`fml:s`; i++)\n\t            `fml:a`[i] = v;\n            >>>",
            "assert 0:quic_packet_retry.idx <= fml:x & fml:x < quic_packet_retry.arr.end(fml:a)",
            "assert 0:vector[tls.cipher_suite].domain < fml:x",
            "assert 0:clients.client.idx < fml:x",
            "<<<\n                for (unsigned i = 0; i < `fml:b`.size(); i++)\n\t            `fml:a`.push_back(`fml:b`[i]);\n            >>>",
            "{assert forged_protected_quic_packet.arr.end(fml:a) = fml:s; assert 0:forged_protected_quic_packet.idx <= X & X < forged_protected_quic_packet.arr.end(old_fml:a) -> forged_protected_quic_packet.arr.value(fml:a,X) = forged_protected_quic_packet.arr.value(old_fml:a,X); assert forged_protected_quic_packet.arr.end(old_fml:a) <= X & X < fml:s -> forged_protected_quic_packet.arr.value(fml:a,X) = fml:v}",
            "{assert clients.client.arr.end(fml:a) = fml:s; assert 0:clients.client.idx <= X & X < clients.client.arr.end(old_fml:a) -> clients.client.arr.value(fml:a,X) = clients.client.arr.value(old_fml:a,X); assert clients.client.arr.end(old_fml:a) <= X & X < fml:s -> clients.client.arr.value(fml:a,X) = fml:v}",
            "<<<\n\t        `fml:s` = (`vector[tls.compression_method].domain`) `fml:a`.size();\n\t    >>>",
            "fml:y := fml:x - 1",
            "<<<\n\t        `fml:a`.resize(`fml:s`);\n\t        for (unsigned i = 0; i < `fml:s`; i++)\n\t            `fml:a`[i] = y;\n\t    >>>",
            "<<<\n\t        if (`fml:a`.size() > 0) {\n\t            a.pop_back();\n\t        }\n            >>>",
            "{}",
            "{}",
            "{last_packet_type(C) := quic_packet_type.initial; last_packet_length(C) := 1200:stream_pos}",
            "<<<\n                if ((`idx`)`fml:a`.size() > 0)\n                    `fml:res` = `fml:a`.back();\n            >>>",
            "<<<\n\t    >>>",
            "<<<\n\t        if (`fml:a`.size() > 0) {\n\t            a.pop_back();\n\t        }\n            >>>",
            "{}",
            "{}",
            "<<<\n\t        if (0 <= `fml:x` && `fml:x` < (`vector[tls.psk_identity].domain`)`fml:a`.size()) \n\t            `fml:a`[`fml:x`] = `fml:y`;\n\t    >>>",
            "{}",
            "<<<\n\t        `fml:a`.resize(`fml:s`);\n\t        for (unsigned i = 0; i < `fml:s`; i++)\n\t            `fml:a`[i] = y;\n\t    >>>",
            "{grease_quic_bit.is_set(fml:s) := true; grease_quic_bit.value(fml:s) := fml:p}",
            "{fml:ok := false; local loc:tp {loc:tp := trans_params(fml:dcid); fml:ok := min_ack_delay.exponent_8(min_ack_delay.value(loc:tp)) * 1000 < max_ack_delay.exponent_8(max_ack_delay.value(loc:tp))}}",
            "{}",
            "{cid_mapped(seqnum_to_cid(fml:dcid,frame.retire_connection_id.seq_num(fml:f))) := false; count_rcid_frame(frame.retire_connection_id.seq_num(fml:f)) := count_rcid_frame(frame.retire_connection_id.seq_num(fml:f)) + 1; if count_rcid_frame(frame.retire_connection_id.seq_num(fml:f)) = 1 {num_conn(fml:dcid) := num_conn(fml:dcid) - 1}; call enqueue_frame(fml:scid, fml:f, fml:e, false)}",
            "<<<\n\t        if (`fml:a`.size() > 0) {\n\t            a.pop_back();\n\t        }\n            >>>",
            "<<<\n       srand((unsigned) time(0)); //fixed or random seed ?\n       res = 0;\n       res = ::rand()% (max-min+1) + min;\n       std::cerr << \"between random: \" << res << \"\\n\";\n       >>>",
            "{assert fml:y < fml:x & (Y:quic_packet_0rtt.idx < fml:x -> Y <= fml:y); assert quic_packet_0rtt.idx.succ(fml:y,fml:x)}",
            "local loc:0 {call loc:0 := prot.get_header_info(fml:spkt, fml:decrypt); local loc:h {loc:h := loc:0; local loc:0 {call loc:0 := packet_encryption_level(loc:h); local loc:e {loc:e := loc:0; local loc:0 {call loc:0 := packet_scid(loc:h); local loc:scid {loc:scid := loc:0; call last_packet_type(loc:scid) := packet_encryption_level_up(loc:h); last_packet_length(loc:scid) := prot.payload_length(loc:h); fml:pnum := last_pkt_num(loc:scid,loc:e)}}}}}}",
            "{}",
            "call enqueue_frame(fml:scid, fml:f, fml:e, false)",
            "assert fml:s = tls.handshakes.end(fml:a)",
            "<<<\n\t        `fml:a`.resize(`fml:s`);\n\t        for (unsigned i = 0; i < `fml:s`; i++)\n\t            `fml:a`[i] = y;\n\t    >>>",
            "local loc:dcid {loc:dcid := quic_packet_0rtt.dst_cid(fml:pkt); local loc:scid {loc:scid := quic_packet_0rtt.src_cid(fml:pkt); if cid_mapped(loc:dcid) {loc:dcid := cid_to_aid(loc:dcid)}; if fml:src = client_alt | fml:dst = client_alt {migration_done := true}; assert quic_packet_0rtt.ptype(fml:pkt) = quic_packet_type.zero_rtt; local loc:pn_app_space {loc:pn_app_space := quic_packet_type.one_rtt; assert ~sent_pkt(loc:scid,loc:pn_app_space,quic_packet_0rtt.seq_num(fml:pkt)); sent_pkt(loc:scid,loc:pn_app_space,quic_packet_0rtt.seq_num(fml:pkt)) := true; assert loc:scid = initial_scid & loc:dcid = initial_dcid; assert num_queued_frames_rtt(loc:scid) > 0; assert quic_packet_0rtt.payload(fml:pkt) = queued_frames_rtt(loc:scid); assert connected(loc:dcid) -> connected_to(loc:dcid) = loc:scid; local loc:0 {call loc:0 := quic_packet_0rtt.long(fml:pkt); assert conn_seen(loc:scid) & loc:0 & is_client(loc:scid) -> conn_requested(fml:src,fml:dst,loc:scid)}}}}",
            "assert fml:s = forged_protected_quic_packet.retired_cids.end(fml:a)",
            "{}",
            "{assert quic_packet_retry.retired_cids.end(fml:a) = fml:s; assert 0:quic_packet_retry.idx <= X & X < quic_packet_retry.retired_cids.end(old_fml:a) -> quic_packet_retry.retired_cids.value(fml:a,X) = quic_packet_retry.retired_cids.value(old_fml:a,X); assert quic_packet_retry.retired_cids.end(old_fml:a) <= X & X < fml:s -> quic_packet_retry.retired_cids.value(fml:a,X) = fml:v}",
            "{packed_forwarded_arr(fml:pkt) := true; call mim_agent.ppkt_to_be_reflected_to_victim := forged_pkts.empty; mim_agent.force_server_forward := false}",
            "<<<\n\t        if (0 <= `fml:x` && `fml:x` < (`quic_packet_retry.idx`)`fml:a`.size()) \n\t            `fml:a`[`fml:x`] = `fml:y`;\n\t    >>>",
            "{assert connected(fml:dcid) & connected_to(fml:dcid) = fml:scid; assert fml:e = quic_packet_type.one_rtt & established_1rtt_keys(fml:scid); assert num_queued_frames(fml:scid) > 0 -> fml:e = queued_level(fml:scid); assert stream_data.end(frame.path_response.data(fml:f)) = 8; assert path_challenge_pending(fml:scid,frame.path_response.data(fml:f))}",
            "fml:y := fml:x - 1",
            "<<<\n\t        if (0 <= `fml:x` && `fml:x` < (`idx`)`fml:a`.size()) \n\t            `fml:y` = `fml:a`[`fml:x`];\n\t    >>>",
            "{}",
            "<<<\n    res.val = c.val + inc;\n    >>>",
            "<<<\n\t        `fml:s` = (`jdx_s`) `fml:a`.size();\n\t    >>>",
            "local loc:tp {loc:tp := trans_params(fml:dcid); local loc:min {loc:min := 0:microsecs; if min_ack_delay.is_set(loc:tp) {loc:min := min_ack_delay.exponent_8(min_ack_delay.value(trans_params(fml:dcid)))}; assert frame.ack_frequency.packet_tolerence(fml:f) > 0; assert frame.ack_frequency.update_max_ack_delay(fml:f) > loc:min; assert frame.ack_frequency.ignore_order(fml:f) = 1 | frame.ack_frequency.ignore_order(fml:f) = 0; if first_ack_freq_received {assert frame.ack_frequency.seq_num(fml:f) = 0; first_ack_freq_received := false}\nelse {assert frame.ack_frequency.seq_num(fml:f) > last_ack_freq_seq(fml:scid); last_ack_freq_seq(fml:scid) := frame.ack_frequency.seq_num(fml:f)}; call enqueue_frame(fml:scid, fml:f, fml:e, false)}}",
            "<<<\n                for (unsigned i = 0; i < `fml:a`.size()/2; i++) {\n                    std::swap(`fml:a`[i],`fml:a`[`fml:a`.size()-i-1]);\n                }\n            >>>",
            "{}",
            "<<<\n\t        unsigned __old_size = `fml:a`.size();\n\t        `fml:a`.resize(`fml:s`);\n\t        for (unsigned i = __old_size; i < (unsigned)`fml:s`; i++)\n\t            `fml:a`[i] = v;\n            >>>",
            "fml:y := fml:x + 1",
            "{}",
            "if fml:ec = 0x0 {is_no_error := true}\nelse {if fml:ec = 0x1 {is_internal_error := true; is_no_error := false}\nelse {if fml:ec = 0x2 {is_server_busy := true; is_no_error := false}\nelse {if fml:ec = 0x3 {is_flow_control_error := true; is_no_error := false}\nelse {if fml:ec = 0x4 {is_stream_limit_error := true; is_no_error := false}\nelse {if fml:ec = 0x5 {is_stream_state_error := true; is_no_error := false}\nelse {if fml:ec = 0x6 {is_final_size_error := true; is_no_error := false}\nelse {if fml:ec = 0x7 {is_frame_encoding_error := true; is_no_error := false}\nelse {if fml:ec = 0x8 {is_transport_parameter_error := true; is_no_error := false}\nelse {if fml:ec = 0x9 {is_connection_id_limit_error := true; is_no_error := false}\nelse {if fml:ec = 0xa {is_protocol_violation := true; is_no_error := false}\nelse {if fml:ec = 0xb {is_invalid_token := true; is_no_error := false}\nelse {if fml:ec = 0xc {is_application_error := true; is_no_error := false}\nelse {if fml:ec = 0xd {is_crypto_buffer_exceeded := true}\nelse {if fml:ec = 0xe {is_key_update_error := true}\nelse {if fml:ec = 0xf {is_aead_limit_reached := true}\nelse {if fml:ec = 0x10 {is_no_viable_path := true}\nelse {if fml:ec = 0x53F8 {is_version_negociation_error := true; is_no_error := false}\nelse {is_crypto_error := true; is_no_error := false}}}}}}}}}}}}}}}}}}",
            "{}",
            "{receiving_sizeKnown(fml:id) := false; receiving_resetRecvd(fml:id) := false; receiving_dataRecvd(fml:id) := true}",
            "{}",
            "<<<\n\t        `fml:s` = (`servers.server.idx`) `fml:a`.size();\n\t    >>>",
            "local loc:0 {call loc:0 := socket_endpoint(fml:host, fml:s); local loc:dst {loc:dst := loc:0; local loc:idx {loc:idx := prot.arr.begin(fml:pkts); while loc:idx < prot.arr.end(fml:pkts)\n{local loc:ppkt {loc:ppkt := prot.arr.value(fml:pkts,loc:idx); local loc:0 {call loc:0 := src_tls_id(loc:dst); local loc:tls_id {loc:tls_id := loc:0; local loc:header {loc:header := stream_data.value(loc:ppkt,0); local loc:hdr_type {loc:hdr_type := bfe[0][6](stream_data.value(loc:ppkt,0)); local loc:tt {loc:tt := bvand(loc:hdr_type,0x30); local loc:is_long {loc:is_long := bvand(0x80:byte,loc:header) ~= 0; local loc:version {loc:version := stream_data.segment(loc:ppkt,1,1 + 4); local loc:0 {call loc:0 := bytes_to_version(loc:version); local loc:bversion {loc:bversion := loc:0; local loc:ptype {loc:ptype := bvand(0x30:byte,loc:header); call recv_packet_victim(fml:host, fml:src, loc:dst, loc:ppkt); call victim_agent.ppkt_recvd := forged_pkts.append(victim_agent.ppkt_recvd, loc:ppkt); call loc:idx := prot.idx.next(loc:idx)}}}}}}}}}}}}}}}",
            "<<<\n\t        if (0 <= `fml:x` && `fml:x` < (`tls.handshakes.domain`)`fml:a`.size()) \n\t            `fml:y` = `fml:a`[`fml:x`];\n\t    >>>",
            "assert 0:idx <= fml:s",
            "<<<\n                for (unsigned i = 0; i < `fml:b`.size(); i++)\n\t            `fml:a`.push_back(`fml:b`[i]);\n            >>>",
            "{max_packet_size.is_set(fml:s) := true; max_packet_size.value(fml:s) := fml:p}",
            "assert 0:quic_packet_retry.idx < fml:x",
            "assert arr_streamid_s.end(fml:a) = 0",
            "{}",
            "{assert fml:x < fml:y & (fml:x < Y -> fml:y <= Y); assert quic_packet.idx.succ(fml:x,fml:y)}",
            "{}",
            "<<<\n                for (unsigned i = 0; i < `fml:a`.size()/2; i++) {\n                    std::swap(`fml:a`[i],`fml:a`[`fml:a`.size()-i-1]);\n                }\n            >>>",
            "{assert tls_hand_extensions.end(fml:a) > tls_hand_extensions.end(old_fml:a) & ~(tls_hand_extensions.end(old_fml:a) < X & X < tls_hand_extensions.end(fml:a)); assert 0:tls_hand_extensions.domain <= X & X < tls_hand_extensions.end(old_fml:a) -> tls_hand_extensions.value(fml:a,X) = tls_hand_extensions.value(old_fml:a,X); assert tls_hand_extensions.value(fml:a,tls_hand_extensions.end(old_fml:a)) = fml:v}",
            "{assert frame.ack_ecn.range.arr.end(fml:a) = fml:s; assert 0:frame.ack_ecn.range.idx <= X & X < frame.ack_ecn.range.arr.end(old_fml:a) -> frame.ack_ecn.range.arr.value(fml:a,X) = frame.ack_ecn.range.arr.value(old_fml:a,X); assert frame.ack_ecn.range.arr.end(old_fml:a) <= X & X < fml:s -> frame.ack_ecn.range.arr.value(fml:a,X) = fml:v}",
            "{}",
            "{assert forged_protected_quic_packet.retired_cids.end(fml:a) = forged_protected_quic_packet.retired_cids.end(old_fml:a); assert forged_protected_quic_packet.retired_cids.value(fml:a,X) = (fml:y if (X = fml:x) else forged_protected_quic_packet.retired_cids.value(old_fml:a,X))}",
            "assert 0:idx_s < fml:x",
            "fml:y := fml:x + 1",
            "assert quic_packet_0rtt.arr.end(fml:a) = 0",
            "<<<\n\t        if (0 <= `fml:x` && `fml:x` < (`frame.ack.range.idx`)`fml:a`.size()) \n\t            `fml:y` = `fml:a`[`fml:x`];\n\t    >>>",
            "{}",
            "<<<\n                if ((`stream_pos`)`fml:a`.size() > 0)\n                    `fml:res` = `fml:a`.back();\n            >>>",
            "{}",
            "<<<\n\t        if (0 <= `fml:x` && `fml:x` < (`idx_r`)`fml:a`.size()) \n\t            `fml:a`[`fml:x`] = `fml:y`;\n\t    >>>",
            "{}",
            "<<<\n    val = b;\n    >>>",
            "assert forged_quic_packet_retry.arr.end(fml:a) = 0",
            "assert 0:forged_quic_packet_vn.idx < fml:x",
            "assert fml:s = vector[tls.handshake].end(fml:a)",
            "<<<\n                if ((`servers.server.idx`)`fml:a`.size() > 0)\n                    `fml:res` = `fml:a`.back();\n            >>>",
            "fml:y := fml:x + 1",
            "<<<\n                const char * command = \"sudo iptables -t nat -L -n -v;sudo iptables -t nat -F >/dev/null 2>&1\"; \n                int cr = system( command );\n            >>>",
            "assert 0:vector[tls.extension].domain <= fml:x & fml:x < vector[tls.extension].end(fml:a)",
            "fml:res := quic_packet.ptype(fml:pkt) ~= quic_packet_type.one_rtt",
            "assert 0:tls_api.id < fml:x",
            "{}",
            "<<<\n\t        unsigned __old_size = `fml:a`.size();\n\t        `fml:a`.resize(`fml:s`);\n\t        for (unsigned i = __old_size; i < (unsigned)`fml:s`; i++)\n\t            `fml:a`[i] = v;\n            >>>",
            "{assert vector[transport_parameter].end(fml:a) = fml:s; assert 0:vector[transport_parameter].domain <= X & X < vector[transport_parameter].end(old_fml:a) -> vector[transport_parameter].value(fml:a,X) = vector[transport_parameter].value(old_fml:a,X); assert vector[transport_parameter].end(old_fml:a) <= X & X < fml:s -> vector[transport_parameter].value(fml:a,X) = fml:v}",
            "{}",
            "{}",
            "{}",
            "assert 0:vector[tls.compression_method].domain <= fml:s",
            "<<<\n\t    `quic_ser_forged` ser;\n\t    __ser(ser,x);\n\t    y.resize(ser.res.size());\n\t    for (unsigned i = 0; i < ser.res.size(); i++)\n\t        y[i] = (unsigned char) ser.res[i];\n//\t    std::copy(ser.res.begin(),ser.res.end(),y.begin());\n\t    >>>",
            "fml:y := fml:x + 1",
            "{assert fml:y < fml:x & (Y:quic_packet_retry.idx < fml:x -> Y <= fml:y); assert quic_packet_retry.idx.succ(fml:y,fml:x)}",
            "{}",
            "call fml:s := net.impl.listen(fml:me, fml:addr)",
            "fml:y := fml:x + 1",
            "fml:y := fml:x + 1",
            "<<<\n\t        if (`fml:a`.size() > 0) {\n\t            a.pop_back();\n\t        }\n            >>>",
            "assert vector[tls.compression_method].end(fml:a) = fml:s & vector[tls.compression_method].value(fml:a,X) = fml:y",
            "{}",
            "fml:y := fml:x - 1",
            "fml:y := fml:x + 1",
            "{assert vector[tls.handshake].end(fml:a) = fml:s; assert 0:vector[tls.handshake].domain <= X & X < vector[tls.handshake].end(old_fml:a) -> vector[tls.handshake].value(fml:a,X) = vector[tls.handshake].value(old_fml:a,X); assert vector[tls.handshake].end(old_fml:a) <= X & X < fml:s -> vector[tls.handshake].value(fml:a,X) = fml:v}",
            "{}",
            "{}",
            "{assert clients.client.arr.end(fml:a) > clients.client.arr.end(old_fml:a) & ~(clients.client.arr.end(old_fml:a) < X & X < clients.client.arr.end(fml:a)); assert 0:clients.client.idx <= X & X < clients.client.arr.end(old_fml:a) -> clients.client.arr.value(fml:a,X) = clients.client.arr.value(old_fml:a,X); assert clients.client.arr.value(fml:a,clients.client.arr.end(old_fml:a)) = fml:v}",
            "{}",
            "<<<\n\t        `fml:a`.resize(`fml:s`);\n\t        for (unsigned i = 0; i < `fml:s`; i++)\n\t            `fml:a`[i] = y;\n\t    >>>",
            "{}",
            "{packed_forwarded_arr(fml:pkt) := true; call mim_agent.ppkt_to_be_forwarded_to_client(mim_agent.last_cppkt_forwarded_to_client) := forged_pkts.empty; mim_agent.force_server_forward := false; mim_agent.forward_turn := false}",
            "{assert vector[tls.compression_method].end(fml:a) = fml:s; assert 0:vector[tls.compression_method].domain <= X & X < vector[tls.compression_method].end(old_fml:a) -> vector[tls.compression_method].value(fml:a,X) = vector[tls.compression_method].value(old_fml:a,X); assert vector[tls.compression_method].end(old_fml:a) <= X & X < fml:s -> vector[tls.compression_method].value(fml:a,X) = fml:v}",
            "{}",
            "{}",
            "fake_client.ep := fml:e",
            "assert 0:tls_hand_extensions.domain <= fml:x & fml:x < tls_hand_extensions.end(fml:a)",
            "{}",
            "assert fml:s = forged_quic_packet_retry.retired_cids.end(fml:a)",
            "<<<\n\t        if (0 <= `fml:x` && `fml:x` < (`idx_s`)`fml:a`.size()) \n\t            `fml:y` = `fml:a`[`fml:x`];\n\t    >>>",
            "assert 0:tls_extensions.domain <= fml:s",
            "{}",
            "{}",
            "{call client_initial_scil := scid_size_pos(false); local loc:0,loc:1 {call loc:0 := dcid_size_cl(retry_response(the_cid)); call loc:1 := cid_to_bytes(fml:nonce, loc:0); local loc:ikm {loc:ikm := loc:1; local loc:0 {call loc:0 := stream_data.empty; local loc:salt {loc:salt := loc:0; if fml:pversion = 0xfaceb002 | fml:pversion = 0xff00001b | fml:pversion = 0xff00001c {call loc:salt := stream_data.append(loc:salt, 0xc3:byte); call loc:salt := stream_data.append(loc:salt, 0xee:byte); call loc:salt := stream_data.append(loc:salt, 0xf7:byte); call loc:salt := stream_data.append(loc:salt, 0x12:byte); call loc:salt := stream_data.append(loc:salt, 0xc7:byte); call loc:salt := stream_data.append(loc:salt, 0x2e:byte); call loc:salt := stream_data.append(loc:salt, 0xbb:byte); call loc:salt := stream_data.append(loc:salt, 0x5a:byte); call loc:salt := stream_data.append(loc:salt, 0x11:byte); call loc:salt := stream_data.append(loc:salt, 0xa7:byte); call loc:salt := stream_data.append(loc:salt, 0xd2:byte); call loc:salt := stream_data.append(loc:salt, 0x43:byte); call loc:salt := stream_data.append(loc:salt, 0x2b:byte); call loc:salt := stream_data.append(loc:salt, 0xb4:byte); call loc:salt := stream_data.append(loc:salt, 0x63:byte); call loc:salt := stream_data.append(loc:salt, 0x65:byte); call loc:salt := stream_data.append(loc:salt, 0xbe:byte); call loc:salt := stream_data.append(loc:salt, 0xf9:byte); call loc:salt := stream_data.append(loc:salt, 0xf5:byte); call loc:salt := stream_data.append(loc:salt, 0x02:byte)}\nelse {if fml:pversion = 0xff00001d {call loc:salt := stream_data.append(loc:salt, 0xaf:byte); call loc:salt := stream_data.append(loc:salt, 0xbf:byte); call loc:salt := stream_data.append(loc:salt, 0xec:byte); call loc:salt := stream_data.append(loc:salt, 0x28:byte); call loc:salt := stream_data.append(loc:salt, 0x99:byte); call loc:salt := stream_data.append(loc:salt, 0x93:byte); call loc:salt := stream_data.append(loc:salt, 0xd2:byte); call loc:salt := stream_data.append(loc:salt, 0x4c:byte); call loc:salt := stream_data.append(loc:salt, 0x9e:byte); call loc:salt := stream_data.append(loc:salt, 0x97:byte); call loc:salt := stream_data.append(loc:salt, 0x86:byte); call loc:salt := stream_data.append(loc:salt, 0xf1:byte); call loc:salt := stream_data.append(loc:salt, 0x9c:byte); call loc:salt := stream_data.append(loc:salt, 0x61:byte); call loc:salt := stream_data.append(loc:salt, 0x11:byte); call loc:salt := stream_data.append(loc:salt, 0xe0:byte); call loc:salt := stream_data.append(loc:salt, 0x43:byte); call loc:salt := stream_data.append(loc:salt, 0x90:byte); call loc:salt := stream_data.append(loc:salt, 0xa8:byte); call loc:salt := stream_data.append(loc:salt, 0x99:byte)}\nelse {if fml:pversion = 0x00000001 | fml:pversion = 0xff000022 {call loc:salt := stream_data.append(loc:salt, 0x38:byte); call loc:salt := stream_data.append(loc:salt, 0x76:byte); call loc:salt := stream_data.append(loc:salt, 0x2c:byte); call loc:salt := stream_data.append(loc:salt, 0xf7:byte); call loc:salt := stream_data.append(loc:salt, 0xf5:byte); call loc:salt := stream_data.append(loc:salt, 0x59:byte); call loc:salt := stream_data.append(loc:salt, 0x34:byte); call loc:salt := stream_data.append(loc:salt, 0xb3:byte); call loc:salt := stream_data.append(loc:salt, 0x4d:byte); call loc:salt := stream_data.append(loc:salt, 0x17:byte); call loc:salt := stream_data.append(loc:salt, 0x9a:byte); call loc:salt := stream_data.append(loc:salt, 0xe6:byte); call loc:salt := stream_data.append(loc:salt, 0xa4:byte); call loc:salt := stream_data.append(loc:salt, 0xc8:byte); call loc:salt := stream_data.append(loc:salt, 0x0c:byte); call loc:salt := stream_data.append(loc:salt, 0xad:byte); call loc:salt := stream_data.append(loc:salt, 0xcc:byte); call loc:salt := stream_data.append(loc:salt, 0xbb:byte); call loc:salt := stream_data.append(loc:salt, 0x7f:byte); call loc:salt := stream_data.append(loc:salt, 0x0a:byte)}}}; call tls_api.upper.set_initial_keys(fml:id, loc:salt, loc:ikm)}}}}}",
            "<<<\n\t        unsigned __old_size = `fml:a`.size();\n\t        `fml:a`.resize(`fml:s`);\n\t        for (unsigned i = __old_size; i < (unsigned)`fml:s`; i++)\n\t            `fml:a`[i] = v;\n            >>>",
            "<<<\n                for (unsigned i = 0; i < `fml:a`.size()/2; i++) {\n                    std::swap(`fml:a`[i],`fml:a`[`fml:a`.size()-i-1]);\n                }\n            >>>",
            "fml:y := fml:x + 1",
            "{}",
            "<<<\n        z = x ^ y;\n        >>>",
            "http_request_file.contents := fml:d",
            "{initial_max_stream_id_bidi.is_set(fml:s) := true; initial_max_stream_id_bidi.value(fml:s) := fml:p}",
            "<<<\n\t        unsigned __old_size = `fml:a`.size();\n\t        `fml:a`.resize(`fml:s`);\n\t        for (unsigned i = __old_size; i < (unsigned)`fml:s`; i++)\n\t            `fml:a`[i] = v;\n            >>>",
            "<<<\n\t    >>>",
            "assert 0:forged_quic_packet.idx <= fml:s",
            "assert 0:index <= fml:x & fml:x < cids.end(fml:a)",
            "{assert quic_packet_vn.arr.end(fml:a) = fml:s; assert 0:quic_packet_vn.idx <= X & X < quic_packet_vn.arr.end(old_fml:a) -> quic_packet_vn.arr.value(fml:a,X) = quic_packet_vn.arr.value(old_fml:a,X); assert quic_packet_vn.arr.end(old_fml:a) <= X & X < fml:s -> quic_packet_vn.arr.value(fml:a,X) = fml:v}",
            "<<<\n                for (unsigned i = 0; i < `fml:b`.size(); i++)\n\t            `fml:a`.push_back(`fml:b`[i]);\n            >>>",
            "assert quic_packet_0rtt.retired_cids.value(fml:a,fml:x) = fml:y",
            "<<<\n\t        `fml:a`.push_back(`fml:v`);\n            >>>",
            "assert 0:vector[transport_parameter].domain <= fml:x & fml:x < vector[transport_parameter].end(fml:a)",
            "fml:y := fml:x - 1",
            "<<<\n                if ((`quic_packet_0rtt.idx`)`fml:a`.size() > 0)\n                    `fml:res` = `fml:a`.back();\n            >>>",
            "<<<\n                for (unsigned i = 0; i < `fml:b`.size(); i++)\n\t            `fml:a`.push_back(`fml:b`[i]);\n            >>>",
            "<<<\n\t        unsigned __old_size = `fml:a`.size();\n\t        `fml:a`.resize(`fml:s`);\n\t        for (unsigned i = __old_size; i < (unsigned)`fml:s`; i++)\n\t            `fml:a`[i] = v;\n            >>>",
            "{}",
            "<<<\n       srand((unsigned) time(0)); //fixed or random seed ?\n       res = 0;\n       res = ::rand()% (max-min+1) + min;\n       std::cerr << \"between random: \" << res << \"\\n\";\n       >>>",
            "<<<\n                if ((`idx_r`)`fml:a`.size() > 0)\n                    `fml:res` = `fml:a`.back();\n            >>>",
            "<<<\n\t        if (`fml:a`.size() > 0) {\n\t            a.pop_back();\n\t        }\n            >>>",
            "<<<\n\t        `fml:a`.resize(`fml:s`);\n\t        for (unsigned i = 0; i < `fml:s`; i++)\n\t            `fml:a`[i] = y;\n\t    >>>",
            "local loc:dcid {loc:dcid := forged_quic_packet_retry.dst_cid(fml:pkt); local loc:scid {loc:scid := forged_quic_packet_retry.src_cid(fml:pkt); if cid_mapped(loc:dcid) {loc:dcid := cid_to_aid(loc:dcid)}; if fml:src = client_alt | fml:dst = client_alt {migration_done := true}; if ~_generating {local loc:0,loc:1,loc:2 {call loc:0 := scid_size_pos(true); call loc:1 := dcid_size_pos(true); call loc:2 := prot.retry_integrity_tag(8:stream_pos, server_cid, forged_quic_packet_retry.pversion(fml:pkt), loc:0, loc:dcid, loc:1, loc:scid, forged_quic_packet_retry.token(fml:pkt), last_pkt_num(loc:scid,quic_packet_type.initial), header_retry, token_saved); local loc:expected_itoken {loc:expected_itoken := loc:2; local loc:0 {call loc:0 := bytes_to_itoken(loc:expected_itoken); assert loc:0 = forged_quic_packet_retry.integrity_token(fml:pkt)}}}}; assert forged_quic_packet_retry.ptype(fml:pkt) = quic_packet_type.retry}}",
            "{}",
            "{}",
            "assert frame.arr.end(fml:a) = fml:s & frame.arr.value(fml:a,X) = fml:y",
            "{}",
            "assert 0:frame.ack.range.idx < fml:x",
            "local loc:dcid {loc:dcid := quic_packet.dst_cid(fml:pkt); local loc:0 {call loc:0 := quic_packet.long(fml:pkt); local loc:scid {loc:scid := (quic_packet.src_cid(fml:pkt) if loc:0 else connected_to(loc:dcid)); if cid_mapped(loc:dcid) {loc:dcid := cid_to_aid(loc:dcid)}; if quic_packet.ptype(fml:pkt) = quic_packet_type.initial {initial_token := quic_packet.token(fml:pkt); if ~conn_seen(loc:dcid) {if ~zero_rtt_sent {call show_initial_request_initial; local loc:0 {call loc:0 := src_tls_id(fml:src); call tls_client_initial_request(fml:src, fml:dst, loc:dcid, quic_packet.pversion(fml:pkt), loc:0)}}; conn_requested(fml:src,fml:dst,loc:scid) := true}; cid_to_token(loc:dcid) := quic_packet.token(fml:pkt)}; conn_seen(loc:scid) := true; if queued_ack_eliciting(loc:scid) {ack_credit(loc:dcid) := ack_credit(loc:dcid) + 1}; if ~queued_non_ack(loc:scid) {ack_credit(loc:scid) := ack_credit(loc:scid) - 1}; if queued_non_probing(loc:scid) {if quic_packet.ptype(fml:pkt) = quic_packet_type.one_rtt {if quic_packet.seq_num(fml:pkt) >= hi_non_probing(loc:scid) {hi_non_probing(loc:scid) := quic_packet.seq_num(fml:pkt); hi_non_probing_endpoint(loc:scid,fml:src) := true}}\nelse {hi_non_probing_endpoint(loc:scid,fml:src) := true}}; if queued_close(loc:scid) {pkt_has_close(loc:scid,quic_packet.ptype(fml:pkt),quic_packet.seq_num(fml:pkt)) := true}; if conn_draining(loc:scid) {draining_pkt_sent(loc:scid) := true}; if quic_packet.ptype(fml:pkt) = quic_packet_type.initial & ~first_initial_send & zero_rtt_allowed {first_initial_send := true; initial_scid := loc:scid; initial_dcid := loc:dcid; queued_level(the_cid) := quic_packet_type.zero_rtt}\nelse {first_initial_send := false}; call queued_frames(loc:scid) := frame.arr.empty; queued_non_probing(loc:scid) := false; queued_non_ack(loc:scid) := false; queued_close(loc:scid) := false; num_queued_frames(loc:scid) := 0:frame.idx; queued_ack_eliciting(loc:scid) := false}}}",
            "{}",
            "{assert quic_packet_coal_0rtt.arr.end(fml:a) > quic_packet_coal_0rtt.arr.end(old_fml:a) & ~(quic_packet_coal_0rtt.arr.end(old_fml:a) < X & X < quic_packet_coal_0rtt.arr.end(fml:a)); assert 0:quic_packet_coal_0rtt.idx <= X & X < quic_packet_coal_0rtt.arr.end(old_fml:a) -> quic_packet_coal_0rtt.arr.value(fml:a,X) = quic_packet_coal_0rtt.arr.value(old_fml:a,X); assert quic_packet_coal_0rtt.arr.value(fml:a,quic_packet_coal_0rtt.arr.end(old_fml:a)) = fml:v}",
            "<<<\n                if ((`quic_packet_coal_0rtt.idx`)`fml:a`.size() > 0)\n                    `fml:res` = `fml:a`.back();\n            >>>",
            "<<<\n\t    >>>",
            "assert 0:frame.ack_ecn.range.idx < fml:x",
            "call fml:s := net.impl.open(fml:me, fml:addr)",
            "{}",
            "{assert connected(fml:dcid) & connected_to(fml:dcid) = fml:scid; assert fml:lo < fml:hi & fml:lo = crypto_pos(fml:dcid,fml:e) & fml:hi <= crypto_length(fml:scid,fml:e)}",
            "{assert fml:y < fml:x & (Y:idx_r < fml:x -> Y <= fml:y); assert idx_r.succ(fml:y,fml:x)}",
            "{}",
            "local loc:0 {call loc:0 := prot.get_header_info(fml:pkt, true); local loc:h {loc:h := loc:0; call prot.show_header(loc:h); local loc:0 {call loc:0 := prot.get_level(fml:pkt); local loc:level {loc:level := loc:0; if loc:level = 1 & ~zrtt_pkt_set {zrtt_pkt_set := true; last_zrtt_pkt := fml:pkt}; local loc:0 {call loc:0 := tls_api.upper.iv_size(fml:c, loc:level); local loc:sample_size {loc:sample_size := loc:0; if ~zrtt_pkt_process & loc:level = 1 {tls_api.upper.ok(fml:res) := false}\nelse {if loc:sample_size = 0 {tls_api.upper.ok(fml:res) := false}\nelse {local loc:pnum_pos {loc:pnum_pos := prot.pkt_num_pos(loc:h); local loc:sample_pos {loc:sample_pos := loc:pnum_pos + 4; if loc:sample_pos + loc:sample_size > stream_data.end(fml:pkt) {loc:sample_pos := stream_data.end(fml:pkt) - loc:sample_size}; local loc:sample {loc:sample := stream_data.segment(fml:pkt,loc:sample_pos,loc:sample_pos + loc:sample_size); local loc:pnum {loc:pnum := stream_data.segment(fml:pkt,loc:pnum_pos,loc:pnum_pos + 4); local loc:0 {call loc:0 := stream_data.empty; local loc:mask {loc:mask := loc:0; local loc:0 {call loc:0 := stream_data.resize(loc:mask, 5:stream_pos, 0:byte); call loc:mask := tls_api.upper.encrypt_cipher(fml:c, loc:level, loc:0, loc:sample, true)}; local loc:byte0_mask {loc:byte0_mask := bvand(stream_data.value(loc:mask,0),(0x0f if prot.hdr_long(loc:h) else 0x1f)); local loc:hdr {loc:hdr := stream_data.segment(fml:pkt,0,loc:pnum_pos); local loc:0 {call loc:0 := prot.byte_xor(stream_data.value(loc:hdr,0), loc:byte0_mask); call loc:hdr := stream_data.set(loc:hdr, 0:stream_pos, loc:0)}; local loc:0 {call loc:0 := prot.get_pnum_len_b(loc:hdr); local loc:pnum_len {loc:pnum_len := loc:0; last_datagram_received_size := last_datagram_received_size + prot.payload_length(loc:h) + prot.pkt_num_pos(loc:h) + loc:pnum_len; call prot.show_token_len(loc:pnum_len); call loc:pnum := prot.stream_data_xor(stream_data.segment(fml:pkt,loc:pnum_pos,loc:pnum_pos + loc:pnum_len), stream_data.segment(loc:mask,1,1 + loc:pnum_len)); call loc:hdr := stream_data.extend(loc:hdr, loc:pnum); local loc:0 {call loc:0 := prot.get_pnum(loc:pnum, 0:stream_pos, loc:pnum_len); local loc:new_seq {loc:new_seq := loc:0; call loc:new_seq := prot.correct_pnum(fml:seq, loc:new_seq, loc:pnum_len); local loc:pyld {loc:pyld := stream_data.segment(fml:pkt,loc:pnum_pos + loc:pnum_len,stream_data.end(fml:pkt)); call fml:res := tls_api.upper.decrypt_aead(fml:c, loc:level, loc:pyld, loc:new_seq, loc:hdr); if tls_api.upper.ok(fml:res) {if prot.hdr_long(loc:h) {local loc:0 {call loc:0 := prot.to_var_int_16(prot.payload_length(loc:h) - 16); local loc:new_len {loc:new_len := loc:0; call loc:hdr := stream_data.resize(loc:hdr, prot.payload_length_pos(loc:h), 0:byte); call loc:hdr := stream_data.extend(loc:hdr, loc:new_len); call loc:hdr := stream_data.extend(loc:hdr, loc:pnum)}}}; tls_api.upper.payload(fml:res) := tls_api.upper.data(fml:res); call tls_api.upper.data(fml:res) := stream_data.extend(loc:hdr, tls_api.upper.data(fml:res))}}}}}}}}}}}}}}}}}}}}}}",
            "{}",
            "{}",
            "<<<\n       res = 0;\n       srand((unsigned) time(0)); //fixed or random seed ?\n       res = ::rand()%(max-1) + 0;\n       std::cerr << \"lower random: \" << res << \"\\n\";\n       >>>",
            "{}",
            "<<<\n\t        `fml:a`.resize(`fml:s`);\n\t        for (unsigned i = 0; i < `fml:s`; i++)\n\t            `fml:a`[i] = y;\n\t    >>>",
            "<<<\n\t        if (`fml:a`.size() > 0) {\n\t            a.pop_back();\n\t        }\n            >>>",
            "{}",
            "{}",
            "{}",
            "<<<\n\t        `fml:a`.push_back(`fml:v`);\n            >>>",
            "{assert quic_packet_coal_0rtt.retired_cids.end(fml:a) > quic_packet_coal_0rtt.retired_cids.end(old_fml:a) & ~(quic_packet_coal_0rtt.retired_cids.end(old_fml:a) < X & X < quic_packet_coal_0rtt.retired_cids.end(fml:a)); assert 0:quic_packet_coal_0rtt.idx <= X & X < quic_packet_coal_0rtt.retired_cids.end(old_fml:a) -> quic_packet_coal_0rtt.retired_cids.value(fml:a,X) = quic_packet_coal_0rtt.retired_cids.value(old_fml:a,X); assert quic_packet_coal_0rtt.retired_cids.value(fml:a,quic_packet_coal_0rtt.retired_cids.end(old_fml:a)) = fml:v}",
            "{}",
            "{}",
            "<<<\n                for (unsigned i = 0; i < `fml:a`.size()/2; i++) {\n                    std::swap(`fml:a`[i],`fml:a`[`fml:a`.size()-i-1]);\n                }\n            >>>",
            "<<<\n            const char * session_file = getenv(\"NEW_TOKEN_FILE\");\n            FILE *fp;\n            size_t len = 0;\n            ssize_t read;\n            char * line = NULL;\n            if(session_file != NULL) {\n                fp = fopen(session_file,\"r\");\n                read = getline(&line, &len, fp);\n                fclose(fp);\n                bool is_error = false;\n                if(line != NULL) { \n                    // std::cerr << \"NEW_TOKEN_FILE 1 \" << line << std::endl;\n                    int hex_len = strlen(line);\n                    // std::cerr << \"NEW_TOKEN_FILE hex_len \" << hex_len << std::endl;\n                    uint8_t secret[hex_len/2];\n                    for (int j = 0; j < hex_len/2; j++) {\n                        int a = ws_xton(line[j*2]);\n                        int b = ws_xton(line[j*2 + 1]);\n                        if (a == -1 || b == -1) {\n                            is_error = true;\n                            std::cerr << \"a ERROR \" << line[j*2] << std::endl;\n                            std::cerr << \"b ERROR \" << line[j*2 + 1] << std::endl;\n                            std::cerr << \"NEW_TOKEN_FILE ERROR \" << std::endl;\n                            break;\n                        }\n                        secret[j] = a << 4 | b;\n                        // std::cerr << \"NEW_TOKEN_FILE a \" << a << std::endl;\n                        // std::cerr << \"NEW_TOKEN_FILE b \" << b << std::endl;\n                        // std::cerr << \"NEW_TOKEN_FILE secret[j] \" << secret[j] << std::endl;\n                    }  \n                    //std::cerr << \"NEW_TOKEN_FILE 2 \" << secret << std::endl;\n                    /*for(int i = (hex_len/2)-1; i >=0 && !is_error; i--)\n                        b.push_back(secret[i]);*/\n                    for(int i = 0; i < hex_len/2 && !is_error; i++)\n                        b.push_back(secret[i]);\n                }\n            }\n        >>>",
            "<<<\n\t        `fml:a`.push_back(`fml:v`);\n            >>>",
            "<<<\n\t        if (0 <= `fml:x` && `fml:x` < (`quic_packet_retry.idx`)`fml:a`.size()) \n\t            `fml:y` = `fml:a`[`fml:x`];\n\t    >>>",
            "<<<\n\t        `fml:s` = (`idx_r`) `fml:a`.size();\n\t    >>>",
            "<<<\n\t    >>>",
            "{}",
            "assert 0:quic_packet_0rtt.idx <= fml:x & fml:x < quic_packet_0rtt.arr.end(fml:a)",
            "call http_request_file.synced(fml:c)",
            "{}",
            "{initial_max_stream_data_uni.is_set(fml:s) := true; initial_max_stream_data_uni.value(fml:s) := fml:p}",
            "<<<\n       srand((unsigned) time(0)); //fixed or random seed ?\n       res = 0;\n       res = ::rand()%32767 + (min+1);\n       std::cerr << \"greater random: \" << res << \"\\n\";\n       >>>",
            "<<<\n\t        if (`fml:a`.size() > 0) {\n\t            a.pop_back();\n\t        }\n            >>>",
            "{}",
            "<<<\n\t        `fml:s` = (`index`) `fml:a`.size();\n\t    >>>",
            "<<<\n\t        if (0 <= `fml:x` && `fml:x` < (`servers.server.idx`)`fml:a`.size()) \n\t            `fml:y` = `fml:a`[`fml:x`];\n\t    >>>",
            "{}",
            "<<<        // TODO: implement this\n        //picotls_connection *s = `tls_api.upper.foo.cid_map`[c];\n        std::cerr << \"upper.send s \"   << \"\\n\";\n        >>>",
            "<<<\n       // 128 + 40 (38..) bit = 2^168 value = 21 bytes\n       srand((unsigned) time(0)); //fixed or random seed ?\n       res.resize(len);\n       for (unsigned i = 0; i < len; i++) {\n         res[len-i-1] =  0xff & ::rand()%(max-min+1) + min;\n       }\n       std::cerr << \"between random: \" << res << \"\\n\";\n       >>>",
            "{assert connected(fml:dcid) & connected_to(fml:dcid) = fml:scid; assert fml:e = quic_packet_type.one_rtt & established_1rtt_keys(fml:scid); assert num_queued_frames(fml:scid) > 0 -> fml:e = queued_level(fml:scid); assert ~conn_closed(fml:scid); assert connected(fml:scid) & connected_to(fml:scid) = fml:dcid; if ~_generating {assert stream_seen(fml:dcid,frame.stop_sending.id(fml:f)); local loc:0 {call loc:0 := stream_id_allowed(fml:dcid, frame.stop_sending.id(fml:f), fml:e); assert loc:0}}}",
            "assert forged_pkts.end(fml:a) = 0",
            "<<<\n\t        if (0 <= `fml:x` && `fml:x` < (`quic_packet_vn.idx`)`fml:a`.size()) \n\t            `fml:y` = `fml:a`[`fml:x`];\n\t    >>>",
            "{}",
            "<<<\n\t        if (0 <= `fml:x` && `fml:x` < (`index`)`fml:a`.size()) \n\t            `fml:a`[`fml:x`] = `fml:y`;\n\t    >>>",
            "<<<\n\t        if (`fml:a`.size() > 0) {\n\t            a.pop_back();\n\t        }\n            >>>",
            "{assert arr_pkt_num_r.end(fml:a) = arr_pkt_num_r.end(old_fml:a); assert arr_pkt_num_r.value(fml:a,X) = (fml:y if (X = fml:x) else arr_pkt_num_r.value(old_fml:a,X))}",
            "<<<\n\t        `fml:a`.resize(`fml:s`);\n\t        for (unsigned i = 0; i < `fml:s`; i++)\n\t            `fml:a`[i] = y;\n\t    >>>",
            "<<<\n                for (unsigned i = 0; i < `fml:b`.size(); i++)\n\t            `fml:a`.push_back(`fml:b`[i]);\n            >>>",
            "{}",
            "{}",
            "{}",
            "{}",
            "{}",
            "{}",
            "<<<\n    res = c.val;\n    >>>",
            "{}",
            "{}",
            "{assert fml:y < fml:x & (Y:replayed_quic_packet_0rtt.idx < fml:x -> Y <= fml:y); assert replayed_quic_packet_0rtt.idx.succ(fml:y,fml:x)}",
            "<<<\n                for (unsigned i = 0; i < `fml:a`.size()/2; i++) {\n                    std::swap(`fml:a`[i],`fml:a`[`fml:a`.size()-i-1]);\n                }\n            >>>",
            "<<<\n\t        if (0 <= `fml:x` && `fml:x` < (`forged_quic_packet.idx`)`fml:a`.size()) \n\t            `fml:y` = `fml:a`[`fml:x`];\n\t    >>>",
            "<<<\n\t        `fml:a`.resize(`fml:s`);\n\t        for (unsigned i = 0; i < `fml:s`; i++)\n\t            `fml:a`[i] = y;\n\t    >>>",
            "assert 0:index <= fml:x & fml:x < ip_endpoints.end(fml:a)",
            "assert frame.arr.end(fml:a) = 0",
            "assert fml:s = vector[tls.psk_identity].end(fml:a)",
            "{}",
            "<<<        std::cerr << \"iv_size start \" << \"\\n\";\n        std::cerr << \"iv_size cid \" <<  c << \"\\n\";\n        std::cerr << \"iv_size level \" << l <<  \"\\n\";\n\t    picotls_connection *s = `tls_api.upper.foo.cid_map`[c];\n        ptls_cipher_context_t *pn_enc = (ptls_cipher_context_t *)(s->crypto_context[l].pn_enc);\n        if (!pn_enc)\n            pn_enc = (ptls_cipher_context_t *)(s->crypto_context[l].pn_dec);\n        if (!pn_enc) {\n            std::cerr << \"cipher for level \" << l << \" is not set\\n\";\n            sz = 0;\n        }\n        else sz = pn_enc->algo->iv_size;\n        std::cerr << \"iv_size end \" << sz << \"\\n\";\n        >>>",
            "fml:y := fml:x + 1",
            "assert bytes.value(fml:a,fml:x) = fml:y",
            "{}",
            "<<<\n                if ((`index`)`fml:a`.size() > 0)\n                    `fml:res` = `fml:a`.back();\n            >>>",
            "{assert fml:x < fml:y & (fml:x < Y -> fml:y <= Y); assert clients.client.idx.succ(fml:x,fml:y)}",
            "{}",
            "assert 0:prot.idx <= fml:x & fml:x < prot.arr.end(fml:a)",
            "{if ~reset_frame_restransmitted(fml:id) {receiving_recv(fml:id) := false; receiving_sizeKnown(fml:id) := false; receiving_dataRecvd(fml:id) := false; receiving_resetRecvd(fml:id) := true}; call lastest_stream_id_receiving(fml:seq) := arr_streamid_r.append(lastest_stream_id_receiving(fml:seq), fml:id); call lastest_pkt_num_receiving := arr_pkt_num_r.append(lastest_pkt_num_receiving, fml:seq)}",
            "{}",
            "{}",
            "{}",
            "{}",
            "local loc:0 {call loc:0 := prot.get_header_info(fml:pkt, false); local loc:h {loc:h := loc:0; local loc:0 {call loc:0 := prot.get_level(fml:pkt); local loc:level {loc:level := loc:0; local loc:0 {call loc:0 := tls_api.upper.iv_size(fml:c, loc:level); local loc:sample_size {loc:sample_size := loc:0; local loc:pnum_pos {loc:pnum_pos := prot.pkt_num_pos(loc:h); local loc:0 {call loc:0 := prot.get_pnum_len(fml:pkt); local loc:pnum_len {loc:pnum_len := loc:0; local loc:hdr_len {loc:hdr_len := loc:pnum_pos + loc:pnum_len; if prot.hdr_long(loc:h) {local loc:0 {call loc:0 := prot.to_var_int_16(prot.payload_length(loc:h) + 16); local loc:new_len {loc:new_len := loc:0; call fml:pkt := stream_data.set(fml:pkt, loc:pnum_pos - 2, stream_data.value(loc:new_len,0)); call fml:pkt := stream_data.set(fml:pkt, loc:pnum_pos - 1, stream_data.value(loc:new_len,1))}}}; local loc:hdr {loc:hdr := stream_data.segment(fml:pkt,0,loc:pnum_pos); local loc:pnum {loc:pnum := stream_data.segment(fml:pkt,loc:pnum_pos,loc:hdr_len); local loc:pyld {loc:pyld := stream_data.segment(fml:pkt,loc:hdr_len,stream_data.end(fml:pkt)); local loc:auth {loc:auth := stream_data.segment(fml:pkt,0,loc:hdr_len); local loc:0 {call loc:0 := prot.get_pnum(loc:pnum, 0:stream_pos, loc:pnum_len); local loc:new_seq {loc:new_seq := loc:0; call loc:new_seq := prot.correct_pnum(fml:seq, loc:new_seq, loc:pnum_len); call loc:pyld := tls_api.upper.encrypt_aead(fml:c, loc:level, loc:pyld, loc:new_seq, loc:auth); local loc:pn_offset {loc:pn_offset := 0:stream_pos; if prot.hdr_long(loc:h) {loc:pn_offset := loc:hdr_len - loc:pnum_pos}\nelse {loc:pn_offset := 1:stream_pos + 4}; local loc:sample_pos {loc:sample_pos := 4:stream_pos - loc:pnum_len; local loc:new_pyld {loc:new_pyld := loc:pyld; if loc:sample_pos + loc:sample_size > stream_data.end(fml:pkt) {local loc:diff {loc:diff := (loc:sample_pos + loc:sample_size) - stream_data.end(loc:pyld); local loc:i {loc:i := 0:stream_pos; while loc:i < loc:diff\n{call loc:new_pyld := stream_data.append(loc:new_pyld, 0x00:byte); loc:i := loc:i + 1}; loc:pyld := loc:new_pyld}}}; local loc:sample {loc:sample := stream_data.segment(loc:pyld,loc:sample_pos,loc:sample_pos + loc:sample_size); local loc:0 {call loc:0 := stream_data.empty; local loc:mask {loc:mask := loc:0; local loc:0 {call loc:0 := stream_data.resize(loc:mask, 5:stream_pos, 0:byte); call loc:mask := tls_api.upper.encrypt_cipher(fml:c, loc:level, loc:0, loc:sample, false)}; local loc:byte0_mask {loc:byte0_mask := bvand(stream_data.value(loc:mask,0),(0x0f if prot.hdr_long(loc:h) else 0x1f)); local loc:0 {call loc:0 := prot.byte_xor(stream_data.value(fml:pkt,0), loc:byte0_mask); call loc:hdr := stream_data.set(loc:hdr, 0:stream_pos, loc:0)}; call loc:pnum := prot.stream_data_xor(stream_data.segment(fml:pkt,loc:pnum_pos,loc:pnum_pos + loc:pnum_len), stream_data.segment(loc:mask,1,1 + loc:pnum_len)); local loc:0 {call loc:0 := stream_data.extend(loc:hdr, loc:pnum); call fml:pkt := stream_data.extend(loc:0, loc:pyld)}}}}}}}}}}}}}}}}}}}}}}}}",
            "local loc:send_end {loc:send_end := fml:pos + stream_data.end(fml:data); assert ~(loc:send_end > stream_app_data_end(fml:dcid,fml:s) & stream_app_data_finished(fml:dcid,fml:s)); local loc:end {loc:end := stream_data.end(stream_app_data(fml:dcid,fml:s)); if loc:end < loc:send_end {loc:end := loc:send_end}; call stream_app_data(fml:dcid,fml:s) := stream_data.resize(stream_app_data(fml:dcid,fml:s), loc:end, 0:byte); local loc:idx {loc:idx := stream_data.begin(fml:data); while loc:idx < stream_data.end(fml:data)\n{local loc:val {loc:val := stream_data.value(stream_app_data(fml:dcid,fml:s),fml:pos + loc:idx); assert loc:val ~= 0 -> stream_data.value(fml:data,loc:idx) = loc:val; call stream_app_data(fml:dcid,fml:s) := stream_data.set(stream_app_data(fml:dcid,fml:s), fml:pos + loc:idx, stream_data.value(fml:data,loc:idx)); call loc:idx := stream_pos.next(loc:idx)}}; stream_app_data_end(fml:dcid,fml:s) := loc:end; if fml:close {stream_app_data_finished(fml:dcid,fml:s) := true}}}}",
            "<<<\n                for (unsigned i = 0; i < `fml:b`.size(); i++)\n\t            `fml:a`.push_back(`fml:b`[i]);\n            >>>",
            "{}",
            "{assert prot.arr.end(fml:a) > prot.arr.end(old_fml:a) & ~(prot.arr.end(old_fml:a) < X & X < prot.arr.end(fml:a)); assert 0:prot.idx <= X & X < prot.arr.end(old_fml:a) -> prot.arr.value(fml:a,X) = prot.arr.value(old_fml:a,X); assert prot.arr.value(fml:a,prot.arr.end(old_fml:a)) = fml:v}",
            "{}",
            "{}",
            "if fml:src = client.ep {fml:socket := sock}\nelse {if fml:src = client_alt {fml:socket := sock_alt}\nelse {if fml:src = client_vn {fml:socket := sock_vn}}}",
            "{}",
            "{}",
            "local loc:jdx {loc:jdx := stream_data.begin(fml:data); if retry_sent(fml:scid) & ~crypto_reset(fml:dcid) {call show_test; crypto_handler_pos(C,L) := 0:stream_pos; call crypto_data(fml:scid,fml:e) := stream_data.empty; while loc:jdx < stream_data.end(fml:data)\n{local loc:cpos {loc:cpos := fml:pos + loc:jdx; crypto_data_present(fml:scid,fml:e,loc:cpos) := false; call loc:jdx := stream_pos.next(loc:jdx)}}; crypto_reset(fml:dcid) := true}; local loc:end {loc:end := fml:pos + stream_data.end(fml:data); if loc:end > stream_data.end(crypto_data(fml:scid,fml:e)) {call crypto_data(fml:scid,fml:e) := stream_data.resize(crypto_data(fml:scid,fml:e), loc:end, 0:byte)}; loc:jdx := stream_data.begin(fml:data); while loc:jdx < stream_data.end(fml:data)\n{local loc:cpos {loc:cpos := fml:pos + loc:jdx; local loc:byte {loc:byte := stream_data.value(fml:data,loc:jdx); assert crypto_data_present(fml:scid,fml:e,loc:cpos) -> stream_data.value(crypto_data(fml:scid,fml:e),loc:cpos) = loc:byte; crypto_data_end(fml:scid,fml:e) := loc:end; call crypto_data(fml:scid,fml:e) := stream_data.set(crypto_data(fml:scid,fml:e), loc:cpos, loc:byte); crypto_data_present(fml:scid,fml:e,loc:cpos) := true; call loc:jdx := stream_pos.next(loc:jdx)}}}; crypto_data_end(fml:scid,fml:e) := stream_data.end(crypto_data(fml:scid,fml:e)); local loc:max_present {loc:max_present := 0:stream_pos; while loc:max_present < crypto_data_end(fml:scid,fml:e) & crypto_data_present(fml:scid,fml:e,loc:max_present)\n{call loc:max_present := stream_pos.next(loc:max_present)}; local loc:avail {loc:avail := stream_data.segment(crypto_data(fml:scid,fml:e),crypto_handler_pos(fml:scid,fml:e),loc:max_present); local loc:0 {call loc:0 := tls.handshake_parser.deserialize(loc:avail, 0:stream_pos); local loc:res {loc:res := loc:0; local loc:hs {loc:hs := tls.handshake_parser.value(loc:res); call tls.handshake_data_event(fml:src, fml:dst, stream_data.segment(loc:avail,0,tls.handshake_parser.pos(loc:res))); crypto_handler_pos(fml:scid,fml:e) := crypto_handler_pos(fml:scid,fml:e) + tls.handshake_parser.pos(loc:res); local loc:idx {loc:idx := tls.handshakes.begin(loc:hs); while loc:idx < tls.handshakes.end(loc:hs)\n{local loc:h {loc:h := tls.handshakes.value(loc:hs,loc:idx); call tls.handshake_event(fml:src, fml:dst, loc:h); call handle_tls_handshake(fml:src, fml:dst, fml:scid, fml:dcid, loc:h); call loc:idx := tls.handshakes.domain.next(loc:idx)}}}}}}}}}}",
            "{assert forged_protected_quic_packet.retired_cids.end(fml:a) > forged_protected_quic_packet.retired_cids.end(old_fml:a) & ~(forged_protected_quic_packet.retired_cids.end(old_fml:a) < X & X < forged_protected_quic_packet.retired_cids.end(fml:a)); assert 0:forged_protected_quic_packet.idx <= X & X < forged_protected_quic_packet.retired_cids.end(old_fml:a) -> forged_protected_quic_packet.retired_cids.value(fml:a,X) = forged_protected_quic_packet.retired_cids.value(old_fml:a,X); assert forged_protected_quic_packet.retired_cids.value(fml:a,forged_protected_quic_packet.retired_cids.end(old_fml:a)) = fml:v}",
            "<<<\n\t        `fml:s` = (`tls_extensions.domain`) `fml:a`.size();\n\t    >>>",
            "{assert forged_protected_quic_packet.arr.end(fml:a) > forged_protected_quic_packet.arr.end(old_fml:a) & ~(forged_protected_quic_packet.arr.end(old_fml:a) < X & X < forged_protected_quic_packet.arr.end(fml:a)); assert 0:forged_protected_quic_packet.idx <= X & X < forged_protected_quic_packet.arr.end(old_fml:a) -> forged_protected_quic_packet.arr.value(fml:a,X) = forged_protected_quic_packet.arr.value(old_fml:a,X); assert forged_protected_quic_packet.arr.value(fml:a,forged_protected_quic_packet.arr.end(old_fml:a)) = fml:v}",
            "<<<\n\t        unsigned __old_size = `fml:a`.size();\n\t        `fml:a`.resize(`fml:s`);\n\t        for (unsigned i = __old_size; i < (unsigned)`fml:s`; i++)\n\t            `fml:a`[i] = v;\n            >>>",
            "{}",
            "{}",
            "fml:y := fml:x - 1",
            "{}",
            "local loc:0 {call loc:0 := prot.get_header_info(fml:spkt, true); local loc:h {loc:h := loc:0; local loc:0 {call loc:0 := packet_encryption_level_up(loc:h); local loc:e {loc:e := loc:0; if last_packet_type(prot.scid(loc:h)) = quic_packet_type.initial & last_packet_length(prot.scid(loc:h)) < 1200 {fml:is_padding := true}\nelse {fml:is_padding := false}}}}}",
            "{}",
            "{}",
            "fml:y := fml:x + 1",
            "{assert fml:x < fml:y & (fml:x < Y -> fml:y <= Y); assert vector[tls.extension].domain.succ(fml:x,fml:y)}",
            "{}",
            "{}",
            "{}",
            "{}",
            "{}",
            "assert cids.end(fml:a) = 0",
            "{min_ack_delay.is_set(fml:s) := true; min_ack_delay.value(fml:s) := fml:p}",
            "{}",
            "forged_packet_send := false",
            "<<<\n\t        unsigned __old_size = `fml:a`.size();\n\t        `fml:a`.resize(`fml:s`);\n\t        for (unsigned i = __old_size; i < (unsigned)`fml:s`; i++)\n\t            `fml:a`[i] = v;\n            >>>",
            "{}",
            "conn_enc_level(fml:src,fml:scid) := fml:e",
            "{}",
            "{conn_seen(C) := false; last_pkt_num(C,L) := 0:pkt_num; conn_closed(C) := false; conn_draining(C) := false; draining_pkt_sent(C) := false; sent_pkt(C,L,N) := false; acked_pkt(C,L,N) := false; pkt_has_close(C,L,N) := false; max_acked(C,L) := 0:pkt_num; ack_credit(C) := 0:pkt_num; trans_params_set(C) := false; is_client(C) := false; conn_requested(S,D,C) := false; hi_non_probing(C) := 0:pkt_num; hi_non_probing_endpoint(C,E) := false; cid_mapped(C) := false; max_seq_num(C) := 0:cid_seq; num_conn(C) := 1:stream_pos; migration_done := false; tls_handshake_finished := false; first_initial_send := false; issued_zero_length_cid := false}",
            "assert fml:s = versions_bv.end(fml:a)",
            "{}",
            "{}",
            "<<<\n            const char * session_file = getenv(\"initial_max_stream_id_bidi\");\n            FILE *fp;\n            size_t len = 0;\n            ssize_t read;\n            char * line = NULL;\n            if(session_file != NULL) {\n                fp = fopen(session_file,\"r\");\n                read = getline(&line, &len, fp);\n                fclose(fp);\n                bool is_error = false;\n                if(line != NULL) { \n                    i = (uint16_t) std::stoll(line);\n                }\n            }\n        >>>",
            "<<<\n\t        if (`fml:a`.size() > 0) {\n\t            a.pop_back();\n\t        }\n            >>>",
            "{}",
            "<<<\n\t        `fml:s` = (`forged_quic_packet_vn.idx`) `fml:a`.size();\n\t    >>>",
            "<<<\n                for (unsigned i = 0; i < `fml:a`.size()/2; i++) {\n                    std::swap(`fml:a`[i],`fml:a`[`fml:a`.size()-i-1]);\n                }\n            >>>",
            "call enqueue_frame(fml:scid, fml:f, fml:e, false)",
            "assert 0:index <= fml:s",
            "{}",
            "<<<\n\t        unsigned __old_size = `fml:a`.size();\n\t        `fml:a`.resize(`fml:s`);\n\t        for (unsigned i = __old_size; i < (unsigned)`fml:s`; i++)\n\t            `fml:a`[i] = v;\n            >>>",
            "{assert quic_packet.arr.end(fml:a) = fml:s; assert 0:quic_packet.idx <= X & X < quic_packet.arr.end(old_fml:a) -> quic_packet.arr.value(fml:a,X) = quic_packet.arr.value(old_fml:a,X); assert quic_packet.arr.end(old_fml:a) <= X & X < fml:s -> quic_packet.arr.value(fml:a,X) = fml:v}",
            "{prot.hdr_long(fml:h) := bvand(0x80:byte,stream_data.value(fml:pkt,0)) ~= 0; prot.hdr_type(fml:h) := bfe[0][6](stream_data.value(fml:pkt,0)); if prot.hdr_long(fml:h) {local loc:dcil {loc:dcil := bfe[0][7](stream_data.value(fml:pkt,5)); call prot.dcid(fml:h) := prot.bytes_to_cid(stream_data.segment(fml:pkt,6,6 + loc:dcil)); local loc:scil {loc:scil := bfe[0][7](stream_data.value(fml:pkt,6 + loc:dcil)); call prot.scid(fml:h) := prot.bytes_to_cid(stream_data.segment(fml:pkt,7 + loc:dcil,7 + loc:dcil + loc:scil)); if fml:decrypt {client_initial_scil := loc:scil}; local loc:pos {loc:pos := 1:stream_pos + 4 + 1 + loc:dcil + 1 + loc:scil; local loc:tlen {loc:tlen := 0:stream_pos; local loc:retry_token_len {loc:retry_token_len := 0:stream_pos; if bvand(prot.hdr_type(fml:h),0x30) = 0x00 {call loc:tlen := prot.get_var_int_len(fml:pkt, loc:pos); call loc:retry_token_len := prot.get_var_int(fml:pkt, loc:pos, loc:tlen); prot.token_length(fml:h) := loc:retry_token_len; loc:pos := loc:pos + loc:tlen + loc:retry_token_len}\nelse {prot.token_length(fml:h) := 0:stream_pos}; local loc:0 {call loc:0 := prot.get_var_int_len(fml:pkt, loc:pos); local loc:len {loc:len := loc:0; call prot.payload_length(fml:h) := prot.get_var_int(fml:pkt, loc:pos, loc:len); prot.payload_length_pos(fml:h) := loc:pos; prot.pkt_num_pos(fml:h) := loc:pos + loc:len}}}}}}}}\nelse {if ~fml:decrypt {call prot.dcid(fml:h) := prot.bytes_to_cid(stream_data.segment(fml:pkt,1,1 + client_initial_scil)); prot.payload_length_pos(fml:h) := 1:stream_pos + client_initial_scil; prot.pkt_num_pos(fml:h) := 1:stream_pos + client_initial_scil}\nelse {call prot.dcid(fml:h) := prot.bytes_to_cid(stream_data.segment(fml:pkt,1,1 + 8)); prot.payload_length_pos(fml:h) := 1:stream_pos + 8; prot.pkt_num_pos(fml:h) := 1:stream_pos + 8}}}",
            "<<<\n\t        `fml:a`.push_back(`fml:v`);\n            >>>",
            "fml:src := (client.ep if (fml:host = endpoint_id.client) else (client_vn if version_negociated else client_alt))",
            "<<<\n\t        `fml:s` = (`idx`) `fml:a`.size();\n\t    >>>",
            "{}",
            "<<<\n\t        if (`fml:a`.size() > 0) {\n\t            a.pop_back();\n\t        }\n            >>>",
            "{}",
            "<<<\n\t        `fml:s` = (`forged_quic_packet_retry.idx`) `fml:a`.size();\n\t    >>>",
            "{if ~reset_frame_restransmitted(fml:id) {sending_ready(fml:id) := false; sending_dataSent(fml:id) := false; sending_send(fml:id) := false; sending_resetSent(fml:id) := true}; call lastest_stream_id_sender(fml:seq) := arr_streamid_s.append(lastest_stream_id_sender(fml:seq), fml:id); call lastest_pkt_num_sender := arr_pkt_num_s.append(lastest_pkt_num_sender, fml:seq)}",
            "{}",
            "{}",
            "<<<\n    res = c.val;\n    >>>",
            "{}",
            "{assert arr_streamid_s.end(fml:a) = fml:s; assert 0:idx_s <= X & X < arr_streamid_s.end(old_fml:a) -> arr_streamid_s.value(fml:a,X) = arr_streamid_s.value(old_fml:a,X); assert arr_streamid_s.end(old_fml:a) <= X & X < fml:s -> arr_streamid_s.value(fml:a,X) = fml:v}",
            "local loc:0 {call loc:0 := socket_endpoint(fml:host, fml:s); local loc:dst {loc:dst := loc:0; local loc:idx {loc:idx := prot.arr.begin(fml:pkts); while loc:idx < prot.arr.end(fml:pkts)\n{local loc:ppkt {loc:ppkt := prot.arr.value(fml:pkts,loc:idx); local loc:0 {call loc:0 := src_tls_id(loc:dst); local loc:tls_id {loc:tls_id := loc:0; local loc:header {loc:header := stream_data.value(loc:ppkt,0); local loc:hdr_type {loc:hdr_type := bfe[0][6](stream_data.value(loc:ppkt,0)); local loc:tt {loc:tt := bvand(loc:hdr_type,0x30); local loc:is_long {loc:is_long := bvand(0x80:byte,loc:header) ~= 0; local loc:version {loc:version := stream_data.segment(loc:ppkt,1,1 + 4); local loc:0 {call loc:0 := bytes_to_version(loc:version); local loc:bversion {loc:bversion := loc:0; local loc:ptype {loc:ptype := bvand(0x30:byte,loc:header); call loc:idx := prot.idx.next(loc:idx)}}}}}}}}}}}}}}}",
            "assert quic_packet_0rtt.arr.end(fml:a) = fml:s & quic_packet_0rtt.arr.value(fml:a,X) = fml:y",
            "assert versions.end(fml:a) = fml:s & versions.value(fml:a,X) = fml:y",
            "{}",
            "assert forged_protected_quic_packet.arr.end(fml:a) = 0",
            "fml:y := fml:x - 1",
            "if _generating {assert fml:scid = the_cid; assert frame.stop_sending.id(fml:f) = 4}",
            "{}",
            "<<<\n                for (unsigned i = 0; i < `fml:a`.size()/2; i++) {\n                    std::swap(`fml:a`[i],`fml:a`[`fml:a`.size()-i-1]);\n                }\n            >>>",
            "assert fml:s = vector[transport_parameter].end(fml:a)",
            "{}",
            "<<<\n\t        `fml:s` = (`idx_s`) `fml:a`.size();\n\t    >>>",
            "{assert connected(fml:dcid) & connected_to(fml:dcid) = fml:scid; assert fml:e = quic_packet_type.one_rtt & established_1rtt_keys(fml:scid); assert num_queued_frames(fml:scid) > 0 -> fml:e = queued_level(fml:scid); if ~max_data_set(fml:scid) | frame.max_data.pos(fml:f) > max_data_val(fml:scid) {max_data_set(fml:scid) := true; max_data_val(fml:scid) := frame.max_data.pos(fml:f)}}",
            "<<<\n                for (unsigned i = 0; i < `fml:a`.size()/2; i++) {\n                    std::swap(`fml:a`[i],`fml:a`[`fml:a`.size()-i-1]);\n                }\n            >>>",
            "assert 0:quic_packet_coal_0rtt.idx <= fml:x & fml:x < quic_packet_coal_0rtt.retired_cids.end(fml:a)",
            "<<<\n\t        `fml:a`.resize(`fml:s`);\n\t        for (unsigned i = 0; i < `fml:s`; i++)\n\t            `fml:a`[i] = y;\n\t    >>>",
            "{assert fml:y < fml:x & (Y:forged_quic_packet_vn.idx < fml:x -> Y <= fml:y); assert forged_quic_packet_vn.idx.succ(fml:y,fml:x)}",
            "{}",
            "{}",
            "assert 0:quic_packet_retry.idx <= fml:x & fml:x < quic_packet_retry.arr.end(fml:a)",
            "{}",
            "{call show_tls_keys_established_event(fml:scid, fml:e); if fml:e = quic_packet_type.zero_rtt {established_0rtt_keys(fml:scid) := true}\nelse {if fml:e = quic_packet_type.handshake {established_handshake_keys(fml:scid) := true}\nelse {if fml:e = quic_packet_type.one_rtt {established_1rtt_keys(fml:scid) := true}}}}",
            "{}",
            "assert 0:jdx_s <= fml:s",
            "{}",
            "{}",
            "{assert forged_quic_packet_retry.retired_cids.end(fml:a) = forged_quic_packet_retry.retired_cids.end(old_fml:a); assert forged_quic_packet_retry.retired_cids.value(fml:a,X) = (fml:y if (X = fml:x) else forged_quic_packet_retry.retired_cids.value(old_fml:a,X))}",
            "{}",
            "local loc:diff {loc:diff := bfe[0][29](fml:pnum - fml:last); fml:pnum := fml:last + loc:diff; if loc:diff >= 0x20000000 {fml:pnum := fml:pnum - 0x40000000}}",
            "<<<        std::cerr << \"encrypt_aead start l \" << l << \"\\n\";\n        std::cerr << \"encrypt_aead start c \" << c << \"\\n\";\n\t    picotls_connection *s = `tls_api.upper.foo.cid_map`[c];\n        ptls_aead_context_t *aead = (ptls_aead_context_t *)(s->crypto_context[l].aead_encrypt);\n        std::cerr << \"encrypt_aead aead \" << aead << \"\\n\";\n        uint32_t checksum_length = aead->algo->tag_size;\n        std::vector<uint8_t> bytes;\n        bytes.resize(ad.size());\n        std::copy(ad.begin(),ad.end(),bytes.begin());\n        std::vector<uint8_t> input, output;\n        input.resize(clear.size());\n        std::copy(clear.begin(),clear.end(),input.begin());\n        output.resize(clear.size() + checksum_length);\n        std::cerr << \"encrypt_aead encrypted  1\" << \"\\n\";\n        size_t encrypted = ptls_aead_encrypt(aead,\n          &output[0], &input[0], input.size(), seq,\n          &bytes[0], bytes.size());\n        std::cerr << \"encrypt_aead encrypted \" << encrypted << \"\\n\";\n        cipher.resize(output.size());\n        std::copy(output.begin(),output.end(),cipher.begin());\n        std::cerr << \"encrypt_aead finish \" << \"\\n\";\n        >>>",
            "server.tls_id := fml:e",
            "client.ep := fml:e",
            "fml:y := fml:x + 1",
            "{sending_resetSent(fml:id) := false; sending_ready(fml:id) := true; sending_resetRecvd(fml:id) := true}",
            "{assert arr_streamid_r.end(fml:a) > arr_streamid_r.end(old_fml:a) & ~(arr_streamid_r.end(old_fml:a) < X & X < arr_streamid_r.end(fml:a)); assert 0:idx_r <= X & X < arr_streamid_r.end(old_fml:a) -> arr_streamid_r.value(fml:a,X) = arr_streamid_r.value(old_fml:a,X); assert arr_streamid_r.value(fml:a,arr_streamid_r.end(old_fml:a)) = fml:v}",
            "{}",
            "{}",
            "<<<\n    res.resize(len);\n    for (unsigned i = 0; i < len; i++) {\n        res[len-i-1] = 0xff & (c.val >> (i * 8));\n    }\n    >>>",
            "<<<\n\t    >>>",
            "{}",
            "{}",
            "{allowed_multiple_migration := true; version_negociated := false}",
            "assert 0:quic_packet_vn.idx <= fml:x & fml:x < quic_packet_vn.arr.end(fml:a)",
            "{}",
            "sock_attacker := sock_victim",
            "{}",
            "{}",
            "{}",
            "{assert connected(fml:dcid) & connected_to(fml:dcid) = fml:scid; assert fml:e = quic_packet_type.one_rtt & established_1rtt_keys(fml:scid); assert num_queued_frames(fml:scid) > 0 -> fml:e = queued_level(fml:scid); assert ~conn_closed(fml:scid); assert connected(fml:scid) & connected_to(fml:scid) = fml:dcid; assert stream_length(fml:dcid,frame.rst_stream.id(fml:f)) <= frame.rst_stream.final_offset(fml:f); assert stream_reset(fml:dcid,frame.rst_stream.id(fml:f)) | stream_finished(fml:dcid,frame.rst_stream.id(fml:f)) -> stream_length(fml:dcid,frame.rst_stream.id(fml:f)) = frame.rst_stream.final_offset(fml:f); stream_reset(fml:dcid,frame.rst_stream.id(fml:f)) := true; stream_length(fml:dcid,frame.rst_stream.id(fml:f)) := frame.rst_stream.final_offset(fml:f); local loc:0 {call loc:0 := stream_id_allowed(fml:dcid, frame.rst_stream.id(fml:f), fml:e); assert loc:0}}",
            "{}",
            "{cid_mapped(frame.new_connection_id.scid(fml:f)) := true; cid_to_aid(frame.new_connection_id.scid(fml:f)) := fml:scid; seqnum_to_cid(fml:scid,frame.new_connection_id.seq_num(fml:f)) := frame.new_connection_id.scid(fml:f); last_cid_seq(fml:scid) := frame.new_connection_id.seq_num(fml:f); count_newcid_frame(frame.new_connection_id.seq_num(fml:f),frame.new_connection_id.retire_prior_to(fml:f),frame.new_connection_id.length(fml:f),frame.new_connection_id.scid(fml:f),frame.new_connection_id.token(fml:f)) := count_newcid_frame(frame.new_connection_id.seq_num(fml:f),frame.new_connection_id.retire_prior_to(fml:f),frame.new_connection_id.length(fml:f),frame.new_connection_id.scid(fml:f),frame.new_connection_id.token(fml:f)) + 1; if count_newcid_frame(frame.new_connection_id.seq_num(fml:f),frame.new_connection_id.retire_prior_to(fml:f),frame.new_connection_id.length(fml:f),frame.new_connection_id.scid(fml:f),frame.new_connection_id.token(fml:f)) = 1 {num_conn(fml:dcid) := num_conn(fml:dcid) + 1; local loc:tp {loc:tp := trans_params(fml:dcid); if ~_generating & active_connection_id_limit.is_set(loc:tp) {local loc:0 {call loc:0 := acti_coid_check(fml:dcid, num_conn(fml:dcid)); assert loc:0}}}}; if frame.new_connection_id.retire_prior_to(fml:f) > max_rtp_num(fml:scid) {max_rtp_num(fml:scid) := frame.new_connection_id.retire_prior_to(fml:f)}; if frame.new_connection_id.seq_num(fml:f) > max_seq_num(fml:scid) {max_seq_num(fml:scid) := frame.new_connection_id.seq_num(fml:f)}; call enqueue_frame(fml:scid, fml:f, fml:e, true)}",
            "{assert versions_bv.end(fml:a) = versions_bv.end(old_fml:a); assert versions_bv.value(fml:a,X) = (fml:y if (X = fml:x) else versions_bv.value(old_fml:a,X))}",
            "assert vector[tls.psk_identity].value(fml:a,fml:x) = fml:y",
            "<<<\n                if ((`prot.idx`)`fml:a`.size() > 0)\n                    `fml:res` = `fml:a`.back();\n            >>>",
            "{assert http_request_file.pending(fml:c); http_request_file.pending(fml:c) := false}",
            "if _generating {assert fml:scid = the_cid}\nelse {assert is_no_error; call _finalize}",
            "<<<\n    val.val = 0;\n    for (unsigned i = 0; i < bytes.size(); i++)\n        val.val = (val.val << 8) + bytes[i];\n    >>>",
            "{assert tls_hand_extensions.end(fml:a) = fml:s; assert 0:tls_hand_extensions.domain <= X & X < tls_hand_extensions.end(old_fml:a) -> tls_hand_extensions.value(fml:a,X) = tls_hand_extensions.value(old_fml:a,X); assert tls_hand_extensions.end(old_fml:a) <= X & X < fml:s -> tls_hand_extensions.value(fml:a,X) = fml:v}",
            "<<<\n\t    std::vector<char> buf(y.size());\n\t    std::copy(y.begin(),y.end(),buf.begin());\n\t    `quic_deser` des(buf);\n\t    __deser(des,x);\n\t    >>>",
            "{}",
            "assert 0:vector[transport_parameter].domain <= fml:x & fml:x < vector[transport_parameter].end(fml:a)",
            "<<<\n                for (unsigned i = 0; i < `fml:b`.size(); i++)\n\t            `fml:a`.push_back(`fml:b`[i]);\n            >>>",
            "{}",
            "assert ip_endpoints.end(fml:a) = 0",
            "assert 0:forged_quic_packet_retry.idx <= fml:x & fml:x < forged_quic_packet_retry.retired_cids.end(fml:a)",
            "{assert versions.end(fml:a) = fml:s; assert 0:index <= X & X < versions.end(old_fml:a) -> versions.value(fml:a,X) = versions.value(old_fml:a,X); assert versions.end(old_fml:a) <= X & X < fml:s -> versions.value(fml:a,X) = fml:v}",
            "<<<\n\t        unsigned __old_size = `fml:a`.size();\n\t        `fml:a`.resize(`fml:s`);\n\t        for (unsigned i = __old_size; i < (unsigned)`fml:s`; i++)\n\t            `fml:a`[i] = v;\n            >>>",
            "fml:y := fml:x - 1",
            "<<<\n\t        `fml:a`.push_back(`fml:v`);\n            >>>",
            "local loc:0 {call loc:0 := prot.arr.empty; local loc:pkts_mim {loc:pkts_mim := loc:0; call loc:pkts_mim := prot.arr.append(loc:pkts_mim, fml:ppkt); local loc:0 {call loc:0 := endpoint_to_socket(fml:src); call net.send(endpoint_id.mim, loc:0, fml:dst, loc:pkts_mim)}}}",
            "<<<\n                if ((`index`)`fml:a`.size() > 0)\n                    `fml:res` = `fml:a`.back();\n            >>>",
            "{assert vector[tls.psk_identity].end(fml:a) = vector[tls.psk_identity].end(old_fml:a); assert vector[tls.psk_identity].value(fml:a,X) = (fml:y if (X = fml:x) else vector[tls.psk_identity].value(old_fml:a,X))}",
            "<<<\n\t        `fml:a`.push_back(`fml:v`);\n            >>>",
            "{assert quic_packet_retry.retired_cids.end(fml:a) > quic_packet_retry.retired_cids.end(old_fml:a) & ~(quic_packet_retry.retired_cids.end(old_fml:a) < X & X < quic_packet_retry.retired_cids.end(fml:a)); assert 0:quic_packet_retry.idx <= X & X < quic_packet_retry.retired_cids.end(old_fml:a) -> quic_packet_retry.retired_cids.value(fml:a,X) = quic_packet_retry.retired_cids.value(old_fml:a,X); assert quic_packet_retry.retired_cids.value(fml:a,quic_packet_retry.retired_cids.end(old_fml:a)) = fml:v}",
            "fml:y := fml:x + 1",
            "<<<\n\t    `quic_ser_retry` ser;\n\t    __ser(ser,x);\n\t    y.resize(ser.res.size());\n\t    for (unsigned i = 0; i < ser.res.size(); i++)\n\t        y[i] = (unsigned char) ser.res[i];\n//\t    std::copy(ser.res.begin(),ser.res.end(),y.begin());\n\t    >>>",
            "<<<\n\t        if (`fml:a`.size() > 0) {\n\t            a.pop_back();\n\t        }\n            >>>",
            "{}",
            "{}",
            "<<<        const char * session_file = getenv(\"active_connection_id_limit\");\n        FILE *fp;\n        if(session_file != NULL) {\n            fp = fopen(session_file,\"w\");\n            fprintf(fp, \"%llu\", i);\n            fclose(fp);\n        }\n\n        >>>",
            "<<<\n\t        unsigned __old_size = `fml:a`.size();\n\t        `fml:a`.resize(`fml:s`);\n\t        for (unsigned i = __old_size; i < (unsigned)`fml:s`; i++)\n\t            `fml:a`[i] = v;\n            >>>",
            "{}",
            "assert 0:stream_pos <= fml:s",
            "<<<\n                for (unsigned i = 0; i < `fml:b`.size(); i++)\n\t            `fml:a`.push_back(`fml:b`[i]);\n            >>>",
            "{}",
            "{}",
            "assert vector[tls.cipher_suite].value(fml:a,fml:x) = fml:y",
            "local loc:cdx {loc:cdx := 0:clients.client.idx; local loc:ti {loc:ti := 0:tls_api.id; while loc:cdx < 2\n{clients.client.tls_id(clients.client.arr.value(clients.clients,loc:cdx)) := loc:ti; call loc:cdx := clients.client.idx.next(loc:cdx); loc:ti := loc:ti + 1}}}",
            "<<<\n\t        `fml:s` = (`vector[tls.psk_identity].domain`) `fml:a`.size();\n\t    >>>",
            "<<<\n\t        `fml:s` = (`vector[tls.extension].domain`) `fml:a`.size();\n\t    >>>",
            "current_stream := 4:stream_id",
            "{}",
            "fml:dst := (client.ep if (is_mim_standalone | fml:src = mim_server_target.ep) else server.ep)",
            "{}",
            "{}",
            "servers.server.tls_id(servers.server.arr.value(servers.servers,fml:n)) := fml:e",
            "<<<\n\t        if (0 <= `fml:x` && `fml:x` < (`replayed_quic_packet_0rtt.idx`)`fml:a`.size()) \n\t            `fml:a`[`fml:x`] = `fml:y`;\n\t    >>>",
            "<<<\n\t        if (0 <= `fml:x` && `fml:x` < (`forged_quic_packet.idx`)`fml:a`.size()) \n\t            `fml:a`[`fml:x`] = `fml:y`;\n\t    >>>",
            "{tls_api.upper.open(C) := false; tls_api.upper.established(C) := false}",
            "{assert fml:x < fml:y & (fml:x < Y -> fml:y <= Y); assert quic_packet_0rtt.idx.succ(fml:x,fml:y)}",
            "mim_client_target.ep := fml:e",
            "<<<\n\t        if (0 <= `fml:x` && `fml:x` < (`forged_protected_quic_packet.idx`)`fml:a`.size()) \n\t            `fml:y` = `fml:a`[`fml:x`];\n\t    >>>",
            "{assert is_no_error; assert conn_total_data(the_cid) > 0}",
            "<<<\n\t        unsigned __old_size = `fml:a`.size();\n\t        `fml:a`.resize(`fml:s`);\n\t        for (unsigned i = __old_size; i < (unsigned)`fml:s`; i++)\n\t            `fml:a`[i] = v;\n            >>>",
            "<<<\n\t        if (0 <= `fml:x` && `fml:x` < (`jdx_s`)`fml:a`.size()) \n\t            `fml:a`[`fml:x`] = `fml:y`;\n\t    >>>",
            "{active_connection_id_limit.is_set(fml:s) := true; active_connection_id_limit.value(fml:s) := fml:p}",
            "<<<\n                for (unsigned i = 0; i < `fml:b`.size(); i++)\n\t            `fml:a`.push_back(`fml:b`[i]);\n            >>>",
            "{}",
            "{assert versions_bv.end(fml:a) > versions_bv.end(old_fml:a) & ~(versions_bv.end(old_fml:a) < X & X < versions_bv.end(fml:a)); assert 0:index <= X & X < versions_bv.end(old_fml:a) -> versions_bv.value(fml:a,X) = versions_bv.value(old_fml:a,X); assert versions_bv.value(fml:a,versions_bv.end(old_fml:a)) = fml:v}",
            "<<<\n                for (unsigned i = 0; i < `fml:b`.size(); i++)\n\t            `fml:a`.push_back(`fml:b`[i]);\n            >>>",
            "<<<\n\t        if (0 <= `fml:x` && `fml:x` < (`frame.ack_ecn.range.idx`)`fml:a`.size()) \n\t            `fml:y` = `fml:a`[`fml:x`];\n\t    >>>",
            "<<<\n\t        `fml:a`.push_back(`fml:v`);\n            >>>",
            "{}",
            "<<<\n\t        if (0 <= `fml:x` && `fml:x` < (`index`)`fml:a`.size()) \n\t            `fml:a`[`fml:x`] = `fml:y`;\n\t    >>>",
            "{}",
            "assert quic_packet_0rtt.retired_cids.end(fml:a) = 0",
            "{}",
            "{}",
            "{}",
            "<<<\n\t        `fml:s` = (`forged_quic_packet.idx`) `fml:a`.size();\n\t    >>>",
            "assert vector[tls.extension].value(fml:a,fml:x) = fml:y",
            "local loc:idx {loc:idx := vector[tls.extension].begin(fml:exts); while loc:idx < vector[tls.extension].end(fml:exts)\n{local loc:ext {loc:ext := vector[tls.extension].value(fml:exts,loc:idx); if some loc:tps. *>(loc:ext,loc:tps) {call handle_client_transport_parameters(fml:src, fml:dst, fml:scid, loc:tps, fml:is_client_hello); trans_params_set(fml:scid) := true}; call loc:idx := vector[tls.extension].domain.next(loc:idx)}}}",
            "{}",
            "assert vector[transport_parameter].value(fml:a,fml:x) = fml:y",
            "<<<\n                for (unsigned i = 0; i < `fml:a`.size()/2; i++) {\n                    std::swap(`fml:a`[i],`fml:a`[`fml:a`.size()-i-1]);\n                }\n            >>>",
            "assert fml:s = replayed_quic_packet_0rtt.arr.end(fml:a)",
            "{assert vector[tls.handshake].end(fml:a) > vector[tls.handshake].end(old_fml:a) & ~(vector[tls.handshake].end(old_fml:a) < X & X < vector[tls.handshake].end(fml:a)); assert 0:vector[tls.handshake].domain <= X & X < vector[tls.handshake].end(old_fml:a) -> vector[tls.handshake].value(fml:a,X) = vector[tls.handshake].value(old_fml:a,X); assert vector[tls.handshake].value(fml:a,vector[tls.handshake].end(old_fml:a)) = fml:v}",
            "victim_agent.tls_id := fml:e",
            "{assert frame.arr.end(fml:a) = frame.arr.end(old_fml:a); assert frame.arr.value(fml:a,X) = (fml:y if (X = fml:x) else frame.arr.value(old_fml:a,X))}",
            "{client_server.tls_id_server := fml:ee; client_server.tls_id_client := fml:e}",
            "{}",
            "{}",
            "assert quic_packet_coal_0rtt.arr.end(fml:a) = 0",
            "{}",
            "{}",
            "{}",
            "{}",
            "<<<\n\t        if (0 <= `fml:x` && `fml:x` < (`forged_protected_quic_packet.idx`)`fml:a`.size()) \n\t            `fml:a`[`fml:x`] = `fml:y`;\n\t    >>>",
            "<<<\n\t        if (0 <= `fml:x` && `fml:x` < (`index`)`fml:a`.size()) \n\t            `fml:y` = `fml:a`[`fml:x`];\n\t    >>>",
            "<<<\n\t        unsigned __old_size = `fml:a`.size();\n\t        `fml:a`.resize(`fml:s`);\n\t        for (unsigned i = __old_size; i < (unsigned)`fml:s`; i++)\n\t            `fml:a`[i] = v;\n            >>>",
            "if _generating {local loc:0 {call loc:0 := pkt_serdes_0rtt_coal.to_bytes(fml:pkt); local loc:spkt {loc:spkt := loc:0; local loc:0 {call loc:0 := prot.arr.empty; local loc:pkts {loc:pkts := loc:0; local loc:0 {call loc:0 := src_tls_id(fml:src); local loc:tls_id {loc:tls_id := loc:0; local loc:0 {call loc:0 := reference_pkt_num(loc:spkt, false); local loc:rnum {loc:rnum := loc:0; local loc:0 {call loc:0 := prot.encrypt_rtt(loc:tls_id, loc:rnum, loc:spkt); local loc:ppkt {loc:ppkt := loc:0; call loc:pkts := prot.arr.append(loc:pkts, loc:ppkt); local loc:0,loc:1 {call loc:0 := endpoint_to_pid(fml:src); call loc:1 := endpoint_to_socket(fml:src); call net.send(loc:0, loc:1, fml:dst, loc:pkts)}; zero_rtt_sent := true}}}}}}}}}}}",
            "{}",
            "{}",
            "{}",
            "<<<\n\t        `fml:a`.resize(`fml:s`);\n\t        for (unsigned i = 0; i < `fml:s`; i++)\n\t            `fml:a`[i] = y;\n\t    >>>",
            "{}",
            "server.ep := fml:e",
            "tls_api.upper.open(fml:c) := true",
            "<<<\n\t        if (0 <= `fml:x` && `fml:x` < (`stream_pos`)`fml:a`.size()) \n\t            `fml:a`[`fml:x`] = `fml:y`;\n\t    >>>",
            "call enqueue_frame(fml:scid, fml:f, fml:e, false)",
            "{}",
            "{}",
            "<<<\n\t        if (`fml:a`.size() > 0) {\n\t            a.pop_back();\n\t        }\n            >>>",
            "{}",
            "{}",
            "{assert fml:y < fml:x & (Y:forged_protected_quic_packet.idx < fml:x -> Y <= fml:y); assert forged_protected_quic_packet.idx.succ(fml:y,fml:x)}",
            "assert vector[transport_parameter].end(fml:a) = fml:s & vector[transport_parameter].value(fml:a,X) = fml:y",
            "<<<\n            const char * session_file = getenv(\"SAVED_PACKET\");\n            std::cerr << \"SAVED_PACKET 5b \" << ppkt.size() << \"\\n\";\n            FILE *fp;\n            if(session_file != NULL) {\n                fp = fopen(session_file,\"w\");\n                for(int j = 0; j < ppkt.size(); j++) {\n                    fprintf(fp, \"%02x\",  ppkt[j]); //length field\n                }\n                fclose(fp);\n            }        \n            >>>",
            "<<<\n\t    >>>",
            "{}",
            "{}",
            "fml:y := fml:x + 1",
            "{}",
            "{}",
            "<<<\n\t        unsigned __old_size = `fml:a`.size();\n\t        `fml:a`.resize(`fml:s`);\n\t        for (unsigned i = __old_size; i < (unsigned)`fml:s`; i++)\n\t            `fml:a`[i] = v;\n            >>>",
            "<<<\n\t    >>>",
            "assert 0:tls.handshakes.domain <= fml:s",
            "{}",
            "assert replayed_quic_packet_0rtt.retired_cids.value(fml:a,fml:x) = fml:y",
            "{assert quic_packet_retry.arr.end(fml:a) = fml:s; assert 0:quic_packet_retry.idx <= X & X < quic_packet_retry.arr.end(old_fml:a) -> quic_packet_retry.arr.value(fml:a,X) = quic_packet_retry.arr.value(old_fml:a,X); assert quic_packet_retry.arr.end(old_fml:a) <= X & X < fml:s -> quic_packet_retry.arr.value(fml:a,X) = fml:v}",
            "{assert tls_api.upper.open(fml:c) & ~tls_api.upper.established(fml:c); tls_api.upper.established(fml:c) := true}",
            "{}",
            "<<<\n\t        if (0 <= `fml:x` && `fml:x` < (`quic_packet_coal_0rtt.idx`)`fml:a`.size()) \n\t            `fml:a`[`fml:x`] = `fml:y`;\n\t    >>>",
            "{}",
            "{}",
            "assert forged_protected_quic_packet.arr.end(fml:a) = fml:s & forged_protected_quic_packet.arr.value(fml:a,X) = fml:y",
            "<<<\n\t        `fml:a`.resize(`fml:s`);\n\t        for (unsigned i = 0; i < `fml:s`; i++)\n\t            `fml:a`[i] = y;\n\t    >>>",
            "assert quic_packet_vn.arr.end(fml:a) = 0",
            "<<<\n\t        if (0 <= `fml:x` && `fml:x` < (`vector[tls.extension].domain`)`fml:a`.size()) \n\t            `fml:a`[`fml:x`] = `fml:y`;\n\t    >>>",
            "{assert fml:x < fml:y & (fml:x < Y -> fml:y <= Y); assert stream_pos.succ(fml:x,fml:y)}",
            "{}",
            "{}",
            "{}",
            "assert versions.value(fml:a,fml:x) = fml:y",
            "{initial_max_stream_data_bidi_local.is_set(fml:s) := true; initial_max_stream_data_bidi_local.value(fml:s) := fml:p}",
            "fml:y := fml:x - 1",
            "{}",
            "assert versions.end(fml:a) = 0",
            "{}",
            "<<<\n    val = 0;\n    for (unsigned i = 0; i < bytes.size(); i++)\n        val = (val << 8) + bytes[i];\n    >>>",
            "{}",
            "{}",
            "fml:y := fml:x - 1",
            "{assert quic_packet.arr.end(fml:a) > quic_packet.arr.end(old_fml:a) & ~(quic_packet.arr.end(old_fml:a) < X & X < quic_packet.arr.end(fml:a)); assert 0:quic_packet.idx <= X & X < quic_packet.arr.end(old_fml:a) -> quic_packet.arr.value(fml:a,X) = quic_packet.arr.value(old_fml:a,X); assert quic_packet.arr.value(fml:a,quic_packet.arr.end(old_fml:a)) = fml:v}",
            "<<<\n\t        `fml:s` = (`index`) `fml:a`.size();\n\t    >>>",
            "{}",
            "{}",
            "assert forged_protected_quic_packet.retired_cids.value(fml:a,fml:x) = fml:y",
            "assert 0:frame.idx <= fml:x & fml:x < frame.arr.end(fml:a)",
            "{}",
            "assert 0:vector[tls.handshake].domain <= fml:x & fml:x < vector[tls.handshake].end(fml:a)",
            "{}",
            "<<<\n\t        if (0 <= `fml:x` && `fml:x` < (`quic_packet_coal_0rtt.idx`)`fml:a`.size()) \n\t            `fml:a`[`fml:x`] = `fml:y`;\n\t    >>>",
            "{}",
            "{assert arr_streamid_r.end(fml:a) = fml:s; assert 0:idx_r <= X & X < arr_streamid_r.end(old_fml:a) -> arr_streamid_r.value(fml:a,X) = arr_streamid_r.value(old_fml:a,X); assert arr_streamid_r.end(old_fml:a) <= X & X < fml:s -> arr_streamid_r.value(fml:a,X) = fml:v}",
            "assert 0:vector[tls.psk_identity].domain <= fml:x & fml:x < vector[tls.psk_identity].end(fml:a)",
            "{}",
            "assert vector[tls.handshake].end(fml:a) = fml:s & vector[tls.handshake].value(fml:a,X) = fml:y",
            "assert 0:idx_s <= fml:x & fml:x < arr_streamid_s.end(fml:a)",
            "{call queued_frames_rtt(fml:scid) := frame.arr.append(queued_frames_rtt(fml:scid), fml:f); num_queued_frames_rtt(fml:scid) := frame.arr.end(queued_frames_rtt(fml:scid)); queued_level_rtt(fml:scid) := fml:e; if ~(exists V. *>(fml:f,V:frame.ack)) {queued_non_ack(fml:scid) := true}}",
            "<<<\n\t        if (0 <= `fml:x` && `fml:x` < (`tls.handshakes.domain`)`fml:a`.size()) \n\t            `fml:a`[`fml:x`] = `fml:y`;\n\t    >>>",
            "{}",
            "{}",
            "<<<\n\t        `fml:a`.resize(`fml:s`);\n\t        for (unsigned i = 0; i < `fml:s`; i++)\n\t            `fml:a`[i] = y;\n\t    >>>",
            "{}",
            "<<<\n\t        unsigned __old_size = `fml:a`.size();\n\t        `fml:a`.resize(`fml:s`);\n\t        for (unsigned i = __old_size; i < (unsigned)`fml:s`; i++)\n\t            `fml:a`[i] = v;\n            >>>",
            "<<<\n\t        `fml:s` = (`vector[tls.cipher_suite].domain`) `fml:a`.size();\n\t    >>>",
            "call show_tls_send_event(fml:src, fml:dst, fml:scid, fml:dcid, fml:data, fml:pos, fml:e, fml:tls_id)",
            "{assert bytes.end(fml:a) = bytes.end(old_fml:a); assert bytes.value(fml:a,X) = (fml:y if (X = fml:x) else bytes.value(old_fml:a,X))}",
            "{assert tls_hand_extensions.end(fml:a) = tls_hand_extensions.end(old_fml:a); assert tls_hand_extensions.value(fml:a,X) = (fml:y if (X = fml:x) else tls_hand_extensions.value(old_fml:a,X))}",
            "{assert connected(fml:dcid) & connected_to(fml:dcid) = fml:scid; if _generating {assert fml:e ~= quic_packet_type.initial & fml:e ~= quic_packet_type.handshake}; assert fml:e = quic_packet_type.handshake -> established_handshake_keys(fml:scid); assert fml:e = quic_packet_type.one_rtt -> established_1rtt_keys(fml:scid); assert num_queued_frames(fml:scid) > 0 -> fml:e = queued_level(fml:scid); local loc:idx {loc:idx := 0:frame.ack_ecn.range.idx; local loc:last {loc:last := frame.ack_ecn.largest_acked(fml:f); if max_acked(fml:dcid,fml:e) < loc:last {max_acked(fml:dcid,fml:e) := loc:last}; assert frame.ack_ecn.range.arr.end(frame.ack_ecn.ack_ranges(fml:f)) > 0; local loc:some_new_ack {loc:some_new_ack := false; while loc:idx < frame.ack_ecn.range.arr.end(frame.ack_ecn.ack_ranges(fml:f))\n{local loc:ack_range {loc:ack_range := frame.ack_ecn.range.arr.value(frame.ack_ecn.ack_ranges(fml:f),loc:idx); assert loc:idx > 0 -> frame.ack_ecn.range.gap(loc:ack_range) < loc:last - 1; local loc:upper {loc:upper := loc:last - (frame.ack_ecn.range.gap(loc:ack_range) + 2 if (loc:idx > 0) else 0); assert frame.ack_ecn.range.ranges(loc:ack_range) <= loc:upper; loc:last := loc:upper - frame.ack_ecn.range.ranges(loc:ack_range); local loc:jdx {loc:jdx := loc:last; while loc:jdx <= loc:upper\n{assert sent_pkt(fml:dcid,fml:e,loc:jdx); if pkt_has_close(fml:dcid,fml:e,loc:jdx) {conn_draining(fml:scid) := true}; if ~acked_pkt(fml:dcid,fml:e,loc:jdx) {loc:some_new_ack := true}; acked_pkt(fml:dcid,fml:e,loc:jdx) := true; loc:jdx := loc:jdx + 1}; call loc:idx := frame.ack_ecn.range.idx.next(loc:idx)}}}}; if _generating {assert loc:some_new_ack}}}}}",
            "{}",
            "assert fml:s = forged_quic_packet_vn.arr.end(fml:a)",
            "{assert vector[tls.extension].end(fml:a) = fml:s; assert 0:vector[tls.extension].domain <= X & X < vector[tls.extension].end(old_fml:a) -> vector[tls.extension].value(fml:a,X) = vector[tls.extension].value(old_fml:a,X); assert vector[tls.extension].end(old_fml:a) <= X & X < fml:s -> vector[tls.extension].value(fml:a,X) = fml:v}",
            "fml:y := fml:x + 1",
            "<<<\n                if ((`jdx_s`)`fml:a`.size() > 0)\n                    `fml:res` = `fml:a`.back();\n            >>>",
            "local loc:cdx {loc:cdx := 0:clients.client.idx; local loc:last_cid {loc:last_cid := the_cid; local loc:idx_port {loc:idx_port := 0:ip.port; while loc:cdx < 2\n{local loc:cc {clients.client.enc_level(loc:cc) := quic_packet_type.initial; ip.endpoint.protocol(clients.client.ep(loc:cc)) := ip.udp; ip.endpoint.addr(clients.client.ep(loc:cc)) := client_addr; ip.endpoint.port(clients.client.ep(loc:cc)) := client_port + 2 * (loc:idx_port + 1); call clients.clients := clients.client.arr.append(clients.clients, loc:cc); call the_cids := cids.append(the_cids, loc:last_cid); call loc:last_cid := double_cid(loc:last_cid); call loc:cdx := clients.client.idx.next(loc:cdx); loc:idx_port := loc:idx_port + 1}}}}}",
            "assert 0:quic_packet_vn.idx <= fml:x & fml:x < quic_packet_vn.arr.end(fml:a)",
            "{}",
            "<<<\n\t        `fml:a`.push_back(`fml:v`);\n            >>>",
            "<<<\n\t        if (`fml:a`.size() > 0) {\n\t            a.pop_back();\n\t        }\n            >>>",
            "assert fml:s = quic_packet_retry.retired_cids.end(fml:a)",
            "{}",
            "{}",
            "{loss_bits.is_set(fml:s) := true; loss_bits.value(fml:s) := fml:p}",
            "{}",
            "assert 0:quic_packet_coal_0rtt.idx <= fml:x & fml:x < quic_packet_coal_0rtt.arr.end(fml:a)",
            "{}",
            "assert 0:forged_quic_packet_vn.idx <= fml:s",
            "assert 0:servers.server.idx <= fml:x & fml:x < servers.server.arr.end(fml:a)",
            "{}",
            "{assert fml:y < fml:x & (Y:servers.server.idx < fml:x -> Y <= fml:y); assert servers.server.idx.succ(fml:y,fml:x)}",
            "victim_agent.ep := fml:e",
            "{}",
            "{}",
            "{}",
            "{}",
            "{}",
            "{}",
            "<<<\n\t    >>>",
            "{}",
            "nonce_cid(the_cid) := server_cid",
            "assert quic_packet_vn.arr.end(fml:a) = fml:s & quic_packet_vn.arr.value(fml:a,X) = fml:y",
            "<<<\n\t        `fml:a`.resize(`fml:s`);\n\t        for (unsigned i = 0; i < `fml:s`; i++)\n\t            `fml:a`[i] = y;\n\t    >>>",
            "assert fml:s = forged_quic_packet_retry.arr.end(fml:a)",
            "{}",
            "<<<\n\t        `fml:s` = (`clients.client.idx`) `fml:a`.size();\n\t    >>>",
            "<<<\n                /**\n                    Not working in localhost but should be ok in private adress TODO\n                        -> To simulate that we set: sock_mim_client = sock (from server) to simulate NAT\n                */\n                // -o lo\n                std::string command = \"sudo iptables -t nat -A POSTROUTING -d 10.0.3.1 -p udp --sport 4439:4439 -j SNAT --to-source 10.0.1.1:\" + std::to_string(dst); //  # error in localhost\n                int n = command.length();\n\n                // declaring character array\n                char command_array[n + 1];\n            \n                // copying the contents of the\n                // string to char array\n                strcpy(command_array, command.c_str());\n\n                int cr = system(command_array);\n            >>>",
            "<<<\n\t        if (`fml:a`.size() > 0) {\n\t            a.pop_back();\n\t        }\n            >>>",
            "{}",
            "{}",
            "{}",
            "{assert ip_endpoints.end(fml:a) = ip_endpoints.end(old_fml:a); assert ip_endpoints.value(fml:a,X) = (fml:y if (X = fml:x) else ip_endpoints.value(old_fml:a,X))}",
            "{}",
            "assert 0:frame.idx < fml:x",
            "{assert fml:y < fml:x & (Y:vector[tls.cipher_suite].domain < fml:x -> Y <= fml:y); assert vector[tls.cipher_suite].domain.succ(fml:y,fml:x)}",
            "{}",
            "<<<\n                for (unsigned i = 0; i < `fml:b`.size(); i++)\n\t            `fml:a`.push_back(`fml:b`[i]);\n            >>>",
            "assert 0:replayed_quic_packet_0rtt.idx <= fml:x & fml:x < replayed_quic_packet_0rtt.arr.end(fml:a)",
            "local loc:0 {call loc:0 := prot.get_header_info(fml:pkt, false); local loc:h {loc:h := loc:0; local loc:pkt_rtt {loc:pkt_rtt := stream_data.segment(fml:pkt,prot.payload_length(loc:h),stream_data.end(fml:pkt)); local loc:pkt_init {loc:pkt_init := stream_data.segment(fml:pkt,0,prot.payload_length(loc:h)); local loc:0 {call loc:0 := prot.get_header_info(loc:pkt_rtt, false); local loc:h_rtt {loc:h_rtt := loc:0; local loc:0 {call loc:0 := prot.get_level(loc:pkt_init); local loc:level {loc:level := loc:0; local loc:0 {call loc:0 := tls_api.upper.iv_size(fml:c, loc:level); local loc:sample_size {loc:sample_size := loc:0; local loc:pnum_pos {loc:pnum_pos := prot.pkt_num_pos(loc:h); local loc:0 {call loc:0 := prot.get_pnum_len(loc:pkt_init); local loc:pnum_len {loc:pnum_len := loc:0; local loc:hdr_len {loc:hdr_len := loc:pnum_pos + loc:pnum_len; if prot.hdr_long(loc:h) {local loc:0 {call loc:0 := prot.to_var_int_16(prot.payload_length(loc:h) - 10); local loc:new_len {loc:new_len := loc:0; call loc:pkt_init := stream_data.set(loc:pkt_init, loc:pnum_pos - 2, stream_data.value(loc:new_len,0)); call loc:pkt_init := stream_data.set(loc:pkt_init, loc:pnum_pos - 1, stream_data.value(loc:new_len,1))}}}; local loc:hdr {loc:hdr := stream_data.segment(loc:pkt_init,0,loc:pnum_pos); local loc:pnum {loc:pnum := stream_data.segment(loc:pkt_init,loc:pnum_pos,loc:hdr_len); local loc:pyld_i {loc:pyld_i := stream_data.segment(loc:pkt_init,loc:hdr_len,stream_data.end(fml:pkt)); local loc:auth {loc:auth := stream_data.segment(loc:pkt_init,0,loc:hdr_len); local loc:0 {call loc:0 := prot.get_pnum(loc:pnum, 0:stream_pos, loc:pnum_len); local loc:new_seq {loc:new_seq := loc:0; call loc:new_seq := prot.correct_pnum(fml:seq, loc:new_seq, loc:pnum_len); call loc:pyld_i := tls_api.upper.encrypt_aead(fml:c, loc:level, loc:pyld_i, loc:new_seq, loc:auth); local loc:pn_offset {loc:pn_offset := 0:stream_pos; if prot.hdr_long(loc:h) {loc:pn_offset := loc:hdr_len - loc:pnum_pos}\nelse {loc:pn_offset := 1:stream_pos + 4}; local loc:sample_pos {loc:sample_pos := 4:stream_pos - loc:pnum_len; local loc:new_pyld {loc:new_pyld := loc:pyld_i; if loc:sample_pos + loc:sample_size > stream_data.end(loc:pkt_init) {local loc:diff {loc:diff := (loc:sample_pos + loc:sample_size) - stream_data.end(loc:pyld_i); local loc:i {loc:i := 0:stream_pos; while loc:i < loc:diff\n{call loc:new_pyld := stream_data.append(loc:new_pyld, 0x00:byte); loc:i := loc:i + 1}; loc:pyld_i := loc:new_pyld}}}; local loc:sample {loc:sample := stream_data.segment(loc:pyld_i,loc:sample_pos,loc:sample_pos + loc:sample_size); local loc:0 {call loc:0 := stream_data.empty; local loc:mask {loc:mask := loc:0; local loc:0 {call loc:0 := stream_data.resize(loc:mask, 5:stream_pos, 0:byte); call loc:mask := tls_api.upper.encrypt_cipher(fml:c, loc:level, loc:0, loc:sample, false)}; local loc:byte0_mask {loc:byte0_mask := bvand(stream_data.value(loc:mask,0),(0x0f if prot.hdr_long(loc:h) else 0x1f)); local loc:0 {call loc:0 := prot.byte_xor(stream_data.value(loc:pkt_init,0), loc:byte0_mask); call loc:hdr := stream_data.set(loc:hdr, 0:stream_pos, loc:0)}; call loc:pnum := prot.stream_data_xor(stream_data.segment(loc:pkt_init,loc:pnum_pos,loc:pnum_pos + loc:pnum_len), stream_data.segment(loc:mask,1,1 + loc:pnum_len)); local loc:0 {call loc:0 := stream_data.extend(loc:hdr, loc:pnum); call loc:pkt_init := stream_data.extend(loc:0, loc:pyld_i)}; local loc:0 {call loc:0 := tls_api.upper.iv_size(fml:c, 1:tls_api.upper.level); local loc:sample_size_rtt {loc:sample_size_rtt := loc:0; local loc:pnum_pos_rtt {loc:pnum_pos_rtt := prot.pkt_num_pos(loc:h_rtt); local loc:0 {call loc:0 := prot.get_pnum_len_b(loc:pkt_rtt); local loc:pnum_len_rtt {loc:pnum_len_rtt := loc:0; local loc:hdr_len_rtt {loc:hdr_len_rtt := loc:pnum_pos_rtt + loc:pnum_len_rtt; if prot.hdr_long(loc:h_rtt) {local loc:0 {call loc:0 := prot.to_var_int_16(prot.payload_length(loc:h_rtt) + 16); local loc:new_len {loc:new_len := loc:0; call loc:pkt_rtt := stream_data.set(loc:pkt_rtt, loc:pnum_pos_rtt - 2, stream_data.value(loc:new_len,0)); call loc:pkt_rtt := stream_data.set(loc:pkt_rtt, loc:pnum_pos_rtt - 1, stream_data.value(loc:new_len,1))}}}; local loc:hdr_rtt {loc:hdr_rtt := stream_data.segment(loc:pkt_rtt,0,loc:pnum_pos_rtt); local loc:pnum_rtt {loc:pnum_rtt := stream_data.segment(loc:pkt_rtt,loc:pnum_pos_rtt,loc:hdr_len_rtt); local loc:pyld_rtt {loc:pyld_rtt := stream_data.segment(loc:pkt_rtt,loc:hdr_len_rtt,stream_data.end(loc:pkt_rtt)); local loc:auth_rtt {loc:auth_rtt := stream_data.segment(loc:pkt_rtt,0,loc:hdr_len_rtt); local loc:0 {call loc:0 := prot.get_pnum(loc:pnum_rtt, 0:stream_pos, loc:pnum_len_rtt); local loc:new_seq_rtt {loc:new_seq_rtt := loc:0; call loc:new_seq_rtt := prot.correct_pnum(fml:seq, loc:new_seq_rtt, loc:pnum_len_rtt); call loc:pyld_rtt := tls_api.upper.encrypt_aead(fml:c, 1:tls_api.upper.level, loc:pyld_rtt, loc:new_seq_rtt, loc:auth_rtt); local loc:pn_offset_rtt {loc:pn_offset_rtt := 0:stream_pos; if prot.hdr_long(loc:h_rtt) {loc:pn_offset_rtt := loc:hdr_len_rtt - loc:pnum_pos_rtt}\nelse {loc:pn_offset_rtt := 1:stream_pos + 4}; local loc:sample_pos_rtt {loc:sample_pos_rtt := 4:stream_pos - loc:pnum_len_rtt; local loc:new_pyld_rtt {loc:new_pyld_rtt := loc:pyld_rtt; if loc:sample_pos_rtt + loc:sample_size_rtt > stream_data.end(loc:pkt_rtt) {local loc:diff {loc:diff := (loc:sample_pos_rtt + loc:sample_size_rtt) - stream_data.end(loc:pyld_rtt); local loc:i {loc:i := 0:stream_pos; while loc:i < loc:diff\n{call loc:new_pyld_rtt := stream_data.append(loc:new_pyld_rtt, 0x00:byte); loc:i := loc:i + 1}; loc:pyld_rtt := loc:new_pyld_rtt}}}; local loc:sample_rtt {loc:sample_rtt := stream_data.segment(loc:pyld_rtt,loc:sample_pos_rtt,loc:sample_pos_rtt + loc:sample_size_rtt); local loc:0 {call loc:0 := stream_data.empty; local loc:mask_rtt {loc:mask_rtt := loc:0; local loc:0 {call loc:0 := stream_data.resize(loc:mask_rtt, 5:stream_pos, 0:byte); call loc:mask_rtt := tls_api.upper.encrypt_cipher(fml:c, 1:tls_api.upper.level, loc:0, loc:sample_rtt, false)}; local loc:byte0_mask_rtt {loc:byte0_mask_rtt := bvand(stream_data.value(loc:mask_rtt,0),(0x0f if prot.hdr_long(loc:h_rtt) else 0x1f)); local loc:0 {call loc:0 := prot.byte_xor(stream_data.value(loc:pkt_rtt,0), loc:byte0_mask_rtt); call loc:hdr_rtt := stream_data.set(loc:hdr_rtt, 0:stream_pos, loc:0)}; call loc:pnum_rtt := prot.stream_data_xor(stream_data.segment(loc:pkt_rtt,loc:pnum_pos_rtt,loc:pnum_pos_rtt + loc:pnum_len_rtt), stream_data.segment(loc:mask_rtt,1,1 + loc:pnum_len_rtt)); local loc:0 {call loc:0 := stream_data.extend(loc:hdr_rtt, loc:pnum_rtt); call loc:pkt_rtt := stream_data.extend(loc:0, loc:pyld_rtt)}; call fml:pkt := stream_data.extend(loc:pkt_init, loc:pkt_rtt)}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}",
            "{}",
            "{}",
            "local loc:dcid {loc:dcid := quic_packet_coal_0rtt.dst_cid(fml:pkt); local loc:0 {call loc:0 := quic_packet_coal_0rtt.long(fml:pkt); local loc:scid {loc:scid := (quic_packet_coal_0rtt.src_cid(fml:pkt) if loc:0 else connected_to(loc:dcid)); if cid_mapped(loc:dcid) {loc:dcid := cid_to_aid(loc:dcid)}; local loc:dcid_i {loc:dcid_i := quic_packet_coal_0rtt.dst_cid_i(fml:pkt); local loc:0 {call loc:0 := quic_packet_coal_0rtt.long(fml:pkt); local loc:scid_i {loc:scid_i := (quic_packet_coal_0rtt.src_cid_i(fml:pkt) if loc:0 else connected_to(loc:dcid_i)); if cid_mapped(loc:dcid_i) {loc:dcid_i := cid_to_aid(loc:dcid_i)}; last_pkt_num(loc:scid_i,quic_packet_coal_0rtt.ptype_i(fml:pkt)) := quic_packet_coal_0rtt.seq_num_i(fml:pkt); last_pkt_num(loc:scid,quic_packet_coal_0rtt.ptype(fml:pkt)) := quic_packet_coal_0rtt.seq_num(fml:pkt); if quic_packet_coal_0rtt.ptype(fml:pkt) = quic_packet_type.zero_rtt & ~_generating {conn_requested(fml:src,fml:dst,loc:scid) := false; conn_requested(fml:src,fml:dst,loc:dcid) := false; connected(loc:dcid) := false; connected(loc:scid) := false; conn_seen(loc:dcid) := false; conn_seen(loc:scid) := false; conn_seen(server_cid) := false; conn_seen(the_cid) := false; connected(the_cid) := false; connected(server_cid) := false; local loc:0 {call loc:0 := tls_extensions.empty; local loc:extns {loc:extns := loc:0; local loc:0 {call loc:0 := make_transport_parameters; call loc:extns := tls_extensions.append(loc:extns, loc:0)}; call tls_api.upper.create(0:tls_api.id, true, loc:extns); conn_requested(fml:src,fml:dst,the_cid) := true}}}; zero_rtt_sent := true; call queued_frames_rtt(loc:scid) := frame.arr.empty; queued_non_probing(loc:scid) := false; queued_non_ack(loc:scid) := false; queued_close(loc:scid) := false; num_queued_frames_rtt(loc:scid) := 0:frame.idx; queued_ack_eliciting(loc:scid) := false; if quic_packet_coal_0rtt.ptype_i(fml:pkt) = quic_packet_type.initial {initial_token := quic_packet_coal_0rtt.token_i(fml:pkt); if ~conn_seen(loc:dcid_i) {call tls_client_initial_request(fml:src, fml:dst, loc:dcid_i, quic_packet_coal_0rtt.pversion_i(fml:pkt), 0:tls_api.id); conn_requested(fml:src,fml:dst,loc:scid_i) := true}; cid_to_token(loc:dcid_i) := quic_packet_coal_0rtt.token_i(fml:pkt)}; if queued_ack_eliciting(loc:scid_i) {ack_credit(loc:dcid) := ack_credit(loc:dcid) + 1}; if ~queued_non_ack(loc:scid_i) {ack_credit(loc:scid_i) := ack_credit(loc:scid_i) - 1}; if queued_non_probing(loc:scid_i) {if quic_packet_coal_0rtt.ptype_i(fml:pkt) = quic_packet_type.one_rtt {if quic_packet_coal_0rtt.seq_num_i(fml:pkt) >= hi_non_probing(loc:scid_i) {hi_non_probing(loc:scid_i) := quic_packet_coal_0rtt.seq_num_i(fml:pkt); hi_non_probing_endpoint(loc:scid_i,fml:src) := true}}\nelse {hi_non_probing_endpoint(loc:scid_i,fml:src) := true}}; if queued_close(loc:scid_i) {pkt_has_close(loc:scid_i,quic_packet_coal_0rtt.ptype_i(fml:pkt),quic_packet_coal_0rtt.seq_num_i(fml:pkt)) := true}; if conn_draining(loc:scid_i) {draining_pkt_sent(loc:scid_i) := true}; if quic_packet_coal_0rtt.ptype_i(fml:pkt) = quic_packet_type.initial & ~first_initial_send & zero_rtt_allowed {first_initial_send := true}\nelse {first_initial_send := false}; call queued_frames(loc:scid_i) := frame.arr.empty; queued_non_probing(loc:scid_i) := false; queued_non_ack(loc:scid_i) := false; queued_close(loc:scid_i) := false; num_queued_frames(loc:scid_i) := 0:frame.idx; queued_ack_eliciting(loc:scid_i) := false}}}}}}",
            "<<<\n\t        `fml:s` = (`stream_pos`) `fml:a`.size();\n\t    >>>",
            "{assert prot.arr.end(fml:a) = prot.arr.end(old_fml:a); assert prot.arr.value(fml:a,X) = (fml:y if (X = fml:x) else prot.arr.value(old_fml:a,X))}",
            "<<<\n            const char * session_file = getenv(\"initial_max_stream_data_bidi_remote\");\n            FILE *fp;\n            size_t len = 0;\n            ssize_t read;\n            char * line = NULL;\n            if(session_file != NULL) {\n                fp = fopen(session_file,\"r\");\n                read = getline(&line, &len, fp);\n                fclose(fp);\n                bool is_error = false;\n                if(line != NULL) { \n                    i = (uint32_t) std::stoll(line);\n                }\n            }\n        >>>",
            "{}",
            "{}",
            "{}",
            "{packed_forwarded_arr(fml:pkt) := true; call mim_agent.ppkt_to_be_replayed_to_server := forged_pkts.empty; mim_agent.force_client_forward := false; mim_agent.forward_turn := true}",
            "{}",
            "{assert vector[tls.extension].end(fml:a) > vector[tls.extension].end(old_fml:a) & ~(vector[tls.extension].end(old_fml:a) < X & X < vector[tls.extension].end(fml:a)); assert 0:vector[tls.extension].domain <= X & X < vector[tls.extension].end(old_fml:a) -> vector[tls.extension].value(fml:a,X) = vector[tls.extension].value(old_fml:a,X); assert vector[tls.extension].value(fml:a,vector[tls.extension].end(old_fml:a)) = fml:v}",
            "{assert fml:x < fml:y & (fml:x < Y -> fml:y <= Y); assert quic_packet_vn.idx.succ(fml:x,fml:y)}",
            "assert frame.arr.value(fml:a,fml:x) = fml:y",
            "fml:socket := (sock_mim_client if (fml:src = mim_client_target.ep) else sock_mim_server)",
            "assert fml:s = servers.server.arr.end(fml:a)",
            "{}",
            "{}",
            "{}",
            "{}",
            "crypto_pos(fml:dcid,fml:e) := fml:hi",
            "{}",
            "<<<\n                if ((`frame.idx`)`fml:a`.size() > 0)\n                    `fml:res` = `fml:a`.back();\n            >>>",
            "assert 0:quic_packet_retry.idx <= fml:x & fml:x < quic_packet_retry.retired_cids.end(fml:a)",
            "{}",
            "{sending_ready(S) := true; sending_send(S) := false; sending_dataSent(S) := false; sending_dataRecvd(S) := false; sending_resetSent(S) := false; sending_resetRecvd(S) := false}",
            "{}",
            "<<<\n        const char * session_file = getenv(\"initial_max_stream_data_bidi_local\");\n        FILE *fp;\n        if(session_file != NULL) {\n            fp = fopen(session_file,\"w\");\n            fprintf(fp, \"%llu\", i);\n            fclose(fp);\n        }\n\n        >>>",
            "fml:y := fml:x + 1",
            "local loc:dcid {loc:dcid := quic_packet_retry.dst_cid(fml:pkt); local loc:scid {loc:scid := quic_packet_retry.src_cid(fml:pkt); if cid_mapped(loc:dcid) {loc:dcid := cid_to_aid(loc:dcid)}; if fml:src = client_alt | fml:dst = client_alt {migration_done := true}; if ~_generating {local loc:0,loc:1,loc:2 {call loc:0 := scid_size_pos(true); call loc:1 := dcid_size_pos(true); call loc:2 := prot.retry_integrity_tag(8:stream_pos, server_cid, quic_packet_retry.pversion(fml:pkt), loc:0, loc:dcid, loc:1, loc:scid, quic_packet_retry.token(fml:pkt), last_pkt_num(loc:scid,quic_packet_type.initial), header_retry, token_saved); local loc:expected_itoken {loc:expected_itoken := loc:2; local loc:0 {call loc:0 := bytes_to_itoken(loc:expected_itoken); assert loc:0 = quic_packet_retry.integrity_token(fml:pkt)}}}}; assert quic_packet_retry.ptype(fml:pkt) = quic_packet_type.retry}}",
            "{}",
            "{}",
            "local loc:cdx {loc:cdx := 0:servers.server.idx; local loc:ti {loc:ti := 0:tls_api.id; while loc:cdx < 2\n{servers.server.tls_id(servers.server.arr.value(servers.servers,loc:cdx)) := loc:ti; call loc:cdx := servers.server.idx.next(loc:cdx); loc:ti := loc:ti + 1}}}",
            "{}",
            "{}",
            "{}",
            "<<<\n                for (unsigned i = 0; i < `fml:b`.size(); i++)\n\t            `fml:a`.push_back(`fml:b`[i]);\n            >>>",
            "<<<\n\t        `fml:a`.push_back(`fml:v`);\n            >>>",
            "assert 0:vector[tls.extension].domain <= fml:x & fml:x < vector[tls.extension].end(fml:a)",
            "mim_server_target.ep := fml:e",
            "assert tls_api.upper.open(fml:c)",
            "assert 0:jdx_r <= fml:x & fml:x < arr_pkt_num_r.end(fml:a)",
            "{}",
            "{if ~_generating {call handle_transport_error(frame.rst_stream.err_code(fml:f))}; call enqueue_frame(fml:scid, fml:f, fml:e, false)}",
            "{}",
            "<<<\n                for (unsigned i = 0; i < `fml:a`.size()/2; i++) {\n                    std::swap(`fml:a`[i],`fml:a`[`fml:a`.size()-i-1]);\n                }\n            >>>",
            "{}",
            "{receiving_dataRecvd(fml:id) := false; receiving_dataRead(fml:id) := true}",
            "{}",
            "{}",
            "<<<\n\t    `quic_ser_zerortt` ser;\n\t    __ser(ser,x);\n\t    y.resize(ser.res.size());\n\t    for (unsigned i = 0; i < ser.res.size(); i++)\n\t        y[i] = (unsigned char) ser.res[i];\n//\t    std::copy(ser.res.begin(),ser.res.end(),y.begin());\n\t    >>>",
            "<<<\n                for (unsigned i = 0; i < `fml:a`.size()/2; i++) {\n                    std::swap(`fml:a`[i],`fml:a`[`fml:a`.size()-i-1]);\n                }\n            >>>",
            "assert 0:clients.client.idx <= fml:x & fml:x < clients.client.arr.end(fml:a)",
            "<<<\n\t        unsigned __old_size = `fml:a`.size();\n\t        `fml:a`.resize(`fml:s`);\n\t        for (unsigned i = __old_size; i < (unsigned)`fml:s`; i++)\n\t            `fml:a`[i] = v;\n            >>>",
            "<<<\n\t        unsigned __old_size = `fml:a`.size();\n\t        `fml:a`.resize(`fml:s`);\n\t        for (unsigned i = __old_size; i < (unsigned)`fml:s`; i++)\n\t            `fml:a`[i] = v;\n            >>>",
            "{}",
            "<<<\n\t        `fml:a`.push_back(`fml:v`);\n            >>>",
            "clients.client.ep(clients.client.arr.value(clients.clients,fml:n)) := fml:e",
            "{}",
            "<<<\n\t        `fml:a`.resize(`fml:s`);\n\t        for (unsigned i = 0; i < `fml:s`; i++)\n\t            `fml:a`[i] = y;\n\t    >>>",
            "{}",
            "<<<\n\t        `fml:a`.push_back(`fml:v`);\n            >>>",
            "{}",
            "assert 0:idx_r <= fml:x & fml:x < arr_streamid_r.end(fml:a)",
            "<<<\n\t        `fml:a`.resize(`fml:s`);\n\t        for (unsigned i = 0; i < `fml:s`; i++)\n\t            `fml:a`[i] = y;\n\t    >>>",
            "local loc:dcid {loc:dcid := quic_packet_retry.dst_cid(fml:pkt); local loc:scid {loc:scid := quic_packet_retry.src_cid(fml:pkt); if cid_mapped(loc:dcid) {loc:dcid := cid_to_aid(loc:dcid)}; retry_token(loc:scid) := quic_packet_retry.token(fml:pkt); if ~_generating {conn_requested(fml:src,fml:dst,loc:scid) := false; conn_requested(fml:src,fml:dst,loc:dcid) := false; connected(loc:dcid) := false; connected(loc:scid) := false; conn_seen(loc:dcid) := false; conn_seen(loc:scid) := false; assert ~retry_recv(loc:dcid); retry_recv(loc:dcid) := true; server_cid := loc:scid; connected(the_cid) := false; connected(server_cid) := false; conn_seen(server_cid) := false; conn_seen(the_cid) := false; client_initial_rcid := loc:scid; local loc:0 {call loc:0 := tls_extensions.empty; local loc:extns {loc:extns := loc:0; local loc:0 {call loc:0 := make_transport_parameters; call loc:extns := tls_extensions.append(loc:extns, loc:0)}; call tls_api.upper.destroy(0:tls_api.id); call tls_api.upper.create(0:tls_api.id, false, loc:extns); conn_requested(fml:dst,fml:src,the_cid) := true}}}\nelse {retry_sent(loc:scid) := true; retry_response(loc:scid) := true; initial_keys_set(loc:scid) := false; tp_client_set := false; conn_requested(fml:src,fml:dst,loc:dcid) := false; conn_requested(fml:src,fml:dst,the_cid) := false; conn_seen(loc:dcid) := false; conn_seen(the_cid) := false; local loc:0 {call loc:0 := src_tls_id(fml:src); call tls_api.upper.destroy(loc:0)}}}}",
            "fml:e := (quic_packet_type.zero_rtt if ~prot.hdr_long(fml:h) else (quic_packet_type.initial if (bvand(prot.hdr_type(fml:h),0x30) = 0x00) else quic_packet_type.handshake))",
            "{}",
            "{}",
            "{}",
            "{}",
            "assert arr_pkt_num_r.value(fml:a,fml:x) = fml:y",
            "{}",
            "{}",
            "{}",
            "{}",
            "assert quic_packet.retired_cids.value(fml:a,fml:x) = fml:y",
            "<<<\n\t        `fml:s` = (`index`) `fml:a`.size();\n\t    >>>",
            "fml:res := forged_quic_packet_retry.ptype(fml:pkt) ~= quic_packet_type.one_rtt",
            "fml:tls_id := client.tls_id",
            "{}",
            "<<<\n                if ((`forged_quic_packet.idx`)`fml:a`.size() > 0)\n                    `fml:res` = `fml:a`.back();\n            >>>",
            "{}",
            "<<<\n\t        unsigned __old_size = `fml:a`.size();\n\t        `fml:a`.resize(`fml:s`);\n\t        for (unsigned i = __old_size; i < (unsigned)`fml:s`; i++)\n\t            `fml:a`[i] = v;\n            >>>",
            "{}",
            "{}",
            "{}",
            "<<<\n\t        `fml:a`.push_back(`fml:v`);\n            >>>",
            "if _generating {assert fml:scid = the_cid}\nelse {call tls_api.upper.save_token(frame.new_token.data(fml:f))}",
            "<<<\n\t        `fml:s` = (`replayed_quic_packet_0rtt.idx`) `fml:a`.size();\n\t    >>>",
            "{assert quic_packet_0rtt.retired_cids.end(fml:a) = quic_packet_0rtt.retired_cids.end(old_fml:a); assert quic_packet_0rtt.retired_cids.value(fml:a,X) = (fml:y if (X = fml:x) else quic_packet_0rtt.retired_cids.value(old_fml:a,X))}",
            "<<<\n\t        if (0 <= `fml:x` && `fml:x` < (`vector[transport_parameter].domain`)`fml:a`.size()) \n\t            `fml:a`[`fml:x`] = `fml:y`;\n\t    >>>",
            "<<<\n\t        if (0 <= `fml:x` && `fml:x` < (`forged_quic_packet_retry.idx`)`fml:a`.size()) \n\t            `fml:y` = `fml:a`[`fml:x`];\n\t    >>>",
            "sock_mim_client := sock",
            "assert 0:frame.ack_ecn.range.idx <= fml:x & fml:x < frame.ack_ecn.range.arr.end(fml:a)",
            "assert 0:frame.ack_ecn.range.idx <= fml:s",
            "{}",
            "call http_request := http_request_file.read",
            "{}",
            "{}",
            "assert 0:jdx_r <= fml:x & fml:x < arr_pkt_num_r.end(fml:a)",
            "fml:y := fml:x + 1",
            "<<<\n                for (unsigned i = 0; i < `fml:a`.size()/2; i++) {\n                    std::swap(`fml:a`[i],`fml:a`[`fml:a`.size()-i-1]);\n                }\n            >>>",
            "assert quic_packet_0rtt.retired_cids.end(fml:a) = fml:s & quic_packet_0rtt.retired_cids.value(fml:a,X) = fml:y",
            "<<<\n\t    >>>",
            "fml:y := fml:x + 1",
            "{}",
            "{}",
            "fml:res := fml:dst = client.ep | fml:dst = client_alt | fml:dst = client_vn",
            "fml:e := (quic_packet_type.zero_rtt if ~prot.hdr_long(fml:h) else (quic_packet_type.initial if (prot.hdr_type(fml:h) = 0x7f) else quic_packet_type.handshake))",
            "{}",
            "{}",
            "{}",
            "assert 0:quic_packet.idx <= fml:x & fml:x < quic_packet.retired_cids.end(fml:a)",
            "{}",
            "<<<\n        val.val = 0;\n        for (unsigned i = 0; i < bytes.size(); i++)\n            val.val = (val.val << 8) + bytes[i];\n        >>>",
            "assert fml:s = ip_endpoints.end(fml:a)",
            "{assert fml:s = current_stream; local loc:tp {loc:tp := trans_params(the_cid); if version_negociated {assert fml:src = client_vn}\nelse {if ~disable_active_migration.is_set(loc:tp) {if ~migration_done | allowed_multiple_migration {assert fml:src = client.ep | fml:src = client_alt}\nelse {assert fml:src = client_alt}}\nelse {assert fml:src = client.ep}}; assert fml:dst = server.ep; if ~zero_rtt_server_test | zero_rtt_sent {assert connected(the_cid) & fml:dcid = connected_to(the_cid)}\nelse {assert fml:dcid ~= the_cid}; assert stream_length(fml:dcid,fml:s) = stream_app_data_end(fml:dcid,fml:s); assert stream_length(fml:dcid,fml:s) < fml:end & fml:end <= stream_data.end(http_request); assert current_stream < 60}}",
            "<<<\n                for (unsigned i = 0; i < `fml:b`.size(); i++)\n\t            `fml:a`.push_back(`fml:b`[i]);\n            >>>",
            "{}",
            "{assert connected(fml:dcid) & connected_to(fml:dcid) = fml:scid; assert num_queued_frames(fml:scid) > 0 -> fml:e = queued_level(fml:scid); assert fml:e = quic_packet_type.one_rtt & established_1rtt_keys(fml:scid); assert ~conn_closed(fml:scid)}",
            "<<<\n\t        `fml:a`.resize(`fml:s`);\n\t        for (unsigned i = 0; i < `fml:s`; i++)\n\t            `fml:a`[i] = y;\n\t    >>>",
            "assert vector[transport_parameter].end(fml:a) = 0",
            "<<<\n\t        if (0 <= `fml:x` && `fml:x` < (`quic_packet_retry.idx`)`fml:a`.size()) \n\t            `fml:a`[`fml:x`] = `fml:y`;\n\t    >>>",
            "{}",
            "{}",
            "{}",
            "{assert fml:x < fml:y & (fml:x < Y -> fml:y <= Y); assert tls_extensions.domain.succ(fml:x,fml:y)}",
            "fml:y := fml:x + 1",
            "{}",
            "local loc:0 {call loc:0 := socket_endpoint(fml:host, fml:s); local loc:dst {loc:dst := loc:0; local loc:idx {loc:idx := prot.arr.begin(fml:pkts); local loc:0 {call loc:0 := stream_data.empty; local loc:past_data {loc:past_data := loc:0; while loc:idx < prot.arr.end(fml:pkts)\n{local loc:ppkt {loc:ppkt := prot.arr.value(fml:pkts,loc:idx); local loc:0 {call loc:0 := src_tls_id(loc:dst); local loc:tls_id {loc:tls_id := loc:0; local loc:header {loc:header := stream_data.value(loc:ppkt,0); local loc:hdr_type {loc:hdr_type := bfe[0][6](stream_data.value(loc:ppkt,0)); local loc:tt {loc:tt := bvand(loc:hdr_type,0x30); local loc:is_long {loc:is_long := bvand(0x80:byte,loc:header) ~= 0; local loc:version {loc:version := stream_data.segment(loc:ppkt,1,1 + 4); local loc:0 {call loc:0 := bytes_to_version(loc:version); local loc:bversion {loc:bversion := loc:0; local loc:ptype {loc:ptype := bvand(0x30:byte,loc:header); if loc:bversion = 0 & loc:is_long | version_not_found(fml:src) {call loc:past_data := stream_data.extend(loc:past_data, loc:ppkt); call tls_client_version_response(fml:src, loc:dst, loc:past_data)}\nelse {if loc:tt = 0x30 & loc:is_long & loc:bversion ~= 0 {call tls_client_retry_response(fml:src, loc:dst, loc:ppkt)}\nelse {local loc:0 {call loc:0 := reference_pkt_num(loc:ppkt, true); local loc:rnum {loc:rnum := loc:0; local loc:0 {call loc:0 := prot.decrypt(loc:tls_id, loc:rnum, loc:ppkt); local loc:res {loc:res := loc:0; if tls_api.upper.ok(loc:res) {local loc:0 {call loc:0 := is_padding_packet(tls_api.upper.payload(loc:res)); local loc:is_pad {loc:is_pad := loc:0; if loc:is_pad {call padding_packet_event(fml:host, fml:src, loc:dst, loc:ppkt)}\nelse {local loc:0 {call loc:0 := pkt_serdes.from_bytes(tls_api.upper.data(loc:res)); local loc:pkt {loc:pkt := loc:0; local loc:0 {call loc:0 := prot.get_pnum_len(tls_api.upper.data(loc:res)); call quic_packet.seq_num(loc:pkt) := prot.correct_pnum(loc:rnum, quic_packet.seq_num(loc:pkt), loc:0)}; call recv_packet(fml:host, fml:src, loc:dst, loc:pkt); call infer_tls_events(fml:src, loc:dst, loc:pkt); call packet_event(fml:src, loc:dst, loc:pkt)}}}}}}\nelse {call undecryptable_packet_event(fml:host, fml:src, loc:dst, loc:ppkt)}}}}}}}; call loc:idx := prot.idx.next(loc:idx)}}}}}}}}}}}}; version_not_found(fml:src) := false; call show_last_datagram_size(last_datagram_received_size); if ~first_datagram_received & fml:host = endpoint_id.server {assert last_datagram_received_size + 8 > 1200; first_datagram_received := true}; last_datagram_received_size := 0:stream_pos}}}}}",
            "{assert frame.ack.range.arr.end(fml:a) = fml:s; assert 0:frame.ack.range.idx <= X & X < frame.ack.range.arr.end(old_fml:a) -> frame.ack.range.arr.value(fml:a,X) = frame.ack.range.arr.value(old_fml:a,X); assert frame.ack.range.arr.end(old_fml:a) <= X & X < fml:s -> frame.ack.range.arr.value(fml:a,X) = fml:v}",
            "{}",
            "{}",
            "<<<\n                if ((`quic_packet.idx`)`fml:a`.size() > 0)\n                    `fml:res` = `fml:a`.back();\n            >>>",
            "fml:y := fml:x - 1",
            "<<<\n\t        `fml:a`.resize(`fml:s`);\n\t        for (unsigned i = 0; i < `fml:s`; i++)\n\t            `fml:a`[i] = y;\n\t    >>>",
            "{assert quic_packet_coal_0rtt.src_cid(fml:pkt) = quic_packet_coal_0rtt.src_cid_i(fml:pkt); assert quic_packet_coal_0rtt.dst_cid(fml:pkt) = quic_packet_coal_0rtt.dst_cid_i(fml:pkt); assert quic_packet_coal_0rtt.seq_num(fml:pkt) = quic_packet_coal_0rtt.seq_num_i(fml:pkt); local loc:dcid_i {loc:dcid_i := quic_packet_coal_0rtt.dst_cid_i(fml:pkt); local loc:scid_i {loc:scid_i := quic_packet_coal_0rtt.src_cid_i(fml:pkt); if cid_mapped(loc:dcid_i) {loc:dcid_i := cid_to_aid(loc:dcid_i)}; local loc:dcid {loc:dcid := quic_packet_coal_0rtt.dst_cid(fml:pkt); local loc:scid {loc:scid := quic_packet_coal_0rtt.src_cid(fml:pkt); if cid_mapped(loc:dcid) {loc:dcid := cid_to_aid(loc:dcid)}; if fml:src = client_alt | fml:dst = client_alt {migration_done := true}; assert stream_data.end(quic_packet_coal_0rtt.token_i(fml:pkt)) ~= 0 -> quic_packet_coal_0rtt.ptype_i(fml:pkt) = quic_packet_type.initial & retry_recv(loc:dcid_i); assert quic_packet_coal_0rtt.ptype_i(fml:pkt) ~= quic_packet_type.zero_rtt; assert connected(loc:dcid_i) | quic_packet_coal_0rtt.ptype_i(fml:pkt) = quic_packet_type.initial & is_client(loc:scid_i) & loc:dcid_i = nonce_cid(loc:scid_i); local loc:0 {call loc:0 := quic_packet_coal_0rtt.long(fml:pkt); if loc:0 {assert connected(loc:dcid_i) -> connected_to(loc:dcid_i) = loc:scid_i}\nelse {loc:scid_i := connected_to(loc:dcid_i)}}; assert quic_packet_coal_0rtt.ptype_i(fml:pkt) = queued_level(loc:scid_i); if _generating {assert quic_packet_coal_0rtt.seq_num_i(fml:pkt) <= last_pkt_num(loc:scid_i,quic_packet_coal_0rtt.ptype_i(fml:pkt)) + 0x15; assert quic_packet_coal_0rtt.seq_num_i(fml:pkt) > last_pkt_num(loc:scid_i,quic_packet_coal_0rtt.ptype_i(fml:pkt)); assert quic_packet_coal_0rtt.seq_num(fml:pkt) = quic_packet_coal_0rtt.seq_num_i(fml:pkt)}; assert ~sent_pkt(loc:scid_i,quic_packet_coal_0rtt.ptype_i(fml:pkt),quic_packet_coal_0rtt.seq_num_i(fml:pkt)); sent_pkt(loc:scid_i,quic_packet_coal_0rtt.ptype_i(fml:pkt),quic_packet_coal_0rtt.seq_num_i(fml:pkt)) := true; assert num_queued_frames(loc:scid_i) > 0; assert quic_packet_coal_0rtt.payload_i(fml:pkt) = queued_frames(loc:scid_i); local loc:0 {call loc:0 := quic_packet_coal_0rtt.long(fml:pkt); assert conn_seen(loc:scid_i) & loc:0 & is_client(loc:scid_i) -> conn_requested(fml:src,fml:dst,loc:scid_i)}; assert conn_seen(loc:dcid_i) -> hi_non_probing_endpoint(loc:dcid_i,fml:dst); assert ~_generating & ~queued_non_ack(loc:scid_i) -> ack_credit(loc:scid_i) > 0; if conn_draining(loc:scid_i) {assert ~draining_pkt_sent(loc:scid_i) & queued_close(loc:scid_i)}; assert quic_packet_coal_0rtt.ptype(fml:pkt) = quic_packet_type.zero_rtt; local loc:type_app {loc:type_app := quic_packet_type.one_rtt; assert ~sent_pkt(loc:scid,loc:type_app,quic_packet_coal_0rtt.seq_num(fml:pkt)); sent_pkt(loc:scid,loc:type_app,quic_packet_coal_0rtt.seq_num(fml:pkt)) := true; assert num_queued_frames_rtt(loc:scid) > 0; assert quic_packet_coal_0rtt.payload(fml:pkt) = queued_frames_rtt(loc:scid); assert connected(loc:dcid) -> connected_to(loc:dcid) = loc:scid; local loc:0 {call loc:0 := quic_packet_coal_0rtt.long(fml:pkt); assert conn_seen(loc:scid) & loc:0 & is_client(loc:scid) -> conn_requested(fml:src,fml:dst,loc:scid)}}}}}}}",
            "{}",
            "local loc:0 {call loc:0 := socket_endpoint_mim(fml:host, fml:s, fml:src); local loc:dst {loc:dst := loc:0; local loc:idx {loc:idx := prot.arr.begin(fml:pkts); if ~mim_agent.nat_configured {mim_agent.nat_configured := true; call mim_client_target.set_ep(fml:src); call mim_server_target.set_ep(loc:dst); if sock_mim_client = 0 {call fake_client.set_ep(mim_client_target.ep); ip.endpoint.interface(fake_client.ep) := ip.lo; call sock_mim_client := net.listen(endpoint_id.mim, fake_client.ep)}}; while loc:idx < prot.arr.end(fml:pkts)\n{local loc:ppkt {loc:ppkt := prot.arr.value(fml:pkts,loc:idx); local loc:0 {call loc:0 := src_tls_id(loc:dst); local loc:tls_id {loc:tls_id := loc:0; local loc:header {loc:header := stream_data.value(loc:ppkt,0); local loc:hdr_type {loc:hdr_type := bfe[0][6](stream_data.value(loc:ppkt,0)); local loc:tt {loc:tt := bvand(loc:hdr_type,0x30); local loc:is_long {loc:is_long := bvand(0x80:byte,loc:header) ~= 0; local loc:version {loc:version := stream_data.segment(loc:ppkt,1,1 + 4); local loc:0 {call loc:0 := bytes_to_version(loc:version); local loc:bversion {loc:bversion := loc:0; local loc:ptype {loc:ptype := bvand(0x30:byte,loc:header); call recv_packet_mim(fml:host, fml:src, loc:dst, loc:ppkt); local loc:rppkt {loc:rppkt := loc:ppkt; if forward_packets {if fml:src = mim_client_target.ep {local loc:pkt_type {loc:pkt_type := quic_packet_type.initial; if loc:is_long {if bvand(stream_data.value(loc:ppkt,0),0xf0) = 0xc0 {loc:pkt_type := quic_packet_type.initial}\nelse {if loc:bversion = 0 | version_not_found(fml:src) {loc:pkt_type := quic_packet_type.version_negociation}\nelse {if loc:tt = 0x30 & loc:bversion ~= 0 {loc:pkt_type := quic_packet_type.retry}\nelse {if loc:tt = 0x10 & loc:bversion ~= 0 {loc:pkt_type := quic_packet_type.zero_rtt}\nelse {loc:pkt_type := quic_packet_type.handshake}}}}}\nelse {loc:pkt_type := quic_packet_type.one_rtt}; if (loc:pkt_type = mim_agent.enc_level_ppkt_to_be_forge | loc:pkt_type = quic_packet_type.initial) & save_packet {call mim_agent.save_packets(loc:ppkt); call mim_agent.ppkt_to_be_replayed_to_server := forged_pkts.append(mim_agent.ppkt_to_be_replayed_to_server, loc:ppkt); mim_agent.ppkt_saved_b := true}; call mim_agent.ppkt_to_be_forwarded_to_server(mim_agent.cppkt_forwarded_to_server) := forged_pkts.append(mim_agent.ppkt_to_be_forwarded_to_server(mim_agent.cppkt_forwarded_to_server), loc:rppkt)}}\nelse {if fml:src = mim_server_target.ep {local loc:pkt_type {loc:pkt_type := quic_packet_type.initial; if loc:is_long {if bvand(stream_data.value(loc:ppkt,0),0xf0) = 0xc0 {loc:pkt_type := quic_packet_type.initial}\nelse {if loc:bversion = 0 | version_not_found(fml:src) {loc:pkt_type := quic_packet_type.version_negociation}\nelse {if loc:tt = 0x30 & loc:bversion ~= 0 {loc:pkt_type := quic_packet_type.retry; mim_agent.wait_forward := false}\nelse {if loc:tt = 0x10 & loc:bversion ~= 0 {loc:pkt_type := quic_packet_type.zero_rtt; mim_agent.wait_forward := false}\nelse {loc:pkt_type := quic_packet_type.handshake; mim_agent.wait_forward := false}}}}}\nelse {loc:pkt_type := quic_packet_type.one_rtt; mim_agent.wait_forward := false}; call mim_agent.ppkt_to_be_forwarded_to_client(mim_agent.cppkt_forwarded_to_client) := forged_pkts.append(mim_agent.ppkt_to_be_forwarded_to_client(mim_agent.cppkt_forwarded_to_client), loc:rppkt)}}}}; if forward_packets_victim {local loc:ddst {loc:ddst := victim_agent.ep; call mim_agent.ppkt_to_be_reflected_to_victim := forged_pkts.append(mim_agent.ppkt_to_be_reflected_to_victim, loc:rppkt); call mim_agent.reflection_packets(loc:rppkt, 0:ip.port)}}; if replay_packets {call mim_agent.forward_packet_to(mim_agent.ppkt_saved, fml:host, fml:s, fml:src, loc:dst)}; if ~mim_agent.init_cids {local loc:dcil {loc:dcil := bfe[0][7](stream_data.value(loc:ppkt,5)); local loc:0 {call loc:0 := cid_to_bytes(0:cid, 1:cid_length); local loc:ikm {loc:ikm := loc:0; if loc:dcil ~= 0 {client_initial_dcil := loc:dcil; loc:ikm := stream_data.segment(loc:ppkt,6,6 + loc:dcil)}; local loc:scil {loc:scil := bfe[0][7](stream_data.value(loc:ppkt,6 + loc:dcil)); local loc:0 {call loc:0 := cid_to_bytes(0:cid, 1:cid_length); local loc:skm {loc:skm := loc:0; if loc:scil ~= 0 {client_initial_scil := loc:scil; client_non_zero_scil := true; loc:skm := stream_data.segment(loc:ppkt,6 + loc:dcil + 1,6 + loc:dcil + 1 + loc:scil)}; call client_initial_dcid := bytes_to_cid(loc:ikm); call client_initial_scid := bytes_to_cid(loc:skm); call export_length_cid_mim(loc:dcil, loc:scil); mim_agent.init_cids := true}}}}}}}; call loc:idx := prot.idx.next(loc:idx)}}}}}}}}}}}}}; if forward_packets & keep_coalesed {if fml:src = mim_client_target.ep {mim_agent.cppkt_forwarded_to_server := mim_agent.cppkt_forwarded_to_server + 1}\nelse {if fml:src = mim_server_target.ep {mim_agent.cppkt_forwarded_to_client := mim_agent.cppkt_forwarded_to_client + 1}}}}}}",
            "{}",
            "<<<\n                for (unsigned i = 0; i < `fml:b`.size(); i++)\n\t            `fml:a`.push_back(`fml:b`[i]);\n            >>>",
            "<<<\n       srand((unsigned) time(0)); //fixed or random seed ?\n       res = 0;\n       res = ::rand()%(max-1) + 0;\n       std::cerr << \"lower random: \" << res << \"\\n\";\n       >>>",
            "{}",
            "assert vector[tls.extension].end(fml:a) = fml:s & vector[tls.extension].value(fml:a,X) = fml:y",
            "call enqueue_frame(fml:scid, fml:f, fml:e, false)",
            "<<<\n\t        if (`fml:a`.size() > 0) {\n\t            a.pop_back();\n\t        }\n            >>>",
            "{}",
            "{assert fml:y < fml:x & (Y:vector[tls.compression_method].domain < fml:x -> Y <= fml:y); assert vector[tls.compression_method].domain.succ(fml:y,fml:x)}",
            "<<<\n                for (unsigned i = 0; i < `fml:b`.size(); i++)\n\t            `fml:a`.push_back(`fml:b`[i]);\n            >>>",
            "{}",
            "{}",
            "assert 0:index <= fml:s",
            "fml:y := fml:x - 1",
            "{}",
            "{}",
            "<<<\n        const char * session_file = getenv(\"initial_max_data\");\n        FILE *fp;\n        if(session_file != NULL) {\n            fp = fopen(session_file,\"w\");\n            fprintf(fp, \"%llu\", i);\n            fclose(fp);\n        }\n\n        >>>",
            "<<<\t\t\t// Modified code from Tom R.\n\t\t\tchar *dev = strdup(\"lo\"); //TODO\n\t\t\tbool free = false;\n\t\t\tchar opt;\n\t\t\tint port;\n\t\t\t\n\t\t\tif (dst.interface == `ip.ivy`) {\n\t\t\t\tdev = strdup(\"ivy\");\n\t\t\t}\n\t\t\tint l = strlen(dev);\n\n\t\t\ts = socket(AF_INET, SOCK_DGRAM,0);\n\t\t\tstd::cerr << \"listen SOCKET \" << s << std::endl;\n\t\t\tstd::cerr << \"listen SOCKET dev \" << dev << std::endl;\n\t\t\tif (s <= 0) {\n\t\t\t\tprintf(\"socket: socket\\n\");\n\t\t\t\texit(EXIT_FAILURE);\n\t\t\t}\n\t\t\tint v = 1;\n\t\t\tif (setsockopt(s, SOL_IP, IP_FREEBIND, &v, sizeof(v)) < 0) {\n\t\t\t\tperror(\"setsockopt: freebind\");\n\t\t\t\texit(EXIT_FAILURE);\n\t\t\t}\n\t\t\tif (setsockopt(s, SOL_SOCKET, SO_BINDTODEVICE, dev, l) < 0) {\n\t\t\t\tchar s[100];\n\t\t\t\tsprintf(s, \"setsockopt: bind to device %s\", dev);\n\t\t\t\tperror(s);\n\t\t\t\texit(EXIT_FAILURE);\n\t\t\t}\n\t\t\t\n\t\t\tint error = 0;\n\t\t\tif (setsockopt(s, SOL_SOCKET, SO_REUSEADDR,  &error, sizeof(int)) < 0 || setsockopt(s, SOL_SOCKET, SO_REUSEPORT,  &error, sizeof(int)) < 0)\n\t\t\t\tperror(\"setsockopt(SO_REUSEADDR) failed\");\n\t\t\t\n\t\t\tstruct sockaddr_in v_dst = {};\n\t\t\tv_dst.sin_addr.s_addr = htonl(dst.addr);\n\t\t\t//inet_pton(AF_INET, ip, &v_dst.sin_addr.s_addr);\n\t\t\tv_dst.sin_port = htons(dst.port);\n\t\t\tv_dst.sin_family = AF_INET;\n\t\t\t\n\t\t\tif (bind(s, (struct sockaddr*) &v_dst, sizeof(struct sockaddr_in)) != 0) {\n\t\t\t\t\tchar s[100];\n\t\t\t\t\tsprintf(s, \"bind to addr %u\", htonl(dst.addr));\n\t\t\t\t\tperror(s);\n\t\t\t\texit(EXIT_FAILURE);\n\t\t\t}\n\t\t\t\n\t\t\n\t\t\t/*\n\t\t\tchar buf[100];\n\t\t\tint len = 100;\n\t\t\tif (recv(s, buf, len, 0) == -1) {\n\t\t\t\tperror(\"recv\");\n\t\t\t\texit(EXIT_FAILURE);\n\t\t\t}\n\t\t\tprintf(\"%s: %s\\n\", dev, buf);\n\t\t\t*/\n\n\t\t\tinstall_reader(new udp_reader(`prm:V0`,s, *`net.impl.cb(prm:V0)`, this));\n\n\t\t>>>",
            "<<<\n\t        `fml:a`.push_back(`fml:v`);\n            >>>",
            "<<<\n        //is_rtt = true; //todo\n        if(is_server)\n            is_client_test = true;\n\n        std::cerr << \"create cid = \" << c << std::endl;  \n\n        // We create a new picootls session, and add an entry in the cid_map\n        // for it.\n\n        ptls_context_t* ctx;\n        ctx = new ptls_context_t;\n        memset(ctx, 0, sizeof(ptls_context_t));\n\n        /*\n        HelloRetryRequest random:\n            CF 21 AD 74 E5 9A 61 11 BE 1D 8C 02 1E 65 B8 91\n            C2 A2 11 16 7A BB 8C 5E 07 9E 09 E2 C8 A8 33 9C\n        */\n        ctx->random_bytes = ptls_openssl_random_bytes;\n        ctx->key_exchanges = picotls_key_exchanges; \n        ctx->cipher_suites = picotls_cipher_suites; \n        ctx->send_change_cipher_spec = 0;\n        // ctx->hkdf_label_prefix = QUIC_LABEL_QUIC_BASE;\n        \n        ctx->hkdf_label_prefix__obsolete = NULL;\n        ctx->update_traffic_key = (ptls_update_traffic_key_t *)malloc(sizeof(ptls_update_traffic_key_t));\n        memset(ctx->update_traffic_key, 0, sizeof(ptls_update_traffic_key_t));\n        //ctx->update_traffic_key = new ptls_update_traffic_key_t;\n        ctx->update_traffic_key->cb = quic_update_traffic_key_cb;\n        \n        //ctx->on_extension = new ptls_on_extension_t;\n        ctx->on_extension = (ptls_on_extension_t *)malloc(sizeof(ptls_on_extension_t));\n        memset(ctx->on_extension, 0, sizeof(ptls_on_extension_t));\n        ctx->on_extension->cb = tls_on_extension_cb;\n        \n        ctx->get_time = &ptls_get_time;\n        const char * is_zrtt = getenv(\"ZERORTT_TEST\");\n        \n        ctx->max_early_data_size = 0xFFFFFFFF;\n\n        std::cerr << \"PROUT 3 \"  << std::endl;\n        \n        ptls_handshake_properties_t *handshake_properties = new ptls_handshake_properties_t; \n        memset(handshake_properties, 0, sizeof(ptls_handshake_properties_t));\n        handshake_properties->collect_extension = tls_collect_extensions_cb;\n        handshake_properties->collected_extensions = tls_collected_extensions_cb;\n    \n        std::cerr << \"PROUT 4 \" << std::endl;\n        \n        ptls_iovec_t *alpn_vec = new(ptls_iovec_t);  // TODO: will leak this\n        \n        // h3-x == HTTP/3 over QUIC \n        // hq-x == HTTP/0.9 over QUIC\n        alpn_vec->base = (uint8_t*) \"hq-interop\";\n        if(const char* env_p = std::getenv(\"TEST_ALPN\")) { \n            std::cerr << \"TEST_ALPN \" << env_p << std::endl;\n            alpn_vec->base = (uint8_t*) env_p;\n        }\n\n        alpn_vec->len = strlen((char *)(alpn_vec->base));\n        handshake_properties->client.negotiated_protocols.count = 1;\n        handshake_properties->client.negotiated_protocols.list  = alpn_vec;\n\n        // add the extensions\n        ptls_raw_extension_t *ptls_exts = new ptls_raw_extension_t[e.size()+1];\n        for (unsigned i = 0; i < e.size(); i++) {\n            `tls_ser` ser;\n\t        std::cerr << \"etype =\" << std::endl;  \n            __ser(ser,e[i]);\n            unsigned etype = (((unsigned char)(ser.res[0])) << 8) + ((unsigned char)(ser.res[1]));\n            unsigned len = (((unsigned char)(ser.res[2])) << 8) + ((unsigned char)(ser.res[3]));\n            unsigned char *data = new unsigned char[ser.res.size()-4];\n            std::copy(ser.res.begin()+4,ser.res.end(),data);\n            ptls_exts[i].type = etype;\n            std::cerr << \"etype =\" << etype << std::endl;  \n            ptls_exts[i].data.base = data;\n            //std::cerr << \"data =\" << data << std::endl;  \n            ptls_exts[i].data.len = len;\n            std::cerr << \"len =\" << len << std::endl;  \n            // int eres = gnutls_session_ext_register (session, \"ext_name\", etype,\n            //   GNUTLS_EXT_APPLICATION, gnutls_ext_supp_recv_params,\n            //   gnutls_ext_supp_send_params, 0,0,0,0);\n            // if (eres != GNUTLS_E_SUCCESS) {\n            //     std::cerr << \"gnutls_session_ext_register\\n\";\n            //     exit(1);\n            // }\n        }\n        ptls_exts[e.size()].type = 0xffff;\n        ptls_exts[e.size()].data.base = NULL;\n        ptls_exts[e.size()].data.len = 0;\n        handshake_properties->additional_extensions = ptls_exts;\n\n        // Read the certificate, if we are a server\n\n        if (is_server) { //segfautl ??\n            int r = ptls_load_certificates(ctx, \"leaf_cert.pem\");\n            std::cerr << \"ptls_load_certificates \"  << r << std::endl;\n            /* Read the certificate file */\n            if (r != 0) {\n                std::cerr << \"could not load certificate file leaf_cert.pem\\n\";\n                exit(1);\n            } else if(set_sign_certificate_from_key_file(\"leaf_cert.key\", ctx)) {\n                std::cerr << \"could not load key file leaf_cert.key\\n\";\n                exit(1);\n            }\n        }\n\n        ptls_t *session;\n        session = ptls_new(ctx,is_server ? 1 : 0);\n        ptls_set_server_name(session, \"servername\", strlen(\"servername\"));\n\n        if(const char* env_p = std::getenv(\"TEST_IMPL\")) { \n            std::cerr << \"TEST_IMPL \" << env_p << std::endl;\n            std::cerr << \"is_server \" << is_server << std::endl;\n            if(strncmp(env_p,\"quic-go\",10) == 0 \n                || strncmp(env_p,\"quiche\",10) == 0 \n                   || strncmp(env_p,\"lsquic\",10) == 0 \n                   || strncmp(env_p,\"quinn\",10) == 0\n                      || strncmp(env_p,\"aioquic\",10) == 0) //TODO ask why sometime ALPN needed\n                if (is_server) { // && false\n                        std::cerr << \"ptls_set_negotiated_protocol\"  << std::endl;\n                        ptls_set_negotiated_protocol(session, \n                            (const char*) handshake_properties->client.negotiated_protocols.list[0].base, \n                            handshake_properties->client.negotiated_protocols.list[0].len);\n                } \n        }\n\n        picotls_connection *s = new picotls_connection(c, session, ctx, *`tls_api.upper.foo.cb`, handshake_properties, is_server);\n        *ptls_get_data_ptr(session) = s;   \n        \n        if(is_zrtt != NULL){ //is_server &&\n            /**\n            * @brief picoquic_server_setup_ticket_aead_contexts\n            */\n            uint8_t temp_secret[256]; /* secret_max */\n            int ret = 0;\n            std::cerr << \"picoquic_server_setup_ticket_aead_contexts 1 \" << std::endl;\n            ptls_cipher_suite_t cipher_ticket = { 0, &ptls_openssl_aes128gcm, &ptls_openssl_sha256 };\n            if (cipher_ticket.hash->digest_size > sizeof(temp_secret)) {\n                ret = -1;\n            } else {\n                std::cerr << \"picoquic_server_setup_ticket_aead_contexts 2 \" << std::endl;\n                //ctx->random_bytes(temp_secret, cipher_ticket.hash->digest_size);\n                for(int i = 0; i < cipher_ticket.hash->digest_size; i++)\n                    temp_secret[i] = 1;\n                std::cerr << \"picoquic_server_setup_ticket_aead_contexts 3 \" << std::endl;\n                /* Create the AEAD contexts */\n                ret = quic_set_aead_from_secret(&s->ticket_aead_encrypt, &cipher_ticket, 1, temp_secret, \"random label\");\n                if (ret == 0) {\n                    std::cerr << \"picoquic_server_setup_ticket_aead_contexts 4 \" << std::endl;\n                    ret = quic_set_aead_from_secret(&s->ticket_aead_decrypt, &cipher_ticket, 0, temp_secret, \"random label\");\n                }\n                std::cerr << \"picoquic_server_setup_ticket_aead_contexts 5 \" << std::endl;\n                /* erase the temporary secret */\n                ptls_clear_memory(temp_secret, cipher_ticket.hash->digest_size);\n            } \n\n            ptls_iovec_t ticket_psk = ptls_iovec_init(NULL, 0);\n                std::cerr << \"ptls_encrypt_ticket_t \" << is_zrtt << std::endl;\n                ptls_encrypt_ticket_t* encrypt_ticket = (ptls_encrypt_ticket_t*) malloc(sizeof(ptls_encrypt_ticket_t)+ sizeof(ptls_iovec_t*));\n                if (encrypt_ticket != NULL) {\n                    encrypt_ticket->cb = tls_server_encrypt_ticket_cb;\n                    ptls_iovec_t** ppreceiver = (ptls_iovec_t**)(((char*)encrypt_ticket) + sizeof(ptls_encrypt_ticket_t));\n                    *ppreceiver = &ticket_psk;\n                    ctx->encrypt_ticket = encrypt_ticket;\n                }\n\n            ctx->ticket_lifetime = 100000; /* 100,000 seconds, a bit more than one day */\n            ctx->max_early_data_size = 0xFFFFFFFF;\n            ctx->require_dhe_on_psk = 1;\n            ctx->omit_end_of_early_data = 1;\n\n            ptls_iovec_t ticket_psk2 = ptls_iovec_init(NULL, 0);\n                std::cerr << \"ptls_save_ticket_t \" << is_zrtt << std::endl;\n                ptls_save_ticket_t* save_ticket = (ptls_save_ticket_t*) malloc(sizeof(ptls_save_ticket_t)+ sizeof(ptls_iovec_t*)); // + sizeof(ptls_iovec_t*)\n                if (save_ticket != NULL) {\n                    save_ticket->cb = tls_client_save_ticket_cb; //memory error\n                    ptls_iovec_t** ppreceiver2 = (ptls_iovec_t**)(((char*)save_ticket) + sizeof(ptls_save_ticket_t));\n                    *ppreceiver2 = &ticket_psk2;\n                    ctx->save_ticket = save_ticket;\n                }\n        }\n\n        if(is_zrtt == NULL){\n            std::cerr << \"PROUT 2 \" << std::endl;\n            ctx->ticket_lifetime = 0; // no ticket? was: 100000; /* 100,000 seconds, a bit more than one day */\n            ctx->require_dhe_on_psk = 1;\n            ctx->omit_end_of_early_data = 0;\n        }\n\n        std::cerr << \"ptls_get_data_ptr\"  << std::endl;\n\n\t    `tls_api.upper.foo.cid_map`[c] = s;\n        \n        std::cerr << \"cid_map[c] = s;\"  << std::endl;\n\n        // Start the handshake if we are the client. The in_epoch is zero for \"initial\".\n\n        if (!is_server) \n            picotls_do_handshake(s,0,0,0);\n        >>>",
            "<<<\n\t        if (0 <= `fml:x` && `fml:x` < (`index`)`fml:a`.size()) \n\t            `fml:a`[`fml:x`] = `fml:y`;\n\t    >>>",
            "{}",
            "<<<\n                for (unsigned i = 0; i < `fml:b`.size(); i++)\n\t            `fml:a`.push_back(`fml:b`[i]);\n            >>>",
            "{}",
            "{if nclients > 1 {local loc:cdx {loc:cdx := clients.client.arr.begin(clients.clients); while loc:cdx < clients.client.arr.end(clients.clients)\n{local loc:cc {loc:cc := clients.client.arr.value(clients.clients,loc:cdx); call loc:cdx := clients.client.idx.next(loc:cdx)}}}}\nelse {call client.set_ep(fml:src)}; local loc:0 {call loc:0 := bytes_to_version(stream_data.segment(fml:spkt,1,5)); local loc:version {loc:version := loc:0; local loc:lens {loc:lens := stream_data.value(fml:spkt,5); local loc:dcil {loc:dcil := bfe[0][7](stream_data.value(fml:spkt,5)); local loc:0 {call loc:0 := cid_to_bytes(0:cid, 1:cid_length); local loc:ikm {loc:ikm := loc:0; if loc:dcil ~= 0 {client_initial_dcil := loc:dcil; loc:ikm := stream_data.segment(fml:spkt,6,6 + loc:dcil)}; local loc:0 {call loc:0 := bytes_to_cid(loc:ikm); local loc:dcid {loc:dcid := loc:0; local loc:scil {loc:scil := bfe[0][7](stream_data.value(fml:spkt,6 + loc:dcil)); local loc:0 {call loc:0 := cid_to_bytes(0:cid, 1:cid_length); local loc:skm {loc:skm := loc:0; if loc:scil ~= 0 {client_initial_scil := loc:scil; client_non_zero_scil := true; loc:skm := stream_data.segment(fml:spkt,6 + loc:dcil + 1,6 + loc:dcil + 1 + loc:scil)}; local loc:0 {call loc:0 := bytes_to_cid(loc:skm); local loc:scid {loc:scid := loc:0; if loc:scil = 0 | loc:dcil = 0 {issued_zero_length_cid := true}; assert loc:dcil >= 8; if ~retry_sent(loc:dcid) {client_initial_dcid := loc:dcid; client_initial_scid := loc:scid; call export_length_cid_extension(loc:dcil, loc:scil); call export_length_cid(loc:dcil, loc:scil)}; if ~tp_client_set | negocation_of_version(fml:src) {local loc:0 {call loc:0 := tls_extensions.empty; local loc:extns {loc:extns := loc:0; local loc:0 {call loc:0 := make_transport_parameters; call loc:extns := tls_extensions.append(loc:extns, loc:0)}; if zero_rtt_client_test {call tls_api.upper.create_0rtt_client(0:tls_api.id, true, loc:extns)}\nelse {call tls_api.upper.create(0:tls_api.id, true, loc:extns)}; tp_client_set := true}}}; client_initial_version := loc:version; if client_initial_version ~= initial_version & client_initial_version ~= 0xfaceb002 {negocation_of_version(fml:src) := true}\nelse {if (~initial_keys_set(loc:dcid) & retry_client_test -> retry_sent(loc:dcid)) | negocation_of_version(fml:src) {call export_length_cid_extension(loc:dcil, loc:scil); negocation_of_version(fml:src) := false; local loc:0 {call loc:0 := stream_data.empty; local loc:salt {loc:salt := loc:0; if client_initial_version = 0xfaceb002 | client_initial_version = 0xff00001b | client_initial_version = 0xff00001c {call loc:salt := stream_data.append(loc:salt, 0xc3:byte); call loc:salt := stream_data.append(loc:salt, 0xee:byte); call loc:salt := stream_data.append(loc:salt, 0xf7:byte); call loc:salt := stream_data.append(loc:salt, 0x12:byte); call loc:salt := stream_data.append(loc:salt, 0xc7:byte); call loc:salt := stream_data.append(loc:salt, 0x2e:byte); call loc:salt := stream_data.append(loc:salt, 0xbb:byte); call loc:salt := stream_data.append(loc:salt, 0x5a:byte); call loc:salt := stream_data.append(loc:salt, 0x11:byte); call loc:salt := stream_data.append(loc:salt, 0xa7:byte); call loc:salt := stream_data.append(loc:salt, 0xd2:byte); call loc:salt := stream_data.append(loc:salt, 0x43:byte); call loc:salt := stream_data.append(loc:salt, 0x2b:byte); call loc:salt := stream_data.append(loc:salt, 0xb4:byte); call loc:salt := stream_data.append(loc:salt, 0x63:byte); call loc:salt := stream_data.append(loc:salt, 0x65:byte); call loc:salt := stream_data.append(loc:salt, 0xbe:byte); call loc:salt := stream_data.append(loc:salt, 0xf9:byte); call loc:salt := stream_data.append(loc:salt, 0xf5:byte); call loc:salt := stream_data.append(loc:salt, 0x02:byte)}; if client_initial_version = 0xff00001d {call loc:salt := stream_data.append(loc:salt, 0xaf:byte); call loc:salt := stream_data.append(loc:salt, 0xbf:byte); call loc:salt := stream_data.append(loc:salt, 0xec:byte); call loc:salt := stream_data.append(loc:salt, 0x28:byte); call loc:salt := stream_data.append(loc:salt, 0x99:byte); call loc:salt := stream_data.append(loc:salt, 0x93:byte); call loc:salt := stream_data.append(loc:salt, 0xd2:byte); call loc:salt := stream_data.append(loc:salt, 0x4c:byte); call loc:salt := stream_data.append(loc:salt, 0x9e:byte); call loc:salt := stream_data.append(loc:salt, 0x97:byte); call loc:salt := stream_data.append(loc:salt, 0x86:byte); call loc:salt := stream_data.append(loc:salt, 0xf1:byte); call loc:salt := stream_data.append(loc:salt, 0x9c:byte); call loc:salt := stream_data.append(loc:salt, 0x61:byte); call loc:salt := stream_data.append(loc:salt, 0x11:byte); call loc:salt := stream_data.append(loc:salt, 0xe0:byte); call loc:salt := stream_data.append(loc:salt, 0x43:byte); call loc:salt := stream_data.append(loc:salt, 0x90:byte); call loc:salt := stream_data.append(loc:salt, 0xa8:byte); call loc:salt := stream_data.append(loc:salt, 0x99:byte)}; if client_initial_version = 0x00000001 | client_initial_version = 0xff000022 {call loc:salt := stream_data.append(loc:salt, 0x38:byte); call loc:salt := stream_data.append(loc:salt, 0x76:byte); call loc:salt := stream_data.append(loc:salt, 0x2c:byte); call loc:salt := stream_data.append(loc:salt, 0xf7:byte); call loc:salt := stream_data.append(loc:salt, 0xf5:byte); call loc:salt := stream_data.append(loc:salt, 0x59:byte); call loc:salt := stream_data.append(loc:salt, 0x34:byte); call loc:salt := stream_data.append(loc:salt, 0xb3:byte); call loc:salt := stream_data.append(loc:salt, 0x4d:byte); call loc:salt := stream_data.append(loc:salt, 0x17:byte); call loc:salt := stream_data.append(loc:salt, 0x9a:byte); call loc:salt := stream_data.append(loc:salt, 0xe6:byte); call loc:salt := stream_data.append(loc:salt, 0xa4:byte); call loc:salt := stream_data.append(loc:salt, 0xc8:byte); call loc:salt := stream_data.append(loc:salt, 0x0c:byte); call loc:salt := stream_data.append(loc:salt, 0xad:byte); call loc:salt := stream_data.append(loc:salt, 0xcc:byte); call loc:salt := stream_data.append(loc:salt, 0xbb:byte); call loc:salt := stream_data.append(loc:salt, 0x7f:byte); call loc:salt := stream_data.append(loc:salt, 0x0a:byte)}; call show_set_initial_keys(loc:ikm); call tls_api.upper.set_initial_keys(0:tls_api.id, loc:salt, loc:ikm); initial_keys_set(loc:dcid) := true}}}}}}}}}}}}}}}}}}",
            "{}",
            "<<<\n                if ((`index`)`fml:a`.size() > 0)\n                    `fml:res` = `fml:a`.back();\n            >>>",
            "<<<\n\t        `fml:s` = (`prot.idx`) `fml:a`.size();\n\t    >>>",
            "{used_cid(fml:dcid) := true; connected(fml:dcid) := true; connected_to(fml:dcid) := fml:scid}",
            "assert arr_pkt_num_s.end(fml:a) = 0",
            "<<<\n\t        if (`fml:a`.size() > 0) {\n\t            a.pop_back();\n\t        }\n            >>>",
            "<<<\n\t    std::vector<char> buf(y.size());\n\t    std::copy(y.begin(),y.end(),buf.begin());\n\t    `quic_deser_retry` des(buf);\n\t    __deser(des,x);\n\t    >>>",
            "assert 0:quic_packet.idx <= fml:x & fml:x < quic_packet.retired_cids.end(fml:a)",
            "{assert forged_pkts.end(fml:a) = fml:s; assert 0:index <= X & X < forged_pkts.end(old_fml:a) -> forged_pkts.value(fml:a,X) = forged_pkts.value(old_fml:a,X); assert forged_pkts.end(old_fml:a) <= X & X < fml:s -> forged_pkts.value(fml:a,X) = fml:v}",
            "<<<\t/*if(is_vnet) {\n\t\tstruct sockaddr_in v_dst = {};\n\t\tv_dst.sin_addr.s_addr = htonl(addr.addr);\n\t\t//inet_pton(AF_INET, htonl(dst.addr), &v_dst.sin_addr.s_addr);\n\t\tv_dst.sin_port = htons(dst.port);\n\t\tv_dst.sin_family = AF_INET;\n\t\tstd::cerr << \"sending from socket: \" << s << std::endl;\n\t\tif (sendto(s, buf, len, 0, (struct sockaddr*)&v_dst, sizeof(struct sockaddr_in)) != len) {\n\t\t\tchar s[100];\n\t\t\tsprintf(s, \"sendto %s\", buf);\n\t\t\tperror(s);\n\t\t\texit(EXIT_FAILURE);\n\t\t}\n\t} else {*/\n\t\tstruct sockaddr_in dstaddr;\n\t\tdstaddr.sin_family = AF_INET;\n\t\tdstaddr.sin_addr.s_addr = htonl(dst.addr);\n\t\t//dstaddr.sin_addr.s_addr = htonl(INADDR_ANY);\n\t\tdstaddr.sin_port = htons(dst.port);\n\t\tstd::cerr << \"sending from socket: \" << s << std::endl;\n\t\t\n\t\tstruct sockaddr_in sin;\n\t\tsocklen_t len = sizeof(sin);\n\t\tif (::getsockname(s, (struct sockaddr *)&sin, &len) == -1)\n\t\t\tperror(\"getsockname\");\n\t\telse\n\t\t\tstd::cerr <<  \"port number \" << ntohs(sin.sin_port)  << std::endl;\n\t\tstd::cerr << \"sending to id: \" << x << std::endl;\n\t\tstd::cerr << \"sending to id: \" << me << \" addr: \" << ntohl(dstaddr.sin_addr.s_addr) << \" port: \" << ntohs(dstaddr.sin_port) << std::endl;\n\t\t`quic_prot_ser` sr;\n\t\t__ser(sr,x);\n\t\tif (::getsockname(s, (struct sockaddr *)&sin, &len) == -1)\n\t\t\tperror(\"getsockname\");\n\t\telse\n\t\t\tstd::cerr <<  \"port number \" << ntohs(sin.sin_port)  << std::endl;\n\t\t\n\t\t\n\t\tint error = 0;\n\t\tsocklen_t lsen = sizeof (error);\n\t\tint retval = ::getsockopt (s, SOL_SOCKET, SO_ERROR, &error, &lsen);\n\t\t\n\t\tif (retval != 0) {\n\t\t\t/* there was a problem getting the error code */\n\t\t\tstd::cerr << \"error getting socket error code: \" << strerror(retval)  << std::endl;\n\t\t\treturn;\n\t\t}\n\n\t\tif (error != 0) {\n\t\t\t/* socket has a non zero error status */\n\t\t\tstd::cerr <<  \"socket error: \" << strerror(error)  << std::endl;\n\t\t}\n\t\t\n\t\tif (::sendto(s,&sr.res[0],sr.res.size(),0,(struct sockaddr *)&dstaddr,sizeof(dstaddr)) < 0) \n\tif (::sendto(s,&sr.res[0],sr.res.size(),0,(struct sockaddr *)&dstaddr,sizeof(dstaddr)) < 0) \n\t\tif (::sendto(s,&sr.res[0],sr.res.size(),0,(struct sockaddr *)&dstaddr,sizeof(dstaddr)) < 0) \n\t#ifdef _WIN32\n\t\t\t\t{ std::cerr << \"sendto failed \" << WSAGetLastError() << \"\\n\"; exit(1); }\n\t#else\n\t\t\t\t{ perror(\"sendto failed\"); exit(1); }\n\t#endif\n\t\terror = 0;\n\t\tlsen = sizeof (error);\n\t\tretval = ::getsockopt (s, SOL_SOCKET, SO_ERROR, &error, &lsen);\n\t\t\n\t\tif (retval != 0) {\n\t\t\t/* there was a problem getting the error code */\n\t\t\tstd::cerr << \"error getting socket error code: \" << strerror(retval)  << std::endl;\n\t\t\treturn;\n\t\t}\n\n\t\tif (error != 0) {\n\t\t\t/* socket has a non zero error status */\n\t\t\tstd::cerr <<  \"socket error: \" << strerror(error)  << std::endl;\n\t\t}\n\n\t\tstd::cerr << \"sending id finish\" << std::endl;\n\t//}\n\t\n\t>>>",
            "{}",
            "assert quic_packet_retry.retired_cids.value(fml:a,fml:x) = fml:y",
            "assert 0:replayed_quic_packet_0rtt.idx <= fml:x & fml:x < replayed_quic_packet_0rtt.retired_cids.end(fml:a)",
            "{}",
            "<<<\n\t        if (`fml:a`.size() > 0) {\n\t            a.pop_back();\n\t        }\n            >>>",
            "{}",
            "<<<\n                for (unsigned i = 0; i < `fml:b`.size(); i++)\n\t            `fml:a`.push_back(`fml:b`[i]);\n            >>>",
            "{}",
            "{}",
            "assert 0:vector[tls.cipher_suite].domain <= fml:s",
            "{}",
            "<<<\n                for (unsigned i = 0; i < `fml:a`.size()/2; i++) {\n                    std::swap(`fml:a`[i],`fml:a`[`fml:a`.size()-i-1]);\n                }\n            >>>",
            "assert 0:vector[tls.psk_identity].domain < fml:x",
            "{}",
            "assert 0:replayed_quic_packet_0rtt.idx <= fml:x & fml:x < replayed_quic_packet_0rtt.retired_cids.end(fml:a)",
            "{}",
            "fml:y := fml:x - 1",
            "local loc:cdx {loc:cdx := 0:clients.client.idx; while loc:cdx < 2\n{if fml:src = clients.client.ep(clients.client.arr.value(clients.clients,loc:cdx)) {fml:tls_id := clients.client.tls_id(clients.client.arr.value(clients.clients,loc:cdx))}; call loc:cdx := clients.client.idx.next(loc:cdx)}}",
            "{assert replayed_quic_packet_0rtt.retired_cids.end(fml:a) = replayed_quic_packet_0rtt.retired_cids.end(old_fml:a); assert replayed_quic_packet_0rtt.retired_cids.value(fml:a,X) = (fml:y if (X = fml:x) else replayed_quic_packet_0rtt.retired_cids.value(old_fml:a,X))}",
            "{}",
            "{assert fml:y < fml:x & (Y:forged_quic_packet.idx < fml:x -> Y <= fml:y); assert forged_quic_packet.idx.succ(fml:y,fml:x)}",
            "<<<\n\t        if (0 <= `fml:x` && `fml:x` < (`frame.ack_ecn.range.idx`)`fml:a`.size()) \n\t            `fml:a`[`fml:x`] = `fml:y`;\n\t    >>>",
            "<<<\n\t    `quic_ser_zerortt` ser;\n\t    __ser(ser,x);\n\t    y.resize(ser.res.size());\n\t    for (unsigned i = 0; i < ser.res.size(); i++)\n\t        y[i] = (unsigned char) ser.res[i];\n//\t    std::copy(ser.res.begin(),ser.res.end(),y.begin());\n\t    >>>",
            "{}",
            "<<<\n\t        `fml:a`.push_back(`fml:v`);\n            >>>",
            "fml:y := fml:x - 1",
            "{}",
            "local loc:jdx_s {loc:jdx_s := 0:jdx_s; while loc:jdx_s < arr_pkt_num_s.end(lastest_pkt_num_sender)\n{local loc:seq {loc:seq := arr_pkt_num_s.value(lastest_pkt_num_sender,loc:jdx_s); local loc:idx_s {loc:idx_s := 0:idx_s; while loc:seq <= fml:largest_acked & loc:idx_s < arr_streamid_s.end(lastest_stream_id_sender(loc:seq))\n{local loc:sid {loc:sid := arr_streamid_s.value(lastest_stream_id_sender(loc:seq),loc:idx_s); if sending_resetSent(loc:sid) {call handle_sending_resetRecvd(loc:sid)}\nelse {if sending_dataSent(loc:sid) {call handle_sending_dataRecvd(loc:sid)}}; call loc:idx_s := idx_s.next(loc:idx_s)}}; call loc:jdx_s := jdx_s.next(loc:jdx_s)}}}}",
            "<<<\n                for (unsigned i = 0; i < `fml:b`.size(); i++)\n\t            `fml:a`.push_back(`fml:b`[i]);\n            >>>",
            "{}",
            "<<<\n                /**\n                    Not working in localhost but should be ok in private adress TODO\n                        -> To simulate that we set: sock_mim_client = sock (from server) to simulate NAT\n                */\n                // -o lo\n                std::string command = \"sudo iptables -t nat -A POSTROUTING -d 10.0.3.1 -p udp --sport 4439:4439 -j SNAT --to-source 10.0.1.1:\" + std::to_string(dst); //  # error in localhost\n                int n = command.length();\n\n                // declaring character array\n                char command_array[n + 1];\n            \n                // copying the contents of the\n                // string to char array\n                strcpy(command_array, command.c_str());\n\n                int cr = system(command_array);\n            >>>",
            "{assert fml:y < fml:x & (Y:tls.handshakes.domain < fml:x -> Y <= fml:y); assert tls.handshakes.domain.succ(fml:y,fml:x)}",
            "{}",
            "assert fml:s = quic_packet_0rtt.arr.end(fml:a)",
            "<<<\n\t        `fml:a`.push_back(`fml:v`);\n            >>>",
            "{}",
            "{receiving_recv(S) := false; receiving_sizeKnown(S) := false; receiving_dataRecvd(S) := false; receiving_dataRead(S) := false; receiving_resetRecvd(S) := false; receiving_resetRead(S) := false}",
            "{}",
            "{assert fml:y < fml:x & (Y:jdx_r < fml:x -> Y <= fml:y); assert jdx_r.succ(fml:y,fml:x)}",
            "{}",
            "<<<\n\t        if (`fml:a`.size() > 0) {\n\t            a.pop_back();\n\t        }\n            >>>",
            "{assert frame.ack_ecn.range.arr.end(fml:a) > frame.ack_ecn.range.arr.end(old_fml:a) & ~(frame.ack_ecn.range.arr.end(old_fml:a) < X & X < frame.ack_ecn.range.arr.end(fml:a)); assert 0:frame.ack_ecn.range.idx <= X & X < frame.ack_ecn.range.arr.end(old_fml:a) -> frame.ack_ecn.range.arr.value(fml:a,X) = frame.ack_ecn.range.arr.value(old_fml:a,X); assert frame.ack_ecn.range.arr.value(fml:a,frame.ack_ecn.range.arr.end(old_fml:a)) = fml:v}",
            "assert 0:forged_quic_packet.idx <= fml:x & fml:x < forged_quic_packet.arr.end(fml:a)",
            "<<<\n\t        if (`fml:a`.size() > 0) {\n\t            a.pop_back();\n\t        }\n            >>>",
            "assert 0:quic_packet_vn.idx < fml:x",
            "{assert servers.server.arr.end(fml:a) = fml:s; assert 0:servers.server.idx <= X & X < servers.server.arr.end(old_fml:a) -> servers.server.arr.value(fml:a,X) = servers.server.arr.value(old_fml:a,X); assert servers.server.arr.end(old_fml:a) <= X & X < fml:s -> servers.server.arr.value(fml:a,X) = fml:v}",
            "{}",
            "<<<\n\t        unsigned __old_size = `fml:a`.size();\n\t        `fml:a`.resize(`fml:s`);\n\t        for (unsigned i = __old_size; i < (unsigned)`fml:s`; i++)\n\t            `fml:a`[i] = v;\n            >>>",
            "{}",
            "assert forged_quic_packet_retry.arr.value(fml:a,fml:x) = fml:y",
            "{}",
            "{}",
            "{}",
            "{assert tls.handshakes.end(fml:a) = tls.handshakes.end(old_fml:a); assert tls.handshakes.value(fml:a,X) = (fml:y if (X = fml:x) else tls.handshakes.value(old_fml:a,X))}",
            "{assert forged_protected_quic_packet.retired_cids.end(fml:a) = fml:s; assert 0:forged_protected_quic_packet.idx <= X & X < forged_protected_quic_packet.retired_cids.end(old_fml:a) -> forged_protected_quic_packet.retired_cids.value(fml:a,X) = forged_protected_quic_packet.retired_cids.value(old_fml:a,X); assert forged_protected_quic_packet.retired_cids.end(old_fml:a) <= X & X < fml:s -> forged_protected_quic_packet.retired_cids.value(fml:a,X) = fml:v}",
            "assert versions_bv.value(fml:a,fml:x) = fml:y",
            "{if nclients > 1 {local loc:cdx {loc:cdx := clients.client.arr.begin(clients.clients); while loc:cdx < clients.client.arr.end(clients.clients)\n{local loc:cc {loc:cc := clients.client.arr.value(clients.clients,loc:cdx); call loc:cdx := clients.client.idx.next(loc:cdx)}}}}\nelse {call client.set_ep(fml:src)}; local loc:0 {call loc:0 := bytes_to_version(stream_data.segment(fml:spkt,1,5)); local loc:ver {loc:ver := loc:0; local loc:lens {loc:lens := stream_data.value(fml:spkt,5); local loc:dcil {loc:dcil := bfe[0][7](stream_data.value(fml:spkt,5)); local loc:0 {call loc:0 := cid_to_bytes(0:cid, 1:cid_length); local loc:ikm {loc:ikm := loc:0; if loc:dcil ~= 0 {client_initial_dcil := loc:dcil; loc:ikm := stream_data.segment(fml:spkt,6,6 + loc:dcil)}; local loc:scil {loc:scil := bfe[0][7](stream_data.value(fml:spkt,6 + loc:dcil)); local loc:0 {call loc:0 := cid_to_bytes(0:cid, 1:cid_length); local loc:skm {loc:skm := loc:0; if loc:scil ~= 0 {client_initial_scil := loc:scil; client_non_zero_scil := true; loc:skm := stream_data.segment(fml:spkt,6 + loc:dcil + 1,6 + loc:dcil + 1 + loc:scil)}; assert loc:dcil >= 8; call client_initial_dcid := bytes_to_cid(loc:ikm); call client_initial_scid := bytes_to_cid(loc:skm); call export_length_cid_extension(loc:scil, loc:dcil); local loc:0 {call loc:0 := pkt_serdes_0rtt.from_bytes(fml:spkt); local loc:pkt {loc:pkt := loc:0; quic_packet_0rtt.ptype(loc:pkt) := quic_packet_type.zero_rtt; call recv_0rtt_pkt(fml:src, fml:dst, loc:pkt); call infer_tls_events_0rtt(fml:src, fml:dst, loc:pkt); call packet_event_0rtt(fml:src, fml:dst, loc:pkt)}}}}}}}}}}}}",
            "assert cids.value(fml:a,fml:x) = fml:y",
            "<<<\n\t        `fml:a`.push_back(`fml:v`);\n            >>>",
            "{}",
            "{}",
            "{assert quic_packet_0rtt.arr.end(fml:a) > quic_packet_0rtt.arr.end(old_fml:a) & ~(quic_packet_0rtt.arr.end(old_fml:a) < X & X < quic_packet_0rtt.arr.end(fml:a)); assert 0:quic_packet_0rtt.idx <= X & X < quic_packet_0rtt.arr.end(old_fml:a) -> quic_packet_0rtt.arr.value(fml:a,X) = quic_packet_0rtt.arr.value(old_fml:a,X); assert quic_packet_0rtt.arr.value(fml:a,quic_packet_0rtt.arr.end(old_fml:a)) = fml:v}",
            "<<<\n    val = b;\n    >>>",
            "{force_new_ack := false; call enqueue_frame(fml:scid, fml:f, fml:e, false)}",
            "{}",
            "<<<\n            const char * session_file = getenv(\"RETRY_TOKEN_FILE\");\n            FILE *fp;\n            size_t len = 0;\n            ssize_t read;\n            char * line = NULL;\n            if(session_file != NULL) {\n                fp = fopen(session_file,\"r\");\n                read = getline(&line, &len, fp);\n                fclose(fp);\n                bool is_error = false;\n                if(line != NULL) { \n                    std::cerr << \"RETRY_TOKEN_FILE 1 \" << line << std::endl;\n                    int hex_len = strlen(line);\n                    std::cerr << \"RETRY_TOKEN_FILE hex_len \" << hex_len << std::endl;\n                    uint8_t secret[hex_len/2];\n                    for (int j = 0; j < hex_len/2; j++) {\n                        int a = ws_xton(line[j*2]);\n                        int b = ws_xton(line[j*2 + 1]);\n                        if (a == -1 || b == -1) {\n                            is_error = true;\n                            std::cerr << \"a ERROR \" << line[j*2] << std::endl;\n                            std::cerr << \"b ERROR \" << line[j*2 + 1] << std::endl;\n                            std::cerr << \"RETRY_TOKEN_FILE ERROR \" << std::endl;\n                            break;\n                        }\n                        secret[j] = a << 4 | b;\n                        // std::cerr << \"RETRY_TOKEN_FILE a \" << a << std::endl;\n                        // std::cerr << \"RETRY_TOKEN_FILE b \" << b << std::endl;\n                        // std::cerr << \"RETRY_TOKEN_FILE secret[j] \" << secret[j] << std::endl;\n                    }  \n                    std::cerr << \"TEST_ST 2 \" << secret << std::endl;\n                    /*for(int i = (hex_len/2)-1; i >=0 && !is_error; i--)\n                        b.push_back(secret[i]);*/\n                    for(int i = 0; i < hex_len/2 && !is_error; i++)\n                        b.push_back(secret[i]);\n                }\n            }\n        >>>",
            "{}",
            "{assert versions.end(fml:a) > versions.end(old_fml:a) & ~(versions.end(old_fml:a) < X & X < versions.end(fml:a)); assert 0:index <= X & X < versions.end(old_fml:a) -> versions.value(fml:a,X) = versions.value(old_fml:a,X); assert versions.value(fml:a,versions.end(old_fml:a)) = fml:v}",
            "<<<\n\t        `fml:a`.resize(`fml:s`);\n\t        for (unsigned i = 0; i < `fml:s`; i++)\n\t            `fml:a`[i] = y;\n\t    >>>",
            "{}",
            "{}",
            "fml:y := fml:x - 1",
            "{assert bytes.end(fml:a) > bytes.end(old_fml:a) & ~(bytes.end(old_fml:a) < X & X < bytes.end(fml:a)); assert 0:idx <= X & X < bytes.end(old_fml:a) -> bytes.value(fml:a,X) = bytes.value(old_fml:a,X); assert bytes.value(fml:a,bytes.end(old_fml:a)) = fml:v}",
            "<<<\n\t        if (0 <= `fml:x` && `fml:x` < (`prot.idx`)`fml:a`.size()) \n\t            `fml:a`[`fml:x`] = `fml:y`;\n\t    >>>",
            "<<<\n\t        if (0 <= `fml:x` && `fml:x` < (`replayed_quic_packet_0rtt.idx`)`fml:a`.size()) \n\t            `fml:y` = `fml:a`[`fml:x`];\n\t    >>>",
            "assert arr_pkt_num_s.end(fml:a) = fml:s & arr_pkt_num_s.value(fml:a,X) = fml:y",
            "assert 0:vector[transport_parameter].domain < fml:x",
            "{assert fml:x < fml:y & (fml:x < Y -> fml:y <= Y); assert prot.idx.succ(fml:x,fml:y)}",
            "assert quic_packet.arr.end(fml:a) = fml:s & quic_packet.arr.value(fml:a,X) = fml:y",
            "{}",
            "assert 0:idx <= fml:x & fml:x < bytes.end(fml:a)",
            "<<<\n\t        `fml:s` = (`index`) `fml:a`.size();\n\t    >>>",
            "{assert arr_streamid_s.end(fml:a) = arr_streamid_s.end(old_fml:a); assert arr_streamid_s.value(fml:a,X) = (fml:y if (X = fml:x) else arr_streamid_s.value(old_fml:a,X))}",
            "fml:y := fml:x - 1",
            "{}",
            "assert fml:s = quic_packet_coal_0rtt.arr.end(fml:a)",
            "<<<\n\t    std::vector<char> buf(y.size());\n\t    std::copy(y.begin(),y.end(),buf.begin());\n\t    `quic_deser` des(buf);\n\t    __deser(des,x);\n\t    >>>",
            "assert 0:vector[tls.handshake].domain < fml:x",
            "assert fml:s = prot.arr.end(fml:a)",
            "{assert fml:y < fml:x & (Y:vector[tls.psk_identity].domain < fml:x -> Y <= fml:y); assert vector[tls.psk_identity].domain.succ(fml:y,fml:x)}",
            "{if (~zero_rtt_allowed | zero_rtt_sent) & fml:e ~= quic_packet_type.zero_rtt {assert connected(fml:dcid) & connected_to(fml:dcid) = fml:scid; assert fml:e = quic_packet_type.one_rtt & established_1rtt_keys(fml:scid)}\nelse {assert fml:e = quic_packet_type.one_rtt & established_1rtt_keys(fml:scid) | fml:e = quic_packet_type.zero_rtt & ~established_1rtt_keys(fml:scid)}; if ~zero_rtt_allowed | zero_rtt_sent {assert num_queued_frames(fml:scid) > 0 -> fml:e = queued_level(fml:scid)}; assert ~conn_closed(fml:scid); local loc:offset {loc:offset := (frame.stream.offset(fml:f) if frame.stream.off(fml:f) else 0); assert loc:offset + frame.stream.length(fml:f) <= stream_app_data_end(fml:dcid,frame.stream.id(fml:f)); assert frame.stream.data(fml:f) = stream_data.segment(stream_app_data(fml:dcid,frame.stream.id(fml:f)),loc:offset,loc:offset + frame.stream.length(fml:f)); assert frame.stream.fin(fml:f) <-> stream_app_data_finished(fml:dcid,frame.stream.id(fml:f)) & loc:offset + frame.stream.length(fml:f) = stream_app_data_end(fml:dcid,frame.stream.id(fml:f)); local loc:kind {loc:kind := get_stream_kind(frame.stream.id(fml:f)); if ~zero_rtt_allowed | zero_rtt_sent {assert conn_seen(fml:scid)}; assert stream_reset(fml:dcid,frame.stream.id(fml:f)) -> loc:offset + frame.stream.length(fml:f) <= stream_length(fml:dcid,frame.stream.id(fml:f)); if ~zero_rtt_allowed | zero_rtt_sent {local loc:0 {call loc:0 := stream_id_allowed(fml:dcid, frame.stream.id(fml:f), fml:e); assert loc:0}}\nelse {if _generating {assert frame.stream.id(fml:f) = 4}}}}}",
            "{}",
            "{}",
            "{}",
            "{unknown_ignore.is_set(fml:s) := true; unknown_ignore.value(fml:s) := fml:p}",
            "<<<\n       srand((unsigned) time(0)); //fixed or random seed ?\n       res = 0;\n       res = ::rand()%(max-min+1) + min;\n       std::cerr << \"between random: \" << res << \"\\n\";\n       >>>",
            "<<<\n\t        `fml:a`.push_back(`fml:v`);\n            >>>",
            "<<<\n\t        if (0 <= `fml:x` && `fml:x` < (`quic_packet.idx`)`fml:a`.size()) \n\t            `fml:a`[`fml:x`] = `fml:y`;\n\t    >>>",
            "<<<\n\t        if (0 <= `fml:x` && `fml:x` < (`forged_protected_quic_packet.idx`)`fml:a`.size()) \n\t            `fml:y` = `fml:a`[`fml:x`];\n\t    >>>",
            "fml:dst := (server.ep if (fml:tls_id = client.tls_id) else client.ep)",
            "{}",
            "{}",
            "<<<\n\t    >>>",
            "{assert forged_pkts.end(fml:a) = forged_pkts.end(old_fml:a); assert forged_pkts.value(fml:a,X) = (fml:y if (X = fml:x) else forged_pkts.value(old_fml:a,X))}",
            "{assert clients.client.arr.end(fml:a) = clients.client.arr.end(old_fml:a); assert clients.client.arr.value(fml:a,X) = (fml:y if (X = fml:x) else clients.client.arr.value(old_fml:a,X))}",
            "<<<\n        const char * session_file = getenv(\"RETRY_TOKEN_FILE\");\n        FILE *fp;\n        if(session_file != NULL && is_recv) {\n            unsigned str_d[token.size()];\n            for (int i = 0; i < token.size(); i++)\n                str_d[i] = token[i];\n            fp = fopen(session_file,\"w\");\n            for (int i = 0; i < token.size(); i++) {\n                //std::cerr <<  \"str_d[i] \"  << str_d[i] << std::endl;\n                //std::cerr <<  \"str_d[i] == 0 \"  << (str_d[i] == 0) << std::endl;\n                if(str_d[i] < 16)\n                    fprintf(fp, \"0%x\", str_d[i]);\n                else \n                    fprintf(fp, \"%x\", str_d[i]);\n            }  \n            fclose(fp);\n        }\n        \n\n        uint8_t plaintext[] = \"\";\n        //0xbe 0c 69 0b 9f 66 57 5a 1d 76 6b 54 e3 68 c8 4e : rfc9001\n        /*uint8_t key[16] = { 0xbe, 0x0c, 0x69, 0x0b, 0x9f, 0x66, 0x57,\n                            0x5a, 0x1d, 0x76, 0x6b, 0x54, 0xe3, 0x68, \n                            0xc8, 0x4e };*/\n\n        //0xcc ce 18 7e d0 9a 09 d0 57 28 15 5a 6c b9 6b e1\n        //0xcc 0xce 0x18 0x7e 0xd0 0x9a 0x09 0xd0 0x57 0x28 0x15 0x5a 0x6c 0xb9 0x6b 0xe1 : draft 29\n        uint8_t key[16]; \n\n        //0x4d 0x32 0xec 0xdb 0x2a 0x21 0x33 0xc8 0x41 0xe4 0x04 0x3d 0xf2 0x7d 0x44 0x30\n        if(pversion == 0xff00001c) {\n            uint8_t key2[16] = { 0x4d, 0x32, 0xec, 0xdb, 0x2a,\n                                 0x21, 0x33, 0xc8, 0x41, 0xe4, \n                                 0x04, 0x3d, 0xf2, 0x7d, 0x44, \n                                 0x30 };\n            for(int i = 0; i < 16;i++)\n                key[i] = key2[i];\n        }   \n        else if(pversion == 0xff00001d) {\n            uint8_t key2[16] = { 0xcc, 0xce, 0x18, 0x7e, 0xd0, \n                                 0x9a, 0x09, 0xd0, 0x57, 0x28, \n                                 0x15, 0x5a, 0x6c, 0xb9, 0x6b, \n                                 0xe1 };\n            for(int i = 0; i < 16;i++)\n                key[i] = key2[i];\n        }\n        else if(pversion == 0x00000001) {\n            //0xbe 0x0c 0x69 0x0b 0x9f 0x66 0x57 0x5a 0x1d 0x76 0x6b 0x54 0xe3 0x68 0xc8 0x4e\n            uint8_t key2[16] = { 0xbe, 0x0c, 0x69, 0x0b, 0x9f, \n                                 0x66, 0x57, 0x5a, 0x1d, 0x76, \n                                 0x6b, 0x54, 0xe3, 0x68, 0xc8, \n                                 0x4e };\n            for(int i = 0; i < 16;i++)\n                key[i] = key2[i];\n        }\n            \n        //0x461599d35d632bf2239825bb\n        /*uint8_t nonce[12] = { 0x46, 0x15, 0x99, 0xd3, 0x5d, 0x63, 0x2b,\n                              0xf2, 0x23, 0x98, 0x25, 0xbb };*/\n\n        //0xe5 0x49 0x30 0xf9 0x7f 0x21 0x36 0xf0 0x53 0x0a 0x8c 0x1c : draft 29\n        uint8_t nonce[12];\n        //0x4d 0x16 0x11 0xd0 0x55 0x13 0xa5 0x52 0xc5 0x87 0xd5 0x75\n        if(pversion == 0xff00001c) {\n            uint8_t nonce2[12] = { 0x4d, 0x16, 0x11, 0xd0, 0x55,\n                                   0x13, 0xa5, 0x52, 0xc5, 0x87, \n                                   0xd5, 0x75 }; //nonce[12]\n            for(int i = 0; i < 12; i++)\n                nonce[i] = nonce2[i];\n        }    \n        else if(pversion == 0xff00001d) {\n            uint8_t nonce2[12] = { 0xe5, 0x49, 0x30, 0xf9, 0x7f,\n                                   0x21, 0x36, 0xf0, 0x53, 0x0a, \n                                   0x8c, 0x1c }; //nonce[12]\n            for(int i = 0; i < 12; i++)\n                nonce[i] = nonce2[i];\n        }\n        else if(pversion == 0x00000001) {\n            //0x46 0x15 0x99 0xd3 0x5d 0x63 0x2b 0xf2 0x23 0x98 0x25 0xbb\n            uint8_t nonce2[12] = { 0x46, 0x15, 0x99, 0xd3, 0x5d,\n                                   0x63, 0x2b, 0xf2, 0x23, 0x98, \n                                   0x25, 0xbb }; //nonce[12]\n            for(int i = 0; i < 12; i++)\n                nonce[i] = nonce2[i];\n        }\n        \n        ptls_aead_context_t *aead = ptls_aead_new_direct(&ptls_openssl_aes128gcm, 1, key, nonce);\n        std::cerr << \"compute_retry_integrity_tag aead \" << aead <<  \"\\n\";\n    \n        \n        uint32_t checksum_length = aead->algo->tag_size;\n        std::cerr << \"c 3 \\n\";\n        std::cerr << \"compute_retry_integrity_tag ptls_aead_context_t \" << \"\\n\";\n\n        std::vector<uint8_t> ad;\n        //ad.resize(sizeof(odcid));\n        std::cerr << \"compute_retry_integrity_tag odcil \" << odcil << \"\\n\";\n        std::cerr << \"compute_retry_integrity_tag odcid \" << std::hex << odcid << \"\\n\";\n        std::cerr << \"compute_retry_integrity_tag h \" << h << \"\\n\";\n        std::cerr << \"compute_retry_integrity_tag pversion \" << std::hex << pversion << \"\\n\";\n        std::cerr << \"compute_retry_integrity_tag dcil \" << dcil << \"\\n\";\n        std::cerr << \"compute_retry_integrity_tag dcid \" << std::hex << dcid << \"\\n\";\n        std::cerr << \"compute_retry_integrity_tag scil \" <<  scil << \"\\n\";\n        std::cerr << \"compute_retry_integrity_tag scid \" << std::hex << scid << \"\\n\";\n        std::cerr << \"compute_retry_integrity_tag seq \" << std::dec << seq << \"\\n\";\n        \n        uint8_t pushed;\n        std::cerr << \"compute_retry_integrity_tag odcil \\n\";\n        ad.push_back(odcil);\n        for (int i = odcil-1; i >= 0; --i) {\n            pushed = (odcid.val >> (8*i)) & 0xff;\n            std::cerr << std::to_string(pushed) << \" \";\n            ad.push_back(pushed);  \n        }\n        std::cerr << \"\\n\";\n        ad.push_back(h);\n        std::cerr << \"compute_retry_integrity_tag version \\n\";\n        for (int i = 4-1; i >= 0; --i) {\n            pushed = (pversion >> (8*i)) & 0xff;\n            std::cerr << std::to_string(pushed) << \" \";\n            ad.push_back(pushed);\n        } \n        std::cerr << \"\\n\";\n        std::cerr << \"compute_retry_integrity_tag dcid \\n\";\n        ad.push_back(dcil);\n        for (int i = dcil-1; i >= 0; --i) {\n            pushed = (dcid.val >> (8*i)) & 0xff;\n            std::cerr << std::to_string(pushed) << \" \";\n            ad.push_back(pushed); \n        }\n        std::cerr << \"\\n\";\n        std::cerr << \"compute_retry_integrity_tag scid \\n\";\n        ad.push_back(scil); //scil\n        for (int i = scil-1; i >= 0; --i) {\n            pushed = (scid.val >> (8*i)) & 0xff;\n            std::cerr << std::to_string(pushed) << \" \";\n            ad.push_back(pushed); \n        }\n        \n        std::cerr << \"\\n\";\n        std::cerr << \"compute_retry_integrity_tag token size: \" << token.size()  << \"\\n\";\n        for (unsigned i = 0; i < token.size(); i++) {\n            std::cerr << std::hex << token[i] << ' ';\n            ad.push_back(token[i]);\n        }\n\n        std::cerr << \"\\n\";\n        //std::copy(token.begin(),token.end(),ad.end());\n\n        std::vector<uint8_t> bytes;\n        bytes.resize(ad.size());\n\n        std::cerr << \"compute_retry_integrity_tag ad size: \" << std::dec << ad.size()  << \"\\n\";\n        std::cerr << \"\\n\";\n\n        std::copy(ad.begin(),ad.end(),bytes.begin());\n        std::cerr << \"compute_retry_integrity_tag bytes size: \" << std::dec << bytes.size()  << \"\\n\";\n        std::cerr << \"\\n\";\n\n        std::vector<uint8_t> output;\n        output.resize(16);\n\n        std::cerr << \"compute_retry_integrity_tag output size: \" << std::dec << output.size()  << \"\\n\";\n        size_t encrypted = ptls_aead_encrypt(aead,\n          &output[0], &plaintext[0], 0 , seq, //seq, strnlen ?strlen(plaintext)\n          &bytes[0], bytes.size());\n        \n        cipher.resize(output.size());\n        std::copy(output.begin(),output.end(),cipher.begin());\n\n        std::cerr << \"compute_retry_integrity_tag encrypted size: \" << std::dec << encrypted  << \"\\n\";\n        std::cerr << \"compute_retry_integrity_tag output size: \" << std::dec << output.size()  << \"\\n\";\n        std::cerr << \"\\n\";\n\n        std::cerr << \"compute_retry_integrity_tag finish \" << \"\\n\";\n    >>>",
            "{}",
            "<<<\n\t        `fml:s` = (`replayed_quic_packet_0rtt.idx`) `fml:a`.size();\n\t    >>>",
            "{}",
            "<<<\n                for (unsigned i = 0; i < `fml:a`.size()/2; i++) {\n                    std::swap(`fml:a`[i],`fml:a`[`fml:a`.size()-i-1]);\n                }\n            >>>",
            "<<<\n\t        unsigned __old_size = `fml:a`.size();\n\t        `fml:a`.resize(`fml:s`);\n\t        for (unsigned i = __old_size; i < (unsigned)`fml:s`; i++)\n\t            `fml:a`[i] = v;\n            >>>",
            "<<<\n                for (unsigned i = 0; i < `fml:b`.size(); i++)\n\t            `fml:a`.push_back(`fml:b`[i]);\n            >>>",
            "<<<\n\t        if (`fml:a`.size() > 0) {\n\t            a.pop_back();\n\t        }\n            >>>",
            "{}",
            "<<<\n\t        if (0 <= `fml:x` && `fml:x` < (`vector[tls.extension].domain`)`fml:a`.size()) \n\t            `fml:y` = `fml:a`[`fml:x`];\n\t    >>>",
            "<<<\n\t        unsigned __old_size = `fml:a`.size();\n\t        `fml:a`.resize(`fml:s`);\n\t        for (unsigned i = __old_size; i < (unsigned)`fml:s`; i++)\n\t            `fml:a`[i] = v;\n            >>>",
            "<<<\n\t        if (`fml:a`.size() > 0) {\n\t            a.pop_back();\n\t        }\n            >>>",
            "<<<\n\t    >>>",
            "if _generating {local loc:0 {call loc:0 := pkt_serdes_vn.to_bytes(fml:pkt); local loc:spkt {loc:spkt := loc:0; local loc:0 {call loc:0 := prot.arr.empty; local loc:pkts {loc:pkts := loc:0; call loc:pkts := prot.arr.append(loc:pkts, loc:spkt); local loc:0,loc:1 {call loc:0 := endpoint_to_pid(fml:src); call loc:1 := endpoint_to_socket(fml:src); call net.send(loc:0, loc:1, fml:dst, loc:pkts)}}}}}}",
            "<<<\n\t        if (0 <= `fml:x` && `fml:x` < (`index`)`fml:a`.size()) \n\t            `fml:a`[`fml:x`] = `fml:y`;\n\t    >>>",
            "fml:y := fml:x + 1",
            "{}",
            "used_cid(C) := false",
            "{}",
            "<<<\n            install_reader(new sync_reader<`cid`,%`http_request_file.synced`>(c,`http_request_file.fildes`,`http_request_file.synced`, this));\n        >>>",
            "{}",
            "{}",
            "{}",
            "assert 0:prot.idx <= fml:s",
            "{}",
            "assert bytes.end(fml:a) = 0",
            "{attacker.enc_level := quic_packet_type.initial; ip.endpoint.protocol(attacker.ep) := ip.udp; ip.endpoint.addr(attacker.ep) := client_addr; ip.endpoint.port(attacker.ep) := client_port}",
            "assert forged_quic_packet_vn.arr.end(fml:a) = fml:s & forged_quic_packet_vn.arr.value(fml:a,X) = fml:y",
            "{assert forged_quic_packet.retired_cids.end(fml:a) = fml:s; assert 0:forged_quic_packet.idx <= X & X < forged_quic_packet.retired_cids.end(old_fml:a) -> forged_quic_packet.retired_cids.value(fml:a,X) = forged_quic_packet.retired_cids.value(old_fml:a,X); assert forged_quic_packet.retired_cids.end(old_fml:a) <= X & X < fml:s -> forged_quic_packet.retired_cids.value(fml:a,X) = fml:v}",
            "<<<\n                for (unsigned i = 0; i < `fml:b`.size(); i++)\n\t            `fml:a`.push_back(`fml:b`[i]);\n            >>>",
            "{}",
            "<<<\n\t    >>>",
            "clients.client.tls_id(clients.client.arr.value(clients.clients,fml:n)) := fml:e",
            "{}",
            "fml:y := fml:x + 1",
            "<<<\n        // TODO: actually delete everything here\n        picotls_connection *s = `tls_api.upper.foo.cid_map`[c];\n        ptls_free(s->gs);\n        free(s->cctx);\n        free(s->hsp);\n        free(s->session_ticket);\n        `tls_api.upper.foo.cid_map`.erase(c);\n\n\n        >>>",
            "{assert connected(fml:dcid) & connected_to(fml:dcid) = fml:scid; assert fml:e = quic_packet_type.one_rtt & established_1rtt_keys(fml:scid); assert num_queued_frames(fml:scid) > 0 -> fml:e = queued_level(fml:scid); assert ~issued_zero_length_cid; if ~_generating {assert frame.new_connection_id.retire_prior_to(fml:f) <= frame.new_connection_id.seq_num(fml:f)}; assert frame.new_connection_id.seq_num(fml:f) < max_rtp_num(fml:scid) -> send_retire_cid(fml:dcid)}",
            "{}",
            "assert tls_hand_extensions.value(fml:a,fml:x) = fml:y",
            "{}",
            "{}",
            "{}",
            "assert arr_streamid_s.value(fml:a,fml:x) = fml:y",
            "{}",
            "{}",
            "assert tls_extensions.end(fml:a) = fml:s & tls_extensions.value(fml:a,X) = fml:y",
            "{}",
            "<<<\n\t        `fml:a`.resize(`fml:s`);\n\t        for (unsigned i = 0; i < `fml:s`; i++)\n\t            `fml:a`[i] = y;\n\t    >>>",
            "<<<\n\t        `fml:a`.resize(`fml:s`);\n\t        for (unsigned i = 0; i < `fml:s`; i++)\n\t            `fml:a`[i] = y;\n\t    >>>",
            "{}",
            "{}",
            "<<<\n\t        unsigned __old_size = `fml:a`.size();\n\t        `fml:a`.resize(`fml:s`);\n\t        for (unsigned i = __old_size; i < (unsigned)`fml:s`; i++)\n\t            `fml:a`[i] = v;\n            >>>",
            "{preferred_address.is_set(fml:s) := true; preferred_address.value(fml:s) := fml:p}",
            "{}",
            "{}",
            "{}",
            "<<<\n\t        if (0 <= `fml:x` && `fml:x` < (`vector[transport_parameter].domain`)`fml:a`.size()) \n\t            `fml:y` = `fml:a`[`fml:x`];\n\t    >>>",
            "{}",
            "<<<\n\t        `fml:s` = (`quic_packet_vn.idx`) `fml:a`.size();\n\t    >>>",
            "assert 0:quic_packet_coal_0rtt.idx < fml:x",
            "assert forged_pkts.value(fml:a,fml:x) = fml:y",
            "assert fml:s = stream_data.end(fml:a)",
            "{}",
            "assert num_queued_frames(fml:scid) > 0 -> fml:e = queued_level(fml:scid)",
            "local loc:idx {loc:idx := fml:pos; fml:val := 0:stream_pos; while loc:idx < fml:pos + fml:len\n{local loc:byte {loc:byte := stream_data.value(fml:pkt,loc:idx); if loc:idx = fml:pos {loc:byte := bvand(loc:byte,0x3f)}; fml:val := 256:stream_pos * fml:val + bfe[0][7](loc:byte); call loc:idx := stream_pos.next(loc:idx)}}}",
            "{}",
            "{}",
            "{}",
            "{assert fml:y < fml:x & (Y:tls_api.id < fml:x -> Y <= fml:y); assert tls_api.id.succ(fml:y,fml:x)}",
            "fml:y := fml:x - 1",
            "<<<\n\t    >>>",
            "{assert bytes.end(fml:a) = fml:s; assert 0:idx <= X & X < bytes.end(old_fml:a) -> bytes.value(fml:a,X) = bytes.value(old_fml:a,X); assert bytes.end(old_fml:a) <= X & X < fml:s -> bytes.value(fml:a,X) = fml:v}",
            "assert fml:s = tls_hand_extensions.end(fml:a)",
            "{assert connected(fml:dcid) & connected_to(fml:dcid) = fml:scid; assert fml:e = quic_packet_type.one_rtt -> established_1rtt_keys(fml:scid); assert fml:e = quic_packet_type.handshake -> established_handshake_keys(fml:scid); assert num_queued_frames(fml:scid) > 0 -> fml:e = queued_level(fml:scid); assert connected(fml:scid) & connected_to(fml:scid) = fml:dcid; assert frame.connection_close.reason_phrase_length(fml:f) = stream_data.end(frame.connection_close.reason_phrase(fml:f)); if _generating {assert fml:e = quic_packet_type.one_rtt; assert ~conn_closed(fml:scid)}; conn_closed(fml:scid) := true; call handle_transport_error(frame.connection_close.err_code(fml:f))}",
            "<<<\n\t    // We don't want to close a socket when there is another thread\n\t    // waiting, because the other thread won't know what to do with the\n\t    // error. \n\n\t    // Instead we shut down the socket and let the other thread close it.\n\t    // If there is a reader thread, it will see EOF and close the socket. If there is\n\t    // on open writer thread, it will close the socket after we close the\n\t    // send queue. If the queue is already closed, closing it has no effect.\n\n\t    // invariant: if a socket is open there is a reader thread or\n\t    // an open writer thread, but not both. \n\n\t    // Because of this invariant, the socket will be closed exactly once.\n\n\t    ::shutdown(s,SHUT_RDWR);\n\n\t>>>",
            "local loc:dcid {loc:dcid := replayed_quic_packet_0rtt.dst_cid(fml:pkt); local loc:0 {call loc:0 := replayed_quic_packet_0rtt.long(fml:pkt); local loc:scid {loc:scid := (replayed_quic_packet_0rtt.src_cid(fml:pkt) if loc:0 else connected_to(loc:dcid)); if cid_mapped(loc:dcid) {loc:dcid := cid_to_aid(loc:dcid)}; if queued_ack_eliciting(loc:scid) {ack_credit(loc:dcid) := ack_credit(loc:dcid) + 1}; if ~queued_non_ack(loc:scid) {ack_credit(loc:scid) := ack_credit(loc:scid) - 1}; last_pkt_num(loc:scid,replayed_quic_packet_0rtt.ptype(fml:pkt)) := replayed_quic_packet_0rtt.seq_num(fml:pkt); if replayed_quic_packet_0rtt.ptype(fml:pkt) = quic_packet_type.zero_rtt & ~_generating {connected(the_cid) := true; connected(loc:scid) := true; connected_to(the_cid) := loc:scid; connected_to(loc:scid) := the_cid}; zero_rtt_sent := true; call queued_frames_rtt(loc:scid) := frame.arr.empty; queued_non_probing(loc:scid) := false; queued_non_ack(loc:scid) := false; queued_close(loc:scid) := false; num_queued_frames_rtt(loc:scid) := 0:frame.idx; queued_ack_eliciting(loc:scid) := false}}}",
            "assert fml:s = vector[tls.compression_method].end(fml:a)",
            "assert 0:forged_quic_packet_retry.idx <= fml:x & fml:x < forged_quic_packet_retry.retired_cids.end(fml:a)",
            "{assert vector[tls.extension].end(fml:a) = vector[tls.extension].end(old_fml:a); assert vector[tls.extension].value(fml:a,X) = (fml:y if (X = fml:x) else vector[tls.extension].value(old_fml:a,X))}",
            "<<<\n\t        `fml:a`.resize(`fml:s`);\n\t        for (unsigned i = 0; i < `fml:s`; i++)\n\t            `fml:a`[i] = y;\n\t    >>>",
            "{}",
            "<<<\n\t        `fml:a`.push_back(`fml:v`);\n            >>>",
            "assert 0:index <= fml:x & fml:x < versions.end(fml:a)",
            "<<<\n\t        if (0 <= `fml:x` && `fml:x` < (`replayed_quic_packet_0rtt.idx`)`fml:a`.size()) \n\t            `fml:y` = `fml:a`[`fml:x`];\n\t    >>>",
            "{}",
            "<<<\n\t        `fml:a`.resize(`fml:s`);\n\t        for (unsigned i = 0; i < `fml:s`; i++)\n\t            `fml:a`[i] = y;\n\t    >>>",
            "<<<\n\t        if (`fml:a`.size() > 0) {\n\t            a.pop_back();\n\t        }\n            >>>",
            "{}",
            "{assert quic_packet_retry.arr.end(fml:a) > quic_packet_retry.arr.end(old_fml:a) & ~(quic_packet_retry.arr.end(old_fml:a) < X & X < quic_packet_retry.arr.end(fml:a)); assert 0:quic_packet_retry.idx <= X & X < quic_packet_retry.arr.end(old_fml:a) -> quic_packet_retry.arr.value(fml:a,X) = quic_packet_retry.arr.value(old_fml:a,X); assert quic_packet_retry.arr.value(fml:a,quic_packet_retry.arr.end(old_fml:a)) = fml:v}",
            "assert 0:tls.handshakes.domain <= fml:x & fml:x < tls.handshakes.end(fml:a)",
            "assert 0:clients.client.idx <= fml:x & fml:x < clients.client.arr.end(fml:a)",
            "<<<\n\t    >>>",
            "{assert vector[tls.cipher_suite].end(fml:a) > vector[tls.cipher_suite].end(old_fml:a) & ~(vector[tls.cipher_suite].end(old_fml:a) < X & X < vector[tls.cipher_suite].end(fml:a)); assert 0:vector[tls.cipher_suite].domain <= X & X < vector[tls.cipher_suite].end(old_fml:a) -> vector[tls.cipher_suite].value(fml:a,X) = vector[tls.cipher_suite].value(old_fml:a,X); assert vector[tls.cipher_suite].value(fml:a,vector[tls.cipher_suite].end(old_fml:a)) = fml:v}",
            "<<<\n\t        if (`fml:a`.size() > 0) {\n\t            a.pop_back();\n\t        }\n            >>>",
            "assert 0:forged_quic_packet.idx <= fml:x & fml:x < forged_quic_packet.retired_cids.end(fml:a)",
            "{}",
            "{}",
            "{assert fml:y < fml:x & (Y:idx < fml:x -> Y <= fml:y); assert idx.succ(fml:y,fml:x)}",
            "{}",
            "{}",
            "{assert connected(fml:dcid) & connected_to(fml:dcid) = fml:scid; assert fml:e = quic_packet_type.one_rtt & established_1rtt_keys(fml:scid); assert num_queued_frames(fml:scid) > 0 -> fml:e = queued_level(fml:scid); assert connected(fml:scid) & connected_to(fml:scid) = fml:dcid; assert ~conn_closed(fml:scid); local loc:kind {loc:kind := bidir; if ~(max_stream_set(fml:dcid,loc:kind) & frame.max_streams.id(fml:f) < max_stream(fml:dcid,loc:kind)) {max_stream_set(fml:dcid,loc:kind) := true; max_stream(fml:dcid,loc:kind) := frame.max_streams.id(fml:f)}}}",
            "<<<\n\t        if (0 <= `fml:x` && `fml:x` < (`quic_packet_0rtt.idx`)`fml:a`.size()) \n\t            `fml:y` = `fml:a`[`fml:x`];\n\t    >>>",
            "<<<\n                if ((`vector[tls.psk_identity].domain`)`fml:a`.size() > 0)\n                    `fml:res` = `fml:a`.back();\n            >>>",
            "{}",
            "assert quic_packet.retired_cids.end(fml:a) = 0",
            "{}",
            "<<<\n\t        if (0 <= `fml:x` && `fml:x` < (`forged_quic_packet.idx`)`fml:a`.size()) \n\t            `fml:a`[`fml:x`] = `fml:y`;\n\t    >>>",
            "{}",
            "<<<\n       res = 0;\n       srand((unsigned) time(0)); //fixed or random seed ?\n       res = ::rand()%(max-1) + 0;\n       std::cerr << \"lower random: \" << res << \"\\n\";\n       >>>",
            "{assert forged_quic_packet.arr.end(fml:a) = fml:s; assert 0:forged_quic_packet.idx <= X & X < forged_quic_packet.arr.end(old_fml:a) -> forged_quic_packet.arr.value(fml:a,X) = forged_quic_packet.arr.value(old_fml:a,X); assert forged_quic_packet.arr.end(old_fml:a) <= X & X < fml:s -> forged_quic_packet.arr.value(fml:a,X) = fml:v}",
            "if _generating {assert fml:scid = the_cid}",
            "{assert quic_packet_0rtt.retired_cids.end(fml:a) > quic_packet_0rtt.retired_cids.end(old_fml:a) & ~(quic_packet_0rtt.retired_cids.end(old_fml:a) < X & X < quic_packet_0rtt.retired_cids.end(fml:a)); assert 0:quic_packet_0rtt.idx <= X & X < quic_packet_0rtt.retired_cids.end(old_fml:a) -> quic_packet_0rtt.retired_cids.value(fml:a,X) = quic_packet_0rtt.retired_cids.value(old_fml:a,X); assert quic_packet_0rtt.retired_cids.value(fml:a,quic_packet_0rtt.retired_cids.end(old_fml:a)) = fml:v}",
            "<<<\n                for (unsigned i = 0; i < `fml:b`.size(); i++)\n\t            `fml:a`.push_back(`fml:b`[i]);\n            >>>",
            "{}",
            "{second_client.enc_level := quic_packet_type.initial; ip.endpoint.protocol(second_client.ep) := ip.udp; ip.endpoint.addr(second_client.ep) := client_addr; ip.endpoint.port(second_client.ep) := client_port; if ip.endpoint.addr(second_client.ep) = 0x7f000001 | is_mim {ip.endpoint.interface(second_client.ep) := ip.lo}\nelse {ip.endpoint.interface(second_client.ep) := ip.ivy}}",
            "assert vector[tls.handshake].value(fml:a,fml:x) = fml:y",
            "{}",
            "{}",
            "<<<\n\t        unsigned __old_size = `fml:a`.size();\n\t        `fml:a`.resize(`fml:s`);\n\t        for (unsigned i = __old_size; i < (unsigned)`fml:s`; i++)\n\t            `fml:a`[i] = v;\n            >>>",
            "{}",
            "<<<\n\t        if (0 <= `fml:x` && `fml:x` < (`servers.server.idx`)`fml:a`.size()) \n\t            `fml:a`[`fml:x`] = `fml:y`;\n\t    >>>",
            "{assert fml:y < fml:x & (Y:frame.idx < fml:x -> Y <= fml:y); assert frame.idx.succ(fml:y,fml:x)}",
            "{is_no_error := true; is_internal_error := false; is_server_busy := false; is_flow_control_error := false; is_stream_limit_error := false; is_stream_state_error := false; is_final_size_error := false; is_frame_encoding_error := false; is_transport_parameter_error := false; is_connection_id_limit_error := false; is_protocol_violation := false; is_invalid_token := false; is_application_error := false; is_crypto_buffer_exceeded := false; is_crypto_error := false; is_version_negociation_error := false}",
            "<<<\n                for (unsigned i = 0; i < `fml:a`.size()/2; i++) {\n                    std::swap(`fml:a`[i],`fml:a`[`fml:a`.size()-i-1]);\n                }\n            >>>",
            "{}",
            "assert arr_pkt_num_r.end(fml:a) = fml:s & arr_pkt_num_r.value(fml:a,X) = fml:y",
            "{}",
            "assert quic_packet.arr.end(fml:a) = 0",
            "fml:y := fml:x + 1",
            "{force_new_ack := false; call enqueue_frame(fml:scid, fml:f, fml:e, false)}",
            "{}",
            "{}",
            "{assert quic_packet_coal_0rtt.retired_cids.end(fml:a) = fml:s; assert 0:quic_packet_coal_0rtt.idx <= X & X < quic_packet_coal_0rtt.retired_cids.end(old_fml:a) -> quic_packet_coal_0rtt.retired_cids.value(fml:a,X) = quic_packet_coal_0rtt.retired_cids.value(old_fml:a,X); assert quic_packet_coal_0rtt.retired_cids.end(old_fml:a) <= X & X < fml:s -> quic_packet_coal_0rtt.retired_cids.value(fml:a,X) = fml:v}",
            "assert 0:quic_packet.idx <= fml:x & fml:x < quic_packet.arr.end(fml:a)",
            "assert vector[tls.cipher_suite].end(fml:a) = fml:s & vector[tls.cipher_suite].value(fml:a,X) = fml:y",
            "{}",
            "<<<\n\t    >>>",
            "{}",
            "<<<\n                for (unsigned i = 0; i < `fml:a`.size()/2; i++) {\n                    std::swap(`fml:a`[i],`fml:a`[`fml:a`.size()-i-1]);\n                }\n            >>>",
            "{}",
            "{}",
            "{}",
            "{zero_rtt_server_test := false; client_port_vn := client_port}",
            "{}",
            "<<<\n\t        if (`fml:a`.size() > 0) {\n\t            a.pop_back();\n\t        }\n            >>>",
            "<<<\n                if ((`quic_packet_coal_0rtt.idx`)`fml:a`.size() > 0)\n                    `fml:res` = `fml:a`.back();\n            >>>",
            "{assert fml:y < fml:x & (Y:tls_hand_extensions.domain < fml:x -> Y <= fml:y); assert tls_hand_extensions.domain.succ(fml:y,fml:x)}",
            "<<<\n                for (unsigned i = 0; i < `fml:b`.size(); i++)\n\t            `fml:a`.push_back(`fml:b`[i]);\n            >>>",
            "<<<\n\t        `fml:a`.push_back(`fml:v`);\n            >>>",
            "{}",
            "<<<\n                for (unsigned i = 0; i < `fml:a`.size()/2; i++) {\n                    std::swap(`fml:a`[i],`fml:a`[`fml:a`.size()-i-1]);\n                }\n            >>>",
            "assert stream_data.end(fml:a) = fml:s & stream_data.value(fml:a,X) = fml:y",
            "assert 0:stream_pos < fml:x",
            "mim_client_target.tls_id := fml:e",
            "<<<\n\t        `fml:a`.resize(`fml:s`);\n\t        for (unsigned i = 0; i < `fml:s`; i++)\n\t            `fml:a`[i] = y;\n\t    >>>",
            "assert ~tls_api.upper.open(fml:c)",
            "{}",
            "{}",
            "{}",
            "<<<\n                if ((`forged_protected_quic_packet.idx`)`fml:a`.size() > 0)\n                    `fml:res` = `fml:a`.back();\n            >>>",
            "local loc:0 {call loc:0 := socket_endpoint(fml:host, fml:s); local loc:dst {loc:dst := loc:0; local loc:idx {loc:idx := prot.arr.begin(fml:pkts); local loc:0 {call loc:0 := stream_data.empty; local loc:past_data {loc:past_data := loc:0; while loc:idx < prot.arr.end(fml:pkts)\n{local loc:ppkt {loc:ppkt := prot.arr.value(fml:pkts,loc:idx); local loc:0 {call loc:0 := src_tls_id(loc:dst); local loc:tls_id {loc:tls_id := loc:0; local loc:header {loc:header := stream_data.value(loc:ppkt,0); local loc:hdr_type {loc:hdr_type := bfe[0][6](stream_data.value(loc:ppkt,0)); local loc:tt {loc:tt := bvand(loc:hdr_type,0x30); local loc:is_long {loc:is_long := bvand(0x80:byte,loc:header) ~= 0; local loc:version {loc:version := stream_data.segment(loc:ppkt,1,1 + 4); local loc:0 {call loc:0 := bytes_to_version(loc:version); local loc:bversion {loc:bversion := loc:0; local loc:ptype {loc:ptype := bvand(0x30:byte,loc:header); if loc:bversion = 0 & loc:is_long | version_not_found(fml:src) {call loc:past_data := stream_data.extend(loc:past_data, loc:ppkt); call tls_client_version_response(fml:src, loc:dst, loc:past_data)}\nelse {if loc:tt = 0x30 & loc:is_long & loc:bversion ~= 0 {call tls_client_retry_response(fml:src, loc:dst, loc:ppkt)}\nelse {local loc:0 {call loc:0 := reference_pkt_num(loc:ppkt, true); local loc:rnum {loc:rnum := loc:0; local loc:0 {call loc:0 := prot.decrypt(loc:tls_id, loc:rnum, loc:ppkt); local loc:res {loc:res := loc:0; if tls_api.upper.ok(loc:res) {local loc:0 {call loc:0 := is_padding_packet(tls_api.upper.payload(loc:res)); local loc:is_pad {loc:is_pad := loc:0; if loc:is_pad {call padding_packet_event(fml:host, fml:src, loc:dst, loc:ppkt)}\nelse {local loc:0 {call loc:0 := pkt_serdes.from_bytes(tls_api.upper.data(loc:res)); local loc:pkt {loc:pkt := loc:0; local loc:0 {call loc:0 := prot.get_pnum_len(tls_api.upper.data(loc:res)); call quic_packet.seq_num(loc:pkt) := prot.correct_pnum(loc:rnum, quic_packet.seq_num(loc:pkt), loc:0)}; call recv_packet(fml:host, fml:src, loc:dst, loc:pkt); call infer_tls_events(fml:src, loc:dst, loc:pkt); call packet_event(fml:src, loc:dst, loc:pkt)}}}}}}\nelse {call undecryptable_packet_event(fml:host, fml:src, loc:dst, loc:ppkt)}}}}}}}; call loc:idx := prot.idx.next(loc:idx)}}}}}}}}}}}}; version_not_found(fml:src) := false; call show_last_datagram_size(last_datagram_received_size); if ~first_datagram_received & fml:host = endpoint_id.server {assert last_datagram_received_size + 8 > 1200; first_datagram_received := true}; last_datagram_received_size := 0:stream_pos}}}}}",
            "{}",
            "{}",
            "{}",
            "{assert fml:x < fml:y & (fml:x < Y -> fml:y <= Y); assert jdx_s.succ(fml:x,fml:y)}",
            "{}",
            "<<<\n                for (unsigned i = 0; i < `fml:a`.size()/2; i++) {\n                    std::swap(`fml:a`[i],`fml:a`[`fml:a`.size()-i-1]);\n                }\n            >>>",
            "assert 0:tls_hand_extensions.domain <= fml:x & fml:x < tls_hand_extensions.end(fml:a)",
            "<<<\n    val.val = 0;\n    for (unsigned i = 0; i < bytes.size(); i++)\n        val.val = (val.val << 8) + bytes[i];\n    >>>",
            "{assert connected(fml:dcid) & connected_to(fml:dcid) = fml:scid; assert fml:e = quic_packet_type.one_rtt & established_1rtt_keys(fml:scid); assert num_queued_frames(fml:scid) > 0 -> fml:e = queued_level(fml:scid); if ~_generating {assert ~is_client(fml:scid)}}",
            "{}",
            "{assert connected(fml:dcid) & connected_to(fml:dcid) = fml:scid; assert fml:e = quic_packet_type.one_rtt & established_1rtt_keys(fml:scid); assert fml:e ~= quic_packet_type.initial; assert fml:e ~= quic_packet_type.handshake; assert num_queued_frames(fml:scid) > 0 -> fml:e = queued_level(fml:scid); assert tls_handshake_finished}",
            "if _generating {local loc:0 {call loc:0 := pkt_serdes.to_bytes(fml:pkt); local loc:spkt {loc:spkt := loc:0; local loc:0 {call loc:0 := reference_pkt_num(loc:spkt, false); local loc:rnum {loc:rnum := loc:0; local loc:0 {call loc:0 := src_tls_id(fml:src); local loc:tls_id {loc:tls_id := loc:0; local loc:0 {call loc:0 := prot.encrypt(loc:tls_id, loc:rnum, loc:spkt); local loc:ppkt {loc:ppkt := loc:0; local loc:0 {call loc:0 := prot.arr.empty; local loc:pkts {loc:pkts := loc:0; call loc:pkts := prot.arr.append(loc:pkts, loc:ppkt); local loc:0,loc:1 {call loc:0 := endpoint_to_pid(fml:src); call loc:1 := endpoint_to_socket(fml:src); call net.send(loc:0, loc:1, fml:dst, loc:pkts)}}}}}}}}}}}}",
            "<<<\n\t        `fml:s` = (`quic_packet_retry.idx`) `fml:a`.size();\n\t    >>>",
            "{assert arr_pkt_num_s.end(fml:a) = fml:s; assert 0:jdx_s <= X & X < arr_pkt_num_s.end(old_fml:a) -> arr_pkt_num_s.value(fml:a,X) = arr_pkt_num_s.value(old_fml:a,X); assert arr_pkt_num_s.end(old_fml:a) <= X & X < fml:s -> arr_pkt_num_s.value(fml:a,X) = fml:v}",
            "<<<\n\t        `fml:s` = (`quic_packet_retry.idx`) `fml:a`.size();\n\t    >>>",
            "assert 0:quic_packet_0rtt.idx <= fml:s",
            "<<<        \n\t    picotls_connection *s = `tls_api.upper.foo.cid_map`[c];\n        std::cerr << \"setup_initial_traffic_keys cid: \" << c << \"\\n\";\n        std::cerr << \"setup_initial_traffic_keys session: \" << s->is_server << \"\\n\";\n        setup_initial_traffic_keys(s,salt,ikm);\n        std::cerr << \"setup_initial_traffic_keys salt: \" << salt << \"\\n\";\n        std::cerr << \"setup_initial_traffic_keys ikm: \" << ikm << \"\\n\";\n        >>>",
            "<<<\n                if ((`clients.client.idx`)`fml:a`.size() > 0)\n                    `fml:res` = `fml:a`.back();\n            >>>",
            "{}",
            "{assert connected(fml:dcid) & connected_to(fml:dcid) = fml:scid; assert fml:e = quic_packet_type.one_rtt & established_1rtt_keys(fml:scid); assert num_queued_frames(fml:scid) > 0 -> fml:e = queued_level(fml:scid)}",
            "{if _generating {handshake_done_send := true}; call enqueue_frame(fml:scid, fml:f, fml:e, false)}",
            "{}",
            "{}",
            "<<<\n\t    >>>",
            "{}",
            "{}",
            "<<<\n\t        `fml:a`.resize(`fml:s`);\n\t        for (unsigned i = 0; i < `fml:s`; i++)\n\t            `fml:a`[i] = y;\n\t    >>>",
            "mim_server_target.tls_id := fml:e",
            "{assert forged_quic_packet_retry.retired_cids.end(fml:a) > forged_quic_packet_retry.retired_cids.end(old_fml:a) & ~(forged_quic_packet_retry.retired_cids.end(old_fml:a) < X & X < forged_quic_packet_retry.retired_cids.end(fml:a)); assert 0:forged_quic_packet_retry.idx <= X & X < forged_quic_packet_retry.retired_cids.end(old_fml:a) -> forged_quic_packet_retry.retired_cids.value(fml:a,X) = forged_quic_packet_retry.retired_cids.value(old_fml:a,X); assert forged_quic_packet_retry.retired_cids.value(fml:a,forged_quic_packet_retry.retired_cids.end(old_fml:a)) = fml:v}",
            "fml:y := fml:x + 1",
            "{}",
            "{}",
            "{assert frame.arr.end(fml:a) = fml:s; assert 0:frame.idx <= X & X < frame.arr.end(old_fml:a) -> frame.arr.value(fml:a,X) = frame.arr.value(old_fml:a,X); assert frame.arr.end(old_fml:a) <= X & X < fml:s -> frame.arr.value(fml:a,X) = fml:v}",
            "<<<\n\t    >>>",
            "{packed_forwarded(P) := false; packed_forwarded_arr(P) := false}",
            "<<<\n\t    >>>",
            "<<<\n                for (unsigned i = 0; i < `fml:a`.size()/2; i++) {\n                    std::swap(`fml:a`[i],`fml:a`[`fml:a`.size()-i-1]);\n                }\n            >>>",
            "<<<\n                for (unsigned i = 0; i < `fml:a`.size()/2; i++) {\n                    std::swap(`fml:a`[i],`fml:a`[`fml:a`.size()-i-1]);\n                }\n            >>>",
            "second_client.tls_id := fml:e",
            "local loc:scid {loc:scid := quic_packet.src_cid(fml:pkt); local loc:dcid {loc:dcid := quic_packet.dst_cid(fml:pkt); local loc:sq {loc:sq := quic_packet.seq_num(fml:pkt); local loc:0 {call loc:0 := quic_packet.long(fml:pkt); if ~loc:0 {loc:scid := connected_to(loc:dcid)}}; if quic_packet.ptype(fml:pkt) = quic_packet_type.initial & ~conn_seen(loc:dcid) & ~negocation_of_version(fml:src) & ~version_negociated {nonce_cid(loc:scid) := loc:dcid}; if quic_packet.ptype(fml:pkt) = quic_packet_type.initial & (retry_sent(loc:scid) | version_negociated | negocation_of_version(fml:src)) {nonce_cid(loc:scid) := loc:dcid; conn_seen(loc:dcid) := false}; local loc:e {loc:e := quic_packet.ptype(fml:pkt); call set_encryption_level(fml:src, loc:scid, loc:e); call tls_keys_established_event(loc:scid, loc:e); if conn_requested(fml:dst,fml:src,loc:dcid) & ~connected(loc:dcid) & ~connected(loc:scid) {call app_server_open_event(fml:src, fml:dst, loc:scid, loc:dcid)}; local loc:idx {loc:idx := frame.arr.begin(quic_packet.payload(fml:pkt)); while loc:idx < frame.arr.end(quic_packet.payload(fml:pkt))\n{local loc:f {loc:f := frame.arr.value(quic_packet.payload(fml:pkt),loc:idx); if some loc:cf. *>(loc:f,loc:cf) {call show_biatch_2(fml:dst); local loc:0 {call loc:0 := src_tls_id(fml:src); call tls_send_event(fml:src, fml:dst, loc:scid, loc:dcid, frame.crypto.data(loc:cf), frame.crypto.offset(loc:cf), loc:e, loc:0)}}; if some loc:sf. *>(loc:f,loc:sf) {call app_server_open_event_1rtt(fml:src, fml:dst, loc:scid, loc:dcid); call app_send_event(fml:src, fml:dst, loc:dcid, frame.stream.id(loc:sf), frame.stream.data(loc:sf), frame.stream.offset(loc:sf), frame.stream.fin(loc:sf))}; call infer_frame(loc:scid, loc:dcid, loc:f); if some self:frame.malicious_frame. *>(loc:f,self:frame.malicious_frame) {call frame.malicious_frame.handle(self:frame.malicious_frame, loc:scid, loc:dcid, loc:e, loc:sq)}\nelse {if some self:frame.unknown_frame. *>(loc:f,self:frame.unknown_frame) {call frame.unknown_frame.handle(self:frame.unknown_frame, loc:scid, loc:dcid, loc:e, loc:sq)}\nelse {if some self:frame.ack_frequency. *>(loc:f,self:frame.ack_frequency) {call frame.ack_frequency.handle(self:frame.ack_frequency, loc:scid, loc:dcid, loc:e, loc:sq)}\nelse {if some self:frame.handshake_done. *>(loc:f,self:frame.handshake_done) {call frame.handshake_done.handle(self:frame.handshake_done, loc:scid, loc:dcid, loc:e, loc:sq)}\nelse {if some self:frame.application_close. *>(loc:f,self:frame.application_close) {call frame.application_close.handle(self:frame.application_close, loc:scid, loc:dcid, loc:e, loc:sq)}\nelse {if some self:frame.connection_close. *>(loc:f,self:frame.connection_close) {call frame.connection_close.handle(self:frame.connection_close, loc:scid, loc:dcid, loc:e, loc:sq)}\nelse {if some self:frame.path_response. *>(loc:f,self:frame.path_response) {call frame.path_response.handle(self:frame.path_response, loc:scid, loc:dcid, loc:e, loc:sq)}\nelse {if some self:frame.path_challenge. *>(loc:f,self:frame.path_challenge) {call frame.path_challenge.handle(self:frame.path_challenge, loc:scid, loc:dcid, loc:e, loc:sq)}\nelse {if some self:frame.retire_connection_id. *>(loc:f,self:frame.retire_connection_id) {call frame.retire_connection_id.handle(self:frame.retire_connection_id, loc:scid, loc:dcid, loc:e, loc:sq)}\nelse {if some self:frame.new_connection_id. *>(loc:f,self:frame.new_connection_id) {call frame.new_connection_id.handle(self:frame.new_connection_id, loc:scid, loc:dcid, loc:e, loc:sq)}\nelse {if some self:frame.streams_blocked_bidi. *>(loc:f,self:frame.streams_blocked_bidi) {call frame.streams_blocked_bidi.handle(self:frame.streams_blocked_bidi, loc:scid, loc:dcid, loc:e, loc:sq)}\nelse {if some self:frame.streams_blocked. *>(loc:f,self:frame.streams_blocked) {call frame.streams_blocked.handle(self:frame.streams_blocked, loc:scid, loc:dcid, loc:e, loc:sq)}\nelse {if some self:frame.stream_data_blocked. *>(loc:f,self:frame.stream_data_blocked) {call frame.stream_data_blocked.handle(self:frame.stream_data_blocked, loc:scid, loc:dcid, loc:e, loc:sq)}\nelse {if some self:frame.data_blocked. *>(loc:f,self:frame.data_blocked) {call frame.data_blocked.handle(self:frame.data_blocked, loc:scid, loc:dcid, loc:e, loc:sq)}\nelse {if some self:frame.max_streams_bidi. *>(loc:f,self:frame.max_streams_bidi) {call frame.max_streams_bidi.handle(self:frame.max_streams_bidi, loc:scid, loc:dcid, loc:e, loc:sq)}\nelse {if some self:frame.max_streams. *>(loc:f,self:frame.max_streams) {call frame.max_streams.handle(self:frame.max_streams, loc:scid, loc:dcid, loc:e, loc:sq)}\nelse {if some self:frame.max_stream_data. *>(loc:f,self:frame.max_stream_data) {call frame.max_stream_data.handle(self:frame.max_stream_data, loc:scid, loc:dcid, loc:e, loc:sq)}\nelse {if some self:frame.max_data. *>(loc:f,self:frame.max_data) {call frame.max_data.handle(self:frame.max_data, loc:scid, loc:dcid, loc:e, loc:sq)}\nelse {if some self:frame.stream. *>(loc:f,self:frame.stream) {call frame.stream.handle(self:frame.stream, loc:scid, loc:dcid, loc:e, loc:sq)}\nelse {if some self:frame.new_token. *>(loc:f,self:frame.new_token) {call frame.new_token.handle(self:frame.new_token, loc:scid, loc:dcid, loc:e, loc:sq)}\nelse {if some self:frame.crypto. *>(loc:f,self:frame.crypto) {call frame.crypto.handle(self:frame.crypto, loc:scid, loc:dcid, loc:e, loc:sq)}\nelse {if some self:frame.stop_sending. *>(loc:f,self:frame.stop_sending) {call frame.stop_sending.handle(self:frame.stop_sending, loc:scid, loc:dcid, loc:e, loc:sq)}\nelse {if some self:frame.rst_stream. *>(loc:f,self:frame.rst_stream) {call frame.rst_stream.handle(self:frame.rst_stream, loc:scid, loc:dcid, loc:e, loc:sq)}\nelse {if some self:frame.ack_ecn. *>(loc:f,self:frame.ack_ecn) {call frame.ack_ecn.handle(self:frame.ack_ecn, loc:scid, loc:dcid, loc:e, loc:sq)}\nelse {if some self:frame.ack. *>(loc:f,self:frame.ack) {call frame.ack.handle(self:frame.ack, loc:scid, loc:dcid, loc:e, loc:sq)}\nelse {if some self:frame.ping. *>(loc:f,self:frame.ping) {call frame.ping.handle(self:frame.ping, loc:scid, loc:dcid, loc:e, loc:sq)}\nelse {call frame.handle(loc:f, loc:scid, loc:dcid, loc:e, loc:sq)}}}}}}}}}}}}}}}}}}}}}}}}}}; call loc:idx := frame.idx.next(loc:idx)}}}}}}}",
            "<<<\n\t        if (0 <= `fml:x` && `fml:x` < (`vector[tls.cipher_suite].domain`)`fml:a`.size()) \n\t            `fml:a`[`fml:x`] = `fml:y`;\n\t    >>>",
            "<<<\n                for (unsigned i = 0; i < `fml:b`.size(); i++)\n\t            `fml:a`.push_back(`fml:b`[i]);\n            >>>",
            "<<<\n        unsigned str_d[token.size()];\n        for (int i = 0; i < token.size(); i++)\n            str_d[i] = token[i];\n        const char * session_file = getenv(\"NEW_TOKEN_FILE\");\n        FILE *fp;\n        if(session_file != NULL) {\n            fp = fopen(session_file,\"w\");\n            for (int i = 0; i < token.size(); i++) {\n                //std::cerr <<  \"str_d[i] \"  << str_d[i] << std::endl;\n                //std::cerr <<  \"str_d[i] == 0 \"  << (str_d[i] == 0) << std::endl;\n                if(str_d[i] < 16)\n                    fprintf(fp, \"0%x\", str_d[i]);\n                else \n                    fprintf(fp, \"%x\", str_d[i]);\n            }  \n            fclose(fp);\n        }\n\n        >>>",
            "{crypto_handler_pos(C,L) := 0:stream_pos; conn_enc_level(E,C) := quic_packet_type.zero_rtt; established_1rtt_keys(C) := false; established_0rtt_keys(C) := false; established_handshake_keys(C) := false; crypto_reset(C) := false}",
            "<<<\n                for (unsigned i = 0; i < `fml:b`.size(); i++)\n\t            `fml:a`.push_back(`fml:b`[i]);\n            >>>",
            "<<<\n\t        `fml:a`.push_back(`fml:v`);\n            >>>",
            "{}",
            "{}",
            "<<<\n\t        if (0 <= `fml:x` && `fml:x` < (`index`)`fml:a`.size()) \n\t            `fml:y` = `fml:a`[`fml:x`];\n\t    >>>",
            "{client.enc_level := quic_packet_type.initial; ip.endpoint.protocol(client.ep) := ip.udp; ip.endpoint.addr(client.ep) := client_addr; ip.endpoint.port(client.ep) := client_port; if ip.endpoint.addr(client.ep) = 0x7f000001 | is_mim {ip.endpoint.interface(client.ep) := ip.lo}\nelse {ip.endpoint.interface(client.ep) := ip.ivy}}",
            "local loc:data {loc:data := stream_data.segment(fml:pkt,fml:pnum_pos,fml:pnum_pos + fml:pnum_len); fml:seq := 0:pkt_num; local loc:idx {loc:idx := 0:stream_pos; while loc:idx < stream_data.end(loc:data)\n{fml:seq := 256:pkt_num * fml:seq + bfe[0][7](stream_data.value(loc:data,loc:idx)); call loc:idx := stream_pos.next(loc:idx)}}}",
            "assert 0:vector[tls.cipher_suite].domain <= fml:x & fml:x < vector[tls.cipher_suite].end(fml:a)",
            "<<<\n            if (::lseek(`http_request_file.fildes`,0,SEEK_SET) < 0) {\n                perror(\"cannot seek to beginning of file\");\n            }\n            std::vector<char> buf;\n            ivy_socket_deser_128 ds(`http_request_file.fildes`,buf);  // initializer deserializer with zero bytes\n            //ivy_socket_deser ds(`http_request_file.fildes`,buf);  // initializer deserializer with zero bytes\n            while (ds.more(1)) {\n                //long long res;\n                int128_t res;\n                ds.getn(res,1);\n                d.push_back(res);\n            }  // read all the bytes\n            \n        >>>",
            "local loc:0 {call loc:0 := src_tls_id(fml:src); local loc:tls_id {loc:tls_id := loc:0; local loc:dcil {loc:dcil := bfe[0][7](stream_data.value(fml:spkt,5)); local loc:0 {call loc:0 := prot.bytes_to_cid(stream_data.segment(fml:spkt,6,6 + loc:dcil)); local loc:dcid {loc:dcid := loc:0; local loc:scil {loc:scil := bfe[0][7](stream_data.value(fml:spkt,6 + loc:dcil)); local loc:0 {call loc:0 := prot.bytes_to_cid(stream_data.segment(fml:spkt,7 + loc:dcil,7 + loc:dcil + loc:scil)); local loc:scid {loc:scid := loc:0; local loc:versions_vn {loc:versions_vn := stream_data.segment(fml:spkt,3 + 4 + loc:dcil + loc:scil,stream_data.end(fml:spkt)); call export_length_cid_extension(loc:dcil, loc:scil); if version_not_found(fml:src) {loc:versions_vn := stream_data.segment(fml:spkt,0,stream_data.end(fml:spkt))}; local loc:0 {call loc:0 := versions.empty; local loc:sv {loc:sv := loc:0; local loc:idx {loc:idx := stream_data.begin(loc:versions_vn); while (stream_data.value(loc:versions_vn,loc:idx) ~= 0xff | stream_data.value(loc:versions_vn,loc:idx) ~= 0x00) & version_not_found(fml:src)\n{call loc:idx := stream_pos.next(loc:idx)}; while loc:idx < stream_data.end(loc:versions_vn)\n{local loc:i {loc:i := 0:stream_pos; local loc:0 {call loc:0 := stream_data.empty; local loc:v {loc:v := loc:0; while loc:i < 4\n{call loc:v := stream_data.append(loc:v, stream_data.value(loc:versions_vn,loc:idx)); loc:i := loc:i + 1; call loc:idx := stream_pos.next(loc:idx)}; call loc:sv := versions.append(loc:sv, loc:v)}}}}; local loc:idxx {loc:idxx := 0:index; local loc:idxx_bv {loc:idxx_bv := 0:index; while loc:idxx < versions.end(loc:sv)\n{local loc:ii {loc:ii := 0:index; while loc:ii < versions.end(supported_versions)\n{if versions.value(loc:sv,loc:idxx) = versions.value(supported_versions,loc:ii) {final_version := versions_bv.value(supported_versions_bv,loc:idxx_bv); call loc:idxx_bv := index.next(loc:idxx_bv)}; call loc:ii := index.next(loc:ii)}; call loc:idxx := index.next(loc:idxx)}}; if final_version ~= 0x00000000 {version_negociated := true; local loc:0 {call loc:0 := pkt_serdes_vn.from_bytes(fml:spkt); local loc:pkt {loc:pkt := loc:0; quic_packet_vn.ptype(loc:pkt) := quic_packet_type.version_negociation; call recv_vn_pkt(fml:src, fml:dst, loc:pkt); call infer_tls_events_vn(fml:src, fml:dst, loc:pkt); call packet_event_vn(fml:src, fml:dst, loc:pkt)}}}\nelse {version_not_found(fml:src) := true; call version_not_found_event}}}}}}}}}}}}}}}",
            "{}",
            "<<<\n                for (unsigned i = 0; i < `fml:a`.size()/2; i++) {\n                    std::swap(`fml:a`[i],`fml:a`[`fml:a`.size()-i-1]);\n                }\n            >>>",
            "{}",
            "<<<\n\t    std::vector<char> buf(y.size());\n\t    std::copy(y.begin(),y.end(),buf.begin());\n\t    `quic_deser_retry` des(buf);\n\t    __deser(des,x);\n\t    >>>",
            "{}",
            "<<<\n                for (unsigned i = 0; i < `fml:a`.size()/2; i++) {\n                    std::swap(`fml:a`[i],`fml:a`[`fml:a`.size()-i-1]);\n                }\n            >>>",
            "<<<\n                for (unsigned i = 0; i < `fml:a`.size()/2; i++) {\n                    std::swap(`fml:a`[i],`fml:a`[`fml:a`.size()-i-1]);\n                }\n            >>>",
            "{}",
            "assert fml:s = quic_packet_retry.arr.end(fml:a)",
            "{}",
            "{assert quic_packet_0rtt.retired_cids.end(fml:a) = fml:s; assert 0:quic_packet_0rtt.idx <= X & X < quic_packet_0rtt.retired_cids.end(old_fml:a) -> quic_packet_0rtt.retired_cids.value(fml:a,X) = quic_packet_0rtt.retired_cids.value(old_fml:a,X); assert quic_packet_0rtt.retired_cids.end(old_fml:a) <= X & X < fml:s -> quic_packet_0rtt.retired_cids.value(fml:a,X) = fml:v}",
            "<<<\n\t        `fml:a`.push_back(`fml:v`);\n            >>>",
            "{}",
            "{}",
            "{assert fml:x < fml:y & (fml:x < Y -> fml:y <= Y); assert idx.succ(fml:x,fml:y)}",
            "local loc:0 {call loc:0 := socket_endpoint(fml:host, fml:s); local loc:dst {loc:dst := loc:0; local loc:idx {loc:idx := prot.arr.begin(fml:pkts); local loc:0 {call loc:0 := stream_data.empty; local loc:past_data {loc:past_data := loc:0; while loc:idx < prot.arr.end(fml:pkts)\n{local loc:ppkt {loc:ppkt := prot.arr.value(fml:pkts,loc:idx); local loc:0 {call loc:0 := src_tls_id(loc:dst); local loc:tls_id {loc:tls_id := loc:0; local loc:header {loc:header := stream_data.value(loc:ppkt,0); local loc:hdr_type {loc:hdr_type := bfe[0][6](stream_data.value(loc:ppkt,0)); local loc:tt {loc:tt := bvand(loc:hdr_type,0x30); local loc:is_long {loc:is_long := bvand(0x80:byte,loc:header) ~= 0; local loc:version {loc:version := stream_data.segment(loc:ppkt,1,1 + 4); local loc:0 {call loc:0 := bytes_to_version(loc:version); local loc:bversion {loc:bversion := loc:0; local loc:ptype {loc:ptype := bvand(0x30:byte,loc:header); if loc:bversion = 0 & loc:is_long | version_not_found(fml:src) {call loc:past_data := stream_data.extend(loc:past_data, loc:ppkt); call tls_client_version_response(fml:src, loc:dst, loc:past_data)}\nelse {if loc:tt = 0x30 & loc:bversion ~= 0 {call tls_client_retry_response(fml:src, loc:dst, loc:ppkt)}\nelse {local loc:0 {call loc:0 := reference_pkt_num(loc:ppkt, true); local loc:rnum {loc:rnum := loc:0; local loc:0 {call loc:0 := prot.decrypt(loc:tls_id, loc:rnum, loc:ppkt); local loc:res {loc:res := loc:0; if tls_api.upper.ok(loc:res) {local loc:0 {call loc:0 := is_padding_packet(tls_api.upper.payload(loc:res)); local loc:is_pad {loc:is_pad := loc:0; if loc:is_pad {call padding_packet_event(fml:host, fml:src, loc:dst, loc:ppkt)}\nelse {local loc:0 {call loc:0 := pkt_serdes.from_bytes(tls_api.upper.data(loc:res)); local loc:pkt {loc:pkt := loc:0; local loc:0 {call loc:0 := prot.get_pnum_len(tls_api.upper.data(loc:res)); call quic_packet.seq_num(loc:pkt) := prot.correct_pnum(loc:rnum, quic_packet.seq_num(loc:pkt), loc:0)}; call recv_packet(fml:host, fml:src, loc:dst, loc:pkt); call infer_tls_events(fml:src, loc:dst, loc:pkt); call packet_event(fml:src, loc:dst, loc:pkt)}}}}}}\nelse {call undecryptable_packet_event(fml:host, fml:src, loc:dst, loc:ppkt)}}}}}}}; call loc:idx := prot.idx.next(loc:idx)}}}}}}}}}}}}; version_not_found(fml:src) := false; call show_last_datagram_size(last_datagram_received_size); if ~first_datagram_received & fml:host = endpoint_id.server {assert last_datagram_received_size + 8 > 1200; first_datagram_received := true}; last_datagram_received_size := 0:stream_pos}}}}}",
            "{}",
            "call net.recv(prm:V0, fml:s, fml:src, fml:x)",
            "{assert connected(fml:dcid) & connected_to(fml:dcid) = fml:scid; assert fml:e = quic_packet_type.one_rtt & established_1rtt_keys(fml:scid); assert num_queued_frames(fml:scid) > 0 -> fml:e = queued_level(fml:scid); assert stream_data.end(frame.path_challenge.data(fml:f)) = 8; assert ~path_challenge_pending(fml:dcid,frame.path_challenge.data(fml:f))}",
            "{assert connected(fml:dcid) & connected_to(fml:dcid) = fml:scid; assert fml:e = quic_packet_type.one_rtt & established_1rtt_keys(fml:scid); assert num_queued_frames(fml:scid) > 0 -> fml:e = queued_level(fml:scid)}",
            "{}",
            "<<<\n\t        `fml:a`.push_back(`fml:v`);\n            >>>",
            "{}",
            "<<< \n                //  -o lo\n                std::string command = \"sudo iptables -t nat -A OUTPUT -d 10.0.2.1 -p udp --dport \" + std::to_string(server_ep) + \":\" + std::to_string(server_ep) + \" ! --sport 4430:4440 -j DNAT --to-destination 10.0.3.1:4440 >/dev/null 2>&1\"; \n                int n = command.length();\n            \n                // declaring character array\n                char command_array[n + 1];\n            \n                // copying the contents of the\n                // string to char array\n                strcpy(command_array, command.c_str());\n\n                int cr = system(command_array);\n            >>>",
            "local loc:e {loc:e := (quic_packet_type.handshake if (fml:lev = 2) else quic_packet_type.zero_rtt); local loc:0 {call loc:0 := tls_id_to_cid(fml:tls_id); call tls_keys_established_event(loc:0, loc:e)}}",
            "<<<\n\t        if (0 <= `fml:x` && `fml:x` < (`stream_pos`)`fml:a`.size()) \n\t            `fml:y` = `fml:a`[`fml:x`];\n\t    >>>",
            "{}",
            "fml:y := fml:x - 1",
            "assert clients.client.arr.end(fml:a) = fml:s & clients.client.arr.value(fml:a,X) = fml:y",
            "local loc:scid {loc:scid := quic_packet_0rtt.src_cid(fml:pkt); local loc:dcid {loc:dcid := quic_packet_0rtt.dst_cid(fml:pkt); local loc:sq {loc:sq := quic_packet_0rtt.seq_num(fml:pkt); if quic_packet_0rtt.ptype(fml:pkt) = quic_packet_type.zero_rtt {nonce_cid(loc:scid) := loc:dcid}; local loc:e {loc:e := quic_packet_type.zero_rtt; call set_encryption_level(fml:src, loc:scid, loc:e); call tls_keys_established_event(loc:scid, loc:e); if conn_requested(fml:dst,fml:src,loc:dcid) & ~connected(loc:dcid) & ~connected(loc:scid) {call app_server_open_event_0rtt(fml:src, fml:dst, loc:scid, loc:dcid); call app_server_open_event(fml:src, fml:dst, loc:scid, loc:dcid)}; local loc:idx {loc:idx := frame.arr.begin(quic_packet_0rtt.payload(fml:pkt)); while loc:idx < frame.arr.end(quic_packet_0rtt.payload(fml:pkt))\n{local loc:f {loc:f := frame.arr.value(quic_packet_0rtt.payload(fml:pkt),loc:idx); if some loc:sf. *>(loc:f,loc:sf) {call app_server_open_event_0rtt(fml:src, fml:dst, loc:scid, loc:dcid); call app_send_event(fml:src, fml:dst, loc:dcid, frame.stream.id(loc:sf), frame.stream.data(loc:sf), frame.stream.offset(loc:sf), frame.stream.fin(loc:sf))}; call infer_frame(loc:scid, loc:dcid, loc:f); if some self:frame.malicious_frame. *>(loc:f,self:frame.malicious_frame) {call frame.malicious_frame.handle(self:frame.malicious_frame, loc:scid, loc:dcid, loc:e, loc:sq)}\nelse {if some self:frame.unknown_frame. *>(loc:f,self:frame.unknown_frame) {call frame.unknown_frame.handle(self:frame.unknown_frame, loc:scid, loc:dcid, loc:e, loc:sq)}\nelse {if some self:frame.ack_frequency. *>(loc:f,self:frame.ack_frequency) {call frame.ack_frequency.handle(self:frame.ack_frequency, loc:scid, loc:dcid, loc:e, loc:sq)}\nelse {if some self:frame.handshake_done. *>(loc:f,self:frame.handshake_done) {call frame.handshake_done.handle(self:frame.handshake_done, loc:scid, loc:dcid, loc:e, loc:sq)}\nelse {if some self:frame.application_close. *>(loc:f,self:frame.application_close) {call frame.application_close.handle(self:frame.application_close, loc:scid, loc:dcid, loc:e, loc:sq)}\nelse {if some self:frame.connection_close. *>(loc:f,self:frame.connection_close) {call frame.connection_close.handle(self:frame.connection_close, loc:scid, loc:dcid, loc:e, loc:sq)}\nelse {if some self:frame.path_response. *>(loc:f,self:frame.path_response) {call frame.path_response.handle(self:frame.path_response, loc:scid, loc:dcid, loc:e, loc:sq)}\nelse {if some self:frame.path_challenge. *>(loc:f,self:frame.path_challenge) {call frame.path_challenge.handle(self:frame.path_challenge, loc:scid, loc:dcid, loc:e, loc:sq)}\nelse {if some self:frame.retire_connection_id. *>(loc:f,self:frame.retire_connection_id) {call frame.retire_connection_id.handle(self:frame.retire_connection_id, loc:scid, loc:dcid, loc:e, loc:sq)}\nelse {if some self:frame.new_connection_id. *>(loc:f,self:frame.new_connection_id) {call frame.new_connection_id.handle(self:frame.new_connection_id, loc:scid, loc:dcid, loc:e, loc:sq)}\nelse {if some self:frame.streams_blocked_bidi. *>(loc:f,self:frame.streams_blocked_bidi) {call frame.streams_blocked_bidi.handle(self:frame.streams_blocked_bidi, loc:scid, loc:dcid, loc:e, loc:sq)}\nelse {if some self:frame.streams_blocked. *>(loc:f,self:frame.streams_blocked) {call frame.streams_blocked.handle(self:frame.streams_blocked, loc:scid, loc:dcid, loc:e, loc:sq)}\nelse {if some self:frame.stream_data_blocked. *>(loc:f,self:frame.stream_data_blocked) {call frame.stream_data_blocked.handle(self:frame.stream_data_blocked, loc:scid, loc:dcid, loc:e, loc:sq)}\nelse {if some self:frame.data_blocked. *>(loc:f,self:frame.data_blocked) {call frame.data_blocked.handle(self:frame.data_blocked, loc:scid, loc:dcid, loc:e, loc:sq)}\nelse {if some self:frame.max_streams_bidi. *>(loc:f,self:frame.max_streams_bidi) {call frame.max_streams_bidi.handle(self:frame.max_streams_bidi, loc:scid, loc:dcid, loc:e, loc:sq)}\nelse {if some self:frame.max_streams. *>(loc:f,self:frame.max_streams) {call frame.max_streams.handle(self:frame.max_streams, loc:scid, loc:dcid, loc:e, loc:sq)}\nelse {if some self:frame.max_stream_data. *>(loc:f,self:frame.max_stream_data) {call frame.max_stream_data.handle(self:frame.max_stream_data, loc:scid, loc:dcid, loc:e, loc:sq)}\nelse {if some self:frame.max_data. *>(loc:f,self:frame.max_data) {call frame.max_data.handle(self:frame.max_data, loc:scid, loc:dcid, loc:e, loc:sq)}\nelse {if some self:frame.stream. *>(loc:f,self:frame.stream) {call frame.stream.handle(self:frame.stream, loc:scid, loc:dcid, loc:e, loc:sq)}\nelse {if some self:frame.new_token. *>(loc:f,self:frame.new_token) {call frame.new_token.handle(self:frame.new_token, loc:scid, loc:dcid, loc:e, loc:sq)}\nelse {if some self:frame.crypto. *>(loc:f,self:frame.crypto) {call frame.crypto.handle(self:frame.crypto, loc:scid, loc:dcid, loc:e, loc:sq)}\nelse {if some self:frame.stop_sending. *>(loc:f,self:frame.stop_sending) {call frame.stop_sending.handle(self:frame.stop_sending, loc:scid, loc:dcid, loc:e, loc:sq)}\nelse {if some self:frame.rst_stream. *>(loc:f,self:frame.rst_stream) {call frame.rst_stream.handle(self:frame.rst_stream, loc:scid, loc:dcid, loc:e, loc:sq)}\nelse {if some self:frame.ack_ecn. *>(loc:f,self:frame.ack_ecn) {call frame.ack_ecn.handle(self:frame.ack_ecn, loc:scid, loc:dcid, loc:e, loc:sq)}\nelse {if some self:frame.ack. *>(loc:f,self:frame.ack) {call frame.ack.handle(self:frame.ack, loc:scid, loc:dcid, loc:e, loc:sq)}\nelse {if some self:frame.ping. *>(loc:f,self:frame.ping) {call frame.ping.handle(self:frame.ping, loc:scid, loc:dcid, loc:e, loc:sq)}\nelse {call frame.handle(loc:f, loc:scid, loc:dcid, loc:e, loc:sq)}}}}}}}}}}}}}}}}}}}}}}}}}}; call loc:idx := frame.idx.next(loc:idx)}}}}}}}",
            "<<<\n                if ((`index`)`fml:a`.size() > 0)\n                    `fml:res` = `fml:a`.back();\n            >>>",
            "{}",
            "<<<\n            std::cerr << `http_request_file.fildes` << std::endl;\n            if (::lseek(`http_request_file.fildes`,0,SEEK_SET) < 0) {\n                perror(\"cannot seek to beginning of file\");\n            }\n            vector<unsigned char> bytes;\n            bytes.resize(d.size());\n            std::copy(d.begin(),d.end(),bytes.begin());\n            if (::write(`http_request_file.fildes`,&bytes[0],bytes.size()) < 0) {\n                perror(\"cannot seek to beginning of file\");\n            }\n            if (::ftruncate(`http_request_file.fildes`,sr.res.size()) < 0) {\n                perror(\"cannot truncate file\");\n            }\n        >>>",
            "assert 0:replayed_quic_packet_0rtt.idx <= fml:x & fml:x < replayed_quic_packet_0rtt.arr.end(fml:a)",
            "{}",
            "{}",
            "assert forged_quic_packet.arr.end(fml:a) = 0",
            "{assert forged_quic_packet_vn.arr.end(fml:a) = fml:s; assert 0:forged_quic_packet_vn.idx <= X & X < forged_quic_packet_vn.arr.end(old_fml:a) -> forged_quic_packet_vn.arr.value(fml:a,X) = forged_quic_packet_vn.arr.value(old_fml:a,X); assert forged_quic_packet_vn.arr.end(old_fml:a) <= X & X < fml:s -> forged_quic_packet_vn.arr.value(fml:a,X) = fml:v}",
            "{disable_active_migration.is_set(fml:s) := true; disable_active_migration.value(fml:s) := fml:p}",
            "<<<\n\t        `fml:a`.resize(`fml:s`);\n\t        for (unsigned i = 0; i < `fml:s`; i++)\n\t            `fml:a`[i] = y;\n\t    >>>",
            "{assert connected(fml:dcid) & connected_to(fml:dcid) = fml:scid; assert fml:e = quic_packet_type.one_rtt & established_1rtt_keys(fml:scid); assert num_queued_frames(fml:scid) > 0 -> fml:e = queued_level(fml:scid)}",
            "{}",
            "<<<\n\t    >>>",
            "{}",
            "assert 0:replayed_quic_packet_0rtt.idx <= fml:s",
            "{assert fml:x < fml:y & (fml:x < Y -> fml:y <= Y); assert forged_protected_quic_packet.idx.succ(fml:x,fml:y)}",
            "{if ~stream_frame_restransmitted(fml:id) & ~sdb_frame_restransmitted(fml:id) {receiving_recv(fml:id) := true}; call lastest_stream_id_receiving(fml:seq) := arr_streamid_r.append(lastest_stream_id_receiving(fml:seq), fml:id); call lastest_pkt_num_receiving := arr_pkt_num_r.append(lastest_pkt_num_receiving, fml:seq)}",
            "client.tls_id := fml:e",
            "assert 0:forged_quic_packet.idx <= fml:s",
            "<<<\n\t        `fml:s` = (`quic_packet_coal_0rtt.idx`) `fml:a`.size();\n\t    >>>",
            "fml:scid := the_cid",
            "assert frame.ack_ecn.range.arr.end(fml:a) = fml:s & frame.ack_ecn.range.arr.value(fml:a,X) = fml:y",
            "assert frame.ack.range.arr.end(fml:a) = 0",
            "local loc:dcid {loc:dcid := forged_quic_packet_retry.dst_cid(fml:pkt); local loc:scid {loc:scid := forged_quic_packet_retry.src_cid(fml:pkt); if cid_mapped(loc:dcid) {loc:dcid := cid_to_aid(loc:dcid)}; retry_token(loc:scid) := forged_quic_packet_retry.token(fml:pkt); if ~_generating {conn_requested(fml:src,fml:dst,loc:scid) := false; conn_requested(fml:src,fml:dst,loc:dcid) := false; connected(loc:dcid) := false; connected(loc:scid) := false; conn_seen(loc:dcid) := false; conn_seen(loc:scid) := false; assert ~retry_recv(loc:dcid); retry_recv(loc:dcid) := true; server_cid := loc:scid; connected(the_cid) := false; connected(server_cid) := false; conn_seen(server_cid) := false; conn_seen(the_cid) := false; client_initial_rcid := loc:scid; local loc:0 {call loc:0 := tls_extensions.empty; local loc:extns {loc:extns := loc:0; local loc:0 {call loc:0 := make_transport_parameters; call loc:extns := tls_extensions.append(loc:extns, loc:0)}; call tls_api.upper.destroy(0:tls_api.id); call tls_api.upper.create(0:tls_api.id, false, loc:extns); conn_requested(fml:dst,fml:src,the_cid) := true}}}\nelse {retry_sent(loc:scid) := true; retry_response(loc:scid) := true; initial_keys_set(loc:scid) := false; tp_client_set := false; conn_requested(fml:src,fml:dst,loc:dcid) := false; conn_requested(fml:src,fml:dst,the_cid) := false; conn_seen(loc:dcid) := false; conn_seen(the_cid) := false; local loc:0 {call loc:0 := src_tls_id(fml:src); call tls_api.upper.destroy(loc:0)}}}}",
            "<<< res = x & 0xff; >>>",
            "{}",
            "assert 0:jdx_s <= fml:x & fml:x < arr_pkt_num_s.end(fml:a)",
            "assert quic_packet_coal_0rtt.retired_cids.end(fml:a) = fml:s & quic_packet_coal_0rtt.retired_cids.value(fml:a,X) = fml:y",
            "{}",
            "{}",
            "<<<\n\t        if (0 <= `fml:x` && `fml:x` < (`clients.client.idx`)`fml:a`.size()) \n\t            `fml:y` = `fml:a`[`fml:x`];\n\t    >>>",
            "{call show_socket(fml:s); if fml:host = endpoint_id.server {call server.behavior(fml:host, fml:s, fml:src, fml:pkts)}\nelse {if fml:host = endpoint_id.client {call client.behavior(fml:host, fml:s, fml:src, fml:pkts)}\nelse {if fml:host = endpoint_id.mim {call mim_agent.behavior(fml:host, fml:s, fml:src, fml:pkts)}\nelse {if fml:host = endpoint_id.victim {call victim_agent.behavior(fml:host, fml:s, fml:src, fml:pkts)}\nelse {if fml:host = endpoint_id.attacker {call attacker.behavior(fml:host, fml:s, fml:src, fml:pkts)}\nelse {call undefined_host_error(fml:host, fml:s, fml:src)}}}}}}",
            "{mim_client_target.enc_level := quic_packet_type.initial; ip.endpoint.protocol(mim_client_target.ep) := ip.udp; ip.endpoint.addr(mim_client_target.ep) := 0:ip.addr; ip.endpoint.port(mim_client_target.ep) := 0:ip.port; if ip.endpoint.addr(mim_client_target.ep) = 0x7f000001 | is_mim {ip.endpoint.interface(mim_client_target.ep) := ip.lo}\nelse {ip.endpoint.interface(mim_client_target.ep) := ip.ivy}}",
            "{}",
            "{}",
            "{}",
            "<<<\n                for (unsigned i = 0; i < `fml:b`.size(); i++)\n\t            `fml:a`.push_back(`fml:b`[i]);\n            >>>",
            "assert prot.arr.end(fml:a) = 0",
            "{assert frame.arr.end(fml:a) > frame.arr.end(old_fml:a) & ~(frame.arr.end(old_fml:a) < X & X < frame.arr.end(fml:a)); assert 0:frame.idx <= X & X < frame.arr.end(old_fml:a) -> frame.arr.value(fml:a,X) = frame.arr.value(old_fml:a,X); assert frame.arr.value(fml:a,frame.arr.end(old_fml:a)) = fml:v}",
            "assert 0:quic_packet_0rtt.idx <= fml:s",
            "second_server.ep := fml:e",
            "{assert fml:y < fml:x & (Y:frame.ack_ecn.range.idx < fml:x -> Y <= fml:y); assert frame.ack_ecn.range.idx.succ(fml:y,fml:x)}",
            "{}",
            "{}",
            "assert forged_protected_quic_packet.arr.value(fml:a,fml:x) = fml:y",
            "{}",
            "assert quic_packet_retry.arr.value(fml:a,fml:x) = fml:y",
            "<<<\n\t        `fml:a`.push_back(`fml:v`);\n            >>>",
            "assert 0:jdx_s <= fml:x & fml:x < arr_pkt_num_s.end(fml:a)",
            "fml:res := forged_quic_packet.ptype(fml:pkt) ~= quic_packet_type.one_rtt",
            "{assert quic_packet_vn.arr.end(fml:a) > quic_packet_vn.arr.end(old_fml:a) & ~(quic_packet_vn.arr.end(old_fml:a) < X & X < quic_packet_vn.arr.end(fml:a)); assert 0:quic_packet_vn.idx <= X & X < quic_packet_vn.arr.end(old_fml:a) -> quic_packet_vn.arr.value(fml:a,X) = quic_packet_vn.arr.value(old_fml:a,X); assert quic_packet_vn.arr.value(fml:a,quic_packet_vn.arr.end(old_fml:a)) = fml:v}",
            "{}",
            "<<<\n\t        `fml:a`.resize(`fml:s`);\n\t        for (unsigned i = 0; i < `fml:s`; i++)\n\t            `fml:a`[i] = y;\n\t    >>>",
            "<<<\n\t        if (`fml:a`.size() > 0) {\n\t            a.pop_back();\n\t        }\n            >>>",
            "assert servers.server.arr.end(fml:a) = 0",
            "if bvand(stream_data.value(fml:pkt,0),0x80) ~= 0 {local loc:hdr_type {loc:hdr_type := bvand(stream_data.value(fml:pkt,0),0x30); if loc:hdr_type = 0x00 | loc:hdr_type = 0x30 {fml:level := 0:tls_api.upper.level}\nelse {if loc:hdr_type = 0x10 {fml:level := 1:tls_api.upper.level}\nelse {fml:level := 2:tls_api.upper.level}}}}\nelse {fml:level := 3:tls_api.upper.level}",
            "<<<\n                if ((`quic_packet.idx`)`fml:a`.size() > 0)\n                    `fml:res` = `fml:a`.back();\n            >>>",
            "{}",
            "{}",
            "<<<\n\t    >>>",
            "<<<\n\t        `fml:a`.resize(`fml:s`);\n\t        for (unsigned i = 0; i < `fml:s`; i++)\n\t            `fml:a`[i] = y;\n\t    >>>",
            "{}",
            "{}",
            "<<<\n\t        unsigned __old_size = `fml:a`.size();\n\t        `fml:a`.resize(`fml:s`);\n\t        for (unsigned i = __old_size; i < (unsigned)`fml:s`; i++)\n\t            `fml:a`[i] = v;\n            >>>",
            "{}",
            "assert 0:replayed_quic_packet_0rtt.idx < fml:x",
            "{}",
            "{assert quic_packet_vn.arr.end(fml:a) = quic_packet_vn.arr.end(old_fml:a); assert quic_packet_vn.arr.value(fml:a,X) = (fml:y if (X = fml:x) else quic_packet_vn.arr.value(old_fml:a,X))}",
            "{}",
            "<<<\n\t        if (0 <= `fml:x` && `fml:x` < (`vector[tls.handshake].domain`)`fml:a`.size()) \n\t            `fml:y` = `fml:a`[`fml:x`];\n\t    >>>",
            "{}",
            "<<<\n                for (unsigned i = 0; i < `fml:a`.size()/2; i++) {\n                    std::swap(`fml:a`[i],`fml:a`[`fml:a`.size()-i-1]);\n                }\n            >>>",
            "{assert fml:x < fml:y & (fml:x < Y -> fml:y <= Y); assert vector[tls.psk_identity].domain.succ(fml:x,fml:y)}",
            "{}",
            "<<<\n\t        `fml:a`.push_back(`fml:v`);\n            >>>",
            "<<<\n                for (unsigned i = 0; i < `fml:a`.size()/2; i++) {\n                    std::swap(`fml:a`[i],`fml:a`[`fml:a`.size()-i-1]);\n                }\n            >>>",
            "{}",
            "<<<\n\t    >>>",
            "{assert quic_packet.retired_cids.end(fml:a) > quic_packet.retired_cids.end(old_fml:a) & ~(quic_packet.retired_cids.end(old_fml:a) < X & X < quic_packet.retired_cids.end(fml:a)); assert 0:quic_packet.idx <= X & X < quic_packet.retired_cids.end(old_fml:a) -> quic_packet.retired_cids.value(fml:a,X) = quic_packet.retired_cids.value(old_fml:a,X); assert quic_packet.retired_cids.value(fml:a,quic_packet.retired_cids.end(old_fml:a)) = fml:v}",
            "{}",
            "{assert cids.end(fml:a) = cids.end(old_fml:a); assert cids.value(fml:a,X) = (fml:y if (X = fml:x) else cids.value(old_fml:a,X))}",
            "{mim_agent.enc_level := quic_packet_type.initial; ip.endpoint.protocol(mim_agent.ep_in) := ip.udp; ip.endpoint.addr(mim_agent.ep_in) := mim_addr; ip.endpoint.port(mim_agent.ep_in) := mim_port_in; ip.endpoint.interface(mim_agent.ep_in) := ip.lo; ip.endpoint.protocol(mim_agent.ep_out) := ip.udp; ip.endpoint.addr(mim_agent.ep_out) := mim_addr; ip.endpoint.port(mim_agent.ep_out) := mim_port_out; if ip.endpoint.addr(mim_agent.ep_out) = 0x7f000001 {ip.endpoint.interface(mim_agent.ep_out) := ip.lo}\nelse {ip.endpoint.interface(mim_agent.ep_out) := ip.ivy}; mim_agent.nat_configured := false; mim_agent.ppkt_saved_b := false; mim_agent.init_cids := false; mim_agent.force_client_forward := false; mim_agent.force_server_forward := false; mim_agent.max_retransmit(E,S) := 0:stream_pos; mim_agent.cppkt_forwarded_to_server := 0:stream_pos; mim_agent.cppkt_forwarded_to_client := 0:stream_pos; mim_agent.last_cppkt_forwarded_to_server := 0:stream_pos; mim_agent.last_cppkt_forwarded_to_client := 0:stream_pos; mim_agent.forward_turn := false; mim_agent.forward_turn_count := 0:stream_pos; mim_agent.wait_forward := true; call mim_agent.ppkt_to_be_forge := stream_data.empty; mim_agent.enc_level_ppkt_to_be_forge := quic_packet_type.initial}",
            "assert 0:quic_packet.idx < fml:x",
            "{assert fml:x < fml:y & (fml:x < Y -> fml:y <= Y); assert idx_s.succ(fml:x,fml:y)}",
            "{}",
            "{}",
            "{assert fml:y < fml:x & (Y:prot.idx < fml:x -> Y <= fml:y); assert prot.idx.succ(fml:y,fml:x)}",
            "local loc:0 {call loc:0 := socket_endpoint(fml:host, fml:s); local loc:dst {loc:dst := loc:0; local loc:0 {call loc:0 := prot.arr.empty; local loc:pkts_mim {loc:pkts_mim := loc:0; call loc:pkts_mim := prot.arr.append(loc:pkts_mim, fml:ppkt); local loc:0 {call loc:0 := endpoint_to_socket(fml:src); call net.send(endpoint_id.mim, loc:0, loc:dst, loc:pkts_mim)}}}}}",
            "assert 0:quic_packet_vn.idx <= fml:s",
            "<<<\n\t        unsigned __old_size = `fml:a`.size();\n\t        `fml:a`.resize(`fml:s`);\n\t        for (unsigned i = __old_size; i < (unsigned)`fml:s`; i++)\n\t            `fml:a`[i] = v;\n            >>>",
            "<<<\n\t        `fml:s` = (`quic_packet.idx`) `fml:a`.size();\n\t    >>>",
            "assert forged_quic_packet_retry.arr.end(fml:a) = fml:s & forged_quic_packet_retry.arr.value(fml:a,X) = fml:y",
            "{stream_seen(C,S) := false; stream_length(C,S) := 0:stream_pos; max_stream_data_set(C,S) := false; max_data_set(C) := false; stream_finished(C,S) := false; stream_reset(C,S) := false; queued_non_probing(C) := false; queued_non_ack(C) := false; queued_close(C) := false; path_challenge_pending(C,D) := false; queued_ack_eliciting(C) := false; max_rtp_num(C) := 0:cid_seq; send_retire_cid(C) := false; count_stream_frame(I,O,L,D) := 0:stream_pos; stream_frame_restransmitted(S) := false; count_reset_frame(I,E,O) := 0:stream_pos; reset_frame_restransmitted(S) := false; count_sdb_frame(I,O) := 0:stream_pos; sdb_frame_restransmitted(S) := false; stop_sending_in_bad_state := false; first_ack_freq_received := true; last_ack_freq_seq(C) := 0:pkt_num; connection_closed := false; handshake_done_send := false; is_stream_limit_test := false; is_crypto_limit_test := false; last_cid_seq(C) := 0:cid_seq; zrtt_pkt_update := false}",
            "{assert replayed_quic_packet_0rtt.arr.end(fml:a) > replayed_quic_packet_0rtt.arr.end(old_fml:a) & ~(replayed_quic_packet_0rtt.arr.end(old_fml:a) < X & X < replayed_quic_packet_0rtt.arr.end(fml:a)); assert 0:replayed_quic_packet_0rtt.idx <= X & X < replayed_quic_packet_0rtt.arr.end(old_fml:a) -> replayed_quic_packet_0rtt.arr.value(fml:a,X) = replayed_quic_packet_0rtt.arr.value(old_fml:a,X); assert replayed_quic_packet_0rtt.arr.value(fml:a,replayed_quic_packet_0rtt.arr.end(old_fml:a)) = fml:v}",
            "{}",
            "fml:y := fml:x + 1",
            "{assert fml:y < fml:x & (Y:idx_s < fml:x -> Y <= fml:y); assert idx_s.succ(fml:y,fml:x)}",
            "{}",
            "assert vector[tls.extension].end(fml:a) = 0",
            "fml:res := quic_packet_retry.ptype(fml:pkt) ~= quic_packet_type.one_rtt",
            "{}",
            "{}",
            "<<<\n\n    std::cerr <<  \"export_length_cid_extension\"  << \"\\n\";\n\tchar str_d[20];\n\tsprintf(str_d,\"%llu\",dcil);\n\tif(setenv(\"TEST_DCIL\",str_d,true) != 0) \n\t\tfprintf(stderr, \"setenv failed\\n\");\n\n\tchar str[20];\n\tsprintf(str,\"%llu\",scil);\n\tif(setenv(\"TEST_SCIL\",str,true) != 0) \n\t\tfprintf(stderr, \"setenv failed\\n\");\n\n    char str_p[20];\n\tsprintf(str_p,\"%llu\",scil);\n\tif(setenv(\"TEST_PCIL\",str_p,true) != 0) \n\t\tfprintf(stderr, \"setenv failed\\n\");\n    >>>",
            "<<<\n                if ((`vector[transport_parameter].domain`)`fml:a`.size() > 0)\n                    `fml:res` = `fml:a`.back();\n            >>>",
            "{assert forged_quic_packet.arr.end(fml:a) = forged_quic_packet.arr.end(old_fml:a); assert forged_quic_packet.arr.value(fml:a,X) = (fml:y if (X = fml:x) else forged_quic_packet.arr.value(old_fml:a,X))}",
            "<<<\n\t        if (0 <= `fml:x` && `fml:x` < (`frame.idx`)`fml:a`.size()) \n\t            `fml:y` = `fml:a`[`fml:x`];\n\t    >>>",
            "{assert arr_streamid_s.end(fml:a) > arr_streamid_s.end(old_fml:a) & ~(arr_streamid_s.end(old_fml:a) < X & X < arr_streamid_s.end(fml:a)); assert 0:idx_s <= X & X < arr_streamid_s.end(old_fml:a) -> arr_streamid_s.value(fml:a,X) = arr_streamid_s.value(old_fml:a,X); assert arr_streamid_s.value(fml:a,arr_streamid_s.end(old_fml:a)) = fml:v}",
            "{assert frame.ack.range.arr.end(fml:a) = frame.ack.range.arr.end(old_fml:a); assert frame.ack.range.arr.value(fml:a,X) = (fml:y if (X = fml:x) else frame.ack.range.arr.value(old_fml:a,X))}",
            "assert 0:quic_packet_0rtt.idx <= fml:x & fml:x < quic_packet_0rtt.retired_cids.end(fml:a)",
            "assert fml:s = tls_extensions.end(fml:a)",
            "{packed_forwarded_arr(fml:pkt) := true; call mim_agent.ppkt_to_be_forwarded_to_server(mim_agent.last_cppkt_forwarded_to_server) := forged_pkts.empty; mim_agent.force_client_forward := false; mim_agent.forward_turn := true}",
            "<<<\n\t        if (0 <= `fml:x` && `fml:x` < (`vector[tls.handshake].domain`)`fml:a`.size()) \n\t            `fml:a`[`fml:x`] = `fml:y`;\n\t    >>>",
            "if fml:src = client.ep {fml:pid := endpoint_id.client}\nelse {if fml:src = client_alt {fml:pid := endpoint_id.client_alt}\nelse {if fml:src = client_vn {fml:pid := endpoint_id.client_vn}}}",
            "assert replayed_quic_packet_0rtt.arr.end(fml:a) = 0",
            "{max_ack_delay.is_set(fml:s) := true; max_ack_delay.value(fml:s) := fml:p}",
            "assert forged_protected_quic_packet.retired_cids.end(fml:a) = 0",
            "<<<\n\t        if (0 <= `fml:x` && `fml:x` < (`forged_quic_packet_retry.idx`)`fml:a`.size()) \n\t            `fml:a`[`fml:x`] = `fml:y`;\n\t    >>>",
            "{}",
            "<<<\n\t        if (`fml:a`.size() > 0) {\n\t            a.pop_back();\n\t        }\n            >>>",
            "{}",
            "call enqueue_frame(fml:scid, fml:f, fml:e, false)",
            "{}",
            "{}",
            "assert bytes.end(fml:a) = fml:s & bytes.value(fml:a,X) = fml:y",
            "assert 0:vector[tls.compression_method].domain < fml:x",
            "<<<\n\t        if (0 <= `fml:x` && `fml:x` < (`forged_quic_packet_retry.idx`)`fml:a`.size()) \n\t            `fml:y` = `fml:a`[`fml:x`];\n\t    >>>",
            "{}",
            "{}",
            "<<<\n\t        `fml:a`.resize(`fml:s`);\n\t        for (unsigned i = 0; i < `fml:s`; i++)\n\t            `fml:a`[i] = y;\n\t    >>>",
            "fml:y := fml:x - 1",
            "call enqueue_frame(fml:scid, fml:f, fml:e, false)",
            "{}",
            "{}",
            "{}",
            "{}",
            "if _generating {assert fml:scid = the_cid; force_new_ack := true}",
            "assert 0:forged_protected_quic_packet.idx <= fml:s",
            "assert replayed_quic_packet_0rtt.arr.end(fml:a) = fml:s & replayed_quic_packet_0rtt.arr.value(fml:a,X) = fml:y",
            "<<<\n                const char * command = \"sudo iptables -t nat -L -n -v;sudo iptables -t nat -F >/dev/null 2>&1\"; \n                int cr = system( command );\n            >>>",
            "{}",
            "<<<\n\t        `fml:a`.resize(`fml:s`);\n\t        for (unsigned i = 0; i < `fml:s`; i++)\n\t            `fml:a`[i] = y;\n\t    >>>",
            "assert forged_protected_quic_packet.retired_cids.end(fml:a) = fml:s & forged_protected_quic_packet.retired_cids.value(fml:a,X) = fml:y",
            "{}",
            "{}",
            "{assert arr_pkt_num_r.end(fml:a) = fml:s; assert 0:jdx_r <= X & X < arr_pkt_num_r.end(old_fml:a) -> arr_pkt_num_r.value(fml:a,X) = arr_pkt_num_r.value(old_fml:a,X); assert arr_pkt_num_r.end(old_fml:a) <= X & X < fml:s -> arr_pkt_num_r.value(fml:a,X) = fml:v}",
            "{}",
            "assert 0:frame.ack.range.idx <= fml:x & fml:x < frame.ack.range.arr.end(fml:a)",
            "{}",
            "assert fml:s = arr_streamid_s.end(fml:a)",
            "{}",
            "{}",
            "call enqueue_frame(fml:scid, fml:f, fml:e, false)",
            "{}",
            "{assert forged_quic_packet.retired_cids.end(fml:a) = forged_quic_packet.retired_cids.end(old_fml:a); assert forged_quic_packet.retired_cids.value(fml:a,X) = (fml:y if (X = fml:x) else forged_quic_packet.retired_cids.value(old_fml:a,X))}",
            "<<<\n\t    >>>",
            "{}",
            "assert 0:quic_packet_coal_0rtt.idx <= fml:x & fml:x < quic_packet_coal_0rtt.retired_cids.end(fml:a)",
            "{assert fml:y < fml:x & (Y:jdx_s < fml:x -> Y <= fml:y); assert jdx_s.succ(fml:y,fml:x)}",
            "{assert fml:x < fml:y & (fml:x < Y -> fml:y <= Y); assert index.succ(fml:x,fml:y)}",
            "{}",
            "assert 0:servers.server.idx <= fml:x & fml:x < servers.server.arr.end(fml:a)",
            "assert 0:index <= fml:x & fml:x < ip_endpoints.end(fml:a)",
            "{assert forged_quic_packet.arr.end(fml:a) > forged_quic_packet.arr.end(old_fml:a) & ~(forged_quic_packet.arr.end(old_fml:a) < X & X < forged_quic_packet.arr.end(fml:a)); assert 0:forged_quic_packet.idx <= X & X < forged_quic_packet.arr.end(old_fml:a) -> forged_quic_packet.arr.value(fml:a,X) = forged_quic_packet.arr.value(old_fml:a,X); assert forged_quic_packet.arr.value(fml:a,forged_quic_packet.arr.end(old_fml:a)) = fml:v}",
            "{assert vector[tls.compression_method].end(fml:a) > vector[tls.compression_method].end(old_fml:a) & ~(vector[tls.compression_method].end(old_fml:a) < X & X < vector[tls.compression_method].end(fml:a)); assert 0:vector[tls.compression_method].domain <= X & X < vector[tls.compression_method].end(old_fml:a) -> vector[tls.compression_method].value(fml:a,X) = vector[tls.compression_method].value(old_fml:a,X); assert vector[tls.compression_method].value(fml:a,vector[tls.compression_method].end(old_fml:a)) = fml:v}",
            "<<<\n\t        if (`fml:a`.size() > 0) {\n\t            a.pop_back();\n\t        }\n            >>>",
            "<<<\n\t        if (0 <= `fml:x` && `fml:x` < (`index`)`fml:a`.size()) \n\t            `fml:y` = `fml:a`[`fml:x`];\n\t    >>>",
            "{assert forged_protected_quic_packet.arr.end(fml:a) = forged_protected_quic_packet.arr.end(old_fml:a); assert forged_protected_quic_packet.arr.value(fml:a,X) = (fml:y if (X = fml:x) else forged_protected_quic_packet.arr.value(old_fml:a,X))}",
            "<<<\n\t        `fml:a`.resize(`fml:s`);\n\t        for (unsigned i = 0; i < `fml:s`; i++)\n\t            `fml:a`[i] = y;\n\t    >>>",
            "assert tls.handshakes.end(fml:a) = 0",
            "{}",
            "<<<\n\t        unsigned __old_size = `fml:a`.size();\n\t        `fml:a`.resize(`fml:s`);\n\t        for (unsigned i = __old_size; i < (unsigned)`fml:s`; i++)\n\t            `fml:a`[i] = v;\n            >>>",
            "<<<\n\t        if (0 <= `fml:x` && `fml:x` < (`idx`)`fml:a`.size()) \n\t            `fml:a`[`fml:x`] = `fml:y`;\n\t    >>>",
            "<<<\n\t        `fml:a`.push_back(`fml:v`);\n            >>>",
            "<<<\n\t    std::vector<char> buf(y.size());\n\t    std::copy(y.begin(),y.end(),buf.begin());\n\t    `quic_deser_vn` des(buf);\n\t    __deser(des,x);\n\t    >>>",
            "assert clients.client.arr.end(fml:a) = 0",
            "{assert quic_packet_coal_0rtt.retired_cids.end(fml:a) = quic_packet_coal_0rtt.retired_cids.end(old_fml:a); assert quic_packet_coal_0rtt.retired_cids.value(fml:a,X) = (fml:y if (X = fml:x) else quic_packet_coal_0rtt.retired_cids.value(old_fml:a,X))}",
            "{}",
            "{}",
            "fml:y := fml:x + 1",
            "assert 0:quic_packet_0rtt.idx < fml:x",
            "assert arr_streamid_s.end(fml:a) = fml:s & arr_streamid_s.value(fml:a,X) = fml:y",
            "{}",
            "{while fml:end < stream_data.end(http_request) & stream_data.value(http_request,fml:end) ~= 10\n{call fml:end := stream_pos.next(fml:end)}; if fml:end < stream_data.end(http_request) {call fml:end := stream_pos.next(fml:end)}; local loc:data {loc:data := stream_data.segment(http_request,stream_length(fml:dcid,fml:s),fml:end); call app_send_event(fml:src, fml:dst, fml:dcid, fml:s, loc:data, stream_length(fml:dcid,fml:s), true); current_stream := current_stream + 4}}",
            "assert 0:forged_protected_quic_packet.idx < fml:x",
            "{assert arr_pkt_num_r.end(fml:a) > arr_pkt_num_r.end(old_fml:a) & ~(arr_pkt_num_r.end(old_fml:a) < X & X < arr_pkt_num_r.end(fml:a)); assert 0:jdx_r <= X & X < arr_pkt_num_r.end(old_fml:a) -> arr_pkt_num_r.value(fml:a,X) = arr_pkt_num_r.value(old_fml:a,X); assert arr_pkt_num_r.value(fml:a,arr_pkt_num_r.end(old_fml:a)) = fml:v}",
            "<<<\n\t        unsigned __old_size = `fml:a`.size();\n\t        `fml:a`.resize(`fml:s`);\n\t        for (unsigned i = __old_size; i < (unsigned)`fml:s`; i++)\n\t            `fml:a`[i] = v;\n            >>>",
            "{assert ~http_request_file.pending(fml:c); http_request_file.pending(fml:c) := true}",
            "assert quic_packet_coal_0rtt.retired_cids.end(fml:a) = 0",
            "{}",
            "{receiving_resetRecvd(fml:id) := false; receiving_resetRead(fml:id) := true}",
            "<<<\n\t        if (0 <= `fml:x` && `fml:x` < (`vector[tls.psk_identity].domain`)`fml:a`.size()) \n\t            `fml:y` = `fml:a`[`fml:x`];\n\t    >>>",
            "{assert forged_quic_packet_vn.arr.end(fml:a) = forged_quic_packet_vn.arr.end(old_fml:a); assert forged_quic_packet_vn.arr.value(fml:a,X) = (fml:y if (X = fml:x) else forged_quic_packet_vn.arr.value(old_fml:a,X))}",
            "{assert replayed_quic_packet_0rtt.arr.end(fml:a) = replayed_quic_packet_0rtt.arr.end(old_fml:a); assert replayed_quic_packet_0rtt.arr.value(fml:a,X) = (fml:y if (X = fml:x) else replayed_quic_packet_0rtt.arr.value(old_fml:a,X))}",
            "<<<\n\t    `quic_ser` ser;\n\t    __ser(ser,x);\n\t    y.resize(ser.res.size());\n\t    for (unsigned i = 0; i < ser.res.size(); i++)\n\t        y[i] = (unsigned char) ser.res[i];\n//\t    std::copy(ser.res.begin(),ser.res.end(),y.begin());\n\t    >>>",
            "{}",
            "assert tls.handshakes.end(fml:a) = fml:s & tls.handshakes.value(fml:a,X) = fml:y",
            "assert fml:s = frame.ack.range.arr.end(fml:a)",
            "{}",
            "{server.enc_level := quic_packet_type.initial; ip.endpoint.protocol(server.ep) := ip.udp; ip.endpoint.addr(server.ep) := server_addr; ip.endpoint.port(server.ep) := server_port; if ip.endpoint.addr(server.ep) = 0x7f000001 | is_mim {ip.endpoint.interface(server.ep) := ip.lo}\nelse {ip.endpoint.interface(server.ep) := ip.ivy}}",
            "<<<\n                if ((`replayed_quic_packet_0rtt.idx`)`fml:a`.size() > 0)\n                    `fml:res` = `fml:a`.back();\n            >>>",
            "{}",
            "<<<\n    val.val = 0;\n    for (unsigned i = 0; i < bytes.size(); i++)\n        val.val = (val.val << 8) + bytes[i];\n    >>>",
            "fml:y := fml:x + 1",
            "assert false",
            "assert arr_pkt_num_s.value(fml:a,fml:x) = fml:y",
            "<<<\n\t        unsigned __old_size = `fml:a`.size();\n\t        `fml:a`.resize(`fml:s`);\n\t        for (unsigned i = __old_size; i < (unsigned)`fml:s`; i++)\n\t            `fml:a`[i] = v;\n            >>>",
            "<<<\n                for (unsigned i = 0; i < `fml:a`.size()/2; i++) {\n                    std::swap(`fml:a`[i],`fml:a`[`fml:a`.size()-i-1]);\n                }\n            >>>",
            "{}",
            "{}",
            "{}",
            "<<<\n                for (unsigned i = 0; i < `fml:b`.size(); i++)\n\t            `fml:a`.push_back(`fml:b`[i]);\n            >>>",
            "{assert tls_extensions.end(fml:a) = fml:s; assert 0:tls_extensions.domain <= X & X < tls_extensions.end(old_fml:a) -> tls_extensions.value(fml:a,X) = tls_extensions.value(old_fml:a,X); assert tls_extensions.end(old_fml:a) <= X & X < fml:s -> tls_extensions.value(fml:a,X) = fml:v}",
            "<<<\n\t        `fml:a`.resize(`fml:s`);\n\t        for (unsigned i = 0; i < `fml:s`; i++)\n\t            `fml:a`[i] = y;\n\t    >>>",
            "assert 0:stream_pos <= fml:x & fml:x < stream_data.end(fml:a)",
            "call enqueue_frame(fml:scid, fml:f, fml:e, false)",
            "<<<\n                for (unsigned i = 0; i < `fml:b`.size(); i++)\n\t            `fml:a`.push_back(`fml:b`[i]);\n            >>>",
            "{}",
            "<<<\n\t        `fml:a`.push_back(`fml:v`);\n            >>>",
            "assert fml:s = arr_pkt_num_r.end(fml:a)",
            "assert forged_quic_packet_retry.retired_cids.end(fml:a) = fml:s & forged_quic_packet_retry.retired_cids.value(fml:a,X) = fml:y",
            "assert vector[tls.psk_identity].end(fml:a) = 0",
            "{}",
            "<<<\n        is_rtt = true;\n        uint8_t *bytes;\n        int bbsize = 0;\n        std::cerr << \"XXXXXXXXXXXX\"  << \"\\n\";\n        bbsize = get_session_ticket_size();\n        bytes = (uint8_t*) malloc(bbsize * sizeof(uint8_t));\n        get_session_ticket(bytes,bbsize); \n        ptls_iovec_t ticket_psk; \n        vec_to_ptls_iovec(ticket_psk,bytes,bbsize);\n\n        ptls_context_t* ctx;\n        ctx = new ptls_context_t;\n        memset(ctx, 0, sizeof(ptls_context_t));\n        ctx->random_bytes = ptls_openssl_random_bytes;\n        ctx->key_exchanges = picotls_key_exchanges; \n        ctx->cipher_suites = picotls_cipher_suites; \n        ctx->send_change_cipher_spec = 0;\n        // ctx->hkdf_label_prefix = QUIC_LABEL_QUIC_BASE;\n        ctx->hkdf_label_prefix__obsolete = NULL;\n        \n        //ctx->update_traffic_key = new ptls_update_traffic_key_t;\n        ctx->update_traffic_key = (ptls_update_traffic_key_t *)malloc(sizeof(ptls_update_traffic_key_t));\n        memset(ctx->update_traffic_key, 0, sizeof(ptls_update_traffic_key_t));\n        ctx->update_traffic_key->cb = quic_update_traffic_key_cb;\n        \n        //ctx->on_extension = new ptls_on_extension_t;\n        ctx->on_extension = (ptls_on_extension_t *)malloc(sizeof(ptls_on_extension_t));\n        memset(ctx->on_extension, 0, sizeof(ptls_on_extension_t));\n        ctx->on_extension->cb = tls_on_extension_cb;\n\n        //ctx->client_mode = !is_server;\n    \n        ctx->require_client_authentication = 0; \n\n        ctx->get_time = &ptls_get_time;\n\n        const char * is_zrtt = getenv(\"ZERORTT_TEST\");\n        if(is_zrtt == NULL){\n            ctx->ticket_lifetime = 0; // no ticket? was: 100000; /* 100,000 seconds, a bit more than one day */\n            ctx->require_dhe_on_psk = 1;\n            ctx->max_early_data_size = 0xFFFFFFFF;\n            ctx->omit_end_of_early_data = 1;\n        }\n        else {\n            std::cerr << \"PROUT \" << is_zrtt << std::endl;\n            ctx->ticket_lifetime = 60 * 60 * 24;\n            ctx->require_dhe_on_psk = 1;\n            ctx->max_early_data_size = 0xFFFFFFFF;\n            ctx->omit_end_of_early_data = 1;\n        }\n\n       // ctx->use_exporter = 1; // master secrets should be recorded\n       \n        ptls_handshake_properties_t *handshake_properties = new ptls_handshake_properties_t; \n        memset(handshake_properties, 0, sizeof(ptls_handshake_properties_t));\n        handshake_properties->collect_extension = tls_collect_extensions_cb;\n        handshake_properties->collected_extensions = tls_collected_extensions_cb;\n  \n        ptls_iovec_t *alpn_vec = new(ptls_iovec_t);  // TODO: will leak this\n        \n        // h3-x == HTTP/3 over QUIC \n        // hq-x == HTTP/0.9 over QUIC\n        alpn_vec->base = (uint8_t*) \"hq-interop\";\n        if(const char* env_p = std::getenv(\"TEST_ALPN\")) { \n            std::cerr << \"TEST_ALPN \" << env_p << std::endl;\n            alpn_vec->base = (uint8_t*) env_p;\n        }\n\n        alpn_vec->len = strlen((char *)(alpn_vec->base));\n        handshake_properties->client.negotiated_protocols.count = 1;\n        handshake_properties->client.negotiated_protocols.list  = alpn_vec;\n\n        ptls_raw_extension_t *ptls_exts = new ptls_raw_extension_t[e.size()+he.size()];\n        for (unsigned i = 0; i < e.size(); i++) {\n            `tls_ser` ser;\n\t        std::cerr << \"etype =\" << std::endl;  \n            __ser(ser,e[i]);\n            unsigned etype = (((unsigned char)(ser.res[0])) << 8) + ((unsigned char)(ser.res[1]));\n            unsigned len = (((unsigned char)(ser.res[2])) << 8) + ((unsigned char)(ser.res[3]));\n            unsigned char *data = new unsigned char[ser.res.size()-4];\n            std::copy(ser.res.begin()+4,ser.res.end(),data);\n            ptls_exts[i].type = etype;\n            std::cerr << \"etype =\" << etype << std::endl;  \n            ptls_exts[i].data.base = data;\n            //std::cerr << \"data =\" << data << std::endl;  \n            ptls_exts[i].data.len = len;\n            std::cerr << \"len =\" << len << std::endl;  \n            // int eres = gnutls_session_ext_register (session, \"ext_name\", etype,\n            //   GNUTLS_EXT_APPLICATION, gnutls_ext_supp_recv_params,\n            //   gnutls_ext_supp_send_params, 0,0,0,0);\n            // if (eres != GNUTLS_E_SUCCESS) {\n            //     std::cerr << \"gnutls_session_ext_register\\n\";\n            //     exit(1);\n            // }\n        }\n        for (unsigned i = 0; i <  he.size(); i++) {\n            `tls_ser` ser;\n\t        std::cerr << \"etype =\" << std::endl;  \n            __ser(ser,he[i]);\n            // unsigned char etype = (((unsigned char)(ser.res[0])));\n            // unsigned len = (((unsigned char)(ser.res[1])) << 16) + (((unsigned char)(ser.res[2])) << 8) + ((unsigned char)(ser.res[3]));\n            // unsigned char *data = new unsigned char[ser.res.size()-4];\n            unsigned etype = (((unsigned char)(ser.res[0])) << 8) + ((unsigned char)(ser.res[1]));\n            unsigned len = (((unsigned char)(ser.res[2])) << 8) + ((unsigned char)(ser.res[3]));\n            unsigned char *data = new unsigned char[ser.res.size()-4];\n            std::copy(ser.res.begin()+4,ser.res.end(),data);\n            ptls_exts[e.size()+i].type = etype;\n            std::cerr << \"etype =\" << etype << std::endl;  \n            ptls_exts[e.size()+i].data.base = data;\n            std::cerr << \"data =\" << data << std::endl;  \n            ptls_exts[e.size()+i].data.len = len;\n            std::cerr << \"len =\" << len << std::endl;  \n            // int eres = gnutls_session_ext_register (session, \"ext_name\", etype,\n            //   GNUTLS_EXT_APPLICATION, gnutls_ext_supp_recv_params,\n            //   gnutls_ext_supp_send_params, 0,0,0,0);\n            // if (eres != GNUTLS_E_SUCCESS) {\n            //     std::cerr << \"gnutls_session_ext_register\\n\";\n            //     exit(1);\n            // }\n        }\n        ptls_exts[e.size()+he.size()].type = 0xffff;\n        ptls_exts[e.size()+he.size()].data.base = NULL;\n        ptls_exts[e.size()+he.size()].data.len = 0;\n\n        handshake_properties->additional_extensions = ptls_exts;\n\n        handshake_properties->client.negotiate_before_key_exchange = 0; // 1 = HELLORETRY\n\n        if (ticket_psk.base != NULL && !is_server) {\n            std::cerr << \"ticket_psk \"  <<  ticket_psk.len << \"\\n\";\n            //std::cerr << \"ticket_psk \"  <<  ticket_psk.base << \"\\n\";\n            handshake_properties->client.session_ticket.base = ticket_psk.base;\n            handshake_properties->client.session_ticket.len = ticket_psk.len;\n            size_t m = 0xFFFFFFFF;  //0xFFFFFFFF\n            handshake_properties->client.max_early_data_size = &m;      \n        }\n\n\n        // Read the certificate, if we are a server\n        if (is_server) {\n            /* Read the certificate file */\n            if (ptls_load_certificates(ctx, \"leaf_cert.pem\") != 0) {\n                 std::cerr << \"could not load certificate file leaf_cert.pem\\n\";\n                 exit(1);\n            } else if(set_sign_certificate_from_key_file(\"leaf_cert.key\", ctx)) {\n                std::cerr << \"could not load key file leaf_cert.key\\n\";\n                exit(1);\n            }\n        }\n\n        ptls_t *session;\n        session = ptls_new(ctx,is_server ? 1 : 0);\n        ptls_set_server_name(session, \"servername\", strlen(\"servername\"));\n\n\n        if(const char* env_p = std::getenv(\"TEST_IMPL\")) { \n            std::cerr << \"TEST_IMPL \" << env_p << std::endl;\n            std::cerr << \"TEST_IMPL \" << env_p << std::endl;\n            std::cerr << \"is_server \" << is_server << std::endl;\n            if(strncmp(env_p,\"quic-go\",10) == 0 \n                || strncmp(env_p,\"quiche\",10) == 0 \n                   || strncmp(env_p,\"lsquic\",10) == 0 \n                   || strncmp(env_p,\"quinn\",10) == 0\n                      || strncmp(env_p,\"aioquic\",10) == 0 || true) //TODO ask why sometime ALPN needed\n                if (is_server) {\n                        std::cerr << \"ptls_set_negotiated_protocol\"  << std::endl;\n                        std::cerr << \"ptls_set_negotiated_protocol\"  << std::endl;\n                        ptls_set_negotiated_protocol(session, \n                            (const char*) handshake_properties->client.negotiated_protocols.list[0].base, \n                            handshake_properties->client.negotiated_protocols.list[0].len);\n                }\n                   \n        }\n\n        picotls_connection *s = new picotls_connection(c,session,ctx,*`tls_api.upper.foo.cb`,handshake_properties,is_server);\n        *ptls_get_data_ptr(session) = s;  \n\n        \n\t    `tls_api.upper.foo.cid_map`[c] = s;\n\n        if (!is_server) \n            picotls_do_handshake(s,0,0,0);\n        std::cerr << \"create 0rtt finish\"  << \"\\n\";\n        >>>",
            "fml:res := fml:dst = client.ep | fml:dst = client_alt | fml:dst = client_vn",
            "{assert forged_quic_packet.ptype(fml:pkt) ~= quic_packet_type.zero_rtt & forged_quic_packet.ptype(fml:pkt) ~= quic_packet_type.version_negociation & forged_quic_packet.ptype(fml:pkt) ~= quic_packet_type.retry; local loc:dcid {loc:dcid := forged_quic_packet.dst_cid(fml:pkt); local loc:scid {loc:scid := forged_quic_packet.src_cid(fml:pkt); if cid_mapped(loc:dcid) {loc:dcid := cid_to_aid(loc:dcid)}; local loc:0 {call loc:0 := tls_api.upper.get_old_new_token; assert stream_data.end(forged_quic_packet.token(fml:pkt)) ~= 0 -> retry_sent(client_initial_rcid) | retry_recv(loc:scid) | forged_quic_packet.token(fml:pkt) = loc:0}; if (fml:src = client_alt | fml:dst = client_alt) & nclients = 1 {migration_done := true}; assert connected(loc:dcid) | forged_quic_packet.ptype(fml:pkt) = quic_packet_type.initial & is_client(loc:scid) & loc:dcid = nonce_cid(loc:scid); local loc:0 {call loc:0 := forged_quic_packet.long(fml:pkt); if loc:0 {assert connected(loc:dcid) -> connected_to(loc:dcid) = loc:scid}\nelse {loc:scid := connected_to(loc:dcid)}}; if retry_sent(loc:dcid) & ~_generating & ~zero_length_token & forged_quic_packet.ptype(fml:pkt) = quic_packet_type.initial {assert loc:dcid = client_initial_rcid}; assert forged_quic_packet.ptype(fml:pkt) = queued_level(loc:scid); if _generating {assert forged_quic_packet.seq_num(fml:pkt) = last_pkt_num(loc:scid,forged_quic_packet.ptype(fml:pkt)) + 0x1}; last_pkt_num(loc:scid,forged_quic_packet.ptype(fml:pkt)) := forged_quic_packet.seq_num(fml:pkt); assert ~sent_pkt(loc:scid,forged_quic_packet.ptype(fml:pkt),forged_quic_packet.seq_num(fml:pkt)); sent_pkt(loc:scid,forged_quic_packet.ptype(fml:pkt),forged_quic_packet.seq_num(fml:pkt)) := true; assert num_queued_frames(loc:scid) > 0; assert forged_quic_packet.payload(fml:pkt) = queued_frames(loc:scid); local loc:0 {call loc:0 := forged_quic_packet.long(fml:pkt); assert conn_seen(loc:scid) & loc:0 & is_client(loc:scid) -> conn_requested(fml:src,fml:dst,loc:scid)}; assert conn_seen(loc:dcid) -> hi_non_probing_endpoint(loc:dcid,fml:dst); assert ~_generating & ~queued_non_ack(loc:scid) -> ack_credit(loc:scid) > 0; if conn_draining(loc:scid) {assert ~draining_pkt_sent(loc:scid) & queued_close(loc:scid)}}}}",
            "{}",
            "{}",
            "<<<\n\t        if (`fml:a`.size() > 0) {\n\t            a.pop_back();\n\t        }\n            >>>",
            "{}",
            "{}",
            "<<<\n\t    >>>",
            "fml:y := fml:x - 1",
            "assert forged_quic_packet.retired_cids.value(fml:a,fml:x) = fml:y",
            "fml:y := fml:x + 1",
            "<<<\n\t        unsigned __old_size = `fml:a`.size();\n\t        `fml:a`.resize(`fml:s`);\n\t        for (unsigned i = __old_size; i < (unsigned)`fml:s`; i++)\n\t            `fml:a`[i] = v;\n            >>>",
            "<<<\n\t        if (0 <= `fml:x` && `fml:x` < (`quic_packet_retry.idx`)`fml:a`.size()) \n\t            `fml:y` = `fml:a`[`fml:x`];\n\t    >>>",
            "{}",
            "{}",
            "assert vector[tls.psk_identity].end(fml:a) = fml:s & vector[tls.psk_identity].value(fml:a,X) = fml:y",
            "<<< res = (x >> 8) & 0xff; >>>",
            "<<<\n            const char * session_file = getenv(\"active_connection_id_limit\");\n            FILE *fp;\n            size_t len = 0;\n            ssize_t read;\n            char * line = NULL;\n            if(session_file != NULL) {\n                fp = fopen(session_file,\"r\");\n                read = getline(&line, &len, fp);\n                fclose(fp);\n                bool is_error = false;\n                if(line != NULL) { \n                    i = (uint32_t) std::stoll(line);\n                }\n            }\n        >>>",
            "{}",
            "{}",
            "{}",
            "local loc:dcid {loc:dcid := quic_packet_0rtt.dst_cid(fml:pkt); local loc:0 {call loc:0 := quic_packet_0rtt.long(fml:pkt); local loc:scid {loc:scid := (quic_packet_0rtt.src_cid(fml:pkt) if loc:0 else connected_to(loc:dcid)); if cid_mapped(loc:dcid) {loc:dcid := cid_to_aid(loc:dcid)}; if queued_ack_eliciting(loc:scid) {ack_credit(loc:dcid) := ack_credit(loc:dcid) + 1}; if ~queued_non_ack(loc:scid) {ack_credit(loc:scid) := ack_credit(loc:scid) - 1}; last_pkt_num(loc:scid,quic_packet_0rtt.ptype(fml:pkt)) := quic_packet_0rtt.seq_num(fml:pkt); if quic_packet_0rtt.ptype(fml:pkt) = quic_packet_type.zero_rtt & ~_generating {connected(the_cid) := true; connected(loc:scid) := true; connected_to(the_cid) := loc:scid; connected_to(loc:scid) := the_cid}; zero_rtt_sent := true; call queued_frames_rtt(loc:scid) := frame.arr.empty; queued_non_probing(loc:scid) := false; queued_non_ack(loc:scid) := false; queued_close(loc:scid) := false; num_queued_frames_rtt(loc:scid) := 0:frame.idx; queued_ack_eliciting(loc:scid) := false}}}",
            "assert tls_hand_extensions.end(fml:a) = fml:s & tls_hand_extensions.value(fml:a,X) = fml:y",
            "{assert quic_packet_0rtt.arr.end(fml:a) = fml:s; assert 0:quic_packet_0rtt.idx <= X & X < quic_packet_0rtt.arr.end(old_fml:a) -> quic_packet_0rtt.arr.value(fml:a,X) = quic_packet_0rtt.arr.value(old_fml:a,X); assert quic_packet_0rtt.arr.end(old_fml:a) <= X & X < fml:s -> quic_packet_0rtt.arr.value(fml:a,X) = fml:v}",
            "<<<\n                for (unsigned i = 0; i < `fml:b`.size(); i++)\n\t            `fml:a`.push_back(`fml:b`[i]);\n            >>>",
            "<<<\n\t    `quic_ser_vn` ser;\n\t    __ser(ser,x);\n\t    y.resize(ser.res.size());\n\t    for (unsigned i = 0; i < ser.res.size(); i++)\n\t        y[i] = (unsigned char) ser.res[i];\n//\t    std::copy(ser.res.begin(),ser.res.end(),y.begin());\n\t    >>>",
            "<<<\n\t    std::vector<char> buf(y.size());\n\t    std::copy(y.begin(),y.end(),buf.begin());\n\t    `quic_deser_zerortt` des(buf);\n\t    __deser(des,x);\n\t    >>>",
            "{}",
            "fml:y := fml:x - 1",
            "{}",
            "{assert fml:x < fml:y & (fml:x < Y -> fml:y <= Y); assert tls.handshakes.domain.succ(fml:x,fml:y)}",
            "<<<\n\t        `fml:s` = (`forged_quic_packet.idx`) `fml:a`.size();\n\t    >>>",
            "<<<\n    res = 0;\n    if(const char* env_p2 = std::getenv(\"TEST_TYPE\")) { \n      if(strcmp(env_p2, \"server\") == 0 || cond) {\n         if(const char* env_p3 = std::getenv(\"TEST_DCIL\")) {\n            std::cerr << \"TEST_DCIL \" << env_p3 << \"\\n\";\n\t        res = atoi(env_p3);\n         } else \n\t   res = 8;\n      } else \n\t  res = 8;\n    } else \n      res = 8;\n    std::cerr <<  \"dcid_size_pos size: \" <<  res << \"\\n\";\n    >>>",
            "<<<\n\t        if (`fml:a`.size() > 0) {\n\t            a.pop_back();\n\t        }\n            >>>",
            "{}",
            "assert 0:clients.client.idx <= fml:s",
            "fml:y := fml:x + 1",
            "{}",
            "<<<\n\t        if (`fml:a`.size() > 0) {\n\t            a.pop_back();\n\t        }\n            >>>",
            "{assert forged_pkts.end(fml:pkt) > 0; assert mim_agent.nat_configured; assert fml:src ~= fml:dst; assert ~(fml:src = mim_agent.ep_out & fml:dst = mim_agent.ep_in); assert ~(fml:dst = mim_agent.ep_out & fml:src = mim_agent.ep_in); assert ~mim_agent.forward_turn; assert ~packed_forwarded_arr(fml:pkt)}",
            "{}",
            "<<<\n\t        `fml:a`.push_back(`fml:v`);\n            >>>",
            "<<<\n        std::cerr << \"decrypt_cipher start \" << \"\\n\";\n\t    picotls_connection *s = `tls_api.upper.foo.cid_map`[c];\n        ptls_cipher_context_t *pn_enc = (ptls_cipher_context_t *)(s->crypto_context[l].pn_dec);\n        encrypt_symm(pn_enc,cipher,iv,clear);\n        std::cerr << \"decrypt_cipher end \" << \"\\n\";\n\n        >>>",
            "assert 0:prot.idx <= fml:x & fml:x < prot.arr.end(fml:a)",
            "{}",
            "assert servers.server.arr.value(fml:a,fml:x) = fml:y",
            "<<<\n\t    >>>",
            "{}",
            "{}",
            "second_server.tls_id := fml:e",
            "{fml:ok := true; local loc:max {loc:max := 0:stream_pos; local loc:tp {loc:tp := trans_params(fml:scid); if active_connection_id_limit.is_set(loc:tp) {loc:max := active_connection_id_limit.stream_pos_32(active_connection_id_limit.value(loc:tp)); fml:ok := fml:count <= loc:max}}}}",
            "{}",
            "{}",
            "{}",
            "{}",
            "{}",
            "assert quic_packet_vn.arr.value(fml:a,fml:x) = fml:y",
            "<<<\n        const char * session_file = getenv(\"initial_max_stream_data_bidi_remote\");\n        FILE *fp;\n        if(session_file != NULL) {\n            fp = fopen(session_file,\"w\");\n            fprintf(fp, \"%llu\", i);\n            fclose(fp);\n        }\n\n        >>>",
            "{assert fml:x < fml:y & (fml:x < Y -> fml:y <= Y); assert frame.ack.range.idx.succ(fml:x,fml:y)}",
            "{}",
            "assert 0:forged_quic_packet_retry.idx <= fml:x & fml:x < forged_quic_packet_retry.arr.end(fml:a)",
            "assert 0:tls_extensions.domain <= fml:x & fml:x < tls_extensions.end(fml:a)",
            "mim_agent.ep_in := fml:e",
            "local loc:0 {call loc:0 := stream_data.empty; local loc:early_data_end {loc:early_data_end := loc:0; local loc:0 {call loc:0 := tls_id_to_dst(fml:tls_id); call show_biatch(loc:0)}; call loc:early_data_end := stream_data.append(loc:early_data_end, 0xff:byte); call loc:early_data_end := stream_data.append(loc:early_data_end, 0xff:byte); call loc:early_data_end := stream_data.append(loc:early_data_end, 0xff:byte); call loc:early_data_end := stream_data.append(loc:early_data_end, 0xff:byte); local loc:e {loc:e := (quic_packet_type.initial if (fml:lev = 0) else (quic_packet_type.handshake if (fml:lev = 2) else quic_packet_type.zero_rtt)); if stream_data.value(fml:bytes,0) = 0x4 & stream_data.segment(fml:bytes,stream_data.end(fml:bytes) - 4,stream_data.end(fml:bytes)) = loc:early_data_end {loc:e := quic_packet_type.one_rtt}; local loc:0 {call loc:0 := tls_id_to_cid(fml:tls_id); local loc:scid {loc:scid := loc:0; local loc:0,loc:1 {call loc:0 := tls_id_to_src(fml:tls_id); call loc:1 := tls_id_to_dst(fml:tls_id); call tls_send_event(loc:0, loc:1, loc:scid, 0:cid, fml:bytes, crypto_data_end(loc:scid,loc:e), loc:e, fml:tls_id)}}}}}}",
            "{}",
            "{}",
            "{}",
            "assert 0:frame.idx <= fml:x & fml:x < frame.arr.end(fml:a)",
            "{}",
            "{assert quic_packet_0rtt.arr.end(fml:a) = quic_packet_0rtt.arr.end(old_fml:a); assert quic_packet_0rtt.arr.value(fml:a,X) = (fml:y if (X = fml:x) else quic_packet_0rtt.arr.value(old_fml:a,X))}",
            "assert 0:vector[tls.compression_method].domain <= fml:x & fml:x < vector[tls.compression_method].end(fml:a)",
            "<<<\n                if ((`vector[tls.cipher_suite].domain`)`fml:a`.size() > 0)\n                    `fml:res` = `fml:a`.back();\n            >>>",
            "{}",
            "<<<\n\t        `fml:s` = (`tls_hand_extensions.domain`) `fml:a`.size();\n\t    >>>",
            "<<<\n                if ((`forged_quic_packet_vn.idx`)`fml:a`.size() > 0)\n                    `fml:res` = `fml:a`.back();\n            >>>",
            "{unknown_transport_parameter.is_set(fml:s) := true; unknown_transport_parameter.value(fml:s) := fml:p}",
            "{assert quic_packet.arr.end(fml:a) = quic_packet.arr.end(old_fml:a); assert quic_packet.arr.value(fml:a,X) = (fml:y if (X = fml:x) else quic_packet.arr.value(old_fml:a,X))}",
            "{initial_max_data.is_set(fml:s) := true; initial_max_data.value(fml:s) := fml:p}",
            "<<<\n\t        if (0 <= `fml:x` && `fml:x` < (`replayed_quic_packet_0rtt.idx`)`fml:a`.size()) \n\t            `fml:a`[`fml:x`] = `fml:y`;\n\t    >>>",
            "{assert fml:x < fml:y & (fml:x < Y -> fml:y <= Y); assert tls_hand_extensions.domain.succ(fml:x,fml:y)}",
            "<<<\n                if ((`forged_quic_packet_retry.idx`)`fml:a`.size() > 0)\n                    `fml:res` = `fml:a`.back();\n            >>>",
            "{}",
            "call enqueue_frame(fml:scid, fml:f, fml:e, false)",
            "{}",
            "{}",
            "<<<\n\t        if (0 <= `fml:x` && `fml:x` < (`forged_quic_packet.idx`)`fml:a`.size()) \n\t            `fml:y` = `fml:a`[`fml:x`];\n\t    >>>",
            "{initial_max_stream_data_bidi_remote.is_set(fml:s) := true; initial_max_stream_data_bidi_remote.value(fml:s) := fml:p}",
            "{}",
            "{}",
            "assert fml:s = quic_packet.arr.end(fml:a)",
            "{assert fml:x < fml:y & (fml:x < Y -> fml:y <= Y); assert idx_r.succ(fml:x,fml:y)}",
            "{assert vector[transport_parameter].end(fml:a) > vector[transport_parameter].end(old_fml:a) & ~(vector[transport_parameter].end(old_fml:a) < X & X < vector[transport_parameter].end(fml:a)); assert 0:vector[transport_parameter].domain <= X & X < vector[transport_parameter].end(old_fml:a) -> vector[transport_parameter].value(fml:a,X) = vector[transport_parameter].value(old_fml:a,X); assert vector[transport_parameter].value(fml:a,vector[transport_parameter].end(old_fml:a)) = fml:v}",
            "{}",
            "assert 0:forged_quic_packet_retry.idx < fml:x",
            "{assert mim_agent.nat_configured; assert fml:src ~= fml:dst; assert ~(fml:src = mim_agent.ep_out & fml:dst = mim_agent.ep_in); assert ~(fml:dst = mim_agent.ep_out & fml:src = mim_agent.ep_in); assert ~mim_agent.forward_turn; assert stream_data.end(mim_agent.ppkt_to_be_forge) > 0; assert forged_protected_quic_packet.ptype(fml:pkt) = forged_protected_quic_packet.ptype(mim_agent.ppkt_to_be_forge_parsed); assert forged_protected_quic_packet.dst_cid(fml:pkt) = forged_protected_quic_packet.dst_cid(mim_agent.ppkt_to_be_forge_parsed); assert forged_protected_quic_packet.src_cid(fml:pkt) = forged_protected_quic_packet.src_cid(mim_agent.ppkt_to_be_forge_parsed); assert forged_protected_quic_packet.protected_payload(fml:pkt) = forged_protected_quic_packet.protected_payload(mim_agent.ppkt_to_be_forge_parsed)}",
            "<<<\n    scid_h = scil;\n    dcid_h = dcil;\n    >>>",
            "if _generating {assert fml:scid = the_cid; assert frame.crypto.length(fml:f) > 0; assert frame.crypto.offset(fml:f) = crypto_length(fml:scid,fml:e); assert frame.crypto.length(fml:f) = crypto_data_end(fml:scid,fml:e) - frame.crypto.offset(fml:f)}",
            "{}",
            "{}",
            "{}",
            "assert forged_quic_packet_retry.retired_cids.value(fml:a,fml:x) = fml:y",
            "{}",
            "<<<\n\t    >>>",
            "{}",
            "{assert vector[tls.compression_method].end(fml:a) = vector[tls.compression_method].end(old_fml:a); assert vector[tls.compression_method].value(fml:a,X) = (fml:y if (X = fml:x) else vector[tls.compression_method].value(old_fml:a,X))}",
            "{}",
            "<<<\n                for (unsigned i = 0; i < `fml:a`.size()/2; i++) {\n                    std::swap(`fml:a`[i],`fml:a`[`fml:a`.size()-i-1]);\n                }\n            >>>",
            "assert 0:tls_extensions.domain < fml:x",
            "second_client.ep := fml:e",
            "<<<\n\t        unsigned __old_size = `fml:a`.size();\n\t        `fml:a`.resize(`fml:s`);\n\t        for (unsigned i = __old_size; i < (unsigned)`fml:s`; i++)\n\t            `fml:a`[i] = v;\n            >>>",
            "<<<\n\t        `fml:s` = (`quic_packet_0rtt.idx`) `fml:a`.size();\n\t    >>>",
            "{}",
            "assert vector[tls.handshake].end(fml:a) = 0",
            "{}",
            "assert fml:s = vector[tls.extension].end(fml:a)",
            "<<<\n\t        if (`fml:a`.size() > 0) {\n\t            a.pop_back();\n\t        }\n            >>>",
            "{}",
            "<<<\n\t        `fml:a`.push_back(`fml:v`);\n            >>>",
            "call enqueue_frame(fml:scid, fml:f, fml:e, false)",
            "<<<\n\t        `fml:a`.resize(`fml:s`);\n\t        for (unsigned i = 0; i < `fml:s`; i++)\n\t            `fml:a`[i] = y;\n\t    >>>",
            "{stateless_reset_token.is_set(fml:s) := true; stateless_reset_token.value(fml:s) := fml:p}",
            "{}",
            "<<<\n\t        `fml:a`.resize(`fml:s`);\n\t        for (unsigned i = 0; i < `fml:s`; i++)\n\t            `fml:a`[i] = y;\n\t    >>>",
            "<<<\n\t        if (0 <= `fml:x` && `fml:x` < (`quic_packet.idx`)`fml:a`.size()) \n\t            `fml:y` = `fml:a`[`fml:x`];\n\t    >>>",
            "<<<\n                for (unsigned i = 0; i < `fml:a`.size()/2; i++) {\n                    std::swap(`fml:a`[i],`fml:a`[`fml:a`.size()-i-1]);\n                }\n            >>>",
            "<<<\n                if ((`tls.handshakes.domain`)`fml:a`.size() > 0)\n                    `fml:res` = `fml:a`.back();\n            >>>",
            "<<<\n\t    >>>",
            "{}",
            "<<<\n\t        `fml:a`.push_back(`fml:v`);\n            >>>",
            "{}",
            "assert replayed_quic_packet_0rtt.arr.value(fml:a,fml:x) = fml:y",
            "assert 0:frame.ack_ecn.range.idx <= fml:x & fml:x < frame.ack_ecn.range.arr.end(fml:a)",
            "attacker.tls_id := fml:e",
            "{}",
            "{}",
            "if _generating {assert fml:scid = the_cid}",
            "assert forged_pkts.end(fml:a) = fml:s & forged_pkts.value(fml:a,X) = fml:y",
            "assert fml:s = forged_protected_quic_packet.arr.end(fml:a)",
            "{}",
            "{}",
            "<<<\n        const char * session_file = getenv(\"initial_max_stream_data_uni\");\n        FILE *fp;\n        if(session_file != NULL) {\n            fp = fopen(session_file,\"w\");\n            fprintf(fp, \"%llu\", i);\n            fclose(fp);\n        }\n\n        >>>",
            "assert stream_data.value(fml:a,fml:x) = fml:y",
            "if _generating {assert conn_total_data(the_cid) > 30; assert fml:scid = the_cid; assert frame.connection_close.err_code(fml:f) = 0}\nelse {assert is_no_error; call _finalize}",
            "assert forged_quic_packet_vn.arr.value(fml:a,fml:x) = fml:y",
            "<<<\n            const char * session_file = getenv(\"SAVED_PACKET\");\n            std::cerr << \"SAVED_PACKET 5b \" << session_file<< \"\\n\";\n            FILE *fp;\n            if(session_file != NULL) {\n                fp = fopen(session_file,\"r\");\n                read = getline(&line, &len, fp);\n                fclose(fp);\n                bool is_error = false;\n                if(line != NULL) { \n                    std::cerr << \"SAVED_PACKET 1 \" << line << std::endl;\n                    int hex_len = strlen(line);\n                    std::cerr << \"SAVED_PACKET hex_len \" << hex_len << std::endl;\n                    uint8_t secret[hex_len/2];\n                    for (int j = 0; j < hex_len/2; j++) {\n                        int a = ws_xton(line[j*2]);\n                        int b = ws_xton(line[j*2 + 1]);\n                        if (a == -1 || b == -1) {\n                            is_error = true;\n                            std::cerr << \"a ERROR \" << line[j*2] << std::endl;\n                            std::cerr << \"b ERROR \" << line[j*2 + 1] << std::endl;\n                            std::cerr << \"SAVED_PACKET ERROR \" << std::endl;\n                            break;\n                        }\n                        secret[j] = a << 4 | b;\n                    }  \n                    std::cerr << \"SAVED_PACKET TEST_ST 2 \" << secret << std::endl;\n                    for(int i = 0; i < hex_len/2 && !is_error; i++)\n                        ppkt.push_back(secret[i]);\n                }\n            }        \n            >>>",
            "<<<\n\t        unsigned __old_size = `fml:a`.size();\n\t        `fml:a`.resize(`fml:s`);\n\t        for (unsigned i = __old_size; i < (unsigned)`fml:s`; i++)\n\t            `fml:a`[i] = v;\n            >>>",
            "{}",
            "{}",
            "<<<\n                if ((`quic_packet_0rtt.idx`)`fml:a`.size() > 0)\n                    `fml:res` = `fml:a`.back();\n            >>>",
            "{}",
            "{}",
            "local loc:dcid {loc:dcid := quic_packet_vn.dst_cid(fml:pkt); local loc:scid {loc:scid := quic_packet_vn.src_cid(fml:pkt); if cid_mapped(loc:dcid) {loc:dcid := cid_to_aid(loc:dcid)}; if fml:src = client_alt | fml:dst = client_alt {migration_done := true}; assert quic_packet_vn.ptype(fml:pkt) = quic_packet_type.version_negociation; assert ~negocation_of_version_initiated(fml:src)}}",
            "{retry_source_connection_id.is_set(fml:s) := true; retry_source_connection_id.value(fml:s) := fml:p}",
            "{}",
            "<<<\n\t        if (0 <= `fml:x` && `fml:x` < (`quic_packet.idx`)`fml:a`.size()) \n\t            `fml:a`[`fml:x`] = `fml:y`;\n\t    >>>",
            "{}",
            "{assert arr_pkt_num_s.end(fml:a) > arr_pkt_num_s.end(old_fml:a) & ~(arr_pkt_num_s.end(old_fml:a) < X & X < arr_pkt_num_s.end(fml:a)); assert 0:jdx_s <= X & X < arr_pkt_num_s.end(old_fml:a) -> arr_pkt_num_s.value(fml:a,X) = arr_pkt_num_s.value(old_fml:a,X); assert arr_pkt_num_s.value(fml:a,arr_pkt_num_s.end(old_fml:a)) = fml:v}",
            "{}",
            "{}",
            "assert fml:s = frame.ack_ecn.range.arr.end(fml:a)",
            "{}",
            "{}",
            "<<<\n    is_padding = true;\n    for (unsigned i = 0; i < spkt.size(); i++)\n\tis_padding = is_padding && (spkt[i] == 0);\n    >>>",
            "<<<\n\t        `fml:a`.resize(`fml:s`);\n\t        for (unsigned i = 0; i < `fml:s`; i++)\n\t            `fml:a`[i] = y;\n\t    >>>",
            "{}",
            "<<<\n    scid_mim = scil;\n    dcid_mim = dcil;\n    >>>",
            "{}",
            "assert 0:vector[tls.handshake].domain <= fml:x & fml:x < vector[tls.handshake].end(fml:a)",
            "{}",
            "<<<\n\t        `fml:a`.resize(`fml:s`);\n\t        for (unsigned i = 0; i < `fml:s`; i++)\n\t            `fml:a`[i] = y;\n\t    >>>",
            "{}",
            "local loc:dcid {loc:dcid := quic_packet_vn.dst_cid(fml:pkt); local loc:scid {loc:scid := quic_packet_vn.src_cid(fml:pkt); if cid_mapped(loc:dcid) {loc:dcid := cid_to_aid(loc:dcid)}; if ~_generating {conn_requested(fml:src,fml:dst,loc:scid) := false; conn_requested(fml:src,fml:dst,loc:dcid) := false; connected(loc:dcid) := false; connected(loc:scid) := false; conn_seen(loc:dcid) := false; conn_seen(loc:scid) := false; local loc:old_cid {loc:old_cid := the_cid; call the_cid := inc_cid(loc:old_cid, 2:stream_pos); server_cid := 0x0:cid; connected(the_cid) := false; connected(server_cid) := false; conn_seen(the_cid) := false; conn_seen(server_cid) := false; local loc:0 {call loc:0 := tls_extensions.empty; local loc:extns {loc:extns := loc:0; local loc:0 {call loc:0 := make_transport_parameters; call loc:extns := tls_extensions.append(loc:extns, loc:0)}; call tls_api.upper.create(0:tls_api.id, false, loc:extns); conn_requested(fml:dst,fml:src,the_cid) := true}}}}; negocation_of_version_initiated(fml:src) := true}}",
            "assert 0:quic_packet_coal_0rtt.idx <= fml:s",
            "{assert fml:x < fml:y & (fml:x < Y -> fml:y <= Y); assert vector[transport_parameter].domain.succ(fml:x,fml:y)}",
            "assert 0:quic_packet.idx <= fml:x & fml:x < quic_packet.arr.end(fml:a)",
            "{}",
            "<<<\n\t    `quic_ser` ser;\n\t    __ser(ser,x);\n\t    y.resize(ser.res.size());\n\t    for (unsigned i = 0; i < ser.res.size(); i++)\n\t        y[i] = (unsigned char) ser.res[i];\n//\t    std::copy(ser.res.begin(),ser.res.end(),y.begin());\n\t    >>>",
            "local loc:imsdbl {initial_max_stream_data_bidi_local.stream_pos_32(loc:imsdbl) := max_stream_data; local loc:imd {call initial_max_data.stream_pos_32(loc:imd) := random_stream_pos(1:stream_pos, 0xFFFFFFF:stream_pos); local loc:it {call max_idle_timeout.seconds_16(loc:it) := random_microsecs(0:microsecs, 0xFFFFFFF:microsecs); local loc:imsdbr {initial_max_stream_data_bidi_remote.stream_pos_32(loc:imsdbr) := max_stream_data; local loc:imsdu {call initial_max_stream_data_uni.stream_pos_32(loc:imsdu) := random_stream_pos(1:stream_pos, 0xFFFFFFF:stream_pos); call quic_transport_parameters.transport_parameters(fml:tp) := vector[transport_parameter].append(quic_transport_parameters.transport_parameters(fml:tp), loc:imsdbl); call quic_transport_parameters.transport_parameters(fml:tp) := vector[transport_parameter].append(quic_transport_parameters.transport_parameters(fml:tp), loc:imd); call quic_transport_parameters.transport_parameters(fml:tp) := vector[transport_parameter].append(quic_transport_parameters.transport_parameters(fml:tp), loc:it); call quic_transport_parameters.transport_parameters(fml:tp) := vector[transport_parameter].append(quic_transport_parameters.transport_parameters(fml:tp), loc:imsdbr); call quic_transport_parameters.transport_parameters(fml:tp) := vector[transport_parameter].append(quic_transport_parameters.transport_parameters(fml:tp), loc:imsdu); local loc:icid {initial_source_connection_id.scid(loc:icid) := the_cid; call quic_transport_parameters.transport_parameters(fml:tp) := vector[transport_parameter].append(quic_transport_parameters.transport_parameters(fml:tp), loc:icid); local loc:no_migration {call quic_transport_parameters.transport_parameters(fml:tp) := vector[transport_parameter].append(quic_transport_parameters.transport_parameters(fml:tp), loc:no_migration); local loc:max_streams_bidi {call initial_max_stream_id_bidi.stream_id_16(loc:max_streams_bidi) := random_stream_id(4:stream_id, 0xFFFFFFF:stream_id); call quic_transport_parameters.transport_parameters(fml:tp) := vector[transport_parameter].append(quic_transport_parameters.transport_parameters(fml:tp), loc:max_streams_bidi); local loc:max_streams_uni {call initial_max_stream_id_uni.stream_id_16(loc:max_streams_uni) := random_stream_id(4:stream_id, 0xFFFFFFF:stream_id); call quic_transport_parameters.transport_parameters(fml:tp) := vector[transport_parameter].append(quic_transport_parameters.transport_parameters(fml:tp), loc:max_streams_uni)}}}}}}}}}",
            "assert arr_streamid_r.end(fml:a) = fml:s & arr_streamid_r.value(fml:a,X) = fml:y",
            "fml:y := fml:x - 1",
            "{assert replayed_quic_packet_0rtt.retired_cids.end(fml:a) = fml:s; assert 0:replayed_quic_packet_0rtt.idx <= X & X < replayed_quic_packet_0rtt.retired_cids.end(old_fml:a) -> replayed_quic_packet_0rtt.retired_cids.value(fml:a,X) = replayed_quic_packet_0rtt.retired_cids.value(old_fml:a,X); assert replayed_quic_packet_0rtt.retired_cids.end(old_fml:a) <= X & X < fml:s -> replayed_quic_packet_0rtt.retired_cids.value(fml:a,X) = fml:v}",
            "fml:y := fml:x - 1",
            "{}",
            "<<<\n\t    >>>",
            "{assert connected(fml:dcid) & connected_to(fml:dcid) = fml:scid; assert fml:e = quic_packet_type.one_rtt & established_1rtt_keys(fml:scid); assert num_queued_frames(fml:scid) > 0 -> fml:e = queued_level(fml:scid); assert stream_seen(fml:scid,frame.max_stream_data.id(fml:f)); if ~max_stream_data_set(fml:scid,frame.max_stream_data.id(fml:f)) | frame.max_stream_data.pos(fml:f) > max_stream_data_val(fml:scid,frame.max_stream_data.id(fml:f)) {max_stream_data_set(fml:scid,frame.max_stream_data.id(fml:f)) := true; max_stream_data_val(fml:scid,frame.max_stream_data.id(fml:f)) := frame.max_stream_data.pos(fml:f)}}",
            "{}",
            "local loc:code {loc:code := bvand(0xc0:byte,stream_data.value(fml:pkt,fml:pos)); if loc:code = 0 {fml:len := 1:stream_pos}\nelse {if loc:code = 0x40 {fml:len := 2:stream_pos}\nelse {if loc:code = 0x80 {fml:len := 4:stream_pos}\nelse {fml:len := 8:stream_pos}}}}",
            "{}",
            "local loc:0 {call loc:0 := socket_endpoint(fml:host, fml:s); local loc:dst {loc:dst := loc:0; local loc:idx {loc:idx := prot.arr.begin(fml:pkts); local loc:0 {call loc:0 := stream_data.empty; local loc:past_data {loc:past_data := loc:0; while loc:idx < prot.arr.end(fml:pkts)\n{local loc:ppkt {loc:ppkt := prot.arr.value(fml:pkts,loc:idx); local loc:0 {call loc:0 := src_tls_id(loc:dst); local loc:tls_id {loc:tls_id := loc:0; local loc:header {loc:header := stream_data.value(loc:ppkt,0); local loc:hdr_type {loc:hdr_type := bfe[0][6](stream_data.value(loc:ppkt,0)); local loc:tt {loc:tt := bvand(loc:hdr_type,0x30); local loc:is_long {loc:is_long := bvand(0x80:byte,loc:header) ~= 0; local loc:version {loc:version := stream_data.segment(loc:ppkt,1,1 + 4); local loc:0 {call loc:0 := bytes_to_version(loc:version); local loc:bversion {loc:bversion := loc:0; local loc:ptype {loc:ptype := bvand(0x30:byte,loc:header); if loc:bversion = 0 & loc:is_long | version_not_found(fml:src) {call loc:past_data := stream_data.extend(loc:past_data, loc:ppkt); call tls_client_version_response(fml:src, loc:dst, loc:past_data)}\nelse {if loc:tt = 0x30 & loc:is_long & loc:bversion ~= 0 {call tls_client_retry_response(fml:src, loc:dst, loc:ppkt)}\nelse {local loc:0 {call loc:0 := reference_pkt_num(loc:ppkt, true); local loc:rnum {loc:rnum := loc:0; local loc:0 {call loc:0 := prot.decrypt(loc:tls_id, loc:rnum, loc:ppkt); local loc:res {loc:res := loc:0; if tls_api.upper.ok(loc:res) {local loc:0 {call loc:0 := is_padding_packet(tls_api.upper.payload(loc:res)); local loc:is_pad {loc:is_pad := loc:0; if loc:is_pad {call padding_packet_event(fml:host, fml:src, loc:dst, loc:ppkt)}\nelse {local loc:0 {call loc:0 := pkt_serdes.from_bytes(tls_api.upper.data(loc:res)); local loc:pkt {loc:pkt := loc:0; local loc:0 {call loc:0 := prot.get_pnum_len(tls_api.upper.data(loc:res)); call quic_packet.seq_num(loc:pkt) := prot.correct_pnum(loc:rnum, quic_packet.seq_num(loc:pkt), loc:0)}; call recv_packet(fml:host, fml:src, loc:dst, loc:pkt); call infer_tls_events(fml:src, loc:dst, loc:pkt); call packet_event(fml:src, loc:dst, loc:pkt)}}}}}}\nelse {call undecryptable_packet_event(fml:host, fml:src, loc:dst, loc:ppkt)}}}}}}}; call loc:idx := prot.idx.next(loc:idx)}}}}}}}}}}}}; version_not_found(fml:src) := false; call show_last_datagram_size(last_datagram_received_size); if ~first_datagram_received & fml:host = endpoint_id.server {assert last_datagram_received_size + 8 > 1200; first_datagram_received := true}; last_datagram_received_size := 0:stream_pos}}}}}",
            "assert quic_packet_coal_0rtt.retired_cids.value(fml:a,fml:x) = fml:y",
            "fml:y := fml:x + 1",
            "fml:res := quic_packet_0rtt.ptype(fml:pkt) ~= quic_packet_type.one_rtt",
            "{}",
            "{}",
            "local loc:0 {call loc:0 := socket_endpoint(fml:host, fml:s); local loc:dst {loc:dst := loc:0; local loc:idx {loc:idx := prot.arr.begin(fml:pkts); local loc:0 {call loc:0 := stream_data.empty; local loc:past_data {loc:past_data := loc:0; while loc:idx < prot.arr.end(fml:pkts)\n{local loc:ppkt {loc:ppkt := prot.arr.value(fml:pkts,loc:idx); local loc:0 {call loc:0 := src_tls_id(loc:dst); local loc:tls_id {loc:tls_id := loc:0; local loc:header {loc:header := stream_data.value(loc:ppkt,0); local loc:hdr_type {loc:hdr_type := bfe[0][6](stream_data.value(loc:ppkt,0)); local loc:tt {loc:tt := bvand(loc:hdr_type,0x30); local loc:is_long {loc:is_long := bvand(0x80:byte,loc:header) ~= 0; local loc:version {loc:version := stream_data.segment(loc:ppkt,1,1 + 4); local loc:0 {call loc:0 := bytes_to_version(loc:version); local loc:bversion {loc:bversion := loc:0; local loc:ptype {loc:ptype := bvand(0x30:byte,loc:header); if loc:bversion = 0 & loc:is_long | version_not_found(fml:src) {call loc:past_data := stream_data.extend(loc:past_data, loc:ppkt); call tls_client_version_response(fml:src, loc:dst, loc:past_data)}\nelse {if loc:tt = 0x30 & loc:is_long & loc:bversion ~= 0 {call tls_client_retry_response(fml:src, loc:dst, loc:ppkt)}\nelse {local loc:0 {call loc:0 := reference_pkt_num(loc:ppkt, true); local loc:rnum {loc:rnum := loc:0; local loc:0 {call loc:0 := prot.decrypt(loc:tls_id, loc:rnum, loc:ppkt); local loc:res {loc:res := loc:0; if tls_api.upper.ok(loc:res) {local loc:0 {call loc:0 := is_padding_packet(tls_api.upper.payload(loc:res)); local loc:is_pad {loc:is_pad := loc:0; if loc:is_pad {call padding_packet_event(fml:host, fml:src, loc:dst, loc:ppkt)}\nelse {local loc:0 {call loc:0 := pkt_serdes.from_bytes(tls_api.upper.data(loc:res)); local loc:pkt {loc:pkt := loc:0; local loc:0 {call loc:0 := prot.get_pnum_len(tls_api.upper.data(loc:res)); call quic_packet.seq_num(loc:pkt) := prot.correct_pnum(loc:rnum, quic_packet.seq_num(loc:pkt), loc:0)}; call recv_packet(fml:host, fml:src, loc:dst, loc:pkt); call infer_tls_events(fml:src, loc:dst, loc:pkt); call packet_event(fml:src, loc:dst, loc:pkt)}}}}}}\nelse {call undecryptable_packet_event(fml:host, fml:src, loc:dst, loc:ppkt)}}}}}}}; call loc:idx := prot.idx.next(loc:idx)}}}}}}}}}}}}; version_not_found(fml:src) := false; call show_last_datagram_size(last_datagram_received_size); if ~first_datagram_received & fml:host = endpoint_id.server {assert last_datagram_received_size + 8 > 1200; first_datagram_received := true}; last_datagram_received_size := 0:stream_pos}}}}}",
            "{assert conn_requested(fml:dst,fml:src,fml:dcid); assert ~connected(fml:dcid) & ~connected(fml:scid)}",
            "assert 0:tls_extensions.domain <= fml:x & fml:x < tls_extensions.end(fml:a)",
            "{stream_seen(fml:scid,frame.stream.id(fml:f)) := true; local loc:offset {loc:offset := (frame.stream.offset(fml:f) if frame.stream.off(fml:f) else 0); local loc:length {loc:length := loc:offset + frame.stream.length(fml:f); if stream_length(fml:dcid,frame.stream.id(fml:f)) < loc:length {conn_total_data(fml:dcid) := conn_total_data(fml:dcid) + loc:length - stream_length(fml:dcid,frame.stream.id(fml:f)); stream_length(fml:dcid,frame.stream.id(fml:f)) := loc:length}; if frame.stream.fin(fml:f) {stream_finished(fml:dcid,frame.stream.id(fml:f)) := true}; if (~zero_rtt_allowed | zero_rtt_sent) & fml:e ~= quic_packet_type.zero_rtt {call enqueue_frame(fml:scid, fml:f, fml:e, false)}\nelse {first_zrtt_pkt := fml:dcid; call enqueue_frame_rtt(fml:scid, fml:f, fml:e, false)}}}}",
            "<<<\n                for (unsigned i = 0; i < `fml:a`.size()/2; i++) {\n                    std::swap(`fml:a`[i],`fml:a`[`fml:a`.size()-i-1]);\n                }\n            >>>",
            "<<<\n\t        unsigned __old_size = `fml:a`.size();\n\t        `fml:a`.resize(`fml:s`);\n\t        for (unsigned i = __old_size; i < (unsigned)`fml:s`; i++)\n\t            `fml:a`[i] = v;\n            >>>",
            "{stream_app_pos(C,S) := 0:stream_pos; stream_app_data_finished(C,S) := false}",
            "<<<\n\t        if (`fml:a`.size() > 0) {\n\t            a.pop_back();\n\t        }\n            >>>",
            "{}",
            "<<<\n\t        if (0 <= `fml:x` && `fml:x` < (`quic_packet_0rtt.idx`)`fml:a`.size()) \n\t            `fml:y` = `fml:a`[`fml:x`];\n\t    >>>",
            "<<<\n                for (unsigned i = 0; i < `fml:a`.size()/2; i++) {\n                    std::swap(`fml:a`[i],`fml:a`[`fml:a`.size()-i-1]);\n                }\n            >>>",
            "<<<\n\t    >>>",
            "<<<\n\t    >>>",
            "assert tls_extensions.end(fml:a) = 0",
            "<<<\n\t        if (0 <= `fml:x` && `fml:x` < (`tls_extensions.domain`)`fml:a`.size()) \n\t            `fml:y` = `fml:a`[`fml:x`];\n\t    >>>",
            "<<<\n\t        unsigned __old_size = `fml:a`.size();\n\t        `fml:a`.resize(`fml:s`);\n\t        for (unsigned i = __old_size; i < (unsigned)`fml:s`; i++)\n\t            `fml:a`[i] = v;\n            >>>",
            "{}",
            "{}",
            "{}",
            "{assert tls_extensions.end(fml:a) > tls_extensions.end(old_fml:a) & ~(tls_extensions.end(old_fml:a) < X & X < tls_extensions.end(fml:a)); assert 0:tls_extensions.domain <= X & X < tls_extensions.end(old_fml:a) -> tls_extensions.value(fml:a,X) = tls_extensions.value(old_fml:a,X); assert tls_extensions.value(fml:a,tls_extensions.end(old_fml:a)) = fml:v}",
            "<<<\n\t        if (0 <= `fml:x` && `fml:x` < (`tls_hand_extensions.domain`)`fml:a`.size()) \n\t            `fml:a`[`fml:x`] = `fml:y`;\n\t    >>>",
            "<<<\n                for (unsigned i = 0; i < `fml:b`.size(); i++)\n\t            `fml:a`.push_back(`fml:b`[i]);\n            >>>",
            "assert 0:index < fml:x",
            "<<<\n                if ((`index`)`fml:a`.size() > 0)\n                    `fml:res` = `fml:a`.back();\n            >>>",
            "call enqueue_frame(fml:scid, fml:f, fml:e, false)",
            "if _generating {assert fml:scid = the_cid}",
            "{assert fml:x < fml:y & (fml:x < Y -> fml:y <= Y); assert vector[tls.compression_method].domain.succ(fml:x,fml:y)}",
            "{if ~stream_frame_restransmitted(fml:id) {sending_send(fml:id) := false; sending_dataSent(fml:id) := true}; call lastest_stream_id_sender(fml:seq) := arr_streamid_s.append(lastest_stream_id_sender(fml:seq), fml:id); call lastest_pkt_num_sender := arr_pkt_num_s.append(lastest_pkt_num_sender, fml:seq)}",
            "{assert fml:y < fml:x & (Y:quic_packet_coal_0rtt.idx < fml:x -> Y <= fml:y); assert quic_packet_coal_0rtt.idx.succ(fml:y,fml:x)}",
            "{}",
            "{}",
            "<<<\n\t        `fml:s` = (`forged_quic_packet_retry.idx`) `fml:a`.size();\n\t    >>>",
            "{}",
            "{}",
            "<<<\n\t        if (0 <= `fml:x` && `fml:x` < (`quic_packet_0rtt.idx`)`fml:a`.size()) \n\t            `fml:a`[`fml:x`] = `fml:y`;\n\t    >>>",
            "{}",
            "assert 0:vector[tls.extension].domain < fml:x",
            "{assert forged_quic_packet_retry.arr.end(fml:a) = forged_quic_packet_retry.arr.end(old_fml:a); assert forged_quic_packet_retry.arr.value(fml:a,X) = (fml:y if (X = fml:x) else forged_quic_packet_retry.arr.value(old_fml:a,X))}",
            "fml:y := fml:x + 1",
            "{assert replayed_quic_packet_0rtt.retired_cids.end(fml:a) > replayed_quic_packet_0rtt.retired_cids.end(old_fml:a) & ~(replayed_quic_packet_0rtt.retired_cids.end(old_fml:a) < X & X < replayed_quic_packet_0rtt.retired_cids.end(fml:a)); assert 0:replayed_quic_packet_0rtt.idx <= X & X < replayed_quic_packet_0rtt.retired_cids.end(old_fml:a) -> replayed_quic_packet_0rtt.retired_cids.value(fml:a,X) = replayed_quic_packet_0rtt.retired_cids.value(old_fml:a,X); assert replayed_quic_packet_0rtt.retired_cids.value(fml:a,replayed_quic_packet_0rtt.retired_cids.end(old_fml:a)) = fml:v}",
            "assert fml:s = frame.arr.end(fml:a)",
            "{}",
            "assert tls_api.upper.open(fml:c)",
            "assert quic_packet_coal_0rtt.arr.value(fml:a,fml:x) = fml:y",
            "{assert tls_handshake_finished; assert connected(fml:dcid) & connected_to(fml:dcid) = fml:scid; assert fml:e = quic_packet_type.one_rtt & established_1rtt_keys(fml:scid); assert num_queued_frames(fml:scid) > 0 -> fml:e = queued_level(fml:scid); assert ~conn_closed(fml:scid); assert conn_seen(fml:scid)}",
            "{}",
            "{}",
            "assert 0:index <= fml:x & fml:x < cids.end(fml:a)",
            "<<<\n\t        `fml:a`.push_back(`fml:v`);\n            >>>",
            "assert versions_bv.end(fml:a) = 0",
            "<<<\n       srand((unsigned) time(0)); //fixed or random seed ?\n       res = 0;\n       res = ::rand()%32767 + (min+1);\n       std::cerr << \"greater random: \" << res << \"\\n\";\n       >>>",
            "assert forged_quic_packet.arr.value(fml:a,fml:x) = fml:y",
            "{}",
            "assert quic_packet.retired_cids.end(fml:a) = fml:s & quic_packet.retired_cids.value(fml:a,X) = fml:y",
            "{assert ip_endpoints.end(fml:a) = fml:s; assert 0:index <= X & X < ip_endpoints.end(old_fml:a) -> ip_endpoints.value(fml:a,X) = ip_endpoints.value(old_fml:a,X); assert ip_endpoints.end(old_fml:a) <= X & X < fml:s -> ip_endpoints.value(fml:a,X) = fml:v}",
            "{}",
            "{}",
            "{}",
            "{}",
            "{}",
            "{}",
            "{assert fml:x < fml:y & (fml:x < Y -> fml:y <= Y); assert servers.server.idx.succ(fml:x,fml:y)}",
            "<<<\n\t        `fml:a`.push_back(`fml:v`);\n            >>>",
            "<<<\n                for (unsigned i = 0; i < `fml:b`.size(); i++)\n\t            `fml:a`.push_back(`fml:b`[i]);\n            >>>",
            "{assert cids.end(fml:a) > cids.end(old_fml:a) & ~(cids.end(old_fml:a) < X & X < cids.end(fml:a)); assert 0:index <= X & X < cids.end(old_fml:a) -> cids.value(fml:a,X) = cids.value(old_fml:a,X); assert cids.value(fml:a,cids.end(old_fml:a)) = fml:v}",
            "fml:y := fml:x + 1",
            "assert arr_streamid_r.value(fml:a,fml:x) = fml:y",
            "fml:y := fml:x + 1",
            "assert fml:s = replayed_quic_packet_0rtt.retired_cids.end(fml:a)",
            "assert fml:s = clients.client.arr.end(fml:a)",
            "fml:res := forged_protected_quic_packet.ptype(fml:pkt) ~= quic_packet_type.one_rtt",
            "<<<\n\t    `quic_ser_zerortt` ser;\n\t    __ser(ser,x);\n\t    y.resize(ser.res.size());\n\t    for (unsigned i = 0; i < ser.res.size(); i++)\n\t        y[i] = (unsigned char) ser.res[i];\n//\t    std::copy(ser.res.begin(),ser.res.end(),y.begin());\n\t    >>>",
            "assert 0:tls_hand_extensions.domain < fml:x",
            "attacker.ep := fml:e",
            "<<<\t\ts = make_udp_socket();\n\t\tif(addr.addr != 0x7f000001) {\n\t\t\tstd::cerr << \"open SOCKET \" << s << std::endl;\n\t\t\tis_vnet = true;\n\t\t\tchar * dev = strdup(\"lo\"); //TODO\n\t\t\tif (addr.interface == `ip.ivy`) {\n\t\t\t\tdev = strdup(\"ivy\");\n\t\t\t}\n\t\t\tstd::cerr << \"open SOCKET dev \" << dev << std::endl;\n\t\t\t/*if(strcmp(dev,\"lo\") == 0) {\n\t\t\t\tint v = 1;\n\t\t\t\tif (setsockopt(s, SOL_IP, IP_FREEBIND, &v, sizeof(v)) < 0) {\n\t\t\t\t\tperror(\"setsockopt: freebind\");\n\t\t\t\t\texit(EXIT_FAILURE);\n\t\t\t\t}\n\t\t\t}*/\n\t\t\tif (setsockopt(s, SOL_SOCKET, SO_BINDTODEVICE, dev, strlen(dev)) < 0) {\n\t\t\t\tperror(\"setsockopt: bind to device\");\n\t\t\t\texit(EXIT_FAILURE);\n\t\t\t} //TODO comment for shadow\n\t\t\tstruct sockaddr_in v_src = {};\n\t\t\tv_src.sin_addr.s_addr = htonl(addr.addr); // TODO reversorder\n\t\t\t//inet_pton(AF_INET, htonl(addr.addr), &v_src.sin_addr.s_addr);\n\t\t\tv_src.sin_port = htons(addr.port);\n\t\t\tv_src.sin_family = AF_INET;\n\t\t\t\n\t\t\tint error = 0;\n\t\t\tif (setsockopt(s, SOL_SOCKET, SO_REUSEADDR, &error, sizeof(int)) < 0 || setsockopt(s, SOL_SOCKET, SO_REUSEPORT, &error, sizeof(int)) < 0)\n\t\t\t\tperror(\"setsockopt(SO_REUSEADDR) failed\");\n\t\t\n\t\t\tif (bind(s, (struct sockaddr*) &v_src, sizeof(struct sockaddr_in)) != 0) {\n\t\t\t\tchar s[100];\n\t\t\t\tsprintf(s, \"bind to addr %u\", htonl(addr.addr));\n\t\t\t\tperror(s);\n\t\t\t\texit(EXIT_FAILURE);\n\t\t\t}\n\t\t} else {\n\t\t\tstd::cerr << \"SOCKET \" << s << std::endl;\n\t\t\tstruct sockaddr_in myaddr;\n\t\t\tmyaddr.sin_family = AF_INET;\n\t\t\tmyaddr.sin_addr.s_addr = htonl(addr.addr); // inet_addr(\"10.0.0.1\"); //\n\t\t\t// myaddr.sin_addr.s_addr = htonl(INADDR_ANY);\n\t\t\tmyaddr.sin_port = htons(addr.port);\n\n\t\t\tstruct sockaddr_in sin;\n\t\t\tsocklen_t len = sizeof(sin);\n\t\t\tif (::getsockname(s, (struct sockaddr *)&sin, &len) == -1)\n\t\t\t\tperror(\"getsockname\");\n\t\t\telse\n\t\t\t\tstd::cerr <<  \"source port number \" << ntohs(sin.sin_port)  << std::endl;\n\n\t\t\tstd::cerr << \"binding client id: \" << `prm:V0` << \" addr: \" << ntohl(myaddr.sin_addr.s_addr) << \" port: \" << ntohs(myaddr.sin_port) << std::endl;\n\t\t\tif (::bind(s, (struct sockaddr *)&myaddr, sizeof(myaddr)) != 0)\n\t\t\t\t{ perror(\"bind failed\"); exit(1); }\n\t\t\t\n\t\t\tlen = sizeof(sin);\n\t\t\tif (::getsockname(s, (struct sockaddr *)&sin, &len) == -1)\n\t\t\t\tperror(\"getsockname\");\n\t\t\telse\n\t\t\t\tstd::cerr <<  \"source port number \" << ntohs(sin.sin_port)  << std::endl;\n\t\t}\n\t\tinstall_reader(new udp_reader(`prm:V0`,s, *`net.impl.cb(prm:V0)`, this));\n\t    >>>",
            "{call sock := net.open(endpoint_id.client, client.ep); call sock_alt := net.open(endpoint_id.client_alt, client_alt); sock_vn := sock; call client.set_tls_id(0:tls_api.id); call server.set_tls_id(1:tls_api.id); local loc:0 {call loc:0 := tls_extensions.empty; local loc:extns {loc:extns := loc:0; local loc:0 {call loc:0 := make_transport_parameters; call loc:extns := tls_extensions.append(loc:extns, loc:0)}; call tls_api.upper.create(0:tls_api.id, false, loc:extns)}}}",
            "{}",
            "call enqueue_frame(fml:scid, fml:f, fml:e, false)",
            "{zero_rtt_client_test := false; zero_rtt_server_test := false; allowed_migration := true; allowed_multiple_migration := false; version_negociated := false; negocation_of_version_initiated(E) := false; negocation_of_version(E) := false; first_datagram_received := false; last_datagram_received_size := 0:stream_pos; nclients := 1:stream_pos}",
            "assert fml:s = quic_packet_0rtt.retired_cids.end(fml:a)",
            "<<<\n                for (unsigned i = 0; i < `fml:b`.size(); i++)\n\t            `fml:a`.push_back(`fml:b`[i]);\n            >>>",
            "<<<\n\t        if (0 <= `fml:x` && `fml:x` < (`prot.idx`)`fml:a`.size()) \n\t            `fml:y` = `fml:a`[`fml:x`];\n\t    >>>",
            "assert forged_quic_packet_retry.retired_cids.end(fml:a) = 0",
            "assert 0:replayed_quic_packet_0rtt.idx <= fml:s",
            "assert fml:s = quic_packet.retired_cids.end(fml:a)",
            "{}",
            "assert 0:vector[tls.cipher_suite].domain <= fml:x & fml:x < vector[tls.cipher_suite].end(fml:a)",
            "<<<\n\t        `fml:a`.resize(`fml:s`);\n\t        for (unsigned i = 0; i < `fml:s`; i++)\n\t            `fml:a`[i] = y;\n\t    >>>",
            "{}",
            "assert 0:idx_r < fml:x",
            "<<<\n\t        `fml:a`.push_back(`fml:v`);\n            >>>",
            "assert forged_quic_packet.retired_cids.end(fml:a) = fml:s & forged_quic_packet.retired_cids.value(fml:a,X) = fml:y",
            "assert frame.ack_ecn.range.arr.end(fml:a) = 0",
            "assert arr_streamid_r.end(fml:a) = 0",
            "{assert connected(fml:dcid) & connected_to(fml:dcid) = fml:scid; assert fml:e = quic_packet_type.one_rtt & established_1rtt_keys(fml:scid); assert num_queued_frames(fml:scid) > 0 -> fml:e = queued_level(fml:scid)}",
            "{}",
            "assert 0:tls.handshakes.domain < fml:x",
            "{}",
            "assert frame.ack_ecn.range.arr.value(fml:a,fml:x) = fml:y",
            "assert 0:forged_quic_packet.idx <= fml:x & fml:x < forged_quic_packet.arr.end(fml:a)",
            "{}",
            "<<<\n\t        if (0 <= `fml:x` && `fml:x` < (`frame.idx`)`fml:a`.size()) \n\t            `fml:a`[`fml:x`] = `fml:y`;\n\t    >>>",
            "{assert fml:x < fml:y & (fml:x < Y -> fml:y <= Y); assert jdx_r.succ(fml:x,fml:y)}",
            "if prot.hdr_long(fml:h) {fml:scid := prot.scid(fml:h)}\nelse {if used_cid(prot.dcid(fml:h)) {fml:scid := connected_to(prot.dcid(fml:h))}\nelse {fml:scid := 0:cid}}",
            "{}",
            "<<<\n\t    std::vector<char> buf(y.size());\n\t    std::copy(y.begin(),y.end(),buf.begin());\n\t    `quic_deser_vn` des(buf);\n\t    __deser(des,x);\n\t    >>>",
            "local loc:0,loc:1,loc:2,loc:3 {call loc:0 := cid_to_us(fml:odcid); call loc:1 := cid_to_us(fml:dcid); call loc:2 := cid_to_us(fml:scid); call loc:3 := tls_api.upper.compute_retry_integrity_tag(fml:odcil, loc:0, fml:pversion, fml:dcil, loc:1, fml:scil, loc:2, fml:token, fml:seq, fml:h, fml:b); local loc:rt {loc:rt := loc:3; fml:cipher := loc:rt}}",
            "assert frame.ack.range.arr.value(fml:a,fml:x) = fml:y",
            "{assert fml:x < fml:y & (fml:x < Y -> fml:y <= Y); assert quic_packet_coal_0rtt.idx.succ(fml:x,fml:y)}",
            "{assert forged_pkts.end(fml:pkt) > 0; assert mim_agent.nat_configured; assert fml:src ~= fml:dst; assert ~(fml:src = mim_agent.ep_out & fml:dst = mim_agent.ep_in); assert ~(fml:dst = mim_agent.ep_out & fml:src = mim_agent.ep_in); assert ~packed_forwarded_arr(fml:pkt)}",
            "<<<\n        //is_rtt = true; //todo\n        if(is_server)\n            is_client_test = true;\n\n        std::cerr << \"create cid = \" << c << std::endl;  \n        std::cerr << \"is_server  = \" << is_server << std::endl;  \n\n        // We create a new picootls session, and add an entry in the cid_map\n        // for it.\n\n        ptls_context_t* ctx;\n        ctx = new ptls_context_t;\n        memset(ctx, 0, sizeof(ptls_context_t));\n\n        /*\n        HelloRetryRequest random:\n            CF 21 AD 74 E5 9A 61 11 BE 1D 8C 02 1E 65 B8 91\n            C2 A2 11 16 7A BB 8C 5E 07 9E 09 E2 C8 A8 33 9C\n        */\n        ctx->random_bytes = ptls_openssl_random_bytes;\n        ctx->key_exchanges = picotls_key_exchanges; \n        ctx->cipher_suites = picotls_cipher_suites; \n        ctx->send_change_cipher_spec = 0;\n        // ctx->hkdf_label_prefix = QUIC_LABEL_QUIC_BASE;\n        \n        ctx->hkdf_label_prefix__obsolete = NULL;\n        ctx->update_traffic_key = (ptls_update_traffic_key_t *)malloc(sizeof(ptls_update_traffic_key_t));\n        memset(ctx->update_traffic_key, 0, sizeof(ptls_update_traffic_key_t));\n        //ctx->update_traffic_key = new ptls_update_traffic_key_t;\n        ctx->update_traffic_key->cb = quic_update_traffic_key_cb;\n        \n        //ctx->on_extension = new ptls_on_extension_t;\n        ctx->on_extension = (ptls_on_extension_t *)malloc(sizeof(ptls_on_extension_t));\n        memset(ctx->on_extension, 0, sizeof(ptls_on_extension_t));\n        ctx->on_extension->cb = tls_on_extension_cb;\n        \n        ctx->get_time = &ptls_get_time;\n        const char * is_zrtt = getenv(\"ZERORTT_TEST\");\n\n       // ctx->client_mode = !is_server;\n\n        ctx->max_early_data_size = 0xFFFFFFFF;\n        ctx->omit_end_of_early_data = 0;\n\n        std::cerr << \"PROUT 3 \"  << std::endl;\n\n        //ctx->use_exporter = 1; // master secrets should be recorded\n        \n        ptls_handshake_properties_t *handshake_properties = new ptls_handshake_properties_t; \n        memset(handshake_properties, 0, sizeof(ptls_handshake_properties_t));\n        handshake_properties->collect_extension = tls_collect_extensions_cb;\n        handshake_properties->collected_extensions = tls_collected_extensions_cb;\n   \n        std::cerr << \"PROUT 4 \" << std::endl;\n        \n        ptls_iovec_t *alpn_vec = new(ptls_iovec_t);  // TODO: will leak this\n        \n        // h3-x == HTTP/3 over QUIC \n        // hq-x == HTTP/0.9 over QUIC\n        alpn_vec->base = (uint8_t*) \"hq-interop\";\n        if(const char* env_p = std::getenv(\"TEST_ALPN\")) { \n            std::cerr << \"TEST_ALPN \" << env_p << std::endl;\n            alpn_vec->base = (uint8_t*) env_p;\n        }\n\n        alpn_vec->len = strlen((char *)(alpn_vec->base));\n        handshake_properties->client.negotiated_protocols.count = 1;\n        handshake_properties->client.negotiated_protocols.list  = alpn_vec;\n\n        // add the extensions\n        ptls_raw_extension_t *ptls_exts = new ptls_raw_extension_t[e.size()+1];\n        for (unsigned i = 0; i < e.size(); i++) {\n            `tls_ser` ser;\n\t        std::cerr << \"etype =\" << std::endl;  \n            __ser(ser,e[i]);\n            unsigned etype = (((unsigned char)(ser.res[0])) << 8) + ((unsigned char)(ser.res[1]));\n            unsigned len = (((unsigned char)(ser.res[2])) << 8) + ((unsigned char)(ser.res[3]));\n            unsigned char *data = new unsigned char[ser.res.size()-4];\n            std::copy(ser.res.begin()+4,ser.res.end(),data);\n            ptls_exts[i].type = etype;\n            std::cerr << \"etype =\" << etype << std::endl;  \n            ptls_exts[i].data.base = data;\n            //std::cerr << \"data =\" << data << std::endl;  \n            ptls_exts[i].data.len = len;\n            std::cerr << \"len =\" << len << std::endl;  \n            // int eres = gnutls_session_ext_register (session, \"ext_name\", etype,\n            //   GNUTLS_EXT_APPLICATION, gnutls_ext_supp_recv_params,\n            //   gnutls_ext_supp_send_params, 0,0,0,0);\n            // if (eres != GNUTLS_E_SUCCESS) {\n            //     std::cerr << \"gnutls_session_ext_register\\n\";\n            //     exit(1);\n            // }\n        }\n        ptls_exts[e.size()].type = 0xffff;\n        ptls_exts[e.size()].data.base = NULL;\n        ptls_exts[e.size()].data.len = 0;\n\n        for (unsigned i = 0; i < e.size(); i++) {\n            std::cerr << \"ptls_exts[i].type = \" << ptls_exts[i].type << std::endl;  \n            //std::cerr << \"ptls_exts[i].base = \" << ptls_exts[i].data.base << std::endl;\n            std::cerr << \"ptls_exts[i].len = \" << ptls_exts[i].data.len << std::endl;\n        }\n        handshake_properties->additional_extensions = ptls_exts;\n\n        // Read the certificate, if we are a server\n\n        if (is_server) { //segfautl ??\n            int r = ptls_load_certificates(ctx, \"leaf_cert.pem\");\n            std::cerr << \"ptls_load_certificates \"  << r << std::endl;\n            /* Read the certificate file */\n            if (r != 0) {\n                std::cerr << \"could not load certificate file leaf_cert.pem\\n\";\n                exit(1);\n            } else if(set_sign_certificate_from_key_file(\"leaf_cert.key\", ctx)) {\n                std::cerr << \"could not load key file leaf_cert.key\\n\";\n                exit(1);\n            }\n        }\n\n        ptls_t *session;\n        session = ptls_new(ctx,is_server ? 1 : 0);\n        ptls_set_server_name(session, \"servername\", strlen(\"servername\"));\n\n        //if(const char* env_p = std::getenv(\"TEST_IMPL\")) { \n        //    std::cerr << \"TEST_IMPL \" << env_p << std::endl;\n        //    std::cerr << \"is_server \" << is_server << std::endl;\n            // if(strncmp(env_p,\"quic-go\",10) == 0 \n            //     || strncmp(env_p,\"quiche\",10) == 0 \n            //        || strncmp(env_p,\"lsquic\",10) == 0 \n            //           || strncmp(env_p,\"quinn\",10) == 0 \n            //              || strncmp(env_p,\"aioquic\",10) == 0) //TODO ask why sometime ALPN needed\n            //     if (is_server) { // && false\n                        std::cerr << \"ptls_set_negotiated_protocol\"  << std::endl;\n                        ptls_set_negotiated_protocol(session, \n                            (const char*) handshake_properties->client.negotiated_protocols.list[0].base, \n                            handshake_properties->client.negotiated_protocols.list[0].len);\n                // } \n        //}\n\n        picotls_connection *s = new picotls_connection(c, session, ctx, *`tls_api.upper.foo.cb`, handshake_properties, is_server);\n        *ptls_get_data_ptr(session) = s;   \n        \n        if(is_zrtt != NULL){ //is_server && \n            /**\n            * @brief picoquic_server_setup_ticket_aead_contexts\n            */\n            uint8_t temp_secret[256]; /* secret_max */\n            int ret = 0;\n            std::cerr << \"picoquic_server_setup_ticket_aead_contexts 1 \" << std::endl;\n            ptls_cipher_suite_t cipher_ticket ={ 0, &ptls_openssl_aes128gcm, &ptls_openssl_sha256 };\n            //  { 0,  &ptls_openssl_aes256gcmsha384, &ptls_openssl_aes128gcmsha256, &ptls_minicrypto_chacha20poly1305sha256 };\n            //{ 0, &ptls_openssl_aes128gcm, &ptls_openssl_sha256, &ptls_openssl_aes128gcm };\n            if (cipher_ticket.hash->digest_size > sizeof(temp_secret)) {\n                ret = -1;\n            } else {\n                std::cerr << \"picoquic_server_setup_ticket_aead_contexts 2 \" << std::endl;\n                //ctx->random_bytes(temp_secret, cipher_ticket.hash->digest_size);\n                for(int i = 0; i < cipher_ticket.hash->digest_size; i++)\n                    temp_secret[i] = 1;\n                std::cerr << \"picoquic_server_setup_ticket_aead_contexts 3 \" << std::endl;\n                /* Create the AEAD contexts */\n                ret = quic_set_aead_from_secret(&s->ticket_aead_encrypt, &cipher_ticket, 1, temp_secret, \"random label\");\n                if (ret == 0) {\n                    std::cerr << \"picoquic_server_setup_ticket_aead_contexts 4 \" << std::endl;\n                    ret = quic_set_aead_from_secret(&s->ticket_aead_decrypt, &cipher_ticket, 0, temp_secret, \"random label\");\n                }\n                std::cerr << \"picoquic_server_setup_ticket_aead_contexts 5 \" << std::endl;\n                /* erase the temporary secret */\n                ptls_clear_memory(temp_secret, cipher_ticket.hash->digest_size);\n            } \n\n            ptls_iovec_t ticket_psk = ptls_iovec_init(NULL, 0);\n            std::cerr << \"ptls_encrypt_ticket_t \" << is_zrtt << std::endl;\n            ptls_encrypt_ticket_t* encrypt_ticket = (ptls_encrypt_ticket_t*) malloc(sizeof(ptls_encrypt_ticket_t)+ sizeof(ptls_iovec_t*));\n            if (encrypt_ticket != NULL) {\n                encrypt_ticket->cb = tls_server_encrypt_ticket_cb;\n                ptls_iovec_t** ppreceiver = (ptls_iovec_t**)(((char*)encrypt_ticket) + sizeof(ptls_encrypt_ticket_t));\n                *ppreceiver = &ticket_psk;\n                ctx->encrypt_ticket = encrypt_ticket;\n            }\n\n            ctx->ticket_lifetime = 100000; /* 100,000 seconds, a bit more than one day */\n            ctx->max_early_data_size = 0xFFFFFFFF;\n            ctx->require_dhe_on_psk = 1;\n\n            ptls_iovec_t ticket_psk2 = ptls_iovec_init(NULL, 0);\n            std::cerr << \"ptls_save_ticket_t \" << is_zrtt << std::endl;\n            ptls_save_ticket_t* save_ticket = (ptls_save_ticket_t*) malloc(sizeof(ptls_save_ticket_t)+ sizeof(ptls_iovec_t*)); // + sizeof(ptls_iovec_t*)\n            if (save_ticket != NULL) {\n                save_ticket->cb = tls_client_save_ticket_cb; //memory error\n                ptls_iovec_t** ppreceiver2 = (ptls_iovec_t**)(((char*)save_ticket) + sizeof(ptls_save_ticket_t));\n                *ppreceiver2 = &ticket_psk2;\n                ctx->save_ticket = save_ticket;\n            }\n        } else {\n            ctx->ticket_lifetime = 0; // no ticket? was: 100000; /* 100,000 seconds, a bit more than one day */\n            ctx->require_dhe_on_psk = 1;\n        }\n\n\n\t    `tls_api.upper.foo.cid_map`[c] = s;\n        \n        // Start the handshake if we are the client. The in_epoch is zero for \"initial\".\n\n        if (!is_server) \n            picotls_do_handshake(s,0,0,0);\n        >>>",
            "{assert fml:y < fml:x & (Y:index < fml:x -> Y <= fml:y); assert index.succ(fml:y,fml:x)}",
            "client_server.ep_in := fml:e",
            "if _generating {assert fml:scid = the_cid; assert frame.rst_stream.id(fml:f) = 4}",
            "{if some loc:ch. *>(fml:hs,loc:ch) {is_client(fml:scid) := true; call handle_tls_extensions(fml:src, fml:dst, fml:scid, tls.client_hello.extensions(loc:ch), true)}\nelse {if some loc:sh. *>(fml:hs,loc:sh) {call handle_tls_extensions(fml:src, fml:dst, fml:scid, tls.server_hello.extensions(loc:sh), false)}\nelse {if some loc:ee. *>(fml:hs,loc:ee) {call handle_tls_extensions(fml:src, fml:dst, fml:scid, tls.encrypted_extensions.extensions(loc:ee), false)}}}; if some loc:fh. *>(fml:hs,loc:fh) {tls_handshake_finished := true}}",
            "{assert forged_quic_packet_retry.arr.end(fml:a) > forged_quic_packet_retry.arr.end(old_fml:a) & ~(forged_quic_packet_retry.arr.end(old_fml:a) < X & X < forged_quic_packet_retry.arr.end(fml:a)); assert 0:forged_quic_packet_retry.idx <= X & X < forged_quic_packet_retry.arr.end(old_fml:a) -> forged_quic_packet_retry.arr.value(fml:a,X) = forged_quic_packet_retry.arr.value(old_fml:a,X); assert forged_quic_packet_retry.arr.value(fml:a,forged_quic_packet_retry.arr.end(old_fml:a)) = fml:v}",
            "{assert arr_pkt_num_s.end(fml:a) = arr_pkt_num_s.end(old_fml:a); assert arr_pkt_num_s.value(fml:a,X) = (fml:y if (X = fml:x) else arr_pkt_num_s.value(old_fml:a,X))}",
            "<<<\n\t    >>>",
            "<<<\n\t        `fml:a`.push_back(`fml:v`);\n            >>>",
            "{}",
            "assert fml:s = forged_quic_packet.arr.end(fml:a)",
            "assert fml:s = forged_pkts.end(fml:a)",
            "{}",
            "{}",
            "{}",
            "<<<\n                for (unsigned i = 0; i < `fml:a`.size()/2; i++) {\n                    std::swap(`fml:a`[i],`fml:a`[`fml:a`.size()-i-1]);\n                }\n            >>>",
            "assert 0:quic_packet.idx <= fml:s",
            "{}",
            "{assert frame.ack_ecn.range.arr.end(fml:a) = frame.ack_ecn.range.arr.end(old_fml:a); assert frame.ack_ecn.range.arr.value(fml:a,X) = (fml:y if (X = fml:x) else frame.ack_ecn.range.arr.value(old_fml:a,X))}",
            "assert tls_api.upper.open(fml:c) & tls_api.upper.established(fml:c)",
            "{}",
            "assert 0:index <= fml:s",
            "<<<\n\t        if (`fml:a`.size() > 0) {\n\t            a.pop_back();\n\t        }\n            >>>",
            "<<<\n    res = 0;\n    if(const char* env_p2 = std::getenv(\"TEST_TYPE\")) { \n      if(strcmp(env_p2, \"server\") == 0 || cond) {\n         if(const char* env_p3 = std::getenv(\"TEST_SCIL\")) {\n            std::cerr << \"TEST_SCIL \" << env_p3 << \"\\n\";\n\t        res = atoi(env_p3);\n         } else \n\t   res = 8;\n      } else \n\t  res = 8;\n    } else \n      res = 8;\n    std::cerr <<  \"scid_size_pos size: \" <<  res << \"\\n\";\n    >>>",
            "{}",
            "{}",
            "{assert tls.handshakes.end(fml:a) > tls.handshakes.end(old_fml:a) & ~(tls.handshakes.end(old_fml:a) < X & X < tls.handshakes.end(fml:a)); assert 0:tls.handshakes.domain <= X & X < tls.handshakes.end(old_fml:a) -> tls.handshakes.value(fml:a,X) = tls.handshakes.value(old_fml:a,X); assert tls.handshakes.value(fml:a,tls.handshakes.end(old_fml:a)) = fml:v}",
            "<<<\n\t        `fml:a`.resize(`fml:s`);\n\t        for (unsigned i = 0; i < `fml:s`; i++)\n\t            `fml:a`[i] = y;\n\t    >>>",
            "{call client_alt := endpoint_id_addr(endpoint_id.client_alt); call client_vn := endpoint_id_addr(endpoint_id.client_vn)}",
            "{}",
            "{}",
            "{}",
            "{assert cids.end(fml:a) = fml:s; assert 0:index <= X & X < cids.end(old_fml:a) -> cids.value(fml:a,X) = cids.value(old_fml:a,X); assert cids.end(old_fml:a) <= X & X < fml:s -> cids.value(fml:a,X) = fml:v}",
            "if _generating {local loc:0 {call loc:0 := pkt_serdes_retry.to_bytes(fml:pkt); local loc:spkt {loc:spkt := loc:0; local loc:0 {call loc:0 := prot.arr.empty; local loc:pkts {loc:pkts := loc:0; call loc:pkts := prot.arr.append(loc:pkts, loc:spkt); local loc:0,loc:1 {call loc:0 := endpoint_to_pid(fml:src); call loc:1 := endpoint_to_socket(fml:src); call net.send(loc:0, loc:1, fml:dst, loc:pkts)}}}}}}",
            "{}",
            "<<<\n                for (unsigned i = 0; i < `fml:b`.size(); i++)\n\t            `fml:a`.push_back(`fml:b`[i]);\n            >>>",
            "{}",
            "assert 0:vector[transport_parameter].domain <= fml:s",
            "<<<\n\t        if (`fml:a`.size() > 0) {\n\t            a.pop_back();\n\t        }\n            >>>",
            "{}",
            "assert tls.handshakes.value(fml:a,fml:x) = fml:y",
            "{}",
            "fml:res := quic_packet_coal_0rtt.ptype(fml:pkt) ~= quic_packet_type.one_rtt",
            "{assert fml:x < fml:y & (fml:x < Y -> fml:y <= Y); assert forged_quic_packet_vn.idx.succ(fml:x,fml:y)}",
            "{}",
            "{}",
            "{}",
            "<<<\n                for (unsigned i = 0; i < `fml:a`.size()/2; i++) {\n                    std::swap(`fml:a`[i],`fml:a`[`fml:a`.size()-i-1]);\n                }\n            >>>",
            "{assert stream_data.end(fml:a) = fml:s; assert 0:stream_pos <= X & X < stream_data.end(old_fml:a) -> stream_data.value(fml:a,X) = stream_data.value(old_fml:a,X); assert stream_data.end(old_fml:a) <= X & X < fml:s -> stream_data.value(fml:a,X) = fml:v}",
            "assert 0:jdx_r < fml:x",
            "assert 0:forged_quic_packet_vn.idx <= fml:x & fml:x < forged_quic_packet_vn.arr.end(fml:a)",
            "{assert fml:x < fml:y & (fml:x < Y -> fml:y <= Y); assert forged_quic_packet_retry.idx.succ(fml:x,fml:y)}",
            "<<<\n\t        if (0 <= `fml:x` && `fml:x` < (`tls_extensions.domain`)`fml:a`.size()) \n\t            `fml:a`[`fml:x`] = `fml:y`;\n\t    >>>",
            "{assert fml:x < fml:y & (fml:x < Y -> fml:y <= Y); assert forged_quic_packet.idx.succ(fml:x,fml:y)}",
            "{}",
            "{}",
            "{}",
            "{assert fml:x < fml:y & (fml:x < Y -> fml:y <= Y); assert frame.idx.succ(fml:x,fml:y)}",
            "<<<\n\t        unsigned __old_size = `fml:a`.size();\n\t        `fml:a`.resize(`fml:s`);\n\t        for (unsigned i = __old_size; i < (unsigned)`fml:s`; i++)\n\t            `fml:a`[i] = v;\n            >>>",
            "{}",
            "<<<\n\t        `fml:a`.resize(`fml:s`);\n\t        for (unsigned i = 0; i < `fml:s`; i++)\n\t            `fml:a`[i] = y;\n\t    >>>",
            "<<<\n\t        unsigned __old_size = `fml:a`.size();\n\t        `fml:a`.resize(`fml:s`);\n\t        for (unsigned i = __old_size; i < (unsigned)`fml:s`; i++)\n\t            `fml:a`[i] = v;\n            >>>",
            "if _generating {assert fml:scid = the_cid; assert frame.stream_data_blocked.id(fml:f) = 4}",
            "<<<\n\t    `quic_ser_retry` ser;\n\t    __ser(ser,x);\n\t    y.resize(ser.res.size());\n\t    for (unsigned i = 0; i < ser.res.size(); i++)\n\t        y[i] = (unsigned char) ser.res[i];\n//\t    std::copy(ser.res.begin(),ser.res.end(),y.begin());\n\t    >>>",
            "local loc:len_minus_one {loc:len_minus_one := bfe[0][1](stream_data.value(fml:pkt,0)); fml:pnum_len := loc:len_minus_one + 1}",
            "fml:y := fml:x - 1",
            "<<<\n                // should use postrouting\n                std::string command = \"sudo iptables -t nat -A OUTPUT -o lo -d 127.0.0.1 -p udp --dport \" + std::to_string(server_ep) + \":\" + std::to_string(server_ep) + \" -j DNAT --to-destination 127.0.0.1:\"+ std::to_string(victim_ep) +\">/dev/null 2>&1\"; \n                int n = command.length();\n                std::cerr << \"configure_NAT_attack_in_spoof \" << command << \"\\n\";\n                // declaring character array\n                char command_array[n + 1];\n            \n                // copying the contents of the\n                // string to char array\n                strcpy(command_array, command.c_str());\n\n                int cr = system(command_array);\n            >>>",
            "<<<        std::cerr << \"decrypt_aead start \" << \"\\n\";\n        std::cerr << \"decrypt_aead ad \" << ad.size() <<  \"\\n\";\n\t    picotls_connection *s = `tls_api.upper.foo.cid_map`[c];\n        ptls_aead_context_t *aead = (ptls_aead_context_t *)(s->crypto_context[l].aead_decrypt);\n        std::cerr << \"aead == \" << aead << \"\\n\";\n\t    if(aead != 0) {\n\t        uint32_t checksum_length = aead->algo->tag_size;\n            std::cerr << \"checksum_length == \" << checksum_length << \"\\n\";\n            std::vector<uint8_t> bytes;\n            bytes.resize(ad.size());\n            std::copy(ad.begin(),ad.end(),bytes.begin());\n\n            std::cerr << \"seq == \" << seq << \"\\n\";\n            std::cerr << \"bytes.size() == \" << bytes.size() << \"\\n\";\n\n            std::vector<uint8_t> input, output;\n            input.resize(cipher.size());\n            std::copy(cipher.begin(),cipher.end(),input.begin());\n            output.resize(cipher.size() - checksum_length);\n            size_t decrypted = ptls_aead_decrypt(aead,\n                                                &output[0], \n                                                &input[0], \n                                                input.size(), \n                                                seq,\n                                                &bytes[0], bytes.size());\n            res.ok = decrypted <= input.size();\n            std::cerr << \"decrypted <= input.size() == \" << (decrypted <= input.size()) << \"\\n\";\n            if (res.ok) {\n                res.data.resize(output.size());\n                std::copy(output.begin(),output.end(),res.data.begin());\n            }\n        } else {\n            std::cerr << \"decrypt_aead failure \" << \"\\n\";\n            res.ok = false;\n        }\n        std::cerr << \"decrypt_aead finish \" << \"\\n\";\n        >>>",
            "<<<\n\t        unsigned __old_size = `fml:a`.size();\n\t        `fml:a`.resize(`fml:s`);\n\t        for (unsigned i = __old_size; i < (unsigned)`fml:s`; i++)\n\t            `fml:a`[i] = v;\n            >>>",
            "if _generating {assert fml:scid = the_cid; if ~zero_rtt_server_test | zero_rtt_sent {assert connected(the_cid) & fml:dcid = connected_to(the_cid)}; assert frame.stream.len(fml:f) & frame.stream.off(fml:f); assert frame.stream.length(fml:f) > 0; assert frame.stream.offset(fml:f) = stream_length(fml:dcid,frame.stream.id(fml:f)); assert frame.stream.length(fml:f) = stream_app_data_end(fml:dcid,frame.stream.id(fml:f)) - frame.stream.offset(fml:f)}",
            "assert clients.client.arr.value(fml:a,fml:x) = fml:y",
            "local loc:cdx {loc:cdx := 0:servers.server.idx; local loc:idx_port {loc:idx_port := 0:ip.port; while loc:cdx < 2\n{local loc:cc {servers.server.enc_level(loc:cc) := quic_packet_type.initial; ip.endpoint.protocol(servers.server.ep(loc:cc)) := ip.udp; ip.endpoint.addr(servers.server.ep(loc:cc)) := server_addr; ip.endpoint.port(servers.server.ep(loc:cc)) := server_port + 2 * (loc:idx_port + 1); call servers.servers := servers.server.arr.append(servers.servers, loc:cc); call loc:cdx := servers.server.idx.next(loc:cdx); loc:idx_port := loc:idx_port + 1}}}}",
            "<<<\n\t    >>>",
            "<<<\n                for (unsigned i = 0; i < `fml:a`.size()/2; i++) {\n                    std::swap(`fml:a`[i],`fml:a`[`fml:a`.size()-i-1]);\n                }\n            >>>",
            "<<<\n\t        unsigned __old_size = `fml:a`.size();\n\t        `fml:a`.resize(`fml:s`);\n\t        for (unsigned i = __old_size; i < (unsigned)`fml:s`; i++)\n\t            `fml:a`[i] = v;\n            >>>",
            "assert 0:quic_packet_coal_0rtt.idx <= fml:s",
            "{}",
            "{}",
            "{}",
            "<<<\n\t        `fml:s` = (`tls.handshakes.domain`) `fml:a`.size();\n\t    >>>",
            "assert vector[tls.compression_method].value(fml:a,fml:x) = fml:y",
            "<<<\n\t        `fml:a`.push_back(`fml:v`);\n            >>>",
            "<<<\n\t        if (0 <= `fml:x` && `fml:x` < (`forged_quic_packet_vn.idx`)`fml:a`.size()) \n\t            `fml:y` = `fml:a`[`fml:x`];\n\t    >>>",
            "{}",
            "{}",
            "{}",
            "assert quic_packet_0rtt.arr.value(fml:a,fml:x) = fml:y",
            "{}",
            "<<<\n\t        if (0 <= `fml:x` && `fml:x` < (`quic_packet_0rtt.idx`)`fml:a`.size()) \n\t            `fml:a`[`fml:x`] = `fml:y`;\n\t    >>>",
            "<<<\n                if ((`idx_s`)`fml:a`.size() > 0)\n                    `fml:res` = `fml:a`.back();\n            >>>",
            "assert 0:quic_packet_0rtt.idx <= fml:x & fml:x < quic_packet_0rtt.arr.end(fml:a)",
            "{assert stream_data.end(fml:a) > stream_data.end(old_fml:a) & ~(stream_data.end(old_fml:a) < X & X < stream_data.end(fml:a)); assert 0:stream_pos <= X & X < stream_data.end(old_fml:a) -> stream_data.value(fml:a,X) = stream_data.value(old_fml:a,X); assert stream_data.value(fml:a,stream_data.end(old_fml:a)) = fml:v}",
            "<<<\n\t    >>>",
            "{}",
            "local loc:tp {loc:tp := trans_params(fml:dcid); fml:max := 0:stream_pos; if get_stream_kind(fml:id) = unidir {if initial_max_stream_data_uni.is_set(loc:tp) {fml:max := initial_max_stream_data_uni.stream_pos_32(initial_max_stream_data_uni.value(trans_params(fml:dcid)))}}\nelse {if is_client(fml:dcid) <-> get_stream_role(fml:id) = role.client {if initial_max_stream_data_bidi_local.is_set(loc:tp) {fml:max := initial_max_stream_data_bidi_local.stream_pos_32(initial_max_stream_data_bidi_local.value(trans_params(fml:dcid)))}}\nelse {if initial_max_stream_data_bidi_remote.is_set(loc:tp) {fml:max := initial_max_stream_data_bidi_remote.stream_pos_32(initial_max_stream_data_bidi_remote.value(trans_params(fml:dcid)))}}}; if max_stream_data_set(fml:dcid,fml:id) {local loc:msdv {loc:msdv := max_stream_data_val(fml:dcid,fml:id); fml:max := (loc:msdv if (loc:msdv > fml:max) else fml:max)}}; local loc:0 {call loc:0 := max_additional_data(fml:dcid); local loc:alt_max {loc:alt_max := loc:0 + stream_length(fml:dcid,fml:id); fml:max := (loc:alt_max if (loc:alt_max < fml:max) else fml:max); if zero_rtt_allowed & ~zero_rtt_sent | fml:e = quic_packet_type.zero_rtt {fml:max := 1000:stream_pos}}}}",
            "{assert num_queued_frames(fml:scid) > 0 -> fml:e = queued_level(fml:scid); assert ~conn_closed(fml:scid); assert fml:e ~= quic_packet_type.zero_rtt; assert frame.crypto.offset(fml:f) + frame.crypto.length(fml:f) <= crypto_data_end(fml:scid,fml:e); assert frame.crypto.data(fml:f) = stream_data.segment(crypto_data(fml:scid,fml:e),frame.crypto.offset(fml:f),frame.crypto.offset(fml:f) + frame.crypto.length(fml:f))}",
            "<<<\n                for (unsigned i = 0; i < `fml:a`.size()/2; i++) {\n                    std::swap(`fml:a`[i],`fml:a`[`fml:a`.size()-i-1]);\n                }\n            >>>",
            "{}",
            "<<<\n        res = c.val;\n    >>>",
            "{}",
            "{assert fml:y < fml:x & (Y:tls_extensions.domain < fml:x -> Y <= fml:y); assert tls_extensions.domain.succ(fml:y,fml:x)}",
            "{}",
            "{call mim_agent.ppkt_to_be_forge := stream_data.empty; mim_agent.forward_turn := true}",
            "assert forged_quic_packet.retired_cids.end(fml:a) = 0",
            "<<<\n\t        if (0 <= `fml:x` && `fml:x` < (`quic_packet_vn.idx`)`fml:a`.size()) \n\t            `fml:a`[`fml:x`] = `fml:y`;\n\t    >>>",
            "{}",
            "{}",
            "{max_idle_timeout.is_set(fml:s) := true; max_idle_timeout.value(fml:s) := fml:p}",
            "assert 0:vector[tls.psk_identity].domain <= fml:x & fml:x < vector[tls.psk_identity].end(fml:a)",
            "<<<\n\t        if (0 <= `fml:x` && `fml:x` < (`jdx_r`)`fml:a`.size()) \n\t            `fml:a`[`fml:x`] = `fml:y`;\n\t    >>>",
            "assert 0:index <= fml:x & fml:x < versions.end(fml:a)",
            "{call map_cids(fml:scid, fml:dcid); call map_cids(fml:dcid, fml:scid); ack_credit(fml:scid) := ack_credit(fml:scid) + 1}",
            "{}",
            "assert stream_data.end(fml:a) = 0",
            "{}",
            "local loc:length {loc:length := frame.crypto.offset(fml:f) + frame.crypto.length(fml:f); if crypto_length(fml:scid,fml:e) < loc:length {crypto_length(fml:scid,fml:e) := loc:length}; local loc:idx {loc:idx := frame.crypto.offset(fml:f); while loc:idx < frame.crypto.offset(fml:f) + frame.crypto.length(fml:f)\n{crypto_data_present(fml:scid,fml:e,loc:idx) := true; call loc:idx := stream_pos.next(loc:idx)}; call enqueue_frame(fml:scid, fml:f, fml:e, false); if fml:e = quic_packet_type.handshake {established_1rtt_keys(fml:scid) := true}}}",
            "call enqueue_frame(fml:scid, fml:f, fml:e, false)",
            "{}",
            "<<<\n                if ((`vector[tls.handshake].domain`)`fml:a`.size() > 0)\n                    `fml:res` = `fml:a`.back();\n            >>>",
            "local loc:idx {loc:idx := stream_data.begin(fml:x); while loc:idx < stream_data.end(fml:x)\n{local loc:0 {call loc:0 := prot.byte_xor(stream_data.value(fml:x,loc:idx), stream_data.value(fml:y,loc:idx)); call fml:x := stream_data.set(fml:x, loc:idx, loc:0)}; call loc:idx := stream_pos.next(loc:idx)}}",
            "<<<\n\t        `fml:a`.resize(`fml:s`);\n\t        for (unsigned i = 0; i < `fml:s`; i++)\n\t            `fml:a`[i] = y;\n\t    >>>",
            "assert tls_hand_extensions.end(fml:a) = 0",
            "{}",
            "{}",
            "{assert vector[tls.handshake].end(fml:a) = vector[tls.handshake].end(old_fml:a); assert vector[tls.handshake].value(fml:a,X) = (fml:y if (X = fml:x) else vector[tls.handshake].value(old_fml:a,X))}",
            "{}",
            "{victim_agent.enc_level := quic_packet_type.initial; ip.endpoint.protocol(victim_agent.ep) := ip.udp; ip.endpoint.addr(victim_agent.ep) := victim_addr; ip.endpoint.port(victim_agent.ep) := victim_port; call victim_agent.ppkt_recvd := forged_pkts.empty}",
            "{assert vector[tls.cipher_suite].end(fml:a) = fml:s; assert 0:vector[tls.cipher_suite].domain <= X & X < vector[tls.cipher_suite].end(old_fml:a) -> vector[tls.cipher_suite].value(fml:a,X) = vector[tls.cipher_suite].value(old_fml:a,X); assert vector[tls.cipher_suite].end(old_fml:a) <= X & X < fml:s -> vector[tls.cipher_suite].value(fml:a,X) = fml:v}",
            "fml:tls_id := (client.tls_id if (fml:src = client.ep) else second_client.tls_id)",
            "{assert fml:y < fml:x & (Y:vector[tls.extension].domain < fml:x -> Y <= fml:y); assert vector[tls.extension].domain.succ(fml:y,fml:x)}",
            "{}",
            "<<<\n                for (unsigned i = 0; i < `fml:b`.size(); i++)\n\t            `fml:a`.push_back(`fml:b`[i]);\n            >>>",
            "<<<\n\t        `fml:s` = (`jdx_r`) `fml:a`.size();\n\t    >>>",
            "assert cids.end(fml:a) = fml:s & cids.value(fml:a,X) = fml:y",
            "<<<\n\t        if (0 <= `fml:x` && `fml:x` < (`index`)`fml:a`.size()) \n\t            `fml:y` = `fml:a`[`fml:x`];\n\t    >>>",
            "{}",
            "{}",
            "<<<\n                if ((`replayed_quic_packet_0rtt.idx`)`fml:a`.size() > 0)\n                    `fml:res` = `fml:a`.back();\n            >>>",
            "{}",
            "{}",
            "<<<\n\t        `fml:a`.push_back(`fml:v`);\n            >>>",
            "{}",
            "assert vector[tls.cipher_suite].end(fml:a) = 0",
            "<<<\n\t        if (0 <= `fml:x` && `fml:x` < (`quic_packet.idx`)`fml:a`.size()) \n\t            `fml:y` = `fml:a`[`fml:x`];\n\t    >>>",
            "<<<\n                if ((`forged_quic_packet_retry.idx`)`fml:a`.size() > 0)\n                    `fml:res` = `fml:a`.back();\n            >>>",
            "{}",
            "{assert fml:x < fml:y & (fml:x < Y -> fml:y <= Y); assert tls_api.id.succ(fml:x,fml:y)}",
            "{}",
            "{}",
            "{assert fml:y < fml:x & (Y:quic_packet.idx < fml:x -> Y <= fml:y); assert quic_packet.idx.succ(fml:y,fml:x)}",
            "{}",
            "assert 0:tls.handshakes.domain <= fml:x & fml:x < tls.handshakes.end(fml:a)",
            "<<<\n\t    >>>",
            "{ip.endpoint.protocol(fml:ep) := ip.udp; ip.endpoint.addr(fml:ep) := (server_addr if (fml:ep_id = endpoint_id.server | fml:ep_id = endpoint_id.server_alt) else (mim_addr if (fml:ep_id = endpoint_id.mim) else client_addr)); ip.endpoint.port(fml:ep) := (client_port if (fml:ep_id = endpoint_id.client) else (mim_port_in if (fml:ep_id = endpoint_id.mim) else (victim_port if (fml:ep_id = endpoint_id.victim) else (client_port_alt if (fml:ep_id = endpoint_id.client_alt) else (client_port_vn if (fml:ep_id = endpoint_id.client_vn) else (server_port_alt if (fml:ep_id = endpoint_id.server_alt) else server_port))))))}",
            "{}",
            "assert fml:s = versions.end(fml:a)",
            "assert 0:idx_s <= fml:x & fml:x < arr_streamid_s.end(fml:a)",
            "{assert fml:y < fml:x & (Y:vector[tls.handshake].domain < fml:x -> Y <= fml:y); assert vector[tls.handshake].domain.succ(fml:y,fml:x)}",
            "{}",
            "{}",
            "assert 0:quic_packet_0rtt.idx <= fml:x & fml:x < quic_packet_0rtt.retired_cids.end(fml:a)",
            "if _generating {assert fml:scid = the_cid; assert 4:stream_id <= frame.max_stream_data.id(fml:f) & frame.max_stream_data.id(fml:f) <= 16}",
            "{}",
            "assert quic_packet.arr.value(fml:a,fml:x) = fml:y",
            "{}",
            "{}",
            "<<<\n            const char * session_file = getenv(\"initial_max_stream_data_bidi_local\");\n            FILE *fp;\n            size_t len = 0;\n            ssize_t read;\n            char * line = NULL;\n            if(session_file != NULL) {\n                fp = fopen(session_file,\"r\");\n                read = getline(&line, &len, fp);\n                fclose(fp);\n                bool is_error = false;\n                if(line != NULL) { \n                    i = (uint32_t) std::stoll(line);\n                }\n            }\n        >>>",
            "assert quic_packet_retry.arr.end(fml:a) = fml:s & quic_packet_retry.arr.value(fml:a,X) = fml:y",
            "<<<\n                if ((`vector[tls.compression_method].domain`)`fml:a`.size() > 0)\n                    `fml:res` = `fml:a`.back();\n            >>>",
            "assert 0:quic_packet_retry.idx <= fml:s",
            "{}",
            "{}",
            "<<<\n                if ((`tls_extensions.domain`)`fml:a`.size() > 0)\n                    `fml:res` = `fml:a`.back();\n            >>>",
            "{}",
            "<<<\n                for (unsigned i = 0; i < `fml:a`.size()/2; i++) {\n                    std::swap(`fml:a`[i],`fml:a`[`fml:a`.size()-i-1]);\n                }\n            >>>",
            "assert 0:index <= fml:x & fml:x < versions_bv.end(fml:a)",
            "fml:y := fml:x - 1",
            "assert tls_extensions.value(fml:a,fml:x) = fml:y",
            "{}",
            "<<<\n\t        if (0 <= `fml:x` && `fml:x` < (`vector[tls.compression_method].domain`)`fml:a`.size()) \n\t            `fml:y` = `fml:a`[`fml:x`];\n\t    >>>",
            "<<<\n                if ((`forged_protected_quic_packet.idx`)`fml:a`.size() > 0)\n                    `fml:res` = `fml:a`.back();\n            >>>",
            "<<<\n\t        `fml:a`.resize(`fml:s`);\n\t        for (unsigned i = 0; i < `fml:s`; i++)\n\t            `fml:a`[i] = y;\n\t    >>>",
            "<<<\n\t        unsigned __old_size = `fml:a`.size();\n\t        `fml:a`.resize(`fml:s`);\n\t        for (unsigned i = __old_size; i < (unsigned)`fml:s`; i++)\n\t            `fml:a`[i] = v;\n            >>>",
            "<<<\n                if ((`forged_quic_packet.idx`)`fml:a`.size() > 0)\n                    `fml:res` = `fml:a`.back();\n            >>>",
            "assert vector[tls.compression_method].end(fml:a) = 0",
            "assert 0:forged_protected_quic_packet.idx <= fml:x & fml:x < forged_protected_quic_packet.arr.end(fml:a)",
            "{}",
            "servers.server.ep(servers.server.arr.value(servers.servers,fml:n)) := fml:e",
            "{assert tls_extensions.end(fml:a) = tls_extensions.end(old_fml:a); assert tls_extensions.value(fml:a,X) = (fml:y if (X = fml:x) else tls_extensions.value(old_fml:a,X))}",
            "{}",
            "{}",
            "{}",
            "<<<\n                for (unsigned i = 0; i < `fml:a`.size()/2; i++) {\n                    std::swap(`fml:a`[i],`fml:a`[`fml:a`.size()-i-1]);\n                }\n            >>>",
            "{assert vector[tls.cipher_suite].end(fml:a) = vector[tls.cipher_suite].end(old_fml:a); assert vector[tls.cipher_suite].value(fml:a,X) = (fml:y if (X = fml:x) else vector[tls.cipher_suite].value(old_fml:a,X))}",
            "assert replayed_quic_packet_0rtt.retired_cids.end(fml:a) = 0",
            "<<<\n        const char * session_file = getenv(\"initial_max_stream_id_bidi\");\n        FILE *fp;\n        if(session_file != NULL) {\n            fp = fopen(session_file,\"w\");\n            if(i < 16)\n                fprintf(fp, \"0%x\", i);\n            else \n                fprintf(fp, \"%x\", i);\n            fclose(fp);\n        }\n\n        >>>",
            "{}",
            "{}",
            "{assert forged_quic_packet_retry.retired_cids.end(fml:a) = fml:s; assert 0:forged_quic_packet_retry.idx <= X & X < forged_quic_packet_retry.retired_cids.end(old_fml:a) -> forged_quic_packet_retry.retired_cids.value(fml:a,X) = forged_quic_packet_retry.retired_cids.value(old_fml:a,X); assert forged_quic_packet_retry.retired_cids.end(old_fml:a) <= X & X < fml:s -> forged_quic_packet_retry.retired_cids.value(fml:a,X) = fml:v}",
            "assert replayed_quic_packet_0rtt.retired_cids.end(fml:a) = fml:s & replayed_quic_packet_0rtt.retired_cids.value(fml:a,X) = fml:y",
            "<<<\n\t    >>>",
            "assert 0:idx < fml:x",
            "assert 0:forged_quic_packet_vn.idx <= fml:x & fml:x < forged_quic_packet_vn.arr.end(fml:a)",
            "if _generating {assert fml:scid = the_cid; assert frame.max_data.pos(fml:f) = 4000}\nelse {assert ~(max_data_set(fml:scid) & max_data_val(fml:scid) > frame.max_data.pos(fml:f)); local loc:tp {loc:tp := trans_params(fml:scid); if initial_max_data.is_set(loc:tp) {}}}",
            "{}",
            "local loc:dcid {loc:dcid := replayed_quic_packet_0rtt.dst_cid(fml:pkt); local loc:scid {loc:scid := replayed_quic_packet_0rtt.src_cid(fml:pkt); if cid_mapped(loc:dcid) {loc:dcid := cid_to_aid(loc:dcid)}; if fml:src = client_alt | fml:dst = client_alt {migration_done := true}; assert replayed_quic_packet_0rtt.ptype(fml:pkt) = quic_packet_type.zero_rtt; local loc:pn_app_space {loc:pn_app_space := quic_packet_type.one_rtt; assert ~sent_pkt(loc:scid,loc:pn_app_space,replayed_quic_packet_0rtt.seq_num(fml:pkt)); sent_pkt(loc:scid,loc:pn_app_space,replayed_quic_packet_0rtt.seq_num(fml:pkt)) := true; assert loc:scid = initial_scid & loc:dcid = initial_dcid; assert num_queued_frames_rtt(loc:scid) > 0; assert replayed_quic_packet_0rtt.payload(fml:pkt) = queued_frames_rtt(loc:scid); assert connected(loc:dcid) -> connected_to(loc:dcid) = loc:scid; local loc:0 {call loc:0 := replayed_quic_packet_0rtt.long(fml:pkt); assert conn_seen(loc:scid) & loc:0 & is_client(loc:scid) -> conn_requested(fml:src,fml:dst,loc:scid)}}}}",
            "fml:y := fml:x + 1",
            "{}",
            "{assert stream_data.end(fml:a) = stream_data.end(old_fml:a); assert stream_data.value(fml:a,X) = (fml:y if (X = fml:x) else stream_data.value(old_fml:a,X))}",
            "<<<\n    res.val = c.val * 2;\n    >>>",
            "{assert connected(fml:dcid) & connected_to(fml:dcid) = fml:scid; assert fml:e = quic_packet_type.one_rtt & established_1rtt_keys(fml:scid); assert num_queued_frames(fml:scid) > 0 -> fml:e = queued_level(fml:scid); assert connected(fml:scid) & connected_to(fml:scid) = fml:dcid; assert frame.application_close.reason_phrase_length(fml:f) = stream_data.end(frame.application_close.reason_phrase(fml:f)); conn_closed(fml:scid) := true; call handle_transport_error(frame.application_close.err_code(fml:f))}",
            "<<<\n\t        if (0 <= `fml:x` && `fml:x` < (`tls_hand_extensions.domain`)`fml:a`.size()) \n\t            `fml:y` = `fml:a`[`fml:x`];\n\t    >>>",
            "<<<\n                for (unsigned i = 0; i < `fml:b`.size(); i++)\n\t            `fml:a`.push_back(`fml:b`[i]);\n            >>>",
            "assert quic_packet_retry.retired_cids.end(fml:a) = fml:s & quic_packet_retry.retired_cids.value(fml:a,X) = fml:y",
            "{assert quic_packet_retry.retired_cids.end(fml:a) = quic_packet_retry.retired_cids.end(old_fml:a); assert quic_packet_retry.retired_cids.value(fml:a,X) = (fml:y if (X = fml:x) else quic_packet_retry.retired_cids.value(old_fml:a,X))}",
            "{}",
            "<<<\n                for (unsigned i = 0; i < `fml:b`.size(); i++)\n\t            `fml:a`.push_back(`fml:b`[i]);\n            >>>",
            "<<<\n\t        if (0 <= `fml:x` && `fml:x` < (`vector[tls.compression_method].domain`)`fml:a`.size()) \n\t            `fml:a`[`fml:x`] = `fml:y`;\n\t    >>>",
            "{}",
            "<<<\n                for (unsigned i = 0; i < `fml:b`.size(); i++)\n\t            `fml:a`.push_back(`fml:b`[i]);\n            >>>",
            "{}",
            "assert 0:tls_hand_extensions.domain <= fml:s",
            "<<<\n                for (unsigned i = 0; i < `fml:a`.size()/2; i++) {\n                    std::swap(`fml:a`[i],`fml:a`[`fml:a`.size()-i-1]);\n                }\n            >>>",
            "{assert quic_packet_coal_0rtt.arr.end(fml:a) = fml:s; assert 0:quic_packet_coal_0rtt.idx <= X & X < quic_packet_coal_0rtt.arr.end(old_fml:a) -> quic_packet_coal_0rtt.arr.value(fml:a,X) = quic_packet_coal_0rtt.arr.value(old_fml:a,X); assert quic_packet_coal_0rtt.arr.end(old_fml:a) <= X & X < fml:s -> quic_packet_coal_0rtt.arr.value(fml:a,X) = fml:v}",
            "<<<\n                if ((`quic_packet_vn.idx`)`fml:a`.size() > 0)\n                    `fml:res` = `fml:a`.back();\n            >>>",
            "{}",
            "<<<\n\t    >>>",
            "<<<\n                for (unsigned i = 0; i < `fml:a`.size()/2; i++) {\n                    std::swap(`fml:a`[i],`fml:a`[`fml:a`.size()-i-1]);\n                }\n            >>>",
            "{assert fml:x < fml:y & (fml:x < Y -> fml:y <= Y); assert vector[tls.handshake].domain.succ(fml:x,fml:y)}",
            "{}",
            "<<<\n        pnum_len = (pkt[0] & 0x3) + 1;\n        >>>",
            "<<<\n                if ((`frame.ack_ecn.range.idx`)`fml:a`.size() > 0)\n                    `fml:res` = `fml:a`.back();\n            >>>",
            "<<<\n\t        unsigned __old_size = `fml:a`.size();\n\t        `fml:a`.resize(`fml:s`);\n\t        for (unsigned i = __old_size; i < (unsigned)`fml:s`; i++)\n\t            `fml:a`[i] = v;\n            >>>",
            "<<<\n\t        `fml:a`.push_back(`fml:v`);\n            >>>",
            "<<<\n\t    std::vector<char> buf(y.size());\n\t    std::copy(y.begin(),y.end(),buf.begin());\n\t    `quic_deser_zerortt` des(buf);\n\t    __deser(des,x);\n\t    >>>",
            "<<<\n\t        unsigned __old_size = `fml:a`.size();\n\t        `fml:a`.resize(`fml:s`);\n\t        for (unsigned i = __old_size; i < (unsigned)`fml:s`; i++)\n\t            `fml:a`[i] = v;\n            >>>",
            "{zero_length_token := false; token_saved := true; retry_sent(C) := false; retry_recv(C) := false; retry_response(C) := false; header_retry := 0xF6:stream_pos; retry_client_test := false}",
            "<<<\n                for (unsigned i = 0; i < `fml:a`.size()/2; i++) {\n                    std::swap(`fml:a`[i],`fml:a`[`fml:a`.size()-i-1]);\n                }\n            >>>",
            "{}",
            "assert 0:frame.ack.range.idx <= fml:s",
            "assert 0:forged_quic_packet.idx < fml:x",
            "<<<\n\t        `fml:a`.push_back(`fml:v`);\n            >>>",
            "{}",
            "{}",
            "<<<\n\t        `fml:a`.push_back(`fml:v`);\n            >>>",
            "{tls_api.upper.open(fml:c) := false; tls_api.upper.established(fml:c) := false}",
            "assert servers.server.arr.end(fml:a) = fml:s & servers.server.arr.value(fml:a,X) = fml:y",
            "<<<\n\t        if (`fml:a`.size() > 0) {\n\t            a.pop_back();\n\t        }\n            >>>",
            "{}",
            "<<<\n\t        if (0 <= `fml:x` && `fml:x` < (`idx_r`)`fml:a`.size()) \n\t            `fml:y` = `fml:a`[`fml:x`];\n\t    >>>",
            "<<<\n\t        `fml:a`.resize(`fml:s`);\n\t        for (unsigned i = 0; i < `fml:s`; i++)\n\t            `fml:a`[i] = y;\n\t    >>>",
            "<<<\n\t        unsigned __old_size = `fml:a`.size();\n\t        `fml:a`.resize(`fml:s`);\n\t        for (unsigned i = __old_size; i < (unsigned)`fml:s`; i++)\n\t            `fml:a`[i] = v;\n            >>>",
            "<<<\n\t        if (0 <= `fml:x` && `fml:x` < (`index`)`fml:a`.size()) \n\t            `fml:y` = `fml:a`[`fml:x`];\n\t    >>>",
            "assert 0:quic_packet_retry.idx <= fml:s",
            "<<<        picotls_connection *s = `tls_api.upper.foo.cid_map`[c];\n        std::cerr << \"lower.recv   s \"   << s << \"\\n\";\n        std::vector<char> &input = s->input;\n        for (unsigned i = 0; i < data.size(); i++) {\n            input.push_back(data[i]);\n        }\n        // TODO: make the epoch a parameter of this call\n        // For now, we assume that the epochs come in order\n        size_t in_epoch = ptls_get_read_epoch(s->gs);\n        picotls_do_handshake(s,in_epoch,&(s->input[0]),s->input.size());\n        s->input.clear();\n        >>>",
            "<<<\n            const char * session_file = getenv(\"initial_max_data\");\n            FILE *fp;\n            size_t len = 0;\n            ssize_t read;\n            char * line = NULL;\n            if(session_file != NULL) {\n                fp = fopen(session_file,\"r\");\n                read = getline(&line, &len, fp);\n                fclose(fp);\n                bool is_error = false;\n                if(line != NULL) { \n                    i = (uint32_t) std::stoll(line);\n                }\n            }\n        >>>",
            "{}",
            "{}",
            "{}",
            "{}",
            "{ack_delay_exponent.is_set(fml:s) := true; ack_delay_exponent.value(fml:s) := fml:p}",
            "{}",
            "{}",
            "{}",
            "{}",
            "assert 0:forged_protected_quic_packet.idx <= fml:x & fml:x < forged_protected_quic_packet.arr.end(fml:a)",
            "{}",
            "{}",
            "{}",
            "{}",
            "{}",
            "{}",
            "{}",
            "{assert quic_packet_retry.arr.end(fml:a) = quic_packet_retry.arr.end(old_fml:a); assert quic_packet_retry.arr.value(fml:a,X) = (fml:y if (X = fml:x) else quic_packet_retry.arr.value(old_fml:a,X))}",
            "<<<\n\t        if (`fml:a`.size() > 0) {\n\t            a.pop_back();\n\t        }\n            >>>",
            "local loc:0 {call loc:0 := dst_is_generated_tls(fml:dst); if loc:0 {local loc:0 {call loc:0 := src_tls_id(fml:dst); call tls_api.lower.recv(loc:0, fml:data, 0:tls_api.lower.level)}}}",
            "fake_client.tls_id := fml:e",
            "{header_retry := bfe[0][7](stream_data.value(fml:spkt,0)); local loc:dcil {loc:dcil := bfe[0][7](stream_data.value(fml:spkt,5)); local loc:0 {call loc:0 := prot.bytes_to_cid(stream_data.segment(fml:spkt,6,6 + loc:dcil)); local loc:dcid {loc:dcid := loc:0; local loc:scil {loc:scil := bfe[0][7](stream_data.value(fml:spkt,6 + loc:dcil)); local loc:0 {call loc:0 := prot.bytes_to_cid(stream_data.segment(fml:spkt,7 + loc:dcil,7 + loc:dcil + loc:scil)); local loc:scid {loc:scid := loc:0; call export_length_cid_extension(loc:scil, loc:dcil); local loc:0 {call loc:0 := pkt_serdes_retry.from_bytes(fml:spkt); local loc:pkt {loc:pkt := loc:0; quic_packet_retry.ptype(loc:pkt) := quic_packet_type.retry; call recv_retry_pkt(fml:src, fml:dst, loc:pkt); call infer_tls_events_retry(fml:src, fml:dst, loc:pkt); retry_token(loc:dcid) := quic_packet_retry.token(loc:pkt); if stream_data.end(quic_packet_retry.token(loc:pkt)) = 0 {zero_length_token := true}; retry_response(loc:dcid) := true; call packet_event_retry(fml:src, fml:dst, loc:pkt)}}}}}}}}}",
            "local loc:dcid {loc:dcid := forged_quic_packet_vn.dst_cid(fml:pkt); local loc:scid {loc:scid := forged_quic_packet_vn.src_cid(fml:pkt); if cid_mapped(loc:dcid) {loc:dcid := cid_to_aid(loc:dcid)}; if fml:src = client_alt | fml:dst = client_alt {migration_done := true}; assert mim_agent.nat_configured}}",
            "assert 0:quic_packet_retry.idx <= fml:x & fml:x < quic_packet_retry.retired_cids.end(fml:a)",
            "{}",
            "<<<\n\t        if (0 <= `fml:x` && `fml:x` < (`vector[tls.cipher_suite].domain`)`fml:a`.size()) \n\t            `fml:y` = `fml:a`[`fml:x`];\n\t    >>>",
            "<<<\n\t        if (0 <= `fml:x` && `fml:x` < (`forged_protected_quic_packet.idx`)`fml:a`.size()) \n\t            `fml:a`[`fml:x`] = `fml:y`;\n\t    >>>",
            "<<<\n                if ((`quic_packet_retry.idx`)`fml:a`.size() > 0)\n                    `fml:res` = `fml:a`.back();\n            >>>",
            "{}",
            "{assert frame.ack.range.arr.end(fml:a) > frame.ack.range.arr.end(old_fml:a) & ~(frame.ack.range.arr.end(old_fml:a) < X & X < frame.ack.range.arr.end(fml:a)); assert 0:frame.ack.range.idx <= X & X < frame.ack.range.arr.end(old_fml:a) -> frame.ack.range.arr.value(fml:a,X) = frame.ack.range.arr.value(old_fml:a,X); assert frame.ack.range.arr.value(fml:a,frame.ack.range.arr.end(old_fml:a)) = fml:v}",
            "{}",
            "{assert arr_streamid_r.end(fml:a) = arr_streamid_r.end(old_fml:a); assert arr_streamid_r.value(fml:a,X) = (fml:y if (X = fml:x) else arr_streamid_r.value(old_fml:a,X))}",
            "{}",
            "assert 0:forged_quic_packet_retry.idx <= fml:x & fml:x < forged_quic_packet_retry.arr.end(fml:a)",
            "{if ~_generating {call handle_transport_error(frame.stop_sending.err_code(fml:f))}; stream_seen(fml:scid,frame.stop_sending.id(fml:f)) := true; call enqueue_frame(fml:scid, fml:f, fml:e, false)}",
            "local loc:pn_offset {loc:pn_offset := 0:stream_pos; if prot.hdr_long(fml:header) {loc:pn_offset := fml:hdr_len - fml:pnum_pos}\nelse {loc:pn_offset := 1:stream_pos + 8}; fml:sample := fml:packetByte; local loc:sample_offset {loc:sample_offset := loc:pn_offset + 4; if loc:sample_offset + fml:sample_size > stream_data.end(fml:packetByte) {local loc:diff {loc:diff := (loc:sample_offset + fml:sample_size) - stream_data.end(fml:packetByte); local loc:i {loc:i := 0:stream_pos; while loc:i < loc:diff\n{call fml:sample := stream_data.append(fml:sample, 0x00:byte); loc:i := loc:i + 1}}}}}}",
            "{}",
            "{if ~stream_frame_restransmitted(fml:id) {receiving_recv(fml:id) := false; receiving_sizeKnown(fml:id) := true}; call lastest_stream_id_receiving(fml:seq) := arr_streamid_r.append(lastest_stream_id_receiving(fml:seq), fml:id); call lastest_pkt_num_receiving := arr_pkt_num_r.append(lastest_pkt_num_receiving, fml:seq)}",
            "{}",
            "{assert fml:y < fml:x & (Y:stream_pos < fml:x -> Y <= fml:y); assert stream_pos.succ(fml:y,fml:x)}",
            "assert 0:forged_quic_packet_retry.idx <= fml:s",
            "{}",
            "{}",
            "<<<\n\t        if (0 <= `fml:x` && `fml:x` < (`clients.client.idx`)`fml:a`.size()) \n\t            `fml:a`[`fml:x`] = `fml:y`;\n\t    >>>",
            "mim_agent.tls_id := fml:e",
            "{}",
            "{assert connected(fml:dcid) & connected_to(fml:dcid) = fml:scid; if _generating {assert fml:e ~= quic_packet_type.initial & fml:e ~= quic_packet_type.handshake; assert ~conn_closed(fml:scid)}; assert fml:e = quic_packet_type.handshake -> established_handshake_keys(fml:scid); assert fml:e = quic_packet_type.one_rtt -> established_1rtt_keys(fml:scid); assert fml:e ~= quic_packet_type.version_negociation & fml:e ~= quic_packet_type.retry & fml:e ~= quic_packet_type.zero_rtt; assert num_queued_frames(fml:scid) > 0 -> fml:e = queued_level(fml:scid); local loc:idx {loc:idx := 0:frame.ack.range.idx; local loc:last {loc:last := frame.ack.largest_acked(fml:f); if max_acked(fml:dcid,fml:e) < loc:last {max_acked(fml:dcid,fml:e) := loc:last}; assert frame.ack.range.arr.end(frame.ack.ack_ranges(fml:f)) > 0; local loc:some_new_ack {loc:some_new_ack := false; while loc:idx < frame.ack.range.arr.end(frame.ack.ack_ranges(fml:f))\n{local loc:ack_range {loc:ack_range := frame.ack.range.arr.value(frame.ack.ack_ranges(fml:f),loc:idx); assert loc:idx > 0 -> frame.ack.range.gap(loc:ack_range) < loc:last - 1; local loc:upper {loc:upper := loc:last - (frame.ack.range.gap(loc:ack_range) + 2 if (loc:idx > 0) else 0); assert frame.ack.range.ranges(loc:ack_range) <= loc:upper; loc:last := loc:upper - frame.ack.range.ranges(loc:ack_range); local loc:jdx {loc:jdx := loc:last; while loc:jdx <= loc:upper\n{assert sent_pkt(fml:dcid,fml:e,loc:jdx); if pkt_has_close(fml:dcid,fml:e,loc:jdx) {conn_draining(fml:scid) := true}; if ~acked_pkt(fml:dcid,fml:e,loc:jdx) {loc:some_new_ack := true}; acked_pkt(fml:dcid,fml:e,loc:jdx) := true; loc:jdx := loc:jdx + 1}; call loc:idx := frame.ack.range.idx.next(loc:idx)}}}}; if _generating {assert loc:some_new_ack; assert frame.ack.largest_acked(fml:f) = max_acked(fml:dcid,fml:e)}}}}}",
            "<<<\n\t        `fml:s` = (`vector[transport_parameter].domain`) `fml:a`.size();\n\t    >>>",
            "assert fml:s = quic_packet_coal_0rtt.retired_cids.end(fml:a)",
            "assert 0:forged_protected_quic_packet.idx <= fml:x & fml:x < forged_protected_quic_packet.retired_cids.end(fml:a)",
            "assert 0:index <= fml:x & fml:x < forged_pkts.end(fml:a)",
            "assert fml:s = cids.end(fml:a)",
            "fml:y := fml:x - 1",
            "{assert quic_packet.retired_cids.end(fml:a) = fml:s; assert 0:quic_packet.idx <= X & X < quic_packet.retired_cids.end(old_fml:a) -> quic_packet.retired_cids.value(fml:a,X) = quic_packet.retired_cids.value(old_fml:a,X); assert quic_packet.retired_cids.end(old_fml:a) <= X & X < fml:s -> quic_packet.retired_cids.value(fml:a,X) = fml:v}",
            "{}",
            "<<<\n\t        `fml:a`.push_back(`fml:v`);\n            >>>",
            "<<<\n\t        `fml:s` = (`quic_packet_coal_0rtt.idx`) `fml:a`.size();\n\t    >>>",
            "fml:res := replayed_quic_packet_0rtt.ptype(fml:pkt) ~= quic_packet_type.one_rtt",
            "<<<\n                if ((`tls_hand_extensions.domain`)`fml:a`.size() > 0)\n                    `fml:res` = `fml:a`.back();\n            >>>",
            "{initial_keys_set(C) := false; tp_client_set := false; client_non_zero_scil := false; zero_rtt_allowed := false; zero_rtt_sent := false; send_connection_close := false}",
            "{}",
            "local loc:tppkt {loc:tppkt := fml:ppkt; call loc:tppkt := stream_data.set(loc:tppkt, 1:stream_pos, 0xff:byte); call loc:tppkt := stream_data.set(loc:tppkt, 2:stream_pos, 0x00:byte); call loc:tppkt := stream_data.set(loc:tppkt, 3:stream_pos, 0x00:byte); call loc:tppkt := stream_data.set(loc:tppkt, 4:stream_pos, 0x1d:byte); fml:rppkt := loc:tppkt}",
            "{}",
            "<<<\n\t        `fml:s` = (`quic_packet_0rtt.idx`) `fml:a`.size();\n\t    >>>",
            "{}",
            "{}",
            "assert 0:index <= fml:s",
            "{client_server.enc_level := quic_packet_type.initial; ip.endpoint.protocol(client_server.ep_in) := ip.udp; ip.endpoint.addr(client_server.ep_in) := server_addr; ip.endpoint.port(client_server.ep_in) := client_port; ip.endpoint.protocol(client_server.ep_out) := ip.udp; ip.endpoint.addr(client_server.ep_out) := server_addr; ip.endpoint.port(client_server.ep_out) := server_port}",
            "{}",
            "{assert prot.arr.end(fml:a) = fml:s; assert 0:prot.idx <= X & X < prot.arr.end(old_fml:a) -> prot.arr.value(fml:a,X) = prot.arr.value(old_fml:a,X); assert prot.arr.end(old_fml:a) <= X & X < fml:s -> prot.arr.value(fml:a,X) = fml:v}",
            "{}",
            "{assert fml:x < fml:y & (fml:x < Y -> fml:y <= Y); assert vector[tls.cipher_suite].domain.succ(fml:x,fml:y)}",
            "{assert fml:y < fml:x & (Y:clients.client.idx < fml:x -> Y <= fml:y); assert clients.client.idx.succ(fml:y,fml:x)}",
            "{}",
            "assert 0:forged_quic_packet_retry.idx <= fml:s",
            "<<<\n\t        unsigned __old_size = `fml:a`.size();\n\t        `fml:a`.resize(`fml:s`);\n\t        for (unsigned i = __old_size; i < (unsigned)`fml:s`; i++)\n\t            `fml:a`[i] = v;\n            >>>",
            "assert fml:s = bytes.end(fml:a)",
            "{}",
            "local loc:jdx_r {loc:jdx_r := 0:jdx_r; while loc:jdx_r < arr_pkt_num_r.end(lastest_pkt_num_receiving)\n{local loc:seq {loc:seq := arr_pkt_num_r.value(lastest_pkt_num_receiving,loc:jdx_r); local loc:idx_r {loc:idx_r := 0:idx_r; while loc:seq <= fml:largest_acked & loc:idx_r < arr_streamid_r.end(lastest_stream_id_receiving(loc:seq))\n{local loc:sid {loc:sid := arr_streamid_r.value(lastest_stream_id_receiving(loc:seq),loc:idx_r); if receiving_resetRecvd(loc:sid) {call handle_receiving_resetRead(loc:sid)}\nelse {if receiving_sizeKnown(loc:sid) {call handle_receiving_dataRecvd(loc:sid)}}; call loc:idx_r := idx_r.next(loc:idx_r)}}; call loc:jdx_r := jdx_r.next(loc:jdx_r)}}}}",
            "{}",
            "{}",
            "{}",
            "fml:y := fml:x - 1",
            "assert frame.ack.range.arr.end(fml:a) = fml:s & frame.ack.range.arr.value(fml:a,X) = fml:y",
            "{}",
            "{assert tls.handshakes.end(fml:a) = fml:s; assert 0:tls.handshakes.domain <= X & X < tls.handshakes.end(old_fml:a) -> tls.handshakes.value(fml:a,X) = tls.handshakes.value(old_fml:a,X); assert tls.handshakes.end(old_fml:a) <= X & X < fml:s -> tls.handshakes.value(fml:a,X) = fml:v}",
            "{}",
            "assert fml:s = arr_pkt_num_s.end(fml:a)",
            "<<<\n\t    std::vector<char> buf(y.size());\n\t    std::copy(y.begin(),y.end(),buf.begin());\n\t    `quic_deser_zerortt` des(buf);\n\t    __deser(des,x);\n\t    >>>",
            "{}",
            "{}",
            "call enqueue_frame(fml:scid, fml:f, fml:e, false)",
            "{}",
            "{}",
            "{}",
            "<<<\n                for (unsigned i = 0; i < `fml:b`.size(); i++)\n\t            `fml:a`.push_back(`fml:b`[i]);\n            >>>",
            "<<<\n\t        `fml:s` = (`frame.ack.range.idx`) `fml:a`.size();\n\t    >>>",
            "assert 0:frame.idx <= fml:s",
            "{assert servers.server.arr.end(fml:a) = servers.server.arr.end(old_fml:a); assert servers.server.arr.value(fml:a,X) = (fml:y if (X = fml:x) else servers.server.arr.value(old_fml:a,X))}",
            "{}",
            "assert 0:quic_packet_coal_0rtt.idx <= fml:x & fml:x < quic_packet_coal_0rtt.arr.end(fml:a)",
            "<<<\n\t    >>>",
            "<<<\n            const char * session_file = getenv(\"initial_max_stream_data_uni\");\n            FILE *fp;\n            size_t len = 0;\n            ssize_t read;\n            char * line = NULL;\n            if(session_file != NULL) {\n                fp = fopen(session_file,\"r\");\n                read = getline(&line, &len, fp);\n                fclose(fp);\n                bool is_error = false;\n                if(line != NULL) { \n                    i = (uint32_t) std::stoll(line);\n                }\n            }\n        >>>",
            "{}",
            "<<<\n\t        if (0 <= `fml:x` && `fml:x` < (`index`)`fml:a`.size()) \n\t            `fml:a`[`fml:x`] = `fml:y`;\n\t    >>>",
            "{}",
            "assert 0:forged_protected_quic_packet.idx <= fml:s",
            "if _generating {local loc:0 {call loc:0 := pkt_serdes_0rtt.to_bytes(fml:pkt); local loc:spkt {loc:spkt := loc:0; local loc:0 {call loc:0 := prot.arr.empty; local loc:pkts {loc:pkts := loc:0; local loc:0 {call loc:0 := src_tls_id(fml:src); local loc:tls_id {loc:tls_id := loc:0; local loc:0 {call loc:0 := reference_pkt_num(loc:spkt, false); local loc:rnum {loc:rnum := loc:0; local loc:0 {call loc:0 := prot.encrypt_rtt(loc:tls_id, loc:rnum, loc:spkt); local loc:ppkt {loc:ppkt := loc:0; call loc:pkts := prot.arr.append(loc:pkts, loc:ppkt); local loc:0,loc:1 {call loc:0 := endpoint_to_pid(fml:src); call loc:1 := endpoint_to_socket(fml:src); call net.send(loc:0, loc:1, fml:dst, loc:pkts)}; zero_rtt_sent := true}}}}}}}}}}}",
            "{}",
            "{assert fml:x < fml:y & (fml:x < Y -> fml:y <= Y); assert frame.ack_ecn.range.idx.succ(fml:x,fml:y)}",
            "{}",
            "<<<\n\t        if (`fml:a`.size() > 0) {\n\t            a.pop_back();\n\t        }\n            >>>",
            "assert 0:index <= fml:x & fml:x < forged_pkts.end(fml:a)",
            "<<<\n        bytes.push_back(0x40 | (val >> 8) & 0x3f);\n        bytes.push_back(val & 0xff);\n        >>>",
            "{assert fml:y < fml:x & (Y:quic_packet_vn.idx < fml:x -> Y <= fml:y); assert quic_packet_vn.idx.succ(fml:y,fml:x)}",
            "{}",
            "<<<\n       srand((unsigned) time(0)); //fixed or random seed ?\n       res = 0;\n       res = ::rand()%32767 + (min+1);\n       std::cerr << \"greater random: \" << res << \"\\n\";\n       >>>",
            "assert 0:idx_s <= fml:s",
            "{assert versions.end(fml:a) = versions.end(old_fml:a); assert versions.value(fml:a,X) = (fml:y if (X = fml:x) else versions.value(old_fml:a,X))}",
            "<<<\n\t    std::vector<char> buf(y.size());\n\t    std::copy(y.begin(),y.end(),buf.begin());\n\t    `quic_deser_forged` des(buf);\n\t    __deser(des,x);\n\t    >>>",
            "{enable_time_stamp.is_set(fml:s) := true; enable_time_stamp.value(fml:s) := fml:p}",
            "{}",
            "assert 0:prot.idx < fml:x",
            "assert 0:frame.ack.range.idx <= fml:x & fml:x < frame.ack.range.arr.end(fml:a)",
            "{initial_max_stream_id_uni.is_set(fml:s) := true; initial_max_stream_id_uni.value(fml:s) := fml:p}",
            "<<<\n\t        `fml:a`.push_back(`fml:v`);\n            >>>",
            "{}",
            "<<<\n\t        `fml:a`.push_back(`fml:v`);\n            >>>",
            "{if ~stream_frame_restransmitted(fml:id) & ~sdb_frame_restransmitted(fml:id) {sending_ready(fml:id) := false; sending_send(fml:id) := true}; call lastest_stream_id_sender(fml:seq) := arr_streamid_s.append(lastest_stream_id_sender(fml:seq), fml:id); call lastest_pkt_num_sender := arr_pkt_num_s.append(lastest_pkt_num_sender, fml:seq)}",
            "{assert forged_pkts.end(fml:pkt) > 0; assert mim_agent.nat_configured; assert fml:src ~= fml:dst; assert ~(fml:src = mim_agent.ep_out & fml:dst = mim_agent.ep_in); assert ~(fml:dst = mim_agent.ep_out & fml:src = mim_agent.ep_in); assert ~packed_forwarded_arr(fml:pkt)}",
            "{}",
            "<<<\n\t        if (0 <= `fml:x` && `fml:x` < (`forged_quic_packet_retry.idx`)`fml:a`.size()) \n\t            `fml:a`[`fml:x`] = `fml:y`;\n\t    >>>",
            "<<<\n                if ((`frame.ack.range.idx`)`fml:a`.size() > 0)\n                    `fml:res` = `fml:a`.back();\n            >>>",
            "local loc:0 {call loc:0 := socket_endpoint(fml:host, fml:s); local loc:dst {loc:dst := loc:0; local loc:idx {loc:idx := prot.arr.begin(fml:pkts); while loc:idx < prot.arr.end(fml:pkts)\n{local loc:ppkt {loc:ppkt := prot.arr.value(fml:pkts,loc:idx); local loc:0 {call loc:0 := src_tls_id(loc:dst); local loc:tls_id {loc:tls_id := loc:0; local loc:header {loc:header := stream_data.value(loc:ppkt,0); local loc:hdr_type {loc:hdr_type := bfe[0][6](stream_data.value(loc:ppkt,0)); local loc:tt {loc:tt := bvand(loc:hdr_type,0x30); local loc:is_long {loc:is_long := bvand(0x80:byte,loc:header) ~= 0; local loc:version {loc:version := stream_data.segment(loc:ppkt,1,1 + 4); local loc:0 {call loc:0 := bytes_to_version(loc:version); local loc:bversion {loc:bversion := loc:0; local loc:ptype {loc:ptype := bvand(0x30:byte,loc:header); if zrtt_pkt_set & ~zrtt_pkt_process {zrtt_pkt_process := true; local loc:0 {call loc:0 := reference_pkt_num(last_zrtt_pkt, true); local loc:rnum {loc:rnum := loc:0; local loc:0 {call loc:0 := prot.decrypt(loc:tls_id, loc:rnum, last_zrtt_pkt); local loc:res {loc:res := loc:0; if tls_api.upper.ok(loc:res) {if loc:bversion ~= 0 {call tls_client_0rtt_response(fml:src, loc:dst, tls_api.upper.data(loc:res))}}\nelse {call undecryptable_packet_event(fml:host, fml:src, loc:dst, last_zrtt_pkt)}}}}}}; if bvand(stream_data.value(loc:ppkt,0),0xf0) = 0xc0 {call tls_client_initial_response(fml:src, loc:dst, loc:ppkt)}; local loc:0 {call loc:0 := reference_pkt_num(loc:ppkt, true); local loc:rnum {loc:rnum := loc:0; local loc:0 {call loc:0 := prot.decrypt(loc:tls_id, loc:rnum, loc:ppkt); local loc:res {loc:res := loc:0; if tls_api.upper.ok(loc:res) {local loc:0 {call loc:0 := is_padding_packet(tls_api.upper.payload(loc:res)); local loc:is_pad {loc:is_pad := loc:0; if loc:is_pad {call padding_packet_event(fml:host, fml:src, loc:dst, loc:ppkt)}\nelse {if loc:tt = 0x10 & loc:bversion ~= 0 {call tls_client_0rtt_response(fml:src, loc:dst, tls_api.upper.data(loc:res))}\nelse {local loc:0 {call loc:0 := pkt_serdes.from_bytes(tls_api.upper.data(loc:res)); local loc:pkt {loc:pkt := loc:0; local loc:0 {call loc:0 := prot.get_pnum_len(tls_api.upper.data(loc:res)); call quic_packet.seq_num(loc:pkt) := prot.correct_pnum(loc:rnum, quic_packet.seq_num(loc:pkt), loc:0)}; call recv_packet(fml:host, fml:src, loc:dst, loc:pkt); call infer_tls_events(fml:src, loc:dst, loc:pkt); call packet_event(fml:src, loc:dst, loc:pkt); if nclients > 1 {local loc:cdx {loc:cdx := cids.begin(the_cids); while loc:cdx < cids.end(the_cids)\n{local loc:tcid {loc:tcid := cids.value(the_cids,loc:cdx); if bvand(stream_data.value(loc:ppkt,0),0xf0) = 0xc0 & ~connected(loc:tcid) {call app_server_open_event(loc:dst, fml:src, loc:tcid, quic_packet.src_cid(loc:pkt))}; call loc:cdx := index.next(loc:cdx)}}}}\nelse {if bvand(stream_data.value(loc:ppkt,0),0xf0) = 0xc0 & ~connected(the_cid) {call app_server_open_event(loc:dst, fml:src, the_cid, quic_packet.src_cid(loc:pkt))}}}}}}}}}\nelse {call undecryptable_packet_event(fml:host, fml:src, loc:dst, loc:ppkt)}; call loc:idx := prot.idx.next(loc:idx)}}}}}}}}}}}}}}}}; version_not_found(fml:src) := false; call show_last_datagram_size(last_datagram_received_size); if ~first_datagram_received {first_datagram_received := true}; last_datagram_received_size := 0:stream_pos}}}",
            "{}",
            "{}",
            "{}",
            "<<<\n            std::vector<char> buf(x.size() - pos);\n            std::copy(x.begin()+pos,x.end(),buf.begin());\n            `tls_deser` ds(buf);\n\n            try { \n                std::cerr << x << std::endl;\n                std::cerr << pos << std::endl;\n                std::cerr << std::endl;\n               __deser(ds,res.value);\n               res.pos = pos + ds.pos;\n            }\n\n            // If deserialization failure, print out the packet for\n            // debugging purposes.\n\n            catch(deser_err &err) {\n                std::cerr << \"error: failed to deserialize data\" << std::endl;\n                //std::cerr << err.what() << std::endl;\n                std::cerr << \"hex dump of data follows.\" << std::endl;\n                for (unsigned i = 0; i < buf.size(); i++) {\n                    if (i > 0 && i % 16 == 0) \n                        std::cerr << std::endl;\n                    if (i == ds.pos)\n                        fprintf(stderr,\"*\");\n                    fprintf(stderr,\"%02X\",((unsigned)buf[i]) & 0xff);\n                }\n                std::cerr << std::endl;\n                exit(1);\n            }\n\n        >>>",
            "{}",
            "{}",
            "{assert servers.server.arr.end(fml:a) > servers.server.arr.end(old_fml:a) & ~(servers.server.arr.end(old_fml:a) < X & X < servers.server.arr.end(fml:a)); assert 0:servers.server.idx <= X & X < servers.server.arr.end(old_fml:a) -> servers.server.arr.value(fml:a,X) = servers.server.arr.value(old_fml:a,X); assert servers.server.arr.value(fml:a,servers.server.arr.end(old_fml:a)) = fml:v}",
            "<<<\n\t        `fml:s` = (`frame.idx`) `fml:a`.size();\n\t    >>>",
            "{}",
            "local loc:dcid {loc:dcid := forged_quic_packet.dst_cid(fml:pkt); local loc:0 {call loc:0 := forged_quic_packet.long(fml:pkt); local loc:scid {loc:scid := (forged_quic_packet.src_cid(fml:pkt) if loc:0 else connected_to(loc:dcid)); if cid_mapped(loc:dcid) {loc:dcid := cid_to_aid(loc:dcid)}; if forged_quic_packet.ptype(fml:pkt) = quic_packet_type.initial {initial_token := forged_quic_packet.token(fml:pkt); if ~conn_seen(loc:dcid) {if ~zero_rtt_sent {call show_initial_request_initial; local loc:0 {call loc:0 := src_tls_id(fml:src); call tls_client_initial_request(fml:src, fml:dst, loc:dcid, forged_quic_packet.pversion(fml:pkt), loc:0)}}; conn_requested(fml:src,fml:dst,loc:scid) := true}; cid_to_token(loc:dcid) := forged_quic_packet.token(fml:pkt)}; conn_seen(loc:scid) := true; if queued_ack_eliciting(loc:scid) {ack_credit(loc:dcid) := ack_credit(loc:dcid) + 1}; if ~queued_non_ack(loc:scid) {ack_credit(loc:scid) := ack_credit(loc:scid) - 1}; if queued_non_probing(loc:scid) {if forged_quic_packet.ptype(fml:pkt) = quic_packet_type.one_rtt {if forged_quic_packet.seq_num(fml:pkt) >= hi_non_probing(loc:scid) {hi_non_probing(loc:scid) := forged_quic_packet.seq_num(fml:pkt); hi_non_probing_endpoint(loc:scid,fml:src) := true}}\nelse {hi_non_probing_endpoint(loc:scid,fml:src) := true}}; if queued_close(loc:scid) {pkt_has_close(loc:scid,forged_quic_packet.ptype(fml:pkt),forged_quic_packet.seq_num(fml:pkt)) := true}; if conn_draining(loc:scid) {draining_pkt_sent(loc:scid) := true}; if forged_quic_packet.ptype(fml:pkt) = quic_packet_type.initial & ~first_initial_send & zero_rtt_allowed {first_initial_send := true; initial_scid := loc:scid; initial_dcid := loc:dcid; queued_level(the_cid) := quic_packet_type.zero_rtt}\nelse {first_initial_send := false}; call queued_frames(loc:scid) := frame.arr.empty; queued_non_probing(loc:scid) := false; queued_non_ack(loc:scid) := false; queued_close(loc:scid) := false; num_queued_frames(loc:scid) := 0:frame.idx; queued_ack_eliciting(loc:scid) := false}}}",
            "local loc:0 {call loc:0 := socket_endpoint(fml:host, fml:s); local loc:dst {loc:dst := loc:0; local loc:idx {loc:idx := prot.arr.begin(fml:pkts); while loc:idx < prot.arr.end(fml:pkts)\n{local loc:ppkt {loc:ppkt := prot.arr.value(fml:pkts,loc:idx); local loc:0 {call loc:0 := src_tls_id(loc:dst); local loc:tls_id {loc:tls_id := loc:0; local loc:header {loc:header := stream_data.value(loc:ppkt,0); local loc:hdr_type {loc:hdr_type := bfe[0][6](stream_data.value(loc:ppkt,0)); local loc:tt {loc:tt := bvand(loc:hdr_type,0x30); local loc:is_long {loc:is_long := bvand(0x80:byte,loc:header) ~= 0; local loc:version {loc:version := stream_data.segment(loc:ppkt,1,1 + 4); local loc:0 {call loc:0 := bytes_to_version(loc:version); local loc:bversion {loc:bversion := loc:0; local loc:ptype {loc:ptype := bvand(0x30:byte,loc:header); if zrtt_pkt_set & ~zrtt_pkt_process {zrtt_pkt_process := true; local loc:0 {call loc:0 := reference_pkt_num(last_zrtt_pkt, true); local loc:rnum {loc:rnum := loc:0; local loc:0 {call loc:0 := prot.decrypt(loc:tls_id, loc:rnum, last_zrtt_pkt); local loc:res {loc:res := loc:0; if tls_api.upper.ok(loc:res) {if loc:bversion ~= 0 {call tls_client_0rtt_response(fml:src, loc:dst, tls_api.upper.data(loc:res))}}\nelse {call undecryptable_packet_event(fml:host, fml:src, loc:dst, last_zrtt_pkt)}}}}}}; if bvand(stream_data.value(loc:ppkt,0),0xf0) = 0xc0 {call tls_client_initial_response(fml:src, loc:dst, loc:ppkt)}; local loc:0 {call loc:0 := reference_pkt_num(loc:ppkt, true); local loc:rnum {loc:rnum := loc:0; local loc:0 {call loc:0 := prot.decrypt(loc:tls_id, loc:rnum, loc:ppkt); local loc:res {loc:res := loc:0; if tls_api.upper.ok(loc:res) {local loc:0 {call loc:0 := is_padding_packet(tls_api.upper.payload(loc:res)); local loc:is_pad {loc:is_pad := loc:0; if loc:is_pad {call padding_packet_event(fml:host, fml:src, loc:dst, loc:ppkt)}\nelse {if loc:tt = 0x10 & loc:bversion ~= 0 {call tls_client_0rtt_response(fml:src, loc:dst, tls_api.upper.data(loc:res))}\nelse {local loc:0 {call loc:0 := pkt_serdes.from_bytes(tls_api.upper.data(loc:res)); local loc:pkt {loc:pkt := loc:0; local loc:0 {call loc:0 := prot.get_pnum_len(tls_api.upper.data(loc:res)); call quic_packet.seq_num(loc:pkt) := prot.correct_pnum(loc:rnum, quic_packet.seq_num(loc:pkt), loc:0)}; call recv_packet(fml:host, fml:src, loc:dst, loc:pkt); call infer_tls_events(fml:src, loc:dst, loc:pkt); call packet_event(fml:src, loc:dst, loc:pkt); if nclients > 1 {local loc:cdx {loc:cdx := cids.begin(the_cids); while loc:cdx < cids.end(the_cids)\n{local loc:tcid {loc:tcid := cids.value(the_cids,loc:cdx); if bvand(stream_data.value(loc:ppkt,0),0xf0) = 0xc0 & ~connected(loc:tcid) {call app_server_open_event(loc:dst, fml:src, loc:tcid, quic_packet.src_cid(loc:pkt))}; call loc:cdx := index.next(loc:cdx)}}}}\nelse {if bvand(stream_data.value(loc:ppkt,0),0xf0) = 0xc0 & ~connected(the_cid) {call app_server_open_event(loc:dst, fml:src, the_cid, quic_packet.src_cid(loc:pkt))}}}}}}}}}\nelse {call undecryptable_packet_event(fml:host, fml:src, loc:dst, loc:ppkt)}; call loc:idx := prot.idx.next(loc:idx)}}}}}}}}}}}}}}}}; version_not_found(fml:src) := false; call show_last_datagram_size(last_datagram_received_size); if ~first_datagram_received {first_datagram_received := true}; last_datagram_received_size := 0:stream_pos}}}",
            "<<<\n\t        `fml:s` = (`forged_protected_quic_packet.idx`) `fml:a`.size();\n\t    >>>",
            "{}",
            "{fml:ok := false; local loc:tp {loc:tp := trans_params(fml:dcid); local loc:kind {loc:kind := get_stream_kind(fml:id); local loc:idhi {loc:idhi := fml:id / 4; if ~(is_client(fml:dcid) <-> get_stream_role(fml:id) = role.client) {if loc:kind = unidir {if initial_max_stream_id_uni.is_set(loc:tp) {fml:ok := loc:idhi < initial_max_stream_id_uni.stream_id_16(initial_max_stream_id_uni.value(loc:tp))}}\nelse {if initial_max_stream_id_bidi.is_set(loc:tp) {fml:ok := loc:idhi < initial_max_stream_id_bidi.stream_id_16(initial_max_stream_id_bidi.value(loc:tp))}}; fml:ok := fml:ok | max_stream_set(fml:dcid,loc:kind) & loc:idhi < max_stream(fml:dcid,loc:kind)}\nelse {fml:ok := stream_seen(fml:dcid,fml:id)}}}}}",
            "<<<\n\t    >>>",
            "assert quic_packet_coal_0rtt.arr.end(fml:a) = fml:s & quic_packet_coal_0rtt.arr.value(fml:a,X) = fml:y",
            "{}",
            "<<<\n                for (unsigned i = 0; i < `fml:b`.size(); i++)\n\t            `fml:a`.push_back(`fml:b`[i]);\n            >>>",
            "assert 0:idx <= fml:x & fml:x < bytes.end(fml:a)",
            "assert 0:index <= fml:x & fml:x < versions_bv.end(fml:a)",
            "{initial_source_connection_id.is_set(fml:s) := true; initial_source_connection_id.value(fml:s) := fml:p}",
            "fml:y := fml:x - 1",
            "<<<\n\t    `quic_ser_vn` ser;\n\t    __ser(ser,x);\n\t    y.resize(ser.res.size());\n\t    for (unsigned i = 0; i < ser.res.size(); i++)\n\t        y[i] = (unsigned char) ser.res[i];\n//\t    std::copy(ser.res.begin(),ser.res.end(),y.begin());\n\t    >>>",
            "{assert forged_pkts.end(fml:a) > forged_pkts.end(old_fml:a) & ~(forged_pkts.end(old_fml:a) < X & X < forged_pkts.end(fml:a)); assert 0:index <= X & X < forged_pkts.end(old_fml:a) -> forged_pkts.value(fml:a,X) = forged_pkts.value(old_fml:a,X); assert forged_pkts.value(fml:a,forged_pkts.end(old_fml:a)) = fml:v}",
            "{}",
            "{}",
            "{assert fml:y < fml:x & (Y:vector[transport_parameter].domain < fml:x -> Y <= fml:y); assert vector[transport_parameter].domain.succ(fml:y,fml:x)}",
            "{assert forged_quic_packet_retry.arr.end(fml:a) = fml:s; assert 0:forged_quic_packet_retry.idx <= X & X < forged_quic_packet_retry.arr.end(old_fml:a) -> forged_quic_packet_retry.arr.value(fml:a,X) = forged_quic_packet_retry.arr.value(old_fml:a,X); assert forged_quic_packet_retry.arr.end(old_fml:a) <= X & X < fml:s -> forged_quic_packet_retry.arr.value(fml:a,X) = fml:v}",
            "{zrtt_pkt_set := false; zrtt_pkt_process := false; call last_zrtt_pkt := stream_data.empty}",
            "assert fml:d = http_request_file.contents",
            "{}",
            "{assert vector[tls.psk_identity].end(fml:a) = fml:s; assert 0:vector[tls.psk_identity].domain <= X & X < vector[tls.psk_identity].end(old_fml:a) -> vector[tls.psk_identity].value(fml:a,X) = vector[tls.psk_identity].value(old_fml:a,X); assert vector[tls.psk_identity].end(old_fml:a) <= X & X < fml:s -> vector[tls.psk_identity].value(fml:a,X) = fml:v}",
            "{sending_dataSent(fml:id) := false; sending_ready(fml:id) := true; sending_dataRecvd(fml:id) := true}",
            "{}",
            "{}",
            "{}",
            "{}",
            "assert 0:servers.server.idx <= fml:s",
            "assert quic_packet_retry.retired_cids.end(fml:a) = 0",
            "assert 0:vector[tls.handshake].domain <= fml:s",
            "assert prot.arr.end(fml:a) = fml:s & prot.arr.value(fml:a,X) = fml:y",
            "{}",
            "{}",
            "{}",
            "<<<\n\t        if (0 <= `fml:x` && `fml:x` < (`jdx_r`)`fml:a`.size()) \n\t            `fml:y` = `fml:a`[`fml:x`];\n\t    >>>",
            "{}",
            "{}",
            "fml:y := fml:x - 1",
            "<<<\n\t        if (`fml:a`.size() > 0) {\n\t            a.pop_back();\n\t        }\n            >>>",
            "fml:y := fml:x - 1",
            "<<<\n\t        if (0 <= `fml:x` && `fml:x` < (`frame.ack.range.idx`)`fml:a`.size()) \n\t            `fml:a`[`fml:x`] = `fml:y`;\n\t    >>>",
            "assert versions_bv.end(fml:a) = fml:s & versions_bv.value(fml:a,X) = fml:y",
            "<<<\n                for (unsigned i = 0; i < `fml:b`.size(); i++)\n\t            `fml:a`.push_back(`fml:b`[i]);\n            >>>",
            "{assert quic_packet.ptype(fml:pkt) ~= quic_packet_type.zero_rtt & quic_packet.ptype(fml:pkt) ~= quic_packet_type.version_negociation & quic_packet.ptype(fml:pkt) ~= quic_packet_type.retry; local loc:dcid {loc:dcid := quic_packet.dst_cid(fml:pkt); local loc:scid {loc:scid := quic_packet.src_cid(fml:pkt); if cid_mapped(loc:dcid) {loc:dcid := cid_to_aid(loc:dcid)}; local loc:0 {call loc:0 := tls_api.upper.get_old_new_token; assert stream_data.end(quic_packet.token(fml:pkt)) ~= 0 -> retry_sent(client_initial_rcid) | retry_recv(loc:scid) | quic_packet.token(fml:pkt) = loc:0}; if (fml:src = client_alt | fml:dst = client_alt) & nclients = 1 {migration_done := true}; assert connected(loc:dcid) | quic_packet.ptype(fml:pkt) = quic_packet_type.initial & is_client(loc:scid) & loc:dcid = nonce_cid(loc:scid); local loc:0 {call loc:0 := quic_packet.long(fml:pkt); if loc:0 {assert connected(loc:dcid) -> connected_to(loc:dcid) = loc:scid}\nelse {loc:scid := connected_to(loc:dcid)}}; if retry_sent(loc:dcid) & ~_generating & ~zero_length_token & quic_packet.ptype(fml:pkt) = quic_packet_type.initial {assert loc:dcid = client_initial_rcid}; assert quic_packet.ptype(fml:pkt) = queued_level(loc:scid); if _generating {assert quic_packet.seq_num(fml:pkt) = last_pkt_num(loc:scid,quic_packet.ptype(fml:pkt)) + 0x1}; last_pkt_num(loc:scid,quic_packet.ptype(fml:pkt)) := quic_packet.seq_num(fml:pkt); assert ~sent_pkt(loc:scid,quic_packet.ptype(fml:pkt),quic_packet.seq_num(fml:pkt)); sent_pkt(loc:scid,quic_packet.ptype(fml:pkt),quic_packet.seq_num(fml:pkt)) := true; assert num_queued_frames(loc:scid) > 0; assert quic_packet.payload(fml:pkt) = queued_frames(loc:scid); local loc:0 {call loc:0 := quic_packet.long(fml:pkt); assert conn_seen(loc:scid) & loc:0 & is_client(loc:scid) -> conn_requested(fml:src,fml:dst,loc:scid)}; assert conn_seen(loc:dcid) -> hi_non_probing_endpoint(loc:dcid,fml:dst); assert ~_generating & ~queued_non_ack(loc:scid) -> ack_credit(loc:scid) > 0; if conn_draining(loc:scid) {assert ~draining_pkt_sent(loc:scid) & queued_close(loc:scid)}}}}",
            "{}",
            "assert 0:jdx_s < fml:x",
            "local loc:cdx {loc:cdx := 0:servers.server.idx; while loc:cdx < 2\n{if fml:src = servers.server.ep(servers.server.arr.value(servers.servers,loc:cdx)) {fml:tls_id := servers.server.tls_id(servers.server.arr.value(servers.servers,loc:cdx))}; call loc:cdx := servers.server.idx.next(loc:cdx)}}",
            "{}",
            "{}",
            "{}",
            "<<<\n\t    >>>",
            "{}",
            "fml:y := fml:x - 1",
            "{}",
            "<<<\n    res = 0;\n    if(const char* env_p2 = std::getenv(\"TEST_TYPE\")) { \n      if(strcmp(env_p2, \"client\") == 0 || cond) {\n         if(const char* env_p3 = std::getenv(\"TEST_DCIL\")) {\n            std::cerr << \"TEST_DCIL \" << env_p3 << \"\\n\";\n\t        res = atoi(env_p3);\n         } \n         else \n\t        res = 8;\n      } else \n\t  res = 8;\n    } else \n      res = 8;\n    std::cerr <<  \"dcid_size_cl size: \" <<  res << \"\\n\";\n    >>>",
            "{if _generating {local loc:tp {loc:tp := trans_params(the_cid); if version_negociated {assert fml:src = client_vn}\nelse {if ~disable_active_migration.is_set(loc:tp) {if ~migration_done | allowed_multiple_migration {assert fml:src = client.ep | fml:src = client_alt}\nelse {assert fml:src = client_alt}}\nelse {assert fml:src = client.ep}}; assert fml:dst = server.ep; if quic_packet.ptype(fml:pkt) = quic_packet_type.initial & retry_recv(quic_packet.src_cid(fml:pkt)) & ~zero_length_token {assert quic_packet.token(fml:pkt) = retry_token(quic_packet.src_cid(fml:pkt))}\nelse {assert stream_data.end(quic_packet.token(fml:pkt)) = 0}}}; if final_version = 0x00000000 {local loc:0 {call loc:0 := quic_packet.long(fml:pkt); assert loc:0 -> quic_packet.pversion(fml:pkt) = initial_version}}\nelse {local loc:0 {call loc:0 := quic_packet.long(fml:pkt); assert loc:0 -> quic_packet.pversion(fml:pkt) = final_version}}}",
            "<<<\n\t        `fml:s` = (`forged_protected_quic_packet.idx`) `fml:a`.size();\n\t    >>>",
            "assert 0:jdx_r <= fml:s",
            "<<<\n\t        if (0 <= `fml:x` && `fml:x` < (`idx_s`)`fml:a`.size()) \n\t            `fml:a`[`fml:x`] = `fml:y`;\n\t    >>>",
            "{}",
            "{assert fml:y < fml:x & (Y:forged_quic_packet_retry.idx < fml:x -> Y <= fml:y); assert forged_quic_packet_retry.idx.succ(fml:y,fml:x)}",
            "{}",
            "{}",
            "assert fml:s = arr_streamid_r.end(fml:a)",
            "<<<\n    res.resize(len);\n    for (unsigned i = 0; i < len; i++) {\n        res[len-i-1] = 0xff & (c.val >> (i * 8));\n    }\n    >>>",
            "{}",
            "http_request_file.pending(C) := false",
            "{}",
            "assert 0:vector[tls.compression_method].domain <= fml:x & fml:x < vector[tls.compression_method].end(fml:a)",
            "<<<\n\t    >>>",
            "{}",
            "<<<\n\t        unsigned __old_size = `fml:a`.size();\n\t        `fml:a`.resize(`fml:s`);\n\t        for (unsigned i = __old_size; i < (unsigned)`fml:s`; i++)\n\t            `fml:a`[i] = v;\n            >>>",
            "{}",
            "{assert fml:y < fml:x & (Y:frame.ack.range.idx < fml:x -> Y <= fml:y); assert frame.ack.range.idx.succ(fml:y,fml:x)}",
            "{}",
            "{}",
            "{assert connected(fml:dcid) & connected_to(fml:dcid) = fml:scid; assert fml:e = quic_packet_type.one_rtt & established_1rtt_keys(fml:scid); assert num_queued_frames(fml:scid) > 0 -> fml:e = queued_level(fml:scid); assert frame.retire_connection_id.seq_num(fml:f) <= max_seq_num(fml:dcid)}",
            "{}",
            "<<<\n\t    >>>",
            "{}",
            "<<<\n\t        `fml:a`.resize(`fml:s`);\n\t        for (unsigned i = 0; i < `fml:s`; i++)\n\t            `fml:a`[i] = y;\n\t    >>>",
            "fml:y := fml:x - 1",
            "{}",
            "<<<\n\t        if (0 <= `fml:x` && `fml:x` < (`forged_quic_packet_vn.idx`)`fml:a`.size()) \n\t            `fml:a`[`fml:x`] = `fml:y`;\n\t    >>>",
            "assert 0:forged_quic_packet.idx <= fml:x & fml:x < forged_quic_packet.retired_cids.end(fml:a)",
            "{}",
            "local loc:tp {loc:tp := trans_params(fml:dcid); fml:max := 0:stream_pos; if initial_max_data.is_set(loc:tp) {fml:max := initial_max_data.stream_pos_32(initial_max_data.value(loc:tp))}; if max_data_set(fml:dcid) {local loc:smax {loc:smax := max_data_val(fml:dcid); fml:max := (loc:smax if (loc:smax > fml:max) else fml:max)}}; fml:max := fml:max - conn_total_data(fml:dcid)}",
            "<<<\n\t        `fml:a`.resize(`fml:s`);\n\t        for (unsigned i = 0; i < `fml:s`; i++)\n\t            `fml:a`[i] = y;\n\t    >>>",
            "{path_challenge_pending(fml:scid,frame.path_response.data(fml:f)) := false; call enqueue_frame(fml:scid, fml:f, fml:e, true)}",
            "{}",
            "<<<\n                for (unsigned i = 0; i < `fml:a`.size()/2; i++) {\n                    std::swap(`fml:a`[i],`fml:a`[`fml:a`.size()-i-1]);\n                }\n            >>>",
            "{}",
            "{}",
            "{}",
            "assert fml:s = quic_packet_vn.arr.end(fml:a)",
            "{}",
            "assert ip_endpoints.end(fml:a) = fml:s & ip_endpoints.value(fml:a,X) = fml:y",
            "local loc:idx {loc:idx := vector[transport_parameter].begin(quic_transport_parameters.transport_parameters(fml:tps)); while loc:idx < vector[transport_parameter].end(quic_transport_parameters.transport_parameters(fml:tps))\n{if some self:unknown_transport_parameter. *>(vector[transport_parameter].value(quic_transport_parameters.transport_parameters(fml:tps),loc:idx),self:unknown_transport_parameter) {call trans_params(fml:scid) := unknown_transport_parameter.set(self:unknown_transport_parameter, trans_params(fml:scid))}\nelse {if some self:unknown_ignore. *>(vector[transport_parameter].value(quic_transport_parameters.transport_parameters(fml:tps),loc:idx),self:unknown_ignore) {call trans_params(fml:scid) := unknown_ignore.set(self:unknown_ignore, trans_params(fml:scid))}\nelse {if some self:version_information. *>(vector[transport_parameter].value(quic_transport_parameters.transport_parameters(fml:tps),loc:idx),self:version_information) {call trans_params(fml:scid) := version_information.set(self:version_information, trans_params(fml:scid))}\nelse {if some self:min_ack_delay. *>(vector[transport_parameter].value(quic_transport_parameters.transport_parameters(fml:tps),loc:idx),self:min_ack_delay) {call trans_params(fml:scid) := min_ack_delay.set(self:min_ack_delay, trans_params(fml:scid))}\nelse {if some self:enable_time_stamp. *>(vector[transport_parameter].value(quic_transport_parameters.transport_parameters(fml:tps),loc:idx),self:enable_time_stamp) {call trans_params(fml:scid) := enable_time_stamp.set(self:enable_time_stamp, trans_params(fml:scid))}\nelse {if some self:grease_quic_bit. *>(vector[transport_parameter].value(quic_transport_parameters.transport_parameters(fml:tps),loc:idx),self:grease_quic_bit) {call trans_params(fml:scid) := grease_quic_bit.set(self:grease_quic_bit, trans_params(fml:scid))}\nelse {if some self:loss_bits. *>(vector[transport_parameter].value(quic_transport_parameters.transport_parameters(fml:tps),loc:idx),self:loss_bits) {call trans_params(fml:scid) := loss_bits.set(self:loss_bits, trans_params(fml:scid))}\nelse {if some self:retry_source_connection_id. *>(vector[transport_parameter].value(quic_transport_parameters.transport_parameters(fml:tps),loc:idx),self:retry_source_connection_id) {call trans_params(fml:scid) := retry_source_connection_id.set(self:retry_source_connection_id, trans_params(fml:scid))}\nelse {if some self:initial_source_connection_id. *>(vector[transport_parameter].value(quic_transport_parameters.transport_parameters(fml:tps),loc:idx),self:initial_source_connection_id) {call trans_params(fml:scid) := initial_source_connection_id.set(self:initial_source_connection_id, trans_params(fml:scid))}\nelse {if some self:active_connection_id_limit. *>(vector[transport_parameter].value(quic_transport_parameters.transport_parameters(fml:tps),loc:idx),self:active_connection_id_limit) {call trans_params(fml:scid) := active_connection_id_limit.set(self:active_connection_id_limit, trans_params(fml:scid))}\nelse {if some self:max_ack_delay. *>(vector[transport_parameter].value(quic_transport_parameters.transport_parameters(fml:tps),loc:idx),self:max_ack_delay) {call trans_params(fml:scid) := max_ack_delay.set(self:max_ack_delay, trans_params(fml:scid))}\nelse {if some self:initial_max_stream_data_uni. *>(vector[transport_parameter].value(quic_transport_parameters.transport_parameters(fml:tps),loc:idx),self:initial_max_stream_data_uni) {call trans_params(fml:scid) := initial_max_stream_data_uni.set(self:initial_max_stream_data_uni, trans_params(fml:scid))}\nelse {if some self:initial_max_stream_data_bidi_remote. *>(vector[transport_parameter].value(quic_transport_parameters.transport_parameters(fml:tps),loc:idx),self:initial_max_stream_data_bidi_remote) {call trans_params(fml:scid) := initial_max_stream_data_bidi_remote.set(self:initial_max_stream_data_bidi_remote, trans_params(fml:scid))}\nelse {if some self:disable_active_migration. *>(vector[transport_parameter].value(quic_transport_parameters.transport_parameters(fml:tps),loc:idx),self:disable_active_migration) {call trans_params(fml:scid) := disable_active_migration.set(self:disable_active_migration, trans_params(fml:scid))}\nelse {if some self:initial_max_stream_id_uni. *>(vector[transport_parameter].value(quic_transport_parameters.transport_parameters(fml:tps),loc:idx),self:initial_max_stream_id_uni) {call trans_params(fml:scid) := initial_max_stream_id_uni.set(self:initial_max_stream_id_uni, trans_params(fml:scid))}\nelse {if some self:ack_delay_exponent. *>(vector[transport_parameter].value(quic_transport_parameters.transport_parameters(fml:tps),loc:idx),self:ack_delay_exponent) {call trans_params(fml:scid) := ack_delay_exponent.set(self:ack_delay_exponent, trans_params(fml:scid))}\nelse {if some self:stateless_reset_token. *>(vector[transport_parameter].value(quic_transport_parameters.transport_parameters(fml:tps),loc:idx),self:stateless_reset_token) {call trans_params(fml:scid) := stateless_reset_token.set(self:stateless_reset_token, trans_params(fml:scid))}\nelse {if some self:max_packet_size. *>(vector[transport_parameter].value(quic_transport_parameters.transport_parameters(fml:tps),loc:idx),self:max_packet_size) {call trans_params(fml:scid) := max_packet_size.set(self:max_packet_size, trans_params(fml:scid))}\nelse {if some self:preferred_address. *>(vector[transport_parameter].value(quic_transport_parameters.transport_parameters(fml:tps),loc:idx),self:preferred_address) {call trans_params(fml:scid) := preferred_address.set(self:preferred_address, trans_params(fml:scid))}\nelse {if some self:max_idle_timeout. *>(vector[transport_parameter].value(quic_transport_parameters.transport_parameters(fml:tps),loc:idx),self:max_idle_timeout) {call trans_params(fml:scid) := max_idle_timeout.set(self:max_idle_timeout, trans_params(fml:scid))}\nelse {if some self:initial_max_stream_id_bidi. *>(vector[transport_parameter].value(quic_transport_parameters.transport_parameters(fml:tps),loc:idx),self:initial_max_stream_id_bidi) {call trans_params(fml:scid) := initial_max_stream_id_bidi.set(self:initial_max_stream_id_bidi, trans_params(fml:scid))}\nelse {if some self:initial_max_data. *>(vector[transport_parameter].value(quic_transport_parameters.transport_parameters(fml:tps),loc:idx),self:initial_max_data) {call trans_params(fml:scid) := initial_max_data.set(self:initial_max_data, trans_params(fml:scid))}\nelse {if some self:initial_max_stream_data_bidi_local. *>(vector[transport_parameter].value(quic_transport_parameters.transport_parameters(fml:tps),loc:idx),self:initial_max_stream_data_bidi_local) {call trans_params(fml:scid) := initial_max_stream_data_bidi_local.set(self:initial_max_stream_data_bidi_local, trans_params(fml:scid))}\nelse {if some self:original_destination_connection_id. *>(vector[transport_parameter].value(quic_transport_parameters.transport_parameters(fml:tps),loc:idx),self:original_destination_connection_id) {call trans_params(fml:scid) := original_destination_connection_id.set(self:original_destination_connection_id, trans_params(fml:scid))}\nelse {call trans_params(fml:scid) := transport_parameter.set(vector[transport_parameter].value(quic_transport_parameters.transport_parameters(fml:tps),loc:idx), trans_params(fml:scid))}}}}}}}}}}}}}}}}}}}}}}}}; call loc:idx := vector[transport_parameter].domain.next(loc:idx)}; if ~_generating {if client_non_zero_scil & fml:scid ~= 1 & (client_initial_version = 0x00000001 | client_initial_version = 0x00000001) {assert initial_source_connection_id.is_set(trans_params(fml:scid))}}; if fml:is_client_hello {assert ~stateless_reset_token.is_set(trans_params(fml:scid))}\nelse {if ~_generating & fml:scid ~= 1 {assert original_destination_connection_id.is_set(trans_params(fml:scid))}}; if ~fml:is_client_hello & (retry_recv(client_initial_rcid) | retry_sent(client_initial_rcid)) & ~zero_length_token {assert retry_source_connection_id.is_set(trans_params(fml:scid)); assert retry_source_connection_id.rcid(retry_source_connection_id.value(trans_params(fml:scid))) = client_initial_rcid}; if min_ack_delay.is_set(trans_params(fml:scid)) & max_ack_delay.is_set(trans_params(fml:scid)) {local loc:min_ack_milli {loc:min_ack_milli := min_ack_delay.exponent_8(min_ack_delay.value(trans_params(fml:scid))) * 1000; assert loc:min_ack_milli < max_ack_delay.exponent_8(max_ack_delay.value(trans_params(fml:scid)))}}; if zero_rtt_server_test & ~fml:is_client_hello {if initial_max_stream_data_uni.is_set(trans_params(fml:scid)) {assert initial_max_stream_data_uni.stream_pos_32(initial_max_stream_data_uni.value(trans_params(fml:scid))) >= initial_max_stream_data_uni_server_0rtt}; if initial_max_stream_data_bidi_remote.is_set(trans_params(fml:scid)) {assert initial_max_stream_data_bidi_remote.stream_pos_32(initial_max_stream_data_bidi_remote.value(trans_params(fml:scid))) >= initial_max_stream_data_bidi_remote_server_0rtt}; if initial_max_data.is_set(trans_params(fml:scid)) {assert initial_max_data.stream_pos_32(initial_max_data.value(trans_params(fml:scid))) >= initial_max_data_server_0rtt}; if initial_max_stream_data_bidi_local.is_set(trans_params(fml:scid)) {assert initial_max_stream_data_bidi_local.stream_pos_32(initial_max_stream_data_bidi_local.value(trans_params(fml:scid))) >= initial_max_stream_data_bidi_local_server_0rtt}; if initial_max_stream_id_bidi.is_set(trans_params(fml:scid)) {assert initial_max_stream_id_bidi.stream_id_16(initial_max_stream_id_bidi.value(trans_params(fml:scid))) >= initial_max_stream_id_bidi_server_0rtt}; if active_connection_id_limit.is_set(trans_params(fml:scid)) {assert active_connection_id_limit.stream_pos_32(active_connection_id_limit.value(trans_params(fml:scid))) >= active_connection_id_limit_server_0rtt}}; if ~fml:is_client_hello {if initial_max_stream_data_uni.is_set(trans_params(fml:scid)) {call tls_api.upper.save_initial_max_stream_data_uni(initial_max_stream_data_uni.stream_pos_32(initial_max_stream_data_uni.value(trans_params(fml:scid))))}; if initial_max_stream_data_bidi_remote.is_set(trans_params(fml:scid)) {call tls_api.upper.save_initial_max_stream_data_bidi_remote(initial_max_stream_data_bidi_remote.stream_pos_32(initial_max_stream_data_bidi_remote.value(trans_params(fml:scid))))}; if initial_max_data.is_set(trans_params(fml:scid)) {call tls_api.upper.save_initial_max_data(initial_max_data.stream_pos_32(initial_max_data.value(trans_params(fml:scid))))}; if initial_max_stream_data_bidi_local.is_set(trans_params(fml:scid)) {call tls_api.upper.save_initial_max_stream_data_bidi_local(initial_max_stream_data_bidi_local.stream_pos_32(initial_max_stream_data_bidi_local.value(trans_params(fml:scid))))}; if initial_max_stream_id_bidi.is_set(trans_params(fml:scid)) {call tls_api.upper.save_initial_max_stream_id_bidi(initial_max_stream_id_bidi.stream_id_16(initial_max_stream_id_bidi.value(trans_params(fml:scid))))}; if active_connection_id_limit.is_set(trans_params(fml:scid)) {call tls_api.upper.save_active_connection_id_limit(active_connection_id_limit.stream_pos_32(active_connection_id_limit.value(trans_params(fml:scid))))}}}",
            "{}",
            "assert 0:idx_r <= fml:s",
            "assert 0:vector[tls.psk_identity].domain <= fml:s",
            "assert 0:index <= fml:s",
            "fml:y := fml:x - 1",
            "{}",
            "<<<\n\t        if (`fml:a`.size() > 0) {\n\t            a.pop_back();\n\t        }\n            >>>",
            "<<<\n\t    >>>",
            "{assert connected(fml:dcid) & connected_to(fml:dcid) = fml:scid; assert fml:e = quic_packet_type.one_rtt & established_1rtt_keys(fml:scid); assert num_queued_frames(fml:scid) > 0 -> fml:e = queued_level(fml:scid); assert connected(fml:scid) & connected_to(fml:scid) = fml:dcid; assert ~conn_closed(fml:scid); local loc:kind {loc:kind := bidir; if ~(max_stream_set(fml:dcid,loc:kind) & frame.max_streams_bidi.id(fml:f) < max_stream(fml:dcid,loc:kind)) {max_stream_set(fml:dcid,loc:kind) := true; max_stream(fml:dcid,loc:kind) := frame.max_streams_bidi.id(fml:f)}}}",
            "{assert forged_pkts.end(fml:pkt) > 0; assert mim_agent.nat_configured; assert fml:src ~= fml:dst; assert ~(fml:src = mim_agent.ep_out & fml:dst = mim_agent.ep_in); assert ~(fml:dst = mim_agent.ep_out & fml:src = mim_agent.ep_in); assert ~packed_forwarded_arr(fml:pkt)}",
            "{}",
            "{assert replayed_quic_packet_0rtt.arr.end(fml:a) = fml:s; assert 0:replayed_quic_packet_0rtt.idx <= X & X < replayed_quic_packet_0rtt.arr.end(old_fml:a) -> replayed_quic_packet_0rtt.arr.value(fml:a,X) = replayed_quic_packet_0rtt.arr.value(old_fml:a,X); assert replayed_quic_packet_0rtt.arr.end(old_fml:a) <= X & X < fml:s -> replayed_quic_packet_0rtt.arr.value(fml:a,X) = fml:v}",
            "{}",
            "{call queued_frames(fml:scid) := frame.arr.append(queued_frames(fml:scid), fml:f); num_queued_frames(fml:scid) := frame.arr.end(queued_frames(fml:scid)); queued_level(fml:scid) := fml:e; if ~fml:probing {queued_non_probing(fml:scid) := true}; if ~(exists V. *>(fml:f,V:frame.ack)) {queued_non_ack(fml:scid) := true}; if exists V. *>(fml:f,V:frame.path_challenge) {queued_challenge(fml:scid) := true}; if (exists V. *>(fml:f,V:frame.connection_close)) | (exists V. *>(fml:f,V)) {queued_close(fml:scid) := true}; if ~(exists V. *>(fml:f,V:frame.ack)) & ~(exists V. *>(fml:f,V)) {queued_ack_eliciting(fml:scid) := true}}",
            "<<<\n\t        `fml:a`.push_back(`fml:v`);\n            >>>",
            "<<<\n                for (unsigned i = 0; i < `fml:b`.size(); i++)\n\t            `fml:a`.push_back(`fml:b`[i]);\n            >>>",
            "assert forged_quic_packet_vn.arr.end(fml:a) = 0",
            "{}",
            "{}",
            "assert fml:s = forged_quic_packet.retired_cids.end(fml:a)",
            "<<<\n\t        if (`fml:a`.size() > 0) {\n\t            a.pop_back();\n\t        }\n            >>>",
            "{}",
            "assert 0:stream_pos <= fml:x & fml:x < stream_data.end(fml:a)",
            "{}",
            "assert forged_quic_packet.arr.end(fml:a) = fml:s & forged_quic_packet.arr.value(fml:a,X) = fml:y",
            "{second_server.enc_level := quic_packet_type.initial; ip.endpoint.protocol(second_server.ep) := ip.udp; ip.endpoint.addr(second_server.ep) := server_addr; ip.endpoint.port(second_server.ep) := server_port_alt; if ip.endpoint.addr(second_server.ep) = 0x7f000001 | is_mim {ip.endpoint.interface(second_server.ep) := ip.lo}\nelse {ip.endpoint.interface(second_server.ep) := ip.ivy}}",
            "local loc:dcid {loc:dcid := forged_quic_packet_vn.dst_cid(fml:pkt); local loc:scid {loc:scid := forged_quic_packet_vn.src_cid(fml:pkt); if cid_mapped(loc:dcid) {loc:dcid := cid_to_aid(loc:dcid)}}}",
            "<<<\n                for (unsigned i = 0; i < `fml:a`.size()/2; i++) {\n                    std::swap(`fml:a`[i],`fml:a`[`fml:a`.size()-i-1]);\n                }\n            >>>",
            "assert 0:quic_packet.idx <= fml:s",
            "assert quic_packet_retry.arr.end(fml:a) = 0",
            "assert arr_pkt_num_r.end(fml:a) = 0",
            "{call supported_versions := versions.empty; local loc:0 {call loc:0 := stream_data.empty; local loc:v1 {loc:v1 := loc:0; call supported_versions_bv := versions_bv.empty; if iversion = 1 {call loc:v1 := stream_data.append(loc:v1, 0x0:byte); call loc:v1 := stream_data.append(loc:v1, 0x0:byte); call loc:v1 := stream_data.append(loc:v1, 0x0:byte); call loc:v1 := stream_data.append(loc:v1, 0x01:byte); call supported_versions_bv := versions_bv.append(supported_versions_bv, 0x00000001:version); initial_version := 0x00000001:version}\nelse {if iversion = 34 {call loc:v1 := stream_data.append(loc:v1, 0xff:byte); call loc:v1 := stream_data.append(loc:v1, 0x0:byte); call loc:v1 := stream_data.append(loc:v1, 0x0:byte); call loc:v1 := stream_data.append(loc:v1, 0x22:byte); call supported_versions_bv := versions_bv.append(supported_versions_bv, 0xff000022:version); initial_version := 0xff000022:version}\nelse {if iversion = 29 {call loc:v1 := stream_data.append(loc:v1, 0xff:byte); call loc:v1 := stream_data.append(loc:v1, 0x0:byte); call loc:v1 := stream_data.append(loc:v1, 0x0:byte); call loc:v1 := stream_data.append(loc:v1, 0x1d:byte); call supported_versions_bv := versions_bv.append(supported_versions_bv, 0xff00001d:version); initial_version := 0xff00001d:version}\nelse {if iversion = 28 {call loc:v1 := stream_data.append(loc:v1, 0xff:byte); call loc:v1 := stream_data.append(loc:v1, 0x0:byte); call loc:v1 := stream_data.append(loc:v1, 0x0:byte); call loc:v1 := stream_data.append(loc:v1, 0x1c:byte); call supported_versions_bv := versions_bv.append(supported_versions_bv, 0xff00001c:version); initial_version := 0xff00001c:version}\nelse {if iversion = 27 {call loc:v1 := stream_data.append(loc:v1, 0xff:byte); call loc:v1 := stream_data.append(loc:v1, 0x0:byte); call loc:v1 := stream_data.append(loc:v1, 0x0:byte); call loc:v1 := stream_data.append(loc:v1, 0x1b:byte); call supported_versions_bv := versions_bv.append(supported_versions_bv, 0xff00001b:version); initial_version := 0xff00001b:version}}}}}; call supported_versions := versions.append(supported_versions, loc:v1); final_version := 0x0000000:version; version_not_found(E) := false}}}",
            "if fml:e = quic_packet_type.initial & ~zero_rtt_allowed {fml:e := quic_packet_type.handshake}\nelse {if fml:e = quic_packet_type.initial & zero_rtt_allowed {fml:e := quic_packet_type.zero_rtt}\nelse {if fml:e = quic_packet_type.zero_rtt {fml:e := quic_packet_type.handshake}\nelse {fml:e := quic_packet_type.one_rtt}}}",
            "{}",
            "{}",
            "{}",
            "<<<\n                for (unsigned i = 0; i < `fml:a`.size()/2; i++) {\n                    std::swap(`fml:a`[i],`fml:a`[`fml:a`.size()-i-1]);\n                }\n            >>>",
            "{}",
            "{}",
            "<<<\n                for (unsigned i = 0; i < `fml:a`.size()/2; i++) {\n                    std::swap(`fml:a`[i],`fml:a`[`fml:a`.size()-i-1]);\n                }\n            >>>",
            "{fake_client.enc_level := quic_packet_type.initial; ip.endpoint.protocol(fake_client.ep) := ip.udp; ip.endpoint.addr(fake_client.ep) := 0:ip.addr; ip.endpoint.port(fake_client.ep) := 0:ip.port; if ip.endpoint.addr(fake_client.ep) = 0x7f000001 | is_mim {ip.endpoint.interface(fake_client.ep) := ip.lo}\nelse {ip.endpoint.interface(fake_client.ep) := ip.ivy}}",
            "assert fml:s = vector[tls.cipher_suite].end(fml:a)",
            "{}"
        ],
        "labeled_conjs": [
            {
                "definition": false,
                "assumed": false,
                "temporal": null,
                "args": "(tls_api.upper.invar397, Implies(Apply(Const('tls_api.upper.established', FunctionSort(UninterpretedSort('tls_api.id',), BooleanSort())), Var('C', UninterpretedSort('tls_api.id',))), Apply(Const('tls_api.upper.open', FunctionSort(UninterpretedSort('tls_api.id',), BooleanSort())), Var('C', UninterpretedSort('tls_api.id',)))))",
                "explicit": false,
                "lineno": {},
                "id": 1054
            }
        ],
        "before_export": [],
        "labeled_axioms": [],
        "assertions": [],
        "conj_actions": [
            "set(['frame.path_response.handle', '_finalize', 'frame.crypto.handle', 'tls_recv_event', 'frame.ack.handle', 'packet_event', 'client_send_event', 'frame.connection_close.handle', 'frame.stream.handle'])"
        ],
        "assumed_invariants": [],
        "proofs": [],
        "labeled_inits": [],
        "aliases": [
            "frame.arr",
            "vector[tls.handshake]",
            "quic_packet_retry.retired_cids",
            "vector[tls.cipher_suite].domain",
            "prot.idx",
            "forged_protected_quic_packet.idx",
            "forged_quic_packet_vn.arr",
            "vector[tls.compression_method].domain",
            "vector[tls.extension]",
            "tls_extensions.domain",
            "jdx_r",
            "quic_packet_vn.arr",
            "tls_hand_extensions.domain",
            "forged_protected_quic_packet.arr",
            "replayed_quic_packet_0rtt.retired_cids",
            "jdx_s",
            "forged_quic_packet_vn.idx",
            "quic_packet_coal_0rtt.arr",
            "tls_api.id",
            "arr_streamid_s",
            "quic_packet.retired_cids",
            "quic_packet.arr",
            "forged_quic_packet_retry.arr",
            "frame.ack_ecn.range.idx",
            "tls_hand_extensions",
            "forged_protected_quic_packet.retired_cids",
            "frame.ack.range.arr",
            "tls.handshakes.domain",
            "versions_bv",
            "servers.server.arr",
            "vector[tls.compression_method]",
            "vector[tls.extension].domain",
            "quic_packet_0rtt.retired_cids",
            "quic_packet_0rtt.idx",
            "arr_pkt_num_s",
            "tls_extensions",
            "index",
            "clients.client.idx",
            "forged_pkts",
            "cids",
            "quic_packet_0rtt.arr",
            "arr_pkt_num_r",
            "quic_packet_vn.idx",
            "prot.arr",
            "forged_quic_packet.idx",
            "quic_packet_coal_0rtt.retired_cids",
            "replayed_quic_packet_0rtt.arr",
            "forged_quic_packet_retry.idx",
            "quic_packet_retry.idx",
            "vector[transport_parameter]",
            "bytes",
            "replayed_quic_packet_0rtt.idx",
            "vector[tls.cipher_suite]",
            "stream_pos",
            "versions",
            "quic_packet_retry.arr",
            "quic_packet.idx",
            "forged_quic_packet.arr",
            "clients.client.arr",
            "forged_quic_packet.retired_cids",
            "stream_data",
            "arr_streamid_r",
            "idx_s",
            "tls.handshakes",
            "frame.idx",
            "idx_r",
            "vector[tls.psk_identity].domain",
            "frame.ack_ecn.range.arr",
            "vector[transport_parameter].domain",
            "idx",
            "vector[tls.handshake].domain",
            "ip_endpoints",
            "forged_quic_packet_retry.retired_cids",
            "cid",
            "quic_packet_coal_0rtt.idx",
            "vector[tls.psk_identity]",
            "servers.server.idx",
            "frame.ack.range.idx"
        ],
        "privates": [],
        "functions": [
            1,
            0,
            0,
            1,
            1,
            2,
            0,
            1,
            0,
            1,
            1,
            0,
            1,
            0,
            3,
            1,
            1,
            2,
            0,
            1,
            1,
            0,
            1,
            2,
            1,
            1,
            0,
            1,
            2,
            2,
            1,
            1,
            0,
            1,
            1,
            1,
            1,
            0,
            0,
            1,
            1,
            1,
            2,
            1,
            2,
            1,
            1,
            1,
            0,
            0,
            2,
            2,
            1,
            1,
            1,
            0,
            0,
            1,
            2,
            1,
            1,
            1,
            1,
            1,
            1,
            1,
            3,
            1,
            1,
            1,
            1,
            1,
            1,
            1,
            1,
            0,
            1,
            0,
            0,
            2,
            1,
            0,
            1,
            0,
            1,
            1,
            1,
            0,
            1,
            2,
            1,
            0,
            1,
            3,
            3,
            0,
            1,
            3,
            1,
            1,
            1,
            1,
            1,
            1,
            0,
            1,
            0,
            1,
            1,
            1,
            1,
            0,
            0,
            3,
            1,
            2,
            1,
            0,
            1,
            2,
            2,
            1,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            1,
            1,
            1,
            0,
            1,
            1,
            2,
            2,
            1,
            1,
            0,
            1,
            2,
            3,
            1,
            1,
            1,
            1,
            0,
            2,
            1,
            0,
            2,
            0,
            2,
            0,
            2,
            1,
            0,
            0,
            2,
            1,
            0,
            3,
            3,
            2,
            1,
            1,
            1,
            2,
            1,
            0,
            1,
            1,
            1,
            0,
            0,
            1,
            2,
            1,
            1,
            1,
            3,
            1,
            1,
            2,
            1,
            1,
            1,
            1,
            1,
            2,
            1,
            1,
            1,
            3,
            2,
            1,
            0,
            1,
            2,
            0,
            4,
            1,
            2,
            2,
            2,
            0,
            1,
            2,
            1,
            3,
            0,
            1,
            1,
            1,
            1,
            1,
            1,
            0,
            0,
            1,
            0,
            0,
            1,
            3,
            1,
            1,
            1,
            0,
            1,
            1,
            3,
            1,
            1,
            1,
            0,
            0,
            1,
            1,
            3,
            2,
            2,
            0,
            1,
            1,
            1,
            0,
            0,
            1,
            1,
            3,
            1,
            1,
            3,
            1,
            3,
            0,
            1,
            1,
            1,
            3,
            1,
            3,
            2,
            1,
            0,
            0,
            1,
            1,
            0,
            1,
            0,
            0,
            0,
            1,
            1,
            0,
            3,
            1,
            1,
            2,
            0,
            3,
            3,
            1,
            0,
            1,
            2,
            1,
            0,
            1,
            3,
            3,
            1,
            1,
            0,
            1,
            1,
            1,
            1,
            1,
            1,
            0,
            2,
            0,
            1,
            1,
            1,
            1,
            1,
            0,
            1,
            0,
            2,
            1,
            0,
            1,
            1,
            1,
            0,
            0,
            0,
            0,
            1,
            3,
            1,
            3,
            1,
            1,
            2,
            0,
            0,
            2,
            0,
            1,
            0,
            0,
            1,
            2,
            1,
            1,
            1,
            1,
            1,
            0,
            1,
            1,
            1,
            1,
            1,
            0,
            1,
            1,
            1,
            0,
            1,
            1,
            2,
            1,
            2,
            0,
            3,
            0,
            1,
            2,
            1,
            1,
            2,
            0,
            0,
            2,
            1,
            1,
            1,
            2,
            1,
            0,
            0,
            1,
            1,
            0,
            0,
            0,
            1,
            0,
            1,
            1,
            0,
            1,
            0,
            0,
            1,
            0,
            0,
            1,
            1,
            2,
            1,
            3,
            1,
            0,
            2,
            1,
            1,
            1,
            2,
            0,
            0,
            1,
            1,
            2,
            0,
            2,
            1,
            1,
            1,
            0,
            2,
            0,
            1,
            0,
            1,
            1,
            1,
            1,
            0,
            2,
            3,
            1,
            2,
            1,
            1,
            1,
            1,
            0,
            2,
            2,
            1,
            1,
            1,
            1,
            1,
            0,
            0,
            1,
            0,
            0,
            0,
            1,
            1,
            1,
            1,
            0,
            1,
            1,
            1,
            2,
            0,
            1,
            2,
            0,
            0,
            1,
            1,
            1,
            0,
            0,
            2,
            1,
            1,
            2,
            0,
            1,
            0,
            1,
            2,
            3,
            2,
            1,
            2,
            1,
            1,
            1,
            1,
            3,
            1,
            2,
            2,
            0,
            1,
            1,
            1,
            2,
            1,
            1,
            1,
            1,
            1,
            1,
            0,
            1,
            0,
            2,
            0,
            0,
            3,
            1,
            1,
            1,
            0,
            0,
            1,
            1,
            2,
            1,
            1,
            1,
            1,
            1,
            0,
            1,
            1,
            1,
            0,
            0,
            0,
            1,
            0,
            0,
            2,
            1,
            1,
            3,
            1,
            1,
            1,
            1,
            1,
            3,
            0,
            1,
            1,
            1,
            0,
            1,
            3,
            1,
            1,
            1,
            2,
            1,
            1,
            1,
            1,
            1,
            1,
            0,
            0,
            1,
            2,
            1,
            1,
            3,
            0,
            1,
            1,
            0,
            2,
            1,
            1,
            1,
            2,
            2,
            0,
            1,
            1,
            1,
            1,
            1,
            0,
            1,
            1,
            0,
            3,
            0,
            1,
            0,
            1,
            2,
            1,
            1,
            1,
            1,
            1,
            2,
            0,
            0,
            0,
            1,
            1,
            0,
            1,
            1,
            0,
            1,
            0,
            0,
            2,
            0,
            1,
            1,
            0,
            3,
            0,
            1,
            1,
            1,
            2,
            1,
            1,
            0,
            1,
            0,
            2,
            1,
            3,
            3,
            1,
            3,
            1,
            1,
            0,
            3,
            1,
            2,
            1,
            1,
            0,
            0,
            1,
            1,
            1,
            1,
            1,
            1,
            0,
            2,
            0,
            1,
            1,
            1,
            1,
            1,
            1,
            0,
            0,
            0,
            0,
            1,
            1,
            1,
            0,
            1,
            0,
            1,
            1,
            1,
            1,
            0,
            1,
            1,
            1,
            1,
            0,
            1,
            1,
            0,
            1,
            1,
            1,
            2,
            1,
            1,
            1,
            1,
            1,
            1,
            3,
            1,
            2,
            0,
            1,
            1,
            2,
            2,
            3,
            1,
            1,
            1,
            1,
            0,
            0,
            2,
            0,
            1,
            1,
            0,
            1,
            1,
            1,
            1,
            0,
            1,
            0,
            2,
            0,
            1,
            2,
            0,
            0,
            1,
            1,
            1,
            0,
            1,
            1,
            1,
            3,
            1,
            1,
            1,
            1,
            0,
            1,
            0,
            5,
            2,
            2,
            0,
            0,
            0,
            1,
            2,
            3,
            1,
            0,
            3,
            3,
            1,
            0,
            1,
            1,
            2,
            1,
            0,
            1,
            2,
            1,
            1,
            2,
            3,
            1,
            1,
            1,
            1,
            0,
            0,
            0,
            2,
            0,
            1,
            1,
            1,
            1,
            1,
            1,
            1,
            2,
            0,
            1,
            1,
            0,
            2,
            2,
            1,
            1,
            2,
            0
        ],
        "labeled_props": [
            {
                "definition": false,
                "assumed": false,
                "temporal": null,
                "args": "(idx.spec.prop2, Implies(Apply(Const('idx.succ', FunctionSort(UninterpretedSort('idx',), UninterpretedSort('idx',), BooleanSort())), Var('X', UninterpretedSort('idx',)), Var('Z', UninterpretedSort('idx',))), And(Apply(Const('<', FunctionSort(UninterpretedSort('idx',), UninterpretedSort('idx',), BooleanSort())), Var('X', UninterpretedSort('idx',)), Var('Z', UninterpretedSort('idx',))), Not(And(Apply(Const('<', FunctionSort(UninterpretedSort('idx',), UninterpretedSort('idx',), BooleanSort())), Var('X', UninterpretedSort('idx',)), Var('Y', UninterpretedSort('idx',))), Apply(Const('<', FunctionSort(UninterpretedSort('idx',), UninterpretedSort('idx',), BooleanSort())), Var('Y', UninterpretedSort('idx',)), Var('Z', UninterpretedSort('idx',)))),))))",
                "explicit": false,
                "lineno": {},
                "id": 295
            },
            {
                "definition": false,
                "assumed": false,
                "temporal": null,
                "args": "(idx.spec.transitivity, Implies(And(Apply(Const('<', FunctionSort(UninterpretedSort('idx',), UninterpretedSort('idx',), BooleanSort())), Var('T', UninterpretedSort('idx',)), Var('U', UninterpretedSort('idx',))), Apply(Const('<', FunctionSort(UninterpretedSort('idx',), UninterpretedSort('idx',), BooleanSort())), Var('U', UninterpretedSort('idx',)), Var('V', UninterpretedSort('idx',)))), Apply(Const('<', FunctionSort(UninterpretedSort('idx',), UninterpretedSort('idx',), BooleanSort())), Var('T', UninterpretedSort('idx',)), Var('V', UninterpretedSort('idx',)))))",
                "explicit": false,
                "lineno": {},
                "id": 296
            },
            {
                "definition": false,
                "assumed": false,
                "temporal": null,
                "args": "(idx.spec.antisymmetry, Not(And(Apply(Const('<', FunctionSort(UninterpretedSort('idx',), UninterpretedSort('idx',), BooleanSort())), Var('T', UninterpretedSort('idx',)), Var('U', UninterpretedSort('idx',))), Apply(Const('<', FunctionSort(UninterpretedSort('idx',), UninterpretedSort('idx',), BooleanSort())), Var('U', UninterpretedSort('idx',)), Var('T', UninterpretedSort('idx',)))),))",
                "explicit": false,
                "lineno": {},
                "id": 297
            },
            {
                "definition": false,
                "assumed": false,
                "temporal": null,
                "args": "(idx.spec.totality, Or(Apply(Const('<', FunctionSort(UninterpretedSort('idx',), UninterpretedSort('idx',), BooleanSort())), Var('T', UninterpretedSort('idx',)), Var('U', UninterpretedSort('idx',))), Eq(Var('T', UninterpretedSort('idx',)), Var('U', UninterpretedSort('idx',))), Apply(Const('<', FunctionSort(UninterpretedSort('idx',), UninterpretedSort('idx',), BooleanSort())), Var('U', UninterpretedSort('idx',)), Var('T', UninterpretedSort('idx',)))))",
                "explicit": false,
                "lineno": {},
                "id": 298
            },
            {
                "definition": false,
                "assumed": false,
                "temporal": null,
                "args": "(idx.spec.prop1, Apply(Const('<=', FunctionSort(UninterpretedSort('idx',), UninterpretedSort('idx',), BooleanSort())), Const('0', UninterpretedSort('idx',)), Var('X', UninterpretedSort('idx',))))",
                "explicit": false,
                "lineno": {},
                "id": 299
            },
            {
                "definition": false,
                "assumed": false,
                "temporal": null,
                "args": "(bytes.spec.prop103, Apply(Const('>=', FunctionSort(UninterpretedSort('idx',), UninterpretedSort('idx',), BooleanSort())), Apply(Const('bytes.end', FunctionSort(UninterpretedSort('bytes',), UninterpretedSort('idx',))), Var('X', UninterpretedSort('bytes',))), Const('0', UninterpretedSort('idx',))))",
                "explicit": false,
                "lineno": {},
                "id": 303
            },
            {
                "definition": false,
                "assumed": false,
                "temporal": null,
                "args": "(bytes.spec.extensionality._a, Implies(And(And(Eq(Apply(Const('bytes.end', FunctionSort(UninterpretedSort('bytes',), UninterpretedSort('idx',))), Var('X', UninterpretedSort('bytes',))), Apply(Const('bytes.end', FunctionSort(UninterpretedSort('bytes',), UninterpretedSort('idx',))), Var('Y', UninterpretedSort('bytes',)))), ForAll(frozenset([Var('I', UninterpretedSort('idx',))]), Implies(And(Apply(Const('<=', FunctionSort(UninterpretedSort('idx',), UninterpretedSort('idx',), BooleanSort())), Const('0', UninterpretedSort('idx',)), Var('I', UninterpretedSort('idx',))), Apply(Const('<', FunctionSort(UninterpretedSort('idx',), UninterpretedSort('idx',), BooleanSort())), Var('I', UninterpretedSort('idx',)), Apply(Const('bytes.end', FunctionSort(UninterpretedSort('bytes',), UninterpretedSort('idx',))), Var('X', UninterpretedSort('bytes',))))), Eq(Apply(Const('bytes.value', FunctionSort(UninterpretedSort('bytes',), UninterpretedSort('idx',), UninterpretedSort('byte',))), Var('X', UninterpretedSort('bytes',)), Var('I', UninterpretedSort('idx',))), Apply(Const('bytes.value', FunctionSort(UninterpretedSort('bytes',), UninterpretedSort('idx',), UninterpretedSort('byte',))), Var('Y', UninterpretedSort('bytes',)), Var('I', UninterpretedSort('idx',))))))),), Eq(Var('X', UninterpretedSort('bytes',)), Var('Y', UninterpretedSort('bytes',)))))",
                "explicit": false,
                "lineno": {},
                "id": 2873
            },
            {
                "definition": false,
                "assumed": false,
                "temporal": null,
                "args": "(stream_pos.spec.prop2, Implies(Apply(Const('stream_pos.succ', FunctionSort(UninterpretedSort('stream_pos',), UninterpretedSort('stream_pos',), BooleanSort())), Var('X', UninterpretedSort('stream_pos',)), Var('Z', UninterpretedSort('stream_pos',))), And(Apply(Const('<', FunctionSort(UninterpretedSort('stream_pos',), UninterpretedSort('stream_pos',), BooleanSort())), Var('X', UninterpretedSort('stream_pos',)), Var('Z', UninterpretedSort('stream_pos',))), Not(And(Apply(Const('<', FunctionSort(UninterpretedSort('stream_pos',), UninterpretedSort('stream_pos',), BooleanSort())), Var('X', UninterpretedSort('stream_pos',)), Var('Y', UninterpretedSort('stream_pos',))), Apply(Const('<', FunctionSort(UninterpretedSort('stream_pos',), UninterpretedSort('stream_pos',), BooleanSort())), Var('Y', UninterpretedSort('stream_pos',)), Var('Z', UninterpretedSort('stream_pos',)))),))))",
                "explicit": false,
                "lineno": {},
                "id": 311
            },
            {
                "definition": false,
                "assumed": false,
                "temporal": null,
                "args": "(stream_pos.spec.transitivity, Implies(And(Apply(Const('<', FunctionSort(UninterpretedSort('stream_pos',), UninterpretedSort('stream_pos',), BooleanSort())), Var('T', UninterpretedSort('stream_pos',)), Var('U', UninterpretedSort('stream_pos',))), Apply(Const('<', FunctionSort(UninterpretedSort('stream_pos',), UninterpretedSort('stream_pos',), BooleanSort())), Var('U', UninterpretedSort('stream_pos',)), Var('V', UninterpretedSort('stream_pos',)))), Apply(Const('<', FunctionSort(UninterpretedSort('stream_pos',), UninterpretedSort('stream_pos',), BooleanSort())), Var('T', UninterpretedSort('stream_pos',)), Var('V', UninterpretedSort('stream_pos',)))))",
                "explicit": false,
                "lineno": {},
                "id": 312
            },
            {
                "definition": false,
                "assumed": false,
                "temporal": null,
                "args": "(stream_pos.spec.antisymmetry, Not(And(Apply(Const('<', FunctionSort(UninterpretedSort('stream_pos',), UninterpretedSort('stream_pos',), BooleanSort())), Var('T', UninterpretedSort('stream_pos',)), Var('U', UninterpretedSort('stream_pos',))), Apply(Const('<', FunctionSort(UninterpretedSort('stream_pos',), UninterpretedSort('stream_pos',), BooleanSort())), Var('U', UninterpretedSort('stream_pos',)), Var('T', UninterpretedSort('stream_pos',)))),))",
                "explicit": false,
                "lineno": {},
                "id": 313
            },
            {
                "definition": false,
                "assumed": false,
                "temporal": null,
                "args": "(stream_pos.spec.totality, Or(Apply(Const('<', FunctionSort(UninterpretedSort('stream_pos',), UninterpretedSort('stream_pos',), BooleanSort())), Var('T', UninterpretedSort('stream_pos',)), Var('U', UninterpretedSort('stream_pos',))), Eq(Var('T', UninterpretedSort('stream_pos',)), Var('U', UninterpretedSort('stream_pos',))), Apply(Const('<', FunctionSort(UninterpretedSort('stream_pos',), UninterpretedSort('stream_pos',), BooleanSort())), Var('U', UninterpretedSort('stream_pos',)), Var('T', UninterpretedSort('stream_pos',)))))",
                "explicit": false,
                "lineno": {},
                "id": 314
            },
            {
                "definition": false,
                "assumed": false,
                "temporal": null,
                "args": "(stream_pos.spec.prop1, Apply(Const('<=', FunctionSort(UninterpretedSort('stream_pos',), UninterpretedSort('stream_pos',), BooleanSort())), Const('0', UninterpretedSort('stream_pos',)), Var('X', UninterpretedSort('stream_pos',))))",
                "explicit": false,
                "lineno": {},
                "id": 315
            },
            {
                "definition": false,
                "assumed": false,
                "temporal": null,
                "args": "(stream_data.spec.prop103, Apply(Const('>=', FunctionSort(UninterpretedSort('stream_pos',), UninterpretedSort('stream_pos',), BooleanSort())), Apply(Const('stream_data.end', FunctionSort(UninterpretedSort('stream_data',), UninterpretedSort('stream_pos',))), Var('X', UninterpretedSort('stream_data',))), Const('0', UninterpretedSort('stream_pos',))))",
                "explicit": false,
                "lineno": {},
                "id": 319
            },
            {
                "definition": false,
                "assumed": false,
                "temporal": null,
                "args": "(stream_data.spec.extensionality._a, Implies(And(And(Eq(Apply(Const('stream_data.end', FunctionSort(UninterpretedSort('stream_data',), UninterpretedSort('stream_pos',))), Var('X', UninterpretedSort('stream_data',))), Apply(Const('stream_data.end', FunctionSort(UninterpretedSort('stream_data',), UninterpretedSort('stream_pos',))), Var('Y', UninterpretedSort('stream_data',)))), ForAll(frozenset([Var('I', UninterpretedSort('stream_pos',))]), Implies(And(Apply(Const('<=', FunctionSort(UninterpretedSort('stream_pos',), UninterpretedSort('stream_pos',), BooleanSort())), Const('0', UninterpretedSort('stream_pos',)), Var('I', UninterpretedSort('stream_pos',))), Apply(Const('<', FunctionSort(UninterpretedSort('stream_pos',), UninterpretedSort('stream_pos',), BooleanSort())), Var('I', UninterpretedSort('stream_pos',)), Apply(Const('stream_data.end', FunctionSort(UninterpretedSort('stream_data',), UninterpretedSort('stream_pos',))), Var('X', UninterpretedSort('stream_data',))))), Eq(Apply(Const('stream_data.value', FunctionSort(UninterpretedSort('stream_data',), UninterpretedSort('stream_pos',), UninterpretedSort('byte',))), Var('X', UninterpretedSort('stream_data',)), Var('I', UninterpretedSort('stream_pos',))), Apply(Const('stream_data.value', FunctionSort(UninterpretedSort('stream_data',), UninterpretedSort('stream_pos',), UninterpretedSort('byte',))), Var('Y', UninterpretedSort('stream_data',)), Var('I', UninterpretedSort('stream_pos',))))))),), Eq(Var('X', UninterpretedSort('stream_data',)), Var('Y', UninterpretedSort('stream_data',)))))",
                "explicit": false,
                "lineno": {},
                "id": 2882
            },
            {
                "definition": false,
                "assumed": false,
                "temporal": null,
                "args": "(vector[tls.psk_identity].domain.spec.prop2, Implies(Apply(Const('vector[tls.psk_identity].domain.succ', FunctionSort(UninterpretedSort('vector[tls.psk_identity].domain',), UninterpretedSort('vector[tls.psk_identity].domain',), BooleanSort())), Var('X', UninterpretedSort('vector[tls.psk_identity].domain',)), Var('Z', UninterpretedSort('vector[tls.psk_identity].domain',))), And(Apply(Const('<', FunctionSort(UninterpretedSort('vector[tls.psk_identity].domain',), UninterpretedSort('vector[tls.psk_identity].domain',), BooleanSort())), Var('X', UninterpretedSort('vector[tls.psk_identity].domain',)), Var('Z', UninterpretedSort('vector[tls.psk_identity].domain',))), Not(And(Apply(Const('<', FunctionSort(UninterpretedSort('vector[tls.psk_identity].domain',), UninterpretedSort('vector[tls.psk_identity].domain',), BooleanSort())), Var('X', UninterpretedSort('vector[tls.psk_identity].domain',)), Var('Y', UninterpretedSort('vector[tls.psk_identity].domain',))), Apply(Const('<', FunctionSort(UninterpretedSort('vector[tls.psk_identity].domain',), UninterpretedSort('vector[tls.psk_identity].domain',), BooleanSort())), Var('Y', UninterpretedSort('vector[tls.psk_identity].domain',)), Var('Z', UninterpretedSort('vector[tls.psk_identity].domain',)))),))))",
                "explicit": false,
                "lineno": {},
                "id": 1219
            },
            {
                "definition": false,
                "assumed": false,
                "temporal": null,
                "args": "(vector[tls.psk_identity].domain.spec.transitivity, Implies(And(Apply(Const('<', FunctionSort(UninterpretedSort('vector[tls.psk_identity].domain',), UninterpretedSort('vector[tls.psk_identity].domain',), BooleanSort())), Var('T', UninterpretedSort('vector[tls.psk_identity].domain',)), Var('U', UninterpretedSort('vector[tls.psk_identity].domain',))), Apply(Const('<', FunctionSort(UninterpretedSort('vector[tls.psk_identity].domain',), UninterpretedSort('vector[tls.psk_identity].domain',), BooleanSort())), Var('U', UninterpretedSort('vector[tls.psk_identity].domain',)), Var('V', UninterpretedSort('vector[tls.psk_identity].domain',)))), Apply(Const('<', FunctionSort(UninterpretedSort('vector[tls.psk_identity].domain',), UninterpretedSort('vector[tls.psk_identity].domain',), BooleanSort())), Var('T', UninterpretedSort('vector[tls.psk_identity].domain',)), Var('V', UninterpretedSort('vector[tls.psk_identity].domain',)))))",
                "explicit": false,
                "lineno": {},
                "id": 1220
            },
            {
                "definition": false,
                "assumed": false,
                "temporal": null,
                "args": "(vector[tls.psk_identity].domain.spec.antisymmetry, Not(And(Apply(Const('<', FunctionSort(UninterpretedSort('vector[tls.psk_identity].domain',), UninterpretedSort('vector[tls.psk_identity].domain',), BooleanSort())), Var('T', UninterpretedSort('vector[tls.psk_identity].domain',)), Var('U', UninterpretedSort('vector[tls.psk_identity].domain',))), Apply(Const('<', FunctionSort(UninterpretedSort('vector[tls.psk_identity].domain',), UninterpretedSort('vector[tls.psk_identity].domain',), BooleanSort())), Var('U', UninterpretedSort('vector[tls.psk_identity].domain',)), Var('T', UninterpretedSort('vector[tls.psk_identity].domain',)))),))",
                "explicit": false,
                "lineno": {},
                "id": 1221
            },
            {
                "definition": false,
                "assumed": false,
                "temporal": null,
                "args": "(vector[tls.psk_identity].domain.spec.totality, Or(Apply(Const('<', FunctionSort(UninterpretedSort('vector[tls.psk_identity].domain',), UninterpretedSort('vector[tls.psk_identity].domain',), BooleanSort())), Var('T', UninterpretedSort('vector[tls.psk_identity].domain',)), Var('U', UninterpretedSort('vector[tls.psk_identity].domain',))), Eq(Var('T', UninterpretedSort('vector[tls.psk_identity].domain',)), Var('U', UninterpretedSort('vector[tls.psk_identity].domain',))), Apply(Const('<', FunctionSort(UninterpretedSort('vector[tls.psk_identity].domain',), UninterpretedSort('vector[tls.psk_identity].domain',), BooleanSort())), Var('U', UninterpretedSort('vector[tls.psk_identity].domain',)), Var('T', UninterpretedSort('vector[tls.psk_identity].domain',)))))",
                "explicit": false,
                "lineno": {},
                "id": 1222
            },
            {
                "definition": false,
                "assumed": false,
                "temporal": null,
                "args": "(vector[tls.psk_identity].domain.spec.prop1, Apply(Const('<=', FunctionSort(UninterpretedSort('vector[tls.psk_identity].domain',), UninterpretedSort('vector[tls.psk_identity].domain',), BooleanSort())), Const('0', UninterpretedSort('vector[tls.psk_identity].domain',)), Var('X', UninterpretedSort('vector[tls.psk_identity].domain',))))",
                "explicit": false,
                "lineno": {},
                "id": 1223
            },
            {
                "definition": false,
                "assumed": false,
                "temporal": null,
                "args": "(vector[tls.psk_identity].spec.prop103, Apply(Const('>=', FunctionSort(UninterpretedSort('vector[tls.psk_identity].domain',), UninterpretedSort('vector[tls.psk_identity].domain',), BooleanSort())), Apply(Const('vector[tls.psk_identity].end', FunctionSort(UninterpretedSort('vector[tls.psk_identity]',), UninterpretedSort('vector[tls.psk_identity].domain',))), Var('X', UninterpretedSort('vector[tls.psk_identity]',))), Const('0', UninterpretedSort('vector[tls.psk_identity].domain',))))",
                "explicit": false,
                "lineno": {},
                "id": 1227
            },
            {
                "definition": false,
                "assumed": false,
                "temporal": null,
                "args": "(vector[tls.psk_identity].spec.extensionality._a, Implies(And(And(Eq(Apply(Const('vector[tls.psk_identity].end', FunctionSort(UninterpretedSort('vector[tls.psk_identity]',), UninterpretedSort('vector[tls.psk_identity].domain',))), Var('X', UninterpretedSort('vector[tls.psk_identity]',))), Apply(Const('vector[tls.psk_identity].end', FunctionSort(UninterpretedSort('vector[tls.psk_identity]',), UninterpretedSort('vector[tls.psk_identity].domain',))), Var('Y', UninterpretedSort('vector[tls.psk_identity]',)))), ForAll(frozenset([Var('I', UninterpretedSort('vector[tls.psk_identity].domain',))]), Implies(And(Apply(Const('<=', FunctionSort(UninterpretedSort('vector[tls.psk_identity].domain',), UninterpretedSort('vector[tls.psk_identity].domain',), BooleanSort())), Const('0', UninterpretedSort('vector[tls.psk_identity].domain',)), Var('I', UninterpretedSort('vector[tls.psk_identity].domain',))), Apply(Const('<', FunctionSort(UninterpretedSort('vector[tls.psk_identity].domain',), UninterpretedSort('vector[tls.psk_identity].domain',), BooleanSort())), Var('I', UninterpretedSort('vector[tls.psk_identity].domain',)), Apply(Const('vector[tls.psk_identity].end', FunctionSort(UninterpretedSort('vector[tls.psk_identity]',), UninterpretedSort('vector[tls.psk_identity].domain',))), Var('X', UninterpretedSort('vector[tls.psk_identity]',))))), Eq(Apply(Const('vector[tls.psk_identity].value', FunctionSort(UninterpretedSort('vector[tls.psk_identity]',), UninterpretedSort('vector[tls.psk_identity].domain',), UninterpretedSort('tls.psk_identity',))), Var('X', UninterpretedSort('vector[tls.psk_identity]',)), Var('I', UninterpretedSort('vector[tls.psk_identity].domain',))), Apply(Const('vector[tls.psk_identity].value', FunctionSort(UninterpretedSort('vector[tls.psk_identity]',), UninterpretedSort('vector[tls.psk_identity].domain',), UninterpretedSort('tls.psk_identity',))), Var('Y', UninterpretedSort('vector[tls.psk_identity]',)), Var('I', UninterpretedSort('vector[tls.psk_identity].domain',))))))),), Eq(Var('X', UninterpretedSort('vector[tls.psk_identity]',)), Var('Y', UninterpretedSort('vector[tls.psk_identity]',)))))",
                "explicit": false,
                "lineno": {},
                "id": 2891
            },
            {
                "definition": false,
                "assumed": false,
                "temporal": null,
                "args": "(vector[tls.cipher_suite].domain.spec.prop2, Implies(Apply(Const('vector[tls.cipher_suite].domain.succ', FunctionSort(UninterpretedSort('vector[tls.cipher_suite].domain',), UninterpretedSort('vector[tls.cipher_suite].domain',), BooleanSort())), Var('X', UninterpretedSort('vector[tls.cipher_suite].domain',)), Var('Z', UninterpretedSort('vector[tls.cipher_suite].domain',))), And(Apply(Const('<', FunctionSort(UninterpretedSort('vector[tls.cipher_suite].domain',), UninterpretedSort('vector[tls.cipher_suite].domain',), BooleanSort())), Var('X', UninterpretedSort('vector[tls.cipher_suite].domain',)), Var('Z', UninterpretedSort('vector[tls.cipher_suite].domain',))), Not(And(Apply(Const('<', FunctionSort(UninterpretedSort('vector[tls.cipher_suite].domain',), UninterpretedSort('vector[tls.cipher_suite].domain',), BooleanSort())), Var('X', UninterpretedSort('vector[tls.cipher_suite].domain',)), Var('Y', UninterpretedSort('vector[tls.cipher_suite].domain',))), Apply(Const('<', FunctionSort(UninterpretedSort('vector[tls.cipher_suite].domain',), UninterpretedSort('vector[tls.cipher_suite].domain',), BooleanSort())), Var('Y', UninterpretedSort('vector[tls.cipher_suite].domain',)), Var('Z', UninterpretedSort('vector[tls.cipher_suite].domain',)))),))))",
                "explicit": false,
                "lineno": {},
                "id": 1233
            },
            {
                "definition": false,
                "assumed": false,
                "temporal": null,
                "args": "(vector[tls.cipher_suite].domain.spec.transitivity, Implies(And(Apply(Const('<', FunctionSort(UninterpretedSort('vector[tls.cipher_suite].domain',), UninterpretedSort('vector[tls.cipher_suite].domain',), BooleanSort())), Var('T', UninterpretedSort('vector[tls.cipher_suite].domain',)), Var('U', UninterpretedSort('vector[tls.cipher_suite].domain',))), Apply(Const('<', FunctionSort(UninterpretedSort('vector[tls.cipher_suite].domain',), UninterpretedSort('vector[tls.cipher_suite].domain',), BooleanSort())), Var('U', UninterpretedSort('vector[tls.cipher_suite].domain',)), Var('V', UninterpretedSort('vector[tls.cipher_suite].domain',)))), Apply(Const('<', FunctionSort(UninterpretedSort('vector[tls.cipher_suite].domain',), UninterpretedSort('vector[tls.cipher_suite].domain',), BooleanSort())), Var('T', UninterpretedSort('vector[tls.cipher_suite].domain',)), Var('V', UninterpretedSort('vector[tls.cipher_suite].domain',)))))",
                "explicit": false,
                "lineno": {},
                "id": 1234
            },
            {
                "definition": false,
                "assumed": false,
                "temporal": null,
                "args": "(vector[tls.cipher_suite].domain.spec.antisymmetry, Not(And(Apply(Const('<', FunctionSort(UninterpretedSort('vector[tls.cipher_suite].domain',), UninterpretedSort('vector[tls.cipher_suite].domain',), BooleanSort())), Var('T', UninterpretedSort('vector[tls.cipher_suite].domain',)), Var('U', UninterpretedSort('vector[tls.cipher_suite].domain',))), Apply(Const('<', FunctionSort(UninterpretedSort('vector[tls.cipher_suite].domain',), UninterpretedSort('vector[tls.cipher_suite].domain',), BooleanSort())), Var('U', UninterpretedSort('vector[tls.cipher_suite].domain',)), Var('T', UninterpretedSort('vector[tls.cipher_suite].domain',)))),))",
                "explicit": false,
                "lineno": {},
                "id": 1235
            },
            {
                "definition": false,
                "assumed": false,
                "temporal": null,
                "args": "(vector[tls.cipher_suite].domain.spec.totality, Or(Apply(Const('<', FunctionSort(UninterpretedSort('vector[tls.cipher_suite].domain',), UninterpretedSort('vector[tls.cipher_suite].domain',), BooleanSort())), Var('T', UninterpretedSort('vector[tls.cipher_suite].domain',)), Var('U', UninterpretedSort('vector[tls.cipher_suite].domain',))), Eq(Var('T', UninterpretedSort('vector[tls.cipher_suite].domain',)), Var('U', UninterpretedSort('vector[tls.cipher_suite].domain',))), Apply(Const('<', FunctionSort(UninterpretedSort('vector[tls.cipher_suite].domain',), UninterpretedSort('vector[tls.cipher_suite].domain',), BooleanSort())), Var('U', UninterpretedSort('vector[tls.cipher_suite].domain',)), Var('T', UninterpretedSort('vector[tls.cipher_suite].domain',)))))",
                "explicit": false,
                "lineno": {},
                "id": 1236
            },
            {
                "definition": false,
                "assumed": false,
                "temporal": null,
                "args": "(vector[tls.cipher_suite].domain.spec.prop1, Apply(Const('<=', FunctionSort(UninterpretedSort('vector[tls.cipher_suite].domain',), UninterpretedSort('vector[tls.cipher_suite].domain',), BooleanSort())), Const('0', UninterpretedSort('vector[tls.cipher_suite].domain',)), Var('X', UninterpretedSort('vector[tls.cipher_suite].domain',))))",
                "explicit": false,
                "lineno": {},
                "id": 1237
            },
            {
                "definition": false,
                "assumed": false,
                "temporal": null,
                "args": "(vector[tls.cipher_suite].spec.prop103, Apply(Const('>=', FunctionSort(UninterpretedSort('vector[tls.cipher_suite].domain',), UninterpretedSort('vector[tls.cipher_suite].domain',), BooleanSort())), Apply(Const('vector[tls.cipher_suite].end', FunctionSort(UninterpretedSort('vector[tls.cipher_suite]',), UninterpretedSort('vector[tls.cipher_suite].domain',))), Var('X', UninterpretedSort('vector[tls.cipher_suite]',))), Const('0', UninterpretedSort('vector[tls.cipher_suite].domain',))))",
                "explicit": false,
                "lineno": {},
                "id": 1241
            },
            {
                "definition": false,
                "assumed": false,
                "temporal": null,
                "args": "(vector[tls.cipher_suite].spec.extensionality._a, Implies(And(And(Eq(Apply(Const('vector[tls.cipher_suite].end', FunctionSort(UninterpretedSort('vector[tls.cipher_suite]',), UninterpretedSort('vector[tls.cipher_suite].domain',))), Var('X', UninterpretedSort('vector[tls.cipher_suite]',))), Apply(Const('vector[tls.cipher_suite].end', FunctionSort(UninterpretedSort('vector[tls.cipher_suite]',), UninterpretedSort('vector[tls.cipher_suite].domain',))), Var('Y', UninterpretedSort('vector[tls.cipher_suite]',)))), ForAll(frozenset([Var('I', UninterpretedSort('vector[tls.cipher_suite].domain',))]), Implies(And(Apply(Const('<=', FunctionSort(UninterpretedSort('vector[tls.cipher_suite].domain',), UninterpretedSort('vector[tls.cipher_suite].domain',), BooleanSort())), Const('0', UninterpretedSort('vector[tls.cipher_suite].domain',)), Var('I', UninterpretedSort('vector[tls.cipher_suite].domain',))), Apply(Const('<', FunctionSort(UninterpretedSort('vector[tls.cipher_suite].domain',), UninterpretedSort('vector[tls.cipher_suite].domain',), BooleanSort())), Var('I', UninterpretedSort('vector[tls.cipher_suite].domain',)), Apply(Const('vector[tls.cipher_suite].end', FunctionSort(UninterpretedSort('vector[tls.cipher_suite]',), UninterpretedSort('vector[tls.cipher_suite].domain',))), Var('X', UninterpretedSort('vector[tls.cipher_suite]',))))), Eq(Apply(Const('vector[tls.cipher_suite].value', FunctionSort(UninterpretedSort('vector[tls.cipher_suite]',), UninterpretedSort('vector[tls.cipher_suite].domain',), UninterpretedSort('tls.cipher_suite',))), Var('X', UninterpretedSort('vector[tls.cipher_suite]',)), Var('I', UninterpretedSort('vector[tls.cipher_suite].domain',))), Apply(Const('vector[tls.cipher_suite].value', FunctionSort(UninterpretedSort('vector[tls.cipher_suite]',), UninterpretedSort('vector[tls.cipher_suite].domain',), UninterpretedSort('tls.cipher_suite',))), Var('Y', UninterpretedSort('vector[tls.cipher_suite]',)), Var('I', UninterpretedSort('vector[tls.cipher_suite].domain',))))))),), Eq(Var('X', UninterpretedSort('vector[tls.cipher_suite]',)), Var('Y', UninterpretedSort('vector[tls.cipher_suite]',)))))",
                "explicit": false,
                "lineno": {},
                "id": 2900
            },
            {
                "definition": false,
                "assumed": false,
                "temporal": null,
                "args": "(vector[tls.compression_method].domain.spec.prop2, Implies(Apply(Const('vector[tls.compression_method].domain.succ', FunctionSort(UninterpretedSort('vector[tls.compression_method].domain',), UninterpretedSort('vector[tls.compression_method].domain',), BooleanSort())), Var('X', UninterpretedSort('vector[tls.compression_method].domain',)), Var('Z', UninterpretedSort('vector[tls.compression_method].domain',))), And(Apply(Const('<', FunctionSort(UninterpretedSort('vector[tls.compression_method].domain',), UninterpretedSort('vector[tls.compression_method].domain',), BooleanSort())), Var('X', UninterpretedSort('vector[tls.compression_method].domain',)), Var('Z', UninterpretedSort('vector[tls.compression_method].domain',))), Not(And(Apply(Const('<', FunctionSort(UninterpretedSort('vector[tls.compression_method].domain',), UninterpretedSort('vector[tls.compression_method].domain',), BooleanSort())), Var('X', UninterpretedSort('vector[tls.compression_method].domain',)), Var('Y', UninterpretedSort('vector[tls.compression_method].domain',))), Apply(Const('<', FunctionSort(UninterpretedSort('vector[tls.compression_method].domain',), UninterpretedSort('vector[tls.compression_method].domain',), BooleanSort())), Var('Y', UninterpretedSort('vector[tls.compression_method].domain',)), Var('Z', UninterpretedSort('vector[tls.compression_method].domain',)))),))))",
                "explicit": false,
                "lineno": {},
                "id": 1247
            },
            {
                "definition": false,
                "assumed": false,
                "temporal": null,
                "args": "(vector[tls.compression_method].domain.spec.transitivity, Implies(And(Apply(Const('<', FunctionSort(UninterpretedSort('vector[tls.compression_method].domain',), UninterpretedSort('vector[tls.compression_method].domain',), BooleanSort())), Var('T', UninterpretedSort('vector[tls.compression_method].domain',)), Var('U', UninterpretedSort('vector[tls.compression_method].domain',))), Apply(Const('<', FunctionSort(UninterpretedSort('vector[tls.compression_method].domain',), UninterpretedSort('vector[tls.compression_method].domain',), BooleanSort())), Var('U', UninterpretedSort('vector[tls.compression_method].domain',)), Var('V', UninterpretedSort('vector[tls.compression_method].domain',)))), Apply(Const('<', FunctionSort(UninterpretedSort('vector[tls.compression_method].domain',), UninterpretedSort('vector[tls.compression_method].domain',), BooleanSort())), Var('T', UninterpretedSort('vector[tls.compression_method].domain',)), Var('V', UninterpretedSort('vector[tls.compression_method].domain',)))))",
                "explicit": false,
                "lineno": {},
                "id": 1248
            },
            {
                "definition": false,
                "assumed": false,
                "temporal": null,
                "args": "(vector[tls.compression_method].domain.spec.antisymmetry, Not(And(Apply(Const('<', FunctionSort(UninterpretedSort('vector[tls.compression_method].domain',), UninterpretedSort('vector[tls.compression_method].domain',), BooleanSort())), Var('T', UninterpretedSort('vector[tls.compression_method].domain',)), Var('U', UninterpretedSort('vector[tls.compression_method].domain',))), Apply(Const('<', FunctionSort(UninterpretedSort('vector[tls.compression_method].domain',), UninterpretedSort('vector[tls.compression_method].domain',), BooleanSort())), Var('U', UninterpretedSort('vector[tls.compression_method].domain',)), Var('T', UninterpretedSort('vector[tls.compression_method].domain',)))),))",
                "explicit": false,
                "lineno": {},
                "id": 1249
            },
            {
                "definition": false,
                "assumed": false,
                "temporal": null,
                "args": "(vector[tls.compression_method].domain.spec.totality, Or(Apply(Const('<', FunctionSort(UninterpretedSort('vector[tls.compression_method].domain',), UninterpretedSort('vector[tls.compression_method].domain',), BooleanSort())), Var('T', UninterpretedSort('vector[tls.compression_method].domain',)), Var('U', UninterpretedSort('vector[tls.compression_method].domain',))), Eq(Var('T', UninterpretedSort('vector[tls.compression_method].domain',)), Var('U', UninterpretedSort('vector[tls.compression_method].domain',))), Apply(Const('<', FunctionSort(UninterpretedSort('vector[tls.compression_method].domain',), UninterpretedSort('vector[tls.compression_method].domain',), BooleanSort())), Var('U', UninterpretedSort('vector[tls.compression_method].domain',)), Var('T', UninterpretedSort('vector[tls.compression_method].domain',)))))",
                "explicit": false,
                "lineno": {},
                "id": 1250
            },
            {
                "definition": false,
                "assumed": false,
                "temporal": null,
                "args": "(vector[tls.compression_method].domain.spec.prop1, Apply(Const('<=', FunctionSort(UninterpretedSort('vector[tls.compression_method].domain',), UninterpretedSort('vector[tls.compression_method].domain',), BooleanSort())), Const('0', UninterpretedSort('vector[tls.compression_method].domain',)), Var('X', UninterpretedSort('vector[tls.compression_method].domain',))))",
                "explicit": false,
                "lineno": {},
                "id": 1251
            },
            {
                "definition": false,
                "assumed": false,
                "temporal": null,
                "args": "(vector[tls.compression_method].spec.prop103, Apply(Const('>=', FunctionSort(UninterpretedSort('vector[tls.compression_method].domain',), UninterpretedSort('vector[tls.compression_method].domain',), BooleanSort())), Apply(Const('vector[tls.compression_method].end', FunctionSort(UninterpretedSort('vector[tls.compression_method]',), UninterpretedSort('vector[tls.compression_method].domain',))), Var('X', UninterpretedSort('vector[tls.compression_method]',))), Const('0', UninterpretedSort('vector[tls.compression_method].domain',))))",
                "explicit": false,
                "lineno": {},
                "id": 1255
            },
            {
                "definition": false,
                "assumed": false,
                "temporal": null,
                "args": "(vector[tls.compression_method].spec.extensionality._a, Implies(And(And(Eq(Apply(Const('vector[tls.compression_method].end', FunctionSort(UninterpretedSort('vector[tls.compression_method]',), UninterpretedSort('vector[tls.compression_method].domain',))), Var('X', UninterpretedSort('vector[tls.compression_method]',))), Apply(Const('vector[tls.compression_method].end', FunctionSort(UninterpretedSort('vector[tls.compression_method]',), UninterpretedSort('vector[tls.compression_method].domain',))), Var('Y', UninterpretedSort('vector[tls.compression_method]',)))), ForAll(frozenset([Var('I', UninterpretedSort('vector[tls.compression_method].domain',))]), Implies(And(Apply(Const('<=', FunctionSort(UninterpretedSort('vector[tls.compression_method].domain',), UninterpretedSort('vector[tls.compression_method].domain',), BooleanSort())), Const('0', UninterpretedSort('vector[tls.compression_method].domain',)), Var('I', UninterpretedSort('vector[tls.compression_method].domain',))), Apply(Const('<', FunctionSort(UninterpretedSort('vector[tls.compression_method].domain',), UninterpretedSort('vector[tls.compression_method].domain',), BooleanSort())), Var('I', UninterpretedSort('vector[tls.compression_method].domain',)), Apply(Const('vector[tls.compression_method].end', FunctionSort(UninterpretedSort('vector[tls.compression_method]',), UninterpretedSort('vector[tls.compression_method].domain',))), Var('X', UninterpretedSort('vector[tls.compression_method]',))))), Eq(Apply(Const('vector[tls.compression_method].value', FunctionSort(UninterpretedSort('vector[tls.compression_method]',), UninterpretedSort('vector[tls.compression_method].domain',), UninterpretedSort('tls.compression_method',))), Var('X', UninterpretedSort('vector[tls.compression_method]',)), Var('I', UninterpretedSort('vector[tls.compression_method].domain',))), Apply(Const('vector[tls.compression_method].value', FunctionSort(UninterpretedSort('vector[tls.compression_method]',), UninterpretedSort('vector[tls.compression_method].domain',), UninterpretedSort('tls.compression_method',))), Var('Y', UninterpretedSort('vector[tls.compression_method]',)), Var('I', UninterpretedSort('vector[tls.compression_method].domain',))))))),), Eq(Var('X', UninterpretedSort('vector[tls.compression_method]',)), Var('Y', UninterpretedSort('vector[tls.compression_method]',)))))",
                "explicit": false,
                "lineno": {},
                "id": 2909
            },
            {
                "definition": false,
                "assumed": false,
                "temporal": null,
                "args": "(vector[tls.extension].domain.spec.prop2, Implies(Apply(Const('vector[tls.extension].domain.succ', FunctionSort(UninterpretedSort('vector[tls.extension].domain',), UninterpretedSort('vector[tls.extension].domain',), BooleanSort())), Var('X', UninterpretedSort('vector[tls.extension].domain',)), Var('Z', UninterpretedSort('vector[tls.extension].domain',))), And(Apply(Const('<', FunctionSort(UninterpretedSort('vector[tls.extension].domain',), UninterpretedSort('vector[tls.extension].domain',), BooleanSort())), Var('X', UninterpretedSort('vector[tls.extension].domain',)), Var('Z', UninterpretedSort('vector[tls.extension].domain',))), Not(And(Apply(Const('<', FunctionSort(UninterpretedSort('vector[tls.extension].domain',), UninterpretedSort('vector[tls.extension].domain',), BooleanSort())), Var('X', UninterpretedSort('vector[tls.extension].domain',)), Var('Y', UninterpretedSort('vector[tls.extension].domain',))), Apply(Const('<', FunctionSort(UninterpretedSort('vector[tls.extension].domain',), UninterpretedSort('vector[tls.extension].domain',), BooleanSort())), Var('Y', UninterpretedSort('vector[tls.extension].domain',)), Var('Z', UninterpretedSort('vector[tls.extension].domain',)))),))))",
                "explicit": false,
                "lineno": {},
                "id": 1261
            },
            {
                "definition": false,
                "assumed": false,
                "temporal": null,
                "args": "(vector[tls.extension].domain.spec.transitivity, Implies(And(Apply(Const('<', FunctionSort(UninterpretedSort('vector[tls.extension].domain',), UninterpretedSort('vector[tls.extension].domain',), BooleanSort())), Var('T', UninterpretedSort('vector[tls.extension].domain',)), Var('U', UninterpretedSort('vector[tls.extension].domain',))), Apply(Const('<', FunctionSort(UninterpretedSort('vector[tls.extension].domain',), UninterpretedSort('vector[tls.extension].domain',), BooleanSort())), Var('U', UninterpretedSort('vector[tls.extension].domain',)), Var('V', UninterpretedSort('vector[tls.extension].domain',)))), Apply(Const('<', FunctionSort(UninterpretedSort('vector[tls.extension].domain',), UninterpretedSort('vector[tls.extension].domain',), BooleanSort())), Var('T', UninterpretedSort('vector[tls.extension].domain',)), Var('V', UninterpretedSort('vector[tls.extension].domain',)))))",
                "explicit": false,
                "lineno": {},
                "id": 1262
            },
            {
                "definition": false,
                "assumed": false,
                "temporal": null,
                "args": "(vector[tls.extension].domain.spec.antisymmetry, Not(And(Apply(Const('<', FunctionSort(UninterpretedSort('vector[tls.extension].domain',), UninterpretedSort('vector[tls.extension].domain',), BooleanSort())), Var('T', UninterpretedSort('vector[tls.extension].domain',)), Var('U', UninterpretedSort('vector[tls.extension].domain',))), Apply(Const('<', FunctionSort(UninterpretedSort('vector[tls.extension].domain',), UninterpretedSort('vector[tls.extension].domain',), BooleanSort())), Var('U', UninterpretedSort('vector[tls.extension].domain',)), Var('T', UninterpretedSort('vector[tls.extension].domain',)))),))",
                "explicit": false,
                "lineno": {},
                "id": 1263
            },
            {
                "definition": false,
                "assumed": false,
                "temporal": null,
                "args": "(vector[tls.extension].domain.spec.totality, Or(Apply(Const('<', FunctionSort(UninterpretedSort('vector[tls.extension].domain',), UninterpretedSort('vector[tls.extension].domain',), BooleanSort())), Var('T', UninterpretedSort('vector[tls.extension].domain',)), Var('U', UninterpretedSort('vector[tls.extension].domain',))), Eq(Var('T', UninterpretedSort('vector[tls.extension].domain',)), Var('U', UninterpretedSort('vector[tls.extension].domain',))), Apply(Const('<', FunctionSort(UninterpretedSort('vector[tls.extension].domain',), UninterpretedSort('vector[tls.extension].domain',), BooleanSort())), Var('U', UninterpretedSort('vector[tls.extension].domain',)), Var('T', UninterpretedSort('vector[tls.extension].domain',)))))",
                "explicit": false,
                "lineno": {},
                "id": 1264
            },
            {
                "definition": false,
                "assumed": false,
                "temporal": null,
                "args": "(vector[tls.extension].domain.spec.prop1, Apply(Const('<=', FunctionSort(UninterpretedSort('vector[tls.extension].domain',), UninterpretedSort('vector[tls.extension].domain',), BooleanSort())), Const('0', UninterpretedSort('vector[tls.extension].domain',)), Var('X', UninterpretedSort('vector[tls.extension].domain',))))",
                "explicit": false,
                "lineno": {},
                "id": 1265
            },
            {
                "definition": false,
                "assumed": false,
                "temporal": null,
                "args": "(vector[tls.extension].spec.prop103, Apply(Const('>=', FunctionSort(UninterpretedSort('vector[tls.extension].domain',), UninterpretedSort('vector[tls.extension].domain',), BooleanSort())), Apply(Const('vector[tls.extension].end', FunctionSort(UninterpretedSort('vector[tls.extension]',), UninterpretedSort('vector[tls.extension].domain',))), Var('X', UninterpretedSort('vector[tls.extension]',))), Const('0', UninterpretedSort('vector[tls.extension].domain',))))",
                "explicit": false,
                "lineno": {},
                "id": 1269
            },
            {
                "definition": false,
                "assumed": false,
                "temporal": null,
                "args": "(vector[tls.extension].spec.extensionality._a, Implies(And(And(Eq(Apply(Const('vector[tls.extension].end', FunctionSort(UninterpretedSort('vector[tls.extension]',), UninterpretedSort('vector[tls.extension].domain',))), Var('X', UninterpretedSort('vector[tls.extension]',))), Apply(Const('vector[tls.extension].end', FunctionSort(UninterpretedSort('vector[tls.extension]',), UninterpretedSort('vector[tls.extension].domain',))), Var('Y', UninterpretedSort('vector[tls.extension]',)))), ForAll(frozenset([Var('I', UninterpretedSort('vector[tls.extension].domain',))]), Implies(And(Apply(Const('<=', FunctionSort(UninterpretedSort('vector[tls.extension].domain',), UninterpretedSort('vector[tls.extension].domain',), BooleanSort())), Const('0', UninterpretedSort('vector[tls.extension].domain',)), Var('I', UninterpretedSort('vector[tls.extension].domain',))), Apply(Const('<', FunctionSort(UninterpretedSort('vector[tls.extension].domain',), UninterpretedSort('vector[tls.extension].domain',), BooleanSort())), Var('I', UninterpretedSort('vector[tls.extension].domain',)), Apply(Const('vector[tls.extension].end', FunctionSort(UninterpretedSort('vector[tls.extension]',), UninterpretedSort('vector[tls.extension].domain',))), Var('X', UninterpretedSort('vector[tls.extension]',))))), Eq(Apply(Const('vector[tls.extension].value', FunctionSort(UninterpretedSort('vector[tls.extension]',), UninterpretedSort('vector[tls.extension].domain',), UninterpretedSort('tls.extension',))), Var('X', UninterpretedSort('vector[tls.extension]',)), Var('I', UninterpretedSort('vector[tls.extension].domain',))), Apply(Const('vector[tls.extension].value', FunctionSort(UninterpretedSort('vector[tls.extension]',), UninterpretedSort('vector[tls.extension].domain',), UninterpretedSort('tls.extension',))), Var('Y', UninterpretedSort('vector[tls.extension]',)), Var('I', UninterpretedSort('vector[tls.extension].domain',))))))),), Eq(Var('X', UninterpretedSort('vector[tls.extension]',)), Var('Y', UninterpretedSort('vector[tls.extension]',)))))",
                "explicit": false,
                "lineno": {},
                "id": 2918
            },
            {
                "definition": false,
                "assumed": false,
                "temporal": null,
                "args": "(vector[tls.handshake].domain.spec.prop2, Implies(Apply(Const('vector[tls.handshake].domain.succ', FunctionSort(UninterpretedSort('vector[tls.handshake].domain',), UninterpretedSort('vector[tls.handshake].domain',), BooleanSort())), Var('X', UninterpretedSort('vector[tls.handshake].domain',)), Var('Z', UninterpretedSort('vector[tls.handshake].domain',))), And(Apply(Const('<', FunctionSort(UninterpretedSort('vector[tls.handshake].domain',), UninterpretedSort('vector[tls.handshake].domain',), BooleanSort())), Var('X', UninterpretedSort('vector[tls.handshake].domain',)), Var('Z', UninterpretedSort('vector[tls.handshake].domain',))), Not(And(Apply(Const('<', FunctionSort(UninterpretedSort('vector[tls.handshake].domain',), UninterpretedSort('vector[tls.handshake].domain',), BooleanSort())), Var('X', UninterpretedSort('vector[tls.handshake].domain',)), Var('Y', UninterpretedSort('vector[tls.handshake].domain',))), Apply(Const('<', FunctionSort(UninterpretedSort('vector[tls.handshake].domain',), UninterpretedSort('vector[tls.handshake].domain',), BooleanSort())), Var('Y', UninterpretedSort('vector[tls.handshake].domain',)), Var('Z', UninterpretedSort('vector[tls.handshake].domain',)))),))))",
                "explicit": false,
                "lineno": {},
                "id": 1275
            },
            {
                "definition": false,
                "assumed": false,
                "temporal": null,
                "args": "(vector[tls.handshake].domain.spec.transitivity, Implies(And(Apply(Const('<', FunctionSort(UninterpretedSort('vector[tls.handshake].domain',), UninterpretedSort('vector[tls.handshake].domain',), BooleanSort())), Var('T', UninterpretedSort('vector[tls.handshake].domain',)), Var('U', UninterpretedSort('vector[tls.handshake].domain',))), Apply(Const('<', FunctionSort(UninterpretedSort('vector[tls.handshake].domain',), UninterpretedSort('vector[tls.handshake].domain',), BooleanSort())), Var('U', UninterpretedSort('vector[tls.handshake].domain',)), Var('V', UninterpretedSort('vector[tls.handshake].domain',)))), Apply(Const('<', FunctionSort(UninterpretedSort('vector[tls.handshake].domain',), UninterpretedSort('vector[tls.handshake].domain',), BooleanSort())), Var('T', UninterpretedSort('vector[tls.handshake].domain',)), Var('V', UninterpretedSort('vector[tls.handshake].domain',)))))",
                "explicit": false,
                "lineno": {},
                "id": 1276
            },
            {
                "definition": false,
                "assumed": false,
                "temporal": null,
                "args": "(vector[tls.handshake].domain.spec.antisymmetry, Not(And(Apply(Const('<', FunctionSort(UninterpretedSort('vector[tls.handshake].domain',), UninterpretedSort('vector[tls.handshake].domain',), BooleanSort())), Var('T', UninterpretedSort('vector[tls.handshake].domain',)), Var('U', UninterpretedSort('vector[tls.handshake].domain',))), Apply(Const('<', FunctionSort(UninterpretedSort('vector[tls.handshake].domain',), UninterpretedSort('vector[tls.handshake].domain',), BooleanSort())), Var('U', UninterpretedSort('vector[tls.handshake].domain',)), Var('T', UninterpretedSort('vector[tls.handshake].domain',)))),))",
                "explicit": false,
                "lineno": {},
                "id": 1277
            },
            {
                "definition": false,
                "assumed": false,
                "temporal": null,
                "args": "(vector[tls.handshake].domain.spec.totality, Or(Apply(Const('<', FunctionSort(UninterpretedSort('vector[tls.handshake].domain',), UninterpretedSort('vector[tls.handshake].domain',), BooleanSort())), Var('T', UninterpretedSort('vector[tls.handshake].domain',)), Var('U', UninterpretedSort('vector[tls.handshake].domain',))), Eq(Var('T', UninterpretedSort('vector[tls.handshake].domain',)), Var('U', UninterpretedSort('vector[tls.handshake].domain',))), Apply(Const('<', FunctionSort(UninterpretedSort('vector[tls.handshake].domain',), UninterpretedSort('vector[tls.handshake].domain',), BooleanSort())), Var('U', UninterpretedSort('vector[tls.handshake].domain',)), Var('T', UninterpretedSort('vector[tls.handshake].domain',)))))",
                "explicit": false,
                "lineno": {},
                "id": 1278
            },
            {
                "definition": false,
                "assumed": false,
                "temporal": null,
                "args": "(vector[tls.handshake].domain.spec.prop1, Apply(Const('<=', FunctionSort(UninterpretedSort('vector[tls.handshake].domain',), UninterpretedSort('vector[tls.handshake].domain',), BooleanSort())), Const('0', UninterpretedSort('vector[tls.handshake].domain',)), Var('X', UninterpretedSort('vector[tls.handshake].domain',))))",
                "explicit": false,
                "lineno": {},
                "id": 1279
            },
            {
                "definition": false,
                "assumed": false,
                "temporal": null,
                "args": "(vector[tls.handshake].spec.prop103, Apply(Const('>=', FunctionSort(UninterpretedSort('vector[tls.handshake].domain',), UninterpretedSort('vector[tls.handshake].domain',), BooleanSort())), Apply(Const('vector[tls.handshake].end', FunctionSort(UninterpretedSort('vector[tls.handshake]',), UninterpretedSort('vector[tls.handshake].domain',))), Var('X', UninterpretedSort('vector[tls.handshake]',))), Const('0', UninterpretedSort('vector[tls.handshake].domain',))))",
                "explicit": false,
                "lineno": {},
                "id": 1283
            },
            {
                "definition": false,
                "assumed": false,
                "temporal": null,
                "args": "(vector[tls.handshake].spec.extensionality._a, Implies(And(And(Eq(Apply(Const('vector[tls.handshake].end', FunctionSort(UninterpretedSort('vector[tls.handshake]',), UninterpretedSort('vector[tls.handshake].domain',))), Var('X', UninterpretedSort('vector[tls.handshake]',))), Apply(Const('vector[tls.handshake].end', FunctionSort(UninterpretedSort('vector[tls.handshake]',), UninterpretedSort('vector[tls.handshake].domain',))), Var('Y', UninterpretedSort('vector[tls.handshake]',)))), ForAll(frozenset([Var('I', UninterpretedSort('vector[tls.handshake].domain',))]), Implies(And(Apply(Const('<=', FunctionSort(UninterpretedSort('vector[tls.handshake].domain',), UninterpretedSort('vector[tls.handshake].domain',), BooleanSort())), Const('0', UninterpretedSort('vector[tls.handshake].domain',)), Var('I', UninterpretedSort('vector[tls.handshake].domain',))), Apply(Const('<', FunctionSort(UninterpretedSort('vector[tls.handshake].domain',), UninterpretedSort('vector[tls.handshake].domain',), BooleanSort())), Var('I', UninterpretedSort('vector[tls.handshake].domain',)), Apply(Const('vector[tls.handshake].end', FunctionSort(UninterpretedSort('vector[tls.handshake]',), UninterpretedSort('vector[tls.handshake].domain',))), Var('X', UninterpretedSort('vector[tls.handshake]',))))), Eq(Apply(Const('vector[tls.handshake].value', FunctionSort(UninterpretedSort('vector[tls.handshake]',), UninterpretedSort('vector[tls.handshake].domain',), UninterpretedSort('tls.handshake',))), Var('X', UninterpretedSort('vector[tls.handshake]',)), Var('I', UninterpretedSort('vector[tls.handshake].domain',))), Apply(Const('vector[tls.handshake].value', FunctionSort(UninterpretedSort('vector[tls.handshake]',), UninterpretedSort('vector[tls.handshake].domain',), UninterpretedSort('tls.handshake',))), Var('Y', UninterpretedSort('vector[tls.handshake]',)), Var('I', UninterpretedSort('vector[tls.handshake].domain',))))))),), Eq(Var('X', UninterpretedSort('vector[tls.handshake]',)), Var('Y', UninterpretedSort('vector[tls.handshake]',)))))",
                "explicit": false,
                "lineno": {},
                "id": 2927
            },
            {
                "definition": false,
                "assumed": false,
                "temporal": null,
                "args": "(tls.handshakes.domain.spec.prop2, Implies(Apply(Const('tls.handshakes.domain.succ', FunctionSort(UninterpretedSort('tls.handshakes.domain',), UninterpretedSort('tls.handshakes.domain',), BooleanSort())), Var('X', UninterpretedSort('tls.handshakes.domain',)), Var('Z', UninterpretedSort('tls.handshakes.domain',))), And(Apply(Const('<', FunctionSort(UninterpretedSort('tls.handshakes.domain',), UninterpretedSort('tls.handshakes.domain',), BooleanSort())), Var('X', UninterpretedSort('tls.handshakes.domain',)), Var('Z', UninterpretedSort('tls.handshakes.domain',))), Not(And(Apply(Const('<', FunctionSort(UninterpretedSort('tls.handshakes.domain',), UninterpretedSort('tls.handshakes.domain',), BooleanSort())), Var('X', UninterpretedSort('tls.handshakes.domain',)), Var('Y', UninterpretedSort('tls.handshakes.domain',))), Apply(Const('<', FunctionSort(UninterpretedSort('tls.handshakes.domain',), UninterpretedSort('tls.handshakes.domain',), BooleanSort())), Var('Y', UninterpretedSort('tls.handshakes.domain',)), Var('Z', UninterpretedSort('tls.handshakes.domain',)))),))))",
                "explicit": false,
                "lineno": {},
                "id": 367
            },
            {
                "definition": false,
                "assumed": false,
                "temporal": null,
                "args": "(tls.handshakes.domain.spec.transitivity, Implies(And(Apply(Const('<', FunctionSort(UninterpretedSort('tls.handshakes.domain',), UninterpretedSort('tls.handshakes.domain',), BooleanSort())), Var('T', UninterpretedSort('tls.handshakes.domain',)), Var('U', UninterpretedSort('tls.handshakes.domain',))), Apply(Const('<', FunctionSort(UninterpretedSort('tls.handshakes.domain',), UninterpretedSort('tls.handshakes.domain',), BooleanSort())), Var('U', UninterpretedSort('tls.handshakes.domain',)), Var('V', UninterpretedSort('tls.handshakes.domain',)))), Apply(Const('<', FunctionSort(UninterpretedSort('tls.handshakes.domain',), UninterpretedSort('tls.handshakes.domain',), BooleanSort())), Var('T', UninterpretedSort('tls.handshakes.domain',)), Var('V', UninterpretedSort('tls.handshakes.domain',)))))",
                "explicit": false,
                "lineno": {},
                "id": 368
            },
            {
                "definition": false,
                "assumed": false,
                "temporal": null,
                "args": "(tls.handshakes.domain.spec.antisymmetry, Not(And(Apply(Const('<', FunctionSort(UninterpretedSort('tls.handshakes.domain',), UninterpretedSort('tls.handshakes.domain',), BooleanSort())), Var('T', UninterpretedSort('tls.handshakes.domain',)), Var('U', UninterpretedSort('tls.handshakes.domain',))), Apply(Const('<', FunctionSort(UninterpretedSort('tls.handshakes.domain',), UninterpretedSort('tls.handshakes.domain',), BooleanSort())), Var('U', UninterpretedSort('tls.handshakes.domain',)), Var('T', UninterpretedSort('tls.handshakes.domain',)))),))",
                "explicit": false,
                "lineno": {},
                "id": 369
            },
            {
                "definition": false,
                "assumed": false,
                "temporal": null,
                "args": "(tls.handshakes.domain.spec.totality, Or(Apply(Const('<', FunctionSort(UninterpretedSort('tls.handshakes.domain',), UninterpretedSort('tls.handshakes.domain',), BooleanSort())), Var('T', UninterpretedSort('tls.handshakes.domain',)), Var('U', UninterpretedSort('tls.handshakes.domain',))), Eq(Var('T', UninterpretedSort('tls.handshakes.domain',)), Var('U', UninterpretedSort('tls.handshakes.domain',))), Apply(Const('<', FunctionSort(UninterpretedSort('tls.handshakes.domain',), UninterpretedSort('tls.handshakes.domain',), BooleanSort())), Var('U', UninterpretedSort('tls.handshakes.domain',)), Var('T', UninterpretedSort('tls.handshakes.domain',)))))",
                "explicit": false,
                "lineno": {},
                "id": 370
            },
            {
                "definition": false,
                "assumed": false,
                "temporal": null,
                "args": "(tls.handshakes.domain.spec.prop1, Apply(Const('<=', FunctionSort(UninterpretedSort('tls.handshakes.domain',), UninterpretedSort('tls.handshakes.domain',), BooleanSort())), Const('0', UninterpretedSort('tls.handshakes.domain',)), Var('X', UninterpretedSort('tls.handshakes.domain',))))",
                "explicit": false,
                "lineno": {},
                "id": 371
            },
            {
                "definition": false,
                "assumed": false,
                "temporal": null,
                "args": "(tls.handshakes.spec.prop103, Apply(Const('>=', FunctionSort(UninterpretedSort('tls.handshakes.domain',), UninterpretedSort('tls.handshakes.domain',), BooleanSort())), Apply(Const('tls.handshakes.end', FunctionSort(UninterpretedSort('tls.handshakes',), UninterpretedSort('tls.handshakes.domain',))), Var('X', UninterpretedSort('tls.handshakes',))), Const('0', UninterpretedSort('tls.handshakes.domain',))))",
                "explicit": false,
                "lineno": {},
                "id": 375
            },
            {
                "definition": false,
                "assumed": false,
                "temporal": null,
                "args": "(tls.handshakes.spec.extensionality._a, Implies(And(And(Eq(Apply(Const('tls.handshakes.end', FunctionSort(UninterpretedSort('tls.handshakes',), UninterpretedSort('tls.handshakes.domain',))), Var('X', UninterpretedSort('tls.handshakes',))), Apply(Const('tls.handshakes.end', FunctionSort(UninterpretedSort('tls.handshakes',), UninterpretedSort('tls.handshakes.domain',))), Var('Y', UninterpretedSort('tls.handshakes',)))), ForAll(frozenset([Var('I', UninterpretedSort('tls.handshakes.domain',))]), Implies(And(Apply(Const('<=', FunctionSort(UninterpretedSort('tls.handshakes.domain',), UninterpretedSort('tls.handshakes.domain',), BooleanSort())), Const('0', UninterpretedSort('tls.handshakes.domain',)), Var('I', UninterpretedSort('tls.handshakes.domain',))), Apply(Const('<', FunctionSort(UninterpretedSort('tls.handshakes.domain',), UninterpretedSort('tls.handshakes.domain',), BooleanSort())), Var('I', UninterpretedSort('tls.handshakes.domain',)), Apply(Const('tls.handshakes.end', FunctionSort(UninterpretedSort('tls.handshakes',), UninterpretedSort('tls.handshakes.domain',))), Var('X', UninterpretedSort('tls.handshakes',))))), Eq(Apply(Const('tls.handshakes.value', FunctionSort(UninterpretedSort('tls.handshakes',), UninterpretedSort('tls.handshakes.domain',), UninterpretedSort('tls.handshake',))), Var('X', UninterpretedSort('tls.handshakes',)), Var('I', UninterpretedSort('tls.handshakes.domain',))), Apply(Const('tls.handshakes.value', FunctionSort(UninterpretedSort('tls.handshakes',), UninterpretedSort('tls.handshakes.domain',), UninterpretedSort('tls.handshake',))), Var('Y', UninterpretedSort('tls.handshakes',)), Var('I', UninterpretedSort('tls.handshakes.domain',))))))),), Eq(Var('X', UninterpretedSort('tls.handshakes',)), Var('Y', UninterpretedSort('tls.handshakes',)))))",
                "explicit": false,
                "lineno": {},
                "id": 2936
            },
            {
                "definition": false,
                "assumed": false,
                "temporal": null,
                "args": "(frame.ack.range.idx.spec.prop2, Implies(Apply(Const('frame.ack.range.idx.succ', FunctionSort(UninterpretedSort('frame.ack.range.idx',), UninterpretedSort('frame.ack.range.idx',), BooleanSort())), Var('X', UninterpretedSort('frame.ack.range.idx',)), Var('Z', UninterpretedSort('frame.ack.range.idx',))), And(Apply(Const('<', FunctionSort(UninterpretedSort('frame.ack.range.idx',), UninterpretedSort('frame.ack.range.idx',), BooleanSort())), Var('X', UninterpretedSort('frame.ack.range.idx',)), Var('Z', UninterpretedSort('frame.ack.range.idx',))), Not(And(Apply(Const('<', FunctionSort(UninterpretedSort('frame.ack.range.idx',), UninterpretedSort('frame.ack.range.idx',), BooleanSort())), Var('X', UninterpretedSort('frame.ack.range.idx',)), Var('Y', UninterpretedSort('frame.ack.range.idx',))), Apply(Const('<', FunctionSort(UninterpretedSort('frame.ack.range.idx',), UninterpretedSort('frame.ack.range.idx',), BooleanSort())), Var('Y', UninterpretedSort('frame.ack.range.idx',)), Var('Z', UninterpretedSort('frame.ack.range.idx',)))),))))",
                "explicit": false,
                "lineno": {},
                "id": 479
            },
            {
                "definition": false,
                "assumed": false,
                "temporal": null,
                "args": "(frame.ack.range.idx.spec.transitivity, Implies(And(Apply(Const('<', FunctionSort(UninterpretedSort('frame.ack.range.idx',), UninterpretedSort('frame.ack.range.idx',), BooleanSort())), Var('T', UninterpretedSort('frame.ack.range.idx',)), Var('U', UninterpretedSort('frame.ack.range.idx',))), Apply(Const('<', FunctionSort(UninterpretedSort('frame.ack.range.idx',), UninterpretedSort('frame.ack.range.idx',), BooleanSort())), Var('U', UninterpretedSort('frame.ack.range.idx',)), Var('V', UninterpretedSort('frame.ack.range.idx',)))), Apply(Const('<', FunctionSort(UninterpretedSort('frame.ack.range.idx',), UninterpretedSort('frame.ack.range.idx',), BooleanSort())), Var('T', UninterpretedSort('frame.ack.range.idx',)), Var('V', UninterpretedSort('frame.ack.range.idx',)))))",
                "explicit": false,
                "lineno": {},
                "id": 480
            },
            {
                "definition": false,
                "assumed": false,
                "temporal": null,
                "args": "(frame.ack.range.idx.spec.antisymmetry, Not(And(Apply(Const('<', FunctionSort(UninterpretedSort('frame.ack.range.idx',), UninterpretedSort('frame.ack.range.idx',), BooleanSort())), Var('T', UninterpretedSort('frame.ack.range.idx',)), Var('U', UninterpretedSort('frame.ack.range.idx',))), Apply(Const('<', FunctionSort(UninterpretedSort('frame.ack.range.idx',), UninterpretedSort('frame.ack.range.idx',), BooleanSort())), Var('U', UninterpretedSort('frame.ack.range.idx',)), Var('T', UninterpretedSort('frame.ack.range.idx',)))),))",
                "explicit": false,
                "lineno": {},
                "id": 481
            },
            {
                "definition": false,
                "assumed": false,
                "temporal": null,
                "args": "(frame.ack.range.idx.spec.totality, Or(Apply(Const('<', FunctionSort(UninterpretedSort('frame.ack.range.idx',), UninterpretedSort('frame.ack.range.idx',), BooleanSort())), Var('T', UninterpretedSort('frame.ack.range.idx',)), Var('U', UninterpretedSort('frame.ack.range.idx',))), Eq(Var('T', UninterpretedSort('frame.ack.range.idx',)), Var('U', UninterpretedSort('frame.ack.range.idx',))), Apply(Const('<', FunctionSort(UninterpretedSort('frame.ack.range.idx',), UninterpretedSort('frame.ack.range.idx',), BooleanSort())), Var('U', UninterpretedSort('frame.ack.range.idx',)), Var('T', UninterpretedSort('frame.ack.range.idx',)))))",
                "explicit": false,
                "lineno": {},
                "id": 482
            },
            {
                "definition": false,
                "assumed": false,
                "temporal": null,
                "args": "(frame.ack.range.idx.spec.prop1, Apply(Const('<=', FunctionSort(UninterpretedSort('frame.ack.range.idx',), UninterpretedSort('frame.ack.range.idx',), BooleanSort())), Const('0', UninterpretedSort('frame.ack.range.idx',)), Var('X', UninterpretedSort('frame.ack.range.idx',))))",
                "explicit": false,
                "lineno": {},
                "id": 483
            },
            {
                "definition": false,
                "assumed": false,
                "temporal": null,
                "args": "(frame.ack.range.arr.spec.prop103, Apply(Const('>=', FunctionSort(UninterpretedSort('frame.ack.range.idx',), UninterpretedSort('frame.ack.range.idx',), BooleanSort())), Apply(Const('frame.ack.range.arr.end', FunctionSort(UninterpretedSort('frame.ack.range.arr',), UninterpretedSort('frame.ack.range.idx',))), Var('X', UninterpretedSort('frame.ack.range.arr',))), Const('0', UninterpretedSort('frame.ack.range.idx',))))",
                "explicit": false,
                "lineno": {},
                "id": 487
            },
            {
                "definition": false,
                "assumed": false,
                "temporal": null,
                "args": "(frame.ack.range.arr.spec.extensionality._a, Implies(And(And(Eq(Apply(Const('frame.ack.range.arr.end', FunctionSort(UninterpretedSort('frame.ack.range.arr',), UninterpretedSort('frame.ack.range.idx',))), Var('X', UninterpretedSort('frame.ack.range.arr',))), Apply(Const('frame.ack.range.arr.end', FunctionSort(UninterpretedSort('frame.ack.range.arr',), UninterpretedSort('frame.ack.range.idx',))), Var('Y', UninterpretedSort('frame.ack.range.arr',)))), ForAll(frozenset([Var('I', UninterpretedSort('frame.ack.range.idx',))]), Implies(And(Apply(Const('<=', FunctionSort(UninterpretedSort('frame.ack.range.idx',), UninterpretedSort('frame.ack.range.idx',), BooleanSort())), Const('0', UninterpretedSort('frame.ack.range.idx',)), Var('I', UninterpretedSort('frame.ack.range.idx',))), Apply(Const('<', FunctionSort(UninterpretedSort('frame.ack.range.idx',), UninterpretedSort('frame.ack.range.idx',), BooleanSort())), Var('I', UninterpretedSort('frame.ack.range.idx',)), Apply(Const('frame.ack.range.arr.end', FunctionSort(UninterpretedSort('frame.ack.range.arr',), UninterpretedSort('frame.ack.range.idx',))), Var('X', UninterpretedSort('frame.ack.range.arr',))))), Eq(Apply(Const('frame.ack.range.arr.value', FunctionSort(UninterpretedSort('frame.ack.range.arr',), UninterpretedSort('frame.ack.range.idx',), UninterpretedSort('frame.ack.range',))), Var('X', UninterpretedSort('frame.ack.range.arr',)), Var('I', UninterpretedSort('frame.ack.range.idx',))), Apply(Const('frame.ack.range.arr.value', FunctionSort(UninterpretedSort('frame.ack.range.arr',), UninterpretedSort('frame.ack.range.idx',), UninterpretedSort('frame.ack.range',))), Var('Y', UninterpretedSort('frame.ack.range.arr',)), Var('I', UninterpretedSort('frame.ack.range.idx',))))))),), Eq(Var('X', UninterpretedSort('frame.ack.range.arr',)), Var('Y', UninterpretedSort('frame.ack.range.arr',)))))",
                "explicit": false,
                "lineno": {},
                "id": 2945
            },
            {
                "definition": false,
                "assumed": false,
                "temporal": null,
                "args": "(frame.ack_ecn.range.idx.spec.prop2, Implies(Apply(Const('frame.ack_ecn.range.idx.succ', FunctionSort(UninterpretedSort('frame.ack_ecn.range.idx',), UninterpretedSort('frame.ack_ecn.range.idx',), BooleanSort())), Var('X', UninterpretedSort('frame.ack_ecn.range.idx',)), Var('Z', UninterpretedSort('frame.ack_ecn.range.idx',))), And(Apply(Const('<', FunctionSort(UninterpretedSort('frame.ack_ecn.range.idx',), UninterpretedSort('frame.ack_ecn.range.idx',), BooleanSort())), Var('X', UninterpretedSort('frame.ack_ecn.range.idx',)), Var('Z', UninterpretedSort('frame.ack_ecn.range.idx',))), Not(And(Apply(Const('<', FunctionSort(UninterpretedSort('frame.ack_ecn.range.idx',), UninterpretedSort('frame.ack_ecn.range.idx',), BooleanSort())), Var('X', UninterpretedSort('frame.ack_ecn.range.idx',)), Var('Y', UninterpretedSort('frame.ack_ecn.range.idx',))), Apply(Const('<', FunctionSort(UninterpretedSort('frame.ack_ecn.range.idx',), UninterpretedSort('frame.ack_ecn.range.idx',), BooleanSort())), Var('Y', UninterpretedSort('frame.ack_ecn.range.idx',)), Var('Z', UninterpretedSort('frame.ack_ecn.range.idx',)))),))))",
                "explicit": false,
                "lineno": {},
                "id": 493
            },
            {
                "definition": false,
                "assumed": false,
                "temporal": null,
                "args": "(frame.ack_ecn.range.idx.spec.transitivity, Implies(And(Apply(Const('<', FunctionSort(UninterpretedSort('frame.ack_ecn.range.idx',), UninterpretedSort('frame.ack_ecn.range.idx',), BooleanSort())), Var('T', UninterpretedSort('frame.ack_ecn.range.idx',)), Var('U', UninterpretedSort('frame.ack_ecn.range.idx',))), Apply(Const('<', FunctionSort(UninterpretedSort('frame.ack_ecn.range.idx',), UninterpretedSort('frame.ack_ecn.range.idx',), BooleanSort())), Var('U', UninterpretedSort('frame.ack_ecn.range.idx',)), Var('V', UninterpretedSort('frame.ack_ecn.range.idx',)))), Apply(Const('<', FunctionSort(UninterpretedSort('frame.ack_ecn.range.idx',), UninterpretedSort('frame.ack_ecn.range.idx',), BooleanSort())), Var('T', UninterpretedSort('frame.ack_ecn.range.idx',)), Var('V', UninterpretedSort('frame.ack_ecn.range.idx',)))))",
                "explicit": false,
                "lineno": {},
                "id": 494
            },
            {
                "definition": false,
                "assumed": false,
                "temporal": null,
                "args": "(frame.ack_ecn.range.idx.spec.antisymmetry, Not(And(Apply(Const('<', FunctionSort(UninterpretedSort('frame.ack_ecn.range.idx',), UninterpretedSort('frame.ack_ecn.range.idx',), BooleanSort())), Var('T', UninterpretedSort('frame.ack_ecn.range.idx',)), Var('U', UninterpretedSort('frame.ack_ecn.range.idx',))), Apply(Const('<', FunctionSort(UninterpretedSort('frame.ack_ecn.range.idx',), UninterpretedSort('frame.ack_ecn.range.idx',), BooleanSort())), Var('U', UninterpretedSort('frame.ack_ecn.range.idx',)), Var('T', UninterpretedSort('frame.ack_ecn.range.idx',)))),))",
                "explicit": false,
                "lineno": {},
                "id": 495
            },
            {
                "definition": false,
                "assumed": false,
                "temporal": null,
                "args": "(frame.ack_ecn.range.idx.spec.totality, Or(Apply(Const('<', FunctionSort(UninterpretedSort('frame.ack_ecn.range.idx',), UninterpretedSort('frame.ack_ecn.range.idx',), BooleanSort())), Var('T', UninterpretedSort('frame.ack_ecn.range.idx',)), Var('U', UninterpretedSort('frame.ack_ecn.range.idx',))), Eq(Var('T', UninterpretedSort('frame.ack_ecn.range.idx',)), Var('U', UninterpretedSort('frame.ack_ecn.range.idx',))), Apply(Const('<', FunctionSort(UninterpretedSort('frame.ack_ecn.range.idx',), UninterpretedSort('frame.ack_ecn.range.idx',), BooleanSort())), Var('U', UninterpretedSort('frame.ack_ecn.range.idx',)), Var('T', UninterpretedSort('frame.ack_ecn.range.idx',)))))",
                "explicit": false,
                "lineno": {},
                "id": 496
            },
            {
                "definition": false,
                "assumed": false,
                "temporal": null,
                "args": "(frame.ack_ecn.range.idx.spec.prop1, Apply(Const('<=', FunctionSort(UninterpretedSort('frame.ack_ecn.range.idx',), UninterpretedSort('frame.ack_ecn.range.idx',), BooleanSort())), Const('0', UninterpretedSort('frame.ack_ecn.range.idx',)), Var('X', UninterpretedSort('frame.ack_ecn.range.idx',))))",
                "explicit": false,
                "lineno": {},
                "id": 497
            },
            {
                "definition": false,
                "assumed": false,
                "temporal": null,
                "args": "(frame.ack_ecn.range.arr.spec.prop103, Apply(Const('>=', FunctionSort(UninterpretedSort('frame.ack_ecn.range.idx',), UninterpretedSort('frame.ack_ecn.range.idx',), BooleanSort())), Apply(Const('frame.ack_ecn.range.arr.end', FunctionSort(UninterpretedSort('frame.ack_ecn.range.arr',), UninterpretedSort('frame.ack_ecn.range.idx',))), Var('X', UninterpretedSort('frame.ack_ecn.range.arr',))), Const('0', UninterpretedSort('frame.ack_ecn.range.idx',))))",
                "explicit": false,
                "lineno": {},
                "id": 501
            },
            {
                "definition": false,
                "assumed": false,
                "temporal": null,
                "args": "(frame.ack_ecn.range.arr.spec.extensionality._a, Implies(And(And(Eq(Apply(Const('frame.ack_ecn.range.arr.end', FunctionSort(UninterpretedSort('frame.ack_ecn.range.arr',), UninterpretedSort('frame.ack_ecn.range.idx',))), Var('X', UninterpretedSort('frame.ack_ecn.range.arr',))), Apply(Const('frame.ack_ecn.range.arr.end', FunctionSort(UninterpretedSort('frame.ack_ecn.range.arr',), UninterpretedSort('frame.ack_ecn.range.idx',))), Var('Y', UninterpretedSort('frame.ack_ecn.range.arr',)))), ForAll(frozenset([Var('I', UninterpretedSort('frame.ack_ecn.range.idx',))]), Implies(And(Apply(Const('<=', FunctionSort(UninterpretedSort('frame.ack_ecn.range.idx',), UninterpretedSort('frame.ack_ecn.range.idx',), BooleanSort())), Const('0', UninterpretedSort('frame.ack_ecn.range.idx',)), Var('I', UninterpretedSort('frame.ack_ecn.range.idx',))), Apply(Const('<', FunctionSort(UninterpretedSort('frame.ack_ecn.range.idx',), UninterpretedSort('frame.ack_ecn.range.idx',), BooleanSort())), Var('I', UninterpretedSort('frame.ack_ecn.range.idx',)), Apply(Const('frame.ack_ecn.range.arr.end', FunctionSort(UninterpretedSort('frame.ack_ecn.range.arr',), UninterpretedSort('frame.ack_ecn.range.idx',))), Var('X', UninterpretedSort('frame.ack_ecn.range.arr',))))), Eq(Apply(Const('frame.ack_ecn.range.arr.value', FunctionSort(UninterpretedSort('frame.ack_ecn.range.arr',), UninterpretedSort('frame.ack_ecn.range.idx',), UninterpretedSort('frame.ack_ecn.range',))), Var('X', UninterpretedSort('frame.ack_ecn.range.arr',)), Var('I', UninterpretedSort('frame.ack_ecn.range.idx',))), Apply(Const('frame.ack_ecn.range.arr.value', FunctionSort(UninterpretedSort('frame.ack_ecn.range.arr',), UninterpretedSort('frame.ack_ecn.range.idx',), UninterpretedSort('frame.ack_ecn.range',))), Var('Y', UninterpretedSort('frame.ack_ecn.range.arr',)), Var('I', UninterpretedSort('frame.ack_ecn.range.idx',))))))),), Eq(Var('X', UninterpretedSort('frame.ack_ecn.range.arr',)), Var('Y', UninterpretedSort('frame.ack_ecn.range.arr',)))))",
                "explicit": false,
                "lineno": {},
                "id": 2954
            },
            {
                "definition": false,
                "assumed": false,
                "temporal": null,
                "args": "(frame.idx.spec.prop2, Implies(Apply(Const('frame.idx.succ', FunctionSort(UninterpretedSort('frame.idx',), UninterpretedSort('frame.idx',), BooleanSort())), Var('X', UninterpretedSort('frame.idx',)), Var('Z', UninterpretedSort('frame.idx',))), And(Apply(Const('<', FunctionSort(UninterpretedSort('frame.idx',), UninterpretedSort('frame.idx',), BooleanSort())), Var('X', UninterpretedSort('frame.idx',)), Var('Z', UninterpretedSort('frame.idx',))), Not(And(Apply(Const('<', FunctionSort(UninterpretedSort('frame.idx',), UninterpretedSort('frame.idx',), BooleanSort())), Var('X', UninterpretedSort('frame.idx',)), Var('Y', UninterpretedSort('frame.idx',))), Apply(Const('<', FunctionSort(UninterpretedSort('frame.idx',), UninterpretedSort('frame.idx',), BooleanSort())), Var('Y', UninterpretedSort('frame.idx',)), Var('Z', UninterpretedSort('frame.idx',)))),))))",
                "explicit": false,
                "lineno": {},
                "id": 507
            },
            {
                "definition": false,
                "assumed": false,
                "temporal": null,
                "args": "(frame.idx.spec.transitivity, Implies(And(Apply(Const('<', FunctionSort(UninterpretedSort('frame.idx',), UninterpretedSort('frame.idx',), BooleanSort())), Var('T', UninterpretedSort('frame.idx',)), Var('U', UninterpretedSort('frame.idx',))), Apply(Const('<', FunctionSort(UninterpretedSort('frame.idx',), UninterpretedSort('frame.idx',), BooleanSort())), Var('U', UninterpretedSort('frame.idx',)), Var('V', UninterpretedSort('frame.idx',)))), Apply(Const('<', FunctionSort(UninterpretedSort('frame.idx',), UninterpretedSort('frame.idx',), BooleanSort())), Var('T', UninterpretedSort('frame.idx',)), Var('V', UninterpretedSort('frame.idx',)))))",
                "explicit": false,
                "lineno": {},
                "id": 508
            },
            {
                "definition": false,
                "assumed": false,
                "temporal": null,
                "args": "(frame.idx.spec.antisymmetry, Not(And(Apply(Const('<', FunctionSort(UninterpretedSort('frame.idx',), UninterpretedSort('frame.idx',), BooleanSort())), Var('T', UninterpretedSort('frame.idx',)), Var('U', UninterpretedSort('frame.idx',))), Apply(Const('<', FunctionSort(UninterpretedSort('frame.idx',), UninterpretedSort('frame.idx',), BooleanSort())), Var('U', UninterpretedSort('frame.idx',)), Var('T', UninterpretedSort('frame.idx',)))),))",
                "explicit": false,
                "lineno": {},
                "id": 509
            },
            {
                "definition": false,
                "assumed": false,
                "temporal": null,
                "args": "(frame.idx.spec.totality, Or(Apply(Const('<', FunctionSort(UninterpretedSort('frame.idx',), UninterpretedSort('frame.idx',), BooleanSort())), Var('T', UninterpretedSort('frame.idx',)), Var('U', UninterpretedSort('frame.idx',))), Eq(Var('T', UninterpretedSort('frame.idx',)), Var('U', UninterpretedSort('frame.idx',))), Apply(Const('<', FunctionSort(UninterpretedSort('frame.idx',), UninterpretedSort('frame.idx',), BooleanSort())), Var('U', UninterpretedSort('frame.idx',)), Var('T', UninterpretedSort('frame.idx',)))))",
                "explicit": false,
                "lineno": {},
                "id": 510
            },
            {
                "definition": false,
                "assumed": false,
                "temporal": null,
                "args": "(frame.idx.spec.prop1, Apply(Const('<=', FunctionSort(UninterpretedSort('frame.idx',), UninterpretedSort('frame.idx',), BooleanSort())), Const('0', UninterpretedSort('frame.idx',)), Var('X', UninterpretedSort('frame.idx',))))",
                "explicit": false,
                "lineno": {},
                "id": 511
            },
            {
                "definition": false,
                "assumed": false,
                "temporal": null,
                "args": "(frame.arr.spec.prop103, Apply(Const('>=', FunctionSort(UninterpretedSort('frame.idx',), UninterpretedSort('frame.idx',), BooleanSort())), Apply(Const('frame.arr.end', FunctionSort(UninterpretedSort('frame.arr',), UninterpretedSort('frame.idx',))), Var('X', UninterpretedSort('frame.arr',))), Const('0', UninterpretedSort('frame.idx',))))",
                "explicit": false,
                "lineno": {},
                "id": 515
            },
            {
                "definition": false,
                "assumed": false,
                "temporal": null,
                "args": "(frame.arr.spec.extensionality._a, Implies(And(And(Eq(Apply(Const('frame.arr.end', FunctionSort(UninterpretedSort('frame.arr',), UninterpretedSort('frame.idx',))), Var('X', UninterpretedSort('frame.arr',))), Apply(Const('frame.arr.end', FunctionSort(UninterpretedSort('frame.arr',), UninterpretedSort('frame.idx',))), Var('Y', UninterpretedSort('frame.arr',)))), ForAll(frozenset([Var('I', UninterpretedSort('frame.idx',))]), Implies(And(Apply(Const('<=', FunctionSort(UninterpretedSort('frame.idx',), UninterpretedSort('frame.idx',), BooleanSort())), Const('0', UninterpretedSort('frame.idx',)), Var('I', UninterpretedSort('frame.idx',))), Apply(Const('<', FunctionSort(UninterpretedSort('frame.idx',), UninterpretedSort('frame.idx',), BooleanSort())), Var('I', UninterpretedSort('frame.idx',)), Apply(Const('frame.arr.end', FunctionSort(UninterpretedSort('frame.arr',), UninterpretedSort('frame.idx',))), Var('X', UninterpretedSort('frame.arr',))))), Eq(Apply(Const('frame.arr.value', FunctionSort(UninterpretedSort('frame.arr',), UninterpretedSort('frame.idx',), UninterpretedSort('frame',))), Var('X', UninterpretedSort('frame.arr',)), Var('I', UninterpretedSort('frame.idx',))), Apply(Const('frame.arr.value', FunctionSort(UninterpretedSort('frame.arr',), UninterpretedSort('frame.idx',), UninterpretedSort('frame',))), Var('Y', UninterpretedSort('frame.arr',)), Var('I', UninterpretedSort('frame.idx',))))))),), Eq(Var('X', UninterpretedSort('frame.arr',)), Var('Y', UninterpretedSort('frame.arr',)))))",
                "explicit": false,
                "lineno": {},
                "id": 2963
            },
            {
                "definition": false,
                "assumed": false,
                "temporal": null,
                "args": "(index.spec.prop2, Implies(Apply(Const('index.succ', FunctionSort(UninterpretedSort('index',), UninterpretedSort('index',), BooleanSort())), Var('X', UninterpretedSort('index',)), Var('Z', UninterpretedSort('index',))), And(Apply(Const('<', FunctionSort(UninterpretedSort('index',), UninterpretedSort('index',), BooleanSort())), Var('X', UninterpretedSort('index',)), Var('Z', UninterpretedSort('index',))), Not(And(Apply(Const('<', FunctionSort(UninterpretedSort('index',), UninterpretedSort('index',), BooleanSort())), Var('X', UninterpretedSort('index',)), Var('Y', UninterpretedSort('index',))), Apply(Const('<', FunctionSort(UninterpretedSort('index',), UninterpretedSort('index',), BooleanSort())), Var('Y', UninterpretedSort('index',)), Var('Z', UninterpretedSort('index',)))),))))",
                "explicit": false,
                "lineno": {},
                "id": 521
            },
            {
                "definition": false,
                "assumed": false,
                "temporal": null,
                "args": "(index.spec.transitivity, Implies(And(Apply(Const('<', FunctionSort(UninterpretedSort('index',), UninterpretedSort('index',), BooleanSort())), Var('T', UninterpretedSort('index',)), Var('U', UninterpretedSort('index',))), Apply(Const('<', FunctionSort(UninterpretedSort('index',), UninterpretedSort('index',), BooleanSort())), Var('U', UninterpretedSort('index',)), Var('V', UninterpretedSort('index',)))), Apply(Const('<', FunctionSort(UninterpretedSort('index',), UninterpretedSort('index',), BooleanSort())), Var('T', UninterpretedSort('index',)), Var('V', UninterpretedSort('index',)))))",
                "explicit": false,
                "lineno": {},
                "id": 522
            },
            {
                "definition": false,
                "assumed": false,
                "temporal": null,
                "args": "(index.spec.antisymmetry, Not(And(Apply(Const('<', FunctionSort(UninterpretedSort('index',), UninterpretedSort('index',), BooleanSort())), Var('T', UninterpretedSort('index',)), Var('U', UninterpretedSort('index',))), Apply(Const('<', FunctionSort(UninterpretedSort('index',), UninterpretedSort('index',), BooleanSort())), Var('U', UninterpretedSort('index',)), Var('T', UninterpretedSort('index',)))),))",
                "explicit": false,
                "lineno": {},
                "id": 523
            },
            {
                "definition": false,
                "assumed": false,
                "temporal": null,
                "args": "(index.spec.totality, Or(Apply(Const('<', FunctionSort(UninterpretedSort('index',), UninterpretedSort('index',), BooleanSort())), Var('T', UninterpretedSort('index',)), Var('U', UninterpretedSort('index',))), Eq(Var('T', UninterpretedSort('index',)), Var('U', UninterpretedSort('index',))), Apply(Const('<', FunctionSort(UninterpretedSort('index',), UninterpretedSort('index',), BooleanSort())), Var('U', UninterpretedSort('index',)), Var('T', UninterpretedSort('index',)))))",
                "explicit": false,
                "lineno": {},
                "id": 524
            },
            {
                "definition": false,
                "assumed": false,
                "temporal": null,
                "args": "(index.spec.prop1, Apply(Const('<=', FunctionSort(UninterpretedSort('index',), UninterpretedSort('index',), BooleanSort())), Const('0', UninterpretedSort('index',)), Var('X', UninterpretedSort('index',))))",
                "explicit": false,
                "lineno": {},
                "id": 525
            },
            {
                "definition": false,
                "assumed": false,
                "temporal": null,
                "args": "(versions.spec.prop103, Apply(Const('>=', FunctionSort(UninterpretedSort('index',), UninterpretedSort('index',), BooleanSort())), Apply(Const('versions.end', FunctionSort(UninterpretedSort('versions',), UninterpretedSort('index',))), Var('X', UninterpretedSort('versions',))), Const('0', UninterpretedSort('index',))))",
                "explicit": false,
                "lineno": {},
                "id": 529
            },
            {
                "definition": false,
                "assumed": false,
                "temporal": null,
                "args": "(versions.spec.extensionality._a, Implies(And(And(Eq(Apply(Const('versions.end', FunctionSort(UninterpretedSort('versions',), UninterpretedSort('index',))), Var('X', UninterpretedSort('versions',))), Apply(Const('versions.end', FunctionSort(UninterpretedSort('versions',), UninterpretedSort('index',))), Var('Y', UninterpretedSort('versions',)))), ForAll(frozenset([Var('I', UninterpretedSort('index',))]), Implies(And(Apply(Const('<=', FunctionSort(UninterpretedSort('index',), UninterpretedSort('index',), BooleanSort())), Const('0', UninterpretedSort('index',)), Var('I', UninterpretedSort('index',))), Apply(Const('<', FunctionSort(UninterpretedSort('index',), UninterpretedSort('index',), BooleanSort())), Var('I', UninterpretedSort('index',)), Apply(Const('versions.end', FunctionSort(UninterpretedSort('versions',), UninterpretedSort('index',))), Var('X', UninterpretedSort('versions',))))), Eq(Apply(Const('versions.value', FunctionSort(UninterpretedSort('versions',), UninterpretedSort('index',), UninterpretedSort('stream_data',))), Var('X', UninterpretedSort('versions',)), Var('I', UninterpretedSort('index',))), Apply(Const('versions.value', FunctionSort(UninterpretedSort('versions',), UninterpretedSort('index',), UninterpretedSort('stream_data',))), Var('Y', UninterpretedSort('versions',)), Var('I', UninterpretedSort('index',))))))),), Eq(Var('X', UninterpretedSort('versions',)), Var('Y', UninterpretedSort('versions',)))))",
                "explicit": false,
                "lineno": {},
                "id": 2972
            },
            {
                "definition": false,
                "assumed": false,
                "temporal": null,
                "args": "(versions_bv.spec.prop103, Apply(Const('>=', FunctionSort(UninterpretedSort('index',), UninterpretedSort('index',), BooleanSort())), Apply(Const('versions_bv.end', FunctionSort(UninterpretedSort('versions_bv',), UninterpretedSort('index',))), Var('X', UninterpretedSort('versions_bv',))), Const('0', UninterpretedSort('index',))))",
                "explicit": false,
                "lineno": {},
                "id": 538
            },
            {
                "definition": false,
                "assumed": false,
                "temporal": null,
                "args": "(versions_bv.spec.extensionality._a, Implies(And(And(Eq(Apply(Const('versions_bv.end', FunctionSort(UninterpretedSort('versions_bv',), UninterpretedSort('index',))), Var('X', UninterpretedSort('versions_bv',))), Apply(Const('versions_bv.end', FunctionSort(UninterpretedSort('versions_bv',), UninterpretedSort('index',))), Var('Y', UninterpretedSort('versions_bv',)))), ForAll(frozenset([Var('I', UninterpretedSort('index',))]), Implies(And(Apply(Const('<=', FunctionSort(UninterpretedSort('index',), UninterpretedSort('index',), BooleanSort())), Const('0', UninterpretedSort('index',)), Var('I', UninterpretedSort('index',))), Apply(Const('<', FunctionSort(UninterpretedSort('index',), UninterpretedSort('index',), BooleanSort())), Var('I', UninterpretedSort('index',)), Apply(Const('versions_bv.end', FunctionSort(UninterpretedSort('versions_bv',), UninterpretedSort('index',))), Var('X', UninterpretedSort('versions_bv',))))), Eq(Apply(Const('versions_bv.value', FunctionSort(UninterpretedSort('versions_bv',), UninterpretedSort('index',), UninterpretedSort('version',))), Var('X', UninterpretedSort('versions_bv',)), Var('I', UninterpretedSort('index',))), Apply(Const('versions_bv.value', FunctionSort(UninterpretedSort('versions_bv',), UninterpretedSort('index',), UninterpretedSort('version',))), Var('Y', UninterpretedSort('versions_bv',)), Var('I', UninterpretedSort('index',))))))),), Eq(Var('X', UninterpretedSort('versions_bv',)), Var('Y', UninterpretedSort('versions_bv',)))))",
                "explicit": false,
                "lineno": {},
                "id": 2976
            },
            {
                "definition": false,
                "assumed": false,
                "temporal": null,
                "args": "(quic_packet_vn.idx.spec.prop2, Implies(Apply(Const('quic_packet_vn.idx.succ', FunctionSort(UninterpretedSort('quic_packet_vn.idx',), UninterpretedSort('quic_packet_vn.idx',), BooleanSort())), Var('X', UninterpretedSort('quic_packet_vn.idx',)), Var('Z', UninterpretedSort('quic_packet_vn.idx',))), And(Apply(Const('<', FunctionSort(UninterpretedSort('quic_packet_vn.idx',), UninterpretedSort('quic_packet_vn.idx',), BooleanSort())), Var('X', UninterpretedSort('quic_packet_vn.idx',)), Var('Z', UninterpretedSort('quic_packet_vn.idx',))), Not(And(Apply(Const('<', FunctionSort(UninterpretedSort('quic_packet_vn.idx',), UninterpretedSort('quic_packet_vn.idx',), BooleanSort())), Var('X', UninterpretedSort('quic_packet_vn.idx',)), Var('Y', UninterpretedSort('quic_packet_vn.idx',))), Apply(Const('<', FunctionSort(UninterpretedSort('quic_packet_vn.idx',), UninterpretedSort('quic_packet_vn.idx',), BooleanSort())), Var('Y', UninterpretedSort('quic_packet_vn.idx',)), Var('Z', UninterpretedSort('quic_packet_vn.idx',)))),))))",
                "explicit": false,
                "lineno": {},
                "id": 558
            },
            {
                "definition": false,
                "assumed": false,
                "temporal": null,
                "args": "(quic_packet_vn.idx.spec.transitivity, Implies(And(Apply(Const('<', FunctionSort(UninterpretedSort('quic_packet_vn.idx',), UninterpretedSort('quic_packet_vn.idx',), BooleanSort())), Var('T', UninterpretedSort('quic_packet_vn.idx',)), Var('U', UninterpretedSort('quic_packet_vn.idx',))), Apply(Const('<', FunctionSort(UninterpretedSort('quic_packet_vn.idx',), UninterpretedSort('quic_packet_vn.idx',), BooleanSort())), Var('U', UninterpretedSort('quic_packet_vn.idx',)), Var('V', UninterpretedSort('quic_packet_vn.idx',)))), Apply(Const('<', FunctionSort(UninterpretedSort('quic_packet_vn.idx',), UninterpretedSort('quic_packet_vn.idx',), BooleanSort())), Var('T', UninterpretedSort('quic_packet_vn.idx',)), Var('V', UninterpretedSort('quic_packet_vn.idx',)))))",
                "explicit": false,
                "lineno": {},
                "id": 559
            },
            {
                "definition": false,
                "assumed": false,
                "temporal": null,
                "args": "(quic_packet_vn.idx.spec.antisymmetry, Not(And(Apply(Const('<', FunctionSort(UninterpretedSort('quic_packet_vn.idx',), UninterpretedSort('quic_packet_vn.idx',), BooleanSort())), Var('T', UninterpretedSort('quic_packet_vn.idx',)), Var('U', UninterpretedSort('quic_packet_vn.idx',))), Apply(Const('<', FunctionSort(UninterpretedSort('quic_packet_vn.idx',), UninterpretedSort('quic_packet_vn.idx',), BooleanSort())), Var('U', UninterpretedSort('quic_packet_vn.idx',)), Var('T', UninterpretedSort('quic_packet_vn.idx',)))),))",
                "explicit": false,
                "lineno": {},
                "id": 560
            },
            {
                "definition": false,
                "assumed": false,
                "temporal": null,
                "args": "(quic_packet_vn.idx.spec.totality, Or(Apply(Const('<', FunctionSort(UninterpretedSort('quic_packet_vn.idx',), UninterpretedSort('quic_packet_vn.idx',), BooleanSort())), Var('T', UninterpretedSort('quic_packet_vn.idx',)), Var('U', UninterpretedSort('quic_packet_vn.idx',))), Eq(Var('T', UninterpretedSort('quic_packet_vn.idx',)), Var('U', UninterpretedSort('quic_packet_vn.idx',))), Apply(Const('<', FunctionSort(UninterpretedSort('quic_packet_vn.idx',), UninterpretedSort('quic_packet_vn.idx',), BooleanSort())), Var('U', UninterpretedSort('quic_packet_vn.idx',)), Var('T', UninterpretedSort('quic_packet_vn.idx',)))))",
                "explicit": false,
                "lineno": {},
                "id": 561
            },
            {
                "definition": false,
                "assumed": false,
                "temporal": null,
                "args": "(quic_packet_vn.idx.spec.prop1, Apply(Const('<=', FunctionSort(UninterpretedSort('quic_packet_vn.idx',), UninterpretedSort('quic_packet_vn.idx',), BooleanSort())), Const('0', UninterpretedSort('quic_packet_vn.idx',)), Var('X', UninterpretedSort('quic_packet_vn.idx',))))",
                "explicit": false,
                "lineno": {},
                "id": 562
            },
            {
                "definition": false,
                "assumed": false,
                "temporal": null,
                "args": "(quic_packet_vn.arr.spec.prop103, Apply(Const('>=', FunctionSort(UninterpretedSort('quic_packet_vn.idx',), UninterpretedSort('quic_packet_vn.idx',), BooleanSort())), Apply(Const('quic_packet_vn.arr.end', FunctionSort(UninterpretedSort('quic_packet_vn.arr',), UninterpretedSort('quic_packet_vn.idx',))), Var('X', UninterpretedSort('quic_packet_vn.arr',))), Const('0', UninterpretedSort('quic_packet_vn.idx',))))",
                "explicit": false,
                "lineno": {},
                "id": 566
            },
            {
                "definition": false,
                "assumed": false,
                "temporal": null,
                "args": "(quic_packet_vn.arr.spec.extensionality._a, Implies(And(And(Eq(Apply(Const('quic_packet_vn.arr.end', FunctionSort(UninterpretedSort('quic_packet_vn.arr',), UninterpretedSort('quic_packet_vn.idx',))), Var('X', UninterpretedSort('quic_packet_vn.arr',))), Apply(Const('quic_packet_vn.arr.end', FunctionSort(UninterpretedSort('quic_packet_vn.arr',), UninterpretedSort('quic_packet_vn.idx',))), Var('Y', UninterpretedSort('quic_packet_vn.arr',)))), ForAll(frozenset([Var('I', UninterpretedSort('quic_packet_vn.idx',))]), Implies(And(Apply(Const('<=', FunctionSort(UninterpretedSort('quic_packet_vn.idx',), UninterpretedSort('quic_packet_vn.idx',), BooleanSort())), Const('0', UninterpretedSort('quic_packet_vn.idx',)), Var('I', UninterpretedSort('quic_packet_vn.idx',))), Apply(Const('<', FunctionSort(UninterpretedSort('quic_packet_vn.idx',), UninterpretedSort('quic_packet_vn.idx',), BooleanSort())), Var('I', UninterpretedSort('quic_packet_vn.idx',)), Apply(Const('quic_packet_vn.arr.end', FunctionSort(UninterpretedSort('quic_packet_vn.arr',), UninterpretedSort('quic_packet_vn.idx',))), Var('X', UninterpretedSort('quic_packet_vn.arr',))))), Eq(Apply(Const('quic_packet_vn.arr.value', FunctionSort(UninterpretedSort('quic_packet_vn.arr',), UninterpretedSort('quic_packet_vn.idx',), UninterpretedSort('quic_packet_vn',))), Var('X', UninterpretedSort('quic_packet_vn.arr',)), Var('I', UninterpretedSort('quic_packet_vn.idx',))), Apply(Const('quic_packet_vn.arr.value', FunctionSort(UninterpretedSort('quic_packet_vn.arr',), UninterpretedSort('quic_packet_vn.idx',), UninterpretedSort('quic_packet_vn',))), Var('Y', UninterpretedSort('quic_packet_vn.arr',)), Var('I', UninterpretedSort('quic_packet_vn.idx',))))))),), Eq(Var('X', UninterpretedSort('quic_packet_vn.arr',)), Var('Y', UninterpretedSort('quic_packet_vn.arr',)))))",
                "explicit": false,
                "lineno": {},
                "id": 2985
            },
            {
                "definition": false,
                "assumed": false,
                "temporal": null,
                "args": "(vector[transport_parameter].domain.spec.prop2, Implies(Apply(Const('vector[transport_parameter].domain.succ', FunctionSort(UninterpretedSort('vector[transport_parameter].domain',), UninterpretedSort('vector[transport_parameter].domain',), BooleanSort())), Var('X', UninterpretedSort('vector[transport_parameter].domain',)), Var('Z', UninterpretedSort('vector[transport_parameter].domain',))), And(Apply(Const('<', FunctionSort(UninterpretedSort('vector[transport_parameter].domain',), UninterpretedSort('vector[transport_parameter].domain',), BooleanSort())), Var('X', UninterpretedSort('vector[transport_parameter].domain',)), Var('Z', UninterpretedSort('vector[transport_parameter].domain',))), Not(And(Apply(Const('<', FunctionSort(UninterpretedSort('vector[transport_parameter].domain',), UninterpretedSort('vector[transport_parameter].domain',), BooleanSort())), Var('X', UninterpretedSort('vector[transport_parameter].domain',)), Var('Y', UninterpretedSort('vector[transport_parameter].domain',))), Apply(Const('<', FunctionSort(UninterpretedSort('vector[transport_parameter].domain',), UninterpretedSort('vector[transport_parameter].domain',), BooleanSort())), Var('Y', UninterpretedSort('vector[transport_parameter].domain',)), Var('Z', UninterpretedSort('vector[transport_parameter].domain',)))),))))",
                "explicit": false,
                "lineno": {},
                "id": 1289
            },
            {
                "definition": false,
                "assumed": false,
                "temporal": null,
                "args": "(vector[transport_parameter].domain.spec.transitivity, Implies(And(Apply(Const('<', FunctionSort(UninterpretedSort('vector[transport_parameter].domain',), UninterpretedSort('vector[transport_parameter].domain',), BooleanSort())), Var('T', UninterpretedSort('vector[transport_parameter].domain',)), Var('U', UninterpretedSort('vector[transport_parameter].domain',))), Apply(Const('<', FunctionSort(UninterpretedSort('vector[transport_parameter].domain',), UninterpretedSort('vector[transport_parameter].domain',), BooleanSort())), Var('U', UninterpretedSort('vector[transport_parameter].domain',)), Var('V', UninterpretedSort('vector[transport_parameter].domain',)))), Apply(Const('<', FunctionSort(UninterpretedSort('vector[transport_parameter].domain',), UninterpretedSort('vector[transport_parameter].domain',), BooleanSort())), Var('T', UninterpretedSort('vector[transport_parameter].domain',)), Var('V', UninterpretedSort('vector[transport_parameter].domain',)))))",
                "explicit": false,
                "lineno": {},
                "id": 1290
            },
            {
                "definition": false,
                "assumed": false,
                "temporal": null,
                "args": "(vector[transport_parameter].domain.spec.antisymmetry, Not(And(Apply(Const('<', FunctionSort(UninterpretedSort('vector[transport_parameter].domain',), UninterpretedSort('vector[transport_parameter].domain',), BooleanSort())), Var('T', UninterpretedSort('vector[transport_parameter].domain',)), Var('U', UninterpretedSort('vector[transport_parameter].domain',))), Apply(Const('<', FunctionSort(UninterpretedSort('vector[transport_parameter].domain',), UninterpretedSort('vector[transport_parameter].domain',), BooleanSort())), Var('U', UninterpretedSort('vector[transport_parameter].domain',)), Var('T', UninterpretedSort('vector[transport_parameter].domain',)))),))",
                "explicit": false,
                "lineno": {},
                "id": 1291
            },
            {
                "definition": false,
                "assumed": false,
                "temporal": null,
                "args": "(vector[transport_parameter].domain.spec.totality, Or(Apply(Const('<', FunctionSort(UninterpretedSort('vector[transport_parameter].domain',), UninterpretedSort('vector[transport_parameter].domain',), BooleanSort())), Var('T', UninterpretedSort('vector[transport_parameter].domain',)), Var('U', UninterpretedSort('vector[transport_parameter].domain',))), Eq(Var('T', UninterpretedSort('vector[transport_parameter].domain',)), Var('U', UninterpretedSort('vector[transport_parameter].domain',))), Apply(Const('<', FunctionSort(UninterpretedSort('vector[transport_parameter].domain',), UninterpretedSort('vector[transport_parameter].domain',), BooleanSort())), Var('U', UninterpretedSort('vector[transport_parameter].domain',)), Var('T', UninterpretedSort('vector[transport_parameter].domain',)))))",
                "explicit": false,
                "lineno": {},
                "id": 1292
            },
            {
                "definition": false,
                "assumed": false,
                "temporal": null,
                "args": "(vector[transport_parameter].domain.spec.prop1, Apply(Const('<=', FunctionSort(UninterpretedSort('vector[transport_parameter].domain',), UninterpretedSort('vector[transport_parameter].domain',), BooleanSort())), Const('0', UninterpretedSort('vector[transport_parameter].domain',)), Var('X', UninterpretedSort('vector[transport_parameter].domain',))))",
                "explicit": false,
                "lineno": {},
                "id": 1293
            },
            {
                "definition": false,
                "assumed": false,
                "temporal": null,
                "args": "(vector[transport_parameter].spec.prop103, Apply(Const('>=', FunctionSort(UninterpretedSort('vector[transport_parameter].domain',), UninterpretedSort('vector[transport_parameter].domain',), BooleanSort())), Apply(Const('vector[transport_parameter].end', FunctionSort(UninterpretedSort('vector[transport_parameter]',), UninterpretedSort('vector[transport_parameter].domain',))), Var('X', UninterpretedSort('vector[transport_parameter]',))), Const('0', UninterpretedSort('vector[transport_parameter].domain',))))",
                "explicit": false,
                "lineno": {},
                "id": 1297
            },
            {
                "definition": false,
                "assumed": false,
                "temporal": null,
                "args": "(vector[transport_parameter].spec.extensionality._a, Implies(And(And(Eq(Apply(Const('vector[transport_parameter].end', FunctionSort(UninterpretedSort('vector[transport_parameter]',), UninterpretedSort('vector[transport_parameter].domain',))), Var('X', UninterpretedSort('vector[transport_parameter]',))), Apply(Const('vector[transport_parameter].end', FunctionSort(UninterpretedSort('vector[transport_parameter]',), UninterpretedSort('vector[transport_parameter].domain',))), Var('Y', UninterpretedSort('vector[transport_parameter]',)))), ForAll(frozenset([Var('I', UninterpretedSort('vector[transport_parameter].domain',))]), Implies(And(Apply(Const('<=', FunctionSort(UninterpretedSort('vector[transport_parameter].domain',), UninterpretedSort('vector[transport_parameter].domain',), BooleanSort())), Const('0', UninterpretedSort('vector[transport_parameter].domain',)), Var('I', UninterpretedSort('vector[transport_parameter].domain',))), Apply(Const('<', FunctionSort(UninterpretedSort('vector[transport_parameter].domain',), UninterpretedSort('vector[transport_parameter].domain',), BooleanSort())), Var('I', UninterpretedSort('vector[transport_parameter].domain',)), Apply(Const('vector[transport_parameter].end', FunctionSort(UninterpretedSort('vector[transport_parameter]',), UninterpretedSort('vector[transport_parameter].domain',))), Var('X', UninterpretedSort('vector[transport_parameter]',))))), Eq(Apply(Const('vector[transport_parameter].value', FunctionSort(UninterpretedSort('vector[transport_parameter]',), UninterpretedSort('vector[transport_parameter].domain',), UninterpretedSort('transport_parameter',))), Var('X', UninterpretedSort('vector[transport_parameter]',)), Var('I', UninterpretedSort('vector[transport_parameter].domain',))), Apply(Const('vector[transport_parameter].value', FunctionSort(UninterpretedSort('vector[transport_parameter]',), UninterpretedSort('vector[transport_parameter].domain',), UninterpretedSort('transport_parameter',))), Var('Y', UninterpretedSort('vector[transport_parameter]',)), Var('I', UninterpretedSort('vector[transport_parameter].domain',))))))),), Eq(Var('X', UninterpretedSort('vector[transport_parameter]',)), Var('Y', UninterpretedSort('vector[transport_parameter]',)))))",
                "explicit": false,
                "lineno": {},
                "id": 2994
            },
            {
                "definition": false,
                "assumed": false,
                "temporal": null,
                "args": "(idx_s.spec.prop2, Implies(Apply(Const('idx_s.succ', FunctionSort(UninterpretedSort('idx_s',), UninterpretedSort('idx_s',), BooleanSort())), Var('X', UninterpretedSort('idx_s',)), Var('Z', UninterpretedSort('idx_s',))), And(Apply(Const('<', FunctionSort(UninterpretedSort('idx_s',), UninterpretedSort('idx_s',), BooleanSort())), Var('X', UninterpretedSort('idx_s',)), Var('Z', UninterpretedSort('idx_s',))), Not(And(Apply(Const('<', FunctionSort(UninterpretedSort('idx_s',), UninterpretedSort('idx_s',), BooleanSort())), Var('X', UninterpretedSort('idx_s',)), Var('Y', UninterpretedSort('idx_s',))), Apply(Const('<', FunctionSort(UninterpretedSort('idx_s',), UninterpretedSort('idx_s',), BooleanSort())), Var('Y', UninterpretedSort('idx_s',)), Var('Z', UninterpretedSort('idx_s',)))),))))",
                "explicit": false,
                "lineno": {},
                "id": 578
            },
            {
                "definition": false,
                "assumed": false,
                "temporal": null,
                "args": "(idx_s.spec.transitivity, Implies(And(Apply(Const('<', FunctionSort(UninterpretedSort('idx_s',), UninterpretedSort('idx_s',), BooleanSort())), Var('T', UninterpretedSort('idx_s',)), Var('U', UninterpretedSort('idx_s',))), Apply(Const('<', FunctionSort(UninterpretedSort('idx_s',), UninterpretedSort('idx_s',), BooleanSort())), Var('U', UninterpretedSort('idx_s',)), Var('V', UninterpretedSort('idx_s',)))), Apply(Const('<', FunctionSort(UninterpretedSort('idx_s',), UninterpretedSort('idx_s',), BooleanSort())), Var('T', UninterpretedSort('idx_s',)), Var('V', UninterpretedSort('idx_s',)))))",
                "explicit": false,
                "lineno": {},
                "id": 579
            },
            {
                "definition": false,
                "assumed": false,
                "temporal": null,
                "args": "(idx_s.spec.antisymmetry, Not(And(Apply(Const('<', FunctionSort(UninterpretedSort('idx_s',), UninterpretedSort('idx_s',), BooleanSort())), Var('T', UninterpretedSort('idx_s',)), Var('U', UninterpretedSort('idx_s',))), Apply(Const('<', FunctionSort(UninterpretedSort('idx_s',), UninterpretedSort('idx_s',), BooleanSort())), Var('U', UninterpretedSort('idx_s',)), Var('T', UninterpretedSort('idx_s',)))),))",
                "explicit": false,
                "lineno": {},
                "id": 580
            },
            {
                "definition": false,
                "assumed": false,
                "temporal": null,
                "args": "(idx_s.spec.totality, Or(Apply(Const('<', FunctionSort(UninterpretedSort('idx_s',), UninterpretedSort('idx_s',), BooleanSort())), Var('T', UninterpretedSort('idx_s',)), Var('U', UninterpretedSort('idx_s',))), Eq(Var('T', UninterpretedSort('idx_s',)), Var('U', UninterpretedSort('idx_s',))), Apply(Const('<', FunctionSort(UninterpretedSort('idx_s',), UninterpretedSort('idx_s',), BooleanSort())), Var('U', UninterpretedSort('idx_s',)), Var('T', UninterpretedSort('idx_s',)))))",
                "explicit": false,
                "lineno": {},
                "id": 581
            },
            {
                "definition": false,
                "assumed": false,
                "temporal": null,
                "args": "(idx_s.spec.prop1, Apply(Const('<=', FunctionSort(UninterpretedSort('idx_s',), UninterpretedSort('idx_s',), BooleanSort())), Const('0', UninterpretedSort('idx_s',)), Var('X', UninterpretedSort('idx_s',))))",
                "explicit": false,
                "lineno": {},
                "id": 582
            },
            {
                "definition": false,
                "assumed": false,
                "temporal": null,
                "args": "(arr_streamid_s.spec.prop103, Apply(Const('>=', FunctionSort(UninterpretedSort('idx_s',), UninterpretedSort('idx_s',), BooleanSort())), Apply(Const('arr_streamid_s.end', FunctionSort(UninterpretedSort('arr_streamid_s',), UninterpretedSort('idx_s',))), Var('X', UninterpretedSort('arr_streamid_s',))), Const('0', UninterpretedSort('idx_s',))))",
                "explicit": false,
                "lineno": {},
                "id": 586
            },
            {
                "definition": false,
                "assumed": false,
                "temporal": null,
                "args": "(arr_streamid_s.spec.extensionality._a, Implies(And(And(Eq(Apply(Const('arr_streamid_s.end', FunctionSort(UninterpretedSort('arr_streamid_s',), UninterpretedSort('idx_s',))), Var('X', UninterpretedSort('arr_streamid_s',))), Apply(Const('arr_streamid_s.end', FunctionSort(UninterpretedSort('arr_streamid_s',), UninterpretedSort('idx_s',))), Var('Y', UninterpretedSort('arr_streamid_s',)))), ForAll(frozenset([Var('I', UninterpretedSort('idx_s',))]), Implies(And(Apply(Const('<=', FunctionSort(UninterpretedSort('idx_s',), UninterpretedSort('idx_s',), BooleanSort())), Const('0', UninterpretedSort('idx_s',)), Var('I', UninterpretedSort('idx_s',))), Apply(Const('<', FunctionSort(UninterpretedSort('idx_s',), UninterpretedSort('idx_s',), BooleanSort())), Var('I', UninterpretedSort('idx_s',)), Apply(Const('arr_streamid_s.end', FunctionSort(UninterpretedSort('arr_streamid_s',), UninterpretedSort('idx_s',))), Var('X', UninterpretedSort('arr_streamid_s',))))), Eq(Apply(Const('arr_streamid_s.value', FunctionSort(UninterpretedSort('arr_streamid_s',), UninterpretedSort('idx_s',), UninterpretedSort('stream_id',))), Var('X', UninterpretedSort('arr_streamid_s',)), Var('I', UninterpretedSort('idx_s',))), Apply(Const('arr_streamid_s.value', FunctionSort(UninterpretedSort('arr_streamid_s',), UninterpretedSort('idx_s',), UninterpretedSort('stream_id',))), Var('Y', UninterpretedSort('arr_streamid_s',)), Var('I', UninterpretedSort('idx_s',))))))),), Eq(Var('X', UninterpretedSort('arr_streamid_s',)), Var('Y', UninterpretedSort('arr_streamid_s',)))))",
                "explicit": false,
                "lineno": {},
                "id": 3003
            },
            {
                "definition": false,
                "assumed": false,
                "temporal": null,
                "args": "(jdx_s.spec.prop2, Implies(Apply(Const('jdx_s.succ', FunctionSort(UninterpretedSort('jdx_s',), UninterpretedSort('jdx_s',), BooleanSort())), Var('X', UninterpretedSort('jdx_s',)), Var('Z', UninterpretedSort('jdx_s',))), And(Apply(Const('<', FunctionSort(UninterpretedSort('jdx_s',), UninterpretedSort('jdx_s',), BooleanSort())), Var('X', UninterpretedSort('jdx_s',)), Var('Z', UninterpretedSort('jdx_s',))), Not(And(Apply(Const('<', FunctionSort(UninterpretedSort('jdx_s',), UninterpretedSort('jdx_s',), BooleanSort())), Var('X', UninterpretedSort('jdx_s',)), Var('Y', UninterpretedSort('jdx_s',))), Apply(Const('<', FunctionSort(UninterpretedSort('jdx_s',), UninterpretedSort('jdx_s',), BooleanSort())), Var('Y', UninterpretedSort('jdx_s',)), Var('Z', UninterpretedSort('jdx_s',)))),))))",
                "explicit": false,
                "lineno": {},
                "id": 592
            },
            {
                "definition": false,
                "assumed": false,
                "temporal": null,
                "args": "(jdx_s.spec.transitivity, Implies(And(Apply(Const('<', FunctionSort(UninterpretedSort('jdx_s',), UninterpretedSort('jdx_s',), BooleanSort())), Var('T', UninterpretedSort('jdx_s',)), Var('U', UninterpretedSort('jdx_s',))), Apply(Const('<', FunctionSort(UninterpretedSort('jdx_s',), UninterpretedSort('jdx_s',), BooleanSort())), Var('U', UninterpretedSort('jdx_s',)), Var('V', UninterpretedSort('jdx_s',)))), Apply(Const('<', FunctionSort(UninterpretedSort('jdx_s',), UninterpretedSort('jdx_s',), BooleanSort())), Var('T', UninterpretedSort('jdx_s',)), Var('V', UninterpretedSort('jdx_s',)))))",
                "explicit": false,
                "lineno": {},
                "id": 593
            },
            {
                "definition": false,
                "assumed": false,
                "temporal": null,
                "args": "(jdx_s.spec.antisymmetry, Not(And(Apply(Const('<', FunctionSort(UninterpretedSort('jdx_s',), UninterpretedSort('jdx_s',), BooleanSort())), Var('T', UninterpretedSort('jdx_s',)), Var('U', UninterpretedSort('jdx_s',))), Apply(Const('<', FunctionSort(UninterpretedSort('jdx_s',), UninterpretedSort('jdx_s',), BooleanSort())), Var('U', UninterpretedSort('jdx_s',)), Var('T', UninterpretedSort('jdx_s',)))),))",
                "explicit": false,
                "lineno": {},
                "id": 594
            },
            {
                "definition": false,
                "assumed": false,
                "temporal": null,
                "args": "(jdx_s.spec.totality, Or(Apply(Const('<', FunctionSort(UninterpretedSort('jdx_s',), UninterpretedSort('jdx_s',), BooleanSort())), Var('T', UninterpretedSort('jdx_s',)), Var('U', UninterpretedSort('jdx_s',))), Eq(Var('T', UninterpretedSort('jdx_s',)), Var('U', UninterpretedSort('jdx_s',))), Apply(Const('<', FunctionSort(UninterpretedSort('jdx_s',), UninterpretedSort('jdx_s',), BooleanSort())), Var('U', UninterpretedSort('jdx_s',)), Var('T', UninterpretedSort('jdx_s',)))))",
                "explicit": false,
                "lineno": {},
                "id": 595
            },
            {
                "definition": false,
                "assumed": false,
                "temporal": null,
                "args": "(jdx_s.spec.prop1, Apply(Const('<=', FunctionSort(UninterpretedSort('jdx_s',), UninterpretedSort('jdx_s',), BooleanSort())), Const('0', UninterpretedSort('jdx_s',)), Var('X', UninterpretedSort('jdx_s',))))",
                "explicit": false,
                "lineno": {},
                "id": 596
            },
            {
                "definition": false,
                "assumed": false,
                "temporal": null,
                "args": "(arr_pkt_num_s.spec.prop103, Apply(Const('>=', FunctionSort(UninterpretedSort('jdx_s',), UninterpretedSort('jdx_s',), BooleanSort())), Apply(Const('arr_pkt_num_s.end', FunctionSort(UninterpretedSort('arr_pkt_num_s',), UninterpretedSort('jdx_s',))), Var('X', UninterpretedSort('arr_pkt_num_s',))), Const('0', UninterpretedSort('jdx_s',))))",
                "explicit": false,
                "lineno": {},
                "id": 600
            },
            {
                "definition": false,
                "assumed": false,
                "temporal": null,
                "args": "(arr_pkt_num_s.spec.extensionality._a, Implies(And(And(Eq(Apply(Const('arr_pkt_num_s.end', FunctionSort(UninterpretedSort('arr_pkt_num_s',), UninterpretedSort('jdx_s',))), Var('X', UninterpretedSort('arr_pkt_num_s',))), Apply(Const('arr_pkt_num_s.end', FunctionSort(UninterpretedSort('arr_pkt_num_s',), UninterpretedSort('jdx_s',))), Var('Y', UninterpretedSort('arr_pkt_num_s',)))), ForAll(frozenset([Var('I', UninterpretedSort('jdx_s',))]), Implies(And(Apply(Const('<=', FunctionSort(UninterpretedSort('jdx_s',), UninterpretedSort('jdx_s',), BooleanSort())), Const('0', UninterpretedSort('jdx_s',)), Var('I', UninterpretedSort('jdx_s',))), Apply(Const('<', FunctionSort(UninterpretedSort('jdx_s',), UninterpretedSort('jdx_s',), BooleanSort())), Var('I', UninterpretedSort('jdx_s',)), Apply(Const('arr_pkt_num_s.end', FunctionSort(UninterpretedSort('arr_pkt_num_s',), UninterpretedSort('jdx_s',))), Var('X', UninterpretedSort('arr_pkt_num_s',))))), Eq(Apply(Const('arr_pkt_num_s.value', FunctionSort(UninterpretedSort('arr_pkt_num_s',), UninterpretedSort('jdx_s',), UninterpretedSort('pkt_num',))), Var('X', UninterpretedSort('arr_pkt_num_s',)), Var('I', UninterpretedSort('jdx_s',))), Apply(Const('arr_pkt_num_s.value', FunctionSort(UninterpretedSort('arr_pkt_num_s',), UninterpretedSort('jdx_s',), UninterpretedSort('pkt_num',))), Var('Y', UninterpretedSort('arr_pkt_num_s',)), Var('I', UninterpretedSort('jdx_s',))))))),), Eq(Var('X', UninterpretedSort('arr_pkt_num_s',)), Var('Y', UninterpretedSort('arr_pkt_num_s',)))))",
                "explicit": false,
                "lineno": {},
                "id": 3012
            },
            {
                "definition": false,
                "assumed": false,
                "temporal": null,
                "args": "(idx_r.spec.prop2, Implies(Apply(Const('idx_r.succ', FunctionSort(UninterpretedSort('idx_r',), UninterpretedSort('idx_r',), BooleanSort())), Var('X', UninterpretedSort('idx_r',)), Var('Z', UninterpretedSort('idx_r',))), And(Apply(Const('<', FunctionSort(UninterpretedSort('idx_r',), UninterpretedSort('idx_r',), BooleanSort())), Var('X', UninterpretedSort('idx_r',)), Var('Z', UninterpretedSort('idx_r',))), Not(And(Apply(Const('<', FunctionSort(UninterpretedSort('idx_r',), UninterpretedSort('idx_r',), BooleanSort())), Var('X', UninterpretedSort('idx_r',)), Var('Y', UninterpretedSort('idx_r',))), Apply(Const('<', FunctionSort(UninterpretedSort('idx_r',), UninterpretedSort('idx_r',), BooleanSort())), Var('Y', UninterpretedSort('idx_r',)), Var('Z', UninterpretedSort('idx_r',)))),))))",
                "explicit": false,
                "lineno": {},
                "id": 606
            },
            {
                "definition": false,
                "assumed": false,
                "temporal": null,
                "args": "(idx_r.spec.transitivity, Implies(And(Apply(Const('<', FunctionSort(UninterpretedSort('idx_r',), UninterpretedSort('idx_r',), BooleanSort())), Var('T', UninterpretedSort('idx_r',)), Var('U', UninterpretedSort('idx_r',))), Apply(Const('<', FunctionSort(UninterpretedSort('idx_r',), UninterpretedSort('idx_r',), BooleanSort())), Var('U', UninterpretedSort('idx_r',)), Var('V', UninterpretedSort('idx_r',)))), Apply(Const('<', FunctionSort(UninterpretedSort('idx_r',), UninterpretedSort('idx_r',), BooleanSort())), Var('T', UninterpretedSort('idx_r',)), Var('V', UninterpretedSort('idx_r',)))))",
                "explicit": false,
                "lineno": {},
                "id": 607
            },
            {
                "definition": false,
                "assumed": false,
                "temporal": null,
                "args": "(idx_r.spec.antisymmetry, Not(And(Apply(Const('<', FunctionSort(UninterpretedSort('idx_r',), UninterpretedSort('idx_r',), BooleanSort())), Var('T', UninterpretedSort('idx_r',)), Var('U', UninterpretedSort('idx_r',))), Apply(Const('<', FunctionSort(UninterpretedSort('idx_r',), UninterpretedSort('idx_r',), BooleanSort())), Var('U', UninterpretedSort('idx_r',)), Var('T', UninterpretedSort('idx_r',)))),))",
                "explicit": false,
                "lineno": {},
                "id": 608
            },
            {
                "definition": false,
                "assumed": false,
                "temporal": null,
                "args": "(idx_r.spec.totality, Or(Apply(Const('<', FunctionSort(UninterpretedSort('idx_r',), UninterpretedSort('idx_r',), BooleanSort())), Var('T', UninterpretedSort('idx_r',)), Var('U', UninterpretedSort('idx_r',))), Eq(Var('T', UninterpretedSort('idx_r',)), Var('U', UninterpretedSort('idx_r',))), Apply(Const('<', FunctionSort(UninterpretedSort('idx_r',), UninterpretedSort('idx_r',), BooleanSort())), Var('U', UninterpretedSort('idx_r',)), Var('T', UninterpretedSort('idx_r',)))))",
                "explicit": false,
                "lineno": {},
                "id": 609
            },
            {
                "definition": false,
                "assumed": false,
                "temporal": null,
                "args": "(idx_r.spec.prop1, Apply(Const('<=', FunctionSort(UninterpretedSort('idx_r',), UninterpretedSort('idx_r',), BooleanSort())), Const('0', UninterpretedSort('idx_r',)), Var('X', UninterpretedSort('idx_r',))))",
                "explicit": false,
                "lineno": {},
                "id": 610
            },
            {
                "definition": false,
                "assumed": false,
                "temporal": null,
                "args": "(arr_streamid_r.spec.prop103, Apply(Const('>=', FunctionSort(UninterpretedSort('idx_r',), UninterpretedSort('idx_r',), BooleanSort())), Apply(Const('arr_streamid_r.end', FunctionSort(UninterpretedSort('arr_streamid_r',), UninterpretedSort('idx_r',))), Var('X', UninterpretedSort('arr_streamid_r',))), Const('0', UninterpretedSort('idx_r',))))",
                "explicit": false,
                "lineno": {},
                "id": 614
            },
            {
                "definition": false,
                "assumed": false,
                "temporal": null,
                "args": "(arr_streamid_r.spec.extensionality._a, Implies(And(And(Eq(Apply(Const('arr_streamid_r.end', FunctionSort(UninterpretedSort('arr_streamid_r',), UninterpretedSort('idx_r',))), Var('X', UninterpretedSort('arr_streamid_r',))), Apply(Const('arr_streamid_r.end', FunctionSort(UninterpretedSort('arr_streamid_r',), UninterpretedSort('idx_r',))), Var('Y', UninterpretedSort('arr_streamid_r',)))), ForAll(frozenset([Var('I', UninterpretedSort('idx_r',))]), Implies(And(Apply(Const('<=', FunctionSort(UninterpretedSort('idx_r',), UninterpretedSort('idx_r',), BooleanSort())), Const('0', UninterpretedSort('idx_r',)), Var('I', UninterpretedSort('idx_r',))), Apply(Const('<', FunctionSort(UninterpretedSort('idx_r',), UninterpretedSort('idx_r',), BooleanSort())), Var('I', UninterpretedSort('idx_r',)), Apply(Const('arr_streamid_r.end', FunctionSort(UninterpretedSort('arr_streamid_r',), UninterpretedSort('idx_r',))), Var('X', UninterpretedSort('arr_streamid_r',))))), Eq(Apply(Const('arr_streamid_r.value', FunctionSort(UninterpretedSort('arr_streamid_r',), UninterpretedSort('idx_r',), UninterpretedSort('stream_id',))), Var('X', UninterpretedSort('arr_streamid_r',)), Var('I', UninterpretedSort('idx_r',))), Apply(Const('arr_streamid_r.value', FunctionSort(UninterpretedSort('arr_streamid_r',), UninterpretedSort('idx_r',), UninterpretedSort('stream_id',))), Var('Y', UninterpretedSort('arr_streamid_r',)), Var('I', UninterpretedSort('idx_r',))))))),), Eq(Var('X', UninterpretedSort('arr_streamid_r',)), Var('Y', UninterpretedSort('arr_streamid_r',)))))",
                "explicit": false,
                "lineno": {},
                "id": 3021
            },
            {
                "definition": false,
                "assumed": false,
                "temporal": null,
                "args": "(jdx_r.spec.prop2, Implies(Apply(Const('jdx_r.succ', FunctionSort(UninterpretedSort('jdx_r',), UninterpretedSort('jdx_r',), BooleanSort())), Var('X', UninterpretedSort('jdx_r',)), Var('Z', UninterpretedSort('jdx_r',))), And(Apply(Const('<', FunctionSort(UninterpretedSort('jdx_r',), UninterpretedSort('jdx_r',), BooleanSort())), Var('X', UninterpretedSort('jdx_r',)), Var('Z', UninterpretedSort('jdx_r',))), Not(And(Apply(Const('<', FunctionSort(UninterpretedSort('jdx_r',), UninterpretedSort('jdx_r',), BooleanSort())), Var('X', UninterpretedSort('jdx_r',)), Var('Y', UninterpretedSort('jdx_r',))), Apply(Const('<', FunctionSort(UninterpretedSort('jdx_r',), UninterpretedSort('jdx_r',), BooleanSort())), Var('Y', UninterpretedSort('jdx_r',)), Var('Z', UninterpretedSort('jdx_r',)))),))))",
                "explicit": false,
                "lineno": {},
                "id": 620
            },
            {
                "definition": false,
                "assumed": false,
                "temporal": null,
                "args": "(jdx_r.spec.transitivity, Implies(And(Apply(Const('<', FunctionSort(UninterpretedSort('jdx_r',), UninterpretedSort('jdx_r',), BooleanSort())), Var('T', UninterpretedSort('jdx_r',)), Var('U', UninterpretedSort('jdx_r',))), Apply(Const('<', FunctionSort(UninterpretedSort('jdx_r',), UninterpretedSort('jdx_r',), BooleanSort())), Var('U', UninterpretedSort('jdx_r',)), Var('V', UninterpretedSort('jdx_r',)))), Apply(Const('<', FunctionSort(UninterpretedSort('jdx_r',), UninterpretedSort('jdx_r',), BooleanSort())), Var('T', UninterpretedSort('jdx_r',)), Var('V', UninterpretedSort('jdx_r',)))))",
                "explicit": false,
                "lineno": {},
                "id": 621
            },
            {
                "definition": false,
                "assumed": false,
                "temporal": null,
                "args": "(jdx_r.spec.antisymmetry, Not(And(Apply(Const('<', FunctionSort(UninterpretedSort('jdx_r',), UninterpretedSort('jdx_r',), BooleanSort())), Var('T', UninterpretedSort('jdx_r',)), Var('U', UninterpretedSort('jdx_r',))), Apply(Const('<', FunctionSort(UninterpretedSort('jdx_r',), UninterpretedSort('jdx_r',), BooleanSort())), Var('U', UninterpretedSort('jdx_r',)), Var('T', UninterpretedSort('jdx_r',)))),))",
                "explicit": false,
                "lineno": {},
                "id": 622
            },
            {
                "definition": false,
                "assumed": false,
                "temporal": null,
                "args": "(jdx_r.spec.totality, Or(Apply(Const('<', FunctionSort(UninterpretedSort('jdx_r',), UninterpretedSort('jdx_r',), BooleanSort())), Var('T', UninterpretedSort('jdx_r',)), Var('U', UninterpretedSort('jdx_r',))), Eq(Var('T', UninterpretedSort('jdx_r',)), Var('U', UninterpretedSort('jdx_r',))), Apply(Const('<', FunctionSort(UninterpretedSort('jdx_r',), UninterpretedSort('jdx_r',), BooleanSort())), Var('U', UninterpretedSort('jdx_r',)), Var('T', UninterpretedSort('jdx_r',)))))",
                "explicit": false,
                "lineno": {},
                "id": 623
            },
            {
                "definition": false,
                "assumed": false,
                "temporal": null,
                "args": "(jdx_r.spec.prop1, Apply(Const('<=', FunctionSort(UninterpretedSort('jdx_r',), UninterpretedSort('jdx_r',), BooleanSort())), Const('0', UninterpretedSort('jdx_r',)), Var('X', UninterpretedSort('jdx_r',))))",
                "explicit": false,
                "lineno": {},
                "id": 624
            },
            {
                "definition": false,
                "assumed": false,
                "temporal": null,
                "args": "(arr_pkt_num_r.spec.prop103, Apply(Const('>=', FunctionSort(UninterpretedSort('jdx_r',), UninterpretedSort('jdx_r',), BooleanSort())), Apply(Const('arr_pkt_num_r.end', FunctionSort(UninterpretedSort('arr_pkt_num_r',), UninterpretedSort('jdx_r',))), Var('X', UninterpretedSort('arr_pkt_num_r',))), Const('0', UninterpretedSort('jdx_r',))))",
                "explicit": false,
                "lineno": {},
                "id": 628
            },
            {
                "definition": false,
                "assumed": false,
                "temporal": null,
                "args": "(arr_pkt_num_r.spec.extensionality._a, Implies(And(And(Eq(Apply(Const('arr_pkt_num_r.end', FunctionSort(UninterpretedSort('arr_pkt_num_r',), UninterpretedSort('jdx_r',))), Var('X', UninterpretedSort('arr_pkt_num_r',))), Apply(Const('arr_pkt_num_r.end', FunctionSort(UninterpretedSort('arr_pkt_num_r',), UninterpretedSort('jdx_r',))), Var('Y', UninterpretedSort('arr_pkt_num_r',)))), ForAll(frozenset([Var('I', UninterpretedSort('jdx_r',))]), Implies(And(Apply(Const('<=', FunctionSort(UninterpretedSort('jdx_r',), UninterpretedSort('jdx_r',), BooleanSort())), Const('0', UninterpretedSort('jdx_r',)), Var('I', UninterpretedSort('jdx_r',))), Apply(Const('<', FunctionSort(UninterpretedSort('jdx_r',), UninterpretedSort('jdx_r',), BooleanSort())), Var('I', UninterpretedSort('jdx_r',)), Apply(Const('arr_pkt_num_r.end', FunctionSort(UninterpretedSort('arr_pkt_num_r',), UninterpretedSort('jdx_r',))), Var('X', UninterpretedSort('arr_pkt_num_r',))))), Eq(Apply(Const('arr_pkt_num_r.value', FunctionSort(UninterpretedSort('arr_pkt_num_r',), UninterpretedSort('jdx_r',), UninterpretedSort('pkt_num',))), Var('X', UninterpretedSort('arr_pkt_num_r',)), Var('I', UninterpretedSort('jdx_r',))), Apply(Const('arr_pkt_num_r.value', FunctionSort(UninterpretedSort('arr_pkt_num_r',), UninterpretedSort('jdx_r',), UninterpretedSort('pkt_num',))), Var('Y', UninterpretedSort('arr_pkt_num_r',)), Var('I', UninterpretedSort('jdx_r',))))))),), Eq(Var('X', UninterpretedSort('arr_pkt_num_r',)), Var('Y', UninterpretedSort('arr_pkt_num_r',)))))",
                "explicit": false,
                "lineno": {},
                "id": 3030
            },
            {
                "definition": false,
                "assumed": false,
                "temporal": null,
                "args": "(quic_packet.idx.spec.prop2, Implies(Apply(Const('quic_packet.idx.succ', FunctionSort(UninterpretedSort('quic_packet.idx',), UninterpretedSort('quic_packet.idx',), BooleanSort())), Var('X', UninterpretedSort('quic_packet.idx',)), Var('Z', UninterpretedSort('quic_packet.idx',))), And(Apply(Const('<', FunctionSort(UninterpretedSort('quic_packet.idx',), UninterpretedSort('quic_packet.idx',), BooleanSort())), Var('X', UninterpretedSort('quic_packet.idx',)), Var('Z', UninterpretedSort('quic_packet.idx',))), Not(And(Apply(Const('<', FunctionSort(UninterpretedSort('quic_packet.idx',), UninterpretedSort('quic_packet.idx',), BooleanSort())), Var('X', UninterpretedSort('quic_packet.idx',)), Var('Y', UninterpretedSort('quic_packet.idx',))), Apply(Const('<', FunctionSort(UninterpretedSort('quic_packet.idx',), UninterpretedSort('quic_packet.idx',), BooleanSort())), Var('Y', UninterpretedSort('quic_packet.idx',)), Var('Z', UninterpretedSort('quic_packet.idx',)))),))))",
                "explicit": false,
                "lineno": {},
                "id": 655
            },
            {
                "definition": false,
                "assumed": false,
                "temporal": null,
                "args": "(quic_packet.idx.spec.transitivity, Implies(And(Apply(Const('<', FunctionSort(UninterpretedSort('quic_packet.idx',), UninterpretedSort('quic_packet.idx',), BooleanSort())), Var('T', UninterpretedSort('quic_packet.idx',)), Var('U', UninterpretedSort('quic_packet.idx',))), Apply(Const('<', FunctionSort(UninterpretedSort('quic_packet.idx',), UninterpretedSort('quic_packet.idx',), BooleanSort())), Var('U', UninterpretedSort('quic_packet.idx',)), Var('V', UninterpretedSort('quic_packet.idx',)))), Apply(Const('<', FunctionSort(UninterpretedSort('quic_packet.idx',), UninterpretedSort('quic_packet.idx',), BooleanSort())), Var('T', UninterpretedSort('quic_packet.idx',)), Var('V', UninterpretedSort('quic_packet.idx',)))))",
                "explicit": false,
                "lineno": {},
                "id": 656
            },
            {
                "definition": false,
                "assumed": false,
                "temporal": null,
                "args": "(quic_packet.idx.spec.antisymmetry, Not(And(Apply(Const('<', FunctionSort(UninterpretedSort('quic_packet.idx',), UninterpretedSort('quic_packet.idx',), BooleanSort())), Var('T', UninterpretedSort('quic_packet.idx',)), Var('U', UninterpretedSort('quic_packet.idx',))), Apply(Const('<', FunctionSort(UninterpretedSort('quic_packet.idx',), UninterpretedSort('quic_packet.idx',), BooleanSort())), Var('U', UninterpretedSort('quic_packet.idx',)), Var('T', UninterpretedSort('quic_packet.idx',)))),))",
                "explicit": false,
                "lineno": {},
                "id": 657
            },
            {
                "definition": false,
                "assumed": false,
                "temporal": null,
                "args": "(quic_packet.idx.spec.totality, Or(Apply(Const('<', FunctionSort(UninterpretedSort('quic_packet.idx',), UninterpretedSort('quic_packet.idx',), BooleanSort())), Var('T', UninterpretedSort('quic_packet.idx',)), Var('U', UninterpretedSort('quic_packet.idx',))), Eq(Var('T', UninterpretedSort('quic_packet.idx',)), Var('U', UninterpretedSort('quic_packet.idx',))), Apply(Const('<', FunctionSort(UninterpretedSort('quic_packet.idx',), UninterpretedSort('quic_packet.idx',), BooleanSort())), Var('U', UninterpretedSort('quic_packet.idx',)), Var('T', UninterpretedSort('quic_packet.idx',)))))",
                "explicit": false,
                "lineno": {},
                "id": 658
            },
            {
                "definition": false,
                "assumed": false,
                "temporal": null,
                "args": "(quic_packet.idx.spec.prop1, Apply(Const('<=', FunctionSort(UninterpretedSort('quic_packet.idx',), UninterpretedSort('quic_packet.idx',), BooleanSort())), Const('0', UninterpretedSort('quic_packet.idx',)), Var('X', UninterpretedSort('quic_packet.idx',))))",
                "explicit": false,
                "lineno": {},
                "id": 659
            },
            {
                "definition": false,
                "assumed": false,
                "temporal": null,
                "args": "(quic_packet.arr.spec.prop103, Apply(Const('>=', FunctionSort(UninterpretedSort('quic_packet.idx',), UninterpretedSort('quic_packet.idx',), BooleanSort())), Apply(Const('quic_packet.arr.end', FunctionSort(UninterpretedSort('quic_packet.arr',), UninterpretedSort('quic_packet.idx',))), Var('X', UninterpretedSort('quic_packet.arr',))), Const('0', UninterpretedSort('quic_packet.idx',))))",
                "explicit": false,
                "lineno": {},
                "id": 663
            },
            {
                "definition": false,
                "assumed": false,
                "temporal": null,
                "args": "(quic_packet.arr.spec.extensionality._a, Implies(And(And(Eq(Apply(Const('quic_packet.arr.end', FunctionSort(UninterpretedSort('quic_packet.arr',), UninterpretedSort('quic_packet.idx',))), Var('X', UninterpretedSort('quic_packet.arr',))), Apply(Const('quic_packet.arr.end', FunctionSort(UninterpretedSort('quic_packet.arr',), UninterpretedSort('quic_packet.idx',))), Var('Y', UninterpretedSort('quic_packet.arr',)))), ForAll(frozenset([Var('I', UninterpretedSort('quic_packet.idx',))]), Implies(And(Apply(Const('<=', FunctionSort(UninterpretedSort('quic_packet.idx',), UninterpretedSort('quic_packet.idx',), BooleanSort())), Const('0', UninterpretedSort('quic_packet.idx',)), Var('I', UninterpretedSort('quic_packet.idx',))), Apply(Const('<', FunctionSort(UninterpretedSort('quic_packet.idx',), UninterpretedSort('quic_packet.idx',), BooleanSort())), Var('I', UninterpretedSort('quic_packet.idx',)), Apply(Const('quic_packet.arr.end', FunctionSort(UninterpretedSort('quic_packet.arr',), UninterpretedSort('quic_packet.idx',))), Var('X', UninterpretedSort('quic_packet.arr',))))), Eq(Apply(Const('quic_packet.arr.value', FunctionSort(UninterpretedSort('quic_packet.arr',), UninterpretedSort('quic_packet.idx',), UninterpretedSort('quic_packet',))), Var('X', UninterpretedSort('quic_packet.arr',)), Var('I', UninterpretedSort('quic_packet.idx',))), Apply(Const('quic_packet.arr.value', FunctionSort(UninterpretedSort('quic_packet.arr',), UninterpretedSort('quic_packet.idx',), UninterpretedSort('quic_packet',))), Var('Y', UninterpretedSort('quic_packet.arr',)), Var('I', UninterpretedSort('quic_packet.idx',))))))),), Eq(Var('X', UninterpretedSort('quic_packet.arr',)), Var('Y', UninterpretedSort('quic_packet.arr',)))))",
                "explicit": false,
                "lineno": {},
                "id": 3039
            },
            {
                "definition": false,
                "assumed": false,
                "temporal": null,
                "args": "(quic_packet.retired_cids.spec.prop103, Apply(Const('>=', FunctionSort(UninterpretedSort('quic_packet.idx',), UninterpretedSort('quic_packet.idx',), BooleanSort())), Apply(Const('quic_packet.retired_cids.end', FunctionSort(UninterpretedSort('quic_packet.retired_cids',), UninterpretedSort('quic_packet.idx',))), Var('X', UninterpretedSort('quic_packet.retired_cids',))), Const('0', UninterpretedSort('quic_packet.idx',))))",
                "explicit": false,
                "lineno": {},
                "id": 670
            },
            {
                "definition": false,
                "assumed": false,
                "temporal": null,
                "args": "(quic_packet.retired_cids.spec.extensionality._a, Implies(And(And(Eq(Apply(Const('quic_packet.retired_cids.end', FunctionSort(UninterpretedSort('quic_packet.retired_cids',), UninterpretedSort('quic_packet.idx',))), Var('X', UninterpretedSort('quic_packet.retired_cids',))), Apply(Const('quic_packet.retired_cids.end', FunctionSort(UninterpretedSort('quic_packet.retired_cids',), UninterpretedSort('quic_packet.idx',))), Var('Y', UninterpretedSort('quic_packet.retired_cids',)))), ForAll(frozenset([Var('I', UninterpretedSort('quic_packet.idx',))]), Implies(And(Apply(Const('<=', FunctionSort(UninterpretedSort('quic_packet.idx',), UninterpretedSort('quic_packet.idx',), BooleanSort())), Const('0', UninterpretedSort('quic_packet.idx',)), Var('I', UninterpretedSort('quic_packet.idx',))), Apply(Const('<', FunctionSort(UninterpretedSort('quic_packet.idx',), UninterpretedSort('quic_packet.idx',), BooleanSort())), Var('I', UninterpretedSort('quic_packet.idx',)), Apply(Const('quic_packet.retired_cids.end', FunctionSort(UninterpretedSort('quic_packet.retired_cids',), UninterpretedSort('quic_packet.idx',))), Var('X', UninterpretedSort('quic_packet.retired_cids',))))), Eq(Apply(Const('quic_packet.retired_cids.value', FunctionSort(UninterpretedSort('quic_packet.retired_cids',), UninterpretedSort('quic_packet.idx',), UninterpretedSort('cid_seq',))), Var('X', UninterpretedSort('quic_packet.retired_cids',)), Var('I', UninterpretedSort('quic_packet.idx',))), Apply(Const('quic_packet.retired_cids.value', FunctionSort(UninterpretedSort('quic_packet.retired_cids',), UninterpretedSort('quic_packet.idx',), UninterpretedSort('cid_seq',))), Var('Y', UninterpretedSort('quic_packet.retired_cids',)), Var('I', UninterpretedSort('quic_packet.idx',))))))),), Eq(Var('X', UninterpretedSort('quic_packet.retired_cids',)), Var('Y', UninterpretedSort('quic_packet.retired_cids',)))))",
                "explicit": false,
                "lineno": {},
                "id": 3043
            },
            {
                "definition": false,
                "assumed": false,
                "temporal": null,
                "args": "(quic_packet_retry.idx.spec.prop2, Implies(Apply(Const('quic_packet_retry.idx.succ', FunctionSort(UninterpretedSort('quic_packet_retry.idx',), UninterpretedSort('quic_packet_retry.idx',), BooleanSort())), Var('X', UninterpretedSort('quic_packet_retry.idx',)), Var('Z', UninterpretedSort('quic_packet_retry.idx',))), And(Apply(Const('<', FunctionSort(UninterpretedSort('quic_packet_retry.idx',), UninterpretedSort('quic_packet_retry.idx',), BooleanSort())), Var('X', UninterpretedSort('quic_packet_retry.idx',)), Var('Z', UninterpretedSort('quic_packet_retry.idx',))), Not(And(Apply(Const('<', FunctionSort(UninterpretedSort('quic_packet_retry.idx',), UninterpretedSort('quic_packet_retry.idx',), BooleanSort())), Var('X', UninterpretedSort('quic_packet_retry.idx',)), Var('Y', UninterpretedSort('quic_packet_retry.idx',))), Apply(Const('<', FunctionSort(UninterpretedSort('quic_packet_retry.idx',), UninterpretedSort('quic_packet_retry.idx',), BooleanSort())), Var('Y', UninterpretedSort('quic_packet_retry.idx',)), Var('Z', UninterpretedSort('quic_packet_retry.idx',)))),))))",
                "explicit": false,
                "lineno": {},
                "id": 699
            },
            {
                "definition": false,
                "assumed": false,
                "temporal": null,
                "args": "(quic_packet_retry.idx.spec.transitivity, Implies(And(Apply(Const('<', FunctionSort(UninterpretedSort('quic_packet_retry.idx',), UninterpretedSort('quic_packet_retry.idx',), BooleanSort())), Var('T', UninterpretedSort('quic_packet_retry.idx',)), Var('U', UninterpretedSort('quic_packet_retry.idx',))), Apply(Const('<', FunctionSort(UninterpretedSort('quic_packet_retry.idx',), UninterpretedSort('quic_packet_retry.idx',), BooleanSort())), Var('U', UninterpretedSort('quic_packet_retry.idx',)), Var('V', UninterpretedSort('quic_packet_retry.idx',)))), Apply(Const('<', FunctionSort(UninterpretedSort('quic_packet_retry.idx',), UninterpretedSort('quic_packet_retry.idx',), BooleanSort())), Var('T', UninterpretedSort('quic_packet_retry.idx',)), Var('V', UninterpretedSort('quic_packet_retry.idx',)))))",
                "explicit": false,
                "lineno": {},
                "id": 700
            },
            {
                "definition": false,
                "assumed": false,
                "temporal": null,
                "args": "(quic_packet_retry.idx.spec.antisymmetry, Not(And(Apply(Const('<', FunctionSort(UninterpretedSort('quic_packet_retry.idx',), UninterpretedSort('quic_packet_retry.idx',), BooleanSort())), Var('T', UninterpretedSort('quic_packet_retry.idx',)), Var('U', UninterpretedSort('quic_packet_retry.idx',))), Apply(Const('<', FunctionSort(UninterpretedSort('quic_packet_retry.idx',), UninterpretedSort('quic_packet_retry.idx',), BooleanSort())), Var('U', UninterpretedSort('quic_packet_retry.idx',)), Var('T', UninterpretedSort('quic_packet_retry.idx',)))),))",
                "explicit": false,
                "lineno": {},
                "id": 701
            },
            {
                "definition": false,
                "assumed": false,
                "temporal": null,
                "args": "(quic_packet_retry.idx.spec.totality, Or(Apply(Const('<', FunctionSort(UninterpretedSort('quic_packet_retry.idx',), UninterpretedSort('quic_packet_retry.idx',), BooleanSort())), Var('T', UninterpretedSort('quic_packet_retry.idx',)), Var('U', UninterpretedSort('quic_packet_retry.idx',))), Eq(Var('T', UninterpretedSort('quic_packet_retry.idx',)), Var('U', UninterpretedSort('quic_packet_retry.idx',))), Apply(Const('<', FunctionSort(UninterpretedSort('quic_packet_retry.idx',), UninterpretedSort('quic_packet_retry.idx',), BooleanSort())), Var('U', UninterpretedSort('quic_packet_retry.idx',)), Var('T', UninterpretedSort('quic_packet_retry.idx',)))))",
                "explicit": false,
                "lineno": {},
                "id": 702
            },
            {
                "definition": false,
                "assumed": false,
                "temporal": null,
                "args": "(quic_packet_retry.idx.spec.prop1, Apply(Const('<=', FunctionSort(UninterpretedSort('quic_packet_retry.idx',), UninterpretedSort('quic_packet_retry.idx',), BooleanSort())), Const('0', UninterpretedSort('quic_packet_retry.idx',)), Var('X', UninterpretedSort('quic_packet_retry.idx',))))",
                "explicit": false,
                "lineno": {},
                "id": 703
            },
            {
                "definition": false,
                "assumed": false,
                "temporal": null,
                "args": "(quic_packet_retry.arr.spec.prop103, Apply(Const('>=', FunctionSort(UninterpretedSort('quic_packet_retry.idx',), UninterpretedSort('quic_packet_retry.idx',), BooleanSort())), Apply(Const('quic_packet_retry.arr.end', FunctionSort(UninterpretedSort('quic_packet_retry.arr',), UninterpretedSort('quic_packet_retry.idx',))), Var('X', UninterpretedSort('quic_packet_retry.arr',))), Const('0', UninterpretedSort('quic_packet_retry.idx',))))",
                "explicit": false,
                "lineno": {},
                "id": 707
            },
            {
                "definition": false,
                "assumed": false,
                "temporal": null,
                "args": "(quic_packet_retry.arr.spec.extensionality._a, Implies(And(And(Eq(Apply(Const('quic_packet_retry.arr.end', FunctionSort(UninterpretedSort('quic_packet_retry.arr',), UninterpretedSort('quic_packet_retry.idx',))), Var('X', UninterpretedSort('quic_packet_retry.arr',))), Apply(Const('quic_packet_retry.arr.end', FunctionSort(UninterpretedSort('quic_packet_retry.arr',), UninterpretedSort('quic_packet_retry.idx',))), Var('Y', UninterpretedSort('quic_packet_retry.arr',)))), ForAll(frozenset([Var('I', UninterpretedSort('quic_packet_retry.idx',))]), Implies(And(Apply(Const('<=', FunctionSort(UninterpretedSort('quic_packet_retry.idx',), UninterpretedSort('quic_packet_retry.idx',), BooleanSort())), Const('0', UninterpretedSort('quic_packet_retry.idx',)), Var('I', UninterpretedSort('quic_packet_retry.idx',))), Apply(Const('<', FunctionSort(UninterpretedSort('quic_packet_retry.idx',), UninterpretedSort('quic_packet_retry.idx',), BooleanSort())), Var('I', UninterpretedSort('quic_packet_retry.idx',)), Apply(Const('quic_packet_retry.arr.end', FunctionSort(UninterpretedSort('quic_packet_retry.arr',), UninterpretedSort('quic_packet_retry.idx',))), Var('X', UninterpretedSort('quic_packet_retry.arr',))))), Eq(Apply(Const('quic_packet_retry.arr.value', FunctionSort(UninterpretedSort('quic_packet_retry.arr',), UninterpretedSort('quic_packet_retry.idx',), UninterpretedSort('quic_packet_retry',))), Var('X', UninterpretedSort('quic_packet_retry.arr',)), Var('I', UninterpretedSort('quic_packet_retry.idx',))), Apply(Const('quic_packet_retry.arr.value', FunctionSort(UninterpretedSort('quic_packet_retry.arr',), UninterpretedSort('quic_packet_retry.idx',), UninterpretedSort('quic_packet_retry',))), Var('Y', UninterpretedSort('quic_packet_retry.arr',)), Var('I', UninterpretedSort('quic_packet_retry.idx',))))))),), Eq(Var('X', UninterpretedSort('quic_packet_retry.arr',)), Var('Y', UninterpretedSort('quic_packet_retry.arr',)))))",
                "explicit": false,
                "lineno": {},
                "id": 3052
            },
            {
                "definition": false,
                "assumed": false,
                "temporal": null,
                "args": "(quic_packet_retry.retired_cids.spec.prop103, Apply(Const('>=', FunctionSort(UninterpretedSort('quic_packet_retry.idx',), UninterpretedSort('quic_packet_retry.idx',), BooleanSort())), Apply(Const('quic_packet_retry.retired_cids.end', FunctionSort(UninterpretedSort('quic_packet_retry.retired_cids',), UninterpretedSort('quic_packet_retry.idx',))), Var('X', UninterpretedSort('quic_packet_retry.retired_cids',))), Const('0', UninterpretedSort('quic_packet_retry.idx',))))",
                "explicit": false,
                "lineno": {},
                "id": 714
            },
            {
                "definition": false,
                "assumed": false,
                "temporal": null,
                "args": "(quic_packet_retry.retired_cids.spec.extensionality._a, Implies(And(And(Eq(Apply(Const('quic_packet_retry.retired_cids.end', FunctionSort(UninterpretedSort('quic_packet_retry.retired_cids',), UninterpretedSort('quic_packet_retry.idx',))), Var('X', UninterpretedSort('quic_packet_retry.retired_cids',))), Apply(Const('quic_packet_retry.retired_cids.end', FunctionSort(UninterpretedSort('quic_packet_retry.retired_cids',), UninterpretedSort('quic_packet_retry.idx',))), Var('Y', UninterpretedSort('quic_packet_retry.retired_cids',)))), ForAll(frozenset([Var('I', UninterpretedSort('quic_packet_retry.idx',))]), Implies(And(Apply(Const('<=', FunctionSort(UninterpretedSort('quic_packet_retry.idx',), UninterpretedSort('quic_packet_retry.idx',), BooleanSort())), Const('0', UninterpretedSort('quic_packet_retry.idx',)), Var('I', UninterpretedSort('quic_packet_retry.idx',))), Apply(Const('<', FunctionSort(UninterpretedSort('quic_packet_retry.idx',), UninterpretedSort('quic_packet_retry.idx',), BooleanSort())), Var('I', UninterpretedSort('quic_packet_retry.idx',)), Apply(Const('quic_packet_retry.retired_cids.end', FunctionSort(UninterpretedSort('quic_packet_retry.retired_cids',), UninterpretedSort('quic_packet_retry.idx',))), Var('X', UninterpretedSort('quic_packet_retry.retired_cids',))))), Eq(Apply(Const('quic_packet_retry.retired_cids.value', FunctionSort(UninterpretedSort('quic_packet_retry.retired_cids',), UninterpretedSort('quic_packet_retry.idx',), UninterpretedSort('cid_seq',))), Var('X', UninterpretedSort('quic_packet_retry.retired_cids',)), Var('I', UninterpretedSort('quic_packet_retry.idx',))), Apply(Const('quic_packet_retry.retired_cids.value', FunctionSort(UninterpretedSort('quic_packet_retry.retired_cids',), UninterpretedSort('quic_packet_retry.idx',), UninterpretedSort('cid_seq',))), Var('Y', UninterpretedSort('quic_packet_retry.retired_cids',)), Var('I', UninterpretedSort('quic_packet_retry.idx',))))))),), Eq(Var('X', UninterpretedSort('quic_packet_retry.retired_cids',)), Var('Y', UninterpretedSort('quic_packet_retry.retired_cids',)))))",
                "explicit": false,
                "lineno": {},
                "id": 3056
            },
            {
                "definition": false,
                "assumed": false,
                "temporal": null,
                "args": "(quic_packet_0rtt.idx.spec.prop2, Implies(Apply(Const('quic_packet_0rtt.idx.succ', FunctionSort(UninterpretedSort('quic_packet_0rtt.idx',), UninterpretedSort('quic_packet_0rtt.idx',), BooleanSort())), Var('X', UninterpretedSort('quic_packet_0rtt.idx',)), Var('Z', UninterpretedSort('quic_packet_0rtt.idx',))), And(Apply(Const('<', FunctionSort(UninterpretedSort('quic_packet_0rtt.idx',), UninterpretedSort('quic_packet_0rtt.idx',), BooleanSort())), Var('X', UninterpretedSort('quic_packet_0rtt.idx',)), Var('Z', UninterpretedSort('quic_packet_0rtt.idx',))), Not(And(Apply(Const('<', FunctionSort(UninterpretedSort('quic_packet_0rtt.idx',), UninterpretedSort('quic_packet_0rtt.idx',), BooleanSort())), Var('X', UninterpretedSort('quic_packet_0rtt.idx',)), Var('Y', UninterpretedSort('quic_packet_0rtt.idx',))), Apply(Const('<', FunctionSort(UninterpretedSort('quic_packet_0rtt.idx',), UninterpretedSort('quic_packet_0rtt.idx',), BooleanSort())), Var('Y', UninterpretedSort('quic_packet_0rtt.idx',)), Var('Z', UninterpretedSort('quic_packet_0rtt.idx',)))),))))",
                "explicit": false,
                "lineno": {},
                "id": 741
            },
            {
                "definition": false,
                "assumed": false,
                "temporal": null,
                "args": "(quic_packet_0rtt.idx.spec.transitivity, Implies(And(Apply(Const('<', FunctionSort(UninterpretedSort('quic_packet_0rtt.idx',), UninterpretedSort('quic_packet_0rtt.idx',), BooleanSort())), Var('T', UninterpretedSort('quic_packet_0rtt.idx',)), Var('U', UninterpretedSort('quic_packet_0rtt.idx',))), Apply(Const('<', FunctionSort(UninterpretedSort('quic_packet_0rtt.idx',), UninterpretedSort('quic_packet_0rtt.idx',), BooleanSort())), Var('U', UninterpretedSort('quic_packet_0rtt.idx',)), Var('V', UninterpretedSort('quic_packet_0rtt.idx',)))), Apply(Const('<', FunctionSort(UninterpretedSort('quic_packet_0rtt.idx',), UninterpretedSort('quic_packet_0rtt.idx',), BooleanSort())), Var('T', UninterpretedSort('quic_packet_0rtt.idx',)), Var('V', UninterpretedSort('quic_packet_0rtt.idx',)))))",
                "explicit": false,
                "lineno": {},
                "id": 742
            },
            {
                "definition": false,
                "assumed": false,
                "temporal": null,
                "args": "(quic_packet_0rtt.idx.spec.antisymmetry, Not(And(Apply(Const('<', FunctionSort(UninterpretedSort('quic_packet_0rtt.idx',), UninterpretedSort('quic_packet_0rtt.idx',), BooleanSort())), Var('T', UninterpretedSort('quic_packet_0rtt.idx',)), Var('U', UninterpretedSort('quic_packet_0rtt.idx',))), Apply(Const('<', FunctionSort(UninterpretedSort('quic_packet_0rtt.idx',), UninterpretedSort('quic_packet_0rtt.idx',), BooleanSort())), Var('U', UninterpretedSort('quic_packet_0rtt.idx',)), Var('T', UninterpretedSort('quic_packet_0rtt.idx',)))),))",
                "explicit": false,
                "lineno": {},
                "id": 743
            },
            {
                "definition": false,
                "assumed": false,
                "temporal": null,
                "args": "(quic_packet_0rtt.idx.spec.totality, Or(Apply(Const('<', FunctionSort(UninterpretedSort('quic_packet_0rtt.idx',), UninterpretedSort('quic_packet_0rtt.idx',), BooleanSort())), Var('T', UninterpretedSort('quic_packet_0rtt.idx',)), Var('U', UninterpretedSort('quic_packet_0rtt.idx',))), Eq(Var('T', UninterpretedSort('quic_packet_0rtt.idx',)), Var('U', UninterpretedSort('quic_packet_0rtt.idx',))), Apply(Const('<', FunctionSort(UninterpretedSort('quic_packet_0rtt.idx',), UninterpretedSort('quic_packet_0rtt.idx',), BooleanSort())), Var('U', UninterpretedSort('quic_packet_0rtt.idx',)), Var('T', UninterpretedSort('quic_packet_0rtt.idx',)))))",
                "explicit": false,
                "lineno": {},
                "id": 744
            },
            {
                "definition": false,
                "assumed": false,
                "temporal": null,
                "args": "(quic_packet_0rtt.idx.spec.prop1, Apply(Const('<=', FunctionSort(UninterpretedSort('quic_packet_0rtt.idx',), UninterpretedSort('quic_packet_0rtt.idx',), BooleanSort())), Const('0', UninterpretedSort('quic_packet_0rtt.idx',)), Var('X', UninterpretedSort('quic_packet_0rtt.idx',))))",
                "explicit": false,
                "lineno": {},
                "id": 745
            },
            {
                "definition": false,
                "assumed": false,
                "temporal": null,
                "args": "(quic_packet_0rtt.arr.spec.prop103, Apply(Const('>=', FunctionSort(UninterpretedSort('quic_packet_0rtt.idx',), UninterpretedSort('quic_packet_0rtt.idx',), BooleanSort())), Apply(Const('quic_packet_0rtt.arr.end', FunctionSort(UninterpretedSort('quic_packet_0rtt.arr',), UninterpretedSort('quic_packet_0rtt.idx',))), Var('X', UninterpretedSort('quic_packet_0rtt.arr',))), Const('0', UninterpretedSort('quic_packet_0rtt.idx',))))",
                "explicit": false,
                "lineno": {},
                "id": 749
            },
            {
                "definition": false,
                "assumed": false,
                "temporal": null,
                "args": "(quic_packet_0rtt.arr.spec.extensionality._a, Implies(And(And(Eq(Apply(Const('quic_packet_0rtt.arr.end', FunctionSort(UninterpretedSort('quic_packet_0rtt.arr',), UninterpretedSort('quic_packet_0rtt.idx',))), Var('X', UninterpretedSort('quic_packet_0rtt.arr',))), Apply(Const('quic_packet_0rtt.arr.end', FunctionSort(UninterpretedSort('quic_packet_0rtt.arr',), UninterpretedSort('quic_packet_0rtt.idx',))), Var('Y', UninterpretedSort('quic_packet_0rtt.arr',)))), ForAll(frozenset([Var('I', UninterpretedSort('quic_packet_0rtt.idx',))]), Implies(And(Apply(Const('<=', FunctionSort(UninterpretedSort('quic_packet_0rtt.idx',), UninterpretedSort('quic_packet_0rtt.idx',), BooleanSort())), Const('0', UninterpretedSort('quic_packet_0rtt.idx',)), Var('I', UninterpretedSort('quic_packet_0rtt.idx',))), Apply(Const('<', FunctionSort(UninterpretedSort('quic_packet_0rtt.idx',), UninterpretedSort('quic_packet_0rtt.idx',), BooleanSort())), Var('I', UninterpretedSort('quic_packet_0rtt.idx',)), Apply(Const('quic_packet_0rtt.arr.end', FunctionSort(UninterpretedSort('quic_packet_0rtt.arr',), UninterpretedSort('quic_packet_0rtt.idx',))), Var('X', UninterpretedSort('quic_packet_0rtt.arr',))))), Eq(Apply(Const('quic_packet_0rtt.arr.value', FunctionSort(UninterpretedSort('quic_packet_0rtt.arr',), UninterpretedSort('quic_packet_0rtt.idx',), UninterpretedSort('quic_packet_0rtt',))), Var('X', UninterpretedSort('quic_packet_0rtt.arr',)), Var('I', UninterpretedSort('quic_packet_0rtt.idx',))), Apply(Const('quic_packet_0rtt.arr.value', FunctionSort(UninterpretedSort('quic_packet_0rtt.arr',), UninterpretedSort('quic_packet_0rtt.idx',), UninterpretedSort('quic_packet_0rtt',))), Var('Y', UninterpretedSort('quic_packet_0rtt.arr',)), Var('I', UninterpretedSort('quic_packet_0rtt.idx',))))))),), Eq(Var('X', UninterpretedSort('quic_packet_0rtt.arr',)), Var('Y', UninterpretedSort('quic_packet_0rtt.arr',)))))",
                "explicit": false,
                "lineno": {},
                "id": 3065
            },
            {
                "definition": false,
                "assumed": false,
                "temporal": null,
                "args": "(quic_packet_0rtt.retired_cids.spec.prop103, Apply(Const('>=', FunctionSort(UninterpretedSort('quic_packet_0rtt.idx',), UninterpretedSort('quic_packet_0rtt.idx',), BooleanSort())), Apply(Const('quic_packet_0rtt.retired_cids.end', FunctionSort(UninterpretedSort('quic_packet_0rtt.retired_cids',), UninterpretedSort('quic_packet_0rtt.idx',))), Var('X', UninterpretedSort('quic_packet_0rtt.retired_cids',))), Const('0', UninterpretedSort('quic_packet_0rtt.idx',))))",
                "explicit": false,
                "lineno": {},
                "id": 756
            },
            {
                "definition": false,
                "assumed": false,
                "temporal": null,
                "args": "(quic_packet_0rtt.retired_cids.spec.extensionality._a, Implies(And(And(Eq(Apply(Const('quic_packet_0rtt.retired_cids.end', FunctionSort(UninterpretedSort('quic_packet_0rtt.retired_cids',), UninterpretedSort('quic_packet_0rtt.idx',))), Var('X', UninterpretedSort('quic_packet_0rtt.retired_cids',))), Apply(Const('quic_packet_0rtt.retired_cids.end', FunctionSort(UninterpretedSort('quic_packet_0rtt.retired_cids',), UninterpretedSort('quic_packet_0rtt.idx',))), Var('Y', UninterpretedSort('quic_packet_0rtt.retired_cids',)))), ForAll(frozenset([Var('I', UninterpretedSort('quic_packet_0rtt.idx',))]), Implies(And(Apply(Const('<=', FunctionSort(UninterpretedSort('quic_packet_0rtt.idx',), UninterpretedSort('quic_packet_0rtt.idx',), BooleanSort())), Const('0', UninterpretedSort('quic_packet_0rtt.idx',)), Var('I', UninterpretedSort('quic_packet_0rtt.idx',))), Apply(Const('<', FunctionSort(UninterpretedSort('quic_packet_0rtt.idx',), UninterpretedSort('quic_packet_0rtt.idx',), BooleanSort())), Var('I', UninterpretedSort('quic_packet_0rtt.idx',)), Apply(Const('quic_packet_0rtt.retired_cids.end', FunctionSort(UninterpretedSort('quic_packet_0rtt.retired_cids',), UninterpretedSort('quic_packet_0rtt.idx',))), Var('X', UninterpretedSort('quic_packet_0rtt.retired_cids',))))), Eq(Apply(Const('quic_packet_0rtt.retired_cids.value', FunctionSort(UninterpretedSort('quic_packet_0rtt.retired_cids',), UninterpretedSort('quic_packet_0rtt.idx',), UninterpretedSort('cid_seq',))), Var('X', UninterpretedSort('quic_packet_0rtt.retired_cids',)), Var('I', UninterpretedSort('quic_packet_0rtt.idx',))), Apply(Const('quic_packet_0rtt.retired_cids.value', FunctionSort(UninterpretedSort('quic_packet_0rtt.retired_cids',), UninterpretedSort('quic_packet_0rtt.idx',), UninterpretedSort('cid_seq',))), Var('Y', UninterpretedSort('quic_packet_0rtt.retired_cids',)), Var('I', UninterpretedSort('quic_packet_0rtt.idx',))))))),), Eq(Var('X', UninterpretedSort('quic_packet_0rtt.retired_cids',)), Var('Y', UninterpretedSort('quic_packet_0rtt.retired_cids',)))))",
                "explicit": false,
                "lineno": {},
                "id": 3069
            },
            {
                "definition": false,
                "assumed": false,
                "temporal": null,
                "args": "(quic_packet_coal_0rtt.idx.spec.prop2, Implies(Apply(Const('quic_packet_coal_0rtt.idx.succ', FunctionSort(UninterpretedSort('quic_packet_coal_0rtt.idx',), UninterpretedSort('quic_packet_coal_0rtt.idx',), BooleanSort())), Var('X', UninterpretedSort('quic_packet_coal_0rtt.idx',)), Var('Z', UninterpretedSort('quic_packet_coal_0rtt.idx',))), And(Apply(Const('<', FunctionSort(UninterpretedSort('quic_packet_coal_0rtt.idx',), UninterpretedSort('quic_packet_coal_0rtt.idx',), BooleanSort())), Var('X', UninterpretedSort('quic_packet_coal_0rtt.idx',)), Var('Z', UninterpretedSort('quic_packet_coal_0rtt.idx',))), Not(And(Apply(Const('<', FunctionSort(UninterpretedSort('quic_packet_coal_0rtt.idx',), UninterpretedSort('quic_packet_coal_0rtt.idx',), BooleanSort())), Var('X', UninterpretedSort('quic_packet_coal_0rtt.idx',)), Var('Y', UninterpretedSort('quic_packet_coal_0rtt.idx',))), Apply(Const('<', FunctionSort(UninterpretedSort('quic_packet_coal_0rtt.idx',), UninterpretedSort('quic_packet_coal_0rtt.idx',), BooleanSort())), Var('Y', UninterpretedSort('quic_packet_coal_0rtt.idx',)), Var('Z', UninterpretedSort('quic_packet_coal_0rtt.idx',)))),))))",
                "explicit": false,
                "lineno": {},
                "id": 783
            },
            {
                "definition": false,
                "assumed": false,
                "temporal": null,
                "args": "(quic_packet_coal_0rtt.idx.spec.transitivity, Implies(And(Apply(Const('<', FunctionSort(UninterpretedSort('quic_packet_coal_0rtt.idx',), UninterpretedSort('quic_packet_coal_0rtt.idx',), BooleanSort())), Var('T', UninterpretedSort('quic_packet_coal_0rtt.idx',)), Var('U', UninterpretedSort('quic_packet_coal_0rtt.idx',))), Apply(Const('<', FunctionSort(UninterpretedSort('quic_packet_coal_0rtt.idx',), UninterpretedSort('quic_packet_coal_0rtt.idx',), BooleanSort())), Var('U', UninterpretedSort('quic_packet_coal_0rtt.idx',)), Var('V', UninterpretedSort('quic_packet_coal_0rtt.idx',)))), Apply(Const('<', FunctionSort(UninterpretedSort('quic_packet_coal_0rtt.idx',), UninterpretedSort('quic_packet_coal_0rtt.idx',), BooleanSort())), Var('T', UninterpretedSort('quic_packet_coal_0rtt.idx',)), Var('V', UninterpretedSort('quic_packet_coal_0rtt.idx',)))))",
                "explicit": false,
                "lineno": {},
                "id": 784
            },
            {
                "definition": false,
                "assumed": false,
                "temporal": null,
                "args": "(quic_packet_coal_0rtt.idx.spec.antisymmetry, Not(And(Apply(Const('<', FunctionSort(UninterpretedSort('quic_packet_coal_0rtt.idx',), UninterpretedSort('quic_packet_coal_0rtt.idx',), BooleanSort())), Var('T', UninterpretedSort('quic_packet_coal_0rtt.idx',)), Var('U', UninterpretedSort('quic_packet_coal_0rtt.idx',))), Apply(Const('<', FunctionSort(UninterpretedSort('quic_packet_coal_0rtt.idx',), UninterpretedSort('quic_packet_coal_0rtt.idx',), BooleanSort())), Var('U', UninterpretedSort('quic_packet_coal_0rtt.idx',)), Var('T', UninterpretedSort('quic_packet_coal_0rtt.idx',)))),))",
                "explicit": false,
                "lineno": {},
                "id": 785
            },
            {
                "definition": false,
                "assumed": false,
                "temporal": null,
                "args": "(quic_packet_coal_0rtt.idx.spec.totality, Or(Apply(Const('<', FunctionSort(UninterpretedSort('quic_packet_coal_0rtt.idx',), UninterpretedSort('quic_packet_coal_0rtt.idx',), BooleanSort())), Var('T', UninterpretedSort('quic_packet_coal_0rtt.idx',)), Var('U', UninterpretedSort('quic_packet_coal_0rtt.idx',))), Eq(Var('T', UninterpretedSort('quic_packet_coal_0rtt.idx',)), Var('U', UninterpretedSort('quic_packet_coal_0rtt.idx',))), Apply(Const('<', FunctionSort(UninterpretedSort('quic_packet_coal_0rtt.idx',), UninterpretedSort('quic_packet_coal_0rtt.idx',), BooleanSort())), Var('U', UninterpretedSort('quic_packet_coal_0rtt.idx',)), Var('T', UninterpretedSort('quic_packet_coal_0rtt.idx',)))))",
                "explicit": false,
                "lineno": {},
                "id": 786
            },
            {
                "definition": false,
                "assumed": false,
                "temporal": null,
                "args": "(quic_packet_coal_0rtt.idx.spec.prop1, Apply(Const('<=', FunctionSort(UninterpretedSort('quic_packet_coal_0rtt.idx',), UninterpretedSort('quic_packet_coal_0rtt.idx',), BooleanSort())), Const('0', UninterpretedSort('quic_packet_coal_0rtt.idx',)), Var('X', UninterpretedSort('quic_packet_coal_0rtt.idx',))))",
                "explicit": false,
                "lineno": {},
                "id": 787
            },
            {
                "definition": false,
                "assumed": false,
                "temporal": null,
                "args": "(quic_packet_coal_0rtt.arr.spec.prop103, Apply(Const('>=', FunctionSort(UninterpretedSort('quic_packet_coal_0rtt.idx',), UninterpretedSort('quic_packet_coal_0rtt.idx',), BooleanSort())), Apply(Const('quic_packet_coal_0rtt.arr.end', FunctionSort(UninterpretedSort('quic_packet_coal_0rtt.arr',), UninterpretedSort('quic_packet_coal_0rtt.idx',))), Var('X', UninterpretedSort('quic_packet_coal_0rtt.arr',))), Const('0', UninterpretedSort('quic_packet_coal_0rtt.idx',))))",
                "explicit": false,
                "lineno": {},
                "id": 791
            },
            {
                "definition": false,
                "assumed": false,
                "temporal": null,
                "args": "(quic_packet_coal_0rtt.arr.spec.extensionality._a, Implies(And(And(Eq(Apply(Const('quic_packet_coal_0rtt.arr.end', FunctionSort(UninterpretedSort('quic_packet_coal_0rtt.arr',), UninterpretedSort('quic_packet_coal_0rtt.idx',))), Var('X', UninterpretedSort('quic_packet_coal_0rtt.arr',))), Apply(Const('quic_packet_coal_0rtt.arr.end', FunctionSort(UninterpretedSort('quic_packet_coal_0rtt.arr',), UninterpretedSort('quic_packet_coal_0rtt.idx',))), Var('Y', UninterpretedSort('quic_packet_coal_0rtt.arr',)))), ForAll(frozenset([Var('I', UninterpretedSort('quic_packet_coal_0rtt.idx',))]), Implies(And(Apply(Const('<=', FunctionSort(UninterpretedSort('quic_packet_coal_0rtt.idx',), UninterpretedSort('quic_packet_coal_0rtt.idx',), BooleanSort())), Const('0', UninterpretedSort('quic_packet_coal_0rtt.idx',)), Var('I', UninterpretedSort('quic_packet_coal_0rtt.idx',))), Apply(Const('<', FunctionSort(UninterpretedSort('quic_packet_coal_0rtt.idx',), UninterpretedSort('quic_packet_coal_0rtt.idx',), BooleanSort())), Var('I', UninterpretedSort('quic_packet_coal_0rtt.idx',)), Apply(Const('quic_packet_coal_0rtt.arr.end', FunctionSort(UninterpretedSort('quic_packet_coal_0rtt.arr',), UninterpretedSort('quic_packet_coal_0rtt.idx',))), Var('X', UninterpretedSort('quic_packet_coal_0rtt.arr',))))), Eq(Apply(Const('quic_packet_coal_0rtt.arr.value', FunctionSort(UninterpretedSort('quic_packet_coal_0rtt.arr',), UninterpretedSort('quic_packet_coal_0rtt.idx',), UninterpretedSort('quic_packet_coal_0rtt',))), Var('X', UninterpretedSort('quic_packet_coal_0rtt.arr',)), Var('I', UninterpretedSort('quic_packet_coal_0rtt.idx',))), Apply(Const('quic_packet_coal_0rtt.arr.value', FunctionSort(UninterpretedSort('quic_packet_coal_0rtt.arr',), UninterpretedSort('quic_packet_coal_0rtt.idx',), UninterpretedSort('quic_packet_coal_0rtt',))), Var('Y', UninterpretedSort('quic_packet_coal_0rtt.arr',)), Var('I', UninterpretedSort('quic_packet_coal_0rtt.idx',))))))),), Eq(Var('X', UninterpretedSort('quic_packet_coal_0rtt.arr',)), Var('Y', UninterpretedSort('quic_packet_coal_0rtt.arr',)))))",
                "explicit": false,
                "lineno": {},
                "id": 3078
            },
            {
                "definition": false,
                "assumed": false,
                "temporal": null,
                "args": "(quic_packet_coal_0rtt.retired_cids.spec.prop103, Apply(Const('>=', FunctionSort(UninterpretedSort('quic_packet_coal_0rtt.idx',), UninterpretedSort('quic_packet_coal_0rtt.idx',), BooleanSort())), Apply(Const('quic_packet_coal_0rtt.retired_cids.end', FunctionSort(UninterpretedSort('quic_packet_coal_0rtt.retired_cids',), UninterpretedSort('quic_packet_coal_0rtt.idx',))), Var('X', UninterpretedSort('quic_packet_coal_0rtt.retired_cids',))), Const('0', UninterpretedSort('quic_packet_coal_0rtt.idx',))))",
                "explicit": false,
                "lineno": {},
                "id": 798
            },
            {
                "definition": false,
                "assumed": false,
                "temporal": null,
                "args": "(quic_packet_coal_0rtt.retired_cids.spec.extensionality._a, Implies(And(And(Eq(Apply(Const('quic_packet_coal_0rtt.retired_cids.end', FunctionSort(UninterpretedSort('quic_packet_coal_0rtt.retired_cids',), UninterpretedSort('quic_packet_coal_0rtt.idx',))), Var('X', UninterpretedSort('quic_packet_coal_0rtt.retired_cids',))), Apply(Const('quic_packet_coal_0rtt.retired_cids.end', FunctionSort(UninterpretedSort('quic_packet_coal_0rtt.retired_cids',), UninterpretedSort('quic_packet_coal_0rtt.idx',))), Var('Y', UninterpretedSort('quic_packet_coal_0rtt.retired_cids',)))), ForAll(frozenset([Var('I', UninterpretedSort('quic_packet_coal_0rtt.idx',))]), Implies(And(Apply(Const('<=', FunctionSort(UninterpretedSort('quic_packet_coal_0rtt.idx',), UninterpretedSort('quic_packet_coal_0rtt.idx',), BooleanSort())), Const('0', UninterpretedSort('quic_packet_coal_0rtt.idx',)), Var('I', UninterpretedSort('quic_packet_coal_0rtt.idx',))), Apply(Const('<', FunctionSort(UninterpretedSort('quic_packet_coal_0rtt.idx',), UninterpretedSort('quic_packet_coal_0rtt.idx',), BooleanSort())), Var('I', UninterpretedSort('quic_packet_coal_0rtt.idx',)), Apply(Const('quic_packet_coal_0rtt.retired_cids.end', FunctionSort(UninterpretedSort('quic_packet_coal_0rtt.retired_cids',), UninterpretedSort('quic_packet_coal_0rtt.idx',))), Var('X', UninterpretedSort('quic_packet_coal_0rtt.retired_cids',))))), Eq(Apply(Const('quic_packet_coal_0rtt.retired_cids.value', FunctionSort(UninterpretedSort('quic_packet_coal_0rtt.retired_cids',), UninterpretedSort('quic_packet_coal_0rtt.idx',), UninterpretedSort('cid_seq',))), Var('X', UninterpretedSort('quic_packet_coal_0rtt.retired_cids',)), Var('I', UninterpretedSort('quic_packet_coal_0rtt.idx',))), Apply(Const('quic_packet_coal_0rtt.retired_cids.value', FunctionSort(UninterpretedSort('quic_packet_coal_0rtt.retired_cids',), UninterpretedSort('quic_packet_coal_0rtt.idx',), UninterpretedSort('cid_seq',))), Var('Y', UninterpretedSort('quic_packet_coal_0rtt.retired_cids',)), Var('I', UninterpretedSort('quic_packet_coal_0rtt.idx',))))))),), Eq(Var('X', UninterpretedSort('quic_packet_coal_0rtt.retired_cids',)), Var('Y', UninterpretedSort('quic_packet_coal_0rtt.retired_cids',)))))",
                "explicit": false,
                "lineno": {},
                "id": 3082
            },
            {
                "definition": false,
                "assumed": false,
                "temporal": null,
                "args": "(forged_pkts.spec.prop103, Apply(Const('>=', FunctionSort(UninterpretedSort('index',), UninterpretedSort('index',), BooleanSort())), Apply(Const('forged_pkts.end', FunctionSort(UninterpretedSort('forged_pkts',), UninterpretedSort('index',))), Var('X', UninterpretedSort('forged_pkts',))), Const('0', UninterpretedSort('index',))))",
                "explicit": false,
                "lineno": {},
                "id": 805
            },
            {
                "definition": false,
                "assumed": false,
                "temporal": null,
                "args": "(forged_pkts.spec.extensionality._a, Implies(And(And(Eq(Apply(Const('forged_pkts.end', FunctionSort(UninterpretedSort('forged_pkts',), UninterpretedSort('index',))), Var('X', UninterpretedSort('forged_pkts',))), Apply(Const('forged_pkts.end', FunctionSort(UninterpretedSort('forged_pkts',), UninterpretedSort('index',))), Var('Y', UninterpretedSort('forged_pkts',)))), ForAll(frozenset([Var('I', UninterpretedSort('index',))]), Implies(And(Apply(Const('<=', FunctionSort(UninterpretedSort('index',), UninterpretedSort('index',), BooleanSort())), Const('0', UninterpretedSort('index',)), Var('I', UninterpretedSort('index',))), Apply(Const('<', FunctionSort(UninterpretedSort('index',), UninterpretedSort('index',), BooleanSort())), Var('I', UninterpretedSort('index',)), Apply(Const('forged_pkts.end', FunctionSort(UninterpretedSort('forged_pkts',), UninterpretedSort('index',))), Var('X', UninterpretedSort('forged_pkts',))))), Eq(Apply(Const('forged_pkts.value', FunctionSort(UninterpretedSort('forged_pkts',), UninterpretedSort('index',), UninterpretedSort('stream_data',))), Var('X', UninterpretedSort('forged_pkts',)), Var('I', UninterpretedSort('index',))), Apply(Const('forged_pkts.value', FunctionSort(UninterpretedSort('forged_pkts',), UninterpretedSort('index',), UninterpretedSort('stream_data',))), Var('Y', UninterpretedSort('forged_pkts',)), Var('I', UninterpretedSort('index',))))))),), Eq(Var('X', UninterpretedSort('forged_pkts',)), Var('Y', UninterpretedSort('forged_pkts',)))))",
                "explicit": false,
                "lineno": {},
                "id": 3086
            },
            {
                "definition": false,
                "assumed": false,
                "temporal": null,
                "args": "(forged_protected_quic_packet.idx.spec.prop2, Implies(Apply(Const('forged_protected_quic_packet.idx.succ', FunctionSort(UninterpretedSort('forged_protected_quic_packet.idx',), UninterpretedSort('forged_protected_quic_packet.idx',), BooleanSort())), Var('X', UninterpretedSort('forged_protected_quic_packet.idx',)), Var('Z', UninterpretedSort('forged_protected_quic_packet.idx',))), And(Apply(Const('<', FunctionSort(UninterpretedSort('forged_protected_quic_packet.idx',), UninterpretedSort('forged_protected_quic_packet.idx',), BooleanSort())), Var('X', UninterpretedSort('forged_protected_quic_packet.idx',)), Var('Z', UninterpretedSort('forged_protected_quic_packet.idx',))), Not(And(Apply(Const('<', FunctionSort(UninterpretedSort('forged_protected_quic_packet.idx',), UninterpretedSort('forged_protected_quic_packet.idx',), BooleanSort())), Var('X', UninterpretedSort('forged_protected_quic_packet.idx',)), Var('Y', UninterpretedSort('forged_protected_quic_packet.idx',))), Apply(Const('<', FunctionSort(UninterpretedSort('forged_protected_quic_packet.idx',), UninterpretedSort('forged_protected_quic_packet.idx',), BooleanSort())), Var('Y', UninterpretedSort('forged_protected_quic_packet.idx',)), Var('Z', UninterpretedSort('forged_protected_quic_packet.idx',)))),))))",
                "explicit": false,
                "lineno": {},
                "id": 832
            },
            {
                "definition": false,
                "assumed": false,
                "temporal": null,
                "args": "(forged_protected_quic_packet.idx.spec.transitivity, Implies(And(Apply(Const('<', FunctionSort(UninterpretedSort('forged_protected_quic_packet.idx',), UninterpretedSort('forged_protected_quic_packet.idx',), BooleanSort())), Var('T', UninterpretedSort('forged_protected_quic_packet.idx',)), Var('U', UninterpretedSort('forged_protected_quic_packet.idx',))), Apply(Const('<', FunctionSort(UninterpretedSort('forged_protected_quic_packet.idx',), UninterpretedSort('forged_protected_quic_packet.idx',), BooleanSort())), Var('U', UninterpretedSort('forged_protected_quic_packet.idx',)), Var('V', UninterpretedSort('forged_protected_quic_packet.idx',)))), Apply(Const('<', FunctionSort(UninterpretedSort('forged_protected_quic_packet.idx',), UninterpretedSort('forged_protected_quic_packet.idx',), BooleanSort())), Var('T', UninterpretedSort('forged_protected_quic_packet.idx',)), Var('V', UninterpretedSort('forged_protected_quic_packet.idx',)))))",
                "explicit": false,
                "lineno": {},
                "id": 833
            },
            {
                "definition": false,
                "assumed": false,
                "temporal": null,
                "args": "(forged_protected_quic_packet.idx.spec.antisymmetry, Not(And(Apply(Const('<', FunctionSort(UninterpretedSort('forged_protected_quic_packet.idx',), UninterpretedSort('forged_protected_quic_packet.idx',), BooleanSort())), Var('T', UninterpretedSort('forged_protected_quic_packet.idx',)), Var('U', UninterpretedSort('forged_protected_quic_packet.idx',))), Apply(Const('<', FunctionSort(UninterpretedSort('forged_protected_quic_packet.idx',), UninterpretedSort('forged_protected_quic_packet.idx',), BooleanSort())), Var('U', UninterpretedSort('forged_protected_quic_packet.idx',)), Var('T', UninterpretedSort('forged_protected_quic_packet.idx',)))),))",
                "explicit": false,
                "lineno": {},
                "id": 834
            },
            {
                "definition": false,
                "assumed": false,
                "temporal": null,
                "args": "(forged_protected_quic_packet.idx.spec.totality, Or(Apply(Const('<', FunctionSort(UninterpretedSort('forged_protected_quic_packet.idx',), UninterpretedSort('forged_protected_quic_packet.idx',), BooleanSort())), Var('T', UninterpretedSort('forged_protected_quic_packet.idx',)), Var('U', UninterpretedSort('forged_protected_quic_packet.idx',))), Eq(Var('T', UninterpretedSort('forged_protected_quic_packet.idx',)), Var('U', UninterpretedSort('forged_protected_quic_packet.idx',))), Apply(Const('<', FunctionSort(UninterpretedSort('forged_protected_quic_packet.idx',), UninterpretedSort('forged_protected_quic_packet.idx',), BooleanSort())), Var('U', UninterpretedSort('forged_protected_quic_packet.idx',)), Var('T', UninterpretedSort('forged_protected_quic_packet.idx',)))))",
                "explicit": false,
                "lineno": {},
                "id": 835
            },
            {
                "definition": false,
                "assumed": false,
                "temporal": null,
                "args": "(forged_protected_quic_packet.idx.spec.prop1, Apply(Const('<=', FunctionSort(UninterpretedSort('forged_protected_quic_packet.idx',), UninterpretedSort('forged_protected_quic_packet.idx',), BooleanSort())), Const('0', UninterpretedSort('forged_protected_quic_packet.idx',)), Var('X', UninterpretedSort('forged_protected_quic_packet.idx',))))",
                "explicit": false,
                "lineno": {},
                "id": 836
            },
            {
                "definition": false,
                "assumed": false,
                "temporal": null,
                "args": "(forged_protected_quic_packet.arr.spec.prop103, Apply(Const('>=', FunctionSort(UninterpretedSort('forged_protected_quic_packet.idx',), UninterpretedSort('forged_protected_quic_packet.idx',), BooleanSort())), Apply(Const('forged_protected_quic_packet.arr.end', FunctionSort(UninterpretedSort('forged_protected_quic_packet.arr',), UninterpretedSort('forged_protected_quic_packet.idx',))), Var('X', UninterpretedSort('forged_protected_quic_packet.arr',))), Const('0', UninterpretedSort('forged_protected_quic_packet.idx',))))",
                "explicit": false,
                "lineno": {},
                "id": 840
            },
            {
                "definition": false,
                "assumed": false,
                "temporal": null,
                "args": "(forged_protected_quic_packet.arr.spec.extensionality._a, Implies(And(And(Eq(Apply(Const('forged_protected_quic_packet.arr.end', FunctionSort(UninterpretedSort('forged_protected_quic_packet.arr',), UninterpretedSort('forged_protected_quic_packet.idx',))), Var('X', UninterpretedSort('forged_protected_quic_packet.arr',))), Apply(Const('forged_protected_quic_packet.arr.end', FunctionSort(UninterpretedSort('forged_protected_quic_packet.arr',), UninterpretedSort('forged_protected_quic_packet.idx',))), Var('Y', UninterpretedSort('forged_protected_quic_packet.arr',)))), ForAll(frozenset([Var('I', UninterpretedSort('forged_protected_quic_packet.idx',))]), Implies(And(Apply(Const('<=', FunctionSort(UninterpretedSort('forged_protected_quic_packet.idx',), UninterpretedSort('forged_protected_quic_packet.idx',), BooleanSort())), Const('0', UninterpretedSort('forged_protected_quic_packet.idx',)), Var('I', UninterpretedSort('forged_protected_quic_packet.idx',))), Apply(Const('<', FunctionSort(UninterpretedSort('forged_protected_quic_packet.idx',), UninterpretedSort('forged_protected_quic_packet.idx',), BooleanSort())), Var('I', UninterpretedSort('forged_protected_quic_packet.idx',)), Apply(Const('forged_protected_quic_packet.arr.end', FunctionSort(UninterpretedSort('forged_protected_quic_packet.arr',), UninterpretedSort('forged_protected_quic_packet.idx',))), Var('X', UninterpretedSort('forged_protected_quic_packet.arr',))))), Eq(Apply(Const('forged_protected_quic_packet.arr.value', FunctionSort(UninterpretedSort('forged_protected_quic_packet.arr',), UninterpretedSort('forged_protected_quic_packet.idx',), UninterpretedSort('forged_protected_quic_packet',))), Var('X', UninterpretedSort('forged_protected_quic_packet.arr',)), Var('I', UninterpretedSort('forged_protected_quic_packet.idx',))), Apply(Const('forged_protected_quic_packet.arr.value', FunctionSort(UninterpretedSort('forged_protected_quic_packet.arr',), UninterpretedSort('forged_protected_quic_packet.idx',), UninterpretedSort('forged_protected_quic_packet',))), Var('Y', UninterpretedSort('forged_protected_quic_packet.arr',)), Var('I', UninterpretedSort('forged_protected_quic_packet.idx',))))))),), Eq(Var('X', UninterpretedSort('forged_protected_quic_packet.arr',)), Var('Y', UninterpretedSort('forged_protected_quic_packet.arr',)))))",
                "explicit": false,
                "lineno": {},
                "id": 3095
            },
            {
                "definition": false,
                "assumed": false,
                "temporal": null,
                "args": "(forged_protected_quic_packet.retired_cids.spec.prop103, Apply(Const('>=', FunctionSort(UninterpretedSort('forged_protected_quic_packet.idx',), UninterpretedSort('forged_protected_quic_packet.idx',), BooleanSort())), Apply(Const('forged_protected_quic_packet.retired_cids.end', FunctionSort(UninterpretedSort('forged_protected_quic_packet.retired_cids',), UninterpretedSort('forged_protected_quic_packet.idx',))), Var('X', UninterpretedSort('forged_protected_quic_packet.retired_cids',))), Const('0', UninterpretedSort('forged_protected_quic_packet.idx',))))",
                "explicit": false,
                "lineno": {},
                "id": 847
            },
            {
                "definition": false,
                "assumed": false,
                "temporal": null,
                "args": "(forged_protected_quic_packet.retired_cids.spec.extensionality._a, Implies(And(And(Eq(Apply(Const('forged_protected_quic_packet.retired_cids.end', FunctionSort(UninterpretedSort('forged_protected_quic_packet.retired_cids',), UninterpretedSort('forged_protected_quic_packet.idx',))), Var('X', UninterpretedSort('forged_protected_quic_packet.retired_cids',))), Apply(Const('forged_protected_quic_packet.retired_cids.end', FunctionSort(UninterpretedSort('forged_protected_quic_packet.retired_cids',), UninterpretedSort('forged_protected_quic_packet.idx',))), Var('Y', UninterpretedSort('forged_protected_quic_packet.retired_cids',)))), ForAll(frozenset([Var('I', UninterpretedSort('forged_protected_quic_packet.idx',))]), Implies(And(Apply(Const('<=', FunctionSort(UninterpretedSort('forged_protected_quic_packet.idx',), UninterpretedSort('forged_protected_quic_packet.idx',), BooleanSort())), Const('0', UninterpretedSort('forged_protected_quic_packet.idx',)), Var('I', UninterpretedSort('forged_protected_quic_packet.idx',))), Apply(Const('<', FunctionSort(UninterpretedSort('forged_protected_quic_packet.idx',), UninterpretedSort('forged_protected_quic_packet.idx',), BooleanSort())), Var('I', UninterpretedSort('forged_protected_quic_packet.idx',)), Apply(Const('forged_protected_quic_packet.retired_cids.end', FunctionSort(UninterpretedSort('forged_protected_quic_packet.retired_cids',), UninterpretedSort('forged_protected_quic_packet.idx',))), Var('X', UninterpretedSort('forged_protected_quic_packet.retired_cids',))))), Eq(Apply(Const('forged_protected_quic_packet.retired_cids.value', FunctionSort(UninterpretedSort('forged_protected_quic_packet.retired_cids',), UninterpretedSort('forged_protected_quic_packet.idx',), UninterpretedSort('cid_seq',))), Var('X', UninterpretedSort('forged_protected_quic_packet.retired_cids',)), Var('I', UninterpretedSort('forged_protected_quic_packet.idx',))), Apply(Const('forged_protected_quic_packet.retired_cids.value', FunctionSort(UninterpretedSort('forged_protected_quic_packet.retired_cids',), UninterpretedSort('forged_protected_quic_packet.idx',), UninterpretedSort('cid_seq',))), Var('Y', UninterpretedSort('forged_protected_quic_packet.retired_cids',)), Var('I', UninterpretedSort('forged_protected_quic_packet.idx',))))))),), Eq(Var('X', UninterpretedSort('forged_protected_quic_packet.retired_cids',)), Var('Y', UninterpretedSort('forged_protected_quic_packet.retired_cids',)))))",
                "explicit": false,
                "lineno": {},
                "id": 3099
            },
            {
                "definition": false,
                "assumed": false,
                "temporal": null,
                "args": "(forged_quic_packet.idx.spec.prop2, Implies(Apply(Const('forged_quic_packet.idx.succ', FunctionSort(UninterpretedSort('forged_quic_packet.idx',), UninterpretedSort('forged_quic_packet.idx',), BooleanSort())), Var('X', UninterpretedSort('forged_quic_packet.idx',)), Var('Z', UninterpretedSort('forged_quic_packet.idx',))), And(Apply(Const('<', FunctionSort(UninterpretedSort('forged_quic_packet.idx',), UninterpretedSort('forged_quic_packet.idx',), BooleanSort())), Var('X', UninterpretedSort('forged_quic_packet.idx',)), Var('Z', UninterpretedSort('forged_quic_packet.idx',))), Not(And(Apply(Const('<', FunctionSort(UninterpretedSort('forged_quic_packet.idx',), UninterpretedSort('forged_quic_packet.idx',), BooleanSort())), Var('X', UninterpretedSort('forged_quic_packet.idx',)), Var('Y', UninterpretedSort('forged_quic_packet.idx',))), Apply(Const('<', FunctionSort(UninterpretedSort('forged_quic_packet.idx',), UninterpretedSort('forged_quic_packet.idx',), BooleanSort())), Var('Y', UninterpretedSort('forged_quic_packet.idx',)), Var('Z', UninterpretedSort('forged_quic_packet.idx',)))),))))",
                "explicit": false,
                "lineno": {},
                "id": 874
            },
            {
                "definition": false,
                "assumed": false,
                "temporal": null,
                "args": "(forged_quic_packet.idx.spec.transitivity, Implies(And(Apply(Const('<', FunctionSort(UninterpretedSort('forged_quic_packet.idx',), UninterpretedSort('forged_quic_packet.idx',), BooleanSort())), Var('T', UninterpretedSort('forged_quic_packet.idx',)), Var('U', UninterpretedSort('forged_quic_packet.idx',))), Apply(Const('<', FunctionSort(UninterpretedSort('forged_quic_packet.idx',), UninterpretedSort('forged_quic_packet.idx',), BooleanSort())), Var('U', UninterpretedSort('forged_quic_packet.idx',)), Var('V', UninterpretedSort('forged_quic_packet.idx',)))), Apply(Const('<', FunctionSort(UninterpretedSort('forged_quic_packet.idx',), UninterpretedSort('forged_quic_packet.idx',), BooleanSort())), Var('T', UninterpretedSort('forged_quic_packet.idx',)), Var('V', UninterpretedSort('forged_quic_packet.idx',)))))",
                "explicit": false,
                "lineno": {},
                "id": 875
            },
            {
                "definition": false,
                "assumed": false,
                "temporal": null,
                "args": "(forged_quic_packet.idx.spec.antisymmetry, Not(And(Apply(Const('<', FunctionSort(UninterpretedSort('forged_quic_packet.idx',), UninterpretedSort('forged_quic_packet.idx',), BooleanSort())), Var('T', UninterpretedSort('forged_quic_packet.idx',)), Var('U', UninterpretedSort('forged_quic_packet.idx',))), Apply(Const('<', FunctionSort(UninterpretedSort('forged_quic_packet.idx',), UninterpretedSort('forged_quic_packet.idx',), BooleanSort())), Var('U', UninterpretedSort('forged_quic_packet.idx',)), Var('T', UninterpretedSort('forged_quic_packet.idx',)))),))",
                "explicit": false,
                "lineno": {},
                "id": 876
            },
            {
                "definition": false,
                "assumed": false,
                "temporal": null,
                "args": "(forged_quic_packet.idx.spec.totality, Or(Apply(Const('<', FunctionSort(UninterpretedSort('forged_quic_packet.idx',), UninterpretedSort('forged_quic_packet.idx',), BooleanSort())), Var('T', UninterpretedSort('forged_quic_packet.idx',)), Var('U', UninterpretedSort('forged_quic_packet.idx',))), Eq(Var('T', UninterpretedSort('forged_quic_packet.idx',)), Var('U', UninterpretedSort('forged_quic_packet.idx',))), Apply(Const('<', FunctionSort(UninterpretedSort('forged_quic_packet.idx',), UninterpretedSort('forged_quic_packet.idx',), BooleanSort())), Var('U', UninterpretedSort('forged_quic_packet.idx',)), Var('T', UninterpretedSort('forged_quic_packet.idx',)))))",
                "explicit": false,
                "lineno": {},
                "id": 877
            },
            {
                "definition": false,
                "assumed": false,
                "temporal": null,
                "args": "(forged_quic_packet.idx.spec.prop1, Apply(Const('<=', FunctionSort(UninterpretedSort('forged_quic_packet.idx',), UninterpretedSort('forged_quic_packet.idx',), BooleanSort())), Const('0', UninterpretedSort('forged_quic_packet.idx',)), Var('X', UninterpretedSort('forged_quic_packet.idx',))))",
                "explicit": false,
                "lineno": {},
                "id": 878
            },
            {
                "definition": false,
                "assumed": false,
                "temporal": null,
                "args": "(forged_quic_packet.arr.spec.prop103, Apply(Const('>=', FunctionSort(UninterpretedSort('forged_quic_packet.idx',), UninterpretedSort('forged_quic_packet.idx',), BooleanSort())), Apply(Const('forged_quic_packet.arr.end', FunctionSort(UninterpretedSort('forged_quic_packet.arr',), UninterpretedSort('forged_quic_packet.idx',))), Var('X', UninterpretedSort('forged_quic_packet.arr',))), Const('0', UninterpretedSort('forged_quic_packet.idx',))))",
                "explicit": false,
                "lineno": {},
                "id": 882
            },
            {
                "definition": false,
                "assumed": false,
                "temporal": null,
                "args": "(forged_quic_packet.arr.spec.extensionality._a, Implies(And(And(Eq(Apply(Const('forged_quic_packet.arr.end', FunctionSort(UninterpretedSort('forged_quic_packet.arr',), UninterpretedSort('forged_quic_packet.idx',))), Var('X', UninterpretedSort('forged_quic_packet.arr',))), Apply(Const('forged_quic_packet.arr.end', FunctionSort(UninterpretedSort('forged_quic_packet.arr',), UninterpretedSort('forged_quic_packet.idx',))), Var('Y', UninterpretedSort('forged_quic_packet.arr',)))), ForAll(frozenset([Var('I', UninterpretedSort('forged_quic_packet.idx',))]), Implies(And(Apply(Const('<=', FunctionSort(UninterpretedSort('forged_quic_packet.idx',), UninterpretedSort('forged_quic_packet.idx',), BooleanSort())), Const('0', UninterpretedSort('forged_quic_packet.idx',)), Var('I', UninterpretedSort('forged_quic_packet.idx',))), Apply(Const('<', FunctionSort(UninterpretedSort('forged_quic_packet.idx',), UninterpretedSort('forged_quic_packet.idx',), BooleanSort())), Var('I', UninterpretedSort('forged_quic_packet.idx',)), Apply(Const('forged_quic_packet.arr.end', FunctionSort(UninterpretedSort('forged_quic_packet.arr',), UninterpretedSort('forged_quic_packet.idx',))), Var('X', UninterpretedSort('forged_quic_packet.arr',))))), Eq(Apply(Const('forged_quic_packet.arr.value', FunctionSort(UninterpretedSort('forged_quic_packet.arr',), UninterpretedSort('forged_quic_packet.idx',), UninterpretedSort('forged_quic_packet',))), Var('X', UninterpretedSort('forged_quic_packet.arr',)), Var('I', UninterpretedSort('forged_quic_packet.idx',))), Apply(Const('forged_quic_packet.arr.value', FunctionSort(UninterpretedSort('forged_quic_packet.arr',), UninterpretedSort('forged_quic_packet.idx',), UninterpretedSort('forged_quic_packet',))), Var('Y', UninterpretedSort('forged_quic_packet.arr',)), Var('I', UninterpretedSort('forged_quic_packet.idx',))))))),), Eq(Var('X', UninterpretedSort('forged_quic_packet.arr',)), Var('Y', UninterpretedSort('forged_quic_packet.arr',)))))",
                "explicit": false,
                "lineno": {},
                "id": 3108
            },
            {
                "definition": false,
                "assumed": false,
                "temporal": null,
                "args": "(forged_quic_packet.retired_cids.spec.prop103, Apply(Const('>=', FunctionSort(UninterpretedSort('forged_quic_packet.idx',), UninterpretedSort('forged_quic_packet.idx',), BooleanSort())), Apply(Const('forged_quic_packet.retired_cids.end', FunctionSort(UninterpretedSort('forged_quic_packet.retired_cids',), UninterpretedSort('forged_quic_packet.idx',))), Var('X', UninterpretedSort('forged_quic_packet.retired_cids',))), Const('0', UninterpretedSort('forged_quic_packet.idx',))))",
                "explicit": false,
                "lineno": {},
                "id": 889
            },
            {
                "definition": false,
                "assumed": false,
                "temporal": null,
                "args": "(forged_quic_packet.retired_cids.spec.extensionality._a, Implies(And(And(Eq(Apply(Const('forged_quic_packet.retired_cids.end', FunctionSort(UninterpretedSort('forged_quic_packet.retired_cids',), UninterpretedSort('forged_quic_packet.idx',))), Var('X', UninterpretedSort('forged_quic_packet.retired_cids',))), Apply(Const('forged_quic_packet.retired_cids.end', FunctionSort(UninterpretedSort('forged_quic_packet.retired_cids',), UninterpretedSort('forged_quic_packet.idx',))), Var('Y', UninterpretedSort('forged_quic_packet.retired_cids',)))), ForAll(frozenset([Var('I', UninterpretedSort('forged_quic_packet.idx',))]), Implies(And(Apply(Const('<=', FunctionSort(UninterpretedSort('forged_quic_packet.idx',), UninterpretedSort('forged_quic_packet.idx',), BooleanSort())), Const('0', UninterpretedSort('forged_quic_packet.idx',)), Var('I', UninterpretedSort('forged_quic_packet.idx',))), Apply(Const('<', FunctionSort(UninterpretedSort('forged_quic_packet.idx',), UninterpretedSort('forged_quic_packet.idx',), BooleanSort())), Var('I', UninterpretedSort('forged_quic_packet.idx',)), Apply(Const('forged_quic_packet.retired_cids.end', FunctionSort(UninterpretedSort('forged_quic_packet.retired_cids',), UninterpretedSort('forged_quic_packet.idx',))), Var('X', UninterpretedSort('forged_quic_packet.retired_cids',))))), Eq(Apply(Const('forged_quic_packet.retired_cids.value', FunctionSort(UninterpretedSort('forged_quic_packet.retired_cids',), UninterpretedSort('forged_quic_packet.idx',), UninterpretedSort('cid_seq',))), Var('X', UninterpretedSort('forged_quic_packet.retired_cids',)), Var('I', UninterpretedSort('forged_quic_packet.idx',))), Apply(Const('forged_quic_packet.retired_cids.value', FunctionSort(UninterpretedSort('forged_quic_packet.retired_cids',), UninterpretedSort('forged_quic_packet.idx',), UninterpretedSort('cid_seq',))), Var('Y', UninterpretedSort('forged_quic_packet.retired_cids',)), Var('I', UninterpretedSort('forged_quic_packet.idx',))))))),), Eq(Var('X', UninterpretedSort('forged_quic_packet.retired_cids',)), Var('Y', UninterpretedSort('forged_quic_packet.retired_cids',)))))",
                "explicit": false,
                "lineno": {},
                "id": 3112
            },
            {
                "definition": false,
                "assumed": false,
                "temporal": null,
                "args": "(forged_quic_packet_retry.idx.spec.prop2, Implies(Apply(Const('forged_quic_packet_retry.idx.succ', FunctionSort(UninterpretedSort('forged_quic_packet_retry.idx',), UninterpretedSort('forged_quic_packet_retry.idx',), BooleanSort())), Var('X', UninterpretedSort('forged_quic_packet_retry.idx',)), Var('Z', UninterpretedSort('forged_quic_packet_retry.idx',))), And(Apply(Const('<', FunctionSort(UninterpretedSort('forged_quic_packet_retry.idx',), UninterpretedSort('forged_quic_packet_retry.idx',), BooleanSort())), Var('X', UninterpretedSort('forged_quic_packet_retry.idx',)), Var('Z', UninterpretedSort('forged_quic_packet_retry.idx',))), Not(And(Apply(Const('<', FunctionSort(UninterpretedSort('forged_quic_packet_retry.idx',), UninterpretedSort('forged_quic_packet_retry.idx',), BooleanSort())), Var('X', UninterpretedSort('forged_quic_packet_retry.idx',)), Var('Y', UninterpretedSort('forged_quic_packet_retry.idx',))), Apply(Const('<', FunctionSort(UninterpretedSort('forged_quic_packet_retry.idx',), UninterpretedSort('forged_quic_packet_retry.idx',), BooleanSort())), Var('Y', UninterpretedSort('forged_quic_packet_retry.idx',)), Var('Z', UninterpretedSort('forged_quic_packet_retry.idx',)))),))))",
                "explicit": false,
                "lineno": {},
                "id": 918
            },
            {
                "definition": false,
                "assumed": false,
                "temporal": null,
                "args": "(forged_quic_packet_retry.idx.spec.transitivity, Implies(And(Apply(Const('<', FunctionSort(UninterpretedSort('forged_quic_packet_retry.idx',), UninterpretedSort('forged_quic_packet_retry.idx',), BooleanSort())), Var('T', UninterpretedSort('forged_quic_packet_retry.idx',)), Var('U', UninterpretedSort('forged_quic_packet_retry.idx',))), Apply(Const('<', FunctionSort(UninterpretedSort('forged_quic_packet_retry.idx',), UninterpretedSort('forged_quic_packet_retry.idx',), BooleanSort())), Var('U', UninterpretedSort('forged_quic_packet_retry.idx',)), Var('V', UninterpretedSort('forged_quic_packet_retry.idx',)))), Apply(Const('<', FunctionSort(UninterpretedSort('forged_quic_packet_retry.idx',), UninterpretedSort('forged_quic_packet_retry.idx',), BooleanSort())), Var('T', UninterpretedSort('forged_quic_packet_retry.idx',)), Var('V', UninterpretedSort('forged_quic_packet_retry.idx',)))))",
                "explicit": false,
                "lineno": {},
                "id": 919
            },
            {
                "definition": false,
                "assumed": false,
                "temporal": null,
                "args": "(forged_quic_packet_retry.idx.spec.antisymmetry, Not(And(Apply(Const('<', FunctionSort(UninterpretedSort('forged_quic_packet_retry.idx',), UninterpretedSort('forged_quic_packet_retry.idx',), BooleanSort())), Var('T', UninterpretedSort('forged_quic_packet_retry.idx',)), Var('U', UninterpretedSort('forged_quic_packet_retry.idx',))), Apply(Const('<', FunctionSort(UninterpretedSort('forged_quic_packet_retry.idx',), UninterpretedSort('forged_quic_packet_retry.idx',), BooleanSort())), Var('U', UninterpretedSort('forged_quic_packet_retry.idx',)), Var('T', UninterpretedSort('forged_quic_packet_retry.idx',)))),))",
                "explicit": false,
                "lineno": {},
                "id": 920
            },
            {
                "definition": false,
                "assumed": false,
                "temporal": null,
                "args": "(forged_quic_packet_retry.idx.spec.totality, Or(Apply(Const('<', FunctionSort(UninterpretedSort('forged_quic_packet_retry.idx',), UninterpretedSort('forged_quic_packet_retry.idx',), BooleanSort())), Var('T', UninterpretedSort('forged_quic_packet_retry.idx',)), Var('U', UninterpretedSort('forged_quic_packet_retry.idx',))), Eq(Var('T', UninterpretedSort('forged_quic_packet_retry.idx',)), Var('U', UninterpretedSort('forged_quic_packet_retry.idx',))), Apply(Const('<', FunctionSort(UninterpretedSort('forged_quic_packet_retry.idx',), UninterpretedSort('forged_quic_packet_retry.idx',), BooleanSort())), Var('U', UninterpretedSort('forged_quic_packet_retry.idx',)), Var('T', UninterpretedSort('forged_quic_packet_retry.idx',)))))",
                "explicit": false,
                "lineno": {},
                "id": 921
            },
            {
                "definition": false,
                "assumed": false,
                "temporal": null,
                "args": "(forged_quic_packet_retry.idx.spec.prop1, Apply(Const('<=', FunctionSort(UninterpretedSort('forged_quic_packet_retry.idx',), UninterpretedSort('forged_quic_packet_retry.idx',), BooleanSort())), Const('0', UninterpretedSort('forged_quic_packet_retry.idx',)), Var('X', UninterpretedSort('forged_quic_packet_retry.idx',))))",
                "explicit": false,
                "lineno": {},
                "id": 922
            },
            {
                "definition": false,
                "assumed": false,
                "temporal": null,
                "args": "(forged_quic_packet_retry.arr.spec.prop103, Apply(Const('>=', FunctionSort(UninterpretedSort('forged_quic_packet_retry.idx',), UninterpretedSort('forged_quic_packet_retry.idx',), BooleanSort())), Apply(Const('forged_quic_packet_retry.arr.end', FunctionSort(UninterpretedSort('forged_quic_packet_retry.arr',), UninterpretedSort('forged_quic_packet_retry.idx',))), Var('X', UninterpretedSort('forged_quic_packet_retry.arr',))), Const('0', UninterpretedSort('forged_quic_packet_retry.idx',))))",
                "explicit": false,
                "lineno": {},
                "id": 926
            },
            {
                "definition": false,
                "assumed": false,
                "temporal": null,
                "args": "(forged_quic_packet_retry.arr.spec.extensionality._a, Implies(And(And(Eq(Apply(Const('forged_quic_packet_retry.arr.end', FunctionSort(UninterpretedSort('forged_quic_packet_retry.arr',), UninterpretedSort('forged_quic_packet_retry.idx',))), Var('X', UninterpretedSort('forged_quic_packet_retry.arr',))), Apply(Const('forged_quic_packet_retry.arr.end', FunctionSort(UninterpretedSort('forged_quic_packet_retry.arr',), UninterpretedSort('forged_quic_packet_retry.idx',))), Var('Y', UninterpretedSort('forged_quic_packet_retry.arr',)))), ForAll(frozenset([Var('I', UninterpretedSort('forged_quic_packet_retry.idx',))]), Implies(And(Apply(Const('<=', FunctionSort(UninterpretedSort('forged_quic_packet_retry.idx',), UninterpretedSort('forged_quic_packet_retry.idx',), BooleanSort())), Const('0', UninterpretedSort('forged_quic_packet_retry.idx',)), Var('I', UninterpretedSort('forged_quic_packet_retry.idx',))), Apply(Const('<', FunctionSort(UninterpretedSort('forged_quic_packet_retry.idx',), UninterpretedSort('forged_quic_packet_retry.idx',), BooleanSort())), Var('I', UninterpretedSort('forged_quic_packet_retry.idx',)), Apply(Const('forged_quic_packet_retry.arr.end', FunctionSort(UninterpretedSort('forged_quic_packet_retry.arr',), UninterpretedSort('forged_quic_packet_retry.idx',))), Var('X', UninterpretedSort('forged_quic_packet_retry.arr',))))), Eq(Apply(Const('forged_quic_packet_retry.arr.value', FunctionSort(UninterpretedSort('forged_quic_packet_retry.arr',), UninterpretedSort('forged_quic_packet_retry.idx',), UninterpretedSort('forged_quic_packet_retry',))), Var('X', UninterpretedSort('forged_quic_packet_retry.arr',)), Var('I', UninterpretedSort('forged_quic_packet_retry.idx',))), Apply(Const('forged_quic_packet_retry.arr.value', FunctionSort(UninterpretedSort('forged_quic_packet_retry.arr',), UninterpretedSort('forged_quic_packet_retry.idx',), UninterpretedSort('forged_quic_packet_retry',))), Var('Y', UninterpretedSort('forged_quic_packet_retry.arr',)), Var('I', UninterpretedSort('forged_quic_packet_retry.idx',))))))),), Eq(Var('X', UninterpretedSort('forged_quic_packet_retry.arr',)), Var('Y', UninterpretedSort('forged_quic_packet_retry.arr',)))))",
                "explicit": false,
                "lineno": {},
                "id": 3121
            },
            {
                "definition": false,
                "assumed": false,
                "temporal": null,
                "args": "(forged_quic_packet_retry.retired_cids.spec.prop103, Apply(Const('>=', FunctionSort(UninterpretedSort('forged_quic_packet_retry.idx',), UninterpretedSort('forged_quic_packet_retry.idx',), BooleanSort())), Apply(Const('forged_quic_packet_retry.retired_cids.end', FunctionSort(UninterpretedSort('forged_quic_packet_retry.retired_cids',), UninterpretedSort('forged_quic_packet_retry.idx',))), Var('X', UninterpretedSort('forged_quic_packet_retry.retired_cids',))), Const('0', UninterpretedSort('forged_quic_packet_retry.idx',))))",
                "explicit": false,
                "lineno": {},
                "id": 933
            },
            {
                "definition": false,
                "assumed": false,
                "temporal": null,
                "args": "(forged_quic_packet_retry.retired_cids.spec.extensionality._a, Implies(And(And(Eq(Apply(Const('forged_quic_packet_retry.retired_cids.end', FunctionSort(UninterpretedSort('forged_quic_packet_retry.retired_cids',), UninterpretedSort('forged_quic_packet_retry.idx',))), Var('X', UninterpretedSort('forged_quic_packet_retry.retired_cids',))), Apply(Const('forged_quic_packet_retry.retired_cids.end', FunctionSort(UninterpretedSort('forged_quic_packet_retry.retired_cids',), UninterpretedSort('forged_quic_packet_retry.idx',))), Var('Y', UninterpretedSort('forged_quic_packet_retry.retired_cids',)))), ForAll(frozenset([Var('I', UninterpretedSort('forged_quic_packet_retry.idx',))]), Implies(And(Apply(Const('<=', FunctionSort(UninterpretedSort('forged_quic_packet_retry.idx',), UninterpretedSort('forged_quic_packet_retry.idx',), BooleanSort())), Const('0', UninterpretedSort('forged_quic_packet_retry.idx',)), Var('I', UninterpretedSort('forged_quic_packet_retry.idx',))), Apply(Const('<', FunctionSort(UninterpretedSort('forged_quic_packet_retry.idx',), UninterpretedSort('forged_quic_packet_retry.idx',), BooleanSort())), Var('I', UninterpretedSort('forged_quic_packet_retry.idx',)), Apply(Const('forged_quic_packet_retry.retired_cids.end', FunctionSort(UninterpretedSort('forged_quic_packet_retry.retired_cids',), UninterpretedSort('forged_quic_packet_retry.idx',))), Var('X', UninterpretedSort('forged_quic_packet_retry.retired_cids',))))), Eq(Apply(Const('forged_quic_packet_retry.retired_cids.value', FunctionSort(UninterpretedSort('forged_quic_packet_retry.retired_cids',), UninterpretedSort('forged_quic_packet_retry.idx',), UninterpretedSort('cid_seq',))), Var('X', UninterpretedSort('forged_quic_packet_retry.retired_cids',)), Var('I', UninterpretedSort('forged_quic_packet_retry.idx',))), Apply(Const('forged_quic_packet_retry.retired_cids.value', FunctionSort(UninterpretedSort('forged_quic_packet_retry.retired_cids',), UninterpretedSort('forged_quic_packet_retry.idx',), UninterpretedSort('cid_seq',))), Var('Y', UninterpretedSort('forged_quic_packet_retry.retired_cids',)), Var('I', UninterpretedSort('forged_quic_packet_retry.idx',))))))),), Eq(Var('X', UninterpretedSort('forged_quic_packet_retry.retired_cids',)), Var('Y', UninterpretedSort('forged_quic_packet_retry.retired_cids',)))))",
                "explicit": false,
                "lineno": {},
                "id": 3125
            },
            {
                "definition": false,
                "assumed": false,
                "temporal": null,
                "args": "(forged_quic_packet_vn.idx.spec.prop2, Implies(Apply(Const('forged_quic_packet_vn.idx.succ', FunctionSort(UninterpretedSort('forged_quic_packet_vn.idx',), UninterpretedSort('forged_quic_packet_vn.idx',), BooleanSort())), Var('X', UninterpretedSort('forged_quic_packet_vn.idx',)), Var('Z', UninterpretedSort('forged_quic_packet_vn.idx',))), And(Apply(Const('<', FunctionSort(UninterpretedSort('forged_quic_packet_vn.idx',), UninterpretedSort('forged_quic_packet_vn.idx',), BooleanSort())), Var('X', UninterpretedSort('forged_quic_packet_vn.idx',)), Var('Z', UninterpretedSort('forged_quic_packet_vn.idx',))), Not(And(Apply(Const('<', FunctionSort(UninterpretedSort('forged_quic_packet_vn.idx',), UninterpretedSort('forged_quic_packet_vn.idx',), BooleanSort())), Var('X', UninterpretedSort('forged_quic_packet_vn.idx',)), Var('Y', UninterpretedSort('forged_quic_packet_vn.idx',))), Apply(Const('<', FunctionSort(UninterpretedSort('forged_quic_packet_vn.idx',), UninterpretedSort('forged_quic_packet_vn.idx',), BooleanSort())), Var('Y', UninterpretedSort('forged_quic_packet_vn.idx',)), Var('Z', UninterpretedSort('forged_quic_packet_vn.idx',)))),))))",
                "explicit": false,
                "lineno": {},
                "id": 953
            },
            {
                "definition": false,
                "assumed": false,
                "temporal": null,
                "args": "(forged_quic_packet_vn.idx.spec.transitivity, Implies(And(Apply(Const('<', FunctionSort(UninterpretedSort('forged_quic_packet_vn.idx',), UninterpretedSort('forged_quic_packet_vn.idx',), BooleanSort())), Var('T', UninterpretedSort('forged_quic_packet_vn.idx',)), Var('U', UninterpretedSort('forged_quic_packet_vn.idx',))), Apply(Const('<', FunctionSort(UninterpretedSort('forged_quic_packet_vn.idx',), UninterpretedSort('forged_quic_packet_vn.idx',), BooleanSort())), Var('U', UninterpretedSort('forged_quic_packet_vn.idx',)), Var('V', UninterpretedSort('forged_quic_packet_vn.idx',)))), Apply(Const('<', FunctionSort(UninterpretedSort('forged_quic_packet_vn.idx',), UninterpretedSort('forged_quic_packet_vn.idx',), BooleanSort())), Var('T', UninterpretedSort('forged_quic_packet_vn.idx',)), Var('V', UninterpretedSort('forged_quic_packet_vn.idx',)))))",
                "explicit": false,
                "lineno": {},
                "id": 954
            },
            {
                "definition": false,
                "assumed": false,
                "temporal": null,
                "args": "(forged_quic_packet_vn.idx.spec.antisymmetry, Not(And(Apply(Const('<', FunctionSort(UninterpretedSort('forged_quic_packet_vn.idx',), UninterpretedSort('forged_quic_packet_vn.idx',), BooleanSort())), Var('T', UninterpretedSort('forged_quic_packet_vn.idx',)), Var('U', UninterpretedSort('forged_quic_packet_vn.idx',))), Apply(Const('<', FunctionSort(UninterpretedSort('forged_quic_packet_vn.idx',), UninterpretedSort('forged_quic_packet_vn.idx',), BooleanSort())), Var('U', UninterpretedSort('forged_quic_packet_vn.idx',)), Var('T', UninterpretedSort('forged_quic_packet_vn.idx',)))),))",
                "explicit": false,
                "lineno": {},
                "id": 955
            },
            {
                "definition": false,
                "assumed": false,
                "temporal": null,
                "args": "(forged_quic_packet_vn.idx.spec.totality, Or(Apply(Const('<', FunctionSort(UninterpretedSort('forged_quic_packet_vn.idx',), UninterpretedSort('forged_quic_packet_vn.idx',), BooleanSort())), Var('T', UninterpretedSort('forged_quic_packet_vn.idx',)), Var('U', UninterpretedSort('forged_quic_packet_vn.idx',))), Eq(Var('T', UninterpretedSort('forged_quic_packet_vn.idx',)), Var('U', UninterpretedSort('forged_quic_packet_vn.idx',))), Apply(Const('<', FunctionSort(UninterpretedSort('forged_quic_packet_vn.idx',), UninterpretedSort('forged_quic_packet_vn.idx',), BooleanSort())), Var('U', UninterpretedSort('forged_quic_packet_vn.idx',)), Var('T', UninterpretedSort('forged_quic_packet_vn.idx',)))))",
                "explicit": false,
                "lineno": {},
                "id": 956
            },
            {
                "definition": false,
                "assumed": false,
                "temporal": null,
                "args": "(forged_quic_packet_vn.idx.spec.prop1, Apply(Const('<=', FunctionSort(UninterpretedSort('forged_quic_packet_vn.idx',), UninterpretedSort('forged_quic_packet_vn.idx',), BooleanSort())), Const('0', UninterpretedSort('forged_quic_packet_vn.idx',)), Var('X', UninterpretedSort('forged_quic_packet_vn.idx',))))",
                "explicit": false,
                "lineno": {},
                "id": 957
            },
            {
                "definition": false,
                "assumed": false,
                "temporal": null,
                "args": "(forged_quic_packet_vn.arr.spec.prop103, Apply(Const('>=', FunctionSort(UninterpretedSort('forged_quic_packet_vn.idx',), UninterpretedSort('forged_quic_packet_vn.idx',), BooleanSort())), Apply(Const('forged_quic_packet_vn.arr.end', FunctionSort(UninterpretedSort('forged_quic_packet_vn.arr',), UninterpretedSort('forged_quic_packet_vn.idx',))), Var('X', UninterpretedSort('forged_quic_packet_vn.arr',))), Const('0', UninterpretedSort('forged_quic_packet_vn.idx',))))",
                "explicit": false,
                "lineno": {},
                "id": 961
            },
            {
                "definition": false,
                "assumed": false,
                "temporal": null,
                "args": "(forged_quic_packet_vn.arr.spec.extensionality._a, Implies(And(And(Eq(Apply(Const('forged_quic_packet_vn.arr.end', FunctionSort(UninterpretedSort('forged_quic_packet_vn.arr',), UninterpretedSort('forged_quic_packet_vn.idx',))), Var('X', UninterpretedSort('forged_quic_packet_vn.arr',))), Apply(Const('forged_quic_packet_vn.arr.end', FunctionSort(UninterpretedSort('forged_quic_packet_vn.arr',), UninterpretedSort('forged_quic_packet_vn.idx',))), Var('Y', UninterpretedSort('forged_quic_packet_vn.arr',)))), ForAll(frozenset([Var('I', UninterpretedSort('forged_quic_packet_vn.idx',))]), Implies(And(Apply(Const('<=', FunctionSort(UninterpretedSort('forged_quic_packet_vn.idx',), UninterpretedSort('forged_quic_packet_vn.idx',), BooleanSort())), Const('0', UninterpretedSort('forged_quic_packet_vn.idx',)), Var('I', UninterpretedSort('forged_quic_packet_vn.idx',))), Apply(Const('<', FunctionSort(UninterpretedSort('forged_quic_packet_vn.idx',), UninterpretedSort('forged_quic_packet_vn.idx',), BooleanSort())), Var('I', UninterpretedSort('forged_quic_packet_vn.idx',)), Apply(Const('forged_quic_packet_vn.arr.end', FunctionSort(UninterpretedSort('forged_quic_packet_vn.arr',), UninterpretedSort('forged_quic_packet_vn.idx',))), Var('X', UninterpretedSort('forged_quic_packet_vn.arr',))))), Eq(Apply(Const('forged_quic_packet_vn.arr.value', FunctionSort(UninterpretedSort('forged_quic_packet_vn.arr',), UninterpretedSort('forged_quic_packet_vn.idx',), UninterpretedSort('forged_quic_packet_vn',))), Var('X', UninterpretedSort('forged_quic_packet_vn.arr',)), Var('I', UninterpretedSort('forged_quic_packet_vn.idx',))), Apply(Const('forged_quic_packet_vn.arr.value', FunctionSort(UninterpretedSort('forged_quic_packet_vn.arr',), UninterpretedSort('forged_quic_packet_vn.idx',), UninterpretedSort('forged_quic_packet_vn',))), Var('Y', UninterpretedSort('forged_quic_packet_vn.arr',)), Var('I', UninterpretedSort('forged_quic_packet_vn.idx',))))))),), Eq(Var('X', UninterpretedSort('forged_quic_packet_vn.arr',)), Var('Y', UninterpretedSort('forged_quic_packet_vn.arr',)))))",
                "explicit": false,
                "lineno": {},
                "id": 3134
            },
            {
                "definition": false,
                "assumed": false,
                "temporal": null,
                "args": "(replayed_quic_packet_0rtt.idx.spec.prop2, Implies(Apply(Const('replayed_quic_packet_0rtt.idx.succ', FunctionSort(UninterpretedSort('replayed_quic_packet_0rtt.idx',), UninterpretedSort('replayed_quic_packet_0rtt.idx',), BooleanSort())), Var('X', UninterpretedSort('replayed_quic_packet_0rtt.idx',)), Var('Z', UninterpretedSort('replayed_quic_packet_0rtt.idx',))), And(Apply(Const('<', FunctionSort(UninterpretedSort('replayed_quic_packet_0rtt.idx',), UninterpretedSort('replayed_quic_packet_0rtt.idx',), BooleanSort())), Var('X', UninterpretedSort('replayed_quic_packet_0rtt.idx',)), Var('Z', UninterpretedSort('replayed_quic_packet_0rtt.idx',))), Not(And(Apply(Const('<', FunctionSort(UninterpretedSort('replayed_quic_packet_0rtt.idx',), UninterpretedSort('replayed_quic_packet_0rtt.idx',), BooleanSort())), Var('X', UninterpretedSort('replayed_quic_packet_0rtt.idx',)), Var('Y', UninterpretedSort('replayed_quic_packet_0rtt.idx',))), Apply(Const('<', FunctionSort(UninterpretedSort('replayed_quic_packet_0rtt.idx',), UninterpretedSort('replayed_quic_packet_0rtt.idx',), BooleanSort())), Var('Y', UninterpretedSort('replayed_quic_packet_0rtt.idx',)), Var('Z', UninterpretedSort('replayed_quic_packet_0rtt.idx',)))),))))",
                "explicit": false,
                "lineno": {},
                "id": 988
            },
            {
                "definition": false,
                "assumed": false,
                "temporal": null,
                "args": "(replayed_quic_packet_0rtt.idx.spec.transitivity, Implies(And(Apply(Const('<', FunctionSort(UninterpretedSort('replayed_quic_packet_0rtt.idx',), UninterpretedSort('replayed_quic_packet_0rtt.idx',), BooleanSort())), Var('T', UninterpretedSort('replayed_quic_packet_0rtt.idx',)), Var('U', UninterpretedSort('replayed_quic_packet_0rtt.idx',))), Apply(Const('<', FunctionSort(UninterpretedSort('replayed_quic_packet_0rtt.idx',), UninterpretedSort('replayed_quic_packet_0rtt.idx',), BooleanSort())), Var('U', UninterpretedSort('replayed_quic_packet_0rtt.idx',)), Var('V', UninterpretedSort('replayed_quic_packet_0rtt.idx',)))), Apply(Const('<', FunctionSort(UninterpretedSort('replayed_quic_packet_0rtt.idx',), UninterpretedSort('replayed_quic_packet_0rtt.idx',), BooleanSort())), Var('T', UninterpretedSort('replayed_quic_packet_0rtt.idx',)), Var('V', UninterpretedSort('replayed_quic_packet_0rtt.idx',)))))",
                "explicit": false,
                "lineno": {},
                "id": 989
            },
            {
                "definition": false,
                "assumed": false,
                "temporal": null,
                "args": "(replayed_quic_packet_0rtt.idx.spec.antisymmetry, Not(And(Apply(Const('<', FunctionSort(UninterpretedSort('replayed_quic_packet_0rtt.idx',), UninterpretedSort('replayed_quic_packet_0rtt.idx',), BooleanSort())), Var('T', UninterpretedSort('replayed_quic_packet_0rtt.idx',)), Var('U', UninterpretedSort('replayed_quic_packet_0rtt.idx',))), Apply(Const('<', FunctionSort(UninterpretedSort('replayed_quic_packet_0rtt.idx',), UninterpretedSort('replayed_quic_packet_0rtt.idx',), BooleanSort())), Var('U', UninterpretedSort('replayed_quic_packet_0rtt.idx',)), Var('T', UninterpretedSort('replayed_quic_packet_0rtt.idx',)))),))",
                "explicit": false,
                "lineno": {},
                "id": 990
            },
            {
                "definition": false,
                "assumed": false,
                "temporal": null,
                "args": "(replayed_quic_packet_0rtt.idx.spec.totality, Or(Apply(Const('<', FunctionSort(UninterpretedSort('replayed_quic_packet_0rtt.idx',), UninterpretedSort('replayed_quic_packet_0rtt.idx',), BooleanSort())), Var('T', UninterpretedSort('replayed_quic_packet_0rtt.idx',)), Var('U', UninterpretedSort('replayed_quic_packet_0rtt.idx',))), Eq(Var('T', UninterpretedSort('replayed_quic_packet_0rtt.idx',)), Var('U', UninterpretedSort('replayed_quic_packet_0rtt.idx',))), Apply(Const('<', FunctionSort(UninterpretedSort('replayed_quic_packet_0rtt.idx',), UninterpretedSort('replayed_quic_packet_0rtt.idx',), BooleanSort())), Var('U', UninterpretedSort('replayed_quic_packet_0rtt.idx',)), Var('T', UninterpretedSort('replayed_quic_packet_0rtt.idx',)))))",
                "explicit": false,
                "lineno": {},
                "id": 991
            },
            {
                "definition": false,
                "assumed": false,
                "temporal": null,
                "args": "(replayed_quic_packet_0rtt.idx.spec.prop1, Apply(Const('<=', FunctionSort(UninterpretedSort('replayed_quic_packet_0rtt.idx',), UninterpretedSort('replayed_quic_packet_0rtt.idx',), BooleanSort())), Const('0', UninterpretedSort('replayed_quic_packet_0rtt.idx',)), Var('X', UninterpretedSort('replayed_quic_packet_0rtt.idx',))))",
                "explicit": false,
                "lineno": {},
                "id": 992
            },
            {
                "definition": false,
                "assumed": false,
                "temporal": null,
                "args": "(replayed_quic_packet_0rtt.arr.spec.prop103, Apply(Const('>=', FunctionSort(UninterpretedSort('replayed_quic_packet_0rtt.idx',), UninterpretedSort('replayed_quic_packet_0rtt.idx',), BooleanSort())), Apply(Const('replayed_quic_packet_0rtt.arr.end', FunctionSort(UninterpretedSort('replayed_quic_packet_0rtt.arr',), UninterpretedSort('replayed_quic_packet_0rtt.idx',))), Var('X', UninterpretedSort('replayed_quic_packet_0rtt.arr',))), Const('0', UninterpretedSort('replayed_quic_packet_0rtt.idx',))))",
                "explicit": false,
                "lineno": {},
                "id": 996
            },
            {
                "definition": false,
                "assumed": false,
                "temporal": null,
                "args": "(replayed_quic_packet_0rtt.arr.spec.extensionality._a, Implies(And(And(Eq(Apply(Const('replayed_quic_packet_0rtt.arr.end', FunctionSort(UninterpretedSort('replayed_quic_packet_0rtt.arr',), UninterpretedSort('replayed_quic_packet_0rtt.idx',))), Var('X', UninterpretedSort('replayed_quic_packet_0rtt.arr',))), Apply(Const('replayed_quic_packet_0rtt.arr.end', FunctionSort(UninterpretedSort('replayed_quic_packet_0rtt.arr',), UninterpretedSort('replayed_quic_packet_0rtt.idx',))), Var('Y', UninterpretedSort('replayed_quic_packet_0rtt.arr',)))), ForAll(frozenset([Var('I', UninterpretedSort('replayed_quic_packet_0rtt.idx',))]), Implies(And(Apply(Const('<=', FunctionSort(UninterpretedSort('replayed_quic_packet_0rtt.idx',), UninterpretedSort('replayed_quic_packet_0rtt.idx',), BooleanSort())), Const('0', UninterpretedSort('replayed_quic_packet_0rtt.idx',)), Var('I', UninterpretedSort('replayed_quic_packet_0rtt.idx',))), Apply(Const('<', FunctionSort(UninterpretedSort('replayed_quic_packet_0rtt.idx',), UninterpretedSort('replayed_quic_packet_0rtt.idx',), BooleanSort())), Var('I', UninterpretedSort('replayed_quic_packet_0rtt.idx',)), Apply(Const('replayed_quic_packet_0rtt.arr.end', FunctionSort(UninterpretedSort('replayed_quic_packet_0rtt.arr',), UninterpretedSort('replayed_quic_packet_0rtt.idx',))), Var('X', UninterpretedSort('replayed_quic_packet_0rtt.arr',))))), Eq(Apply(Const('replayed_quic_packet_0rtt.arr.value', FunctionSort(UninterpretedSort('replayed_quic_packet_0rtt.arr',), UninterpretedSort('replayed_quic_packet_0rtt.idx',), UninterpretedSort('replayed_quic_packet_0rtt',))), Var('X', UninterpretedSort('replayed_quic_packet_0rtt.arr',)), Var('I', UninterpretedSort('replayed_quic_packet_0rtt.idx',))), Apply(Const('replayed_quic_packet_0rtt.arr.value', FunctionSort(UninterpretedSort('replayed_quic_packet_0rtt.arr',), UninterpretedSort('replayed_quic_packet_0rtt.idx',), UninterpretedSort('replayed_quic_packet_0rtt',))), Var('Y', UninterpretedSort('replayed_quic_packet_0rtt.arr',)), Var('I', UninterpretedSort('replayed_quic_packet_0rtt.idx',))))))),), Eq(Var('X', UninterpretedSort('replayed_quic_packet_0rtt.arr',)), Var('Y', UninterpretedSort('replayed_quic_packet_0rtt.arr',)))))",
                "explicit": false,
                "lineno": {},
                "id": 3143
            },
            {
                "definition": false,
                "assumed": false,
                "temporal": null,
                "args": "(replayed_quic_packet_0rtt.retired_cids.spec.prop103, Apply(Const('>=', FunctionSort(UninterpretedSort('replayed_quic_packet_0rtt.idx',), UninterpretedSort('replayed_quic_packet_0rtt.idx',), BooleanSort())), Apply(Const('replayed_quic_packet_0rtt.retired_cids.end', FunctionSort(UninterpretedSort('replayed_quic_packet_0rtt.retired_cids',), UninterpretedSort('replayed_quic_packet_0rtt.idx',))), Var('X', UninterpretedSort('replayed_quic_packet_0rtt.retired_cids',))), Const('0', UninterpretedSort('replayed_quic_packet_0rtt.idx',))))",
                "explicit": false,
                "lineno": {},
                "id": 1003
            },
            {
                "definition": false,
                "assumed": false,
                "temporal": null,
                "args": "(replayed_quic_packet_0rtt.retired_cids.spec.extensionality._a, Implies(And(And(Eq(Apply(Const('replayed_quic_packet_0rtt.retired_cids.end', FunctionSort(UninterpretedSort('replayed_quic_packet_0rtt.retired_cids',), UninterpretedSort('replayed_quic_packet_0rtt.idx',))), Var('X', UninterpretedSort('replayed_quic_packet_0rtt.retired_cids',))), Apply(Const('replayed_quic_packet_0rtt.retired_cids.end', FunctionSort(UninterpretedSort('replayed_quic_packet_0rtt.retired_cids',), UninterpretedSort('replayed_quic_packet_0rtt.idx',))), Var('Y', UninterpretedSort('replayed_quic_packet_0rtt.retired_cids',)))), ForAll(frozenset([Var('I', UninterpretedSort('replayed_quic_packet_0rtt.idx',))]), Implies(And(Apply(Const('<=', FunctionSort(UninterpretedSort('replayed_quic_packet_0rtt.idx',), UninterpretedSort('replayed_quic_packet_0rtt.idx',), BooleanSort())), Const('0', UninterpretedSort('replayed_quic_packet_0rtt.idx',)), Var('I', UninterpretedSort('replayed_quic_packet_0rtt.idx',))), Apply(Const('<', FunctionSort(UninterpretedSort('replayed_quic_packet_0rtt.idx',), UninterpretedSort('replayed_quic_packet_0rtt.idx',), BooleanSort())), Var('I', UninterpretedSort('replayed_quic_packet_0rtt.idx',)), Apply(Const('replayed_quic_packet_0rtt.retired_cids.end', FunctionSort(UninterpretedSort('replayed_quic_packet_0rtt.retired_cids',), UninterpretedSort('replayed_quic_packet_0rtt.idx',))), Var('X', UninterpretedSort('replayed_quic_packet_0rtt.retired_cids',))))), Eq(Apply(Const('replayed_quic_packet_0rtt.retired_cids.value', FunctionSort(UninterpretedSort('replayed_quic_packet_0rtt.retired_cids',), UninterpretedSort('replayed_quic_packet_0rtt.idx',), UninterpretedSort('cid_seq',))), Var('X', UninterpretedSort('replayed_quic_packet_0rtt.retired_cids',)), Var('I', UninterpretedSort('replayed_quic_packet_0rtt.idx',))), Apply(Const('replayed_quic_packet_0rtt.retired_cids.value', FunctionSort(UninterpretedSort('replayed_quic_packet_0rtt.retired_cids',), UninterpretedSort('replayed_quic_packet_0rtt.idx',), UninterpretedSort('cid_seq',))), Var('Y', UninterpretedSort('replayed_quic_packet_0rtt.retired_cids',)), Var('I', UninterpretedSort('replayed_quic_packet_0rtt.idx',))))))),), Eq(Var('X', UninterpretedSort('replayed_quic_packet_0rtt.retired_cids',)), Var('Y', UninterpretedSort('replayed_quic_packet_0rtt.retired_cids',)))))",
                "explicit": false,
                "lineno": {},
                "id": 3147
            },
            {
                "definition": false,
                "assumed": false,
                "temporal": null,
                "args": "(prot.idx.spec.prop2, Implies(Apply(Const('prot.idx.succ', FunctionSort(UninterpretedSort('prot.idx',), UninterpretedSort('prot.idx',), BooleanSort())), Var('X', UninterpretedSort('prot.idx',)), Var('Z', UninterpretedSort('prot.idx',))), And(Apply(Const('<', FunctionSort(UninterpretedSort('prot.idx',), UninterpretedSort('prot.idx',), BooleanSort())), Var('X', UninterpretedSort('prot.idx',)), Var('Z', UninterpretedSort('prot.idx',))), Not(And(Apply(Const('<', FunctionSort(UninterpretedSort('prot.idx',), UninterpretedSort('prot.idx',), BooleanSort())), Var('X', UninterpretedSort('prot.idx',)), Var('Y', UninterpretedSort('prot.idx',))), Apply(Const('<', FunctionSort(UninterpretedSort('prot.idx',), UninterpretedSort('prot.idx',), BooleanSort())), Var('Y', UninterpretedSort('prot.idx',)), Var('Z', UninterpretedSort('prot.idx',)))),))))",
                "explicit": false,
                "lineno": {},
                "id": 1025
            },
            {
                "definition": false,
                "assumed": false,
                "temporal": null,
                "args": "(prot.idx.spec.transitivity, Implies(And(Apply(Const('<', FunctionSort(UninterpretedSort('prot.idx',), UninterpretedSort('prot.idx',), BooleanSort())), Var('T', UninterpretedSort('prot.idx',)), Var('U', UninterpretedSort('prot.idx',))), Apply(Const('<', FunctionSort(UninterpretedSort('prot.idx',), UninterpretedSort('prot.idx',), BooleanSort())), Var('U', UninterpretedSort('prot.idx',)), Var('V', UninterpretedSort('prot.idx',)))), Apply(Const('<', FunctionSort(UninterpretedSort('prot.idx',), UninterpretedSort('prot.idx',), BooleanSort())), Var('T', UninterpretedSort('prot.idx',)), Var('V', UninterpretedSort('prot.idx',)))))",
                "explicit": false,
                "lineno": {},
                "id": 1026
            },
            {
                "definition": false,
                "assumed": false,
                "temporal": null,
                "args": "(prot.idx.spec.antisymmetry, Not(And(Apply(Const('<', FunctionSort(UninterpretedSort('prot.idx',), UninterpretedSort('prot.idx',), BooleanSort())), Var('T', UninterpretedSort('prot.idx',)), Var('U', UninterpretedSort('prot.idx',))), Apply(Const('<', FunctionSort(UninterpretedSort('prot.idx',), UninterpretedSort('prot.idx',), BooleanSort())), Var('U', UninterpretedSort('prot.idx',)), Var('T', UninterpretedSort('prot.idx',)))),))",
                "explicit": false,
                "lineno": {},
                "id": 1027
            },
            {
                "definition": false,
                "assumed": false,
                "temporal": null,
                "args": "(prot.idx.spec.totality, Or(Apply(Const('<', FunctionSort(UninterpretedSort('prot.idx',), UninterpretedSort('prot.idx',), BooleanSort())), Var('T', UninterpretedSort('prot.idx',)), Var('U', UninterpretedSort('prot.idx',))), Eq(Var('T', UninterpretedSort('prot.idx',)), Var('U', UninterpretedSort('prot.idx',))), Apply(Const('<', FunctionSort(UninterpretedSort('prot.idx',), UninterpretedSort('prot.idx',), BooleanSort())), Var('U', UninterpretedSort('prot.idx',)), Var('T', UninterpretedSort('prot.idx',)))))",
                "explicit": false,
                "lineno": {},
                "id": 1028
            },
            {
                "definition": false,
                "assumed": false,
                "temporal": null,
                "args": "(prot.idx.spec.prop1, Apply(Const('<=', FunctionSort(UninterpretedSort('prot.idx',), UninterpretedSort('prot.idx',), BooleanSort())), Const('0', UninterpretedSort('prot.idx',)), Var('X', UninterpretedSort('prot.idx',))))",
                "explicit": false,
                "lineno": {},
                "id": 1029
            },
            {
                "definition": false,
                "assumed": false,
                "temporal": null,
                "args": "(prot.arr.spec.prop103, Apply(Const('>=', FunctionSort(UninterpretedSort('prot.idx',), UninterpretedSort('prot.idx',), BooleanSort())), Apply(Const('prot.arr.end', FunctionSort(UninterpretedSort('prot.arr',), UninterpretedSort('prot.idx',))), Var('X', UninterpretedSort('prot.arr',))), Const('0', UninterpretedSort('prot.idx',))))",
                "explicit": false,
                "lineno": {},
                "id": 1033
            },
            {
                "definition": false,
                "assumed": false,
                "temporal": null,
                "args": "(prot.arr.spec.extensionality._a, Implies(And(And(Eq(Apply(Const('prot.arr.end', FunctionSort(UninterpretedSort('prot.arr',), UninterpretedSort('prot.idx',))), Var('X', UninterpretedSort('prot.arr',))), Apply(Const('prot.arr.end', FunctionSort(UninterpretedSort('prot.arr',), UninterpretedSort('prot.idx',))), Var('Y', UninterpretedSort('prot.arr',)))), ForAll(frozenset([Var('I', UninterpretedSort('prot.idx',))]), Implies(And(Apply(Const('<=', FunctionSort(UninterpretedSort('prot.idx',), UninterpretedSort('prot.idx',), BooleanSort())), Const('0', UninterpretedSort('prot.idx',)), Var('I', UninterpretedSort('prot.idx',))), Apply(Const('<', FunctionSort(UninterpretedSort('prot.idx',), UninterpretedSort('prot.idx',), BooleanSort())), Var('I', UninterpretedSort('prot.idx',)), Apply(Const('prot.arr.end', FunctionSort(UninterpretedSort('prot.arr',), UninterpretedSort('prot.idx',))), Var('X', UninterpretedSort('prot.arr',))))), Eq(Apply(Const('prot.arr.value', FunctionSort(UninterpretedSort('prot.arr',), UninterpretedSort('prot.idx',), UninterpretedSort('stream_data',))), Var('X', UninterpretedSort('prot.arr',)), Var('I', UninterpretedSort('prot.idx',))), Apply(Const('prot.arr.value', FunctionSort(UninterpretedSort('prot.arr',), UninterpretedSort('prot.idx',), UninterpretedSort('stream_data',))), Var('Y', UninterpretedSort('prot.arr',)), Var('I', UninterpretedSort('prot.idx',))))))),), Eq(Var('X', UninterpretedSort('prot.arr',)), Var('Y', UninterpretedSort('prot.arr',)))))",
                "explicit": false,
                "lineno": {},
                "id": 3156
            },
            {
                "definition": false,
                "assumed": false,
                "temporal": null,
                "args": "(tls_api.id.spec.prop10, Implies(Apply(Const('tls_api.id.succ', FunctionSort(UninterpretedSort('tls_api.id',), UninterpretedSort('tls_api.id',), BooleanSort())), Var('X', UninterpretedSort('tls_api.id',)), Var('Z', UninterpretedSort('tls_api.id',))), And(Apply(Const('<', FunctionSort(UninterpretedSort('tls_api.id',), UninterpretedSort('tls_api.id',), BooleanSort())), Var('X', UninterpretedSort('tls_api.id',)), Var('Z', UninterpretedSort('tls_api.id',))), Not(And(Apply(Const('<', FunctionSort(UninterpretedSort('tls_api.id',), UninterpretedSort('tls_api.id',), BooleanSort())), Var('X', UninterpretedSort('tls_api.id',)), Var('Y', UninterpretedSort('tls_api.id',))), Apply(Const('<', FunctionSort(UninterpretedSort('tls_api.id',), UninterpretedSort('tls_api.id',), BooleanSort())), Var('Y', UninterpretedSort('tls_api.id',)), Var('Z', UninterpretedSort('tls_api.id',)))),))))",
                "explicit": false,
                "lineno": {},
                "id": 1047
            },
            {
                "definition": false,
                "assumed": false,
                "temporal": null,
                "args": "(tls_api.id.spec.transitivity, Implies(And(Apply(Const('<', FunctionSort(UninterpretedSort('tls_api.id',), UninterpretedSort('tls_api.id',), BooleanSort())), Var('T', UninterpretedSort('tls_api.id',)), Var('U', UninterpretedSort('tls_api.id',))), Apply(Const('<', FunctionSort(UninterpretedSort('tls_api.id',), UninterpretedSort('tls_api.id',), BooleanSort())), Var('U', UninterpretedSort('tls_api.id',)), Var('V', UninterpretedSort('tls_api.id',)))), Apply(Const('<', FunctionSort(UninterpretedSort('tls_api.id',), UninterpretedSort('tls_api.id',), BooleanSort())), Var('T', UninterpretedSort('tls_api.id',)), Var('V', UninterpretedSort('tls_api.id',)))))",
                "explicit": false,
                "lineno": {},
                "id": 1048
            },
            {
                "definition": false,
                "assumed": false,
                "temporal": null,
                "args": "(tls_api.id.spec.antisymmetry, Not(And(Apply(Const('<', FunctionSort(UninterpretedSort('tls_api.id',), UninterpretedSort('tls_api.id',), BooleanSort())), Var('T', UninterpretedSort('tls_api.id',)), Var('U', UninterpretedSort('tls_api.id',))), Apply(Const('<', FunctionSort(UninterpretedSort('tls_api.id',), UninterpretedSort('tls_api.id',), BooleanSort())), Var('U', UninterpretedSort('tls_api.id',)), Var('T', UninterpretedSort('tls_api.id',)))),))",
                "explicit": false,
                "lineno": {},
                "id": 1049
            },
            {
                "definition": false,
                "assumed": false,
                "temporal": null,
                "args": "(tls_api.id.spec.totality, Or(Apply(Const('<', FunctionSort(UninterpretedSort('tls_api.id',), UninterpretedSort('tls_api.id',), BooleanSort())), Var('T', UninterpretedSort('tls_api.id',)), Var('U', UninterpretedSort('tls_api.id',))), Eq(Var('T', UninterpretedSort('tls_api.id',)), Var('U', UninterpretedSort('tls_api.id',))), Apply(Const('<', FunctionSort(UninterpretedSort('tls_api.id',), UninterpretedSort('tls_api.id',), BooleanSort())), Var('U', UninterpretedSort('tls_api.id',)), Var('T', UninterpretedSort('tls_api.id',)))))",
                "explicit": false,
                "lineno": {},
                "id": 1050
            },
            {
                "definition": false,
                "assumed": false,
                "temporal": null,
                "args": "(tls_api.id.spec.prop1, Apply(Const('<=', FunctionSort(UninterpretedSort('tls_api.id',), UninterpretedSort('tls_api.id',), BooleanSort())), Const('0', UninterpretedSort('tls_api.id',)), Var('X', UninterpretedSort('tls_api.id',))))",
                "explicit": false,
                "lineno": {},
                "id": 1051
            },
            {
                "definition": false,
                "assumed": false,
                "temporal": null,
                "args": "(cids.spec.prop103, Apply(Const('>=', FunctionSort(UninterpretedSort('index',), UninterpretedSort('index',), BooleanSort())), Apply(Const('cids.end', FunctionSort(UninterpretedSort('cids',), UninterpretedSort('index',))), Var('X', UninterpretedSort('cids',))), Const('0', UninterpretedSort('index',))))",
                "explicit": false,
                "lineno": {},
                "id": 1140
            },
            {
                "definition": false,
                "assumed": false,
                "temporal": null,
                "args": "(cids.spec.extensionality._a, Implies(And(And(Eq(Apply(Const('cids.end', FunctionSort(UninterpretedSort('cids',), UninterpretedSort('index',))), Var('X', UninterpretedSort('cids',))), Apply(Const('cids.end', FunctionSort(UninterpretedSort('cids',), UninterpretedSort('index',))), Var('Y', UninterpretedSort('cids',)))), ForAll(frozenset([Var('I', UninterpretedSort('index',))]), Implies(And(Apply(Const('<=', FunctionSort(UninterpretedSort('index',), UninterpretedSort('index',), BooleanSort())), Const('0', UninterpretedSort('index',)), Var('I', UninterpretedSort('index',))), Apply(Const('<', FunctionSort(UninterpretedSort('index',), UninterpretedSort('index',), BooleanSort())), Var('I', UninterpretedSort('index',)), Apply(Const('cids.end', FunctionSort(UninterpretedSort('cids',), UninterpretedSort('index',))), Var('X', UninterpretedSort('cids',))))), Eq(Apply(Const('cids.value', FunctionSort(UninterpretedSort('cids',), UninterpretedSort('index',), UninterpretedSort('cid',))), Var('X', UninterpretedSort('cids',)), Var('I', UninterpretedSort('index',))), Apply(Const('cids.value', FunctionSort(UninterpretedSort('cids',), UninterpretedSort('index',), UninterpretedSort('cid',))), Var('Y', UninterpretedSort('cids',)), Var('I', UninterpretedSort('index',))))))),), Eq(Var('X', UninterpretedSort('cids',)), Var('Y', UninterpretedSort('cids',)))))",
                "explicit": false,
                "lineno": {},
                "id": 3165
            },
            {
                "definition": false,
                "assumed": false,
                "temporal": null,
                "args": "(clients.client.idx.spec.prop2, Implies(Apply(Const('clients.client.idx.succ', FunctionSort(UninterpretedSort('clients.client.idx',), UninterpretedSort('clients.client.idx',), BooleanSort())), Var('X', UninterpretedSort('clients.client.idx',)), Var('Z', UninterpretedSort('clients.client.idx',))), And(Apply(Const('<', FunctionSort(UninterpretedSort('clients.client.idx',), UninterpretedSort('clients.client.idx',), BooleanSort())), Var('X', UninterpretedSort('clients.client.idx',)), Var('Z', UninterpretedSort('clients.client.idx',))), Not(And(Apply(Const('<', FunctionSort(UninterpretedSort('clients.client.idx',), UninterpretedSort('clients.client.idx',), BooleanSort())), Var('X', UninterpretedSort('clients.client.idx',)), Var('Y', UninterpretedSort('clients.client.idx',))), Apply(Const('<', FunctionSort(UninterpretedSort('clients.client.idx',), UninterpretedSort('clients.client.idx',), BooleanSort())), Var('Y', UninterpretedSort('clients.client.idx',)), Var('Z', UninterpretedSort('clients.client.idx',)))),))))",
                "explicit": false,
                "lineno": {},
                "id": 1146
            },
            {
                "definition": false,
                "assumed": false,
                "temporal": null,
                "args": "(clients.client.idx.spec.transitivity, Implies(And(Apply(Const('<', FunctionSort(UninterpretedSort('clients.client.idx',), UninterpretedSort('clients.client.idx',), BooleanSort())), Var('T', UninterpretedSort('clients.client.idx',)), Var('U', UninterpretedSort('clients.client.idx',))), Apply(Const('<', FunctionSort(UninterpretedSort('clients.client.idx',), UninterpretedSort('clients.client.idx',), BooleanSort())), Var('U', UninterpretedSort('clients.client.idx',)), Var('V', UninterpretedSort('clients.client.idx',)))), Apply(Const('<', FunctionSort(UninterpretedSort('clients.client.idx',), UninterpretedSort('clients.client.idx',), BooleanSort())), Var('T', UninterpretedSort('clients.client.idx',)), Var('V', UninterpretedSort('clients.client.idx',)))))",
                "explicit": false,
                "lineno": {},
                "id": 1147
            },
            {
                "definition": false,
                "assumed": false,
                "temporal": null,
                "args": "(clients.client.idx.spec.antisymmetry, Not(And(Apply(Const('<', FunctionSort(UninterpretedSort('clients.client.idx',), UninterpretedSort('clients.client.idx',), BooleanSort())), Var('T', UninterpretedSort('clients.client.idx',)), Var('U', UninterpretedSort('clients.client.idx',))), Apply(Const('<', FunctionSort(UninterpretedSort('clients.client.idx',), UninterpretedSort('clients.client.idx',), BooleanSort())), Var('U', UninterpretedSort('clients.client.idx',)), Var('T', UninterpretedSort('clients.client.idx',)))),))",
                "explicit": false,
                "lineno": {},
                "id": 1148
            },
            {
                "definition": false,
                "assumed": false,
                "temporal": null,
                "args": "(clients.client.idx.spec.totality, Or(Apply(Const('<', FunctionSort(UninterpretedSort('clients.client.idx',), UninterpretedSort('clients.client.idx',), BooleanSort())), Var('T', UninterpretedSort('clients.client.idx',)), Var('U', UninterpretedSort('clients.client.idx',))), Eq(Var('T', UninterpretedSort('clients.client.idx',)), Var('U', UninterpretedSort('clients.client.idx',))), Apply(Const('<', FunctionSort(UninterpretedSort('clients.client.idx',), UninterpretedSort('clients.client.idx',), BooleanSort())), Var('U', UninterpretedSort('clients.client.idx',)), Var('T', UninterpretedSort('clients.client.idx',)))))",
                "explicit": false,
                "lineno": {},
                "id": 1149
            },
            {
                "definition": false,
                "assumed": false,
                "temporal": null,
                "args": "(clients.client.idx.spec.prop1, Apply(Const('<=', FunctionSort(UninterpretedSort('clients.client.idx',), UninterpretedSort('clients.client.idx',), BooleanSort())), Const('0', UninterpretedSort('clients.client.idx',)), Var('X', UninterpretedSort('clients.client.idx',))))",
                "explicit": false,
                "lineno": {},
                "id": 1150
            },
            {
                "definition": false,
                "assumed": false,
                "temporal": null,
                "args": "(clients.client.arr.spec.prop103, Apply(Const('>=', FunctionSort(UninterpretedSort('clients.client.idx',), UninterpretedSort('clients.client.idx',), BooleanSort())), Apply(Const('clients.client.arr.end', FunctionSort(UninterpretedSort('clients.client.arr',), UninterpretedSort('clients.client.idx',))), Var('X', UninterpretedSort('clients.client.arr',))), Const('0', UninterpretedSort('clients.client.idx',))))",
                "explicit": false,
                "lineno": {},
                "id": 1154
            },
            {
                "definition": false,
                "assumed": false,
                "temporal": null,
                "args": "(clients.client.arr.spec.extensionality._a, Implies(And(And(Eq(Apply(Const('clients.client.arr.end', FunctionSort(UninterpretedSort('clients.client.arr',), UninterpretedSort('clients.client.idx',))), Var('X', UninterpretedSort('clients.client.arr',))), Apply(Const('clients.client.arr.end', FunctionSort(UninterpretedSort('clients.client.arr',), UninterpretedSort('clients.client.idx',))), Var('Y', UninterpretedSort('clients.client.arr',)))), ForAll(frozenset([Var('I', UninterpretedSort('clients.client.idx',))]), Implies(And(Apply(Const('<=', FunctionSort(UninterpretedSort('clients.client.idx',), UninterpretedSort('clients.client.idx',), BooleanSort())), Const('0', UninterpretedSort('clients.client.idx',)), Var('I', UninterpretedSort('clients.client.idx',))), Apply(Const('<', FunctionSort(UninterpretedSort('clients.client.idx',), UninterpretedSort('clients.client.idx',), BooleanSort())), Var('I', UninterpretedSort('clients.client.idx',)), Apply(Const('clients.client.arr.end', FunctionSort(UninterpretedSort('clients.client.arr',), UninterpretedSort('clients.client.idx',))), Var('X', UninterpretedSort('clients.client.arr',))))), Eq(Apply(Const('clients.client.arr.value', FunctionSort(UninterpretedSort('clients.client.arr',), UninterpretedSort('clients.client.idx',), UninterpretedSort('clients.client',))), Var('X', UninterpretedSort('clients.client.arr',)), Var('I', UninterpretedSort('clients.client.idx',))), Apply(Const('clients.client.arr.value', FunctionSort(UninterpretedSort('clients.client.arr',), UninterpretedSort('clients.client.idx',), UninterpretedSort('clients.client',))), Var('Y', UninterpretedSort('clients.client.arr',)), Var('I', UninterpretedSort('clients.client.idx',))))))),), Eq(Var('X', UninterpretedSort('clients.client.arr',)), Var('Y', UninterpretedSort('clients.client.arr',)))))",
                "explicit": false,
                "lineno": {},
                "id": 3174
            },
            {
                "definition": false,
                "assumed": false,
                "temporal": null,
                "args": "(servers.server.idx.spec.prop2, Implies(Apply(Const('servers.server.idx.succ', FunctionSort(UninterpretedSort('servers.server.idx',), UninterpretedSort('servers.server.idx',), BooleanSort())), Var('X', UninterpretedSort('servers.server.idx',)), Var('Z', UninterpretedSort('servers.server.idx',))), And(Apply(Const('<', FunctionSort(UninterpretedSort('servers.server.idx',), UninterpretedSort('servers.server.idx',), BooleanSort())), Var('X', UninterpretedSort('servers.server.idx',)), Var('Z', UninterpretedSort('servers.server.idx',))), Not(And(Apply(Const('<', FunctionSort(UninterpretedSort('servers.server.idx',), UninterpretedSort('servers.server.idx',), BooleanSort())), Var('X', UninterpretedSort('servers.server.idx',)), Var('Y', UninterpretedSort('servers.server.idx',))), Apply(Const('<', FunctionSort(UninterpretedSort('servers.server.idx',), UninterpretedSort('servers.server.idx',), BooleanSort())), Var('Y', UninterpretedSort('servers.server.idx',)), Var('Z', UninterpretedSort('servers.server.idx',)))),))))",
                "explicit": false,
                "lineno": {},
                "id": 1160
            },
            {
                "definition": false,
                "assumed": false,
                "temporal": null,
                "args": "(servers.server.idx.spec.transitivity, Implies(And(Apply(Const('<', FunctionSort(UninterpretedSort('servers.server.idx',), UninterpretedSort('servers.server.idx',), BooleanSort())), Var('T', UninterpretedSort('servers.server.idx',)), Var('U', UninterpretedSort('servers.server.idx',))), Apply(Const('<', FunctionSort(UninterpretedSort('servers.server.idx',), UninterpretedSort('servers.server.idx',), BooleanSort())), Var('U', UninterpretedSort('servers.server.idx',)), Var('V', UninterpretedSort('servers.server.idx',)))), Apply(Const('<', FunctionSort(UninterpretedSort('servers.server.idx',), UninterpretedSort('servers.server.idx',), BooleanSort())), Var('T', UninterpretedSort('servers.server.idx',)), Var('V', UninterpretedSort('servers.server.idx',)))))",
                "explicit": false,
                "lineno": {},
                "id": 1161
            },
            {
                "definition": false,
                "assumed": false,
                "temporal": null,
                "args": "(servers.server.idx.spec.antisymmetry, Not(And(Apply(Const('<', FunctionSort(UninterpretedSort('servers.server.idx',), UninterpretedSort('servers.server.idx',), BooleanSort())), Var('T', UninterpretedSort('servers.server.idx',)), Var('U', UninterpretedSort('servers.server.idx',))), Apply(Const('<', FunctionSort(UninterpretedSort('servers.server.idx',), UninterpretedSort('servers.server.idx',), BooleanSort())), Var('U', UninterpretedSort('servers.server.idx',)), Var('T', UninterpretedSort('servers.server.idx',)))),))",
                "explicit": false,
                "lineno": {},
                "id": 1162
            },
            {
                "definition": false,
                "assumed": false,
                "temporal": null,
                "args": "(servers.server.idx.spec.totality, Or(Apply(Const('<', FunctionSort(UninterpretedSort('servers.server.idx',), UninterpretedSort('servers.server.idx',), BooleanSort())), Var('T', UninterpretedSort('servers.server.idx',)), Var('U', UninterpretedSort('servers.server.idx',))), Eq(Var('T', UninterpretedSort('servers.server.idx',)), Var('U', UninterpretedSort('servers.server.idx',))), Apply(Const('<', FunctionSort(UninterpretedSort('servers.server.idx',), UninterpretedSort('servers.server.idx',), BooleanSort())), Var('U', UninterpretedSort('servers.server.idx',)), Var('T', UninterpretedSort('servers.server.idx',)))))",
                "explicit": false,
                "lineno": {},
                "id": 1163
            },
            {
                "definition": false,
                "assumed": false,
                "temporal": null,
                "args": "(servers.server.idx.spec.prop1, Apply(Const('<=', FunctionSort(UninterpretedSort('servers.server.idx',), UninterpretedSort('servers.server.idx',), BooleanSort())), Const('0', UninterpretedSort('servers.server.idx',)), Var('X', UninterpretedSort('servers.server.idx',))))",
                "explicit": false,
                "lineno": {},
                "id": 1164
            },
            {
                "definition": false,
                "assumed": false,
                "temporal": null,
                "args": "(servers.server.arr.spec.prop103, Apply(Const('>=', FunctionSort(UninterpretedSort('servers.server.idx',), UninterpretedSort('servers.server.idx',), BooleanSort())), Apply(Const('servers.server.arr.end', FunctionSort(UninterpretedSort('servers.server.arr',), UninterpretedSort('servers.server.idx',))), Var('X', UninterpretedSort('servers.server.arr',))), Const('0', UninterpretedSort('servers.server.idx',))))",
                "explicit": false,
                "lineno": {},
                "id": 1168
            },
            {
                "definition": false,
                "assumed": false,
                "temporal": null,
                "args": "(servers.server.arr.spec.extensionality._a, Implies(And(And(Eq(Apply(Const('servers.server.arr.end', FunctionSort(UninterpretedSort('servers.server.arr',), UninterpretedSort('servers.server.idx',))), Var('X', UninterpretedSort('servers.server.arr',))), Apply(Const('servers.server.arr.end', FunctionSort(UninterpretedSort('servers.server.arr',), UninterpretedSort('servers.server.idx',))), Var('Y', UninterpretedSort('servers.server.arr',)))), ForAll(frozenset([Var('I', UninterpretedSort('servers.server.idx',))]), Implies(And(Apply(Const('<=', FunctionSort(UninterpretedSort('servers.server.idx',), UninterpretedSort('servers.server.idx',), BooleanSort())), Const('0', UninterpretedSort('servers.server.idx',)), Var('I', UninterpretedSort('servers.server.idx',))), Apply(Const('<', FunctionSort(UninterpretedSort('servers.server.idx',), UninterpretedSort('servers.server.idx',), BooleanSort())), Var('I', UninterpretedSort('servers.server.idx',)), Apply(Const('servers.server.arr.end', FunctionSort(UninterpretedSort('servers.server.arr',), UninterpretedSort('servers.server.idx',))), Var('X', UninterpretedSort('servers.server.arr',))))), Eq(Apply(Const('servers.server.arr.value', FunctionSort(UninterpretedSort('servers.server.arr',), UninterpretedSort('servers.server.idx',), UninterpretedSort('servers.server',))), Var('X', UninterpretedSort('servers.server.arr',)), Var('I', UninterpretedSort('servers.server.idx',))), Apply(Const('servers.server.arr.value', FunctionSort(UninterpretedSort('servers.server.arr',), UninterpretedSort('servers.server.idx',), UninterpretedSort('servers.server',))), Var('Y', UninterpretedSort('servers.server.arr',)), Var('I', UninterpretedSort('servers.server.idx',))))))),), Eq(Var('X', UninterpretedSort('servers.server.arr',)), Var('Y', UninterpretedSort('servers.server.arr',)))))",
                "explicit": false,
                "lineno": {},
                "id": 3183
            },
            {
                "definition": false,
                "assumed": false,
                "temporal": null,
                "args": "(ip_endpoints.spec.prop103, Apply(Const('>=', FunctionSort(UninterpretedSort('index',), UninterpretedSort('index',), BooleanSort())), Apply(Const('ip_endpoints.end', FunctionSort(UninterpretedSort('ip_endpoints',), UninterpretedSort('index',))), Var('X', UninterpretedSort('ip_endpoints',))), Const('0', UninterpretedSort('index',))))",
                "explicit": false,
                "lineno": {},
                "id": 1175
            },
            {
                "definition": false,
                "assumed": false,
                "temporal": null,
                "args": "(ip_endpoints.spec.extensionality._a, Implies(And(And(Eq(Apply(Const('ip_endpoints.end', FunctionSort(UninterpretedSort('ip_endpoints',), UninterpretedSort('index',))), Var('X', UninterpretedSort('ip_endpoints',))), Apply(Const('ip_endpoints.end', FunctionSort(UninterpretedSort('ip_endpoints',), UninterpretedSort('index',))), Var('Y', UninterpretedSort('ip_endpoints',)))), ForAll(frozenset([Var('I', UninterpretedSort('index',))]), Implies(And(Apply(Const('<=', FunctionSort(UninterpretedSort('index',), UninterpretedSort('index',), BooleanSort())), Const('0', UninterpretedSort('index',)), Var('I', UninterpretedSort('index',))), Apply(Const('<', FunctionSort(UninterpretedSort('index',), UninterpretedSort('index',), BooleanSort())), Var('I', UninterpretedSort('index',)), Apply(Const('ip_endpoints.end', FunctionSort(UninterpretedSort('ip_endpoints',), UninterpretedSort('index',))), Var('X', UninterpretedSort('ip_endpoints',))))), Eq(Apply(Const('ip_endpoints.value', FunctionSort(UninterpretedSort('ip_endpoints',), UninterpretedSort('index',), UninterpretedSort('ip.endpoint',))), Var('X', UninterpretedSort('ip_endpoints',)), Var('I', UninterpretedSort('index',))), Apply(Const('ip_endpoints.value', FunctionSort(UninterpretedSort('ip_endpoints',), UninterpretedSort('index',), UninterpretedSort('ip.endpoint',))), Var('Y', UninterpretedSort('ip_endpoints',)), Var('I', UninterpretedSort('index',))))))),), Eq(Var('X', UninterpretedSort('ip_endpoints',)), Var('Y', UninterpretedSort('ip_endpoints',)))))",
                "explicit": false,
                "lineno": {},
                "id": 3187
            },
            {
                "definition": false,
                "assumed": false,
                "temporal": null,
                "args": "(tls_extensions.domain.spec.prop2, Implies(Apply(Const('tls_extensions.domain.succ', FunctionSort(UninterpretedSort('tls_extensions.domain',), UninterpretedSort('tls_extensions.domain',), BooleanSort())), Var('X', UninterpretedSort('tls_extensions.domain',)), Var('Z', UninterpretedSort('tls_extensions.domain',))), And(Apply(Const('<', FunctionSort(UninterpretedSort('tls_extensions.domain',), UninterpretedSort('tls_extensions.domain',), BooleanSort())), Var('X', UninterpretedSort('tls_extensions.domain',)), Var('Z', UninterpretedSort('tls_extensions.domain',))), Not(And(Apply(Const('<', FunctionSort(UninterpretedSort('tls_extensions.domain',), UninterpretedSort('tls_extensions.domain',), BooleanSort())), Var('X', UninterpretedSort('tls_extensions.domain',)), Var('Y', UninterpretedSort('tls_extensions.domain',))), Apply(Const('<', FunctionSort(UninterpretedSort('tls_extensions.domain',), UninterpretedSort('tls_extensions.domain',), BooleanSort())), Var('Y', UninterpretedSort('tls_extensions.domain',)), Var('Z', UninterpretedSort('tls_extensions.domain',)))),))))",
                "explicit": false,
                "lineno": {},
                "id": 1181
            },
            {
                "definition": false,
                "assumed": false,
                "temporal": null,
                "args": "(tls_extensions.domain.spec.transitivity, Implies(And(Apply(Const('<', FunctionSort(UninterpretedSort('tls_extensions.domain',), UninterpretedSort('tls_extensions.domain',), BooleanSort())), Var('T', UninterpretedSort('tls_extensions.domain',)), Var('U', UninterpretedSort('tls_extensions.domain',))), Apply(Const('<', FunctionSort(UninterpretedSort('tls_extensions.domain',), UninterpretedSort('tls_extensions.domain',), BooleanSort())), Var('U', UninterpretedSort('tls_extensions.domain',)), Var('V', UninterpretedSort('tls_extensions.domain',)))), Apply(Const('<', FunctionSort(UninterpretedSort('tls_extensions.domain',), UninterpretedSort('tls_extensions.domain',), BooleanSort())), Var('T', UninterpretedSort('tls_extensions.domain',)), Var('V', UninterpretedSort('tls_extensions.domain',)))))",
                "explicit": false,
                "lineno": {},
                "id": 1182
            },
            {
                "definition": false,
                "assumed": false,
                "temporal": null,
                "args": "(tls_extensions.domain.spec.antisymmetry, Not(And(Apply(Const('<', FunctionSort(UninterpretedSort('tls_extensions.domain',), UninterpretedSort('tls_extensions.domain',), BooleanSort())), Var('T', UninterpretedSort('tls_extensions.domain',)), Var('U', UninterpretedSort('tls_extensions.domain',))), Apply(Const('<', FunctionSort(UninterpretedSort('tls_extensions.domain',), UninterpretedSort('tls_extensions.domain',), BooleanSort())), Var('U', UninterpretedSort('tls_extensions.domain',)), Var('T', UninterpretedSort('tls_extensions.domain',)))),))",
                "explicit": false,
                "lineno": {},
                "id": 1183
            },
            {
                "definition": false,
                "assumed": false,
                "temporal": null,
                "args": "(tls_extensions.domain.spec.totality, Or(Apply(Const('<', FunctionSort(UninterpretedSort('tls_extensions.domain',), UninterpretedSort('tls_extensions.domain',), BooleanSort())), Var('T', UninterpretedSort('tls_extensions.domain',)), Var('U', UninterpretedSort('tls_extensions.domain',))), Eq(Var('T', UninterpretedSort('tls_extensions.domain',)), Var('U', UninterpretedSort('tls_extensions.domain',))), Apply(Const('<', FunctionSort(UninterpretedSort('tls_extensions.domain',), UninterpretedSort('tls_extensions.domain',), BooleanSort())), Var('U', UninterpretedSort('tls_extensions.domain',)), Var('T', UninterpretedSort('tls_extensions.domain',)))))",
                "explicit": false,
                "lineno": {},
                "id": 1184
            },
            {
                "definition": false,
                "assumed": false,
                "temporal": null,
                "args": "(tls_extensions.domain.spec.prop1, Apply(Const('<=', FunctionSort(UninterpretedSort('tls_extensions.domain',), UninterpretedSort('tls_extensions.domain',), BooleanSort())), Const('0', UninterpretedSort('tls_extensions.domain',)), Var('X', UninterpretedSort('tls_extensions.domain',))))",
                "explicit": false,
                "lineno": {},
                "id": 1185
            },
            {
                "definition": false,
                "assumed": false,
                "temporal": null,
                "args": "(tls_extensions.spec.prop103, Apply(Const('>=', FunctionSort(UninterpretedSort('tls_extensions.domain',), UninterpretedSort('tls_extensions.domain',), BooleanSort())), Apply(Const('tls_extensions.end', FunctionSort(UninterpretedSort('tls_extensions',), UninterpretedSort('tls_extensions.domain',))), Var('X', UninterpretedSort('tls_extensions',))), Const('0', UninterpretedSort('tls_extensions.domain',))))",
                "explicit": false,
                "lineno": {},
                "id": 1189
            },
            {
                "definition": false,
                "assumed": false,
                "temporal": null,
                "args": "(tls_extensions.spec.extensionality._a, Implies(And(And(Eq(Apply(Const('tls_extensions.end', FunctionSort(UninterpretedSort('tls_extensions',), UninterpretedSort('tls_extensions.domain',))), Var('X', UninterpretedSort('tls_extensions',))), Apply(Const('tls_extensions.end', FunctionSort(UninterpretedSort('tls_extensions',), UninterpretedSort('tls_extensions.domain',))), Var('Y', UninterpretedSort('tls_extensions',)))), ForAll(frozenset([Var('I', UninterpretedSort('tls_extensions.domain',))]), Implies(And(Apply(Const('<=', FunctionSort(UninterpretedSort('tls_extensions.domain',), UninterpretedSort('tls_extensions.domain',), BooleanSort())), Const('0', UninterpretedSort('tls_extensions.domain',)), Var('I', UninterpretedSort('tls_extensions.domain',))), Apply(Const('<', FunctionSort(UninterpretedSort('tls_extensions.domain',), UninterpretedSort('tls_extensions.domain',), BooleanSort())), Var('I', UninterpretedSort('tls_extensions.domain',)), Apply(Const('tls_extensions.end', FunctionSort(UninterpretedSort('tls_extensions',), UninterpretedSort('tls_extensions.domain',))), Var('X', UninterpretedSort('tls_extensions',))))), Eq(Apply(Const('tls_extensions.value', FunctionSort(UninterpretedSort('tls_extensions',), UninterpretedSort('tls_extensions.domain',), UninterpretedSort('tls.extension',))), Var('X', UninterpretedSort('tls_extensions',)), Var('I', UninterpretedSort('tls_extensions.domain',))), Apply(Const('tls_extensions.value', FunctionSort(UninterpretedSort('tls_extensions',), UninterpretedSort('tls_extensions.domain',), UninterpretedSort('tls.extension',))), Var('Y', UninterpretedSort('tls_extensions',)), Var('I', UninterpretedSort('tls_extensions.domain',))))))),), Eq(Var('X', UninterpretedSort('tls_extensions',)), Var('Y', UninterpretedSort('tls_extensions',)))))",
                "explicit": false,
                "lineno": {},
                "id": 3196
            },
            {
                "definition": false,
                "assumed": false,
                "temporal": null,
                "args": "(tls_hand_extensions.domain.spec.prop2, Implies(Apply(Const('tls_hand_extensions.domain.succ', FunctionSort(UninterpretedSort('tls_hand_extensions.domain',), UninterpretedSort('tls_hand_extensions.domain',), BooleanSort())), Var('X', UninterpretedSort('tls_hand_extensions.domain',)), Var('Z', UninterpretedSort('tls_hand_extensions.domain',))), And(Apply(Const('<', FunctionSort(UninterpretedSort('tls_hand_extensions.domain',), UninterpretedSort('tls_hand_extensions.domain',), BooleanSort())), Var('X', UninterpretedSort('tls_hand_extensions.domain',)), Var('Z', UninterpretedSort('tls_hand_extensions.domain',))), Not(And(Apply(Const('<', FunctionSort(UninterpretedSort('tls_hand_extensions.domain',), UninterpretedSort('tls_hand_extensions.domain',), BooleanSort())), Var('X', UninterpretedSort('tls_hand_extensions.domain',)), Var('Y', UninterpretedSort('tls_hand_extensions.domain',))), Apply(Const('<', FunctionSort(UninterpretedSort('tls_hand_extensions.domain',), UninterpretedSort('tls_hand_extensions.domain',), BooleanSort())), Var('Y', UninterpretedSort('tls_hand_extensions.domain',)), Var('Z', UninterpretedSort('tls_hand_extensions.domain',)))),))))",
                "explicit": false,
                "lineno": {},
                "id": 1195
            },
            {
                "definition": false,
                "assumed": false,
                "temporal": null,
                "args": "(tls_hand_extensions.domain.spec.transitivity, Implies(And(Apply(Const('<', FunctionSort(UninterpretedSort('tls_hand_extensions.domain',), UninterpretedSort('tls_hand_extensions.domain',), BooleanSort())), Var('T', UninterpretedSort('tls_hand_extensions.domain',)), Var('U', UninterpretedSort('tls_hand_extensions.domain',))), Apply(Const('<', FunctionSort(UninterpretedSort('tls_hand_extensions.domain',), UninterpretedSort('tls_hand_extensions.domain',), BooleanSort())), Var('U', UninterpretedSort('tls_hand_extensions.domain',)), Var('V', UninterpretedSort('tls_hand_extensions.domain',)))), Apply(Const('<', FunctionSort(UninterpretedSort('tls_hand_extensions.domain',), UninterpretedSort('tls_hand_extensions.domain',), BooleanSort())), Var('T', UninterpretedSort('tls_hand_extensions.domain',)), Var('V', UninterpretedSort('tls_hand_extensions.domain',)))))",
                "explicit": false,
                "lineno": {},
                "id": 1196
            },
            {
                "definition": false,
                "assumed": false,
                "temporal": null,
                "args": "(tls_hand_extensions.domain.spec.antisymmetry, Not(And(Apply(Const('<', FunctionSort(UninterpretedSort('tls_hand_extensions.domain',), UninterpretedSort('tls_hand_extensions.domain',), BooleanSort())), Var('T', UninterpretedSort('tls_hand_extensions.domain',)), Var('U', UninterpretedSort('tls_hand_extensions.domain',))), Apply(Const('<', FunctionSort(UninterpretedSort('tls_hand_extensions.domain',), UninterpretedSort('tls_hand_extensions.domain',), BooleanSort())), Var('U', UninterpretedSort('tls_hand_extensions.domain',)), Var('T', UninterpretedSort('tls_hand_extensions.domain',)))),))",
                "explicit": false,
                "lineno": {},
                "id": 1197
            },
            {
                "definition": false,
                "assumed": false,
                "temporal": null,
                "args": "(tls_hand_extensions.domain.spec.totality, Or(Apply(Const('<', FunctionSort(UninterpretedSort('tls_hand_extensions.domain',), UninterpretedSort('tls_hand_extensions.domain',), BooleanSort())), Var('T', UninterpretedSort('tls_hand_extensions.domain',)), Var('U', UninterpretedSort('tls_hand_extensions.domain',))), Eq(Var('T', UninterpretedSort('tls_hand_extensions.domain',)), Var('U', UninterpretedSort('tls_hand_extensions.domain',))), Apply(Const('<', FunctionSort(UninterpretedSort('tls_hand_extensions.domain',), UninterpretedSort('tls_hand_extensions.domain',), BooleanSort())), Var('U', UninterpretedSort('tls_hand_extensions.domain',)), Var('T', UninterpretedSort('tls_hand_extensions.domain',)))))",
                "explicit": false,
                "lineno": {},
                "id": 1198
            },
            {
                "definition": false,
                "assumed": false,
                "temporal": null,
                "args": "(tls_hand_extensions.domain.spec.prop1, Apply(Const('<=', FunctionSort(UninterpretedSort('tls_hand_extensions.domain',), UninterpretedSort('tls_hand_extensions.domain',), BooleanSort())), Const('0', UninterpretedSort('tls_hand_extensions.domain',)), Var('X', UninterpretedSort('tls_hand_extensions.domain',))))",
                "explicit": false,
                "lineno": {},
                "id": 1199
            },
            {
                "definition": false,
                "assumed": false,
                "temporal": null,
                "args": "(tls_hand_extensions.spec.prop103, Apply(Const('>=', FunctionSort(UninterpretedSort('tls_hand_extensions.domain',), UninterpretedSort('tls_hand_extensions.domain',), BooleanSort())), Apply(Const('tls_hand_extensions.end', FunctionSort(UninterpretedSort('tls_hand_extensions',), UninterpretedSort('tls_hand_extensions.domain',))), Var('X', UninterpretedSort('tls_hand_extensions',))), Const('0', UninterpretedSort('tls_hand_extensions.domain',))))",
                "explicit": false,
                "lineno": {},
                "id": 1203
            },
            {
                "definition": false,
                "assumed": false,
                "temporal": null,
                "args": "(tls_hand_extensions.spec.extensionality._a, Implies(And(And(Eq(Apply(Const('tls_hand_extensions.end', FunctionSort(UninterpretedSort('tls_hand_extensions',), UninterpretedSort('tls_hand_extensions.domain',))), Var('X', UninterpretedSort('tls_hand_extensions',))), Apply(Const('tls_hand_extensions.end', FunctionSort(UninterpretedSort('tls_hand_extensions',), UninterpretedSort('tls_hand_extensions.domain',))), Var('Y', UninterpretedSort('tls_hand_extensions',)))), ForAll(frozenset([Var('I', UninterpretedSort('tls_hand_extensions.domain',))]), Implies(And(Apply(Const('<=', FunctionSort(UninterpretedSort('tls_hand_extensions.domain',), UninterpretedSort('tls_hand_extensions.domain',), BooleanSort())), Const('0', UninterpretedSort('tls_hand_extensions.domain',)), Var('I', UninterpretedSort('tls_hand_extensions.domain',))), Apply(Const('<', FunctionSort(UninterpretedSort('tls_hand_extensions.domain',), UninterpretedSort('tls_hand_extensions.domain',), BooleanSort())), Var('I', UninterpretedSort('tls_hand_extensions.domain',)), Apply(Const('tls_hand_extensions.end', FunctionSort(UninterpretedSort('tls_hand_extensions',), UninterpretedSort('tls_hand_extensions.domain',))), Var('X', UninterpretedSort('tls_hand_extensions',))))), Eq(Apply(Const('tls_hand_extensions.value', FunctionSort(UninterpretedSort('tls_hand_extensions',), UninterpretedSort('tls_hand_extensions.domain',), UninterpretedSort('tls.handshake',))), Var('X', UninterpretedSort('tls_hand_extensions',)), Var('I', UninterpretedSort('tls_hand_extensions.domain',))), Apply(Const('tls_hand_extensions.value', FunctionSort(UninterpretedSort('tls_hand_extensions',), UninterpretedSort('tls_hand_extensions.domain',), UninterpretedSort('tls.handshake',))), Var('Y', UninterpretedSort('tls_hand_extensions',)), Var('I', UninterpretedSort('tls_hand_extensions.domain',))))))),), Eq(Var('X', UninterpretedSort('tls_hand_extensions',)), Var('Y', UninterpretedSort('tls_hand_extensions',)))))",
                "explicit": false,
                "lineno": {},
                "id": 3205
            }
        ],
        "param_defaults": [
            {
                "rep": "0x0a000001",
                "args": [],
                "lineno": {}
            },
            {
                "rep": "4443",
                "args": [],
                "lineno": {}
            },
            {
                "rep": "4443",
                "args": [],
                "lineno": {}
            },
            {
                "rep": "0xb",
                "args": [],
                "lineno": {}
            },
            {
                "rep": "0xd",
                "args": [],
                "lineno": {}
            },
            {
                "rep": "0x0a000001",
                "args": [],
                "lineno": {}
            },
            {
                "rep": "4987",
                "args": [],
                "lineno": {}
            },
            {
                "rep": "4988",
                "args": [],
                "lineno": {}
            },
            {
                "rep": "4987",
                "args": [],
                "lineno": {}
            },
            {
                "rep": "0x1",
                "args": [],
                "lineno": {}
            },
            {
                "rep": "0x2000",
                "args": [],
                "lineno": {}
            },
            {
                "rep": "200",
                "args": [],
                "lineno": {}
            },
            {
                "rep": "0x0a000401",
                "args": [],
                "lineno": {}
            },
            {
                "rep": "4430",
                "args": [],
                "lineno": {}
            },
            {
                "rep": "false",
                "args": [],
                "lineno": {}
            },
            {
                "rep": "0x0a000002",
                "args": [],
                "lineno": {}
            },
            {
                "rep": "4440",
                "args": [],
                "lineno": {}
            },
            {
                "rep": "4439",
                "args": [],
                "lineno": {}
            },
            {
                "rep": "false",
                "args": [],
                "lineno": {}
            },
            {
                "rep": "false",
                "args": [],
                "lineno": {}
            },
            {
                "rep": "true",
                "args": [],
                "lineno": {}
            },
            {
                "rep": "true",
                "args": [],
                "lineno": {}
            },
            {
                "rep": "false",
                "args": [],
                "lineno": {}
            },
            {
                "rep": "false",
                "args": [],
                "lineno": {}
            },
            {
                "rep": "false",
                "args": [],
                "lineno": {}
            },
            {
                "rep": "false",
                "args": [],
                "lineno": {}
            },
            {
                "rep": "0x1",
                "args": [],
                "lineno": {}
            },
            {
                "rep": "0x1",
                "args": [],
                "lineno": {}
            }
        ],
        "subgoals": [
            "([bytes.spec.extensionality] {\n    property [prop114] bytes.end(X) = bytes.end(Y) & (forall I. 0:idx <= I & I < bytes.end(X) -> bytes.value(X,I) = bytes.value(Y,I))\n    property X:bytes = Y\n}\n, [[bytes.spec.extensionality] (bytes.end(X) = bytes.end(Y) & (forall I. 0:idx <= I & I < bytes.end(X) -> bytes.value(X,I) = bytes.value(Y,I))) -> X = Y])",
            "([stream_data.spec.extensionality] {\n    property [prop114] stream_data.end(X) = stream_data.end(Y) & (forall I. 0:stream_pos <= I & I < stream_data.end(X) -> stream_data.value(X,I) = stream_data.value(Y,I))\n    property X:stream_data = Y\n}\n, [[stream_data.spec.extensionality] (stream_data.end(X) = stream_data.end(Y) & (forall I. 0:stream_pos <= I & I < stream_data.end(X) -> stream_data.value(X,I) = stream_data.value(Y,I))) -> X = Y])",
            "([vector[tls.psk_identity].spec.extensionality] {\n    property [prop114] vector[tls.psk_identity].end(X) = vector[tls.psk_identity].end(Y) & (forall I. 0:vector[tls.psk_identity].domain <= I & I < vector[tls.psk_identity].end(X) -> vector[tls.psk_identity].value(X,I) = vector[tls.psk_identity].value(Y,I))\n    property X:vector[tls.psk_identity] = Y\n}\n, [[vector[tls.psk_identity].spec.extensionality] (vector[tls.psk_identity].end(X) = vector[tls.psk_identity].end(Y) & (forall I. 0:vector[tls.psk_identity].domain <= I & I < vector[tls.psk_identity].end(X) -> vector[tls.psk_identity].value(X,I) = vector[tls.psk_identity].value(Y,I))) -> X = Y])",
            "([vector[tls.cipher_suite].spec.extensionality] {\n    property [prop114] vector[tls.cipher_suite].end(X) = vector[tls.cipher_suite].end(Y) & (forall I. 0:vector[tls.cipher_suite].domain <= I & I < vector[tls.cipher_suite].end(X) -> vector[tls.cipher_suite].value(X,I) = vector[tls.cipher_suite].value(Y,I))\n    property X:vector[tls.cipher_suite] = Y\n}\n, [[vector[tls.cipher_suite].spec.extensionality] (vector[tls.cipher_suite].end(X) = vector[tls.cipher_suite].end(Y) & (forall I. 0:vector[tls.cipher_suite].domain <= I & I < vector[tls.cipher_suite].end(X) -> vector[tls.cipher_suite].value(X,I) = vector[tls.cipher_suite].value(Y,I))) -> X = Y])",
            "([vector[tls.compression_method].spec.extensionality] {\n    property [prop114] vector[tls.compression_method].end(X) = vector[tls.compression_method].end(Y) & (forall I. 0:vector[tls.compression_method].domain <= I & I < vector[tls.compression_method].end(X) -> vector[tls.compression_method].value(X,I) = vector[tls.compression_method].value(Y,I))\n    property X:vector[tls.compression_method] = Y\n}\n, [[vector[tls.compression_method].spec.extensionality] (vector[tls.compression_method].end(X) = vector[tls.compression_method].end(Y) & (forall I. 0:vector[tls.compression_method].domain <= I & I < vector[tls.compression_method].end(X) -> vector[tls.compression_method].value(X,I) = vector[tls.compression_method].value(Y,I))) -> X = Y])",
            "([vector[tls.extension].spec.extensionality] {\n    property [prop114] vector[tls.extension].end(X) = vector[tls.extension].end(Y) & (forall I. 0:vector[tls.extension].domain <= I & I < vector[tls.extension].end(X) -> vector[tls.extension].value(X,I) = vector[tls.extension].value(Y,I))\n    property X:vector[tls.extension] = Y\n}\n, [[vector[tls.extension].spec.extensionality] (vector[tls.extension].end(X) = vector[tls.extension].end(Y) & (forall I. 0:vector[tls.extension].domain <= I & I < vector[tls.extension].end(X) -> vector[tls.extension].value(X,I) = vector[tls.extension].value(Y,I))) -> X = Y])",
            "([vector[tls.handshake].spec.extensionality] {\n    property [prop114] vector[tls.handshake].end(X) = vector[tls.handshake].end(Y) & (forall I. 0:vector[tls.handshake].domain <= I & I < vector[tls.handshake].end(X) -> vector[tls.handshake].value(X,I) = vector[tls.handshake].value(Y,I))\n    property X:vector[tls.handshake] = Y\n}\n, [[vector[tls.handshake].spec.extensionality] (vector[tls.handshake].end(X) = vector[tls.handshake].end(Y) & (forall I. 0:vector[tls.handshake].domain <= I & I < vector[tls.handshake].end(X) -> vector[tls.handshake].value(X,I) = vector[tls.handshake].value(Y,I))) -> X = Y])",
            "([tls.handshakes.spec.extensionality] {\n    property [prop114] tls.handshakes.end(X) = tls.handshakes.end(Y) & (forall I. 0:tls.handshakes.domain <= I & I < tls.handshakes.end(X) -> tls.handshakes.value(X,I) = tls.handshakes.value(Y,I))\n    property X:tls.handshakes = Y\n}\n, [[tls.handshakes.spec.extensionality] (tls.handshakes.end(X) = tls.handshakes.end(Y) & (forall I. 0:tls.handshakes.domain <= I & I < tls.handshakes.end(X) -> tls.handshakes.value(X,I) = tls.handshakes.value(Y,I))) -> X = Y])",
            "([frame.ack.range.arr.spec.extensionality] {\n    property [prop114] frame.ack.range.arr.end(X) = frame.ack.range.arr.end(Y) & (forall I. 0:frame.ack.range.idx <= I & I < frame.ack.range.arr.end(X) -> frame.ack.range.arr.value(X,I) = frame.ack.range.arr.value(Y,I))\n    property X:frame.ack.range.arr = Y\n}\n, [[frame.ack.range.arr.spec.extensionality] (frame.ack.range.arr.end(X) = frame.ack.range.arr.end(Y) & (forall I. 0:frame.ack.range.idx <= I & I < frame.ack.range.arr.end(X) -> frame.ack.range.arr.value(X,I) = frame.ack.range.arr.value(Y,I))) -> X = Y])",
            "([frame.ack_ecn.range.arr.spec.extensionality] {\n    property [prop114] frame.ack_ecn.range.arr.end(X) = frame.ack_ecn.range.arr.end(Y) & (forall I. 0:frame.ack_ecn.range.idx <= I & I < frame.ack_ecn.range.arr.end(X) -> frame.ack_ecn.range.arr.value(X,I) = frame.ack_ecn.range.arr.value(Y,I))\n    property X:frame.ack_ecn.range.arr = Y\n}\n, [[frame.ack_ecn.range.arr.spec.extensionality] (frame.ack_ecn.range.arr.end(X) = frame.ack_ecn.range.arr.end(Y) & (forall I. 0:frame.ack_ecn.range.idx <= I & I < frame.ack_ecn.range.arr.end(X) -> frame.ack_ecn.range.arr.value(X,I) = frame.ack_ecn.range.arr.value(Y,I))) -> X = Y])",
            "([frame.arr.spec.extensionality] {\n    property [prop114] frame.arr.end(X) = frame.arr.end(Y) & (forall I. 0:frame.idx <= I & I < frame.arr.end(X) -> frame.arr.value(X,I) = frame.arr.value(Y,I))\n    property X:frame.arr = Y\n}\n, [[frame.arr.spec.extensionality] (frame.arr.end(X) = frame.arr.end(Y) & (forall I. 0:frame.idx <= I & I < frame.arr.end(X) -> frame.arr.value(X,I) = frame.arr.value(Y,I))) -> X = Y])",
            "([versions.spec.extensionality] {\n    property [prop114] versions.end(X) = versions.end(Y) & (forall I. 0:index <= I & I < versions.end(X) -> versions.value(X,I) = versions.value(Y,I))\n    property X:versions = Y\n}\n, [[versions.spec.extensionality] (versions.end(X) = versions.end(Y) & (forall I. 0:index <= I & I < versions.end(X) -> versions.value(X,I) = versions.value(Y,I))) -> X = Y])",
            "([versions_bv.spec.extensionality] {\n    property [prop114] versions_bv.end(X) = versions_bv.end(Y) & (forall I. 0:index <= I & I < versions_bv.end(X) -> versions_bv.value(X,I) = versions_bv.value(Y,I))\n    property X:versions_bv = Y\n}\n, [[versions_bv.spec.extensionality] (versions_bv.end(X) = versions_bv.end(Y) & (forall I. 0:index <= I & I < versions_bv.end(X) -> versions_bv.value(X,I) = versions_bv.value(Y,I))) -> X = Y])",
            "([quic_packet_vn.arr.spec.extensionality] {\n    property [prop114] quic_packet_vn.arr.end(X) = quic_packet_vn.arr.end(Y) & (forall I. 0:quic_packet_vn.idx <= I & I < quic_packet_vn.arr.end(X) -> quic_packet_vn.arr.value(X,I) = quic_packet_vn.arr.value(Y,I))\n    property X:quic_packet_vn.arr = Y\n}\n, [[quic_packet_vn.arr.spec.extensionality] (quic_packet_vn.arr.end(X) = quic_packet_vn.arr.end(Y) & (forall I. 0:quic_packet_vn.idx <= I & I < quic_packet_vn.arr.end(X) -> quic_packet_vn.arr.value(X,I) = quic_packet_vn.arr.value(Y,I))) -> X = Y])",
            "([vector[transport_parameter].spec.extensionality] {\n    property [prop114] vector[transport_parameter].end(X) = vector[transport_parameter].end(Y) & (forall I. 0:vector[transport_parameter].domain <= I & I < vector[transport_parameter].end(X) -> vector[transport_parameter].value(X,I) = vector[transport_parameter].value(Y,I))\n    property X:vector[transport_parameter] = Y\n}\n, [[vector[transport_parameter].spec.extensionality] (vector[transport_parameter].end(X) = vector[transport_parameter].end(Y) & (forall I. 0:vector[transport_parameter].domain <= I & I < vector[transport_parameter].end(X) -> vector[transport_parameter].value(X,I) = vector[transport_parameter].value(Y,I))) -> X = Y])",
            "([arr_streamid_s.spec.extensionality] {\n    property [prop114] arr_streamid_s.end(X) = arr_streamid_s.end(Y) & (forall I. 0:idx_s <= I & I < arr_streamid_s.end(X) -> arr_streamid_s.value(X,I) = arr_streamid_s.value(Y,I))\n    property X:arr_streamid_s = Y\n}\n, [[arr_streamid_s.spec.extensionality] (arr_streamid_s.end(X) = arr_streamid_s.end(Y) & (forall I. 0:idx_s <= I & I < arr_streamid_s.end(X) -> arr_streamid_s.value(X,I) = arr_streamid_s.value(Y,I))) -> X = Y])",
            "([arr_pkt_num_s.spec.extensionality] {\n    property [prop114] arr_pkt_num_s.end(X) = arr_pkt_num_s.end(Y) & (forall I. 0:jdx_s <= I & I < arr_pkt_num_s.end(X) -> arr_pkt_num_s.value(X,I) = arr_pkt_num_s.value(Y,I))\n    property X:arr_pkt_num_s = Y\n}\n, [[arr_pkt_num_s.spec.extensionality] (arr_pkt_num_s.end(X) = arr_pkt_num_s.end(Y) & (forall I. 0:jdx_s <= I & I < arr_pkt_num_s.end(X) -> arr_pkt_num_s.value(X,I) = arr_pkt_num_s.value(Y,I))) -> X = Y])",
            "([arr_streamid_r.spec.extensionality] {\n    property [prop114] arr_streamid_r.end(X) = arr_streamid_r.end(Y) & (forall I. 0:idx_r <= I & I < arr_streamid_r.end(X) -> arr_streamid_r.value(X,I) = arr_streamid_r.value(Y,I))\n    property X:arr_streamid_r = Y\n}\n, [[arr_streamid_r.spec.extensionality] (arr_streamid_r.end(X) = arr_streamid_r.end(Y) & (forall I. 0:idx_r <= I & I < arr_streamid_r.end(X) -> arr_streamid_r.value(X,I) = arr_streamid_r.value(Y,I))) -> X = Y])",
            "([arr_pkt_num_r.spec.extensionality] {\n    property [prop114] arr_pkt_num_r.end(X) = arr_pkt_num_r.end(Y) & (forall I. 0:jdx_r <= I & I < arr_pkt_num_r.end(X) -> arr_pkt_num_r.value(X,I) = arr_pkt_num_r.value(Y,I))\n    property X:arr_pkt_num_r = Y\n}\n, [[arr_pkt_num_r.spec.extensionality] (arr_pkt_num_r.end(X) = arr_pkt_num_r.end(Y) & (forall I. 0:jdx_r <= I & I < arr_pkt_num_r.end(X) -> arr_pkt_num_r.value(X,I) = arr_pkt_num_r.value(Y,I))) -> X = Y])",
            "([quic_packet.arr.spec.extensionality] {\n    property [prop114] quic_packet.arr.end(X) = quic_packet.arr.end(Y) & (forall I. 0:quic_packet.idx <= I & I < quic_packet.arr.end(X) -> quic_packet.arr.value(X,I) = quic_packet.arr.value(Y,I))\n    property X:quic_packet.arr = Y\n}\n, [[quic_packet.arr.spec.extensionality] (quic_packet.arr.end(X) = quic_packet.arr.end(Y) & (forall I. 0:quic_packet.idx <= I & I < quic_packet.arr.end(X) -> quic_packet.arr.value(X,I) = quic_packet.arr.value(Y,I))) -> X = Y])",
            "([quic_packet.retired_cids.spec.extensionality] {\n    property [prop114] quic_packet.retired_cids.end(X) = quic_packet.retired_cids.end(Y) & (forall I. 0:quic_packet.idx <= I & I < quic_packet.retired_cids.end(X) -> quic_packet.retired_cids.value(X,I) = quic_packet.retired_cids.value(Y,I))\n    property X:quic_packet.retired_cids = Y\n}\n, [[quic_packet.retired_cids.spec.extensionality] (quic_packet.retired_cids.end(X) = quic_packet.retired_cids.end(Y) & (forall I. 0:quic_packet.idx <= I & I < quic_packet.retired_cids.end(X) -> quic_packet.retired_cids.value(X,I) = quic_packet.retired_cids.value(Y,I))) -> X = Y])",
            "([quic_packet_retry.arr.spec.extensionality] {\n    property [prop114] quic_packet_retry.arr.end(X) = quic_packet_retry.arr.end(Y) & (forall I. 0:quic_packet_retry.idx <= I & I < quic_packet_retry.arr.end(X) -> quic_packet_retry.arr.value(X,I) = quic_packet_retry.arr.value(Y,I))\n    property X:quic_packet_retry.arr = Y\n}\n, [[quic_packet_retry.arr.spec.extensionality] (quic_packet_retry.arr.end(X) = quic_packet_retry.arr.end(Y) & (forall I. 0:quic_packet_retry.idx <= I & I < quic_packet_retry.arr.end(X) -> quic_packet_retry.arr.value(X,I) = quic_packet_retry.arr.value(Y,I))) -> X = Y])",
            "([quic_packet_retry.retired_cids.spec.extensionality] {\n    property [prop114] quic_packet_retry.retired_cids.end(X) = quic_packet_retry.retired_cids.end(Y) & (forall I. 0:quic_packet_retry.idx <= I & I < quic_packet_retry.retired_cids.end(X) -> quic_packet_retry.retired_cids.value(X,I) = quic_packet_retry.retired_cids.value(Y,I))\n    property X:quic_packet_retry.retired_cids = Y\n}\n, [[quic_packet_retry.retired_cids.spec.extensionality] (quic_packet_retry.retired_cids.end(X) = quic_packet_retry.retired_cids.end(Y) & (forall I. 0:quic_packet_retry.idx <= I & I < quic_packet_retry.retired_cids.end(X) -> quic_packet_retry.retired_cids.value(X,I) = quic_packet_retry.retired_cids.value(Y,I))) -> X = Y])",
            "([quic_packet_0rtt.arr.spec.extensionality] {\n    property [prop114] quic_packet_0rtt.arr.end(X) = quic_packet_0rtt.arr.end(Y) & (forall I. 0:quic_packet_0rtt.idx <= I & I < quic_packet_0rtt.arr.end(X) -> quic_packet_0rtt.arr.value(X,I) = quic_packet_0rtt.arr.value(Y,I))\n    property X:quic_packet_0rtt.arr = Y\n}\n, [[quic_packet_0rtt.arr.spec.extensionality] (quic_packet_0rtt.arr.end(X) = quic_packet_0rtt.arr.end(Y) & (forall I. 0:quic_packet_0rtt.idx <= I & I < quic_packet_0rtt.arr.end(X) -> quic_packet_0rtt.arr.value(X,I) = quic_packet_0rtt.arr.value(Y,I))) -> X = Y])",
            "([quic_packet_0rtt.retired_cids.spec.extensionality] {\n    property [prop114] quic_packet_0rtt.retired_cids.end(X) = quic_packet_0rtt.retired_cids.end(Y) & (forall I. 0:quic_packet_0rtt.idx <= I & I < quic_packet_0rtt.retired_cids.end(X) -> quic_packet_0rtt.retired_cids.value(X,I) = quic_packet_0rtt.retired_cids.value(Y,I))\n    property X:quic_packet_0rtt.retired_cids = Y\n}\n, [[quic_packet_0rtt.retired_cids.spec.extensionality] (quic_packet_0rtt.retired_cids.end(X) = quic_packet_0rtt.retired_cids.end(Y) & (forall I. 0:quic_packet_0rtt.idx <= I & I < quic_packet_0rtt.retired_cids.end(X) -> quic_packet_0rtt.retired_cids.value(X,I) = quic_packet_0rtt.retired_cids.value(Y,I))) -> X = Y])",
            "([quic_packet_coal_0rtt.arr.spec.extensionality] {\n    property [prop114] quic_packet_coal_0rtt.arr.end(X) = quic_packet_coal_0rtt.arr.end(Y) & (forall I. 0:quic_packet_coal_0rtt.idx <= I & I < quic_packet_coal_0rtt.arr.end(X) -> quic_packet_coal_0rtt.arr.value(X,I) = quic_packet_coal_0rtt.arr.value(Y,I))\n    property X:quic_packet_coal_0rtt.arr = Y\n}\n, [[quic_packet_coal_0rtt.arr.spec.extensionality] (quic_packet_coal_0rtt.arr.end(X) = quic_packet_coal_0rtt.arr.end(Y) & (forall I. 0:quic_packet_coal_0rtt.idx <= I & I < quic_packet_coal_0rtt.arr.end(X) -> quic_packet_coal_0rtt.arr.value(X,I) = quic_packet_coal_0rtt.arr.value(Y,I))) -> X = Y])",
            "([quic_packet_coal_0rtt.retired_cids.spec.extensionality] {\n    property [prop114] quic_packet_coal_0rtt.retired_cids.end(X) = quic_packet_coal_0rtt.retired_cids.end(Y) & (forall I. 0:quic_packet_coal_0rtt.idx <= I & I < quic_packet_coal_0rtt.retired_cids.end(X) -> quic_packet_coal_0rtt.retired_cids.value(X,I) = quic_packet_coal_0rtt.retired_cids.value(Y,I))\n    property X:quic_packet_coal_0rtt.retired_cids = Y\n}\n, [[quic_packet_coal_0rtt.retired_cids.spec.extensionality] (quic_packet_coal_0rtt.retired_cids.end(X) = quic_packet_coal_0rtt.retired_cids.end(Y) & (forall I. 0:quic_packet_coal_0rtt.idx <= I & I < quic_packet_coal_0rtt.retired_cids.end(X) -> quic_packet_coal_0rtt.retired_cids.value(X,I) = quic_packet_coal_0rtt.retired_cids.value(Y,I))) -> X = Y])",
            "([forged_pkts.spec.extensionality] {\n    property [prop114] forged_pkts.end(X) = forged_pkts.end(Y) & (forall I. 0:index <= I & I < forged_pkts.end(X) -> forged_pkts.value(X,I) = forged_pkts.value(Y,I))\n    property X:forged_pkts = Y\n}\n, [[forged_pkts.spec.extensionality] (forged_pkts.end(X) = forged_pkts.end(Y) & (forall I. 0:index <= I & I < forged_pkts.end(X) -> forged_pkts.value(X,I) = forged_pkts.value(Y,I))) -> X = Y])",
            "([forged_protected_quic_packet.arr.spec.extensionality] {\n    property [prop114] forged_protected_quic_packet.arr.end(X) = forged_protected_quic_packet.arr.end(Y) & (forall I. 0:forged_protected_quic_packet.idx <= I & I < forged_protected_quic_packet.arr.end(X) -> forged_protected_quic_packet.arr.value(X,I) = forged_protected_quic_packet.arr.value(Y,I))\n    property X:forged_protected_quic_packet.arr = Y\n}\n, [[forged_protected_quic_packet.arr.spec.extensionality] (forged_protected_quic_packet.arr.end(X) = forged_protected_quic_packet.arr.end(Y) & (forall I. 0:forged_protected_quic_packet.idx <= I & I < forged_protected_quic_packet.arr.end(X) -> forged_protected_quic_packet.arr.value(X,I) = forged_protected_quic_packet.arr.value(Y,I))) -> X = Y])",
            "([forged_protected_quic_packet.retired_cids.spec.extensionality] {\n    property [prop114] forged_protected_quic_packet.retired_cids.end(X) = forged_protected_quic_packet.retired_cids.end(Y) & (forall I. 0:forged_protected_quic_packet.idx <= I & I < forged_protected_quic_packet.retired_cids.end(X) -> forged_protected_quic_packet.retired_cids.value(X,I) = forged_protected_quic_packet.retired_cids.value(Y,I))\n    property X:forged_protected_quic_packet.retired_cids = Y\n}\n, [[forged_protected_quic_packet.retired_cids.spec.extensionality] (forged_protected_quic_packet.retired_cids.end(X) = forged_protected_quic_packet.retired_cids.end(Y) & (forall I. 0:forged_protected_quic_packet.idx <= I & I < forged_protected_quic_packet.retired_cids.end(X) -> forged_protected_quic_packet.retired_cids.value(X,I) = forged_protected_quic_packet.retired_cids.value(Y,I))) -> X = Y])",
            "([forged_quic_packet.arr.spec.extensionality] {\n    property [prop114] forged_quic_packet.arr.end(X) = forged_quic_packet.arr.end(Y) & (forall I. 0:forged_quic_packet.idx <= I & I < forged_quic_packet.arr.end(X) -> forged_quic_packet.arr.value(X,I) = forged_quic_packet.arr.value(Y,I))\n    property X:forged_quic_packet.arr = Y\n}\n, [[forged_quic_packet.arr.spec.extensionality] (forged_quic_packet.arr.end(X) = forged_quic_packet.arr.end(Y) & (forall I. 0:forged_quic_packet.idx <= I & I < forged_quic_packet.arr.end(X) -> forged_quic_packet.arr.value(X,I) = forged_quic_packet.arr.value(Y,I))) -> X = Y])",
            "([forged_quic_packet.retired_cids.spec.extensionality] {\n    property [prop114] forged_quic_packet.retired_cids.end(X) = forged_quic_packet.retired_cids.end(Y) & (forall I. 0:forged_quic_packet.idx <= I & I < forged_quic_packet.retired_cids.end(X) -> forged_quic_packet.retired_cids.value(X,I) = forged_quic_packet.retired_cids.value(Y,I))\n    property X:forged_quic_packet.retired_cids = Y\n}\n, [[forged_quic_packet.retired_cids.spec.extensionality] (forged_quic_packet.retired_cids.end(X) = forged_quic_packet.retired_cids.end(Y) & (forall I. 0:forged_quic_packet.idx <= I & I < forged_quic_packet.retired_cids.end(X) -> forged_quic_packet.retired_cids.value(X,I) = forged_quic_packet.retired_cids.value(Y,I))) -> X = Y])",
            "([forged_quic_packet_retry.arr.spec.extensionality] {\n    property [prop114] forged_quic_packet_retry.arr.end(X) = forged_quic_packet_retry.arr.end(Y) & (forall I. 0:forged_quic_packet_retry.idx <= I & I < forged_quic_packet_retry.arr.end(X) -> forged_quic_packet_retry.arr.value(X,I) = forged_quic_packet_retry.arr.value(Y,I))\n    property X:forged_quic_packet_retry.arr = Y\n}\n, [[forged_quic_packet_retry.arr.spec.extensionality] (forged_quic_packet_retry.arr.end(X) = forged_quic_packet_retry.arr.end(Y) & (forall I. 0:forged_quic_packet_retry.idx <= I & I < forged_quic_packet_retry.arr.end(X) -> forged_quic_packet_retry.arr.value(X,I) = forged_quic_packet_retry.arr.value(Y,I))) -> X = Y])",
            "([forged_quic_packet_retry.retired_cids.spec.extensionality] {\n    property [prop114] forged_quic_packet_retry.retired_cids.end(X) = forged_quic_packet_retry.retired_cids.end(Y) & (forall I. 0:forged_quic_packet_retry.idx <= I & I < forged_quic_packet_retry.retired_cids.end(X) -> forged_quic_packet_retry.retired_cids.value(X,I) = forged_quic_packet_retry.retired_cids.value(Y,I))\n    property X:forged_quic_packet_retry.retired_cids = Y\n}\n, [[forged_quic_packet_retry.retired_cids.spec.extensionality] (forged_quic_packet_retry.retired_cids.end(X) = forged_quic_packet_retry.retired_cids.end(Y) & (forall I. 0:forged_quic_packet_retry.idx <= I & I < forged_quic_packet_retry.retired_cids.end(X) -> forged_quic_packet_retry.retired_cids.value(X,I) = forged_quic_packet_retry.retired_cids.value(Y,I))) -> X = Y])",
            "([forged_quic_packet_vn.arr.spec.extensionality] {\n    property [prop114] forged_quic_packet_vn.arr.end(X) = forged_quic_packet_vn.arr.end(Y) & (forall I. 0:forged_quic_packet_vn.idx <= I & I < forged_quic_packet_vn.arr.end(X) -> forged_quic_packet_vn.arr.value(X,I) = forged_quic_packet_vn.arr.value(Y,I))\n    property X:forged_quic_packet_vn.arr = Y\n}\n, [[forged_quic_packet_vn.arr.spec.extensionality] (forged_quic_packet_vn.arr.end(X) = forged_quic_packet_vn.arr.end(Y) & (forall I. 0:forged_quic_packet_vn.idx <= I & I < forged_quic_packet_vn.arr.end(X) -> forged_quic_packet_vn.arr.value(X,I) = forged_quic_packet_vn.arr.value(Y,I))) -> X = Y])",
            "([replayed_quic_packet_0rtt.arr.spec.extensionality] {\n    property [prop114] replayed_quic_packet_0rtt.arr.end(X) = replayed_quic_packet_0rtt.arr.end(Y) & (forall I. 0:replayed_quic_packet_0rtt.idx <= I & I < replayed_quic_packet_0rtt.arr.end(X) -> replayed_quic_packet_0rtt.arr.value(X,I) = replayed_quic_packet_0rtt.arr.value(Y,I))\n    property X:replayed_quic_packet_0rtt.arr = Y\n}\n, [[replayed_quic_packet_0rtt.arr.spec.extensionality] (replayed_quic_packet_0rtt.arr.end(X) = replayed_quic_packet_0rtt.arr.end(Y) & (forall I. 0:replayed_quic_packet_0rtt.idx <= I & I < replayed_quic_packet_0rtt.arr.end(X) -> replayed_quic_packet_0rtt.arr.value(X,I) = replayed_quic_packet_0rtt.arr.value(Y,I))) -> X = Y])",
            "([replayed_quic_packet_0rtt.retired_cids.spec.extensionality] {\n    property [prop114] replayed_quic_packet_0rtt.retired_cids.end(X) = replayed_quic_packet_0rtt.retired_cids.end(Y) & (forall I. 0:replayed_quic_packet_0rtt.idx <= I & I < replayed_quic_packet_0rtt.retired_cids.end(X) -> replayed_quic_packet_0rtt.retired_cids.value(X,I) = replayed_quic_packet_0rtt.retired_cids.value(Y,I))\n    property X:replayed_quic_packet_0rtt.retired_cids = Y\n}\n, [[replayed_quic_packet_0rtt.retired_cids.spec.extensionality] (replayed_quic_packet_0rtt.retired_cids.end(X) = replayed_quic_packet_0rtt.retired_cids.end(Y) & (forall I. 0:replayed_quic_packet_0rtt.idx <= I & I < replayed_quic_packet_0rtt.retired_cids.end(X) -> replayed_quic_packet_0rtt.retired_cids.value(X,I) = replayed_quic_packet_0rtt.retired_cids.value(Y,I))) -> X = Y])",
            "([prot.arr.spec.extensionality] {\n    property [prop114] prot.arr.end(X) = prot.arr.end(Y) & (forall I. 0:prot.idx <= I & I < prot.arr.end(X) -> prot.arr.value(X,I) = prot.arr.value(Y,I))\n    property X:prot.arr = Y\n}\n, [[prot.arr.spec.extensionality] (prot.arr.end(X) = prot.arr.end(Y) & (forall I. 0:prot.idx <= I & I < prot.arr.end(X) -> prot.arr.value(X,I) = prot.arr.value(Y,I))) -> X = Y])",
            "([cids.spec.extensionality] {\n    property [prop114] cids.end(X) = cids.end(Y) & (forall I. 0:index <= I & I < cids.end(X) -> cids.value(X,I) = cids.value(Y,I))\n    property X:cids = Y\n}\n, [[cids.spec.extensionality] (cids.end(X) = cids.end(Y) & (forall I. 0:index <= I & I < cids.end(X) -> cids.value(X,I) = cids.value(Y,I))) -> X = Y])",
            "([clients.client.arr.spec.extensionality] {\n    property [prop114] clients.client.arr.end(X) = clients.client.arr.end(Y) & (forall I. 0:clients.client.idx <= I & I < clients.client.arr.end(X) -> clients.client.arr.value(X,I) = clients.client.arr.value(Y,I))\n    property X:clients.client.arr = Y\n}\n, [[clients.client.arr.spec.extensionality] (clients.client.arr.end(X) = clients.client.arr.end(Y) & (forall I. 0:clients.client.idx <= I & I < clients.client.arr.end(X) -> clients.client.arr.value(X,I) = clients.client.arr.value(Y,I))) -> X = Y])",
            "([servers.server.arr.spec.extensionality] {\n    property [prop114] servers.server.arr.end(X) = servers.server.arr.end(Y) & (forall I. 0:servers.server.idx <= I & I < servers.server.arr.end(X) -> servers.server.arr.value(X,I) = servers.server.arr.value(Y,I))\n    property X:servers.server.arr = Y\n}\n, [[servers.server.arr.spec.extensionality] (servers.server.arr.end(X) = servers.server.arr.end(Y) & (forall I. 0:servers.server.idx <= I & I < servers.server.arr.end(X) -> servers.server.arr.value(X,I) = servers.server.arr.value(Y,I))) -> X = Y])",
            "([ip_endpoints.spec.extensionality] {\n    property [prop114] ip_endpoints.end(X) = ip_endpoints.end(Y) & (forall I. 0:index <= I & I < ip_endpoints.end(X) -> ip_endpoints.value(X,I) = ip_endpoints.value(Y,I))\n    property X:ip_endpoints = Y\n}\n, [[ip_endpoints.spec.extensionality] (ip_endpoints.end(X) = ip_endpoints.end(Y) & (forall I. 0:index <= I & I < ip_endpoints.end(X) -> ip_endpoints.value(X,I) = ip_endpoints.value(Y,I))) -> X = Y])",
            "([tls_extensions.spec.extensionality] {\n    property [prop114] tls_extensions.end(X) = tls_extensions.end(Y) & (forall I. 0:tls_extensions.domain <= I & I < tls_extensions.end(X) -> tls_extensions.value(X,I) = tls_extensions.value(Y,I))\n    property X:tls_extensions = Y\n}\n, [[tls_extensions.spec.extensionality] (tls_extensions.end(X) = tls_extensions.end(Y) & (forall I. 0:tls_extensions.domain <= I & I < tls_extensions.end(X) -> tls_extensions.value(X,I) = tls_extensions.value(Y,I))) -> X = Y])",
            "([tls_hand_extensions.spec.extensionality] {\n    property [prop114] tls_hand_extensions.end(X) = tls_hand_extensions.end(Y) & (forall I. 0:tls_hand_extensions.domain <= I & I < tls_hand_extensions.end(X) -> tls_hand_extensions.value(X,I) = tls_hand_extensions.value(Y,I))\n    property X:tls_hand_extensions = Y\n}\n, [[tls_hand_extensions.spec.extensionality] (tls_hand_extensions.end(X) = tls_hand_extensions.end(Y) & (forall I. 0:tls_hand_extensions.domain <= I & I < tls_hand_extensions.end(X) -> tls_hand_extensions.value(X,I) = tls_hand_extensions.value(Y,I))) -> X = Y])"
        ],
        "mixord": [],
        "ext_preconds": [],
        "native_types": [
            "<<< std::vector<`forged_quic_packet`> >>>",
            "<<< std::vector<`forged_protected_quic_packet`> >>>",
            "<<< std::vector<`tls.handshake`> >>>",
            "<<< std::vector<`replayed_quic_packet_0rtt`> >>>",
            "<<< std::vector<`byte`> >>>",
            "<<< std::vector<`cid_seq`> >>>",
            "<<< std::vector<`transport_parameter`> >>>",
            "<<< std::vector<`cid_seq`> >>>",
            "<<< std::vector<`quic_packet`> >>>",
            "<<< std::vector<`tls.compression_method`> >>>",
            "<<< std::vector<`pkt_num`> >>>",
            "<<< std::vector<`pkt_num`> >>>",
            "<<< std::vector<`cid_seq`> >>>",
            "<<< std::vector<`frame`> >>>",
            "<<< std::vector<`stream_id`> >>>",
            "<<< std::vector<`stream_id`> >>>",
            "<<< std::vector<`tls.cipher_suite`> >>>",
            "<<< std::vector<`tls.psk_identity`> >>>",
            "<<< std::vector<`tls.extension`> >>>",
            "<<< std::vector<`cid_seq`> >>>",
            "<<< std::vector<`cid_seq`> >>>",
            "<<< std::vector<`servers.server`> >>>",
            "<<< std::vector<`frame.ack.range`> >>>",
            "<<< std::vector<`version`> >>>",
            "<<< std::vector<`stream_data`> >>>",
            "<<< std::vector<`cid_seq`> >>>",
            "<<< std::vector<`forged_quic_packet_retry`> >>>",
            "<<< std::vector<`byte`> >>>",
            "<<< std::vector<`quic_packet_vn`> >>>",
            "<<< std::vector<`cid_seq`> >>>",
            "<<< std::vector<`cid`> >>>",
            "<<< std::vector<`forged_quic_packet_vn`> >>>",
            "<<< std::vector<`tls.extension`> >>>",
            "<<< std::vector<`quic_packet_0rtt`> >>>",
            "<<< std::vector<`stream_data`> >>>",
            "<<< std::vector<`tls.handshake`> >>>",
            "<<< std::vector<`stream_data`> >>>",
            "<<< std::vector<`quic_packet_coal_0rtt`> >>>",
            "<<< std::vector<`tls.handshake`> >>>",
            "<<< std::vector<`frame.ack_ecn.range`> >>>",
            "<<< std::vector<`ip.endpoint`> >>>",
            "<<< std::vector<`cid_seq`> >>>",
            "<<< std::vector<`quic_packet_retry`> >>>",
            "<<< std::vector<`clients.client`> >>>"
        ],
        "symbol_order": [
            "bit.zero",
            "bit.one",
            "idx.succ",
            "bytes.begin",
            "bytes.value",
            "bytes.end",
            "bytes.segment",
            "stream_pos.succ",
            "stream_data.begin",
            "stream_data.value",
            "stream_data.end",
            "stream_data.segment",
            "get_stream_kind",
            "get_stream_role",
            "vector[tls.psk_identity].domain.succ",
            "vector[tls.psk_identity].begin",
            "vector[tls.psk_identity].value",
            "vector[tls.psk_identity].end",
            "vector[tls.psk_identity].segment",
            "vector[tls.cipher_suite].domain.succ",
            "vector[tls.cipher_suite].begin",
            "vector[tls.cipher_suite].value",
            "vector[tls.cipher_suite].end",
            "vector[tls.cipher_suite].segment",
            "vector[tls.compression_method].domain.succ",
            "vector[tls.compression_method].begin",
            "vector[tls.compression_method].value",
            "vector[tls.compression_method].end",
            "vector[tls.compression_method].segment",
            "vector[tls.extension].domain.succ",
            "vector[tls.extension].begin",
            "vector[tls.extension].value",
            "vector[tls.extension].end",
            "vector[tls.extension].segment",
            "vector[tls.handshake].domain.succ",
            "vector[tls.handshake].begin",
            "vector[tls.handshake].value",
            "vector[tls.handshake].end",
            "vector[tls.handshake].segment",
            "tls.handshakes.domain.succ",
            "tls.handshakes.begin",
            "tls.handshakes.value",
            "tls.handshakes.end",
            "tls.handshakes.segment",
            "frame.ack.range.idx.succ",
            "frame.ack.range.arr.begin",
            "frame.ack.range.arr.value",
            "frame.ack.range.arr.end",
            "frame.ack.range.arr.segment",
            "frame.ack_ecn.range.idx.succ",
            "frame.ack_ecn.range.arr.begin",
            "frame.ack_ecn.range.arr.value",
            "frame.ack_ecn.range.arr.end",
            "frame.ack_ecn.range.arr.segment",
            "frame.idx.succ",
            "frame.arr.begin",
            "frame.arr.value",
            "frame.arr.end",
            "frame.arr.segment",
            "index.succ",
            "versions.begin",
            "versions.value",
            "versions.end",
            "versions.segment",
            "versions_bv.begin",
            "versions_bv.value",
            "versions_bv.end",
            "versions_bv.segment",
            "quic_packet_vn.idx.succ",
            "quic_packet_vn.arr.begin",
            "quic_packet_vn.arr.value",
            "quic_packet_vn.arr.end",
            "quic_packet_vn.arr.segment",
            "vector[transport_parameter].domain.succ",
            "vector[transport_parameter].begin",
            "vector[transport_parameter].value",
            "vector[transport_parameter].end",
            "vector[transport_parameter].segment",
            "idx_s.succ",
            "arr_streamid_s.begin",
            "arr_streamid_s.value",
            "arr_streamid_s.end",
            "arr_streamid_s.segment",
            "jdx_s.succ",
            "arr_pkt_num_s.begin",
            "arr_pkt_num_s.value",
            "arr_pkt_num_s.end",
            "arr_pkt_num_s.segment",
            "idx_r.succ",
            "arr_streamid_r.begin",
            "arr_streamid_r.value",
            "arr_streamid_r.end",
            "arr_streamid_r.segment",
            "jdx_r.succ",
            "arr_pkt_num_r.begin",
            "arr_pkt_num_r.value",
            "arr_pkt_num_r.end",
            "arr_pkt_num_r.segment",
            "quic_packet.idx.succ",
            "quic_packet.arr.begin",
            "quic_packet.arr.value",
            "quic_packet.arr.end",
            "quic_packet.arr.segment",
            "quic_packet.retired_cids.begin",
            "quic_packet.retired_cids.value",
            "quic_packet.retired_cids.end",
            "quic_packet.retired_cids.segment",
            "quic_packet_retry.idx.succ",
            "quic_packet_retry.arr.begin",
            "quic_packet_retry.arr.value",
            "quic_packet_retry.arr.end",
            "quic_packet_retry.arr.segment",
            "quic_packet_retry.retired_cids.begin",
            "quic_packet_retry.retired_cids.value",
            "quic_packet_retry.retired_cids.end",
            "quic_packet_retry.retired_cids.segment",
            "quic_packet_0rtt.idx.succ",
            "quic_packet_0rtt.arr.begin",
            "quic_packet_0rtt.arr.value",
            "quic_packet_0rtt.arr.end",
            "quic_packet_0rtt.arr.segment",
            "quic_packet_0rtt.retired_cids.begin",
            "quic_packet_0rtt.retired_cids.value",
            "quic_packet_0rtt.retired_cids.end",
            "quic_packet_0rtt.retired_cids.segment",
            "quic_packet_coal_0rtt.idx.succ",
            "quic_packet_coal_0rtt.arr.begin",
            "quic_packet_coal_0rtt.arr.value",
            "quic_packet_coal_0rtt.arr.end",
            "quic_packet_coal_0rtt.arr.segment",
            "quic_packet_coal_0rtt.retired_cids.begin",
            "quic_packet_coal_0rtt.retired_cids.value",
            "quic_packet_coal_0rtt.retired_cids.end",
            "quic_packet_coal_0rtt.retired_cids.segment",
            "forged_pkts.begin",
            "forged_pkts.value",
            "forged_pkts.end",
            "forged_pkts.segment",
            "forged_protected_quic_packet.idx.succ",
            "forged_protected_quic_packet.arr.begin",
            "forged_protected_quic_packet.arr.value",
            "forged_protected_quic_packet.arr.end",
            "forged_protected_quic_packet.arr.segment",
            "forged_protected_quic_packet.retired_cids.begin",
            "forged_protected_quic_packet.retired_cids.value",
            "forged_protected_quic_packet.retired_cids.end",
            "forged_protected_quic_packet.retired_cids.segment",
            "forged_quic_packet.idx.succ",
            "forged_quic_packet.arr.begin",
            "forged_quic_packet.arr.value",
            "forged_quic_packet.arr.end",
            "forged_quic_packet.arr.segment",
            "forged_quic_packet.retired_cids.begin",
            "forged_quic_packet.retired_cids.value",
            "forged_quic_packet.retired_cids.end",
            "forged_quic_packet.retired_cids.segment",
            "forged_quic_packet_retry.idx.succ",
            "forged_quic_packet_retry.arr.begin",
            "forged_quic_packet_retry.arr.value",
            "forged_quic_packet_retry.arr.end",
            "forged_quic_packet_retry.arr.segment",
            "forged_quic_packet_retry.retired_cids.begin",
            "forged_quic_packet_retry.retired_cids.value",
            "forged_quic_packet_retry.retired_cids.end",
            "forged_quic_packet_retry.retired_cids.segment",
            "forged_quic_packet_vn.idx.succ",
            "forged_quic_packet_vn.arr.begin",
            "forged_quic_packet_vn.arr.value",
            "forged_quic_packet_vn.arr.end",
            "forged_quic_packet_vn.arr.segment",
            "replayed_quic_packet_0rtt.idx.succ",
            "replayed_quic_packet_0rtt.arr.begin",
            "replayed_quic_packet_0rtt.arr.value",
            "replayed_quic_packet_0rtt.arr.end",
            "replayed_quic_packet_0rtt.arr.segment",
            "replayed_quic_packet_0rtt.retired_cids.begin",
            "replayed_quic_packet_0rtt.retired_cids.value",
            "replayed_quic_packet_0rtt.retired_cids.end",
            "replayed_quic_packet_0rtt.retired_cids.segment",
            "prot.idx.succ",
            "prot.arr.begin",
            "prot.arr.value",
            "prot.arr.end",
            "prot.arr.segment",
            "tls_api.id.succ",
            "cids.begin",
            "cids.value",
            "cids.end",
            "cids.segment",
            "clients.client.idx.succ",
            "clients.client.arr.begin",
            "clients.client.arr.value",
            "clients.client.arr.end",
            "clients.client.arr.segment",
            "servers.server.idx.succ",
            "servers.server.arr.begin",
            "servers.server.arr.value",
            "servers.server.arr.end",
            "servers.server.arr.segment",
            "ip_endpoints.begin",
            "ip_endpoints.value",
            "ip_endpoints.end",
            "ip_endpoints.segment",
            "tls_extensions.domain.succ",
            "tls_extensions.begin",
            "tls_extensions.value",
            "tls_extensions.end",
            "tls_extensions.segment",
            "tls_hand_extensions.domain.succ",
            "tls_hand_extensions.begin",
            "tls_hand_extensions.value",
            "tls_hand_extensions.end",
            "tls_hand_extensions.segment"
        ],
        "relations": [
            1,
            1
        ],
        "instantiations": [],
        "macros": [],
        "initializers": [],
        "params": [
            "server_addr",
            "server_port",
            "server_port_alt",
            "server_cid",
            "the_cid",
            "client_addr",
            "client_port",
            "client_port_alt",
            "client_port_vn",
            "n_clients",
            "max_stream_data",
            "initial_max_streams_bidi",
            "victim_addr",
            "victim_port",
            "is_victim",
            "mim_addr",
            "mim_port_in",
            "mim_port_out",
            "is_mim",
            "is_mim_standalone",
            "forward_packets",
            "keep_coalesed",
            "forward_packets_victim",
            "modify_packets",
            "replay_packets",
            "save_packet",
            "iversion",
            "vnversion"
        ],
        "progress": [],
        "isolates": [
            "frame.arr.spec,frame.arr.impl",
            "vector[tls.cipher_suite].domain.impl,vector[tls.cipher_suite].domain.spec",
            "vector[transport_parameter].spec,vector[transport_parameter].impl",
            "quic_packet_0rtt.arr.spec,quic_packet_0rtt.arr.impl",
            "frame.ack_ecn.range.idx.impl,frame.ack_ecn.range.idx.spec",
            "quic_packet.retired_cids.spec,quic_packet.retired_cids.impl",
            "arr_pkt_num_r.spec,arr_pkt_num_r.impl",
            "prot.idx.impl,prot.idx.spec",
            "forged_quic_packet_vn.arr.spec,forged_quic_packet_vn.arr.impl",
            "quic_packet_retry.arr.spec,quic_packet_retry.arr.impl",
            "forged_protected_pkt_serdes",
            "tls_api.id.impl,tls_api.id.spec",
            "forged_quic_packet_retry.retired_cids.spec,forged_quic_packet_retry.retired_cids.impl",
            "vector[tls.compression_method].spec,vector[tls.compression_method].impl",
            "idx.impl,idx.spec",
            "quic_packet_retry.idx.impl,quic_packet_retry.idx.spec",
            "quic_packet_retry.retired_cids.spec,quic_packet_retry.retired_cids.impl",
            "pkt_serdes_retry",
            "tls.handshakes.spec,tls.handshakes.impl",
            "forged_protected_quic_packet.arr.spec,forged_protected_quic_packet.arr.impl",
            "quic_packet.arr.spec,quic_packet.arr.impl",
            "jdx_r.impl,jdx_r.spec",
            "vector[tls.psk_identity].spec,vector[tls.psk_identity].impl",
            "pkt_serdes_0rtt_coal",
            "bytes.spec,bytes.impl",
            "frame.ack.range.idx.impl,frame.ack.range.idx.spec",
            "tls_api.upper.foo.impl",
            "vector[tls.compression_method].domain.impl,vector[tls.compression_method].domain.spec",
            "forged_quic_packet_vn.idx.impl,forged_quic_packet_vn.idx.spec",
            "replayed_quic_packet_0rtt.idx.impl,replayed_quic_packet_0rtt.idx.spec",
            "prot.arr.spec,prot.arr.impl",
            "frame.ack_ecn.range.arr.spec,frame.ack_ecn.range.arr.impl",
            "frame.ack.range.arr.spec,frame.ack.range.arr.impl",
            "replayed_pkt_serdes_0rtt",
            "quic_packet_coal_0rtt.arr.spec,quic_packet_coal_0rtt.arr.impl",
            "forged_protected_quic_packet.retired_cids.spec,forged_protected_quic_packet.retired_cids.impl",
            "cids.spec,cids.impl",
            "pkt_serdes_vn",
            "tls_extensions.domain.impl,tls_extensions.domain.spec",
            "index.impl,index.spec",
            "quic_packet_coal_0rtt.idx.impl,quic_packet_coal_0rtt.idx.spec",
            "quic_packet_coal_0rtt.retired_cids.spec,quic_packet_coal_0rtt.retired_cids.impl",
            "forged_protected_quic_packet.idx.impl,forged_protected_quic_packet.idx.spec",
            "net",
            "tls_hand_extensions.domain.impl,tls_hand_extensions.domain.spec",
            "vector[tls.handshake].spec,vector[tls.handshake].impl",
            "forged_pkt_serdes_retry",
            "forged_pkt_serdes",
            "arr_pkt_num_s.spec,arr_pkt_num_s.impl",
            "http_request_file",
            "stream_pos.impl,stream_pos.spec",
            "quic_packet_0rtt.idx.impl,quic_packet_0rtt.idx.spec",
            "quic_packet_0rtt.retired_cids.spec,quic_packet_0rtt.retired_cids.impl",
            "arr_streamid_s.spec,arr_streamid_s.impl",
            "quic_packet_vn.arr.spec,quic_packet_vn.arr.impl",
            "forged_quic_packet_retry.idx.impl,forged_quic_packet_retry.idx.spec",
            "forged_pkt_serdes_vn",
            "forged_pkts.spec,forged_pkts.impl",
            "vector[transport_parameter].domain.impl,vector[transport_parameter].domain.spec",
            "vector[tls.extension].spec,vector[tls.extension].impl",
            "tls_extensions.spec,tls_extensions.impl",
            "clients.client.arr.spec,clients.client.arr.impl",
            "forged_quic_packet.retired_cids.spec,forged_quic_packet.retired_cids.impl",
            "this",
            "vector[tls.extension].domain.impl,vector[tls.extension].domain.spec",
            "pkt_serdes",
            "forged_quic_packet.arr.spec,forged_quic_packet.arr.impl",
            "vector[tls.psk_identity].domain.impl,vector[tls.psk_identity].domain.spec",
            "frame.idx.impl,frame.idx.spec",
            "tls.handshakes.domain.impl,tls.handshakes.domain.spec",
            "servers.server.arr.spec,servers.server.arr.impl",
            "quic_packet.idx.impl,quic_packet.idx.spec",
            "pkt_serdes_0rtt",
            "idx_r.impl,idx_r.spec",
            "versions_bv.spec,versions_bv.impl",
            "tls_hand_extensions.spec,tls_hand_extensions.impl",
            "arr_streamid_r.spec,arr_streamid_r.impl",
            "vector[tls.cipher_suite].spec,vector[tls.cipher_suite].impl",
            "idx_s.impl,idx_s.spec",
            "replayed_quic_packet_0rtt.retired_cids.spec,replayed_quic_packet_0rtt.retired_cids.impl",
            "forged_quic_packet_retry.arr.spec,forged_quic_packet_retry.arr.impl",
            "stream_data.spec,stream_data.impl",
            "versions.spec,versions.impl",
            "jdx_s.impl,jdx_s.spec",
            "forged_quic_packet.idx.impl,forged_quic_packet.idx.spec",
            "clients.client.idx.impl,clients.client.idx.spec",
            "vector[tls.handshake].domain.impl,vector[tls.handshake].domain.spec",
            "quic_packet_vn.idx.impl,quic_packet_vn.idx.spec",
            "ip_endpoints.spec,ip_endpoints.impl",
            "servers.server.idx.impl,servers.server.idx.spec",
            "replayed_quic_packet_0rtt.arr.spec,replayed_quic_packet_0rtt.arr.impl"
        ],
        "constructor_sorts": [],
        "exports": [
            {
                "args": "(frame.ack.handle, )",
                "lineno": {}
            },
            {
                "args": "(frame.stream.handle, )",
                "lineno": {}
            },
            {
                "args": "(frame.crypto.handle, )",
                "lineno": {}
            },
            {
                "args": "(frame.path_response.handle, )",
                "lineno": {}
            },
            {
                "args": "(packet_event, )",
                "lineno": {}
            },
            {
                "args": "(client_send_event, )",
                "lineno": {}
            },
            {
                "args": "(tls_recv_event, )",
                "lineno": {}
            },
            {
                "args": "(frame.connection_close.handle, )",
                "lineno": {}
            },
            {
                "args": "(_finalize, )"
            }
        ],
        "native_definitions": [
            {
                "definition": false,
                "assumed": false,
                "temporal": null,
                "args": "(bytes.impl.def86, <ivy.ivy_logic.Definition object at 0x7fd8f0f3ffd0>)",
                "explicit": false,
                "lineno": {},
                "id": 306
            },
            {
                "definition": false,
                "assumed": false,
                "temporal": null,
                "args": "(bytes.impl.def87, <ivy.ivy_logic.Definition object at 0x7fd8f0f3ee50>)",
                "explicit": false,
                "lineno": {},
                "id": 307
            },
            {
                "definition": false,
                "assumed": false,
                "temporal": null,
                "args": "(bytes.impl.def100, <ivy.ivy_logic.Definition object at 0x7fd8f0f47210>)",
                "explicit": false,
                "lineno": {},
                "id": 308
            },
            {
                "definition": false,
                "assumed": false,
                "temporal": null,
                "args": "(stream_data.impl.def86, <ivy.ivy_logic.Definition object at 0x7fd8f0f5ce90>)",
                "explicit": false,
                "lineno": {},
                "id": 322
            },
            {
                "definition": false,
                "assumed": false,
                "temporal": null,
                "args": "(stream_data.impl.def87, <ivy.ivy_logic.Definition object at 0x7fd8f0f5c890>)",
                "explicit": false,
                "lineno": {},
                "id": 323
            },
            {
                "definition": false,
                "assumed": false,
                "temporal": null,
                "args": "(stream_data.impl.def100, <ivy.ivy_logic.Definition object at 0x7fd8f0f5ce10>)",
                "explicit": false,
                "lineno": {},
                "id": 324
            },
            {
                "definition": false,
                "assumed": false,
                "temporal": null,
                "args": "(vector[tls.psk_identity].impl.def86, <ivy.ivy_logic.Definition object at 0x7fd8f0f04090>)",
                "explicit": false,
                "lineno": {},
                "id": 1230
            },
            {
                "definition": false,
                "assumed": false,
                "temporal": null,
                "args": "(vector[tls.psk_identity].impl.def87, <ivy.ivy_logic.Definition object at 0x7fd8f0f04590>)",
                "explicit": false,
                "lineno": {},
                "id": 1231
            },
            {
                "definition": false,
                "assumed": false,
                "temporal": null,
                "args": "(vector[tls.psk_identity].impl.def100, <ivy.ivy_logic.Definition object at 0x7fd8f0f6afd0>)",
                "explicit": false,
                "lineno": {},
                "id": 1232
            },
            {
                "definition": false,
                "assumed": false,
                "temporal": null,
                "args": "(vector[tls.cipher_suite].impl.def86, <ivy.ivy_logic.Definition object at 0x7fd8f0f2ef50>)",
                "explicit": false,
                "lineno": {},
                "id": 1244
            },
            {
                "definition": false,
                "assumed": false,
                "temporal": null,
                "args": "(vector[tls.cipher_suite].impl.def87, <ivy.ivy_logic.Definition object at 0x7fd8f0f21950>)",
                "explicit": false,
                "lineno": {},
                "id": 1245
            },
            {
                "definition": false,
                "assumed": false,
                "temporal": null,
                "args": "(vector[tls.cipher_suite].impl.def100, <ivy.ivy_logic.Definition object at 0x7fd8f0f32750>)",
                "explicit": false,
                "lineno": {},
                "id": 1246
            },
            {
                "definition": false,
                "assumed": false,
                "temporal": null,
                "args": "(vector[tls.compression_method].impl.def86, <ivy.ivy_logic.Definition object at 0x7fd8f0ebef10>)",
                "explicit": false,
                "lineno": {},
                "id": 1258
            },
            {
                "definition": false,
                "assumed": false,
                "temporal": null,
                "args": "(vector[tls.compression_method].impl.def87, <ivy.ivy_logic.Definition object at 0x7fd8f0ebd610>)",
                "explicit": false,
                "lineno": {},
                "id": 1259
            },
            {
                "definition": false,
                "assumed": false,
                "temporal": null,
                "args": "(vector[tls.compression_method].impl.def100, <ivy.ivy_logic.Definition object at 0x7fd8f0ec63d0>)",
                "explicit": false,
                "lineno": {},
                "id": 1260
            },
            {
                "definition": false,
                "assumed": false,
                "temporal": null,
                "args": "(vector[tls.extension].impl.def86, <ivy.ivy_logic.Definition object at 0x7fd8f0ed2b10>)",
                "explicit": false,
                "lineno": {},
                "id": 1272
            },
            {
                "definition": false,
                "assumed": false,
                "temporal": null,
                "args": "(vector[tls.extension].impl.def87, <ivy.ivy_logic.Definition object at 0x7fd8f0ed18d0>)",
                "explicit": false,
                "lineno": {},
                "id": 1273
            },
            {
                "definition": false,
                "assumed": false,
                "temporal": null,
                "args": "(vector[tls.extension].impl.def100, <ivy.ivy_logic.Definition object at 0x7fd8f0ede6d0>)",
                "explicit": false,
                "lineno": {},
                "id": 1274
            },
            {
                "definition": false,
                "assumed": false,
                "temporal": null,
                "args": "(vector[tls.handshake].impl.def86, <ivy.ivy_logic.Definition object at 0x7fd8f0ef33d0>)",
                "explicit": false,
                "lineno": {},
                "id": 1286
            },
            {
                "definition": false,
                "assumed": false,
                "temporal": null,
                "args": "(vector[tls.handshake].impl.def87, <ivy.ivy_logic.Definition object at 0x7fd8f0ef3ed0>)",
                "explicit": false,
                "lineno": {},
                "id": 1287
            },
            {
                "definition": false,
                "assumed": false,
                "temporal": null,
                "args": "(vector[tls.handshake].impl.def100, <ivy.ivy_logic.Definition object at 0x7fd8f0ee1a10>)",
                "explicit": false,
                "lineno": {},
                "id": 1288
            },
            {
                "definition": false,
                "assumed": false,
                "temporal": null,
                "args": "(tls.handshakes.impl.def86, <ivy.ivy_logic.Definition object at 0x7fd8f0e977d0>)",
                "explicit": false,
                "lineno": {},
                "id": 378
            },
            {
                "definition": false,
                "assumed": false,
                "temporal": null,
                "args": "(tls.handshakes.impl.def87, <ivy.ivy_logic.Definition object at 0x7fd8f0e83f10>)",
                "explicit": false,
                "lineno": {},
                "id": 379
            },
            {
                "definition": false,
                "assumed": false,
                "temporal": null,
                "args": "(tls.handshakes.impl.def100, <ivy.ivy_logic.Definition object at 0x7fd8f0e83710>)",
                "explicit": false,
                "lineno": {},
                "id": 380
            },
            {
                "definition": false,
                "assumed": false,
                "temporal": null,
                "args": "(frame.ack.range.arr.impl.def86, <ivy.ivy_logic.Definition object at 0x7fd8f0ea83d0>)",
                "explicit": false,
                "lineno": {},
                "id": 490
            },
            {
                "definition": false,
                "assumed": false,
                "temporal": null,
                "args": "(frame.ack.range.arr.impl.def87, <ivy.ivy_logic.Definition object at 0x7fd8f0ea8190>)",
                "explicit": false,
                "lineno": {},
                "id": 491
            },
            {
                "definition": false,
                "assumed": false,
                "temporal": null,
                "args": "(frame.ack.range.arr.impl.def100, <ivy.ivy_logic.Definition object at 0x7fd8f0ea8f90>)",
                "explicit": false,
                "lineno": {},
                "id": 492
            },
            {
                "definition": false,
                "assumed": false,
                "temporal": null,
                "args": "(frame.ack_ecn.range.arr.impl.def86, <ivy.ivy_logic.Definition object at 0x7fd8f0e3d0d0>)",
                "explicit": false,
                "lineno": {},
                "id": 504
            },
            {
                "definition": false,
                "assumed": false,
                "temporal": null,
                "args": "(frame.ack_ecn.range.arr.impl.def87, <ivy.ivy_logic.Definition object at 0x7fd8f0ea5bd0>)",
                "explicit": false,
                "lineno": {},
                "id": 505
            },
            {
                "definition": false,
                "assumed": false,
                "temporal": null,
                "args": "(frame.ack_ecn.range.arr.impl.def100, <ivy.ivy_logic.Definition object at 0x7fd8f0e3cf10>)",
                "explicit": false,
                "lineno": {},
                "id": 506
            },
            {
                "definition": false,
                "assumed": false,
                "temporal": null,
                "args": "(frame.arr.impl.def86, <ivy.ivy_logic.Definition object at 0x7fd8f0e50b10>)",
                "explicit": false,
                "lineno": {},
                "id": 518
            },
            {
                "definition": false,
                "assumed": false,
                "temporal": null,
                "args": "(frame.arr.impl.def87, <ivy.ivy_logic.Definition object at 0x7fd8f0ead510>)",
                "explicit": false,
                "lineno": {},
                "id": 519
            },
            {
                "definition": false,
                "assumed": false,
                "temporal": null,
                "args": "(frame.arr.impl.def100, <ivy.ivy_logic.Definition object at 0x7fd8f0e51310>)",
                "explicit": false,
                "lineno": {},
                "id": 520
            },
            {
                "definition": false,
                "assumed": false,
                "temporal": null,
                "args": "(versions.impl.def86, <ivy.ivy_logic.Definition object at 0x7fd8f0e75bd0>)",
                "explicit": false,
                "lineno": {},
                "id": 532
            },
            {
                "definition": false,
                "assumed": false,
                "temporal": null,
                "args": "(versions.impl.def87, <ivy.ivy_logic.Definition object at 0x7fd8f0e75690>)",
                "explicit": false,
                "lineno": {},
                "id": 533
            },
            {
                "definition": false,
                "assumed": false,
                "temporal": null,
                "args": "(versions.impl.def100, <ivy.ivy_logic.Definition object at 0x7fd8f0e756d0>)",
                "explicit": false,
                "lineno": {},
                "id": 534
            },
            {
                "definition": false,
                "assumed": false,
                "temporal": null,
                "args": "(versions_bv.impl.def86, <ivy.ivy_logic.Definition object at 0x7fd8f0e78bd0>)",
                "explicit": false,
                "lineno": {},
                "id": 541
            },
            {
                "definition": false,
                "assumed": false,
                "temporal": null,
                "args": "(versions_bv.impl.def87, <ivy.ivy_logic.Definition object at 0x7fd8f0e78dd0>)",
                "explicit": false,
                "lineno": {},
                "id": 542
            },
            {
                "definition": false,
                "assumed": false,
                "temporal": null,
                "args": "(versions_bv.impl.def100, <ivy.ivy_logic.Definition object at 0x7fd8f0e68190>)",
                "explicit": false,
                "lineno": {},
                "id": 543
            },
            {
                "definition": false,
                "assumed": false,
                "temporal": null,
                "args": "(quic_packet_vn.arr.impl.def86, <ivy.ivy_logic.Definition object at 0x7fd8f0e0a090>)",
                "explicit": false,
                "lineno": {},
                "id": 569
            },
            {
                "definition": false,
                "assumed": false,
                "temporal": null,
                "args": "(quic_packet_vn.arr.impl.def87, <ivy.ivy_logic.Definition object at 0x7fd8f0e0aad0>)",
                "explicit": false,
                "lineno": {},
                "id": 570
            },
            {
                "definition": false,
                "assumed": false,
                "temporal": null,
                "args": "(quic_packet_vn.arr.impl.def100, <ivy.ivy_logic.Definition object at 0x7fd8f0e0b910>)",
                "explicit": false,
                "lineno": {},
                "id": 571
            },
            {
                "definition": false,
                "assumed": false,
                "temporal": null,
                "args": "(vector[transport_parameter].impl.def86, <ivy.ivy_logic.Definition object at 0x7fd8f0e2a9d0>)",
                "explicit": false,
                "lineno": {},
                "id": 1300
            },
            {
                "definition": false,
                "assumed": false,
                "temporal": null,
                "args": "(vector[transport_parameter].impl.def87, <ivy.ivy_logic.Definition object at 0x7fd8f0e2a3d0>)",
                "explicit": false,
                "lineno": {},
                "id": 1301
            },
            {
                "definition": false,
                "assumed": false,
                "temporal": null,
                "args": "(vector[transport_parameter].impl.def100, <ivy.ivy_logic.Definition object at 0x7fd8f0e2a1d0>)",
                "explicit": false,
                "lineno": {},
                "id": 1302
            },
            {
                "definition": false,
                "assumed": false,
                "temporal": null,
                "args": "(arr_streamid_s.impl.def86, <ivy.ivy_logic.Definition object at 0x7fd8f0dbc650>)",
                "explicit": false,
                "lineno": {},
                "id": 589
            },
            {
                "definition": false,
                "assumed": false,
                "temporal": null,
                "args": "(arr_streamid_s.impl.def87, <ivy.ivy_logic.Definition object at 0x7fd8f0e38090>)",
                "explicit": false,
                "lineno": {},
                "id": 590
            },
            {
                "definition": false,
                "assumed": false,
                "temporal": null,
                "args": "(arr_streamid_s.impl.def100, <ivy.ivy_logic.Definition object at 0x7fd8f0e380d0>)",
                "explicit": false,
                "lineno": {},
                "id": 591
            },
            {
                "definition": false,
                "assumed": false,
                "temporal": null,
                "args": "(arr_pkt_num_s.impl.def86, <ivy.ivy_logic.Definition object at 0x7fd8f0dcc850>)",
                "explicit": false,
                "lineno": {},
                "id": 603
            },
            {
                "definition": false,
                "assumed": false,
                "temporal": null,
                "args": "(arr_pkt_num_s.impl.def87, <ivy.ivy_logic.Definition object at 0x7fd8f0dcc4d0>)",
                "explicit": false,
                "lineno": {},
                "id": 604
            },
            {
                "definition": false,
                "assumed": false,
                "temporal": null,
                "args": "(arr_pkt_num_s.impl.def100, <ivy.ivy_logic.Definition object at 0x7fd8f0dccc50>)",
                "explicit": false,
                "lineno": {},
                "id": 605
            },
            {
                "definition": false,
                "assumed": false,
                "temporal": null,
                "args": "(arr_streamid_r.impl.def86, <ivy.ivy_logic.Definition object at 0x7fd8f0de88d0>)",
                "explicit": false,
                "lineno": {},
                "id": 617
            },
            {
                "definition": false,
                "assumed": false,
                "temporal": null,
                "args": "(arr_streamid_r.impl.def87, <ivy.ivy_logic.Definition object at 0x7fd8f0ddfb50>)",
                "explicit": false,
                "lineno": {},
                "id": 618
            },
            {
                "definition": false,
                "assumed": false,
                "temporal": null,
                "args": "(arr_streamid_r.impl.def100, <ivy.ivy_logic.Definition object at 0x7fd8f0ddf150>)",
                "explicit": false,
                "lineno": {},
                "id": 619
            },
            {
                "definition": false,
                "assumed": false,
                "temporal": null,
                "args": "(arr_pkt_num_r.impl.def86, <ivy.ivy_logic.Definition object at 0x7fd8f0df0890>)",
                "explicit": false,
                "lineno": {},
                "id": 631
            },
            {
                "definition": false,
                "assumed": false,
                "temporal": null,
                "args": "(arr_pkt_num_r.impl.def87, <ivy.ivy_logic.Definition object at 0x7fd8f0df08d0>)",
                "explicit": false,
                "lineno": {},
                "id": 632
            },
            {
                "definition": false,
                "assumed": false,
                "temporal": null,
                "args": "(arr_pkt_num_r.impl.def100, <ivy.ivy_logic.Definition object at 0x7fd8f0df0290>)",
                "explicit": false,
                "lineno": {},
                "id": 633
            },
            {
                "definition": false,
                "assumed": false,
                "temporal": null,
                "args": "(quic_packet.arr.impl.def86, <ivy.ivy_logic.Definition object at 0x7fd8f0dfa650>)",
                "explicit": false,
                "lineno": {},
                "id": 666
            },
            {
                "definition": false,
                "assumed": false,
                "temporal": null,
                "args": "(quic_packet.arr.impl.def87, <ivy.ivy_logic.Definition object at 0x7fd8f0d82190>)",
                "explicit": false,
                "lineno": {},
                "id": 667
            },
            {
                "definition": false,
                "assumed": false,
                "temporal": null,
                "args": "(quic_packet.arr.impl.def100, <ivy.ivy_logic.Definition object at 0x7fd8f0d82510>)",
                "explicit": false,
                "lineno": {},
                "id": 668
            },
            {
                "definition": false,
                "assumed": false,
                "temporal": null,
                "args": "(quic_packet.retired_cids.impl.def86, <ivy.ivy_logic.Definition object at 0x7fd8f0d7f750>)",
                "explicit": false,
                "lineno": {},
                "id": 673
            },
            {
                "definition": false,
                "assumed": false,
                "temporal": null,
                "args": "(quic_packet.retired_cids.impl.def87, <ivy.ivy_logic.Definition object at 0x7fd8f0d7fe50>)",
                "explicit": false,
                "lineno": {},
                "id": 674
            },
            {
                "definition": false,
                "assumed": false,
                "temporal": null,
                "args": "(quic_packet.retired_cids.impl.def100, <ivy.ivy_logic.Definition object at 0x7fd8f0d7f790>)",
                "explicit": false,
                "lineno": {},
                "id": 675
            },
            {
                "definition": false,
                "assumed": false,
                "temporal": null,
                "args": "(quic_packet_retry.arr.impl.def86, <ivy.ivy_logic.Definition object at 0x7fd8f0d99790>)",
                "explicit": false,
                "lineno": {},
                "id": 710
            },
            {
                "definition": false,
                "assumed": false,
                "temporal": null,
                "args": "(quic_packet_retry.arr.impl.def87, <ivy.ivy_logic.Definition object at 0x7fd8f0d988d0>)",
                "explicit": false,
                "lineno": {},
                "id": 711
            },
            {
                "definition": false,
                "assumed": false,
                "temporal": null,
                "args": "(quic_packet_retry.arr.impl.def100, <ivy.ivy_logic.Definition object at 0x7fd8f0d98250>)",
                "explicit": false,
                "lineno": {},
                "id": 712
            },
            {
                "definition": false,
                "assumed": false,
                "temporal": null,
                "args": "(quic_packet_retry.retired_cids.impl.def86, <ivy.ivy_logic.Definition object at 0x7fd8f0da6ed0>)",
                "explicit": false,
                "lineno": {},
                "id": 717
            },
            {
                "definition": false,
                "assumed": false,
                "temporal": null,
                "args": "(quic_packet_retry.retired_cids.impl.def87, <ivy.ivy_logic.Definition object at 0x7fd8f0da6b50>)",
                "explicit": false,
                "lineno": {},
                "id": 718
            },
            {
                "definition": false,
                "assumed": false,
                "temporal": null,
                "args": "(quic_packet_retry.retired_cids.impl.def100, <ivy.ivy_logic.Definition object at 0x7fd8f0d996d0>)",
                "explicit": false,
                "lineno": {},
                "id": 719
            },
            {
                "definition": false,
                "assumed": false,
                "temporal": null,
                "args": "(quic_packet_0rtt.arr.impl.def86, <ivy.ivy_logic.Definition object at 0x7fd8f0d3e8d0>)",
                "explicit": false,
                "lineno": {},
                "id": 752
            },
            {
                "definition": false,
                "assumed": false,
                "temporal": null,
                "args": "(quic_packet_0rtt.arr.impl.def87, <ivy.ivy_logic.Definition object at 0x7fd8f0dad850>)",
                "explicit": false,
                "lineno": {},
                "id": 753
            },
            {
                "definition": false,
                "assumed": false,
                "temporal": null,
                "args": "(quic_packet_0rtt.arr.impl.def100, <ivy.ivy_logic.Definition object at 0x7fd8f0dad190>)",
                "explicit": false,
                "lineno": {},
                "id": 754
            },
            {
                "definition": false,
                "assumed": false,
                "temporal": null,
                "args": "(quic_packet_0rtt.retired_cids.impl.def86, <ivy.ivy_logic.Definition object at 0x7fd8f0db0250>)",
                "explicit": false,
                "lineno": {},
                "id": 759
            },
            {
                "definition": false,
                "assumed": false,
                "temporal": null,
                "args": "(quic_packet_0rtt.retired_cids.impl.def87, <ivy.ivy_logic.Definition object at 0x7fd8f0db0390>)",
                "explicit": false,
                "lineno": {},
                "id": 760
            },
            {
                "definition": false,
                "assumed": false,
                "temporal": null,
                "args": "(quic_packet_0rtt.retired_cids.impl.def100, <ivy.ivy_logic.Definition object at 0x7fd8f0db0710>)",
                "explicit": false,
                "lineno": {},
                "id": 761
            },
            {
                "definition": false,
                "assumed": false,
                "temporal": null,
                "args": "(quic_packet_coal_0rtt.arr.impl.def86, <ivy.ivy_logic.Definition object at 0x7fd8f0d4a750>)",
                "explicit": false,
                "lineno": {},
                "id": 794
            },
            {
                "definition": false,
                "assumed": false,
                "temporal": null,
                "args": "(quic_packet_coal_0rtt.arr.impl.def87, <ivy.ivy_logic.Definition object at 0x7fd8f0d49510>)",
                "explicit": false,
                "lineno": {},
                "id": 795
            },
            {
                "definition": false,
                "assumed": false,
                "temporal": null,
                "args": "(quic_packet_coal_0rtt.arr.impl.def100, <ivy.ivy_logic.Definition object at 0x7fd8f0d49550>)",
                "explicit": false,
                "lineno": {},
                "id": 796
            },
            {
                "definition": false,
                "assumed": false,
                "temporal": null,
                "args": "(quic_packet_coal_0rtt.retired_cids.impl.def86, <ivy.ivy_logic.Definition object at 0x7fd8f0d49b10>)",
                "explicit": false,
                "lineno": {},
                "id": 801
            },
            {
                "definition": false,
                "assumed": false,
                "temporal": null,
                "args": "(quic_packet_coal_0rtt.retired_cids.impl.def87, <ivy.ivy_logic.Definition object at 0x7fd8f0d49090>)",
                "explicit": false,
                "lineno": {},
                "id": 802
            },
            {
                "definition": false,
                "assumed": false,
                "temporal": null,
                "args": "(quic_packet_coal_0rtt.retired_cids.impl.def100, <ivy.ivy_logic.Definition object at 0x7fd8f0d4a990>)",
                "explicit": false,
                "lineno": {},
                "id": 803
            },
            {
                "definition": false,
                "assumed": false,
                "temporal": null,
                "args": "(forged_pkts.impl.def86, <ivy.ivy_logic.Definition object at 0x7fd8f0d58e50>)",
                "explicit": false,
                "lineno": {},
                "id": 808
            },
            {
                "definition": false,
                "assumed": false,
                "temporal": null,
                "args": "(forged_pkts.impl.def87, <ivy.ivy_logic.Definition object at 0x7fd8f0d5d8d0>)",
                "explicit": false,
                "lineno": {},
                "id": 809
            },
            {
                "definition": false,
                "assumed": false,
                "temporal": null,
                "args": "(forged_pkts.impl.def100, <ivy.ivy_logic.Definition object at 0x7fd8f0d5d2d0>)",
                "explicit": false,
                "lineno": {},
                "id": 810
            },
            {
                "definition": false,
                "assumed": false,
                "temporal": null,
                "args": "(forged_protected_quic_packet.arr.impl.def86, <ivy.ivy_logic.Definition object at 0x7fd8f0d694d0>)",
                "explicit": false,
                "lineno": {},
                "id": 843
            },
            {
                "definition": false,
                "assumed": false,
                "temporal": null,
                "args": "(forged_protected_quic_packet.arr.impl.def87, <ivy.ivy_logic.Definition object at 0x7fd8f0d69450>)",
                "explicit": false,
                "lineno": {},
                "id": 844
            },
            {
                "definition": false,
                "assumed": false,
                "temporal": null,
                "args": "(forged_protected_quic_packet.arr.impl.def100, <ivy.ivy_logic.Definition object at 0x7fd8f0d69c90>)",
                "explicit": false,
                "lineno": {},
                "id": 845
            },
            {
                "definition": false,
                "assumed": false,
                "temporal": null,
                "args": "(forged_protected_quic_packet.retired_cids.impl.def86, <ivy.ivy_logic.Definition object at 0x7fd8f0d67950>)",
                "explicit": false,
                "lineno": {},
                "id": 850
            },
            {
                "definition": false,
                "assumed": false,
                "temporal": null,
                "args": "(forged_protected_quic_packet.retired_cids.impl.def87, <ivy.ivy_logic.Definition object at 0x7fd8f0d67b10>)",
                "explicit": false,
                "lineno": {},
                "id": 851
            },
            {
                "definition": false,
                "assumed": false,
                "temporal": null,
                "args": "(forged_protected_quic_packet.retired_cids.impl.def100, <ivy.ivy_logic.Definition object at 0x7fd8f0d64d50>)",
                "explicit": false,
                "lineno": {},
                "id": 852
            },
            {
                "definition": false,
                "assumed": false,
                "temporal": null,
                "args": "(forged_quic_packet.arr.impl.def86, <ivy.ivy_logic.Definition object at 0x7fd8f0d00c50>)",
                "explicit": false,
                "lineno": {},
                "id": 885
            },
            {
                "definition": false,
                "assumed": false,
                "temporal": null,
                "args": "(forged_quic_packet.arr.impl.def87, <ivy.ivy_logic.Definition object at 0x7fd8f0d02190>)",
                "explicit": false,
                "lineno": {},
                "id": 886
            },
            {
                "definition": false,
                "assumed": false,
                "temporal": null,
                "args": "(forged_quic_packet.arr.impl.def100, <ivy.ivy_logic.Definition object at 0x7fd8f0d032d0>)",
                "explicit": false,
                "lineno": {},
                "id": 887
            },
            {
                "definition": false,
                "assumed": false,
                "temporal": null,
                "args": "(forged_quic_packet.retired_cids.impl.def86, <ivy.ivy_logic.Definition object at 0x7fd8f0d00990>)",
                "explicit": false,
                "lineno": {},
                "id": 892
            },
            {
                "definition": false,
                "assumed": false,
                "temporal": null,
                "args": "(forged_quic_packet.retired_cids.impl.def87, <ivy.ivy_logic.Definition object at 0x7fd8f0d10350>)",
                "explicit": false,
                "lineno": {},
                "id": 893
            },
            {
                "definition": false,
                "assumed": false,
                "temporal": null,
                "args": "(forged_quic_packet.retired_cids.impl.def100, <ivy.ivy_logic.Definition object at 0x7fd8f0d10850>)",
                "explicit": false,
                "lineno": {},
                "id": 894
            },
            {
                "definition": false,
                "assumed": false,
                "temporal": null,
                "args": "(forged_quic_packet_retry.arr.impl.def86, <ivy.ivy_logic.Definition object at 0x7fd8f0d19950>)",
                "explicit": false,
                "lineno": {},
                "id": 929
            },
            {
                "definition": false,
                "assumed": false,
                "temporal": null,
                "args": "(forged_quic_packet_retry.arr.impl.def87, <ivy.ivy_logic.Definition object at 0x7fd8f0d183d0>)",
                "explicit": false,
                "lineno": {},
                "id": 930
            },
            {
                "definition": false,
                "assumed": false,
                "temporal": null,
                "args": "(forged_quic_packet_retry.arr.impl.def100, <ivy.ivy_logic.Definition object at 0x7fd8f0d18f10>)",
                "explicit": false,
                "lineno": {},
                "id": 931
            },
            {
                "definition": false,
                "assumed": false,
                "temporal": null,
                "args": "(forged_quic_packet_retry.retired_cids.impl.def86, <ivy.ivy_logic.Definition object at 0x7fd8f0d253d0>)",
                "explicit": false,
                "lineno": {},
                "id": 936
            },
            {
                "definition": false,
                "assumed": false,
                "temporal": null,
                "args": "(forged_quic_packet_retry.retired_cids.impl.def87, <ivy.ivy_logic.Definition object at 0x7fd8f0d17990>)",
                "explicit": false,
                "lineno": {},
                "id": 937
            },
            {
                "definition": false,
                "assumed": false,
                "temporal": null,
                "args": "(forged_quic_packet_retry.retired_cids.impl.def100, <ivy.ivy_logic.Definition object at 0x7fd8f0d173d0>)",
                "explicit": false,
                "lineno": {},
                "id": 938
            },
            {
                "definition": false,
                "assumed": false,
                "temporal": null,
                "args": "(forged_quic_packet_vn.arr.impl.def86, <ivy.ivy_logic.Definition object at 0x7fd8f0cbd8d0>)",
                "explicit": false,
                "lineno": {},
                "id": 964
            },
            {
                "definition": false,
                "assumed": false,
                "temporal": null,
                "args": "(forged_quic_packet_vn.arr.impl.def87, <ivy.ivy_logic.Definition object at 0x7fd8f0cbd950>)",
                "explicit": false,
                "lineno": {},
                "id": 965
            },
            {
                "definition": false,
                "assumed": false,
                "temporal": null,
                "args": "(forged_quic_packet_vn.arr.impl.def100, <ivy.ivy_logic.Definition object at 0x7fd8f0cbddd0>)",
                "explicit": false,
                "lineno": {},
                "id": 966
            },
            {
                "definition": false,
                "assumed": false,
                "temporal": null,
                "args": "(replayed_quic_packet_0rtt.arr.impl.def86, <ivy.ivy_logic.Definition object at 0x7fd8f0cc5690>)",
                "explicit": false,
                "lineno": {},
                "id": 999
            },
            {
                "definition": false,
                "assumed": false,
                "temporal": null,
                "args": "(replayed_quic_packet_0rtt.arr.impl.def87, <ivy.ivy_logic.Definition object at 0x7fd8f0cc2bd0>)",
                "explicit": false,
                "lineno": {},
                "id": 1000
            },
            {
                "definition": false,
                "assumed": false,
                "temporal": null,
                "args": "(replayed_quic_packet_0rtt.arr.impl.def100, <ivy.ivy_logic.Definition object at 0x7fd8f0cc27d0>)",
                "explicit": false,
                "lineno": {},
                "id": 1001
            },
            {
                "definition": false,
                "assumed": false,
                "temporal": null,
                "args": "(replayed_quic_packet_0rtt.retired_cids.impl.def86, <ivy.ivy_logic.Definition object at 0x7fd8f0cc33d0>)",
                "explicit": false,
                "lineno": {},
                "id": 1006
            },
            {
                "definition": false,
                "assumed": false,
                "temporal": null,
                "args": "(replayed_quic_packet_0rtt.retired_cids.impl.def87, <ivy.ivy_logic.Definition object at 0x7fd8f0cc48d0>)",
                "explicit": false,
                "lineno": {},
                "id": 1007
            },
            {
                "definition": false,
                "assumed": false,
                "temporal": null,
                "args": "(replayed_quic_packet_0rtt.retired_cids.impl.def100, <ivy.ivy_logic.Definition object at 0x7fd8f0cc4750>)",
                "explicit": false,
                "lineno": {},
                "id": 1008
            },
            {
                "definition": false,
                "assumed": false,
                "temporal": null,
                "args": "(prot.arr.impl.def86, <ivy.ivy_logic.Definition object at 0x7fd8f0cdc190>)",
                "explicit": false,
                "lineno": {},
                "id": 1036
            },
            {
                "definition": false,
                "assumed": false,
                "temporal": null,
                "args": "(prot.arr.impl.def87, <ivy.ivy_logic.Definition object at 0x7fd8f0cdb590>)",
                "explicit": false,
                "lineno": {},
                "id": 1037
            },
            {
                "definition": false,
                "assumed": false,
                "temporal": null,
                "args": "(prot.arr.impl.def100, <ivy.ivy_logic.Definition object at 0x7fd8f0cdb550>)",
                "explicit": false,
                "lineno": {},
                "id": 1038
            },
            {
                "definition": false,
                "assumed": false,
                "temporal": null,
                "args": "(cids.impl.def86, <ivy.ivy_logic.Definition object at 0x7fd8f0cf6610>)",
                "explicit": false,
                "lineno": {},
                "id": 1143
            },
            {
                "definition": false,
                "assumed": false,
                "temporal": null,
                "args": "(cids.impl.def87, <ivy.ivy_logic.Definition object at 0x7fd8f0cf6750>)",
                "explicit": false,
                "lineno": {},
                "id": 1144
            },
            {
                "definition": false,
                "assumed": false,
                "temporal": null,
                "args": "(cids.impl.def100, <ivy.ivy_logic.Definition object at 0x7fd8f0cf6c90>)",
                "explicit": false,
                "lineno": {},
                "id": 1145
            },
            {
                "definition": false,
                "assumed": false,
                "temporal": null,
                "args": "(clients.client.arr.impl.def86, <ivy.ivy_logic.Definition object at 0x7fd8f0c7e610>)",
                "explicit": false,
                "lineno": {},
                "id": 1157
            },
            {
                "definition": false,
                "assumed": false,
                "temporal": null,
                "args": "(clients.client.arr.impl.def87, <ivy.ivy_logic.Definition object at 0x7fd8f0c7ee50>)",
                "explicit": false,
                "lineno": {},
                "id": 1158
            },
            {
                "definition": false,
                "assumed": false,
                "temporal": null,
                "args": "(clients.client.arr.impl.def100, <ivy.ivy_logic.Definition object at 0x7fd8f0c81710>)",
                "explicit": false,
                "lineno": {},
                "id": 1159
            },
            {
                "definition": false,
                "assumed": false,
                "temporal": null,
                "args": "(servers.server.arr.impl.def86, <ivy.ivy_logic.Definition object at 0x7fd8f0c97f10>)",
                "explicit": false,
                "lineno": {},
                "id": 1171
            },
            {
                "definition": false,
                "assumed": false,
                "temporal": null,
                "args": "(servers.server.arr.impl.def87, <ivy.ivy_logic.Definition object at 0x7fd8f0c82f90>)",
                "explicit": false,
                "lineno": {},
                "id": 1172
            },
            {
                "definition": false,
                "assumed": false,
                "temporal": null,
                "args": "(servers.server.arr.impl.def100, <ivy.ivy_logic.Definition object at 0x7fd8f0c96810>)",
                "explicit": false,
                "lineno": {},
                "id": 1173
            },
            {
                "definition": false,
                "assumed": false,
                "temporal": null,
                "args": "(ip_endpoints.impl.def86, <ivy.ivy_logic.Definition object at 0x7fd8f0ca21d0>)",
                "explicit": false,
                "lineno": {},
                "id": 1178
            },
            {
                "definition": false,
                "assumed": false,
                "temporal": null,
                "args": "(ip_endpoints.impl.def87, <ivy.ivy_logic.Definition object at 0x7fd8f0ca2250>)",
                "explicit": false,
                "lineno": {},
                "id": 1179
            },
            {
                "definition": false,
                "assumed": false,
                "temporal": null,
                "args": "(ip_endpoints.impl.def100, <ivy.ivy_logic.Definition object at 0x7fd8f0c973d0>)",
                "explicit": false,
                "lineno": {},
                "id": 1180
            },
            {
                "definition": false,
                "assumed": false,
                "temporal": null,
                "args": "(tls_extensions.impl.def86, <ivy.ivy_logic.Definition object at 0x7fd8f0cab590>)",
                "explicit": false,
                "lineno": {},
                "id": 1192
            },
            {
                "definition": false,
                "assumed": false,
                "temporal": null,
                "args": "(tls_extensions.impl.def87, <ivy.ivy_logic.Definition object at 0x7fd8f0c89550>)",
                "explicit": false,
                "lineno": {},
                "id": 1193
            },
            {
                "definition": false,
                "assumed": false,
                "temporal": null,
                "args": "(tls_extensions.impl.def100, <ivy.ivy_logic.Definition object at 0x7fd8f0caab50>)",
                "explicit": false,
                "lineno": {},
                "id": 1194
            },
            {
                "definition": false,
                "assumed": false,
                "temporal": null,
                "args": "(tls_hand_extensions.impl.def86, <ivy.ivy_logic.Definition object at 0x7fd8f0c3eb50>)",
                "explicit": false,
                "lineno": {},
                "id": 1206
            },
            {
                "definition": false,
                "assumed": false,
                "temporal": null,
                "args": "(tls_hand_extensions.impl.def87, <ivy.ivy_logic.Definition object at 0x7fd8f0c41450>)",
                "explicit": false,
                "lineno": {},
                "id": 1207
            },
            {
                "definition": false,
                "assumed": false,
                "temporal": null,
                "args": "(tls_hand_extensions.impl.def100, <ivy.ivy_logic.Definition object at 0x7fd8f0c40b10>)",
                "explicit": false,
                "lineno": {},
                "id": 1208
            }
        ],
        "concept_spaces": [],
        "conj_subgoals": null,
        "mixins": [
            "[<ivy.ivy_ast.MixinAfterDef object at 0x7fd8f2890850>, <ivy.ivy_ast.MixinImplementDef object at 0x7fd8f28a7950>]",
            "[<ivy.ivy_ast.MixinBeforeDef object at 0x7fd8f2e10610>, <ivy.ivy_ast.MixinAfterDef object at 0x7fd8f2e51bd0>, <ivy.ivy_ast.MixinImplementDef object at 0x7fd8f2dd8710>]",
            "[<ivy.ivy_ast.MixinImplementDef object at 0x7fd8f1bdd250>]",
            "[<ivy.ivy_ast.MixinImplementDef object at 0x7fd8f2b6a750>]",
            "[<ivy.ivy_ast.MixinImplementDef object at 0x7fd8f2c18310>]",
            "[<ivy.ivy_ast.MixinImplementDef object at 0x7fd8f27058d0>]",
            "[<ivy.ivy_ast.MixinImplementDef object at 0x7fd8f24a96d0>]",
            "[<ivy.ivy_ast.MixinBeforeDef object at 0x7fd8f1dd18d0>, <ivy.ivy_ast.MixinAfterDef object at 0x7fd8f1dd1e10>, <ivy.ivy_ast.MixinImplementDef object at 0x7fd8f1de5f50>]",
            "[<ivy.ivy_ast.MixinImplementDef object at 0x7fd8f25726d0>]",
            "[<ivy.ivy_ast.MixinBeforeDef object at 0x7fd8f2e80710>, <ivy.ivy_ast.MixinAfterDef object at 0x7fd8f2e8df50>, <ivy.ivy_ast.MixinBeforeDef object at 0x7fd8f1369b90>]",
            "[<ivy.ivy_ast.MixinBeforeDef object at 0x7fd8f3271a10>, <ivy.ivy_ast.MixinAfterDef object at 0x7fd8f300ec90>, <ivy.ivy_ast.MixinImplementDef object at 0x7fd8f3090450>]",
            "[<ivy.ivy_ast.MixinImplementDef object at 0x7fd8f1711c50>]",
            "[<ivy.ivy_ast.MixinAfterDef object at 0x7fd8f3749cd0>, <ivy.ivy_ast.MixinAfterDef object at 0x7fd8f32d0710>, <ivy.ivy_ast.MixinAfterDef object at 0x7fd8f32dfd90>, <ivy.ivy_ast.MixinAfterDef object at 0x7fd8f313c290>, <ivy.ivy_ast.MixinAfterDef object at 0x7fd8f32ad610>, <ivy.ivy_ast.MixinAfterDef object at 0x7fd8f2b75250>, <ivy.ivy_ast.MixinAfterDef object at 0x7fd8f2a21150>, <ivy.ivy_ast.MixinAfterDef object at 0x7fd8f28901d0>, <ivy.ivy_ast.MixinAfterDef object at 0x7fd8f2711c90>, <ivy.ivy_ast.MixinAfterDef object at 0x7fd8f2607b50>, <ivy.ivy_ast.MixinAfterDef object at 0x7fd8f2291650>, <ivy.ivy_ast.MixinAfterDef object at 0x7fd8f21a3350>, <ivy.ivy_ast.MixinAfterDef object at 0x7fd8f2029f90>, <ivy.ivy_ast.MixinAfterDef object at 0x7fd8f1c22210>, <ivy.ivy_ast.MixinAfterDef object at 0x7fd8f1b5a210>, <ivy.ivy_ast.MixinAfterDef object at 0x7fd8f1b5acd0>, <ivy.ivy_ast.MixinAfterDef object at 0x7fd8f1a8d310>, <ivy.ivy_ast.MixinAfterDef object at 0x7fd8f1b71f10>, <ivy.ivy_ast.MixinAfterDef object at 0x7fd8f1b5c790>, <ivy.ivy_ast.MixinAfterDef object at 0x7fd8f1b17850>, <ivy.ivy_ast.MixinAfterDef object at 0x7fd8f1c8eb50>, <ivy.ivy_ast.MixinAfterDef object at 0x7fd8f1b0afd0>, <ivy.ivy_ast.MixinAfterDef object at 0x7fd8f1c4a190>, <ivy.ivy_ast.MixinAfterDef object at 0x7fd8f1a31bd0>, <ivy.ivy_ast.MixinAfterDef object at 0x7fd8f1a7a990>, <ivy.ivy_ast.MixinAfterDef object at 0x7fd8f1adc6d0>, <ivy.ivy_ast.MixinAfterDef object at 0x7fd8f1c52310>, <ivy.ivy_ast.MixinAfterDef object at 0x7fd8f1ca8290>, <ivy.ivy_ast.MixinAfterDef object at 0x7fd8f1720fd0>, <ivy.ivy_ast.MixinAfterDef object at 0x7fd8f16b8f50>, <ivy.ivy_ast.MixinAfterDef object at 0x7fd8f169ff50>, <ivy.ivy_ast.MixinAfterDef object at 0x7fd8f165d790>, <ivy.ivy_ast.MixinAfterDef object at 0x7fd8f1610a10>, <ivy.ivy_ast.MixinAfterDef object at 0x7fd8f14ab110>, <ivy.ivy_ast.MixinAfterDef object at 0x7fd8f13d0210>, <ivy.ivy_ast.MixinAfterDef object at 0x7fd8f1342510>, <ivy.ivy_ast.MixinAfterDef object at 0x7fd8f135a910>, <ivy.ivy_ast.MixinAfterDef object at 0x7fd8f135ad50>, <ivy.ivy_ast.MixinAfterDef object at 0x7fd8f1316d90>, <ivy.ivy_ast.MixinAfterDef object at 0x7fd8f12e2ad0>]",
            "[<ivy.ivy_ast.MixinBeforeDef object at 0x7fd8f2263cd0>, <ivy.ivy_ast.MixinAfterDef object at 0x7fd8f22cbbd0>]",
            "[<ivy.ivy_ast.MixinImplementDef object at 0x7fd8f31bab50>]",
            "[<ivy.ivy_ast.MixinBeforeDef object at 0x7fd8f29b6350>, <ivy.ivy_ast.MixinAfterDef object at 0x7fd8f29b6090>, <ivy.ivy_ast.MixinImplementDef object at 0x7fd8f2822510>]",
            "[<ivy.ivy_ast.MixinImplementDef object at 0x7fd8f1dfcc10>]",
            "[<ivy.ivy_ast.MixinBeforeDef object at 0x7fd8f295df10>, <ivy.ivy_ast.MixinAfterDef object at 0x7fd8f28be490>, <ivy.ivy_ast.MixinImplementDef object at 0x7fd8f28d5390>]",
            "[<ivy.ivy_ast.MixinAfterDef object at 0x7fd8f2a7f410>, <ivy.ivy_ast.MixinImplementDef object at 0x7fd8f2a8cb10>]",
            "[<ivy.ivy_ast.MixinBeforeDef object at 0x7fd8f240f510>, <ivy.ivy_ast.MixinAfterDef object at 0x7fd8f2423750>, <ivy.ivy_ast.MixinImplementDef object at 0x7fd8f2428150>]",
            "[<ivy.ivy_ast.MixinBeforeDef object at 0x7fd8f24e5d10>, <ivy.ivy_ast.MixinAfterDef object at 0x7fd8f2418d90>, <ivy.ivy_ast.MixinImplementDef object at 0x7fd8f23d7fd0>]",
            "[<ivy.ivy_ast.MixinImplementDef object at 0x7fd8f1202650>]",
            "[<ivy.ivy_ast.MixinBeforeDef object at 0x7fd8f2fd3210>, <ivy.ivy_ast.MixinAfterDef object at 0x7fd8f32ab450>, <ivy.ivy_ast.MixinBeforeDef object at 0x7fd8f13690d0>]",
            "[<ivy.ivy_ast.MixinBeforeDef object at 0x7fd8f1c220d0>]",
            "[<ivy.ivy_ast.MixinImplementDef object at 0x7fd8f1bec4d0>]",
            "[<ivy.ivy_ast.MixinAfterDef object at 0x7fd8f340b3d0>, <ivy.ivy_ast.MixinImplementDef object at 0x7fd8f33b1750>]",
            "[<ivy.ivy_ast.MixinAfterDef object at 0x7fd8f210c210>, <ivy.ivy_ast.MixinImplementDef object at 0x7fd8f217aa10>]",
            "[<ivy.ivy_ast.MixinImplementDef object at 0x7fd8f142b390>]",
            "[<ivy.ivy_ast.MixinBeforeDef object at 0x7fd8f32d2d10>, <ivy.ivy_ast.MixinAfterDef object at 0x7fd8f344e310>]",
            "[<ivy.ivy_ast.MixinBeforeDef object at 0x7fd8f26b2e10>, <ivy.ivy_ast.MixinAfterDef object at 0x7fd8f26ad490>, <ivy.ivy_ast.MixinImplementDef object at 0x7fd8f2656210>]",
            "[<ivy.ivy_ast.MixinImplementDef object at 0x7fd8f1be09d0>]",
            "[<ivy.ivy_ast.MixinAfterDef object at 0x7fd8f214e490>, <ivy.ivy_ast.MixinImplementDef object at 0x7fd8f20fd4d0>]",
            "[<ivy.ivy_ast.MixinBeforeDef object at 0x7fd8f1284210>, <ivy.ivy_ast.MixinAfterDef object at 0x7fd8f12ca990>, <ivy.ivy_ast.MixinImplementDef object at 0x7fd8f12b0910>]",
            "[<ivy.ivy_ast.MixinImplementDef object at 0x7fd8f294b450>]",
            "[<ivy.ivy_ast.MixinAfterDef object at 0x7fd8f22c6dd0>, <ivy.ivy_ast.MixinImplementDef object at 0x7fd8f227b950>]",
            "[<ivy.ivy_ast.MixinAfterDef object at 0x7fd8f28c6a90>, <ivy.ivy_ast.MixinImplementDef object at 0x7fd8f28b9c90>]",
            "[<ivy.ivy_ast.MixinBeforeDef object at 0x7fd8f31c0b50>, <ivy.ivy_ast.MixinAfterDef object at 0x7fd8f3215350>, <ivy.ivy_ast.MixinBeforeDef object at 0x7fd8f136d950>]",
            "[<ivy.ivy_ast.MixinBeforeDef object at 0x7fd8f2dd8a90>, <ivy.ivy_ast.MixinAfterDef object at 0x7fd8f2dd6110>, <ivy.ivy_ast.MixinImplementDef object at 0x7fd8f2dec310>]",
            "[<ivy.ivy_ast.MixinAfterDef object at 0x7fd8f26fb350>, <ivy.ivy_ast.MixinImplementDef object at 0x7fd8f271f1d0>]",
            "[<ivy.ivy_ast.MixinBeforeDef object at 0x7fd8f2506f90>, <ivy.ivy_ast.MixinAfterDef object at 0x7fd8f24fd4d0>, <ivy.ivy_ast.MixinImplementDef object at 0x7fd8f2525550>]",
            "[<ivy.ivy_ast.MixinImplementDef object at 0x7fd8f1c8e590>]",
            "[<ivy.ivy_ast.MixinImplementDef object at 0x7fd8f230c490>]",
            "[<ivy.ivy_ast.MixinImplementDef object at 0x7fd8f12a3410>]",
            "[<ivy.ivy_ast.MixinBeforeDef object at 0x7fd8f30dac50>, <ivy.ivy_ast.MixinAfterDef object at 0x7fd8f307bad0>, <ivy.ivy_ast.MixinBeforeDef object at 0x7fd8f131b5d0>]",
            "[<ivy.ivy_ast.MixinAfterDef object at 0x7fd8f13bbd10>, <ivy.ivy_ast.MixinImplementDef object at 0x7fd8f13c6990>]",
            "[<ivy.ivy_ast.MixinAfterDef object at 0x7fd8f1645c10>, <ivy.ivy_ast.MixinImplementDef object at 0x7fd8f1604d90>]",
            "[<ivy.ivy_ast.MixinAfterDef object at 0x7fd8f2d17790>, <ivy.ivy_ast.MixinImplementDef object at 0x7fd8f2c7bed0>]",
            "[<ivy.ivy_ast.MixinBeforeDef object at 0x7fd8f142b650>, <ivy.ivy_ast.MixinAfterDef object at 0x7fd8f142d0d0>, <ivy.ivy_ast.MixinImplementDef object at 0x7fd8f13d0490>]",
            "[<ivy.ivy_ast.MixinAfterDef object at 0x7fd8f1410990>, <ivy.ivy_ast.MixinImplementDef object at 0x7fd8f1398510>]",
            "[<ivy.ivy_ast.MixinAfterDef object at 0x7fd8f2f6de90>, <ivy.ivy_ast.MixinImplementDef object at 0x7fd8f2f6bcd0>]",
            "[<ivy.ivy_ast.MixinAfterDef object at 0x7fd8f2f55410>, <ivy.ivy_ast.MixinImplementDef object at 0x7fd8f2f04fd0>]",
            "[<ivy.ivy_ast.MixinAfterDef object at 0x7fd8f2d9e190>, <ivy.ivy_ast.MixinImplementDef object at 0x7fd8f2db5e10>]",
            "[<ivy.ivy_ast.MixinAfterDef object at 0x7fd8f15cb690>]",
            "[<ivy.ivy_ast.MixinBeforeDef object at 0x7fd8f205f150>, <ivy.ivy_ast.MixinAfterDef object at 0x7fd8f205fcd0>, <ivy.ivy_ast.MixinImplementDef object at 0x7fd8f2078090>]",
            "[<ivy.ivy_ast.MixinBeforeDef object at 0x7fd8f126cb50>, <ivy.ivy_ast.MixinAfterDef object at 0x7fd8f1269610>, <ivy.ivy_ast.MixinImplementDef object at 0x7fd8f1273410>]",
            "[<ivy.ivy_ast.MixinBeforeDef object at 0x7fd8f12bdf10>, <ivy.ivy_ast.MixinAfterDef object at 0x7fd8f12da250>, <ivy.ivy_ast.MixinImplementDef object at 0x7fd8f12f62d0>]",
            "[<ivy.ivy_ast.MixinAfterDef object at 0x7fd8f23cb850>, <ivy.ivy_ast.MixinImplementDef object at 0x7fd8f23e3590>]",
            "[<ivy.ivy_ast.MixinImplementDef object at 0x7fd8f2662710>]",
            "[<ivy.ivy_ast.MixinImplementDef object at 0x7fd8f2533510>]",
            "[<ivy.ivy_ast.MixinBeforeDef object at 0x7fd8f332c290>, <ivy.ivy_ast.MixinAfterDef object at 0x7fd8f3338250>, <ivy.ivy_ast.MixinImplementDef object at 0x7fd8f32d2f90>]",
            "[<ivy.ivy_ast.MixinBeforeDef object at 0x7fd8f210c7d0>, <ivy.ivy_ast.MixinAfterDef object at 0x7fd8f2143a10>, <ivy.ivy_ast.MixinImplementDef object at 0x7fd8f2107ad0>]",
            "[<ivy.ivy_ast.MixinBeforeDef object at 0x7fd8f16db0d0>, <ivy.ivy_ast.MixinAfterDef object at 0x7fd8f176c8d0>, <ivy.ivy_ast.MixinImplementDef object at 0x7fd8f1695190>]",
            "[<ivy.ivy_ast.MixinBeforeDef object at 0x7fd8f118d710>, <ivy.ivy_ast.MixinAfterDef object at 0x7fd8f11a8910>, <ivy.ivy_ast.MixinImplementDef object at 0x7fd8f1149bd0>]",
            "[<ivy.ivy_ast.MixinImplementDef object at 0x7fd8f123c650>]",
            "[<ivy.ivy_ast.MixinAfterDef object at 0x7fd8f1473d90>, <ivy.ivy_ast.MixinImplementDef object at 0x7fd8f141eed0>]",
            "[<ivy.ivy_ast.MixinBeforeDef object at 0x7fd8f207de50>, <ivy.ivy_ast.MixinAfterDef object at 0x7fd8f2047310>, <ivy.ivy_ast.MixinImplementDef object at 0x7fd8f20b2310>]",
            "[<ivy.ivy_ast.MixinAfterDef object at 0x7fd8f3180850>, <ivy.ivy_ast.MixinImplementDef object at 0x7fd8f319aad0>]",
            "[<ivy.ivy_ast.MixinBeforeDef object at 0x7fd8f134e410>, <ivy.ivy_ast.MixinImplementDef object at 0x7fd8f1351b10>]",
            "[<ivy.ivy_ast.MixinImplementDef object at 0x7fd8f2529790>]",
            "[<ivy.ivy_ast.MixinBeforeDef object at 0x7fd8f2feb450>, <ivy.ivy_ast.MixinAfterDef object at 0x7fd8f30da0d0>]",
            "[<ivy.ivy_ast.MixinAfterDef object at 0x7fd8f21a3f10>, <ivy.ivy_ast.MixinImplementDef object at 0x7fd8f2143490>]",
            "[<ivy.ivy_ast.MixinAfterDef object at 0x7fd8f16e5bd0>, <ivy.ivy_ast.MixinImplementDef object at 0x7fd8f169f950>]",
            "[<ivy.ivy_ast.MixinImplementDef object at 0x7fd8f262a5d0>]",
            "[<ivy.ivy_ast.MixinAfterDef object at 0x7fd8f2adc490>, <ivy.ivy_ast.MixinImplementDef object at 0x7fd8f2ab9310>]",
            "[<ivy.ivy_ast.MixinAfterDef object at 0x7fd8f1279a50>, <ivy.ivy_ast.MixinImplementDef object at 0x7fd8f1217d10>]",
            "[<ivy.ivy_ast.MixinAfterDef object at 0x7fd8f2e8b7d0>, <ivy.ivy_ast.MixinImplementDef object at 0x7fd8f3116c50>]",
            "[<ivy.ivy_ast.MixinAfterDef object at 0x7fd8f2683390>, <ivy.ivy_ast.MixinImplementDef object at 0x7fd8f2681b90>]",
            "[<ivy.ivy_ast.MixinBeforeDef object at 0x7fd8f2235ed0>, <ivy.ivy_ast.MixinAfterDef object at 0x7fd8f2255750>, <ivy.ivy_ast.MixinImplementDef object at 0x7fd8f21c0510>]",
            "[<ivy.ivy_ast.MixinAfterDef object at 0x7fd8f2011310>, <ivy.ivy_ast.MixinImplementDef object at 0x7fd8f1fcc950>]",
            "[<ivy.ivy_ast.MixinBeforeDef object at 0x7fd8f165da50>, <ivy.ivy_ast.MixinAfterDef object at 0x7fd8f165dd90>, <ivy.ivy_ast.MixinImplementDef object at 0x7fd8f1677610>]",
            "[<ivy.ivy_ast.MixinBeforeDef object at 0x7fd8f2790cd0>, <ivy.ivy_ast.MixinAfterDef object at 0x7fd8f27bd150>, <ivy.ivy_ast.MixinImplementDef object at 0x7fd8f279b590>]",
            "[<ivy.ivy_ast.MixinImplementDef object at 0x7fd8f1502ad0>]",
            "[<ivy.ivy_ast.MixinAfterDef object at 0x7fd8f24a75d0>, <ivy.ivy_ast.MixinImplementDef object at 0x7fd8f299c790>]",
            "[<ivy.ivy_ast.MixinImplementDef object at 0x7fd8f116e250>]",
            "[<ivy.ivy_ast.MixinAfterDef object at 0x7fd8f28fcf90>, <ivy.ivy_ast.MixinImplementDef object at 0x7fd8f29b3550>]",
            "[<ivy.ivy_ast.MixinAfterDef object at 0x7fd8f31ebe10>, <ivy.ivy_ast.MixinImplementDef object at 0x7fd8f31f3810>]",
            "[<ivy.ivy_ast.MixinAfterDef object at 0x7fd8f13ff690>, <ivy.ivy_ast.MixinImplementDef object at 0x7fd8f14141d0>]",
            "[<ivy.ivy_ast.MixinImplementDef object at 0x7fd8f2d73450>]",
            "[<ivy.ivy_ast.MixinImplementDef object at 0x7fd8f2a96e10>]",
            "[<ivy.ivy_ast.MixinImplementDef object at 0x7fd8f2a13450>]",
            "[<ivy.ivy_ast.MixinAfterDef object at 0x7fd8f2c9eb10>, <ivy.ivy_ast.MixinImplementDef object at 0x7fd8f2ca1250>]",
            "[<ivy.ivy_ast.MixinBeforeDef object at 0x7fd8f21c3cd0>, <ivy.ivy_ast.MixinAfterDef object at 0x7fd8f294eb50>, <ivy.ivy_ast.MixinImplementDef object at 0x7fd8f222a810>]",
            "[<ivy.ivy_ast.MixinAfterDef object at 0x7fd8f31802d0>, <ivy.ivy_ast.MixinImplementDef object at 0x7fd8f31a6f50>]",
            "[<ivy.ivy_ast.MixinAfterDef object at 0x7fd8f230cfd0>, <ivy.ivy_ast.MixinImplementDef object at 0x7fd8f2331490>]",
            "[<ivy.ivy_ast.MixinImplementDef object at 0x7fd8f25651d0>]",
            "[<ivy.ivy_ast.MixinImplementDef object at 0x7fd8f2fa4190>]",
            "[<ivy.ivy_ast.MixinAfterDef object at 0x7fd8f2ad0c90>, <ivy.ivy_ast.MixinImplementDef object at 0x7fd8f2a8cb90>]",
            "[<ivy.ivy_ast.MixinImplementDef object at 0x7fd8f2dabc10>]",
            "[<ivy.ivy_ast.MixinImplementDef object at 0x7fd8f153bf50>]",
            "[<ivy.ivy_ast.MixinImplementDef object at 0x7fd8f2760e10>]",
            "[<ivy.ivy_ast.MixinBeforeDef object at 0x7fd8f2b46e50>, <ivy.ivy_ast.MixinAfterDef object at 0x7fd8f2baa2d0>, <ivy.ivy_ast.MixinImplementDef object at 0x7fd8f2b55e90>]",
            "[<ivy.ivy_ast.MixinImplementDef object at 0x7fd8f28f7550>]",
            "[<ivy.ivy_ast.MixinAfterDef object at 0x7fd8f13f8190>, <ivy.ivy_ast.MixinImplementDef object at 0x7fd8f138f990>]",
            "[<ivy.ivy_ast.MixinBeforeDef object at 0x7fd8f2a55b50>, <ivy.ivy_ast.MixinAfterDef object at 0x7fd8f2a53ad0>, <ivy.ivy_ast.MixinImplementDef object at 0x7fd8f2a63d90>]",
            "[<ivy.ivy_ast.MixinBeforeDef object at 0x7fd8f2385490>, <ivy.ivy_ast.MixinAfterDef object at 0x7fd8f2377b50>, <ivy.ivy_ast.MixinImplementDef object at 0x7fd8f23311d0>]",
            "[<ivy.ivy_ast.MixinBeforeDef object at 0x7fd8f1825ed0>, <ivy.ivy_ast.MixinAfterDef object at 0x7fd8f1756c50>, <ivy.ivy_ast.MixinImplementDef object at 0x7fd8f1777990>]",
            "[<ivy.ivy_ast.MixinBeforeDef object at 0x7fd8f146e610>, <ivy.ivy_ast.MixinAfterDef object at 0x7fd8f14598d0>, <ivy.ivy_ast.MixinImplementDef object at 0x7fd8f1414b90>]",
            "[<ivy.ivy_ast.MixinAfterDef object at 0x7fd8f334a610>, <ivy.ivy_ast.MixinImplementDef object at 0x7fd8f3351b90>]",
            "[<ivy.ivy_ast.MixinImplementDef object at 0x7fd8f1bf9190>]",
            "[<ivy.ivy_ast.MixinAfterDef object at 0x7fd8f1c6fa90>, <ivy.ivy_ast.MixinImplementDef object at 0x7fd8f19d0410>]",
            "[<ivy.ivy_ast.MixinAfterDef object at 0x7fd8f26b2810>, <ivy.ivy_ast.MixinImplementDef object at 0x7fd8f2642fd0>]",
            "[<ivy.ivy_ast.MixinImplementDef object at 0x7fd8f32e9dd0>]",
            "[<ivy.ivy_ast.MixinImplementDef object at 0x7fd8f160ecd0>]",
            "[<ivy.ivy_ast.MixinAfterDef object at 0x7fd8f23c0dd0>, <ivy.ivy_ast.MixinImplementDef object at 0x7fd8f2485090>]",
            "[<ivy.ivy_ast.MixinBeforeDef object at 0x7fd8f2ac3310>, <ivy.ivy_ast.MixinAfterDef object at 0x7fd8f2b9e250>, <ivy.ivy_ast.MixinImplementDef object at 0x7fd8f2acc190>]",
            "[<ivy.ivy_ast.MixinBeforeDef object at 0x7fd8f2f70b10>, <ivy.ivy_ast.MixinAfterDef object at 0x7fd8f2f48a50>, <ivy.ivy_ast.MixinImplementDef object at 0x7fd8f2f1a890>]",
            "[<ivy.ivy_ast.MixinBeforeDef object at 0x7fd8f12b0750>, <ivy.ivy_ast.MixinAfterDef object at 0x7fd8f1273850>, <ivy.ivy_ast.MixinImplementDef object at 0x7fd8f1279750>]",
            "[<ivy.ivy_ast.MixinAfterDef object at 0x7fd8f2c42990>, <ivy.ivy_ast.MixinImplementDef object at 0x7fd8f2cad410>]",
            "[<ivy.ivy_ast.MixinImplementDef object at 0x7fd8f1be0b90>]",
            "[<ivy.ivy_ast.MixinImplementDef object at 0x7fd8f1e81590>]",
            "[<ivy.ivy_ast.MixinBeforeDef object at 0x7fd8f16cb310>, <ivy.ivy_ast.MixinAfterDef object at 0x7fd8f16cbb50>, <ivy.ivy_ast.MixinImplementDef object at 0x7fd8f16bf910>]",
            "[<ivy.ivy_ast.MixinImplementDef object at 0x7fd8f128dd10>]",
            "[<ivy.ivy_ast.MixinBeforeDef object at 0x7fd8f2a5ff90>, <ivy.ivy_ast.MixinAfterDef object at 0x7fd8f2a57a50>, <ivy.ivy_ast.MixinImplementDef object at 0x7fd8f2a06e10>]",
            "[<ivy.ivy_ast.MixinBeforeDef object at 0x7fd8f2968fd0>, <ivy.ivy_ast.MixinAfterDef object at 0x7fd8f2449d90>, <ivy.ivy_ast.MixinImplementDef object at 0x7fd8f26f8110>]",
            "[<ivy.ivy_ast.MixinAfterDef object at 0x7fd8f1131e10>, <ivy.ivy_ast.MixinImplementDef object at 0x7fd8f10bfad0>]",
            "[<ivy.ivy_ast.MixinImplementDef object at 0x7fd8f3371f10>]",
            "[<ivy.ivy_ast.MixinImplementDef object at 0x7fd8f261f790>]",
            "[<ivy.ivy_ast.MixinAfterDef object at 0x7fd8f1fbf250>, <ivy.ivy_ast.MixinImplementDef object at 0x7fd8f1fcc510>]",
            "[<ivy.ivy_ast.MixinBeforeDef object at 0x7fd8f2659a90>, <ivy.ivy_ast.MixinAfterDef object at 0x7fd8f2670310>, <ivy.ivy_ast.MixinImplementDef object at 0x7fd8f264de50>]",
            "[<ivy.ivy_ast.MixinAfterDef object at 0x7fd8f29a91d0>, <ivy.ivy_ast.MixinImplementDef object at 0x7fd8f29bc510>]",
            "[<ivy.ivy_ast.MixinAfterDef object at 0x7fd8f25fdd90>, <ivy.ivy_ast.MixinImplementDef object at 0x7fd8f262ae10>]",
            "[<ivy.ivy_ast.MixinImplementDef object at 0x7fd8f1181f10>]",
            "[<ivy.ivy_ast.MixinImplementDef object at 0x7fd8f307b8d0>]",
            "[<ivy.ivy_ast.MixinBeforeDef object at 0x7fd8f25df290>, <ivy.ivy_ast.MixinAfterDef object at 0x7fd8f25d9550>, <ivy.ivy_ast.MixinAfterDef object at 0x7fd8f14abb50>]",
            "[<ivy.ivy_ast.MixinBeforeDef object at 0x7fd8f111bbd0>, <ivy.ivy_ast.MixinAfterDef object at 0x7fd8f1125990>, <ivy.ivy_ast.MixinImplementDef object at 0x7fd8f1131510>]",
            "[<ivy.ivy_ast.MixinAfterDef object at 0x7fd8f2cb50d0>, <ivy.ivy_ast.MixinImplementDef object at 0x7fd8f2c44610>]",
            "[<ivy.ivy_ast.MixinImplementDef object at 0x7fd8f26a85d0>]",
            "[<ivy.ivy_ast.MixinAfterDef object at 0x7fd8f28fca10>, <ivy.ivy_ast.MixinImplementDef object at 0x7fd8f298f050>]",
            "[<ivy.ivy_ast.MixinAfterDef object at 0x7fd8f2d65790>, <ivy.ivy_ast.MixinImplementDef object at 0x7fd8f2d71590>]",
            "[<ivy.ivy_ast.MixinImplementDef object at 0x7fd8f170ecd0>]",
            "[<ivy.ivy_ast.MixinAfterDef object at 0x7fd8f16e5f90>, <ivy.ivy_ast.MixinImplementDef object at 0x7fd8f1695f90>]",
            "[<ivy.ivy_ast.MixinBeforeDef object at 0x7fd8f2404850>, <ivy.ivy_ast.MixinAfterDef object at 0x7fd8f23754d0>, <ivy.ivy_ast.MixinImplementDef object at 0x7fd8f2304e90>]",
            "[<ivy.ivy_ast.MixinAfterDef object at 0x7fd8f331d810>, <ivy.ivy_ast.MixinImplementDef object at 0x7fd8f3351a50>]",
            "[<ivy.ivy_ast.MixinBeforeDef object at 0x7fd8f20297d0>, <ivy.ivy_ast.MixinAfterDef object at 0x7fd8f20a4f10>, <ivy.ivy_ast.MixinImplementDef object at 0x7fd8f2031250>]",
            "[<ivy.ivy_ast.MixinBeforeDef object at 0x7fd8f2b2ab50>, <ivy.ivy_ast.MixinAfterDef object at 0x7fd8f2adc050>, <ivy.ivy_ast.MixinImplementDef object at 0x7fd8f2a8a850>]",
            "[<ivy.ivy_ast.MixinImplementDef object at 0x7fd8f25fdcd0>]",
            "[<ivy.ivy_ast.MixinBeforeDef object at 0x7fd8f21ac490>, <ivy.ivy_ast.MixinAfterDef object at 0x7fd8f21acf10>, <ivy.ivy_ast.MixinImplementDef object at 0x7fd8f21b7a90>]",
            "[<ivy.ivy_ast.MixinBeforeDef object at 0x7fd8f21d1250>, <ivy.ivy_ast.MixinAfterDef object at 0x7fd8f21db350>, <ivy.ivy_ast.MixinImplementDef object at 0x7fd8f225a9d0>]",
            "[<ivy.ivy_ast.MixinImplementDef object at 0x7fd8f1be0fd0>]",
            "[<ivy.ivy_ast.MixinAfterDef object at 0x7fd8f28a4cd0>, <ivy.ivy_ast.MixinImplementDef object at 0x7fd8f28a4550>]",
            "[<ivy.ivy_ast.MixinAfterDef object at 0x7fd8f2d86850>, <ivy.ivy_ast.MixinImplementDef object at 0x7fd8f2d01f10>]",
            "[<ivy.ivy_ast.MixinImplementDef object at 0x7fd8f2d9a750>]",
            "[<ivy.ivy_ast.MixinBeforeDef object at 0x7fd8f27abe50>, <ivy.ivy_ast.MixinAfterDef object at 0x7fd8f279bad0>, <ivy.ivy_ast.MixinImplementDef object at 0x7fd8f27559d0>]",
            "[<ivy.ivy_ast.MixinAfterDef object at 0x7fd8f1204290>, <ivy.ivy_ast.MixinImplementDef object at 0x7fd8f1231510>]",
            "[<ivy.ivy_ast.MixinAfterDef object at 0x7fd8f2542210>, <ivy.ivy_ast.MixinImplementDef object at 0x7fd8f2558150>]",
            "[<ivy.ivy_ast.MixinImplementDef object at 0x7fd8f1091710>]",
            "[<ivy.ivy_ast.MixinAfterDef object at 0x7fd8f2047f50>, <ivy.ivy_ast.MixinImplementDef object at 0x7fd8f2031110>]",
            "[<ivy.ivy_ast.MixinAfterDef object at 0x7fd8f2a6cd90>, <ivy.ivy_ast.MixinImplementDef object at 0x7fd8f2a6cd10>]",
            "[<ivy.ivy_ast.MixinBeforeDef object at 0x7fd8f2317f10>, <ivy.ivy_ast.MixinAfterDef object at 0x7fd8f22d7d10>, <ivy.ivy_ast.MixinImplementDef object at 0x7fd8f22cbb90>]",
            "[<ivy.ivy_ast.MixinImplementDef object at 0x7fd8f2d0b710>]",
            "[<ivy.ivy_ast.MixinAfterDef object at 0x7fd8f206cc10>, <ivy.ivy_ast.MixinImplementDef object at 0x7fd8f2076590>]",
            "[<ivy.ivy_ast.MixinImplementDef object at 0x7fd8f1bf5ed0>]",
            "[<ivy.ivy_ast.MixinBeforeDef object at 0x7fd8f1bc8350>, <ivy.ivy_ast.MixinImplementDef object at 0x7fd8f1be9c10>]",
            "[<ivy.ivy_ast.MixinAfterDef object at 0x7fd8f318f050>, <ivy.ivy_ast.MixinImplementDef object at 0x7fd8f3180f50>]",
            "[<ivy.ivy_ast.MixinImplementDef object at 0x7fd8f2325210>]",
            "[<ivy.ivy_ast.MixinBeforeDef object at 0x7fd8f33ce4d0>, <ivy.ivy_ast.MixinAfterDef object at 0x7fd8f340bbd0>, <ivy.ivy_ast.MixinImplementDef object at 0x7fd8f3351650>]",
            "[<ivy.ivy_ast.MixinBeforeDef object at 0x7fd8f2f57690>, <ivy.ivy_ast.MixinAfterDef object at 0x7fd8f2f79d10>, <ivy.ivy_ast.MixinImplementDef object at 0x7fd8f2f103d0>]",
            "[<ivy.ivy_ast.MixinAfterDef object at 0x7fd8f1316d50>, <ivy.ivy_ast.MixinImplementDef object at 0x7fd8f133ab90>]",
            "[<ivy.ivy_ast.MixinBeforeDef object at 0x7fd8f25d7b50>, <ivy.ivy_ast.MixinAfterDef object at 0x7fd8f25e1fd0>, <ivy.ivy_ast.MixinImplementDef object at 0x7fd8f259c8d0>]",
            "[<ivy.ivy_ast.MixinImplementDef object at 0x7fd8f29c0d90>]",
            "[<ivy.ivy_ast.MixinBeforeDef object at 0x7fd8f1bcfb90>]",
            "[<ivy.ivy_ast.MixinBeforeDef object at 0x7fd8f22b9f90>, <ivy.ivy_ast.MixinAfterDef object at 0x7fd8f2267e50>]",
            "[<ivy.ivy_ast.MixinAfterDef object at 0x7fd8f1dcee50>, <ivy.ivy_ast.MixinImplementDef object at 0x7fd8f1d7cd50>]",
            "[<ivy.ivy_ast.MixinBeforeDef object at 0x7fd8f2418550>, <ivy.ivy_ast.MixinAfterDef object at 0x7fd8f249bb50>, <ivy.ivy_ast.MixinImplementDef object at 0x7fd8f24285d0>]",
            "[<ivy.ivy_ast.MixinAfterDef object at 0x7fd8f27a9d10>, <ivy.ivy_ast.MixinImplementDef object at 0x7fd8f273ded0>]",
            "[<ivy.ivy_ast.MixinBeforeDef object at 0x7fd8f1125190>, <ivy.ivy_ast.MixinAfterDef object at 0x7fd8f111b790>, <ivy.ivy_ast.MixinImplementDef object at 0x7fd8f10c8350>]",
            "[<ivy.ivy_ast.MixinImplementDef object at 0x7fd8f1bbc390>]",
            "[<ivy.ivy_ast.MixinBeforeDef object at 0x7fd8f3070350>, <ivy.ivy_ast.MixinAfterDef object at 0x7fd8f2f87c50>, <ivy.ivy_ast.MixinImplementDef object at 0x7fd8f2f9a9d0>]",
            "[<ivy.ivy_ast.MixinAfterDef object at 0x7fd8f16457d0>, <ivy.ivy_ast.MixinImplementDef object at 0x7fd8f1601f50>]",
            "[<ivy.ivy_ast.MixinAfterDef object at 0x7fd8f12971d0>, <ivy.ivy_ast.MixinImplementDef object at 0x7fd8f12dd990>]",
            "[<ivy.ivy_ast.MixinAfterDef object at 0x7fd8f2c9e810>, <ivy.ivy_ast.MixinImplementDef object at 0x7fd8f2c635d0>]",
            "[<ivy.ivy_ast.MixinBeforeDef object at 0x7fd8f21d1f50>, <ivy.ivy_ast.MixinAfterDef object at 0x7fd8f222ac90>, <ivy.ivy_ast.MixinImplementDef object at 0x7fd8f21f3890>]",
            "[<ivy.ivy_ast.MixinImplementDef object at 0x7fd8f2acc8d0>]",
            "[<ivy.ivy_ast.MixinBeforeDef object at 0x7fd8f1473e50>, <ivy.ivy_ast.MixinAfterDef object at 0x7fd8f13fcf50>, <ivy.ivy_ast.MixinImplementDef object at 0x7fd8f141ec90>]",
            "[<ivy.ivy_ast.MixinImplementDef object at 0x7fd8f28f7850>]",
            "[<ivy.ivy_ast.MixinBeforeDef object at 0x7fd8f28c6950>, <ivy.ivy_ast.MixinAfterDef object at 0x7fd8f28be3d0>, <ivy.ivy_ast.MixinImplementDef object at 0x7fd8f28ea450>]",
            "[<ivy.ivy_ast.MixinBeforeDef object at 0x7fd8f10bfbd0>, <ivy.ivy_ast.MixinAfterDef object at 0x7fd8f108d6d0>, <ivy.ivy_ast.MixinImplementDef object at 0x7fd8f10e9890>]",
            "[<ivy.ivy_ast.MixinImplementDef object at 0x7fd8f13821d0>]",
            "[<ivy.ivy_ast.MixinBeforeDef object at 0x7fd8f2898250>, <ivy.ivy_ast.MixinAfterDef object at 0x7fd8f2950ed0>, <ivy.ivy_ast.MixinImplementDef object at 0x7fd8f28b9d90>]",
            "[<ivy.ivy_ast.MixinImplementDef object at 0x7fd8f147be10>]",
            "[<ivy.ivy_ast.MixinAfterDef object at 0x7fd8f30f0850>, <ivy.ivy_ast.MixinImplementDef object at 0x7fd8f2fb2a10>]",
            "[<ivy.ivy_ast.MixinBeforeDef object at 0x7fd8f2c9e250>, <ivy.ivy_ast.MixinAfterDef object at 0x7fd8f2c7b390>, <ivy.ivy_ast.MixinImplementDef object at 0x7fd8f2caa0d0>]",
            "[<ivy.ivy_ast.MixinAfterDef object at 0x7fd8f2a53950>, <ivy.ivy_ast.MixinImplementDef object at 0x7fd8f2a704d0>]",
            "[<ivy.ivy_ast.MixinImplementDef object at 0x7fd8f1d1fbd0>]",
            "[<ivy.ivy_ast.MixinBeforeDef object at 0x7fd8f2ff42d0>, <ivy.ivy_ast.MixinAfterDef object at 0x7fd8f3167890>]",
            "[<ivy.ivy_ast.MixinBeforeDef object at 0x7fd8f224d690>, <ivy.ivy_ast.MixinAfterDef object at 0x7fd8f225a550>]",
            "[<ivy.ivy_ast.MixinImplementDef object at 0x7fd8f22e3ad0>]",
            "[<ivy.ivy_ast.MixinImplementDef object at 0x7fd8f1bec990>]",
            "[<ivy.ivy_ast.MixinImplementDef object at 0x7fd8f1da9f10>]",
            "[<ivy.ivy_ast.MixinImplementDef object at 0x7fd8f326c790>]",
            "[<ivy.ivy_ast.MixinBeforeDef object at 0x7fd8f13b3290>, <ivy.ivy_ast.MixinImplementDef object at 0x7fd8f13b3790>]",
            "[<ivy.ivy_ast.MixinBeforeDef object at 0x7fd8f2f6bad0>, <ivy.ivy_ast.MixinAfterDef object at 0x7fd8f2f3d290>, <ivy.ivy_ast.MixinImplementDef object at 0x7fd8f2f3db50>]",
            "[<ivy.ivy_ast.MixinImplementDef object at 0x7fd8f25b2850>]",
            "[<ivy.ivy_ast.MixinBeforeDef object at 0x7fd8f2d5af10>, <ivy.ivy_ast.MixinAfterDef object at 0x7fd8f2d41810>, <ivy.ivy_ast.MixinImplementDef object at 0x7fd8f2d69a90>]",
            "[<ivy.ivy_ast.MixinBeforeDef object at 0x7fd8f2a8ce10>, <ivy.ivy_ast.MixinAfterDef object at 0x7fd8f2a5f250>, <ivy.ivy_ast.MixinImplementDef object at 0x7fd8f2a7ab10>]",
            "[<ivy.ivy_ast.MixinBeforeDef object at 0x7fd8f286d150>, <ivy.ivy_ast.MixinAfterDef object at 0x7fd8f295a9d0>, <ivy.ivy_ast.MixinImplementDef object at 0x7fd8f249e9d0>]",
            "[<ivy.ivy_ast.MixinBeforeDef object at 0x7fd8f1760550>, <ivy.ivy_ast.MixinAfterDef object at 0x7fd8f17584d0>, <ivy.ivy_ast.MixinImplementDef object at 0x7fd8f1a81a50>]",
            "[<ivy.ivy_ast.MixinImplementDef object at 0x7fd8f167fed0>]",
            "[<ivy.ivy_ast.MixinImplementDef object at 0x7fd8f1277390>]",
            "[<ivy.ivy_ast.MixinImplementDef object at 0x7fd8f2f26bd0>]",
            "[<ivy.ivy_ast.MixinImplementDef object at 0x7fd8f20059d0>]",
            "[<ivy.ivy_ast.MixinImplementDef object at 0x7fd8f11d1810>]",
            "[<ivy.ivy_ast.MixinAfterDef object at 0x7fd8f25f8ed0>, <ivy.ivy_ast.MixinImplementDef object at 0x7fd8f2598a90>]",
            "[<ivy.ivy_ast.MixinImplementDef object at 0x7fd8f299cdd0>]",
            "[<ivy.ivy_ast.MixinImplementDef object at 0x7fd8f1181950>]",
            "[<ivy.ivy_ast.MixinAfterDef object at 0x7fd8f26e9e50>, <ivy.ivy_ast.MixinImplementDef object at 0x7fd8f2656cd0>]",
            "[<ivy.ivy_ast.MixinBeforeDef object at 0x7fd8f22b9150>, <ivy.ivy_ast.MixinAfterDef object at 0x7fd8f22b9b50>]",
            "[<ivy.ivy_ast.MixinAfterDef object at 0x7fd8f1c5ce90>, <ivy.ivy_ast.MixinImplementDef object at 0x7fd8f16fb590>]",
            "[<ivy.ivy_ast.MixinAfterDef object at 0x7fd8f2369c10>, <ivy.ivy_ast.MixinImplementDef object at 0x7fd8f22e1dd0>]",
            "[<ivy.ivy_ast.MixinAfterDef object at 0x7fd8f118d190>, <ivy.ivy_ast.MixinImplementDef object at 0x7fd8f114a1d0>]",
            "[<ivy.ivy_ast.MixinBeforeDef object at 0x7fd8f2136550>, <ivy.ivy_ast.MixinAfterDef object at 0x7fd8f215e710>]",
            "[<ivy.ivy_ast.MixinBeforeDef object at 0x7fd8f22a1690>, <ivy.ivy_ast.MixinAfterDef object at 0x7fd8f21fd410>]",
            "[<ivy.ivy_ast.MixinImplementDef object at 0x7fd8f1e22590>]",
            "[<ivy.ivy_ast.MixinAfterDef object at 0x7fd8f2026390>, <ivy.ivy_ast.MixinImplementDef object at 0x7fd8f201ead0>]",
            "[<ivy.ivy_ast.MixinImplementDef object at 0x7fd8f1219550>]",
            "[<ivy.ivy_ast.MixinBeforeDef object at 0x7fd8f169f4d0>, <ivy.ivy_ast.MixinAfterDef object at 0x7fd8f1654a50>, <ivy.ivy_ast.MixinImplementDef object at 0x7fd8f1601a50>]",
            "[<ivy.ivy_ast.MixinBeforeDef object at 0x7fd8f2e5d490>, <ivy.ivy_ast.MixinAfterDef object at 0x7fd8f3105950>]",
            "[<ivy.ivy_ast.MixinBeforeDef object at 0x7fd8f32bb3d0>, <ivy.ivy_ast.MixinAfterDef object at 0x7fd8f32c3490>, <ivy.ivy_ast.MixinImplementDef object at 0x7fd8f32d0b50>]",
            "[<ivy.ivy_ast.MixinAfterDef object at 0x7fd8f2d87350>, <ivy.ivy_ast.MixinImplementDef object at 0x7fd8f2d9e810>]",
            "[<ivy.ivy_ast.MixinBeforeDef object at 0x7fd8f2edd710>, <ivy.ivy_ast.MixinAfterDef object at 0x7fd8f2ed1350>, <ivy.ivy_ast.MixinImplementDef object at 0x7fd8f30dccd0>]",
            "[<ivy.ivy_ast.MixinBeforeDef object at 0x7fd8f11d16d0>, <ivy.ivy_ast.MixinAfterDef object at 0x7fd8f11d4c10>, <ivy.ivy_ast.MixinImplementDef object at 0x7fd8f11f7150>]",
            "[<ivy.ivy_ast.MixinImplementDef object at 0x7fd8f2542e90>]",
            "[<ivy.ivy_ast.MixinAfterDef object at 0x7fd8f2983d90>, <ivy.ivy_ast.MixinImplementDef object at 0x7fd8f27bd850>]",
            "[<ivy.ivy_ast.MixinBeforeDef object at 0x7fd8f31d19d0>, <ivy.ivy_ast.MixinAfterDef object at 0x7fd8f3180290>, <ivy.ivy_ast.MixinImplementDef object at 0x7fd8f31a6210>]",
            "[<ivy.ivy_ast.MixinImplementDef object at 0x7fd8f10d4210>]",
            "[<ivy.ivy_ast.MixinAfterDef object at 0x7fd8f123ca90>, <ivy.ivy_ast.MixinImplementDef object at 0x7fd8f1297ad0>]",
            "[<ivy.ivy_ast.MixinAfterDef object at 0x7fd8f1466a10>, <ivy.ivy_ast.MixinImplementDef object at 0x7fd8f1470810>]",
            "[<ivy.ivy_ast.MixinImplementDef object at 0x7fd8f32c6390>]",
            "[<ivy.ivy_ast.MixinAfterDef object at 0x7fd8f1e31750>, <ivy.ivy_ast.MixinImplementDef object at 0x7fd8f1e25790>]",
            "[<ivy.ivy_ast.MixinAfterDef object at 0x7fd8f1119ed0>, <ivy.ivy_ast.MixinImplementDef object at 0x7fd8f11021d0>]",
            "[<ivy.ivy_ast.MixinAfterDef object at 0x7fd8f204a310>, <ivy.ivy_ast.MixinImplementDef object at 0x7fd8f2003410>]",
            "[<ivy.ivy_ast.MixinAfterDef object at 0x7fd8f1282190>, <ivy.ivy_ast.MixinImplementDef object at 0x7fd8f1282650>]",
            "[<ivy.ivy_ast.MixinAfterDef object at 0x7fd8f14b1490>, <ivy.ivy_ast.MixinImplementDef object at 0x7fd8f1443890>]",
            "[<ivy.ivy_ast.MixinAfterDef object at 0x7fd8f2302050>, <ivy.ivy_ast.MixinImplementDef object at 0x7fd8f230e210>]",
            "[<ivy.ivy_ast.MixinImplementDef object at 0x7fd8f31b06d0>]",
            "[<ivy.ivy_ast.MixinImplementDef object at 0x7fd8f24edd10>]",
            "[<ivy.ivy_ast.MixinBeforeDef object at 0x7fd8f27ab650>, <ivy.ivy_ast.MixinAfterDef object at 0x7fd8f27b5490>, <ivy.ivy_ast.MixinImplementDef object at 0x7fd8f274a5d0>]",
            "[<ivy.ivy_ast.MixinAfterDef object at 0x7fd8f2a5f310>, <ivy.ivy_ast.MixinImplementDef object at 0x7fd8f2a10710>]",
            "[<ivy.ivy_ast.MixinImplementDef object at 0x7fd8f2708a10>]",
            "[<ivy.ivy_ast.MixinBeforeDef object at 0x7fd8f2f557d0>, <ivy.ivy_ast.MixinAfterDef object at 0x7fd8f2f3da90>, <ivy.ivy_ast.MixinImplementDef object at 0x7fd8f2f4af10>]",
            "[<ivy.ivy_ast.MixinAfterDef object at 0x7fd8f342a710>, <ivy.ivy_ast.MixinImplementDef object at 0x7fd8f3379250>]",
            "[<ivy.ivy_ast.MixinAfterDef object at 0x7fd8f21ceb90>, <ivy.ivy_ast.MixinImplementDef object at 0x7fd8f2233350>]",
            "[<ivy.ivy_ast.MixinBeforeDef object at 0x7fd8f342ab50>, <ivy.ivy_ast.MixinAfterDef object at 0x7fd8f3305c10>, <ivy.ivy_ast.MixinImplementDef object at 0x7fd8f3320b90>]",
            "[<ivy.ivy_ast.MixinBeforeDef object at 0x7fd8f3338c90>, <ivy.ivy_ast.MixinAfterDef object at 0x7fd8f331d210>, <ivy.ivy_ast.MixinImplementDef object at 0x7fd8f332c2d0>]",
            "[<ivy.ivy_ast.MixinBeforeDef object at 0x7fd8f2e8b8d0>, <ivy.ivy_ast.MixinAfterDef object at 0x7fd8f2e80090>]",
            "[<ivy.ivy_ast.MixinImplementDef object at 0x7fd8f3145390>]",
            "[<ivy.ivy_ast.MixinImplementDef object at 0x7fd8f3379f10>]",
            "[<ivy.ivy_ast.MixinBeforeDef object at 0x7fd8f11d6150>, <ivy.ivy_ast.MixinAfterDef object at 0x7fd8f11df450>, <ivy.ivy_ast.MixinImplementDef object at 0x7fd8f11e2f90>]",
            "[<ivy.ivy_ast.MixinImplementDef object at 0x7fd8f21d9e90>]",
            "[<ivy.ivy_ast.MixinImplementDef object at 0x7fd8f160ee10>]",
            "[<ivy.ivy_ast.MixinImplementDef object at 0x7fd8f1bbc610>]",
            "[<ivy.ivy_ast.MixinImplementDef object at 0x7fd8f26598d0>]",
            "[<ivy.ivy_ast.MixinImplementDef object at 0x7fd8f32f41d0>]",
            "[<ivy.ivy_ast.MixinBeforeDef object at 0x7fd8f2705510>, <ivy.ivy_ast.MixinAfterDef object at 0x7fd8f2705890>, <ivy.ivy_ast.MixinImplementDef object at 0x7fd8f2708910>]",
            "[<ivy.ivy_ast.MixinBeforeDef object at 0x7fd8f1435cd0>, <ivy.ivy_ast.MixinAfterDef object at 0x7fd8f13dfc50>, <ivy.ivy_ast.MixinImplementDef object at 0x7fd8f138bd50>]",
            "[<ivy.ivy_ast.MixinImplementDef object at 0x7fd8f13fc550>]",
            "[<ivy.ivy_ast.MixinImplementDef object at 0x7fd8f3371750>]",
            "[<ivy.ivy_ast.MixinImplementDef object at 0x7fd8f2dabd10>]",
            "[<ivy.ivy_ast.MixinBeforeDef object at 0x7fd8f2c3fcd0>, <ivy.ivy_ast.MixinAfterDef object at 0x7fd8f2ca1610>, <ivy.ivy_ast.MixinImplementDef object at 0x7fd8f2c63a90>]",
            "[<ivy.ivy_ast.MixinBeforeDef object at 0x7fd8f1ff7b10>, <ivy.ivy_ast.MixinAfterDef object at 0x7fd8f1f97610>]",
            "[<ivy.ivy_ast.MixinImplementDef object at 0x7fd8f1129890>]",
            "[<ivy.ivy_ast.MixinAfterDef object at 0x7fd8f1c22f50>, <ivy.ivy_ast.MixinImplementDef object at 0x7fd8f1c249d0>]",
            "[<ivy.ivy_ast.MixinImplementDef object at 0x7fd8f261f710>]",
            "[<ivy.ivy_ast.MixinBeforeDef object at 0x7fd8f31e7b90>, <ivy.ivy_ast.MixinAfterDef object at 0x7fd8f3236fd0>, <ivy.ivy_ast.MixinImplementDef object at 0x7fd8f31f66d0>]",
            "[<ivy.ivy_ast.MixinImplementDef object at 0x7fd8f2db54d0>]",
            "[<ivy.ivy_ast.MixinBeforeDef object at 0x7fd8f2a99d10>, <ivy.ivy_ast.MixinAfterDef object at 0x7fd8f2a3b390>, <ivy.ivy_ast.MixinImplementDef object at 0x7fd8f2ae81d0>]",
            "[<ivy.ivy_ast.MixinAfterDef object at 0x7fd8f2dd6350>, <ivy.ivy_ast.MixinImplementDef object at 0x7fd8f2dc1b90>]",
            "[<ivy.ivy_ast.MixinAfterDef object at 0x7fd8f18375d0>, <ivy.ivy_ast.MixinImplementDef object at 0x7fd8f1b23410>]",
            "[<ivy.ivy_ast.MixinImplementDef object at 0x7fd8f1d88790>]",
            "[<ivy.ivy_ast.MixinAfterDef object at 0x7fd8f2ada090>, <ivy.ivy_ast.MixinImplementDef object at 0x7fd8f2a8ae50>]",
            "[<ivy.ivy_ast.MixinAfterDef object at 0x7fd8f14a98d0>, <ivy.ivy_ast.MixinImplementDef object at 0x7fd8f1421ad0>]",
            "[<ivy.ivy_ast.MixinImplementDef object at 0x7fd8f23ed850>]",
            "[<ivy.ivy_ast.MixinImplementDef object at 0x7fd8f14bcc10>]",
            "[<ivy.ivy_ast.MixinBeforeDef object at 0x7fd8f2c3f290>, <ivy.ivy_ast.MixinAfterDef object at 0x7fd8f2c42f90>, <ivy.ivy_ast.MixinImplementDef object at 0x7fd8f2c59b90>]",
            "[<ivy.ivy_ast.MixinAfterDef object at 0x7fd8f1dcb590>, <ivy.ivy_ast.MixinImplementDef object at 0x7fd8f1d7ed90>]",
            "[<ivy.ivy_ast.MixinBeforeDef object at 0x7fd8f2778a50>, <ivy.ivy_ast.MixinAfterDef object at 0x7fd8f2778510>, <ivy.ivy_ast.MixinImplementDef object at 0x7fd8f2712f90>]",
            "[<ivy.ivy_ast.MixinAfterDef object at 0x7fd8f1345410>, <ivy.ivy_ast.MixinImplementDef object at 0x7fd8f139a9d0>]",
            "[<ivy.ivy_ast.MixinImplementDef object at 0x7fd8f160eb90>]",
            "[<ivy.ivy_ast.MixinImplementDef object at 0x7fd8f16e5150>]",
            "[<ivy.ivy_ast.MixinBeforeDef object at 0x7fd8f2392190>, <ivy.ivy_ast.MixinAfterDef object at 0x7fd8f24868d0>, <ivy.ivy_ast.MixinImplementDef object at 0x7fd8f29b6750>]",
            "[<ivy.ivy_ast.MixinImplementDef object at 0x7fd8f11618d0>]",
            "[<ivy.ivy_ast.MixinImplementDef object at 0x7fd8f1dc2990>]",
            "[<ivy.ivy_ast.MixinBeforeDef object at 0x7fd8f16cf390>, <ivy.ivy_ast.MixinAfterDef object at 0x7fd8f16db750>, <ivy.ivy_ast.MixinImplementDef object at 0x7fd8f167f290>]",
            "[<ivy.ivy_ast.MixinBeforeDef object at 0x7fd8f288e190>, <ivy.ivy_ast.MixinAfterDef object at 0x7fd8f28f7390>, <ivy.ivy_ast.MixinImplementDef object at 0x7fd8f288b510>]",
            "[<ivy.ivy_ast.MixinBeforeDef object at 0x7fd8f2ef8b90>, <ivy.ivy_ast.MixinAfterDef object at 0x7fd8f2f79450>, <ivy.ivy_ast.MixinImplementDef object at 0x7fd8f3176f90>]",
            "[<ivy.ivy_ast.MixinImplementDef object at 0x7fd8f22f8510>]",
            "[<ivy.ivy_ast.MixinBeforeDef object at 0x7fd8f3247050>, <ivy.ivy_ast.MixinAfterDef object at 0x7fd8f322a150>]",
            "[<ivy.ivy_ast.MixinImplementDef object at 0x7fd8f142d250>]",
            "[<ivy.ivy_ast.MixinImplementDef object at 0x7fd8f25575d0>]",
            "[<ivy.ivy_ast.MixinAfterDef object at 0x7fd8f15ce390>]",
            "[<ivy.ivy_ast.MixinImplementDef object at 0x7fd8f2844e10>]",
            "[<ivy.ivy_ast.MixinImplementDef object at 0x7fd8f1c24a90>]",
            "[<ivy.ivy_ast.MixinAfterDef object at 0x7fd8f2197b50>, <ivy.ivy_ast.MixinImplementDef object at 0x7fd8f21afd90>]",
            "[<ivy.ivy_ast.MixinImplementDef object at 0x7fd8f1e8c050>]",
            "[<ivy.ivy_ast.MixinBeforeDef object at 0x7fd8f269f210>, <ivy.ivy_ast.MixinAfterDef object at 0x7fd8f2729510>, <ivy.ivy_ast.MixinImplementDef object at 0x7fd8f269d450>]",
            "[<ivy.ivy_ast.MixinAfterDef object at 0x7fd8f259c110>, <ivy.ivy_ast.MixinImplementDef object at 0x7fd8f25b7d10>]",
            "[<ivy.ivy_ast.MixinImplementDef object at 0x7fd8f21ba9d0>]",
            "[<ivy.ivy_ast.MixinBeforeDef object at 0x7fd8f20ac990>, <ivy.ivy_ast.MixinAfterDef object at 0x7fd8f201ee50>, <ivy.ivy_ast.MixinImplementDef object at 0x7fd8f2029250>]",
            "[<ivy.ivy_ast.MixinAfterDef object at 0x7fd8f310f250>]",
            "[<ivy.ivy_ast.MixinAfterDef object at 0x7fd8f28c8a90>, <ivy.ivy_ast.MixinImplementDef object at 0x7fd8f291a750>]",
            "[<ivy.ivy_ast.MixinAfterDef object at 0x7fd8f22d51d0>, <ivy.ivy_ast.MixinImplementDef object at 0x7fd8f22d7450>]",
            "[<ivy.ivy_ast.MixinImplementDef object at 0x7fd8f2189790>]",
            "[<ivy.ivy_ast.MixinImplementDef object at 0x7fd8f22bb7d0>]",
            "[<ivy.ivy_ast.MixinBeforeDef object at 0x7fd8f2d83610>, <ivy.ivy_ast.MixinAfterDef object at 0x7fd8f2d863d0>, <ivy.ivy_ast.MixinImplementDef object at 0x7fd8f2da77d0>]",
            "[<ivy.ivy_ast.MixinImplementDef object at 0x7fd8f2760190>]",
            "[<ivy.ivy_ast.MixinBeforeDef object at 0x7fd8f146e790>, <ivy.ivy_ast.MixinAfterDef object at 0x7fd8f1470e10>, <ivy.ivy_ast.MixinImplementDef object at 0x7fd8f14664d0>]",
            "[<ivy.ivy_ast.MixinImplementDef object at 0x7fd8f2616c90>]",
            "[<ivy.ivy_ast.MixinAfterDef object at 0x7fd8f15c6410>]",
            "[<ivy.ivy_ast.MixinAfterDef object at 0x7fd8f32c3ad0>, <ivy.ivy_ast.MixinImplementDef object at 0x7fd8f32dfa90>]",
            "[<ivy.ivy_ast.MixinBeforeDef object at 0x7fd8f24fba50>, <ivy.ivy_ast.MixinAfterDef object at 0x7fd8f2565250>, <ivy.ivy_ast.MixinImplementDef object at 0x7fd8f2572fd0>]",
            "[<ivy.ivy_ast.MixinImplementDef object at 0x7fd8f10a9d50>]",
            "[<ivy.ivy_ast.MixinImplementDef object at 0x7fd8f2b78b10>]",
            "[<ivy.ivy_ast.MixinBeforeDef object at 0x7fd8f2760450>, <ivy.ivy_ast.MixinAfterDef object at 0x7fd8f276c990>, <ivy.ivy_ast.MixinImplementDef object at 0x7fd8f27a9310>]",
            "[<ivy.ivy_ast.MixinAfterDef object at 0x7fd8f109a790>, <ivy.ivy_ast.MixinImplementDef object at 0x7fd8f10b3c10>]",
            "[<ivy.ivy_ast.MixinBeforeDef object at 0x7fd8f24a51d0>, <ivy.ivy_ast.MixinAfterDef object at 0x7fd8f210e650>, <ivy.ivy_ast.MixinImplementDef object at 0x7fd8f248db10>]",
            "[<ivy.ivy_ast.MixinImplementDef object at 0x7fd8f26adf10>]",
            "[<ivy.ivy_ast.MixinBeforeDef object at 0x7fd8f31444d0>, <ivy.ivy_ast.MixinAfterDef object at 0x7fd8f15efc50>]",
            "[<ivy.ivy_ast.MixinImplementDef object at 0x7fd8f16ab9d0>]",
            "[<ivy.ivy_ast.MixinBeforeDef object at 0x7fd8f1827210>, <ivy.ivy_ast.MixinAfterDef object at 0x7fd8f1815e50>, <ivy.ivy_ast.MixinImplementDef object at 0x7fd8f16fbf50>]",
            "[<ivy.ivy_ast.MixinAfterDef object at 0x7fd8f2df9450>, <ivy.ivy_ast.MixinImplementDef object at 0x7fd8f2da78d0>]",
            "[<ivy.ivy_ast.MixinImplementDef object at 0x7fd8f2d0bc90>]",
            "[<ivy.ivy_ast.MixinAfterDef object at 0x7fd8f2367dd0>, <ivy.ivy_ast.MixinImplementDef object at 0x7fd8f2372350>]",
            "[<ivy.ivy_ast.MixinAfterDef object at 0x7fd8f27920d0>, <ivy.ivy_ast.MixinImplementDef object at 0x7fd8f2792ed0>]",
            "[<ivy.ivy_ast.MixinBeforeDef object at 0x7fd8f21a0950>, <ivy.ivy_ast.MixinAfterDef object at 0x7fd8f21a0750>, <ivy.ivy_ast.MixinImplementDef object at 0x7fd8f21af350>]",
            "[<ivy.ivy_ast.MixinBeforeDef object at 0x7fd8f2392dd0>, <ivy.ivy_ast.MixinAfterDef object at 0x7fd8f294ead0>, <ivy.ivy_ast.MixinImplementDef object at 0x7fd8f23751d0>]",
            "[<ivy.ivy_ast.MixinBeforeDef object at 0x7fd8f25e1a90>, <ivy.ivy_ast.MixinAfterDef object at 0x7fd8f25ab810>, <ivy.ivy_ast.MixinImplementDef object at 0x7fd8f25a8e10>]",
            "[<ivy.ivy_ast.MixinImplementDef object at 0x7fd8f1de5e90>]",
            "[<ivy.ivy_ast.MixinAfterDef object at 0x7fd8f2930d90>, <ivy.ivy_ast.MixinImplementDef object at 0x7fd8f291a310>]",
            "[<ivy.ivy_ast.MixinAfterDef object at 0x7fd8f11f71d0>, <ivy.ivy_ast.MixinImplementDef object at 0x7fd8f11563d0>]",
            "[<ivy.ivy_ast.MixinAfterDef object at 0x7fd8f2f82fd0>, <ivy.ivy_ast.MixinImplementDef object at 0x7fd8f30704d0>]",
            "[<ivy.ivy_ast.MixinAfterDef object at 0x7fd8f17583d0>, <ivy.ivy_ast.MixinImplementDef object at 0x7fd8f1711310>]",
            "[<ivy.ivy_ast.MixinBeforeDef object at 0x7fd8f1e27650>, <ivy.ivy_ast.MixinAfterDef object at 0x7fd8f1dcb250>, <ivy.ivy_ast.MixinImplementDef object at 0x7fd8f1e38b10>]",
            "[<ivy.ivy_ast.MixinImplementDef object at 0x7fd8f2f9a850>]",
            "[<ivy.ivy_ast.MixinAfterDef object at 0x7fd8f11242d0>, <ivy.ivy_ast.MixinImplementDef object at 0x7fd8f1134590>]",
            "[<ivy.ivy_ast.MixinBeforeDef object at 0x7fd8f12bd650>, <ivy.ivy_ast.MixinAfterDef object at 0x7fd8f12e4590>, <ivy.ivy_ast.MixinImplementDef object at 0x7fd8f12ccbd0>]",
            "[<ivy.ivy_ast.MixinImplementDef object at 0x7fd8f3358750>]",
            "[<ivy.ivy_ast.MixinBeforeDef object at 0x7fd8f2b9ed10>, <ivy.ivy_ast.MixinAfterDef object at 0x7fd8f2ceee90>, <ivy.ivy_ast.MixinImplementDef object at 0x7fd8f2baa8d0>]",
            "[<ivy.ivy_ast.MixinImplementDef object at 0x7fd8f1156310>]",
            "[<ivy.ivy_ast.MixinBeforeDef object at 0x7fd8f30dc190>, <ivy.ivy_ast.MixinAfterDef object at 0x7fd8f2cc87d0>, <ivy.ivy_ast.MixinImplementDef object at 0x7fd8f2c15790>]",
            "[<ivy.ivy_ast.MixinImplementDef object at 0x7fd8f274aa10>]",
            "[<ivy.ivy_ast.MixinImplementDef object at 0x7fd8f1bd2050>]",
            "[<ivy.ivy_ast.MixinBeforeDef object at 0x7fd8f304ee50>, <ivy.ivy_ast.MixinAfterDef object at 0x7fd8f31fb110>, <ivy.ivy_ast.MixinBeforeDef object at 0x7fd8f136d410>]",
            "[<ivy.ivy_ast.MixinImplementDef object at 0x7fd8f2c1b6d0>]",
            "[<ivy.ivy_ast.MixinAfterDef object at 0x7fd8f2f400d0>, <ivy.ivy_ast.MixinImplementDef object at 0x7fd8f2f46f10>]",
            "[<ivy.ivy_ast.MixinImplementDef object at 0x7fd8f1bcf810>]",
            "[<ivy.ivy_ast.MixinAfterDef object at 0x7fd8f2f9a510>, <ivy.ivy_ast.MixinImplementDef object at 0x7fd8f2fb2c10>]",
            "[<ivy.ivy_ast.MixinImplementDef object at 0x7fd8f1f31a10>]",
            "[<ivy.ivy_ast.MixinImplementDef object at 0x7fd8f109ab50>]",
            "[<ivy.ivy_ast.MixinAfterDef object at 0x7fd8f276fe90>, <ivy.ivy_ast.MixinImplementDef object at 0x7fd8f2712990>]",
            "[<ivy.ivy_ast.MixinImplementDef object at 0x7fd8f1bec790>]",
            "[<ivy.ivy_ast.MixinImplementDef object at 0x7fd8f2208590>]",
            "[<ivy.ivy_ast.MixinAfterDef object at 0x7fd8f25a8390>, <ivy.ivy_ast.MixinImplementDef object at 0x7fd8f254ec10>]",
            "[<ivy.ivy_ast.MixinImplementDef object at 0x7fd8f1486c10>]",
            "[<ivy.ivy_ast.MixinAfterDef object at 0x7fd8f241a4d0>, <ivy.ivy_ast.MixinImplementDef object at 0x7fd8f2423810>]",
            "[<ivy.ivy_ast.MixinImplementDef object at 0x7fd8f153bfd0>]",
            "[<ivy.ivy_ast.MixinImplementDef object at 0x7fd8f23d5a10>]",
            "[<ivy.ivy_ast.MixinImplementDef object at 0x7fd8f14f5d50>]",
            "[<ivy.ivy_ast.MixinAfterDef object at 0x7fd8f2eeb350>, <ivy.ivy_ast.MixinImplementDef object at 0x7fd8f32abf50>]",
            "[<ivy.ivy_ast.MixinImplementDef object at 0x7fd8f15a9c90>]",
            "[<ivy.ivy_ast.MixinImplementDef object at 0x7fd8f146edd0>]",
            "[<ivy.ivy_ast.MixinImplementDef object at 0x7fd8f16a2410>]",
            "[<ivy.ivy_ast.MixinImplementDef object at 0x7fd8f1161ed0>]",
            "[<ivy.ivy_ast.MixinAfterDef object at 0x7fd8f291acd0>, <ivy.ivy_ast.MixinImplementDef object at 0x7fd8f292da50>]",
            "[<ivy.ivy_ast.MixinBeforeDef object at 0x7fd8f1bcffd0>, <ivy.ivy_ast.MixinAfterDef object at 0x7fd8f1bd2890>, <ivy.ivy_ast.MixinImplementDef object at 0x7fd8f1be9f10>]",
            "[<ivy.ivy_ast.MixinAfterDef object at 0x7fd8f2ab0650>, <ivy.ivy_ast.MixinImplementDef object at 0x7fd8f2a7af10>]",
            "[<ivy.ivy_ast.MixinAfterDef object at 0x7fd8f16775d0>, <ivy.ivy_ast.MixinImplementDef object at 0x7fd8f1604a10>]",
            "[<ivy.ivy_ast.MixinBeforeDef object at 0x7fd8f1083f50>, <ivy.ivy_ast.MixinAfterDef object at 0x7fd8f10eced0>, <ivy.ivy_ast.MixinImplementDef object at 0x7fd8f109d710>]",
            "[<ivy.ivy_ast.MixinImplementDef object at 0x7fd8f28df750>]",
            "[<ivy.ivy_ast.MixinBeforeDef object at 0x7fd8f1351290>]",
            "[<ivy.ivy_ast.MixinBeforeDef object at 0x7fd8f2dec1d0>, <ivy.ivy_ast.MixinAfterDef object at 0x7fd8f2e030d0>, <ivy.ivy_ast.MixinImplementDef object at 0x7fd8f2da7190>]",
            "[<ivy.ivy_ast.MixinAfterDef object at 0x7fd8f2642c10>, <ivy.ivy_ast.MixinImplementDef object at 0x7fd8f2670a90>]",
            "[<ivy.ivy_ast.MixinAfterDef object at 0x7fd8f176c250>, <ivy.ivy_ast.MixinImplementDef object at 0x7fd8f1704190>]",
            "[<ivy.ivy_ast.MixinBeforeDef object at 0x7fd8f2c4d0d0>, <ivy.ivy_ast.MixinAfterDef object at 0x7fd8f2c0e810>, <ivy.ivy_ast.MixinAfterDef object at 0x7fd8f14a7810>]",
            "[<ivy.ivy_ast.MixinAfterDef object at 0x7fd8f2790a50>, <ivy.ivy_ast.MixinImplementDef object at 0x7fd8f2756550>]",
            "[<ivy.ivy_ast.MixinAfterDef object at 0x7fd8f2233bd0>, <ivy.ivy_ast.MixinImplementDef object at 0x7fd8f294e990>]",
            "[<ivy.ivy_ast.MixinImplementDef object at 0x7fd8f20afcd0>]",
            "[<ivy.ivy_ast.MixinBeforeDef object at 0x7fd8f3494610>, <ivy.ivy_ast.MixinAfterDef object at 0x7fd8f346ead0>, <ivy.ivy_ast.MixinImplementDef object at 0x7fd8f3342190>]",
            "[<ivy.ivy_ast.MixinImplementDef object at 0x7fd8f10ca1d0>]",
            "[<ivy.ivy_ast.MixinImplementDef object at 0x7fd8f16a2190>]",
            "[<ivy.ivy_ast.MixinAfterDef object at 0x7fd8f11400d0>, <ivy.ivy_ast.MixinImplementDef object at 0x7fd8f11a5250>]",
            "[<ivy.ivy_ast.MixinAfterDef object at 0x7fd8f1231290>, <ivy.ivy_ast.MixinImplementDef object at 0x7fd8f11dfad0>]",
            "[<ivy.ivy_ast.MixinAfterDef object at 0x7fd8f253f8d0>, <ivy.ivy_ast.MixinImplementDef object at 0x7fd8f2529210>]",
            "[<ivy.ivy_ast.MixinBeforeDef object at 0x7fd8f11d1a90>, <ivy.ivy_ast.MixinAfterDef object at 0x7fd8f122ff50>, <ivy.ivy_ast.MixinImplementDef object at 0x7fd8f1224b90>]",
            "[<ivy.ivy_ast.MixinBeforeDef object at 0x7fd8f3220f10>, <ivy.ivy_ast.MixinAfterDef object at 0x7fd8f307b2d0>, <ivy.ivy_ast.MixinBeforeDef object at 0x7fd8f12fbfd0>]",
            "[<ivy.ivy_ast.MixinAfterDef object at 0x7fd8f27f2a50>, <ivy.ivy_ast.MixinImplementDef object at 0x7fd8f279c8d0>]",
            "[<ivy.ivy_ast.MixinAfterDef object at 0x7fd8f2235410>, <ivy.ivy_ast.MixinImplementDef object at 0x7fd8f221fa10>]",
            "[<ivy.ivy_ast.MixinAfterDef object at 0x7fd8f26a8a10>, <ivy.ivy_ast.MixinImplementDef object at 0x7fd8f2683a10>]",
            "[<ivy.ivy_ast.MixinBeforeDef object at 0x7fd8f23e3510>, <ivy.ivy_ast.MixinAfterDef object at 0x7fd8f23d7150>, <ivy.ivy_ast.MixinImplementDef object at 0x7fd8f29a9610>]",
            "[<ivy.ivy_ast.MixinAfterDef object at 0x7fd8f225a150>, <ivy.ivy_ast.MixinImplementDef object at 0x7fd8f22eea10>]",
            "[<ivy.ivy_ast.MixinBeforeDef object at 0x7fd8f1249dd0>, <ivy.ivy_ast.MixinAfterDef object at 0x7fd8f12537d0>, <ivy.ivy_ast.MixinImplementDef object at 0x7fd8f1247190>]",
            "[<ivy.ivy_ast.MixinAfterDef object at 0x7fd8f1083850>, <ivy.ivy_ast.MixinImplementDef object at 0x7fd8f1091b50>]",
            "[<ivy.ivy_ast.MixinImplementDef object at 0x7fd8f1d88810>]",
            "[<ivy.ivy_ast.MixinAfterDef object at 0x7fd8f2ba2810>, <ivy.ivy_ast.MixinImplementDef object at 0x7fd8f2bae110>]",
            "[<ivy.ivy_ast.MixinAfterDef object at 0x7fd8f10e9590>, <ivy.ivy_ast.MixinImplementDef object at 0x7fd8f110dd90>]",
            "[<ivy.ivy_ast.MixinImplementDef object at 0x7fd8f2284c10>]",
            "[<ivy.ivy_ast.MixinBeforeDef object at 0x7fd8f2c58d50>, <ivy.ivy_ast.MixinAfterDef object at 0x7fd8f2e8bfd0>, <ivy.ivy_ast.MixinImplementDef object at 0x7fd8f2d31fd0>]",
            "[<ivy.ivy_ast.MixinImplementDef object at 0x7fd8f1da0110>]",
            "[<ivy.ivy_ast.MixinAfterDef object at 0x7fd8f29a9510>, <ivy.ivy_ast.MixinImplementDef object at 0x7fd8f26ddc90>]",
            "[<ivy.ivy_ast.MixinAfterDef object at 0x7fd8f1152650>, <ivy.ivy_ast.MixinImplementDef object at 0x7fd8f116b550>]",
            "[<ivy.ivy_ast.MixinAfterDef object at 0x7fd8f2ee1050>, <ivy.ivy_ast.MixinImplementDef object at 0x7fd8f3207490>]",
            "[<ivy.ivy_ast.MixinAfterDef object at 0x7fd8f1defc50>, <ivy.ivy_ast.MixinImplementDef object at 0x7fd8f1d7e550>]",
            "[<ivy.ivy_ast.MixinBeforeDef object at 0x7fd8f2ae5750>, <ivy.ivy_ast.MixinAfterDef object at 0x7fd8f2ae5f10>, <ivy.ivy_ast.MixinImplementDef object at 0x7fd8f2af3dd0>]",
            "[<ivy.ivy_ast.MixinBeforeDef object at 0x7fd8f14ac910>, <ivy.ivy_ast.MixinAfterDef object at 0x7fd8f1443850>, <ivy.ivy_ast.MixinImplementDef object at 0x7fd8f1448090>]",
            "[<ivy.ivy_ast.MixinBeforeDef object at 0x7fd8f26ad790>, <ivy.ivy_ast.MixinAfterDef object at 0x7fd8f26b3bd0>, <ivy.ivy_ast.MixinImplementDef object at 0x7fd8f264d590>]",
            "[<ivy.ivy_ast.MixinAfterDef object at 0x7fd8f1576c10>]",
            "[<ivy.ivy_ast.MixinBeforeDef object at 0x7fd8f1e35f10>, <ivy.ivy_ast.MixinAfterDef object at 0x7fd8f1e27d50>, <ivy.ivy_ast.MixinImplementDef object at 0x7fd8f1d7c990>]",
            "[<ivy.ivy_ast.MixinImplementDef object at 0x7fd8f14f9d10>]",
            "[<ivy.ivy_ast.MixinImplementDef object at 0x7fd8f271c9d0>]",
            "[<ivy.ivy_ast.MixinAfterDef object at 0x7fd8f328b310>]",
            "[<ivy.ivy_ast.MixinAfterDef object at 0x7fd8f12f80d0>, <ivy.ivy_ast.MixinImplementDef object at 0x7fd8f1297f50>]",
            "[<ivy.ivy_ast.MixinAfterDef object at 0x7fd8f21af5d0>, <ivy.ivy_ast.MixinImplementDef object at 0x7fd8f214ed90>]",
            "[<ivy.ivy_ast.MixinAfterDef object at 0x7fd8f2f04e10>, <ivy.ivy_ast.MixinImplementDef object at 0x7fd8f2fb4b50>]",
            "[<ivy.ivy_ast.MixinAfterDef object at 0x7fd8f226ed90>, <ivy.ivy_ast.MixinImplementDef object at 0x7fd8f21085d0>]",
            "[<ivy.ivy_ast.MixinBeforeDef object at 0x7fd8f13e7d10>, <ivy.ivy_ast.MixinAfterDef object at 0x7fd8f13e7b10>, <ivy.ivy_ast.MixinImplementDef object at 0x7fd8f13f6c10>]",
            "[<ivy.ivy_ast.MixinBeforeDef object at 0x7fd8f2284290>, <ivy.ivy_ast.MixinAfterDef object at 0x7fd8f21fde50>]",
            "[<ivy.ivy_ast.MixinImplementDef object at 0x7fd8f2d43810>]",
            "[<ivy.ivy_ast.MixinBeforeDef object at 0x7fd8f1435ed0>, <ivy.ivy_ast.MixinAfterDef object at 0x7fd8f13dc110>, <ivy.ivy_ast.MixinImplementDef object at 0x7fd8f13e7190>]",
            "[<ivy.ivy_ast.MixinBeforeDef object at 0x7fd8f2056650>, <ivy.ivy_ast.MixinAfterDef object at 0x7fd8f20ac450>, <ivy.ivy_ast.MixinImplementDef object at 0x7fd8f2003890>]",
            "[<ivy.ivy_ast.MixinBeforeDef object at 0x7fd8f22e3190>, <ivy.ivy_ast.MixinAfterDef object at 0x7fd8f22d7c50>, <ivy.ivy_ast.MixinImplementDef object at 0x7fd8f22ec150>]",
            "[<ivy.ivy_ast.MixinImplementDef object at 0x7fd8f2a5f9d0>]",
            "[<ivy.ivy_ast.MixinImplementDef object at 0x7fd8f2c4e390>]",
            "[<ivy.ivy_ast.MixinBeforeDef object at 0x7fd8f1224810>, <ivy.ivy_ast.MixinAfterDef object at 0x7fd8f123a7d0>, <ivy.ivy_ast.MixinImplementDef object at 0x7fd8f12196d0>]",
            "[<ivy.ivy_ast.MixinImplementDef object at 0x7fd8f2c3fe10>]",
            "[<ivy.ivy_ast.MixinImplementDef object at 0x7fd8f332cf10>]",
            "[<ivy.ivy_ast.MixinImplementDef object at 0x7fd8f2fa8790>]",
            "[<ivy.ivy_ast.MixinImplementDef object at 0x7fd8f23bdc90>]",
            "[<ivy.ivy_ast.MixinAfterDef object at 0x7fd8f3108a90>]",
            "[<ivy.ivy_ast.MixinImplementDef object at 0x7fd8f22bb210>]",
            "[<ivy.ivy_ast.MixinBeforeDef object at 0x7fd8f30b9f50>, <ivy.ivy_ast.MixinAfterDef object at 0x7fd8f30a0b10>, <ivy.ivy_ast.MixinBeforeDef object at 0x7fd8f13693d0>]",
            "[<ivy.ivy_ast.MixinBeforeDef object at 0x7fd8f3147c50>, <ivy.ivy_ast.MixinAfterDef object at 0x7fd8f31089d0>]",
            "[<ivy.ivy_ast.MixinAfterDef object at 0x7fd8f142ba50>, <ivy.ivy_ast.MixinImplementDef object at 0x7fd8f138bf50>]",
            "[<ivy.ivy_ast.MixinBeforeDef object at 0x7fd8f2304e10>, <ivy.ivy_ast.MixinAfterDef object at 0x7fd8f230c9d0>, <ivy.ivy_ast.MixinImplementDef object at 0x7fd8f232f2d0>]",
            "[<ivy.ivy_ast.MixinImplementDef object at 0x7fd8f205f450>]",
            "[<ivy.ivy_ast.MixinAfterDef object at 0x7fd8f30cf950>, <ivy.ivy_ast.MixinImplementDef object at 0x7fd8f3088710>]",
            "[<ivy.ivy_ast.MixinAfterDef object at 0x7fd8f1caad50>, <ivy.ivy_ast.MixinImplementDef object at 0x7fd8f1c777d0>]",
            "[<ivy.ivy_ast.MixinBeforeDef object at 0x7fd8f28ead50>, <ivy.ivy_ast.MixinAfterDef object at 0x7fd8f2898810>, <ivy.ivy_ast.MixinImplementDef object at 0x7fd8f28af710>]",
            "[<ivy.ivy_ast.MixinAfterDef object at 0x7fd8f2bfd490>, <ivy.ivy_ast.MixinImplementDef object at 0x7fd8f2cd4810>]",
            "[<ivy.ivy_ast.MixinBeforeDef object at 0x7fd8f2fd35d0>, <ivy.ivy_ast.MixinAfterDef object at 0x7fd8f2fc9890>, <ivy.ivy_ast.MixinBeforeDef object at 0x7fd8f1379950>]",
            "[<ivy.ivy_ast.MixinBeforeDef object at 0x7fd8f1284590>, <ivy.ivy_ast.MixinAfterDef object at 0x7fd8f128dcd0>, <ivy.ivy_ast.MixinImplementDef object at 0x7fd8f12a5550>]",
            "[<ivy.ivy_ast.MixinImplementDef object at 0x7fd8f2c70e50>]",
            "[<ivy.ivy_ast.MixinImplementDef object at 0x7fd8f13d3cd0>]",
            "[<ivy.ivy_ast.MixinImplementDef object at 0x7fd8f22be5d0>]",
            "[<ivy.ivy_ast.MixinBeforeDef object at 0x7fd8f1277c50>, <ivy.ivy_ast.MixinAfterDef object at 0x7fd8f1273f90>, <ivy.ivy_ast.MixinImplementDef object at 0x7fd8f120e410>]",
            "[<ivy.ivy_ast.MixinBeforeDef object at 0x7fd8f2ef8850>, <ivy.ivy_ast.MixinAfterDef object at 0x7fd8f2e809d0>, <ivy.ivy_ast.MixinImplementDef object at 0x7fd8f31c0b10>]",
            "[<ivy.ivy_ast.MixinAfterDef object at 0x7fd8f1535c90>]",
            "[<ivy.ivy_ast.MixinImplementDef object at 0x7fd8f29b3c10>]",
            "[<ivy.ivy_ast.MixinBeforeDef object at 0x7fd8f1c1fc90>, <ivy.ivy_ast.MixinAfterDef object at 0x7fd8f1c69a10>, <ivy.ivy_ast.MixinImplementDef object at 0x7fd8f1c2d850>]",
            "[<ivy.ivy_ast.MixinBeforeDef object at 0x7fd8f254e690>, <ivy.ivy_ast.MixinAfterDef object at 0x7fd8f2506550>, <ivy.ivy_ast.MixinImplementDef object at 0x7fd8f2509810>]",
            "[<ivy.ivy_ast.MixinAfterDef object at 0x7fd8f218bcd0>, <ivy.ivy_ast.MixinImplementDef object at 0x7fd8f215e790>]",
            "[<ivy.ivy_ast.MixinImplementDef object at 0x7fd8f14da1d0>]",
            "[<ivy.ivy_ast.MixinBeforeDef object at 0x7fd8f1827190>, <ivy.ivy_ast.MixinAfterDef object at 0x7fd8f1c06390>, <ivy.ivy_ast.MixinImplementDef object at 0x7fd8f18663d0>]",
            "[<ivy.ivy_ast.MixinBeforeDef object at 0x7fd8f25b2e50>, <ivy.ivy_ast.MixinAfterDef object at 0x7fd8f25b2f90>, <ivy.ivy_ast.MixinImplementDef object at 0x7fd8f254ee10>]",
            "[<ivy.ivy_ast.MixinAfterDef object at 0x7fd8f23192d0>, <ivy.ivy_ast.MixinImplementDef object at 0x7fd8f2304c50>]",
            "[<ivy.ivy_ast.MixinImplementDef object at 0x7fd8f1508950>]",
            "[<ivy.ivy_ast.MixinImplementDef object at 0x7fd8f1c9bd50>]",
            "[<ivy.ivy_ast.MixinAfterDef object at 0x7fd8f11d11d0>, <ivy.ivy_ast.MixinImplementDef object at 0x7fd8f11f7b50>]",
            "[<ivy.ivy_ast.MixinBeforeDef object at 0x7fd8f3090a90>, <ivy.ivy_ast.MixinAfterDef object at 0x7fd8f31fb5d0>]",
            "[<ivy.ivy_ast.MixinBeforeDef object at 0x7fd8f11a5c50>, <ivy.ivy_ast.MixinAfterDef object at 0x7fd8f113b250>, <ivy.ivy_ast.MixinImplementDef object at 0x7fd8f1156210>]",
            "[<ivy.ivy_ast.MixinBeforeDef object at 0x7fd8f2e80850>, <ivy.ivy_ast.MixinAfterDef object at 0x7fd8f2e51b50>, <ivy.ivy_ast.MixinBeforeDef object at 0x7fd8f1371d10>]",
            "[<ivy.ivy_ast.MixinImplementDef object at 0x7fd8f2565e50>]",
            "[<ivy.ivy_ast.MixinImplementDef object at 0x7fd8f28be810>]",
            "[<ivy.ivy_ast.MixinAfterDef object at 0x7fd8f28c8290>, <ivy.ivy_ast.MixinImplementDef object at 0x7fd8f28d1b90>]",
            "[<ivy.ivy_ast.MixinImplementDef object at 0x7fd8f28f9950>]",
            "[<ivy.ivy_ast.MixinAfterDef object at 0x7fd8f2d71a90>, <ivy.ivy_ast.MixinImplementDef object at 0x7fd8f2d01350>]",
            "[<ivy.ivy_ast.MixinAfterDef object at 0x7fd8f2428210>, <ivy.ivy_ast.MixinImplementDef object at 0x7fd8f23c0690>]",
            "[<ivy.ivy_ast.MixinBeforeDef object at 0x7fd8f25fd490>, <ivy.ivy_ast.MixinAfterDef object at 0x7fd8f25fd590>, <ivy.ivy_ast.MixinImplementDef object at 0x7fd8f260ac90>]",
            "[<ivy.ivy_ast.MixinAfterDef object at 0x7fd8f2432550>, <ivy.ivy_ast.MixinImplementDef object at 0x7fd8f23c9ed0>]",
            "[<ivy.ivy_ast.MixinImplementDef object at 0x7fd8f1e93990>]",
            "[<ivy.ivy_ast.MixinImplementDef object at 0x7fd8f2f23b90>]",
            "[<ivy.ivy_ast.MixinAfterDef object at 0x7fd8f16e5310>, <ivy.ivy_ast.MixinImplementDef object at 0x7fd8f168be90>]",
            "[<ivy.ivy_ast.MixinBeforeDef object at 0x7fd8f304bd10>, <ivy.ivy_ast.MixinAfterDef object at 0x7fd8f322ad10>, <ivy.ivy_ast.MixinBeforeDef object at 0x7fd8f130ed10>]",
            "[<ivy.ivy_ast.MixinAfterDef object at 0x7fd8f116e790>, <ivy.ivy_ast.MixinImplementDef object at 0x7fd8f10c8f50>]",
            "[<ivy.ivy_ast.MixinAfterDef object at 0x7fd8f33e5110>, <ivy.ivy_ast.MixinImplementDef object at 0x7fd8f3361850>]",
            "[<ivy.ivy_ast.MixinBeforeDef object at 0x7fd8f23bd290>, <ivy.ivy_ast.MixinAfterDef object at 0x7fd8f23bd190>, <ivy.ivy_ast.MixinImplementDef object at 0x7fd8f23d7a10>]",
            "[<ivy.ivy_ast.MixinAfterDef object at 0x7fd8f16c3850>, <ivy.ivy_ast.MixinImplementDef object at 0x7fd8f1720a10>]",
            "[<ivy.ivy_ast.MixinBeforeDef object at 0x7fd8f3085250>, <ivy.ivy_ast.MixinAfterDef object at 0x7fd8f3070510>]",
            "[<ivy.ivy_ast.MixinImplementDef object at 0x7fd8f1758850>]",
            "[<ivy.ivy_ast.MixinImplementDef object at 0x7fd8f2c27a90>]",
            "[<ivy.ivy_ast.MixinBeforeDef object at 0x7fd8f2033350>, <ivy.ivy_ast.MixinAfterDef object at 0x7fd8f201e5d0>, <ivy.ivy_ast.MixinImplementDef object at 0x7fd8f1fbf310>]",
            "[<ivy.ivy_ast.MixinImplementDef object at 0x7fd8f15029d0>]",
            "[<ivy.ivy_ast.MixinAfterDef object at 0x7fd8f2511990>, <ivy.ivy_ast.MixinImplementDef object at 0x7fd8f25114d0>]",
            "[<ivy.ivy_ast.MixinImplementDef object at 0x7fd8f1bf57d0>]",
            "[<ivy.ivy_ast.MixinBeforeDef object at 0x7fd8f217d510>, <ivy.ivy_ast.MixinAfterDef object at 0x7fd8f21949d0>, <ivy.ivy_ast.MixinImplementDef object at 0x7fd8f21e4790>]",
            "[<ivy.ivy_ast.MixinAfterDef object at 0x7fd8f30328d0>, <ivy.ivy_ast.MixinImplementDef object at 0x7fd8f322a8d0>]",
            "[<ivy.ivy_ast.MixinAfterDef object at 0x7fd8f21e6190>, <ivy.ivy_ast.MixinImplementDef object at 0x7fd8f2197310>]",
            "[<ivy.ivy_ast.MixinAfterDef object at 0x7fd8f2d19a90>, <ivy.ivy_ast.MixinImplementDef object at 0x7fd8f2c1b4d0>]",
            "[<ivy.ivy_ast.MixinBeforeDef object at 0x7fd8f2827a50>, <ivy.ivy_ast.MixinAfterDef object at 0x7fd8f28246d0>, <ivy.ivy_ast.MixinAfterDef object at 0x7fd8f14f93d0>, <ivy.ivy_ast.MixinBeforeDef object at 0x7fd8f135a450>]",
            "[<ivy.ivy_ast.MixinImplementDef object at 0x7fd8f20fd950>]",
            "[<ivy.ivy_ast.MixinImplementDef object at 0x7fd8f151c390>]",
            "[<ivy.ivy_ast.MixinAfterDef object at 0x7fd8f2b44ed0>, <ivy.ivy_ast.MixinImplementDef object at 0x7fd8f2b75d90>]",
            "[<ivy.ivy_ast.MixinImplementDef object at 0x7fd8f12b97d0>]",
            "[<ivy.ivy_ast.MixinImplementDef object at 0x7fd8f176cfd0>]",
            "[<ivy.ivy_ast.MixinAfterDef object at 0x7fd8f2708810>, <ivy.ivy_ast.MixinImplementDef object at 0x7fd8f2729450>]",
            "[<ivy.ivy_ast.MixinBeforeDef object at 0x7fd8f21af150>, <ivy.ivy_ast.MixinAfterDef object at 0x7fd8f21a0150>, <ivy.ivy_ast.MixinImplementDef object at 0x7fd8f2151cd0>]",
            "[<ivy.ivy_ast.MixinAfterDef object at 0x7fd8f31a2750>, <ivy.ivy_ast.MixinImplementDef object at 0x7fd8f31bae90>]",
            "[<ivy.ivy_ast.MixinAfterDef object at 0x7fd8f1260f90>, <ivy.ivy_ast.MixinImplementDef object at 0x7fd8f1269810>]",
            "[<ivy.ivy_ast.MixinBeforeDef object at 0x7fd8f1bc6d50>]",
            "[<ivy.ivy_ast.MixinAfterDef object at 0x7fd8f26735d0>, <ivy.ivy_ast.MixinImplementDef object at 0x7fd8f2607fd0>]",
            "[<ivy.ivy_ast.MixinAfterDef object at 0x7fd8f25ffc10>, <ivy.ivy_ast.MixinImplementDef object at 0x7fd8f261f2d0>]",
            "[<ivy.ivy_ast.MixinAfterDef object at 0x7fd8f2f82f50>, <ivy.ivy_ast.MixinImplementDef object at 0x7fd8f2fdfb90>]",
            "[<ivy.ivy_ast.MixinAfterDef object at 0x7fd8f206a2d0>, <ivy.ivy_ast.MixinImplementDef object at 0x7fd8f206a550>]",
            "[<ivy.ivy_ast.MixinImplementDef object at 0x7fd8f2fb44d0>]",
            "[<ivy.ivy_ast.MixinBeforeDef object at 0x7fd8f27a6490>, <ivy.ivy_ast.MixinAfterDef object at 0x7fd8f2792490>, <ivy.ivy_ast.MixinImplementDef object at 0x7fd8f27b5c50>]",
            "[<ivy.ivy_ast.MixinBeforeDef object at 0x7fd8f2387850>, <ivy.ivy_ast.MixinAfterDef object at 0x7fd8f2385590>, <ivy.ivy_ast.MixinImplementDef object at 0x7fd8f2485390>]",
            "[<ivy.ivy_ast.MixinImplementDef object at 0x7fd8f1d4b350>]",
            "[<ivy.ivy_ast.MixinImplementDef object at 0x7fd8f147b5d0>]",
            "[<ivy.ivy_ast.MixinImplementDef object at 0x7fd8f15efd10>]",
            "[<ivy.ivy_ast.MixinImplementDef object at 0x7fd8f2143150>]",
            "[<ivy.ivy_ast.MixinAfterDef object at 0x7fd8f2712e90>, <ivy.ivy_ast.MixinImplementDef object at 0x7fd8f27bd450>]",
            "[<ivy.ivy_ast.MixinBeforeDef object at 0x7fd8f2f8fd90>, <ivy.ivy_ast.MixinAfterDef object at 0x7fd8f30fa450>, <ivy.ivy_ast.MixinImplementDef object at 0x7fd8f2fa84d0>]",
            "[<ivy.ivy_ast.MixinImplementDef object at 0x7fd8f14f9490>]",
            "[<ivy.ivy_ast.MixinAfterDef object at 0x7fd8f1777590>, <ivy.ivy_ast.MixinImplementDef object at 0x7fd8f1704ad0>]",
            "[<ivy.ivy_ast.MixinBeforeDef object at 0x7fd8f318c090>, <ivy.ivy_ast.MixinAfterDef object at 0x7fd8f31fbc90>, <ivy.ivy_ast.MixinImplementDef object at 0x7fd8f31b04d0>]",
            "[<ivy.ivy_ast.MixinImplementDef object at 0x7fd8f120e250>]",
            "[<ivy.ivy_ast.MixinAfterDef object at 0x7fd8f11dff50>, <ivy.ivy_ast.MixinImplementDef object at 0x7fd8f11ed8d0>]",
            "[<ivy.ivy_ast.MixinImplementDef object at 0x7fd8f2f0e410>]",
            "[<ivy.ivy_ast.MixinBeforeDef object at 0x7fd8f2f84e90>, <ivy.ivy_ast.MixinAfterDef object at 0x7fd8f2fd2d50>, <ivy.ivy_ast.MixinImplementDef object at 0x7fd8f2f927d0>]",
            "[<ivy.ivy_ast.MixinAfterDef object at 0x7fd8f1688ad0>, <ivy.ivy_ast.MixinImplementDef object at 0x7fd8f169f250>]",
            "[<ivy.ivy_ast.MixinBeforeDef object at 0x7fd8f2b3b3d0>, <ivy.ivy_ast.MixinAfterDef object at 0x7fd8f2b44dd0>, <ivy.ivy_ast.MixinImplementDef object at 0x7fd8f2b49790>]",
            "[<ivy.ivy_ast.MixinBeforeDef object at 0x7fd8f1091a50>, <ivy.ivy_ast.MixinAfterDef object at 0x7fd8f1091090>, <ivy.ivy_ast.MixinImplementDef object at 0x7fd8f10a9610>]",
            "[<ivy.ivy_ast.MixinBeforeDef object at 0x7fd8f24ed190>, <ivy.ivy_ast.MixinAfterDef object at 0x7fd8f2950650>, <ivy.ivy_ast.MixinImplementDef object at 0x7fd8f24e5790>]",
            "[<ivy.ivy_ast.MixinBeforeDef object at 0x7fd8f2909090>, <ivy.ivy_ast.MixinAfterDef object at 0x7fd8f2914c50>, <ivy.ivy_ast.MixinImplementDef object at 0x7fd8f292ded0>]",
            "[<ivy.ivy_ast.MixinBeforeDef object at 0x7fd8f1bc87d0>, <ivy.ivy_ast.MixinAfterDef object at 0x7fd8f1bcf590>, <ivy.ivy_ast.MixinImplementDef object at 0x7fd8f1c382d0>]",
            "[<ivy.ivy_ast.MixinImplementDef object at 0x7fd8f1513b90>]",
            "[<ivy.ivy_ast.MixinAfterDef object at 0x7fd8f276f9d0>, <ivy.ivy_ast.MixinImplementDef object at 0x7fd8f27b5810>]",
            "[<ivy.ivy_ast.MixinBeforeDef object at 0x7fd8f1a9a550>, <ivy.ivy_ast.MixinAfterDef object at 0x7fd8f1b40f50>, <ivy.ivy_ast.MixinImplementDef object at 0x7fd8f1a1ef10>]",
            "[<ivy.ivy_ast.MixinAfterDef object at 0x7fd8f15ead50>]",
            "[<ivy.ivy_ast.MixinAfterDef object at 0x7fd8f21e6510>, <ivy.ivy_ast.MixinImplementDef object at 0x7fd8f21e4e10>]",
            "[<ivy.ivy_ast.MixinBeforeDef object at 0x7fd8f262c090>, <ivy.ivy_ast.MixinAfterDef object at 0x7fd8f25d7950>, <ivy.ivy_ast.MixinImplementDef object at 0x7fd8f2557e90>]",
            "[<ivy.ivy_ast.MixinAfterDef object at 0x7fd8f28d5c90>, <ivy.ivy_ast.MixinImplementDef object at 0x7fd8f28eca10>]",
            "[<ivy.ivy_ast.MixinImplementDef object at 0x7fd8f1bdd890>]",
            "[<ivy.ivy_ast.MixinAfterDef object at 0x7fd8f2f79290>, <ivy.ivy_ast.MixinImplementDef object at 0x7fd8f2f1a090>]",
            "[<ivy.ivy_ast.MixinAfterDef object at 0x7fd8f24fd650>, <ivy.ivy_ast.MixinImplementDef object at 0x7fd8f2515b90>]",
            "[<ivy.ivy_ast.MixinAfterDef object at 0x7fd8f1c4a810>, <ivy.ivy_ast.MixinImplementDef object at 0x7fd8f1ade3d0>]",
            "[<ivy.ivy_ast.MixinBeforeDef object at 0x7fd8f2493f90>, <ivy.ivy_ast.MixinAfterDef object at 0x7fd8f2487890>, <ivy.ivy_ast.MixinAfterDef object at 0x7fd8f14ab750>]",
            "[<ivy.ivy_ast.MixinBeforeDef object at 0x7fd8f3108c90>, <ivy.ivy_ast.MixinAfterDef object at 0x7fd8f306eb10>, <ivy.ivy_ast.MixinBeforeDef object at 0x7fd8f135ef90>]",
            "[<ivy.ivy_ast.MixinBeforeDef object at 0x7fd8f2d43650>, <ivy.ivy_ast.MixinAfterDef object at 0x7fd8f2d5cad0>, <ivy.ivy_ast.MixinImplementDef object at 0x7fd8f2da7750>]",
            "[<ivy.ivy_ast.MixinBeforeDef object at 0x7fd8f30e6f10>, <ivy.ivy_ast.MixinAfterDef object at 0x7fd8f2ef5750>]",
            "[<ivy.ivy_ast.MixinImplementDef object at 0x7fd8f1bbc9d0>]",
            "[<ivy.ivy_ast.MixinBeforeDef object at 0x7fd8f291a290>, <ivy.ivy_ast.MixinAfterDef object at 0x7fd8f28bc410>, <ivy.ivy_ast.MixinImplementDef object at 0x7fd8f28ea490>]",
            "[<ivy.ivy_ast.MixinImplementDef object at 0x7fd8f217d610>]",
            "[<ivy.ivy_ast.MixinBeforeDef object at 0x7fd8f2da7250>, <ivy.ivy_ast.MixinAfterDef object at 0x7fd8f2d51a10>, <ivy.ivy_ast.MixinImplementDef object at 0x7fd8f2cfecd0>]",
            "[<ivy.ivy_ast.MixinAfterDef object at 0x7fd8f1a4bd10>, <ivy.ivy_ast.MixinImplementDef object at 0x7fd8f1c597d0>]",
            "[<ivy.ivy_ast.MixinImplementDef object at 0x7fd8f31d1a50>]",
            "[<ivy.ivy_ast.MixinAfterDef object at 0x7fd8f1269950>, <ivy.ivy_ast.MixinImplementDef object at 0x7fd8f12b9050>]",
            "[<ivy.ivy_ast.MixinAfterDef object at 0x7fd8f2ef5110>, <ivy.ivy_ast.MixinImplementDef object at 0x7fd8f30cbb90>]",
            "[<ivy.ivy_ast.MixinAfterDef object at 0x7fd8f288ea50>, <ivy.ivy_ast.MixinImplementDef object at 0x7fd8f289cbd0>]",
            "[<ivy.ivy_ast.MixinImplementDef object at 0x7fd8f2143c90>]",
            "[<ivy.ivy_ast.MixinImplementDef object at 0x7fd8f2a13890>]",
            "[<ivy.ivy_ast.MixinAfterDef object at 0x7fd8f2304650>, <ivy.ivy_ast.MixinImplementDef object at 0x7fd8f2319e90>]",
            "[<ivy.ivy_ast.MixinImplementDef object at 0x7fd8f31ba110>]",
            "[<ivy.ivy_ast.MixinAfterDef object at 0x7fd8f21d1a90>, <ivy.ivy_ast.MixinImplementDef object at 0x7fd8f21ef490>]",
            "[<ivy.ivy_ast.MixinBeforeDef object at 0x7fd8f1a6e150>, <ivy.ivy_ast.MixinAfterDef object at 0x7fd8f1a1e550>, <ivy.ivy_ast.MixinImplementDef object at 0x7fd8f1a47690>]",
            "[<ivy.ivy_ast.MixinAfterDef object at 0x7fd8f128d810>, <ivy.ivy_ast.MixinImplementDef object at 0x7fd8f12b0710>]",
            "[<ivy.ivy_ast.MixinBeforeDef object at 0x7fd8f2bb9ad0>, <ivy.ivy_ast.MixinAfterDef object at 0x7fd8f2b49f90>, <ivy.ivy_ast.MixinImplementDef object at 0x7fd8f2b6a390>]",
            "[<ivy.ivy_ast.MixinAfterDef object at 0x7fd8f2b46b90>, <ivy.ivy_ast.MixinImplementDef object at 0x7fd8f2b9e990>]",
            "[<ivy.ivy_ast.MixinBeforeDef object at 0x7fd8f31e0990>, <ivy.ivy_ast.MixinAfterDef object at 0x7fd8f31f6ad0>, <ivy.ivy_ast.MixinImplementDef object at 0x7fd8f31a6c90>]",
            "[<ivy.ivy_ast.MixinAfterDef object at 0x7fd8f3338150>, <ivy.ivy_ast.MixinImplementDef object at 0x7fd8f32dffd0>]",
            "[<ivy.ivy_ast.MixinImplementDef object at 0x7fd8f139a3d0>]",
            "[<ivy.ivy_ast.MixinImplementDef object at 0x7fd8f29500d0>]",
            "[<ivy.ivy_ast.MixinImplementDef object at 0x7fd8f313cf10>]",
            "[<ivy.ivy_ast.MixinAfterDef object at 0x7fd8f3310350>, <ivy.ivy_ast.MixinImplementDef object at 0x7fd8f3320450>]",
            "[<ivy.ivy_ast.MixinImplementDef object at 0x7fd8f2883d10>]",
            "[<ivy.ivy_ast.MixinAfterDef object at 0x7fd8f1660250>, <ivy.ivy_ast.MixinImplementDef object at 0x7fd8f166e5d0>]",
            "[<ivy.ivy_ast.MixinImplementDef object at 0x7fd8f1a5e650>]",
            "[<ivy.ivy_ast.MixinBeforeDef object at 0x7fd8f31fbfd0>, <ivy.ivy_ast.MixinAfterDef object at 0x7fd8f3070150>, <ivy.ivy_ast.MixinBeforeDef object at 0x7fd8f1351250>]",
            "[<ivy.ivy_ast.MixinImplementDef object at 0x7fd8f2124c90>]",
            "[<ivy.ivy_ast.MixinAfterDef object at 0x7fd8f3351d90>, <ivy.ivy_ast.MixinImplementDef object at 0x7fd8f33d7f90>]",
            "[<ivy.ivy_ast.MixinImplementDef object at 0x7fd8f1be9d10>]",
            "[<ivy.ivy_ast.MixinImplementDef object at 0x7fd8f2c70190>]",
            "[<ivy.ivy_ast.MixinAfterDef object at 0x7fd8f13ed4d0>, <ivy.ivy_ast.MixinImplementDef object at 0x7fd8f138f510>]",
            "[<ivy.ivy_ast.MixinImplementDef object at 0x7fd8f1e81dd0>]",
            "[<ivy.ivy_ast.MixinImplementDef object at 0x7fd8f1be9710>]",
            "[<ivy.ivy_ast.MixinImplementDef object at 0x7fd8f23edc50>]",
            "[<ivy.ivy_ast.MixinImplementDef object at 0x7fd8f14d0210>]",
            "[<ivy.ivy_ast.MixinBeforeDef object at 0x7fd8f2732390>, <ivy.ivy_ast.MixinAfterDef object at 0x7fd8f294b150>, <ivy.ivy_ast.MixinAfterDef object at 0x7fd8f14b1d10>]",
            "[<ivy.ivy_ast.MixinBeforeDef object at 0x7fd8f2acca10>, <ivy.ivy_ast.MixinAfterDef object at 0x7fd8f2b2df90>, <ivy.ivy_ast.MixinImplementDef object at 0x7fd8f2adc450>]",
            "[<ivy.ivy_ast.MixinBeforeDef object at 0x7fd8f33be250>, <ivy.ivy_ast.MixinAfterDef object at 0x7fd8f337ce50>, <ivy.ivy_ast.MixinImplementDef object at 0x7fd8f349a0d0>]",
            "[<ivy.ivy_ast.MixinBeforeDef object at 0x7fd8f2121690>, <ivy.ivy_ast.MixinAfterDef object at 0x7fd8f2101750>]",
            "[<ivy.ivy_ast.MixinImplementDef object at 0x7fd8f1bcf750>]",
            "[<ivy.ivy_ast.MixinImplementDef object at 0x7fd8f2b00210>]",
            "[<ivy.ivy_ast.MixinBeforeDef object at 0x7fd8f10ec290>, <ivy.ivy_ast.MixinAfterDef object at 0x7fd8f10ec750>, <ivy.ivy_ast.MixinImplementDef object at 0x7fd8f10d7250>]",
            "[<ivy.ivy_ast.MixinAfterDef object at 0x7fd8f204a050>, <ivy.ivy_ast.MixinImplementDef object at 0x7fd8f2062550>]",
            "[<ivy.ivy_ast.MixinImplementDef object at 0x7fd8f161aed0>]",
            "[<ivy.ivy_ast.MixinAfterDef object at 0x7fd8f10867d0>, <ivy.ivy_ast.MixinImplementDef object at 0x7fd8f10bc610>]",
            "[<ivy.ivy_ast.MixinBeforeDef object at 0x7fd8f2c85890>, <ivy.ivy_ast.MixinAfterDef object at 0x7fd8f2ca1d50>, <ivy.ivy_ast.MixinImplementDef object at 0x7fd8f2c9cf50>]",
            "[<ivy.ivy_ast.MixinAfterDef object at 0x7fd8f1086c10>, <ivy.ivy_ast.MixinImplementDef object at 0x7fd8f10a9f10>]",
            "[<ivy.ivy_ast.MixinAfterDef object at 0x7fd8f2e5d750>, <ivy.ivy_ast.MixinImplementDef object at 0x7fd8f2d2ed50>]",
            "[<ivy.ivy_ast.MixinAfterDef object at 0x7fd8f22ec090>, <ivy.ivy_ast.MixinImplementDef object at 0x7fd8f227ba10>]",
            "[<ivy.ivy_ast.MixinBeforeDef object at 0x7fd8f2e61150>, <ivy.ivy_ast.MixinAfterDef object at 0x7fd8f3247790>]",
            "[<ivy.ivy_ast.MixinBeforeDef object at 0x7fd8f1219690>, <ivy.ivy_ast.MixinAfterDef object at 0x7fd8f119a850>, <ivy.ivy_ast.MixinImplementDef object at 0x7fd8f11a5d50>]",
            "[<ivy.ivy_ast.MixinAfterDef object at 0x7fd8f25b7c10>, <ivy.ivy_ast.MixinImplementDef object at 0x7fd8f25a8c90>]",
            "[<ivy.ivy_ast.MixinAfterDef object at 0x7fd8f2b392d0>, <ivy.ivy_ast.MixinImplementDef object at 0x7fd8f2ac3910>]",
            "[<ivy.ivy_ast.MixinAfterDef object at 0x7fd8f2d43410>, <ivy.ivy_ast.MixinImplementDef object at 0x7fd8f2cfe510>]",
            "[<ivy.ivy_ast.MixinImplementDef object at 0x7fd8f2ce1b10>]",
            "[<ivy.ivy_ast.MixinImplementDef object at 0x7fd8f214e590>]",
            "[<ivy.ivy_ast.MixinImplementDef object at 0x7fd8f1bf5b10>]",
            "[<ivy.ivy_ast.MixinBeforeDef object at 0x7fd8f1af6050>, <ivy.ivy_ast.MixinAfterDef object at 0x7fd8f1af3990>, <ivy.ivy_ast.MixinImplementDef object at 0x7fd8f19de050>]",
            "[<ivy.ivy_ast.MixinAfterDef object at 0x7fd8f2af1050>, <ivy.ivy_ast.MixinImplementDef object at 0x7fd8f2a7df90>]",
            "[<ivy.ivy_ast.MixinBeforeDef object at 0x7fd8f20b2b50>, <ivy.ivy_ast.MixinAfterDef object at 0x7fd8f2080410>, <ivy.ivy_ast.MixinImplementDef object at 0x7fd8f2047390>]",
            "[<ivy.ivy_ast.MixinImplementDef object at 0x7fd8f1104b50>]",
            "[<ivy.ivy_ast.MixinImplementDef object at 0x7fd8f11ed490>]",
            "[<ivy.ivy_ast.MixinAfterDef object at 0x7fd8f2642350>, <ivy.ivy_ast.MixinImplementDef object at 0x7fd8f264d110>]",
            "[<ivy.ivy_ast.MixinImplementDef object at 0x7fd8f2af3ad0>]",
            "[<ivy.ivy_ast.MixinAfterDef object at 0x7fd8f11e2e90>, <ivy.ivy_ast.MixinImplementDef object at 0x7fd8f11f7dd0>]",
            "[<ivy.ivy_ast.MixinImplementDef object at 0x7fd8f2026e10>]",
            "[<ivy.ivy_ast.MixinBeforeDef object at 0x7fd8f2edd350>, <ivy.ivy_ast.MixinAfterDef object at 0x7fd8f2f2e750>, <ivy.ivy_ast.MixinImplementDef object at 0x7fd8f2ee92d0>]",
            "[<ivy.ivy_ast.MixinImplementDef object at 0x7fd8f2a96990>]",
            "[<ivy.ivy_ast.MixinAfterDef object at 0x7fd8f2b52d50>, <ivy.ivy_ast.MixinImplementDef object at 0x7fd8f2b75750>]",
            "[<ivy.ivy_ast.MixinBeforeDef object at 0x7fd8f163b990>, <ivy.ivy_ast.MixinAfterDef object at 0x7fd8f16b8110>, <ivy.ivy_ast.MixinImplementDef object at 0x7fd8f165d3d0>]",
            "[<ivy.ivy_ast.MixinImplementDef object at 0x7fd8f2a8c390>]",
            "[<ivy.ivy_ast.MixinImplementDef object at 0x7fd8f2844190>]",
            "[<ivy.ivy_ast.MixinAfterDef object at 0x7fd8f2eddb90>, <ivy.ivy_ast.MixinImplementDef object at 0x7fd8f2ee14d0>]",
            "[<ivy.ivy_ast.MixinBeforeDef object at 0x7fd8f2e00a50>, <ivy.ivy_ast.MixinAfterDef object at 0x7fd8f2e0b250>, <ivy.ivy_ast.MixinBeforeDef object at 0x7fd8f1345990>]",
            "[<ivy.ivy_ast.MixinAfterDef object at 0x7fd8f2cc8bd0>, <ivy.ivy_ast.MixinImplementDef object at 0x7fd8f2bae450>]",
            "[<ivy.ivy_ast.MixinBeforeDef object at 0x7fd8f2683dd0>, <ivy.ivy_ast.MixinAfterDef object at 0x7fd8f26dde10>, <ivy.ivy_ast.MixinImplementDef object at 0x7fd8f2694a90>]",
            "[<ivy.ivy_ast.MixinBeforeDef object at 0x7fd8f1e354d0>, <ivy.ivy_ast.MixinAfterDef object at 0x7fd8f1e31c10>, <ivy.ivy_ast.MixinImplementDef object at 0x7fd8f1e38510>]",
            "[<ivy.ivy_ast.MixinImplementDef object at 0x7fd8f2a21ad0>]",
            "[<ivy.ivy_ast.MixinImplementDef object at 0x7fd8f1b844d0>]",
            "[<ivy.ivy_ast.MixinBeforeDef object at 0x7fd8f12bd110>, <ivy.ivy_ast.MixinAfterDef object at 0x7fd8f12cae50>]",
            "[<ivy.ivy_ast.MixinImplementDef object at 0x7fd8f14f5550>]",
            "[<ivy.ivy_ast.MixinAfterDef object at 0x7fd8f1256110>, <ivy.ivy_ast.MixinImplementDef object at 0x7fd8f1217410>]",
            "[<ivy.ivy_ast.MixinBeforeDef object at 0x7fd8f31160d0>, <ivy.ivy_ast.MixinAfterDef object at 0x7fd8f3174b50>, <ivy.ivy_ast.MixinBeforeDef object at 0x7fd8f1379450>]",
            "[<ivy.ivy_ast.MixinImplementDef object at 0x7fd8f271f5d0>]",
            "[<ivy.ivy_ast.MixinAfterDef object at 0x7fd8f2df92d0>, <ivy.ivy_ast.MixinImplementDef object at 0x7fd8f2d86510>]",
            "[<ivy.ivy_ast.MixinImplementDef object at 0x7fd8f10a5810>]",
            "[<ivy.ivy_ast.MixinImplementDef object at 0x7fd8f1dfca90>]",
            "[<ivy.ivy_ast.MixinBeforeDef object at 0x7fd8f1102f50>, <ivy.ivy_ast.MixinAfterDef object at 0x7fd8f114a150>, <ivy.ivy_ast.MixinImplementDef object at 0x7fd8f1104090>]",
            "[<ivy.ivy_ast.MixinBeforeDef object at 0x7fd8f113d710>, <ivy.ivy_ast.MixinAfterDef object at 0x7fd8f113b310>, <ivy.ivy_ast.MixinImplementDef object at 0x7fd8f1161090>]",
            "[<ivy.ivy_ast.MixinImplementDef object at 0x7fd8f1fd7b50>]",
            "[<ivy.ivy_ast.MixinBeforeDef object at 0x7fd8f22d73d0>, <ivy.ivy_ast.MixinAfterDef object at 0x7fd8f22cb7d0>, <ivy.ivy_ast.MixinImplementDef object at 0x7fd8f22e1110>]",
            "[<ivy.ivy_ast.MixinBeforeDef object at 0x7fd8f2cbfcd0>, <ivy.ivy_ast.MixinAfterDef object at 0x7fd8f2c87390>, <ivy.ivy_ast.MixinImplementDef object at 0x7fd8f2c15950>]",
            "[<ivy.ivy_ast.MixinBeforeDef object at 0x7fd8f2e00310>, <ivy.ivy_ast.MixinAfterDef object at 0x7fd8f2e00990>]",
            "[<ivy.ivy_ast.MixinImplementDef object at 0x7fd8f2011750>]",
            "[<ivy.ivy_ast.MixinAfterDef object at 0x7fd8f2c4d3d0>, <ivy.ivy_ast.MixinImplementDef object at 0x7fd8f2c44c50>]",
            "[<ivy.ivy_ast.MixinImplementDef object at 0x7fd8f1c6a550>]",
            "[<ivy.ivy_ast.MixinImplementDef object at 0x7fd8f13987d0>]",
            "[<ivy.ivy_ast.MixinImplementDef object at 0x7fd8f166b3d0>]",
            "[<ivy.ivy_ast.MixinImplementDef object at 0x7fd8f1fca050>]",
            "[<ivy.ivy_ast.MixinAfterDef object at 0x7fd8f1ddc290>, <ivy.ivy_ast.MixinImplementDef object at 0x7fd8f1def0d0>]",
            "[<ivy.ivy_ast.MixinAfterDef object at 0x7fd8f2385410>, <ivy.ivy_ast.MixinImplementDef object at 0x7fd8f25d7190>]",
            "[<ivy.ivy_ast.MixinImplementDef object at 0x7fd8f2033150>]",
            "[<ivy.ivy_ast.MixinImplementDef object at 0x7fd8f1b84b10>]",
            "[<ivy.ivy_ast.MixinAfterDef object at 0x7fd8f2740bd0>, <ivy.ivy_ast.MixinImplementDef object at 0x7fd8f27556d0>]",
            "[<ivy.ivy_ast.MixinBeforeDef object at 0x7fd8f3413cd0>, <ivy.ivy_ast.MixinAfterDef object at 0x7fd8f3437ed0>, <ivy.ivy_ast.MixinImplementDef object at 0x7fd8f336ca50>]",
            "[<ivy.ivy_ast.MixinBeforeDef object at 0x7fd8f2e1f550>, <ivy.ivy_ast.MixinAfterDef object at 0x7fd8f2e205d0>]",
            "[<ivy.ivy_ast.MixinImplementDef object at 0x7fd8f31fbe10>]",
            "[<ivy.ivy_ast.MixinImplementDef object at 0x7fd8f1bd4290>]",
            "[<ivy.ivy_ast.MixinBeforeDef object at 0x7fd8f1110550>, <ivy.ivy_ast.MixinAfterDef object at 0x7fd8f116e390>, <ivy.ivy_ast.MixinImplementDef object at 0x7fd8f110df90>]",
            "[<ivy.ivy_ast.MixinBeforeDef object at 0x7fd8f322dad0>, <ivy.ivy_ast.MixinAfterDef object at 0x7fd8f2fbfed0>, <ivy.ivy_ast.MixinImplementDef object at 0x7fd8f3116990>]",
            "[<ivy.ivy_ast.MixinImplementDef object at 0x7fd8f27b5b90>]",
            "[<ivy.ivy_ast.MixinBeforeDef object at 0x7fd8f16e82d0>, <ivy.ivy_ast.MixinAfterDef object at 0x7fd8f16f2190>, <ivy.ivy_ast.MixinImplementDef object at 0x7fd8f16f4a50>]",
            "[<ivy.ivy_ast.MixinAfterDef object at 0x7fd8f24fb7d0>, <ivy.ivy_ast.MixinImplementDef object at 0x7fd8f25dfd50>]",
            "[<ivy.ivy_ast.MixinImplementDef object at 0x7fd8f1bf9610>]",
            "[<ivy.ivy_ast.MixinImplementDef object at 0x7fd8f2f57610>]",
            "[<ivy.ivy_ast.MixinImplementDef object at 0x7fd8f1efa750>]",
            "[<ivy.ivy_ast.MixinImplementDef object at 0x7fd8f148a390>]",
            "[<ivy.ivy_ast.MixinBeforeDef object at 0x7fd8f2e8d290>, <ivy.ivy_ast.MixinAfterDef object at 0x7fd8f307b390>]",
            "[<ivy.ivy_ast.MixinImplementDef object at 0x7fd8f14d0050>]",
            "[<ivy.ivy_ast.MixinImplementDef object at 0x7fd8f1e221d0>]",
            "[<ivy.ivy_ast.MixinBeforeDef object at 0x7fd8f2607190>, <ivy.ivy_ast.MixinAfterDef object at 0x7fd8f2607950>, <ivy.ivy_ast.MixinImplementDef object at 0x7fd8f2613350>]",
            "[<ivy.ivy_ast.MixinAfterDef object at 0x7fd8f11ed590>, <ivy.ivy_ast.MixinImplementDef object at 0x7fd8f11a5510>]",
            "[<ivy.ivy_ast.MixinAfterDef object at 0x7fd8f3338bd0>, <ivy.ivy_ast.MixinImplementDef object at 0x7fd8f32dc090>]",
            "[<ivy.ivy_ast.MixinImplementDef object at 0x7fd8f2b55dd0>]",
            "[<ivy.ivy_ast.MixinAfterDef object at 0x7fd8f203bf10>, <ivy.ivy_ast.MixinImplementDef object at 0x7fd8f203d5d0>]",
            "[<ivy.ivy_ast.MixinAfterDef object at 0x7fd8f1102e10>, <ivy.ivy_ast.MixinImplementDef object at 0x7fd8f1178850>]",
            "[<ivy.ivy_ast.MixinImplementDef object at 0x7fd8f21a3f50>]"
        ],
        "rely": [],
        "delegates": [],
        "sort_destructors": [
            "[Const('quic_packet_vn.ptype', FunctionSort(UninterpretedSort('quic_packet_vn',), EnumeratedSort('quic_packet_type', ('quic_packet_type.initial', 'quic_packet_type.zero_rtt', 'quic_packet_type.handshake', 'quic_packet_type.one_rtt', 'quic_packet_type.version_negociation', 'quic_packet_type.retry')))), Const('quic_packet_vn.pversion', FunctionSort(UninterpretedSort('quic_packet_vn',), UninterpretedSort('version',))), Const('quic_packet_vn.dst_cid', FunctionSort(UninterpretedSort('quic_packet_vn',), UninterpretedSort('cid',))), Const('quic_packet_vn.src_cid', FunctionSort(UninterpretedSort('quic_packet_vn',), UninterpretedSort('cid',))), Const('quic_packet_vn.supported_version', FunctionSort(UninterpretedSort('quic_packet_vn',), UninterpretedSort('versions_bv',)))]",
            "[Const('unknown_transport_parameter.unknown', FunctionSort(UninterpretedSort('unknown_transport_parameter',), UninterpretedSort('stream_pos',)))]",
            [],
            "[Const('frame.stream.off', FunctionSort(UninterpretedSort('frame.stream',), BooleanSort())), Const('frame.stream.len', FunctionSort(UninterpretedSort('frame.stream',), BooleanSort())), Const('frame.stream.fin', FunctionSort(UninterpretedSort('frame.stream',), BooleanSort())), Const('frame.stream.id', FunctionSort(UninterpretedSort('frame.stream',), UninterpretedSort('stream_id',))), Const('frame.stream.offset', FunctionSort(UninterpretedSort('frame.stream',), UninterpretedSort('stream_pos',))), Const('frame.stream.length', FunctionSort(UninterpretedSort('frame.stream',), UninterpretedSort('stream_pos',))), Const('frame.stream.data', FunctionSort(UninterpretedSort('frame.stream',), UninterpretedSort('stream_data',)))]",
            "[Const('tls.psk_identity.identity', FunctionSort(UninterpretedSort('tls.psk_identity',), UninterpretedSort('stream_data',))), Const('tls.psk_identity.obfuscated_ticket_age', FunctionSort(UninterpretedSort('tls.psk_identity',), UninterpretedSort('stream_pos',)))]",
            "[Const('original_destination_connection_id.is_set', FunctionSort(UninterpretedSort('trans_params_struct',), BooleanSort())), Const('original_destination_connection_id.value', FunctionSort(UninterpretedSort('trans_params_struct',), UninterpretedSort('original_destination_connection_id',))), Const('initial_max_stream_data_bidi_local.is_set', FunctionSort(UninterpretedSort('trans_params_struct',), BooleanSort())), Const('initial_max_stream_data_bidi_local.value', FunctionSort(UninterpretedSort('trans_params_struct',), UninterpretedSort('initial_max_stream_data_bidi_local',))), Const('initial_max_data.is_set', FunctionSort(UninterpretedSort('trans_params_struct',), BooleanSort())), Const('initial_max_data.value', FunctionSort(UninterpretedSort('trans_params_struct',), UninterpretedSort('initial_max_data',))), Const('initial_max_stream_id_bidi.is_set', FunctionSort(UninterpretedSort('trans_params_struct',), BooleanSort())), Const('initial_max_stream_id_bidi.value', FunctionSort(UninterpretedSort('trans_params_struct',), UninterpretedSort('initial_max_stream_id_bidi',))), Const('max_idle_timeout.is_set', FunctionSort(UninterpretedSort('trans_params_struct',), BooleanSort())), Const('max_idle_timeout.value', FunctionSort(UninterpretedSort('trans_params_struct',), UninterpretedSort('max_idle_timeout',))), Const('preferred_address.is_set', FunctionSort(UninterpretedSort('trans_params_struct',), BooleanSort())), Const('preferred_address.value', FunctionSort(UninterpretedSort('trans_params_struct',), UninterpretedSort('preferred_address',))), Const('max_packet_size.is_set', FunctionSort(UninterpretedSort('trans_params_struct',), BooleanSort())), Const('max_packet_size.value', FunctionSort(UninterpretedSort('trans_params_struct',), UninterpretedSort('max_packet_size',))), Const('stateless_reset_token.is_set', FunctionSort(UninterpretedSort('trans_params_struct',), BooleanSort())), Const('stateless_reset_token.value', FunctionSort(UninterpretedSort('trans_params_struct',), UninterpretedSort('stateless_reset_token',))), Const('ack_delay_exponent.is_set', FunctionSort(UninterpretedSort('trans_params_struct',), BooleanSort())), Const('ack_delay_exponent.value', FunctionSort(UninterpretedSort('trans_params_struct',), UninterpretedSort('ack_delay_exponent',))), Const('initial_max_stream_id_uni.is_set', FunctionSort(UninterpretedSort('trans_params_struct',), BooleanSort())), Const('initial_max_stream_id_uni.value', FunctionSort(UninterpretedSort('trans_params_struct',), UninterpretedSort('initial_max_stream_id_uni',))), Const('disable_active_migration.is_set', FunctionSort(UninterpretedSort('trans_params_struct',), BooleanSort())), Const('disable_active_migration.value', FunctionSort(UninterpretedSort('trans_params_struct',), UninterpretedSort('disable_active_migration',))), Const('initial_max_stream_data_bidi_remote.is_set', FunctionSort(UninterpretedSort('trans_params_struct',), BooleanSort())), Const('initial_max_stream_data_bidi_remote.value', FunctionSort(UninterpretedSort('trans_params_struct',), UninterpretedSort('initial_max_stream_data_bidi_remote',))), Const('initial_max_stream_data_uni.is_set', FunctionSort(UninterpretedSort('trans_params_struct',), BooleanSort())), Const('initial_max_stream_data_uni.value', FunctionSort(UninterpretedSort('trans_params_struct',), UninterpretedSort('initial_max_stream_data_uni',))), Const('max_ack_delay.is_set', FunctionSort(UninterpretedSort('trans_params_struct',), BooleanSort())), Const('max_ack_delay.value', FunctionSort(UninterpretedSort('trans_params_struct',), UninterpretedSort('max_ack_delay',))), Const('active_connection_id_limit.is_set', FunctionSort(UninterpretedSort('trans_params_struct',), BooleanSort())), Const('active_connection_id_limit.value', FunctionSort(UninterpretedSort('trans_params_struct',), UninterpretedSort('active_connection_id_limit',))), Const('initial_source_connection_id.is_set', FunctionSort(UninterpretedSort('trans_params_struct',), BooleanSort())), Const('initial_source_connection_id.value', FunctionSort(UninterpretedSort('trans_params_struct',), UninterpretedSort('initial_source_connection_id',))), Const('retry_source_connection_id.is_set', FunctionSort(UninterpretedSort('trans_params_struct',), BooleanSort())), Const('retry_source_connection_id.value', FunctionSort(UninterpretedSort('trans_params_struct',), UninterpretedSort('retry_source_connection_id',))), Const('loss_bits.is_set', FunctionSort(UninterpretedSort('trans_params_struct',), BooleanSort())), Const('loss_bits.value', FunctionSort(UninterpretedSort('trans_params_struct',), UninterpretedSort('loss_bits',))), Const('grease_quic_bit.is_set', FunctionSort(UninterpretedSort('trans_params_struct',), BooleanSort())), Const('grease_quic_bit.value', FunctionSort(UninterpretedSort('trans_params_struct',), UninterpretedSort('grease_quic_bit',))), Const('enable_time_stamp.is_set', FunctionSort(UninterpretedSort('trans_params_struct',), BooleanSort())), Const('enable_time_stamp.value', FunctionSort(UninterpretedSort('trans_params_struct',), UninterpretedSort('enable_time_stamp',))), Const('min_ack_delay.is_set', FunctionSort(UninterpretedSort('trans_params_struct',), BooleanSort())), Const('min_ack_delay.value', FunctionSort(UninterpretedSort('trans_params_struct',), UninterpretedSort('min_ack_delay',))), Const('version_information.is_set', FunctionSort(UninterpretedSort('trans_params_struct',), BooleanSort())), Const('version_information.value', FunctionSort(UninterpretedSort('trans_params_struct',), UninterpretedSort('version_information',))), Const('unknown_ignore.is_set', FunctionSort(UninterpretedSort('trans_params_struct',), BooleanSort())), Const('unknown_ignore.value', FunctionSort(UninterpretedSort('trans_params_struct',), UninterpretedSort('unknown_ignore',))), Const('unknown_transport_parameter.is_set', FunctionSort(UninterpretedSort('trans_params_struct',), BooleanSort())), Const('unknown_transport_parameter.value', FunctionSort(UninterpretedSort('trans_params_struct',), UninterpretedSort('unknown_transport_parameter',)))]",
            "[Const('prot.hdr_long', FunctionSort(UninterpretedSort('prot.header_info',), BooleanSort())), Const('prot.hdr_type', FunctionSort(UninterpretedSort('prot.header_info',), UninterpretedSort('type_bits',))), Const('prot.dcid', FunctionSort(UninterpretedSort('prot.header_info',), UninterpretedSort('cid',))), Const('prot.scid', FunctionSort(UninterpretedSort('prot.header_info',), UninterpretedSort('cid',))), Const('prot.payload_length', FunctionSort(UninterpretedSort('prot.header_info',), UninterpretedSort('stream_pos',))), Const('prot.token_length', FunctionSort(UninterpretedSort('prot.header_info',), UninterpretedSort('stream_pos',))), Const('prot.payload_length_pos', FunctionSort(UninterpretedSort('prot.header_info',), UninterpretedSort('stream_pos',))), Const('prot.pkt_num_pos', FunctionSort(UninterpretedSort('prot.header_info',), UninterpretedSort('stream_pos',)))]",
            "[Const('frame.ack_frequency.seq_num', FunctionSort(UninterpretedSort('frame.ack_frequency',), UninterpretedSort('pkt_num',))), Const('frame.ack_frequency.packet_tolerence', FunctionSort(UninterpretedSort('frame.ack_frequency',), UninterpretedSort('stream_pos',))), Const('frame.ack_frequency.update_max_ack_delay', FunctionSort(UninterpretedSort('frame.ack_frequency',), UninterpretedSort('microsecs',))), Const('frame.ack_frequency.ignore_order', FunctionSort(UninterpretedSort('frame.ack_frequency',), BooleanSort()))]",
            "[Const('original_destination_connection_id.dcid', FunctionSort(UninterpretedSort('original_destination_connection_id',), UninterpretedSort('cid',)))]",
            "[Const('initial_max_stream_id_bidi.stream_id_16', FunctionSort(UninterpretedSort('initial_max_stream_id_bidi',), UninterpretedSort('stream_id',)))]",
            "[Const('frame.new_connection_id.seq_num', FunctionSort(UninterpretedSort('frame.new_connection_id',), UninterpretedSort('cid_seq',))), Const('frame.new_connection_id.retire_prior_to', FunctionSort(UninterpretedSort('frame.new_connection_id',), UninterpretedSort('cid_seq',))), Const('frame.new_connection_id.length', FunctionSort(UninterpretedSort('frame.new_connection_id',), UninterpretedSort('cid_length',))), Const('frame.new_connection_id.scid', FunctionSort(UninterpretedSort('frame.new_connection_id',), UninterpretedSort('cid',))), Const('frame.new_connection_id.token', FunctionSort(UninterpretedSort('frame.new_connection_id',), UninterpretedSort('reset_token',)))]",
            "[Const('preferred_address.ip_addr', FunctionSort(UninterpretedSort('preferred_address',), UninterpretedSort('ip.addr',))), Const('preferred_address.ip_port', FunctionSort(UninterpretedSort('preferred_address',), UninterpretedSort('ip.port',))), Const('preferred_address.ip6_addr', FunctionSort(UninterpretedSort('preferred_address',), UninterpretedSort('ipv6.addr',))), Const('preferred_address.ip6_port', FunctionSort(UninterpretedSort('preferred_address',), UninterpretedSort('ipv6.port',))), Const('preferred_address.pcid_len', FunctionSort(UninterpretedSort('preferred_address',), UninterpretedSort('stream_pos',))), Const('preferred_address.pcid', FunctionSort(UninterpretedSort('preferred_address',), UninterpretedSort('cid',))), Const('preferred_address.pref_token', FunctionSort(UninterpretedSort('preferred_address',), UninterpretedSort('ipv6.addr',)))]",
            "[Const('active_connection_id_limit.stream_pos_32', FunctionSort(UninterpretedSort('active_connection_id_limit',), UninterpretedSort('stream_pos',)))]",
            "[Const('quic_packet_0rtt.ptype', FunctionSort(UninterpretedSort('quic_packet_0rtt',), EnumeratedSort('quic_packet_type', ('quic_packet_type.initial', 'quic_packet_type.zero_rtt', 'quic_packet_type.handshake', 'quic_packet_type.one_rtt', 'quic_packet_type.version_negociation', 'quic_packet_type.retry')))), Const('quic_packet_0rtt.pversion', FunctionSort(UninterpretedSort('quic_packet_0rtt',), UninterpretedSort('version',))), Const('quic_packet_0rtt.dst_cid', FunctionSort(UninterpretedSort('quic_packet_0rtt',), UninterpretedSort('cid',))), Const('quic_packet_0rtt.src_cid', FunctionSort(UninterpretedSort('quic_packet_0rtt',), UninterpretedSort('cid',))), Const('quic_packet_0rtt.seq_num', FunctionSort(UninterpretedSort('quic_packet_0rtt',), UninterpretedSort('pkt_num',))), Const('quic_packet_0rtt.payload', FunctionSort(UninterpretedSort('quic_packet_0rtt',), UninterpretedSort('frame.arr',)))]",
            "[Const('replayed_quic_packet_0rtt.ptype', FunctionSort(UninterpretedSort('replayed_quic_packet_0rtt',), EnumeratedSort('quic_packet_type', ('quic_packet_type.initial', 'quic_packet_type.zero_rtt', 'quic_packet_type.handshake', 'quic_packet_type.one_rtt', 'quic_packet_type.version_negociation', 'quic_packet_type.retry')))), Const('replayed_quic_packet_0rtt.pversion', FunctionSort(UninterpretedSort('replayed_quic_packet_0rtt',), UninterpretedSort('version',))), Const('replayed_quic_packet_0rtt.dst_cid', FunctionSort(UninterpretedSort('replayed_quic_packet_0rtt',), UninterpretedSort('cid',))), Const('replayed_quic_packet_0rtt.src_cid', FunctionSort(UninterpretedSort('replayed_quic_packet_0rtt',), UninterpretedSort('cid',))), Const('replayed_quic_packet_0rtt.seq_num', FunctionSort(UninterpretedSort('replayed_quic_packet_0rtt',), UninterpretedSort('pkt_num',))), Const('replayed_quic_packet_0rtt.payload', FunctionSort(UninterpretedSort('replayed_quic_packet_0rtt',), UninterpretedSort('frame.arr',)))]",
            [],
            "[Const('frame.path_challenge.data', FunctionSort(UninterpretedSort('frame.path_challenge',), UninterpretedSort('stream_data',)))]",
            "[Const('frame.retire_connection_id.seq_num', FunctionSort(UninterpretedSort('frame.retire_connection_id',), UninterpretedSort('cid_seq',)))]",
            "[Const('frame.data_blocked.pos', FunctionSort(UninterpretedSort('frame.data_blocked',), UninterpretedSort('stream_pos',)))]",
            "[Const('frame.stream_data_blocked.id', FunctionSort(UninterpretedSort('frame.stream_data_blocked',), UninterpretedSort('stream_id',))), Const('frame.stream_data_blocked.pos', FunctionSort(UninterpretedSort('frame.stream_data_blocked',), UninterpretedSort('stream_pos',)))]",
            "[Const('tls.pre_shared_key_server.selected_identity', FunctionSort(UninterpretedSort('tls.pre_shared_key_server',), UninterpretedSort('stream_pos',)))]",
            "[Const('tls.server_hello.server_version', FunctionSort(UninterpretedSort('tls.server_hello',), UninterpretedSort('tls.protocol_version',))), Const('tls.server_hello.rand_info', FunctionSort(UninterpretedSort('tls.server_hello',), UninterpretedSort('tls.random',))), Const('tls.server_hello.session_id', FunctionSort(UninterpretedSort('tls.server_hello',), UninterpretedSort('stream_data',))), Const('tls.server_hello.the_cipher_suite', FunctionSort(UninterpretedSort('tls.server_hello',), UninterpretedSort('tls.cipher_suite',))), Const('tls.server_hello.the_compression_method', FunctionSort(UninterpretedSort('tls.server_hello',), UninterpretedSort('tls.compression_method',))), Const('tls.server_hello.extensions', FunctionSort(UninterpretedSort('tls.server_hello',), UninterpretedSort('vector[tls.extension]',)))]",
            "[Const('tls.unknown_message.mtype', FunctionSort(UninterpretedSort('tls.unknown_message',), UninterpretedSort('tls.message_type',))), Const('tls.unknown_message.unknown_message_bytes', FunctionSort(UninterpretedSort('tls.unknown_message',), UninterpretedSort('stream_data',)))]",
            "[Const('frame.max_streams_bidi.id', FunctionSort(UninterpretedSort('frame.max_streams_bidi',), UninterpretedSort('stream_id',)))]",
            "[Const('ip.endpoint.protocol', FunctionSort(UninterpretedSort('ip.endpoint',), EnumeratedSort('ip.protocol', ('ip.udp', 'ip.tcp')))), Const('ip.endpoint.addr', FunctionSort(UninterpretedSort('ip.endpoint',), UninterpretedSort('ip.addr',))), Const('ip.endpoint.port', FunctionSort(UninterpretedSort('ip.endpoint',), UninterpretedSort('ip.port',))), Const('ip.endpoint.interface', FunctionSort(UninterpretedSort('ip.endpoint',), EnumeratedSort('ip.interface', ('ip.lo', 'ip.ivy'))))]",
            [],
            "[Const('frame.path_response.data', FunctionSort(UninterpretedSort('frame.path_response',), UninterpretedSort('stream_data',)))]",
            "[Const('frame.crypto.offset', FunctionSort(UninterpretedSort('frame.crypto',), UninterpretedSort('stream_pos',))), Const('frame.crypto.length', FunctionSort(UninterpretedSort('frame.crypto',), UninterpretedSort('stream_pos',))), Const('frame.crypto.data', FunctionSort(UninterpretedSort('frame.crypto',), UninterpretedSort('stream_data',)))]",
            "[Const('frame.application_close.err_code', FunctionSort(UninterpretedSort('frame.application_close',), UninterpretedSort('error_code',))), Const('frame.application_close.reason_phrase_length', FunctionSort(UninterpretedSort('frame.application_close',), UninterpretedSort('stream_pos',))), Const('frame.application_close.reason_phrase', FunctionSort(UninterpretedSort('frame.application_close',), UninterpretedSort('stream_data',)))]",
            "[Const('min_ack_delay.exponent_8', FunctionSort(UninterpretedSort('min_ack_delay',), UninterpretedSort('microsecs',)))]",
            [],
            "[Const('enable_time_stamp.stream_pos_32', FunctionSort(UninterpretedSort('enable_time_stamp',), UninterpretedSort('stream_pos',)))]",
            "[Const('initial_max_stream_data_bidi_local.stream_pos_32', FunctionSort(UninterpretedSort('initial_max_stream_data_bidi_local',), UninterpretedSort('stream_pos',)))]",
            "[Const('initial_max_stream_id_uni.stream_id_16', FunctionSort(UninterpretedSort('initial_max_stream_id_uni',), UninterpretedSort('stream_id',)))]",
            "[Const('initial_source_connection_id.scid', FunctionSort(UninterpretedSort('initial_source_connection_id',), UninterpretedSort('cid',)))]",
            [],
            "[Const('tls.psk_key_exchange_modes.content', FunctionSort(UninterpretedSort('tls.psk_key_exchange_modes',), UninterpretedSort('stream_data',)))]",
            "[Const('tls_api.upper.ok', FunctionSort(UninterpretedSort('tls_api.upper.decrypt_result',), BooleanSort())), Const('tls_api.upper.data', FunctionSort(UninterpretedSort('tls_api.upper.decrypt_result',), UninterpretedSort('stream_data',))), Const('tls_api.upper.payload', FunctionSort(UninterpretedSort('tls_api.upper.decrypt_result',), UninterpretedSort('stream_data',)))]",
            "[Const('frame.max_stream_data.id', FunctionSort(UninterpretedSort('frame.max_stream_data',), UninterpretedSort('stream_id',))), Const('frame.max_stream_data.pos', FunctionSort(UninterpretedSort('frame.max_stream_data',), UninterpretedSort('stream_pos',)))]",
            "[Const('frame.rst_stream.id', FunctionSort(UninterpretedSort('frame.rst_stream',), UninterpretedSort('stream_id',))), Const('frame.rst_stream.err_code', FunctionSort(UninterpretedSort('frame.rst_stream',), UninterpretedSort('error_code',))), Const('frame.rst_stream.final_offset', FunctionSort(UninterpretedSort('frame.rst_stream',), UninterpretedSort('stream_pos',)))]",
            "[Const('ipv6.endpoint.protocol', FunctionSort(UninterpretedSort('ipv6.endpoint',), EnumeratedSort('ipv6.protocol', ('ipv6.udp6', 'ipv6.tcp6')))), Const('ipv6.endpoint.addr', FunctionSort(UninterpretedSort('ipv6.endpoint',), UninterpretedSort('ipv6.addr',))), Const('ipv6.endpoint.port', FunctionSort(UninterpretedSort('ipv6.endpoint',), UninterpretedSort('ipv6.port',)))]",
            "[Const('tls.handshake_record.version', FunctionSort(UninterpretedSort('tls.handshake_record',), UninterpretedSort('tls.protocol_version',))), Const('tls.handshake_record.fragment', FunctionSort(UninterpretedSort('tls.handshake_record',), UninterpretedSort('vector[tls.handshake]',)))]",
            "[Const('initial_max_stream_data_uni.stream_pos_32', FunctionSort(UninterpretedSort('initial_max_stream_data_uni',), UninterpretedSort('stream_pos',)))]",
            [],
            "[Const('tls.pre_shared_key_client.psk_identities', FunctionSort(UninterpretedSort('tls.pre_shared_key_client',), UninterpretedSort('vector[tls.psk_identity]',))), Const('tls.pre_shared_key_client.psk_binder', FunctionSort(UninterpretedSort('tls.pre_shared_key_client',), UninterpretedSort('stream_data',)))]",
            "[Const('tls.early_data.max_early_data_size', FunctionSort(UninterpretedSort('tls.early_data',), UninterpretedSort('stream_pos',)))]",
            "[Const('frame.ack_ecn.largest_acked', FunctionSort(UninterpretedSort('frame.ack_ecn',), UninterpretedSort('pkt_num',))), Const('frame.ack_ecn.ack_delay', FunctionSort(UninterpretedSort('frame.ack_ecn',), UninterpretedSort('microsecs',))), Const('frame.ack_ecn.ack_ranges', FunctionSort(UninterpretedSort('frame.ack_ecn',), UninterpretedSort('frame.ack_ecn.range.arr',)))]",
            "[Const('loss_bits.unknown', FunctionSort(UninterpretedSort('loss_bits',), UninterpretedSort('stream_pos',)))]",
            "[Const('frame.streams_blocked.id', FunctionSort(UninterpretedSort('frame.streams_blocked',), UninterpretedSort('cid',)))]",
            [],
            "[Const('tls.change_cipher_spec.version', FunctionSort(UninterpretedSort('tls.change_cipher_spec',), UninterpretedSort('tls.protocol_version',))), Const('tls.change_cipher_spec.content', FunctionSort(UninterpretedSort('tls.change_cipher_spec',), UninterpretedSort('stream_data',)))]",
            "[Const('frame.ack.largest_acked', FunctionSort(UninterpretedSort('frame.ack',), UninterpretedSort('pkt_num',))), Const('frame.ack.ack_delay', FunctionSort(UninterpretedSort('frame.ack',), UninterpretedSort('microsecs',))), Const('frame.ack.ack_ranges', FunctionSort(UninterpretedSort('frame.ack',), UninterpretedSort('frame.ack.range.arr',)))]",
            [],
            "[Const('frame.stop_sending.id', FunctionSort(UninterpretedSort('frame.stop_sending',), UninterpretedSort('stream_id',))), Const('frame.stop_sending.err_code', FunctionSort(UninterpretedSort('frame.stop_sending',), UninterpretedSort('error_code',)))]",
            [],
            "[Const('quic_transport_parameters.transport_parameters', FunctionSort(UninterpretedSort('quic_transport_parameters',), UninterpretedSort('vector[transport_parameter]',)))]",
            "[Const('frame.ack_ecn.range.gap', FunctionSort(UninterpretedSort('frame.ack_ecn.range',), UninterpretedSort('pkt_num',))), Const('frame.ack_ecn.range.ranges', FunctionSort(UninterpretedSort('frame.ack_ecn.range',), UninterpretedSort('pkt_num',)))]",
            "[Const('initial_max_stream_data_bidi_remote.stream_pos_32', FunctionSort(UninterpretedSort('initial_max_stream_data_bidi_remote',), UninterpretedSort('stream_pos',)))]",
            "[Const('stateless_reset_token.data_8', FunctionSort(UninterpretedSort('stateless_reset_token',), UninterpretedSort('ipv6.addr',)))]",
            "[Const('tls.new_session_ticket.ticket_lifetime', FunctionSort(UninterpretedSort('tls.new_session_ticket',), UninterpretedSort('stream_pos',))), Const('tls.new_session_ticket.ticket_age_add', FunctionSort(UninterpretedSort('tls.new_session_ticket',), UninterpretedSort('stream_pos',))), Const('tls.new_session_ticket.ticket_nonce', FunctionSort(UninterpretedSort('tls.new_session_ticket',), UninterpretedSort('stream_data',))), Const('tls.new_session_ticket.ticket', FunctionSort(UninterpretedSort('tls.new_session_ticket',), UninterpretedSort('stream_data',))), Const('tls.new_session_ticket.extensions', FunctionSort(UninterpretedSort('tls.new_session_ticket',), UninterpretedSort('vector[tls.extension]',)))]",
            [],
            "[Const('max_packet_size.stream_pos_16', FunctionSort(UninterpretedSort('max_packet_size',), UninterpretedSort('stream_pos',)))]",
            "[Const('frame.streams_blocked_bidi.id', FunctionSort(UninterpretedSort('frame.streams_blocked_bidi',), UninterpretedSort('cid',)))]",
            [],
            [],
            "[Const('tls.application_data_record.version', FunctionSort(UninterpretedSort('tls.application_data_record',), UninterpretedSort('tls.protocol_version',))), Const('tls.application_data_record.content', FunctionSort(UninterpretedSort('tls.application_data_record',), UninterpretedSort('stream_data',)))]",
            "[Const('version_information.chosen_version', FunctionSort(UninterpretedSort('version_information',), UninterpretedSort('version',))), Const('version_information.other_version', FunctionSort(UninterpretedSort('version_information',), UninterpretedSort('versions_bv',)))]",
            "[Const('max_idle_timeout.seconds_16', FunctionSort(UninterpretedSort('max_idle_timeout',), UninterpretedSort('microsecs',)))]",
            "[Const('servers.server.ep', FunctionSort(UninterpretedSort('servers.server',), UninterpretedSort('ip.endpoint',))), Const('servers.server.tls_id', FunctionSort(UninterpretedSort('servers.server',), UninterpretedSort('tls_api.id',))), Const('servers.server.enc_level', FunctionSort(UninterpretedSort('servers.server',), EnumeratedSort('quic_packet_type', ('quic_packet_type.initial', 'quic_packet_type.zero_rtt', 'quic_packet_type.handshake', 'quic_packet_type.one_rtt', 'quic_packet_type.version_negociation', 'quic_packet_type.retry'))))]",
            "[Const('tls.client_hello.client_version', FunctionSort(UninterpretedSort('tls.client_hello',), UninterpretedSort('tls.protocol_version',))), Const('tls.client_hello.rand_info', FunctionSort(UninterpretedSort('tls.client_hello',), UninterpretedSort('tls.random',))), Const('tls.client_hello.session_id', FunctionSort(UninterpretedSort('tls.client_hello',), UninterpretedSort('stream_data',))), Const('tls.client_hello.cipher_suites', FunctionSort(UninterpretedSort('tls.client_hello',), UninterpretedSort('vector[tls.cipher_suite]',))), Const('tls.client_hello.compression_methods', FunctionSort(UninterpretedSort('tls.client_hello',), UninterpretedSort('vector[tls.compression_method]',))), Const('tls.client_hello.extensions', FunctionSort(UninterpretedSort('tls.client_hello',), UninterpretedSort('vector[tls.extension]',)))]",
            "[Const('quic_packet_coal_0rtt.ptype_i', FunctionSort(UninterpretedSort('quic_packet_coal_0rtt',), EnumeratedSort('quic_packet_type', ('quic_packet_type.initial', 'quic_packet_type.zero_rtt', 'quic_packet_type.handshake', 'quic_packet_type.one_rtt', 'quic_packet_type.version_negociation', 'quic_packet_type.retry')))), Const('quic_packet_coal_0rtt.pversion_i', FunctionSort(UninterpretedSort('quic_packet_coal_0rtt',), UninterpretedSort('version',))), Const('quic_packet_coal_0rtt.dst_cid_i', FunctionSort(UninterpretedSort('quic_packet_coal_0rtt',), UninterpretedSort('cid',))), Const('quic_packet_coal_0rtt.src_cid_i', FunctionSort(UninterpretedSort('quic_packet_coal_0rtt',), UninterpretedSort('cid',))), Const('quic_packet_coal_0rtt.token_i', FunctionSort(UninterpretedSort('quic_packet_coal_0rtt',), UninterpretedSort('stream_data',))), Const('quic_packet_coal_0rtt.seq_num_i', FunctionSort(UninterpretedSort('quic_packet_coal_0rtt',), UninterpretedSort('pkt_num',))), Const('quic_packet_coal_0rtt.payload_i', FunctionSort(UninterpretedSort('quic_packet_coal_0rtt',), UninterpretedSort('frame.arr',))), Const('quic_packet_coal_0rtt.ptype', FunctionSort(UninterpretedSort('quic_packet_coal_0rtt',), EnumeratedSort('quic_packet_type', ('quic_packet_type.initial', 'quic_packet_type.zero_rtt', 'quic_packet_type.handshake', 'quic_packet_type.one_rtt', 'quic_packet_type.version_negociation', 'quic_packet_type.retry')))), Const('quic_packet_coal_0rtt.pversion', FunctionSort(UninterpretedSort('quic_packet_coal_0rtt',), UninterpretedSort('version',))), Const('quic_packet_coal_0rtt.dst_cid', FunctionSort(UninterpretedSort('quic_packet_coal_0rtt',), UninterpretedSort('cid',))), Const('quic_packet_coal_0rtt.src_cid', FunctionSort(UninterpretedSort('quic_packet_coal_0rtt',), UninterpretedSort('cid',))), Const('quic_packet_coal_0rtt.seq_num', FunctionSort(UninterpretedSort('quic_packet_coal_0rtt',), UninterpretedSort('pkt_num',))), Const('quic_packet_coal_0rtt.payload', FunctionSort(UninterpretedSort('quic_packet_coal_0rtt',), UninterpretedSort('frame.arr',)))]",
            "[Const('tls.unknown_extension.etype', FunctionSort(UninterpretedSort('tls.unknown_extension',), UninterpretedSort('tls.extension_type',))), Const('tls.unknown_extension.content', FunctionSort(UninterpretedSort('tls.unknown_extension',), UninterpretedSort('stream_data',)))]",
            [],
            "[Const('frame.connection_close.err_code', FunctionSort(UninterpretedSort('frame.connection_close',), UninterpretedSort('error_code',))), Const('frame.connection_close.frame_type', FunctionSort(UninterpretedSort('frame.connection_close',), UninterpretedSort('error_code',))), Const('frame.connection_close.reason_phrase_length', FunctionSort(UninterpretedSort('frame.connection_close',), UninterpretedSort('stream_pos',))), Const('frame.connection_close.reason_phrase', FunctionSort(UninterpretedSort('frame.connection_close',), UninterpretedSort('stream_data',)))]",
            [],
            "[Const('frame.max_data.pos', FunctionSort(UninterpretedSort('frame.max_data',), UninterpretedSort('stream_pos',)))]",
            "[Const('forged_quic_packet_vn.ptype', FunctionSort(UninterpretedSort('forged_quic_packet_vn',), EnumeratedSort('quic_packet_type', ('quic_packet_type.initial', 'quic_packet_type.zero_rtt', 'quic_packet_type.handshake', 'quic_packet_type.one_rtt', 'quic_packet_type.version_negociation', 'quic_packet_type.retry')))), Const('forged_quic_packet_vn.pversion', FunctionSort(UninterpretedSort('forged_quic_packet_vn',), UninterpretedSort('version',))), Const('forged_quic_packet_vn.dst_cid', FunctionSort(UninterpretedSort('forged_quic_packet_vn',), UninterpretedSort('cid',))), Const('forged_quic_packet_vn.src_cid', FunctionSort(UninterpretedSort('forged_quic_packet_vn',), UninterpretedSort('cid',))), Const('forged_quic_packet_vn.supported_version', FunctionSort(UninterpretedSort('forged_quic_packet_vn',), UninterpretedSort('versions_bv',)))]",
            "[Const('frame.new_token.length', FunctionSort(UninterpretedSort('frame.new_token',), UninterpretedSort('stream_pos',))), Const('frame.new_token.data', FunctionSort(UninterpretedSort('frame.new_token',), UninterpretedSort('stream_data',)))]",
            "[Const('tls.gmt_unix_time', FunctionSort(UninterpretedSort('tls.random',), UninterpretedSort('tls.gmt',))), Const('tls.random_bytes', FunctionSort(UninterpretedSort('tls.random',), UninterpretedSort('stream_data',)))]",
            "[Const('frame.malicious_frame.data', FunctionSort(UninterpretedSort('frame.malicious_frame',), UninterpretedSort('stream_data',)))]",
            "[Const('forged_quic_packet.ptype', FunctionSort(UninterpretedSort('forged_quic_packet',), EnumeratedSort('quic_packet_type', ('quic_packet_type.initial', 'quic_packet_type.zero_rtt', 'quic_packet_type.handshake', 'quic_packet_type.one_rtt', 'quic_packet_type.version_negociation', 'quic_packet_type.retry')))), Const('forged_quic_packet.pversion', FunctionSort(UninterpretedSort('forged_quic_packet',), UninterpretedSort('version',))), Const('forged_quic_packet.dst_cid', FunctionSort(UninterpretedSort('forged_quic_packet',), UninterpretedSort('cid',))), Const('forged_quic_packet.src_cid', FunctionSort(UninterpretedSort('forged_quic_packet',), UninterpretedSort('cid',))), Const('forged_quic_packet.token', FunctionSort(UninterpretedSort('forged_quic_packet',), UninterpretedSort('stream_data',))), Const('forged_quic_packet.seq_num', FunctionSort(UninterpretedSort('forged_quic_packet',), UninterpretedSort('pkt_num',))), Const('forged_quic_packet.payload', FunctionSort(UninterpretedSort('forged_quic_packet',), UninterpretedSort('frame.arr',)))]",
            [],
            "[Const('initial_max_data.stream_pos_32', FunctionSort(UninterpretedSort('initial_max_data',), UninterpretedSort('stream_pos',)))]",
            "[Const('quic_packet_retry.ptype', FunctionSort(UninterpretedSort('quic_packet_retry',), EnumeratedSort('quic_packet_type', ('quic_packet_type.initial', 'quic_packet_type.zero_rtt', 'quic_packet_type.handshake', 'quic_packet_type.one_rtt', 'quic_packet_type.version_negociation', 'quic_packet_type.retry')))), Const('quic_packet_retry.pversion', FunctionSort(UninterpretedSort('quic_packet_retry',), UninterpretedSort('version',))), Const('quic_packet_retry.dst_cid', FunctionSort(UninterpretedSort('quic_packet_retry',), UninterpretedSort('cid',))), Const('quic_packet_retry.src_cid', FunctionSort(UninterpretedSort('quic_packet_retry',), UninterpretedSort('cid',))), Const('quic_packet_retry.token', FunctionSort(UninterpretedSort('quic_packet_retry',), UninterpretedSort('stream_data',))), Const('quic_packet_retry.integrity_token', FunctionSort(UninterpretedSort('quic_packet_retry',), UninterpretedSort('itoken',)))]",
            "[Const('clients.client.ep', FunctionSort(UninterpretedSort('clients.client',), UninterpretedSort('ip.endpoint',))), Const('clients.client.tls_id', FunctionSort(UninterpretedSort('clients.client',), UninterpretedSort('tls_api.id',))), Const('clients.client.enc_level', FunctionSort(UninterpretedSort('clients.client',), EnumeratedSort('quic_packet_type', ('quic_packet_type.initial', 'quic_packet_type.zero_rtt', 'quic_packet_type.handshake', 'quic_packet_type.one_rtt', 'quic_packet_type.version_negociation', 'quic_packet_type.retry'))))]",
            "[Const('tls.handshake_parser.pos', FunctionSort(UninterpretedSort('tls.handshake_parser.result',), UninterpretedSort('stream_pos',))), Const('tls.handshake_parser.value', FunctionSort(UninterpretedSort('tls.handshake_parser.result',), UninterpretedSort('tls.handshakes',)))]",
            [],
            [],
            "[Const('frame.max_streams.id', FunctionSort(UninterpretedSort('frame.max_streams',), UninterpretedSort('stream_id',)))]",
            "[Const('ack_delay_exponent.exponent_8', FunctionSort(UninterpretedSort('ack_delay_exponent',), UninterpretedSort('microsecs',)))]",
            "[Const('forged_quic_packet_retry.ptype', FunctionSort(UninterpretedSort('forged_quic_packet_retry',), EnumeratedSort('quic_packet_type', ('quic_packet_type.initial', 'quic_packet_type.zero_rtt', 'quic_packet_type.handshake', 'quic_packet_type.one_rtt', 'quic_packet_type.version_negociation', 'quic_packet_type.retry')))), Const('forged_quic_packet_retry.pversion', FunctionSort(UninterpretedSort('forged_quic_packet_retry',), UninterpretedSort('version',))), Const('forged_quic_packet_retry.dst_cid', FunctionSort(UninterpretedSort('forged_quic_packet_retry',), UninterpretedSort('cid',))), Const('forged_quic_packet_retry.src_cid', FunctionSort(UninterpretedSort('forged_quic_packet_retry',), UninterpretedSort('cid',))), Const('forged_quic_packet_retry.token', FunctionSort(UninterpretedSort('forged_quic_packet_retry',), UninterpretedSort('stream_data',))), Const('forged_quic_packet_retry.integrity_token', FunctionSort(UninterpretedSort('forged_quic_packet_retry',), UninterpretedSort('itoken',)))]",
            [],
            [],
            "[Const('tls.encrypted_extensions.extensions', FunctionSort(UninterpretedSort('tls.encrypted_extensions',), UninterpretedSort('vector[tls.extension]',)))]",
            [],
            "[Const('forged_protected_quic_packet.ptype', FunctionSort(UninterpretedSort('forged_protected_quic_packet',), EnumeratedSort('quic_packet_type', ('quic_packet_type.initial', 'quic_packet_type.zero_rtt', 'quic_packet_type.handshake', 'quic_packet_type.one_rtt', 'quic_packet_type.version_negociation', 'quic_packet_type.retry')))), Const('forged_protected_quic_packet.pversion', FunctionSort(UninterpretedSort('forged_protected_quic_packet',), UninterpretedSort('version',))), Const('forged_protected_quic_packet.dst_cid', FunctionSort(UninterpretedSort('forged_protected_quic_packet',), UninterpretedSort('cid',))), Const('forged_protected_quic_packet.src_cid', FunctionSort(UninterpretedSort('forged_protected_quic_packet',), UninterpretedSort('cid',))), Const('forged_protected_quic_packet.token', FunctionSort(UninterpretedSort('forged_protected_quic_packet',), UninterpretedSort('stream_data',))), Const('forged_protected_quic_packet.protected_payload', FunctionSort(UninterpretedSort('forged_protected_quic_packet',), UninterpretedSort('stream_data',)))]",
            "[Const('retry_source_connection_id.rcid', FunctionSort(UninterpretedSort('retry_source_connection_id',), UninterpretedSort('cid',)))]",
            "[Const('quic_packet.ptype', FunctionSort(UninterpretedSort('quic_packet',), EnumeratedSort('quic_packet_type', ('quic_packet_type.initial', 'quic_packet_type.zero_rtt', 'quic_packet_type.handshake', 'quic_packet_type.one_rtt', 'quic_packet_type.version_negociation', 'quic_packet_type.retry')))), Const('quic_packet.pversion', FunctionSort(UninterpretedSort('quic_packet',), UninterpretedSort('version',))), Const('quic_packet.dst_cid', FunctionSort(UninterpretedSort('quic_packet',), UninterpretedSort('cid',))), Const('quic_packet.src_cid', FunctionSort(UninterpretedSort('quic_packet',), UninterpretedSort('cid',))), Const('quic_packet.token', FunctionSort(UninterpretedSort('quic_packet',), UninterpretedSort('stream_data',))), Const('quic_packet.seq_num', FunctionSort(UninterpretedSort('quic_packet',), UninterpretedSort('pkt_num',))), Const('quic_packet.payload', FunctionSort(UninterpretedSort('quic_packet',), UninterpretedSort('frame.arr',)))]",
            "[Const('frame.ack.range.gap', FunctionSort(UninterpretedSort('frame.ack.range',), UninterpretedSort('pkt_num',))), Const('frame.ack.range.ranges', FunctionSort(UninterpretedSort('frame.ack.range',), UninterpretedSort('pkt_num',)))]",
            "[Const('max_ack_delay.exponent_8', FunctionSort(UninterpretedSort('max_ack_delay',), UninterpretedSort('microsecs',)))]",
            "[Const('tls.finished.mtype', FunctionSort(UninterpretedSort('tls.finished',), UninterpretedSort('tls.message_type',))), Const('tls.finished.unknown_message_bytes', FunctionSort(UninterpretedSort('tls.finished',), UninterpretedSort('stream_data',)))]"
        ],
        "public_actions": [
            "servers.server.idx.spec.prev[before4]",
            "show_crypto_length",
            "tls_api.upper.decrypt_cipher",
            "quic_packet_0rtt.arr.get",
            "vector[tls.handshake].impl.pop_back[implement95]",
            "quic_packet.retired_cids.size",
            "prot.show_pkt",
            "quic_packet_coal_0rtt.retired_cids.pop_back",
            "frame.new_connection_id.handle",
            "ip_endpoints.impl.append[implement96]",
            "version_information.set",
            "replayed_quic_packet_0rtt.arr.extend",
            "show_fsm_sending_send_event",
            "arr_pkt_num_s.impl.get[implement91]",
            "tls_api.upper.foo.impl.encrypt_cipher[implement368]",
            "tls.handshakes.reverse",
            "app_server_open_event_vn",
            "forged_protected_quic_packet.arr.create",
            "vector[tls.cipher_suite].pop_back",
            "forged_quic_packet.retired_cids.spec.append[after113]",
            "second_server.behavior",
            "forged_quic_packet.arr.impl.create[implement88]",
            "vector[tls.compression_method].impl.empty[implement89]",
            "vector[transport_parameter].spec.set[after108]",
            "tls_api.upper.save_initial_max_stream_data_uni",
            "forged_quic_packet_vn.arr.size",
            "quic_packet_retry.retired_cids.impl.back[implement94]",
            "frame.path_challenge.handle[after306]",
            "tls_api.upper.set_initial_keys",
            "forged_protected_quic_packet.retired_cids.spec.set[before107]",
            "forged_quic_packet_vn.arr.resize",
            "quic_packet.retired_cids.spec.set[after108]",
            "servers.server.set_ep",
            "vector[tls.psk_identity].get",
            "forged_quic_packet_vn.arr.spec.append[after113]",
            "show_last_datagram_size",
            "frame.ack_ecn.range.arr.impl.size[implement92]",
            "original_destination_connection_id.set",
            "quic_packet_0rtt.arr.impl.extend[implement97]",
            "tls_api.id.impl.next[implement16]",
            "arr_pkt_num_r.impl.back[implement94]",
            "forged_quic_packet_retry.retired_cids.impl.extend[implement97]",
            "mim_server_target.init[after454]",
            "vector[tls.psk_identity].pop_back",
            "vector[tls.cipher_suite].impl.resize[implement93]",
            "tls_hand_extensions.back",
            "frame.ack_ecn.range.arr.empty",
            "versions.append",
            "replayed_quic_packet_0rtt.arr.set",
            "quic_packet_coal_0rtt.retired_cids.reverse",
            "infer_tls_events_retry",
            "ip_endpoints.spec.append[after113]",
            "quic_packet_retry.idx.spec.next[after3]",
            "quic_packet_0rtt.arr.impl.reverse[implement98]",
            "prot.arr.spec.get[after110]",
            "tls.handshakes.impl.extend[implement97]",
            "tls_id_to_src",
            "forged_pkts.impl.size[implement92]",
            "replayed_quic_packet_0rtt.idx.spec.next[after3]",
            "frame.data_blocked.handle",
            "quic_packet_vn.arr.impl.pop_back[implement95]",
            "infer_tls_events_vn",
            "ip_endpoints.impl.pop_back[implement95]",
            "versions_bv.spec.resize[after112]",
            "quic_packet_0rtt.arr.impl.empty[implement89]",
            "tls_client_initial_request",
            "vector[tls.extension].spec.create[before105]",
            "forged_protected_quic_packet.arr.impl.pop_back[implement95]",
            "ip_endpoints.set",
            "frame.arr.impl.append[implement96]",
            "ip_endpoints.spec.get[after110]",
            "forged_protected_quic_packet.retired_cids.size",
            "vector[tls.psk_identity].spec.append[after113]",
            "tls.handshakes.domain.next",
            "quic_packet_coal_0rtt.arr.impl.get[implement91]",
            "stream_data.impl.extend[implement97]",
            "arr_streamid_r.impl.empty[implement89]",
            "quic_packet_coal_0rtt.retired_cids.impl.get[implement91]",
            "tls.handshakes.empty",
            "vector[tls.handshake].impl.size[implement92]",
            "vector[tls.extension].domain.impl.prev[implement9]",
            "arr_streamid_r.spec.get[before109]",
            "tls_api.upper.send[before394]",
            "quic_packet_coal_0rtt.arr.spec.set[after108]",
            "vector[tls.extension].impl.back[implement94]",
            "frame.streams_blocked_bidi.handle[before291]",
            "quic_packet.retired_cids.impl.size[implement92]",
            "mim_agent.reflection_packets",
            "quic_packet_retry.arr.reverse",
            "quic_packet.arr.reverse",
            "tls_hand_extensions.impl.resize[implement93]",
            "quic_packet_retry.arr.spec.set[before107]",
            "vector[tls.cipher_suite].domain.spec.prev[before4]",
            "clients.client.idx.spec.prev[before4]",
            "replayed_quic_packet_0rtt.arr.impl.extend[implement97]",
            "forged_protected_quic_packet.arr.spec.resize[after112]",
            "clients.client.arr.spec.resize[after112]",
            "vector[tls.compression_method].impl.size[implement92]",
            "quic_packet.idx.impl.prev[implement9]",
            "arr_pkt_num_s.impl.create[implement88]",
            "quic_packet_coal_0rtt.arr.impl.pop_back[implement95]",
            "show_fsm_receiving_ack_event",
            "vector[tls.cipher_suite].set",
            "init[after464]",
            "bytes.impl.back[implement94]",
            "tls.handshakes.impl.empty[implement89]",
            "vector[tls.extension].impl.pop_back[implement95]",
            "show_fsm_sending_ready_event",
            "lower_stream_pos",
            "vector[tls.psk_identity].impl.set[implement90]",
            "vector[tls.psk_identity].back",
            "clients.client.arr.impl.create[implement88]",
            "grease_quic_bit.set",
            "min_ack_delay_check",
            "vector[tls.handshake].resize",
            "frame.retire_connection_id.handle[after304]",
            "tls_extensions.impl.pop_back[implement95]",
            "random_stream_id[implement441]",
            "quic_packet_0rtt.idx.spec.prev[after5]",
            "reference_pkt_num",
            "quic_packet_0rtt.retired_cids.set",
            "frame.ping.handle[after296]",
            "tls.handshakes.spec.size[after111]",
            "arr_streamid_s.impl.create[implement88]",
            "packet_event_0rtt[before330]",
            "forged_protected_quic_packet.retired_cids.spec.size[after111]",
            "prot.decrypt",
            "quic_packet_retry.retired_cids.spec.resize[after112]",
            "reflect_packet_to_victim_event[after346]",
            "quic_packet_retry.retired_cids.impl.set[implement90]",
            "frame.path_response.handle[before307]",
            "prot.idx.impl.prev[implement9]",
            "bytes.impl.get[implement91]",
            "replayed_packet_event_0rtt",
            "inc_cid",
            "arr_pkt_num_s.impl.size[implement92]",
            "frame.ack_frequency.handle[after312]",
            "forged_quic_packet.retired_cids.impl.reverse[implement98]",
            "quic_packet.retired_cids.resize",
            "vector[tls.psk_identity].impl.resize[implement93]",
            "quic_packet.idx.impl.next[implement8]",
            "vector[tls.compression_method].domain.next",
            "handle_transport_error",
            "vector[transport_parameter].extend",
            "handle_receiving_dataRecvd",
            "frame.max_streams.handle",
            "servers.server.arr.impl.size[implement92]",
            "victim_agent.behavior",
            "tls.handshakes.impl.get[implement91]",
            "bytes.spec.create[before105]",
            "forged_protected_quic_packet.arr.impl.extend[implement97]",
            "max_packet_size.set",
            "quic_packet_retry.idx.spec.prev[before4]",
            "arr_streamid_s.spec.empty[after104]",
            "ip_endpoints.empty",
            "quic_packet.idx.spec.next[after3]",
            "vector[tls.psk_identity].extend",
            "tls_extensions.impl.reverse[implement98]",
            "tls_hand_extensions.spec.append[after113]",
            "frame.ack_ecn.range.arr.spec.resize[after112]",
            "tls_extensions.get",
            "forged_protected_quic_packet.retired_cids.spec.set[after108]",
            "idx_s.spec.prev[before4]",
            "frame.ack_ecn.range.idx.impl.next[implement8]",
            "quic_packet_0rtt.arr.spec.empty[after104]",
            "frame.ack.range.arr.impl.get[implement91]",
            "quic_packet_vn.idx.prev",
            "stream_data.impl.back[implement94]",
            "prot.retry_integrity_tag",
            "arr_streamid_r.impl.set[implement90]",
            "forged_quic_packet.retired_cids.back",
            "prot.pos_to_byte",
            "forged_quic_packet_retry.arr.spec.empty[after104]",
            "forged_quic_packet_vn.idx.spec.prev[before4]",
            "vector[tls.handshake].spec.size[after111]",
            "servers.server.arr.impl.back[implement94]",
            "forged_protected_quic_packet.idx.impl.next[implement8]",
            "mim_agent.reset_NAT",
            "vector[tls.extension].spec.get[before109]",
            "quic_packet.long",
            "tls_api.id.spec.prev[before12]",
            "versions_bv.set",
            "replayed_quic_packet_0rtt.retired_cids.impl.resize[implement93]",
            "vector[transport_parameter].spec.resize[after112]",
            "prot.show_token_len",
            "servers.server.arr.extend",
            "frame.ack_ecn.range.arr.reverse",
            "vector[tls.compression_method].spec.create[before105]",
            "forged_protected_pkt_serdes.to_bytes[implement398]",
            "quic_packet_retry.idx.impl.next[implement8]",
            "quic_packet_retry.idx.spec.prev[after5]",
            "forged_pkts.reverse",
            "net.listen",
            "vector[tls.compression_method].domain.impl.next[implement8]",
            "vector[tls.psk_identity].domain.impl.next[implement8]",
            "arr_streamid_r.impl.pop_back[implement95]",
            "vector[tls.compression_method].spec.create[after106]",
            "forward_packet_to_server_event",
            "frame.idx.impl.prev[implement9]",
            "vector[tls.cipher_suite].domain.impl.next[implement8]",
            "vector[tls.handshake].spec.resize[after112]",
            "vector[tls.compression_method].create",
            "show_cond",
            "clients.client.arr.spec.append[after113]",
            "quic_packet_coal_0rtt.arr.pop_back",
            "forged_quic_packet_retry.arr.impl.create[implement88]",
            "vector[tls.handshake].reverse",
            "forward_packet_to_client_event[after340]",
            "vector[tls.compression_method].spec.resize[after112]",
            "tls.handshakes.size",
            "replayed_quic_packet_0rtt.arr.size",
            "fake_client.set_ep",
            "tls_hand_extensions.spec.get[before109]",
            "tls_extensions.domain.next",
            "forged_quic_packet_retry.retired_cids.spec.size[after111]",
            "arr_streamid_s.impl.get[implement91]",
            "tls_extensions.spec.create[before105]",
            "forged_pkts.get",
            "quic_packet_retry.retired_cids.pop_back",
            "tls_client_initial_request[after471]",
            "frame.ack_ecn.range.arr.impl.resize[implement93]",
            "vector[tls.psk_identity].impl.reverse[implement98]",
            "idx_r.impl.next[implement8]",
            "frame.ping.handle",
            "prot.byte_xor",
            "http_request_file.write[before64]",
            "initial_max_stream_id_bidi.set",
            "replayed_quic_packet_0rtt.arr.impl.resize[implement93]",
            "quic_packet_retry.retired_cids.impl.empty[implement89]",
            "forged_quic_packet.retired_cids.spec.create[before105]",
            "cids.spec.set[before107]",
            "quic_packet_vn.arr.spec.resize[after112]",
            "vector[tls.compression_method].impl.extend[implement97]",
            "quic_packet_0rtt.retired_cids.spec.get[after110]",
            "quic_packet_coal_0rtt.arr.impl.append[implement96]",
            "vector[transport_parameter].spec.set[before107]",
            "forged_quic_packet_vn.idx.impl.prev[implement9]",
            "quic_packet_0rtt.arr.impl.back[implement94]",
            "replayed_quic_packet_0rtt.retired_cids.impl.extend[implement97]",
            "vector[tls.compression_method].impl.resize[implement93]",
            "vector[tls.handshake].back",
            "random_stream_pos[implement438]",
            "arr_streamid_r.impl.back[implement94]",
            "replayed_quic_packet_0rtt.retired_cids.impl.pop_back[implement95]",
            "forged_pkts.impl.create[implement88]",
            "forged_packet_event_retry[before349]",
            "versions.pop_back",
            "index.next",
            "frame.arr.spec.create[after106]",
            "frame.application_close.handle",
            "frame.ack.range.idx.spec.prev[before4]",
            "packet_event[after324]",
            "quic_packet_vn.arr.set",
            "quic_packet_coal_0rtt.arr.spec.append[after113]",
            "quic_packet_coal_0rtt.retired_cids.impl.back[implement94]",
            "frame.arr.impl.empty[implement89]",
            "frame.ack_ecn.range.idx.spec.prev[before4]",
            "net.open",
            "ip_endpoints.back",
            "tls_recv_event[before258]",
            "idx_r.spec.prev[after5]",
            "prot.arr.extend",
            "prot.decrypt[implement432]",
            "idx_s.next",
            "servers.server.arr.get",
            "lower_stream_id[implement443]",
            "frame.arr.get",
            "quic_packet.arr.impl.create[implement88]",
            "servers.server.arr.impl.pop_back[implement95]",
            "tls_extensions.reverse",
            "quic_packet_coal_0rtt.retired_cids.back",
            "quic_packet.retired_cids.reverse",
            "forged_quic_packet.arr.impl.append[implement96]",
            "quic_packet_coal_0rtt.retired_cids.spec.append[after113]",
            "tls_extensions.pop_back",
            "quic_packet_0rtt.arr.create",
            "bytes.impl.reverse[implement98]",
            "tls_api.upper.foo.impl.get_old_new_token[implement364]",
            "frame.ack.range.arr.impl.append[implement96]",
            "quic_packet_retry.arr.impl.get[implement91]",
            "arr_streamid_r.impl.size[implement92]",
            "tls_extensions.impl.empty[implement89]",
            "replayed_quic_packet_0rtt.retired_cids.set",
            "quic_packet_0rtt.arr.spec.set[before107]",
            "http_request_file.handle_synced",
            "set_encryption_level",
            "initial_max_stream_data_uni.set",
            "greater_stream_id[implement442]",
            "arr_pkt_num_r.impl.pop_back[implement95]",
            "forged_quic_packet_retry.arr.reverse",
            "versions.impl.size[implement92]",
            "servers.server.arr.impl.get[implement91]",
            "quic_packet_retry.arr.extend",
            "tls_api.upper.foo.impl.upper_send[implement386]",
            "random_stream_data[implement444]",
            "frame.stop_sending.handle[before273]",
            "forged_pkts.spec.empty[after104]",
            "quic_packet_vn.arr.impl.get[implement91]",
            "quic_packet_retry.retired_cids.set",
            "versions_bv.impl.set[implement90]",
            "bytes.impl.pop_back[implement95]",
            "arr_pkt_num_r.spec.set[after108]",
            "quic_packet_vn.arr.impl.create[implement88]",
            "tls_hand_extensions.impl.extend[implement97]",
            "show_fsm_sending_resetSent_event",
            "ip_endpoints.extend",
            "clients.client.arr.create",
            "quic_packet_coal_0rtt.retired_cids.extend",
            "forged_quic_packet_retry.retired_cids.create",
            "forged_quic_packet.idx.prev",
            "cidseq_to_seqnum",
            "tls_hand_extensions.set",
            "show_biatch",
            "replayed_quic_packet_0rtt.idx.spec.prev[after5]",
            "clients.client.arr.impl.reverse[implement98]",
            "forged_quic_packet.arr.impl.get[implement91]",
            "frame.ack.range.arr.impl.create[implement88]",
            "ip_endpoints.spec.get[before109]",
            "frame.arr.spec.empty[after104]",
            "vector[tls.psk_identity].spec.size[after111]",
            "forged_packet_event_vn",
            "tls_api.upper.foo.impl.iv_size[implement367]",
            "jdx_r.impl.next[implement8]",
            "bytes.spec.get[after110]",
            "quic_packet_coal_0rtt.arr.size",
            "cids.impl.back[implement94]",
            "clients.client.idx.spec.next[after3]",
            "pkt_serdes_retry.to_bytes",
            "prot.arr.spec.set[before107]",
            "handle_receiving_resetRecvd",
            "servers.server.arr.back",
            "vector[tls.extension].reverse",
            "quic_packet.idx.next",
            "arr_pkt_num_r.size",
            "prot.encrypt[implement430]",
            "app_send_event[after243]",
            "bytes.impl.extend[implement97]",
            "vector[transport_parameter].create",
            "prot.arr.spec.append[after113]",
            "versions.create",
            "quic_packet_0rtt.retired_cids.append",
            "endpoint_to_socket",
            "clients.client.arr.size",
            "quic_packet_retry.arr.size",
            "tls_send_event[before257]",
            "forged_protected_quic_packet.retired_cids.spec.append[after113]",
            "tls_extensions.impl.size[implement92]",
            "forged_protected_quic_packet.arr.spec.append[after113]",
            "quic_packet.retired_cids.impl.resize[implement93]",
            "vector[tls.handshake].extend",
            "servers.server.arr.pop_back",
            "index.impl.prev[implement9]",
            "vector[tls.extension].size",
            "is_random_padding_packet",
            "vector[tls.compression_method].set",
            "frame.connection_close.handle",
            "idx.impl.next[implement8]",
            "vector[tls.extension].domain.spec.next[after3]",
            "vector[transport_parameter].empty",
            "prot.arr.back",
            "show_enc_level",
            "prot.encrypt_rtt",
            "forged_pkts.append",
            "cids.spec.empty[after104]",
            "min_ack_delay.set",
            "prot.arr.append",
            "init[after461]",
            "ip_endpoints.impl.resize[implement93]",
            "tls_extensions.domain.prev",
            "set_encryption_level[after261]",
            "tls_client_0rtt_response",
            "init[after322]",
            "versions_bv.spec.size[after111]",
            "arr_pkt_num_s.get",
            "forged_quic_packet_vn.arr.empty",
            "tls_api.upper.foo.impl.get_initial_max_stream_id_bidi[implement380]",
            "versions_bv.impl.pop_back[implement95]",
            "replayed_quic_packet_0rtt.arr.get",
            "forged_quic_packet_vn.arr.impl.size[implement92]",
            "forged_quic_packet_vn.arr.impl.reverse[implement98]",
            "frame.data_blocked.handle[after288]",
            "cids.spec.create[before105]",
            "quic_packet_vn.arr.back",
            "quic_packet.arr.impl.resize[implement93]",
            "quic_packet.arr.spec.resize[after112]",
            "prot.get_header_info",
            "replayed_quic_packet_0rtt.arr.impl.append[implement96]",
            "socket_endpoint",
            "bytes.impl.size[implement92]",
            "frame.ack.range.idx.next",
            "arr_streamid_s.impl.pop_back[implement95]",
            "cids.resize",
            "forged_quic_packet_retry.retired_cids.impl.size[implement92]",
            "handle_sending_resetSent",
            "show_initial_request_initial",
            "version_not_found_event",
            "cid_to_us",
            "forged_quic_packet_retry.retired_cids.size",
            "arr_streamid_s.spec.resize[after112]",
            "client_server.behavior",
            "quic_packet_0rtt.arr.spec.create[after106]",
            "versions.spec.create[after106]",
            "quic_packet_coal_0rtt.arr.set",
            "forged_protected_quic_packet.arr.spec.empty[after104]",
            "vector[tls.cipher_suite].domain.impl.prev[implement9]",
            "frame_stop_sending_handle[before491]",
            "pkt_serdes_vn.from_bytes",
            "vector[transport_parameter].impl.reverse[implement98]",
            "vector[transport_parameter].spec.size[after111]",
            "frame.max_streams_bidi.handle",
            "arr_streamid_s.impl.size[implement92]",
            "frame.max_data.handle[before293]",
            "forged_quic_packet_retry.retired_cids.impl.reverse[implement98]",
            "quic_packet_coal_0rtt.retired_cids.spec.get[before109]",
            "forged_protected_quic_packet.retired_cids.impl.create[implement88]",
            "forged_quic_packet_vn.idx.spec.prev[after5]",
            "greater_stream_id",
            "frame.ack_ecn.range.arr.extend",
            "quic_packet_retry.arr.spec.get[before109]",
            "vector[tls.handshake].size",
            "tls_keys_established_event[after260]",
            "bytes.empty",
            "arr_pkt_num_s.spec.create[before105]",
            "servers.server.idx.next",
            "frame.streams_blocked_bidi.handle",
            "forged_quic_packet_retry.retired_cids.spec.set[after108]",
            "quic_packet_coal_0rtt.retired_cids.resize",
            "prot.correct_pnum",
            "tls_api.upper.foo.impl.encrypt_aead[implement384]",
            "server.set_tls_id",
            "client.set_ep",
            "prot.idx.impl.next[implement8]",
            "handle_sending_resetRecvd",
            "arr_streamid_r.spec.append[after113]",
            "show_ack_credit",
            "packet_event",
            "cid_to_stream_id",
            "cids.impl.empty[implement89]",
            "forged_quic_packet_vn.arr.create",
            "tls.handshakes.append",
            "init[after484]",
            "quic_packet_vn.arr.spec.set[before107]",
            "quic_packet_0rtt.retired_cids.size",
            "attacker.configure_NAT_attack_in_spoof_hack",
            "frame.ack.range.arr.reverse",
            "frame.arr.resize",
            "pkt_serdes_0rtt.to_bytes",
            "frame.rst_stream.handle[before271]",
            "recv_0rtt_pkt",
            "frame.new_connection_id.handle[after302]",
            "versions_bv.spec.set[after108]",
            "vector[tls.psk_identity].spec.get[after110]",
            "prot.arr.impl.back[implement94]",
            "http_request_file.synced[before67]",
            "frame_application_close_handle[before496]",
            "bytes_to_itoken",
            "tls_hand_extensions.spec.resize[after112]",
            "pkt_serdes.from_bytes[implement399]",
            "frame.ack.range.arr.create",
            "vector[transport_parameter].spec.get[before109]",
            "vector[transport_parameter].impl.extend[implement97]",
            "frame.streams_blocked.handle",
            "ip_endpoints.spec.empty[after104]",
            "forged_quic_packet_retry.retired_cids.spec.get[before109]",
            "versions.spec.resize[after112]",
            "quic_packet_vn.arr.impl.resize[implement93]",
            "frame.ack.range.idx.impl.prev[implement9]",
            "arr_pkt_num_r.impl.append[implement96]",
            "mim_agent.forward_packet_to",
            "forged_pkts.impl.back[implement94]",
            "vector[tls.psk_identity].spec.set[after108]",
            "arr_streamid_s.impl.append[implement96]",
            "quic_packet_retry.retired_cids.spec.append[after113]",
            "quic_packet_coal_0rtt.idx.impl.next[implement8]",
            "forged_pkt_serdes_retry.to_bytes[implement398]",
            "quic_packet.arr.impl.pop_back[implement95]",
            "frame.unknown_frame.handle",
            "pkt_serdes.from_bytes",
            "tls_api.upper.foo.impl.save_active_connection_id_limit[implement381]",
            "arr_streamid_r.impl.resize[implement93]",
            "tls_api.upper.save_initial_max_stream_data_bidi_local",
            "stream_data.spec.create[before105]",
            "quic_packet.retired_cids.impl.extend[implement97]",
            "versions_bv.create",
            "frame.arr.pop_back",
            "vector[tls.cipher_suite].spec.get[after110]",
            "clients.init_tls_ids",
            "vector[tls.psk_identity].impl.size[implement92]",
            "vector[tls.extension].impl.size[implement92]",
            "init[after500]",
            "forged_quic_packet.arr.size",
            "socket_endpoint_mim",
            "tls.handshakes.pop_back",
            "forged_quic_packet_retry.arr.append",
            "servers.set_tls_id",
            "replayed_quic_packet_0rtt.arr.impl.set[implement90]",
            "forged_quic_packet.arr.impl.set[implement90]",
            "tls_api.upper.init[after388]",
            "quic_packet_0rtt.idx.spec.next[after3]",
            "mim_client_target.set_ep",
            "forged_protected_quic_packet.arr.impl.get[implement91]",
            "_finalize",
            "stream_data.impl.resize[implement93]",
            "arr_pkt_num_s.impl.set[implement90]",
            "active_connection_id_limit.set",
            "servers.server.arr.impl.extend[implement97]",
            "stream_pos.next",
            "versions_bv.spec.append[after113]",
            "ip_endpoints.impl.extend[implement97]",
            "frame.ack_ecn.range.arr.impl.get[implement91]",
            "forged_quic_packet_vn.arr.impl.append[implement96]",
            "tls_api.upper.get_old_new_token",
            "cids.impl.set[implement90]",
            "tls_hand_extensions.size",
            "quic_packet_0rtt.retired_cids.spec.empty[after104]",
            "tls_api.upper.get_old_retry_token",
            "ip_endpoints.create",
            "show_l",
            "forged_quic_packet.retired_cids.impl.size[implement92]",
            "vector[tls.extension].spec.get[after110]",
            "handle_tls_extensions",
            "tls_client_version_request",
            "vector[transport_parameter].spec.get[after110]",
            "quic_packet_coal_0rtt.retired_cids.impl.reverse[implement98]",
            "replayed_quic_packet_0rtt.arr.spec.size[after111]",
            "vector[tls.handshake].spec.append[after113]",
            "victim_agent.set_tls_id",
            "frame.arr.spec.set[after108]",
            "client_server.set_tls_id",
            "arr_pkt_num_r.append",
            "vector[tls.extension].domain.prev",
            "quic_packet_coal_0rtt.arr.spec.empty[after104]",
            "quic_packet_coal_0rtt.arr.resize",
            "recv_packet_mim",
            "idx_r.next",
            "forged_quic_packet_retry.retired_cids.back",
            "forged_protected_quic_packet.arr.impl.set[implement90]",
            "versions.impl.get[implement91]",
            "forged_quic_packet_retry.arr.impl.resize[implement93]",
            "packet_event_coal_0rtt[after479]",
            "arr_streamid_r.size",
            "replayed_quic_packet_0rtt.idx.prev",
            "arr_streamid_r.reverse",
            "frame.arr.impl.create[implement88]",
            "vector[tls.compression_method].append",
            "server.set_ep",
            "tls_api.upper.create[after390]",
            "stream_data.impl.set[implement90]",
            "frame.streams_blocked_bidi.handle[after292]",
            "arr_pkt_num_s.size",
            "arr_pkt_num_r.back",
            "quic_packet_retry.arr.impl.pop_back[implement95]",
            "quic_packet.retired_cids.extend",
            "frame.idx.next",
            "forged_protected_quic_packet.idx.spec.prev[after5]",
            "vector[transport_parameter].spec.create[after106]",
            "mim_agent.save_packets",
            "forged_protected_quic_packet.arr.impl.empty[implement89]",
            "vector[tls.compression_method].size",
            "forged_pkt_serdes.to_bytes",
            "clients.client.idx.impl.next[implement8]",
            "quic_packet.arr.size",
            "versions.size",
            "forged_quic_packet.arr.impl.resize[implement93]",
            "quic_packet_0rtt.retired_cids.impl.empty[implement89]",
            "tls.handshakes.spec.create[before105]",
            "replayed_quic_packet_0rtt.retired_cids.reverse",
            "replayed_quic_packet_0rtt.retired_cids.spec.get[after110]",
            "quic_packet_retry.arr.spec.resize[after112]",
            "tls_api.upper.session_established[before395]",
            "arr_streamid_s.get",
            "quic_packet_coal_0rtt.retired_cids.impl.set[implement90]",
            "replayed_quic_packet_0rtt.arr.reverse",
            "quic_packet_vn.arr.resize",
            "forged_protected_quic_packet.arr.spec.create[after106]",
            "replayed_quic_packet_0rtt.arr.impl.create[implement88]",
            "quic_packet_vn.arr.spec.empty[after104]",
            "vector[tls.extension].impl.set[implement90]",
            "stream_pos.spec.next[after3]",
            "quic_packet_retry.arr.resize",
            "frame.malicious_frame.handle",
            "frame.arr.reverse",
            "versions.spec.get[after110]",
            "initial_max_stream_data_bidi_local.set",
            "frame.ack_ecn.range.idx.impl.prev[implement9]",
            "frame.ack.range.idx.prev",
            "versions.spec.empty[after104]",
            "tls_api.upper.get_initial_max_stream_data_bidi_remote",
            "bytes_to_version",
            "frame.handshake_done.handle",
            "greater_microsecs",
            "servers.server.idx.impl.prev[implement9]",
            "quic_packet.arr.spec.append[after113]",
            "ip_endpoints.impl.size[implement92]",
            "vector[tls.handshake].domain.prev",
            "tls_extensions.create",
            "forged_protected_quic_packet.retired_cids.spec.get[after110]",
            "frame.arr.spec.set[before107]",
            "arr_pkt_num_s.back",
            "vector[tls.handshake].spec.set[before107]",
            "quic_packet_retry.retired_cids.extend",
            "quic_packet_coal_0rtt.arr.impl.set[implement90]",
            "forged_protected_quic_packet.retired_cids.back",
            "arr_streamid_r.spec.resize[after112]",
            "vector[tls.psk_identity].spec.get[before109]",
            "idx_s.prev",
            "vector[tls.handshake].spec.create[after106]",
            "arr_streamid_s.spec.set[before107]",
            "enqueue_frame_rtt",
            "tls.handshakes.impl.set[implement90]",
            "forged_pkts.set",
            "random_stream_id",
            "cids.impl.create[implement88]",
            "servers.server.idx.prev",
            "forged_quic_packet.retired_cids.impl.resize[implement93]",
            "vector[tls.cipher_suite].impl.size[implement92]",
            "tls_send_event[after468]",
            "bytes.spec.set[after108]",
            "tls_hand_extensions.spec.set[after108]",
            "frame.ack_ecn.handle[before265]",
            "tls_hand_extensions.append",
            "forged_quic_packet_vn.arr.spec.size[after111]",
            "vector[tls.extension].spec.resize[after112]",
            "idx_s.impl.next[implement8]",
            "arr_pkt_num_s.impl.back[implement94]",
            "clients.init[after453]",
            "quic_packet_vn.arr.spec.get[before109]",
            "forged_protected_quic_packet.retired_cids.extend",
            "forged_quic_packet_retry.retired_cids.impl.append[implement96]",
            "quic_packet_retry.retired_cids.impl.pop_back[implement95]",
            "quic_packet_retry.retired_cids.spec.size[after111]",
            "versions.get",
            "quic_packet_retry.retired_cids.size",
            "loss_bits.set",
            "stream_data.resize",
            "quic_packet_coal_0rtt.arr.spec.set[before107]",
            "forged_quic_packet.arr.back",
            "forged_quic_packet_vn.arr.spec.create[before105]",
            "servers.server.arr.spec.get[before109]",
            "arr_streamid_s.resize",
            "servers.server.idx.spec.prev[after5]",
            "victim_agent.set_ep",
            "frame.ack_ecn.range.arr.size",
            "undecryptable_packet_event",
            "vector[tls.psk_identity].domain.prev",
            "quic_packet_0rtt.arr.reverse",
            "forged_quic_packet.retired_cids.size",
            "forged_quic_packet_vn.arr.get",
            "quic_packet_vn.arr.impl.empty[implement89]",
            "tls_extensions.append",
            "init[after483]",
            "quic_packet_vn.arr.spec.create[after106]",
            "replayed_quic_packet_0rtt.retired_cids.impl.create[implement88]",
            "forged_quic_packet_retry.arr.spec.size[after111]",
            "replayed_quic_packet_0rtt.arr.create",
            "clients.client.arr.impl.size[implement92]",
            "mim_agent.configure_NAT_attack_out_localhost",
            "vector[tls.psk_identity].impl.pop_back[implement95]",
            "jdx_r.next",
            "vector[tls.cipher_suite].resize",
            "forged_quic_packet_retry.idx.prev",
            "ip_endpoints.spec.set[after108]",
            "replayed_quic_packet_0rtt.retired_cids.size",
            "frame.idx.spec.prev[before4]",
            "vector[tls.cipher_suite].domain.spec.prev[after5]",
            "forged_pkts.resize",
            "quic_packet.arr.impl.extend[implement97]",
            "replayed_quic_packet_0rtt.arr.spec.set[before107]",
            "prot.encrypt_rtt[implement431]",
            "arr_pkt_num_r.extend",
            "forged_quic_packet_retry.arr.create",
            "packet_event_coal_0rtt[after333]",
            "stream_data.impl.size[implement92]",
            "prot.arr.spec.set[after108]",
            "tls_api.upper.foo.impl.get_initial_max_stream_data_bidi_remote[implement374]",
            "arr_streamid_r.resize",
            "versions.extend",
            "pkt_serdes_0rtt_coal.from_bytes",
            "replay_packet_to_server_event[after344]",
            "arr_pkt_num_s.set",
            "vector[tls.extension].spec.append[after113]",
            "quic_packet_vn.idx.spec.next[after3]",
            "frame.arr.spec.get[after110]",
            "endpoint_to_socket_mim",
            "servers.server.arr.spec.size[after111]",
            "tls_extensions.set",
            "tls_api.upper.decrypt_aead",
            "stream_data.extend",
            "frame.ack_ecn.range.arr.get",
            "tls_recv_event[after259]",
            "tls_api.upper.get_initial_max_stream_id_bidi",
            "frame.arr.impl.back[implement94]",
            "quic_packet_retry.retired_cids.spec.get[before109]",
            "forged_pkts.create",
            "init[after320]",
            "vector[tls.extension].empty",
            "tls_api.upper.foo.impl.save_initial_max_stream_data_bidi_local[implement377]",
            "quic_packet_0rtt.idx.impl.next[implement8]",
            "packet_event_retry[before327]",
            "frame.arr.back",
            "vector[tls.handshake].set",
            "servers.init_tls_ids",
            "quic_packet_coal_0rtt.arr.get",
            "quic_packet_0rtt.arr.back",
            "forged_pkts.empty",
            "versions_bv.impl.extend[implement97]",
            "clients.client.arr.impl.append[implement96]",
            "vector[tls.extension].spec.set[before107]",
            "mim_server_target.set_ep",
            "tls_api.upper.recv[before393]",
            "arr_pkt_num_r.spec.get[before109]",
            "replayed_quic_packet_0rtt.retired_cids.create",
            "frame.rst_stream.handle[after272]",
            "forged_quic_packet_retry.arr.set",
            "forged_protected_quic_packet.retired_cids.impl.reverse[implement98]",
            "init[after353]",
            "handle_receiving_dataRead",
            "versions_bv.resize",
            "app_server_open_event_1rtt",
            "pkt_serdes_0rtt.to_bytes[implement398]",
            "tls.handshakes.impl.reverse[implement98]",
            "clients.client.arr.spec.set[before107]",
            "forged_quic_packet_vn.arr.impl.resize[implement93]",
            "quic_packet_retry.arr.impl.resize[implement93]",
            "arr_pkt_num_r.resize",
            "frame.ack_ecn.range.arr.impl.append[implement96]",
            "clients.set_ep",
            "replayed_quic_packet_0rtt.arr.append",
            "quic_packet_retry.arr.impl.create[implement88]",
            "tls_api.upper.save_initial_max_stream_data_bidi_remote",
            "quic_packet_coal_0rtt.retired_cids.impl.append[implement96]",
            "frame.ack_ecn.range.arr.set",
            "arr_streamid_r.spec.set[before107]",
            "forged_quic_packet_vn.arr.impl.create[implement88]",
            "packet_event_retry[after328]",
            "packet_encryption_level_up",
            "forged_protected_quic_packet.idx.prev",
            "forged_quic_packet.arr.resize",
            "vector[tls.handshake].get",
            "tls_api.lower.recv",
            "arr_pkt_num_r.spec.get[after110]",
            "show_iretryb",
            "vector[tls.psk_identity].resize",
            "quic_packet_vn.arr.size",
            "forged_quic_packet_retry.arr.get",
            "quic_packet.retired_cids.spec.get[after110]",
            "versions_bv.impl.size[implement92]",
            "forged_quic_packet_retry.long",
            "dst_tls_id",
            "cipher_packet",
            "forged_quic_packet.retired_cids.impl.back[implement94]",
            "tls_hand_extensions.reverse",
            "quic_packet_0rtt.arr.impl.resize[implement93]",
            "forged_pkt_serdes_vn.from_bytes",
            "arr_pkt_num_r.empty",
            "show_fsm_receiving_dataRead_event",
            "arr_pkt_num_s.impl.append[implement96]",
            "frame_new_token_handle[before490]",
            "replayed_quic_packet_0rtt.arr.impl.size[implement92]",
            "quic_packet_0rtt.retired_cids.spec.set[after108]",
            "vector[transport_parameter].impl.set[implement90]",
            "forged_quic_packet_retry.arr.impl.get[implement91]",
            "mim_agent.configure_NAT_attack_out_trick",
            "frame.ack_ecn.range.arr.spec.set[before107]",
            "frame.ack_ecn.range.arr.spec.create[before105]",
            "frame.ack_ecn.range.arr.create",
            "init[after482]",
            "recv_retry_pkt",
            "quic_packet_coal_0rtt.arr.back",
            "arr_pkt_num_r.spec.set[before107]",
            "vector[tls.extension].domain.impl.next[implement8]",
            "forged_protected_quic_packet.arr.impl.reverse[implement98]",
            "quic_packet_0rtt.retired_cids.spec.create[after106]",
            "stream_data.impl.empty[implement89]",
            "forged_quic_packet_vn.idx.impl.next[implement8]",
            "vector[tls.compression_method].reverse",
            "vector[tls.compression_method].back",
            "dst_is_generated",
            "packet_encryption_level",
            "forged_quic_packet.retired_cids.append",
            "servers.server.arr.create",
            "tls_api.upper.send",
            "quic_packet.retired_cids.spec.set[before107]",
            "tls.handshake_event",
            "prot.bytes_to_cid",
            "ip_endpoints.spec.size[after111]",
            "client_send_event[before501]",
            "prot.arr.impl.extend[implement97]",
            "quic_packet_vn.arr.append",
            "frame.unknown_frame.handle[before297]",
            "quic_packet_coal_0rtt.arr.impl.create[implement88]",
            "vector[transport_parameter].spec.empty[after104]",
            "quic_packet_retry.arr.impl.set[implement90]",
            "forged_quic_packet.arr.create",
            "frame.ack.range.arr.back",
            "tls_extensions.empty",
            "tls_extensions.domain.spec.next[after3]",
            "tls_hand_extensions.domain.impl.next[implement8]",
            "vector[tls.psk_identity].empty",
            "client.behavior",
            "frame.ack.range.arr.spec.resize[after112]",
            "forged_quic_packet_vn.arr.extend",
            "tls_api.upper.save_token",
            "quic_packet.retired_cids.impl.back[implement94]",
            "jdx_r.impl.prev[implement9]",
            "ip_endpoints.impl.create[implement88]",
            "packet_event_coal_0rtt[before332]",
            "clients.client.idx.next",
            "mim_agent.behavior",
            "ip_endpoints.pop_back",
            "clients.client.arr.impl.extend[implement97]",
            "lower_microsecs[implement447]",
            "quic_packet_retry.retired_cids.get",
            "vector[tls.extension].spec.create[after106]",
            "frame.max_streams.handle[after276]",
            "vector[tls.cipher_suite].impl.pop_back[implement95]",
            "tls.handshakes.domain.prev",
            "vector[tls.compression_method].domain.spec.prev[after5]",
            "quic_packet_vn.arr.impl.extend[implement97]",
            "jdx_r.prev",
            "prot.arr.pop_back",
            "versions.spec.create[before105]",
            "idx.impl.prev[implement9]",
            "pkt_serdes_retry.from_bytes",
            "forged_quic_packet_retry.retired_cids.resize",
            "tls_api.upper.foo.impl.save_initial_max_data[implement375]",
            "net.impl.listen",
            "prot.arr.impl.append[implement96]",
            "tls_api.upper.foo.impl.create_0rtt_client[implement361]",
            "ip_endpoints.impl.set[implement90]",
            "forged_protected_quic_packet.retired_cids.get",
            "arr_streamid_r.impl.extend[implement97]",
            "vector[tls.extension].pop_back",
            "tls_client_initial_response[after472]",
            "quic_packet.retired_cids.create",
            "versions.impl.back[implement94]",
            "prot.arr.impl.size[implement92]",
            "map_cids",
            "arr_pkt_num_s.spec.empty[after104]",
            "forged_pkts.impl.pop_back[implement95]",
            "pkt_serdes_retry.from_bytes[implement399]",
            "quic_packet.retired_cids.spec.get[before109]",
            "forged_pkts.spec.resize[after112]",
            "net.send",
            "forged_quic_packet.retired_cids.empty",
            "quic_packet_retry.retired_cids.spec.get[after110]",
            "replayed_quic_packet_0rtt.retired_cids.spec.set[before107]",
            "versions.set",
            "forged_quic_packet.arr.impl.pop_back[implement95]",
            "quic_packet_0rtt.retired_cids.reverse",
            "forged_quic_packet_retry.arr.impl.extend[implement97]",
            "stream_data.size",
            "arr_pkt_num_s.extend",
            "vector[tls.cipher_suite].spec.create[before105]",
            "forged_quic_packet_vn.arr.set",
            "ip_endpoints.impl.reverse[implement98]",
            "vector[tls.psk_identity].domain.spec.prev[before4]",
            "tls_send_event",
            "replayed_quic_packet_0rtt.retired_cids.spec.get[before109]",
            "forged_quic_packet.idx.next",
            "clients.client.idx.impl.prev[implement9]",
            "clients.src_tls_id",
            "replayed_quic_packet_0rtt.retired_cids.spec.set[after108]",
            "quic_packet.arr.empty",
            "forged_quic_packet.idx.spec.prev[after5]",
            "frame.ack_ecn.range.arr.impl.set[implement90]",
            "pkt_serdes_0rtt_coal.to_bytes[implement398]",
            "forged_pkts.back",
            "servers.server.arr.impl.append[implement96]",
            "quic_packet_vn.idx.impl.prev[implement9]",
            "vector[tls.handshake].append",
            "handle_sending_ack",
            "tls_extensions.impl.extend[implement97]",
            "tls_client_initial_response",
            "mim_agent.configure_NAT_attack_out",
            "tls.handshakes.domain.spec.prev[after5]",
            "app_server_open_event_retry",
            "quic_packet_0rtt.arr.spec.size[after111]",
            "vector[tls.cipher_suite].impl.append[implement96]",
            "frame.ack.range.arr.resize",
            "init[after321]",
            "vector[transport_parameter].pop_back",
            "jdx_r.spec.prev[after5]",
            "forged_quic_packet_retry.arr.back",
            "forged_quic_packet_retry.arr.impl.pop_back[implement95]",
            "frame.ack_ecn.range.arr.spec.append[after113]",
            "forged_quic_packet.arr.spec.get[before109]",
            "vector[tls.compression_method].impl.pop_back[implement95]",
            "quic_packet_vn.idx.spec.prev[before4]",
            "servers.server.arr.spec.resize[after112]",
            "forged_protected_quic_packet.arr.pop_back",
            "clients.client.arr.impl.resize[implement93]",
            "pkt_serdes_vn.to_bytes",
            "forged_quic_packet_retry.arr.spec.get[after110]",
            "tls_extensions.back",
            "random_stream_pos",
            "quic_packet_coal_0rtt.arr.empty",
            "tls.handshakes.spec.set[after108]",
            "forged_protected_quic_packet.retired_cids.spec.resize[after112]",
            "versions_bv.spec.get[after110]",
            "tls_client_0rtt_response[after475]",
            "cids.spec.get[after110]",
            "versions.impl.append[implement96]",
            "packet_event_vn",
            "random_stream_data",
            "quic_packet_0rtt.arr.spec.append[after113]",
            "prot.bytes_to_pos",
            "frame.ack.handle[after264]",
            "forged_protected_quic_packet.retired_cids.create",
            "tls_api.upper.foo.impl.get_old_retry_token[implement363]",
            "vector[tls.compression_method].empty",
            "versions.spec.append[after113]",
            "servers.server.arr.impl.create[implement88]",
            "forged_protected_quic_packet.retired_cids.set",
            "vector[tls.cipher_suite].domain.prev",
            "quic_packet_coal_0rtt.idx.impl.prev[implement9]",
            "bytes.spec.append[after113]",
            "prot.arr.impl.set[implement90]",
            "replayed_quic_packet_0rtt.arr.impl.get[implement91]",
            "arr_pkt_num_s.spec.create[after106]",
            "vector[transport_parameter].domain.spec.prev[before4]",
            "prot.idx.spec.next[after3]",
            "quic_packet.arr.spec.create[after106]",
            "app_send_event",
            "bytes.spec.get[before109]",
            "cids.impl.size[implement92]",
            "arr_streamid_s.spec.set[after108]",
            "idx_s.impl.prev[implement9]",
            "tls_api.upper.get_active_connection_id_limit",
            "quic_packet_coal_0rtt.arr.spec.size[after111]",
            "forged_pkt_serdes.from_bytes[implement399]",
            "vector[tls.handshake].domain.spec.prev[before4]",
            "prot.arr.spec.size[after111]",
            "vector[tls.psk_identity].domain.spec.prev[after5]",
            "frame.stream.handle[before267]",
            "forged_quic_packet_retry.idx.next",
            "frame.crypto.handle",
            "tls_hand_extensions.empty",
            "unknown_ignore.set",
            "random_microsecs[implement445]",
            "forged_quic_packet.retired_cids.impl.append[implement96]",
            "quic_packet.retired_cids.impl.set[implement90]",
            "forged_protected_quic_packet.retired_cids.impl.get[implement91]",
            "tls_id_to_dst",
            "reflect_packet_to_victim_event",
            "quic_packet.retired_cids.set",
            "quic_packet_coal_0rtt.arr.impl.empty[implement89]",
            "forged_pkts.spec.set[after108]",
            "clients.client.arr.spec.set[after108]",
            "tls_api.upper.foo.impl.compute_retry_integrity_tag[implement383]",
            "quic_packet_0rtt.arr.empty",
            "replayed_quic_packet_0rtt.retired_cids.impl.size[implement92]",
            "quic_packet_vn.arr.reverse",
            "quic_packet_retry.retired_cids.impl.reverse[implement98]",
            "arr_streamid_s.impl.resize[implement93]",
            "forged_quic_packet.arr.impl.extend[implement97]",
            "clients.client.arr.impl.pop_back[implement95]",
            "forged_pkts.extend",
            "vector[tls.extension].impl.get[implement91]",
            "quic_packet_retry.retired_cids.impl.resize[implement93]",
            "frame.ack_ecn.range.arr.impl.pop_back[implement95]",
            "arr_pkt_num_r.impl.empty[implement89]",
            "packet_event_vn[after477]",
            "forged_pkts.impl.set[implement90]",
            "index.impl.next[implement8]",
            "vector[tls.compression_method].resize",
            "init[after242]",
            "arr_streamid_r.create",
            "http_request_file.sync[implement73]",
            "frame.retire_connection_id.handle",
            "quic_packet_coal_0rtt.arr.reverse",
            "versions_bv.append",
            "prot.arr.spec.create[before105]",
            "quic_packet_0rtt.retired_cids.create",
            "bytes.spec.empty[after104]",
            "attacker.init[after458]",
            "forged_quic_packet_vn.arr.spec.create[after106]",
            "forged_quic_packet.retired_cids.spec.resize[after112]",
            "versions.impl.extend[implement97]",
            "forged_protected_quic_packet.arr.set",
            "replayed_quic_packet_0rtt.arr.impl.empty[implement89]",
            "clients.set_tls_id",
            "arr_streamid_s.extend",
            "tls.handshakes.domain.impl.next[implement8]",
            "tls_api.upper.foo.impl.destroy[implement365]",
            "frame.new_connection_id.handle[before301]",
            "forged_quic_packet_retry.retired_cids.append",
            "tls_hand_extensions.spec.get[after110]",
            "forged_quic_packet_vn.arr.pop_back",
            "arr_pkt_num_s.resize",
            "quic_packet_0rtt.arr.pop_back",
            "arr_streamid_s.spec.get[after110]",
            "clients.client.arr.reverse",
            "vector[tls.cipher_suite].append",
            "tls_extensions.spec.create[after106]",
            "recv_packet",
            "forged_quic_packet_retry.retired_cids.impl.create[implement88]",
            "quic_packet_0rtt.retired_cids.impl.create[implement88]",
            "quic_packet_0rtt.retired_cids.resize",
            "forged_pkt_serdes_vn.to_bytes",
            "vector[tls.extension].impl.resize[implement93]",
            "preferred_address.set",
            "frame.ack.range.arr.get",
            "clients.client.arr.append",
            "arr_streamid_r.extend",
            "vector[transport_parameter].impl.get[implement91]",
            "servers.server.arr.append",
            "quic_packet_vn.arr.impl.size[implement92]",
            "quic_packet_coal_0rtt.idx.spec.prev[before4]",
            "forged_pkts.spec.get[after110]",
            "stream_data.spec.size[after111]",
            "tls_api.upper.create",
            "frame.ping.handle[before295]",
            "prot.get_var_int",
            "tls_api.upper.alert",
            "forged_quic_packet_retry.arr.resize",
            "show_probing",
            "tls_api.id.spec.prev[after13]",
            "tls_extensions.domain.impl.prev[implement9]",
            "arr_pkt_num_s.impl.empty[implement89]",
            "bytes.spec.resize[after112]",
            "tls_hand_extensions.spec.size[after111]",
            "frame.connection_close.handle[before279]",
            "net.close",
            "replayed_packet_event_0rtt[after355]",
            "vector[tls.compression_method].spec.size[after111]",
            "forged_quic_packet_retry.retired_cids.spec.set[before107]",
            "vector[tls.extension].spec.set[after108]",
            "tls.handshakes.impl.create[implement88]",
            "quic_packet.retired_cids.empty",
            "forged_protected_quic_packet.retired_cids.impl.append[implement96]",
            "versions.spec.set[before107]",
            "replayed_quic_packet_0rtt.retired_cids.impl.get[implement91]",
            "vector[tls.psk_identity].append",
            "bytes.impl.create[implement88]",
            "versions.impl.pop_back[implement95]",
            "arr_pkt_num_s.append",
            "quic_packet_retry.arr.spec.append[after113]",
            "tls.handshakes.spec.get[before109]",
            "clients.client.arr.spec.get[before109]",
            "forged_protected_quic_packet.retired_cids.impl.empty[implement89]",
            "vector[tls.cipher_suite].spec.append[after113]",
            "forged_protected_quic_packet.retired_cids.impl.pop_back[implement95]",
            "forged_quic_packet.retired_cids.spec.set[before107]",
            "ip_endpoints.size",
            "cids.reverse",
            "idx.spec.prev[after5]",
            "bytes.resize",
            "quic_packet_vn.arr.extend",
            "frame.max_streams.handle[before275]",
            "quic_packet_0rtt.retired_cids.impl.get[implement91]",
            "vector[tls.psk_identity].impl.back[implement94]",
            "packet_event_retry",
            "quic_packet.retired_cids.spec.empty[after104]",
            "arr_streamid_r.get",
            "forged_quic_packet.retired_cids.impl.set[implement90]",
            "arr_pkt_num_s.reverse",
            "lower_stream_pos[implement440]",
            "forged_quic_packet.arr.spec.resize[after112]",
            "frame_retire_connection_id_handle[before494]",
            "quic_packet_0rtt.retired_cids.spec.append[after113]",
            "forged_quic_packet_vn.arr.impl.extend[implement97]",
            "vector[transport_parameter].size",
            "second_client.init[after452]",
            "vector[tls.handshake].spec.get[after110]",
            "arr_streamid_s.size",
            "forged_quic_packet.retired_cids.resize",
            "versions.impl.resize[implement93]",
            "arr_streamid_s.back",
            "servers.server.arr.impl.set[implement90]",
            "frame.idx.spec.prev[after5]",
            "init[after84]",
            "frame.ack.range.arr.impl.reverse[implement98]",
            "cids.create",
            "arr_pkt_num_r.spec.create[after106]",
            "vector[tls.compression_method].extend",
            "quic_packet.arr.spec.empty[after104]",
            "tls_extensions.domain.impl.next[implement8]",
            "frame.ack_ecn.handle[after266]",
            "init[after348]",
            "ip_endpoints.get",
            "quic_packet_coal_0rtt.retired_cids.spec.resize[after112]",
            "quic_packet.arr.spec.get[before109]",
            "vector[tls.cipher_suite].spec.create[after106]",
            "recv_vn_pkt",
            "forged_quic_packet_retry.retired_cids.impl.empty[implement89]",
            "arr_pkt_num_s.empty",
            "quic_packet_vn.arr.impl.reverse[implement98]",
            "vector[tls.extension].append",
            "forged_protected_pkt_serdes.from_bytes",
            "frame.arr.extend",
            "init[after481]",
            "random_microsecs",
            "forged_quic_packet_vn.arr.impl.pop_back[implement95]",
            "quic_packet_coal_0rtt.arr.impl.back[implement94]",
            "tls_hand_extensions.domain.spec.prev[after5]",
            "frame.arr.impl.extend[implement97]",
            "vector[tls.extension].impl.append[implement96]",
            "forged_quic_packet.retired_cids.create",
            "vector[tls.compression_method].impl.reverse[implement98]",
            "stream_data.spec.create[after106]",
            "stream_pos.spec.prev[before4]",
            "mim_client_target.set_tls_id",
            "vector[transport_parameter].impl.create[implement88]",
            "tls_api.upper.create[before389]",
            "tls_hand_extensions.pop_back",
            "prot.show_header",
            "forged_protected_quic_packet.retired_cids.empty",
            "forged_protected_quic_packet.retired_cids.impl.back[implement94]",
            "fake_client.behavior",
            "show_connected",
            "tls_api.upper.save_active_connection_id_limit",
            "vector[tls.handshake].create",
            "jdx_s.spec.next[after3]",
            "servers.server.arr.set",
            "arr_pkt_num_r.impl.reverse[implement98]",
            "tls_hand_extensions.spec.set[before107]",
            "bytes_to_cid",
            "frame.new_token.handle[before309]",
            "show_kk",
            "frame.handshake_done.handle[before299]",
            "packet_event[after476]",
            "quic_packet_retry.arr.impl.size[implement92]",
            "arr_pkt_num_s.spec.resize[after112]",
            "quic_packet_retry.retired_cids.impl.size[implement92]",
            "quic_packet_0rtt.arr.spec.create[before105]",
            "tls_api.upper.foo.impl.set_initial_keys[implement366]",
            "clients.client.arr.impl.back[implement94]",
            "arr_pkt_num_s.pop_back",
            "frame.stream_data_blocked.handle[before285]",
            "frame.handshake_done.handle[after300]",
            "vector[tls.handshake].domain.next",
            "forged_quic_packet_retry.retired_cids.extend",
            "arr_streamid_s.impl.empty[implement89]",
            "quic_packet.retired_cids.append",
            "index.prev",
            "frame.ack_ecn.range.arr.impl.create[implement88]",
            "mim_server_target.set_tls_id",
            "forged_quic_packet_retry.retired_cids.spec.append[after113]",
            "servers.server.idx.impl.next[implement8]",
            "arr_streamid_s.pop_back",
            "forged_quic_packet_vn.idx.prev",
            "frame.arr.spec.resize[after112]",
            "frame.ack.range.arr.impl.empty[implement89]",
            "init[after334]",
            "vector[tls.extension].impl.empty[implement89]",
            "arr_streamid_s.impl.reverse[implement98]",
            "replayed_quic_packet_0rtt.arr.impl.reverse[implement98]",
            "second_client.set_tls_id",
            "infer_tls_events",
            "vector[tls.cipher_suite].impl.set[implement90]",
            "vector[tls.cipher_suite].impl.extend[implement97]",
            "tls_api.upper.foo.impl.save_token[implement370]",
            "init[after256]",
            "quic_packet_retry.arr.impl.extend[implement97]",
            "bytes.impl.append[implement96]",
            "forged_protected_quic_packet.arr.get",
            "tls_api.upper.session_established",
            "cids.impl.get[implement91]",
            "client.init[after452]",
            "prot.get_pnum",
            "vector[tls.cipher_suite].spec.get[before109]",
            "http_request_file.read[implement71]",
            "tls_client_version_response[after473]",
            "app_server_open_event",
            "tls_hand_extensions.impl.reverse[implement98]",
            "tls_api.upper.iv_size",
            "forged_pkt_serdes_retry.from_bytes[implement399]",
            "forged_quic_packet_retry.retired_cids.get",
            "prot.arr.impl.reverse[implement98]",
            "vector[tls.cipher_suite].impl.reverse[implement98]",
            "show_tls_keys_established_event",
            "quic_packet_retry.arr.spec.size[after111]",
            "quic_packet_coal_0rtt.retired_cids.get",
            "quic_packet_0rtt.retired_cids.spec.resize[after112]",
            "forged_protected_quic_packet.arr.impl.append[implement96]",
            "cids.extend",
            "tls_hand_extensions.domain.next",
            "idx.spec.next[after3]",
            "attacker.behavior",
            "vector[tls.cipher_suite].create",
            "net.impl.handle_recv",
            "frame.path_challenge.handle[before305]",
            "frame.streams_blocked.handle[before289]",
            "stream_data.create",
            "quic_packet_0rtt.retired_cids.impl.append[implement96]",
            "vector[tls.psk_identity].reverse",
            "mim_agent.configure_NAT_attack_in",
            "tls_api_upper_keys_established[implement469]",
            "stream_data.impl.get[implement91]",
            "servers.server.arr.resize",
            "tls_api.id.impl.prev[implement17]",
            "clients.client.arr.spec.create[after106]",
            "infer_tls_events_0rtt",
            "versions_bv.impl.back[implement94]",
            "vector[tls.extension].extend",
            "http_request_file.write[implement70]",
            "replayed_quic_packet_0rtt.arr.spec.get[before109]",
            "prot.show_pkt_length",
            "versions_bv.reverse",
            "forged_quic_packet.arr.spec.empty[after104]",
            "forged_quic_packet_vn.arr.spec.resize[after112]",
            "disable_active_migration.set",
            "forged_protected_quic_packet.arr.impl.create[implement88]",
            "frame.ack_frequency.handle[before311]",
            "quic_packet_coal_0rtt.arr.extend",
            "forged_quic_packet.retired_cids.impl.empty[implement89]",
            "frame.ack.range.arr.extend",
            "replayed_quic_packet_0rtt.retired_cids.spec.create[before105]",
            "forged_protected_quic_packet.idx.spec.next[after3]",
            "handle_receiving_recv",
            "client.set_tls_id",
            "forged_quic_packet.arr.spec.create[before105]",
            "quic_packet_coal_0rtt.retired_cids.impl.size[implement92]",
            "tls_id_to_cid",
            "frame.ack_ecn.range.arr.spec.create[after106]",
            "frame.ack.range.arr.spec.empty[after104]",
            "forged_packet_event_retry[after350]",
            "lo_byte_pos",
            "show_fsm_sending_dataSent_event",
            "arr_pkt_num_s.spec.set[before107]",
            "quic_packet_coal_0rtt.retired_cids.spec.create[after106]",
            "cids.empty",
            "quic_packet_0rtt.arr.append",
            "clients.client.arr.impl.get[implement91]",
            "net_recv[implement466]",
            "mim_client_target.init[after452]",
            "tls_api.lower.send",
            "forged_protected_quic_packet.arr.resize",
            "idx_r.prev",
            "vector[tls.handshake].impl.extend[implement97]",
            "prot.arr.spec.empty[after104]",
            "frame.arr.spec.append[after113]",
            "quic_packet_0rtt.retired_cids.spec.create[before105]",
            "second_server.set_ep",
            "frame.ack_ecn.range.idx.spec.prev[after5]",
            "quic_packet.arr.create",
            "arr_pkt_num_r.get",
            "forged_protected_quic_packet.arr.spec.get[after110]",
            "tls_api.upper.recv",
            "quic_packet_retry.arr.spec.get[after110]",
            "vector[transport_parameter].impl.append[implement96]",
            "arr_pkt_num_s.spec.get[before109]",
            "forged_quic_packet.long",
            "quic_packet_vn.arr.spec.append[after113]",
            "forged_protected_quic_packet.retired_cids.resize",
            "versions.impl.create[implement88]",
            "forged_quic_packet.retired_cids.impl.pop_back[implement95]",
            "servers.server.arr.spec.empty[after104]",
            "prot.get_level",
            "quic_packet.arr.impl.back[implement94]",
            "clients.client.arr.pop_back",
            "recv_protected_packet_mim",
            "vector[tls.cipher_suite].impl.empty[implement89]",
            "quic_packet.retired_cids.impl.create[implement88]",
            "show_version",
            "stream_data.empty",
            "arr_pkt_num_r.impl.resize[implement93]",
            "quic_packet_0rtt.retired_cids.pop_back",
            "replayed_quic_packet_0rtt.idx.spec.prev[before4]",
            "servers.server.set_tls_id",
            "quic_packet_vn.arr.spec.set[after108]",
            "infer_frame",
            "vector[tls.handshake].impl.get[implement91]",
            "quic_packet_retry.arr.get",
            "frame.ack_ecn.range.arr.impl.reverse[implement98]",
            "vector[tls.psk_identity].domain.spec.next[after3]",
            "recv_packet_victim",
            "arr_streamid_r.impl.append[implement96]",
            "forged_quic_packet_retry.arr.impl.reverse[implement98]",
            "versions_bv.pop_back",
            "clients.client.arr.impl.empty[implement89]",
            "quic_packet.retired_cids.spec.append[after113]",
            "bytes.create",
            "cids.spec.set[after108]",
            "mim_agent.init[after457]",
            "quic_packet.idx.spec.prev[before4]",
            "idx_s.spec.next[after3]",
            "quic_packet_coal_0rtt.idx.prev",
            "forged_protected_quic_packet.retired_cids.pop_back",
            "prot.idx.spec.prev[after5]",
            "mim_agent.replay_packet",
            "quic_packet_vn.arr.spec.create[before105]",
            "forged_pkts.impl.resize[implement93]",
            "quic_packet.arr.impl.size[implement92]",
            "forged_quic_packet_retry.arr.spec.create[after106]",
            "init[after262]",
            "replayed_quic_packet_0rtt.arr.spec.append[after113]",
            "quic_packet.arr.set",
            "stream_pos.impl.next[implement8]",
            "idx_s.spec.prev[after5]",
            "quic_packet.retired_cids.get",
            "vector[tls.extension].spec.empty[after104]",
            "quic_packet_retry.long",
            "frame.ack_ecn.handle",
            "forged_packet_event",
            "export_length_cid_extension",
            "vector[transport_parameter].impl.back[implement94]",
            "forged_quic_packet.arr.spec.set[after108]",
            "frame.arr.impl.get[implement91]",
            "arr_streamid_s.spec.append[after113]",
            "frame.ack.range.arr.spec.set[after108]",
            "quic_packet_0rtt.retired_cids.spec.set[before107]",
            "tls_extensions.spec.size[after111]",
            "forward_packet_to_server_event[after342]",
            "vector[tls.handshake].impl.set[implement90]",
            "endpoint_to_pid",
            "replayed_quic_packet_0rtt.arr.spec.empty[after104]",
            "max_ack_delay.set",
            "forged_protected_quic_packet.retired_cids.spec.empty[after104]",
            "forged_quic_packet_retry.arr.impl.set[implement90]",
            "quic_packet_coal_0rtt.idx.next",
            "replayed_quic_packet_0rtt.arr.impl.pop_back[implement95]",
            "clients.client.arr.empty",
            "frame.max_streams_bidi.handle[after278]",
            "prot.arr.resize",
            "vector[tls.cipher_suite].reverse",
            "bytes.spec.create[after106]",
            "vector[tls.compression_method].domain.spec.prev[before4]",
            "forged_quic_packet_retry.retired_cids.impl.get[implement91]",
            "stream_data.get",
            "versions.resize",
            "vector[tls.extension].impl.create[implement88]",
            "tls_hand_extensions.domain.impl.prev[implement9]",
            "frame.connection_close.handle[after280]",
            "forged_pkts.size",
            "tls.handshakes.get",
            "vector[tls.cipher_suite].domain.next",
            "stream_data.back",
            "frame_ack_handle[before488]",
            "forged_protected_quic_packet.retired_cids.spec.create[before105]",
            "replayed_quic_packet_0rtt.arr.spec.create[after106]",
            "attacker.reset_NAT",
            "forged_quic_packet.arr.empty",
            "arr_streamid_r.impl.create[implement88]",
            "forged_protected_quic_packet.retired_cids.spec.create[after106]",
            "frame.ack_ecn.range.idx.prev",
            "stream_pos.prev",
            "arr_pkt_num_r.spec.resize[after112]",
            "stream_data.set",
            "frame.ack.range.arr.spec.get[before109]",
            "bytes.extend",
            "arr_streamid_s.spec.size[after111]",
            "vector[tls.compression_method].get",
            "forged_quic_packet_retry.arr.pop_back",
            "frame.streams_blocked.handle[after290]",
            "stream_data.reverse",
            "forged_quic_packet.retired_cids.spec.set[after108]",
            "forged_quic_packet.arr.impl.empty[implement89]",
            "tls_extensions.extend",
            "quic_packet_coal_0rtt.retired_cids.spec.set[before107]",
            "jdx_s.spec.prev[after5]",
            "index.spec.next[after3]",
            "show_receiving_fsm_event",
            "servers.server.arr.spec.set[before107]",
            "ip_endpoints.spec.set[before107]",
            "forged_quic_packet.arr.spec.append[after113]",
            "vector[tls.compression_method].spec.append[after113]",
            "cids.impl.pop_back[implement95]",
            "forged_pkts.impl.get[implement91]",
            "forged_protected_quic_packet.arr.spec.set[after108]",
            "vector[tls.psk_identity].impl.create[implement88]",
            "tls.handshakes.spec.empty[after104]",
            "forged_protected_quic_packet.arr.extend",
            "frame.ack.range.arr.impl.resize[implement93]",
            "bytes.impl.set[implement90]",
            "replayed_quic_packet_0rtt.retired_cids.impl.append[implement96]",
            "forged_pkt_serdes_vn.from_bytes[implement399]",
            "clients.client.arr.spec.empty[after104]",
            "quic_packet_coal_0rtt.retired_cids.spec.set[after108]",
            "quic_packet_retry.retired_cids.create",
            "tls_api.upper.get_initial_max_stream_data_bidi_local",
            "quic_packet_vn.idx.impl.next[implement8]",
            "quic_packet_0rtt.idx.spec.prev[before4]",
            "arr_streamid_s.spec.create[after106]",
            "servers.server.arr.reverse",
            "client_send_event[after502]",
            "forged_protected_quic_packet.idx.spec.prev[before4]",
            "arr_pkt_num_r.spec.append[after113]",
            "quic_packet_coal_0rtt.arr.impl.resize[implement93]",
            "http_request_file.sync[before66]",
            "quic_packet_coal_0rtt.retired_cids.spec.empty[after104]",
            "forged_quic_packet.retired_cids.extend",
            "handle_receiving_resetRead",
            "vector[tls.psk_identity].impl.get[implement91]",
            "forged_quic_packet_vn.arr.spec.set[after108]",
            "replayed_quic_packet_0rtt.arr.spec.set[after108]",
            "forged_pkt_serdes.to_bytes[implement398]",
            "show_fsm_receiving_dataRecvd_event",
            "tls.handshakes.spec.create[after106]",
            "frame.ack.range.arr.spec.size[after111]",
            "forged_quic_packet_retry.retired_cids.empty",
            "server.init[after454]",
            "replayed_quic_packet_0rtt.retired_cids.impl.back[implement94]",
            "prot.show_payload",
            "stream_id_to_cid",
            "jdx_s.impl.next[implement8]",
            "frame.handle",
            "arr_pkt_num_s.spec.get[after110]",
            "bytes.impl.resize[implement93]",
            "versions_bv.impl.reverse[implement98]",
            "quic_packet_vn.arr.get",
            "vector[transport_parameter].resize",
            "cids.pop_back",
            "vector[tls.extension].impl.extend[implement97]",
            "tls_extensions.spec.resize[after112]",
            "tls_extensions.impl.create[implement88]",
            "stream_data.spec.get[before109]",
            "frame.stream_data_blocked.handle[after286]",
            "arr_pkt_num_r.impl.extend[implement97]",
            "versions.empty",
            "vector[tls.psk_identity].impl.append[implement96]",
            "arr_pkt_num_r.spec.size[after111]",
            "forged_quic_packet_retry.retired_cids.spec.create[after106]",
            "vector[tls.psk_identity].spec.empty[after104]",
            "prot.arr.reverse",
            "tls_api.upper.foo.impl.create_0rtt[implement362]",
            "dst_is_generated_tls",
            "forged_packet_event[before335]",
            "versions_bv.extend",
            "tls_client_retry_response",
            "forged_quic_packet_retry.retired_cids.impl.pop_back[implement95]",
            "quic_packet_retry.arr.back",
            "arr_pkt_num_r.set",
            "quic_packet.retired_cids.impl.empty[implement89]",
            "forged_protected_quic_packet.idx.impl.prev[implement9]",
            "forged_quic_packet.retired_cids.spec.get[after110]",
            "forged_quic_packet_retry.idx.impl.next[implement8]",
            "tls.handshakes.impl.resize[implement93]",
            "quic_packet_retry.retired_cids.impl.get[implement91]",
            "http_request_file.write",
            "show_app_send_event",
            "vector[tls.psk_identity].spec.create[after106]",
            "hi_byte_pos",
            "tls_api.upper.foo.impl.get_active_connection_id_limit[implement382]",
            "forged_protected_quic_packet.idx.next",
            "transport_parameter.set",
            "replayed_pkt_serdes_0rtt.from_bytes",
            "packet_event_0rtt[after331]",
            "tls_hand_extensions.spec.create[after106]",
            "quic_packet_0rtt.arr.spec.resize[after112]",
            "forged_quic_packet.retired_cids.impl.extend[implement97]",
            "forged_pkt_serdes_vn.to_bytes[implement398]",
            "pkt_serdes_0rtt_coal.from_bytes[implement399]",
            "quic_packet.arr.pop_back",
            "vector[tls.compression_method].domain.impl.prev[implement9]",
            "http_request_file.synced",
            "tls.handshakes.domain.spec.next[after3]",
            "forged_quic_packet.arr.impl.size[implement92]",
            "dcid_size_pos",
            "quic_packet_0rtt.retired_cids.impl.pop_back[implement95]",
            "jdx_s.next",
            "clients.client.arr.spec.create[before105]",
            "replayed_quic_packet_0rtt.idx.impl.next[implement8]",
            "arr_streamid_r.empty",
            "quic_packet_0rtt.arr.impl.pop_back[implement95]",
            "replay_packet_to_server_event[before343]",
            "quic_packet_retry.arr.create",
            "quic_packet_vn.arr.impl.append[implement96]",
            "tls_api.upper.foo.impl.decrypt_cipher[implement369]",
            "prot.arr.spec.get[before109]",
            "tls_api.id.prev",
            "servers.server.arr.spec.get[after110]",
            "forged_quic_packet_retry.arr.impl.empty[implement89]",
            "vector[transport_parameter].domain.next",
            "forged_quic_packet.retired_cids.reverse",
            "second_server.set_tls_id",
            "acti_coid_check",
            "arr_streamid_s.create",
            "arr_streamid_r.set",
            "clear_packet",
            "prot.arr.create",
            "vector[tls.psk_identity].size",
            "quic_packet_vn.arr.spec.get[after110]",
            "tls_api.upper.foo.impl.save_initial_max_stream_data_bidi_remote[implement373]",
            "frame.ack.range.idx.spec.next[after3]",
            "modify_protected_packet_event",
            "forged_quic_packet_retry.arr.spec.set[before107]",
            "tls_extensions.spec.set[before107]",
            "mim_agent.set_ep",
            "tls_api_lower_send[implement467]",
            "forged_quic_packet.retired_cids.get",
            "arr_pkt_num_r.pop_back",
            "vector[tls.compression_method].domain.prev",
            "frame.arr.spec.get[before109]",
            "tls_keys_established_event",
            "quic_packet_0rtt.arr.spec.set[after108]",
            "vector[tls.compression_method].spec.set[before107]",
            "vector[tls.cipher_suite].impl.back[implement94]",
            "replayed_quic_packet_0rtt.arr.pop_back",
            "tls_hand_extensions.impl.size[implement92]",
            "forged_quic_packet_vn.arr.impl.back[implement94]",
            "unknown_transport_parameter.set",
            "quic_packet.arr.spec.set[after108]",
            "initial_max_data.set",
            "replayed_quic_packet_0rtt.retired_cids.impl.set[implement90]",
            "tls_hand_extensions.domain.spec.next[after3]",
            "forged_quic_packet_retry.retired_cids.impl.back[implement94]",
            "frame.rst_stream.handle",
            "frame.unknown_frame.handle[after298]",
            "vector[tls.psk_identity].set",
            "show_fsm_receiving_resetRead_event",
            "forged_quic_packet.retired_cids.impl.get[implement91]",
            "initial_max_stream_data_bidi_remote.set",
            "forged_quic_packet.arr.reverse",
            "padding_packet_event",
            "quic_packet.arr.spec.size[after111]",
            "idx_r.spec.next[after3]",
            "vector[transport_parameter].spec.append[after113]",
            "quic_packet_coal_0rtt.retired_cids.set",
            "forged_quic_packet_retry.idx.spec.prev[before4]",
            "modify_protected_packet_event[before337]",
            "export_length_cid",
            "frame_crypto_handle[before487]",
            "vector[tls.extension].create",
            "quic_packet.arr.back",
            "quic_packet.arr.resize",
            "forged_quic_packet_retry.retired_cids.spec.get[after110]",
            "quic_packet.retired_cids.pop_back",
            "quic_packet.arr.impl.empty[implement89]",
            "forged_protected_quic_packet.arr.size",
            "vector[tls.compression_method].spec.set[after108]",
            "frame.stream_data_blocked.handle",
            "quic_packet.retired_cids.impl.reverse[implement98]",
            "tls_extensions.domain.spec.prev[before4]",
            "second_client.set_ep",
            "frame.arr.impl.resize[implement93]",
            "quic_packet_0rtt.arr.impl.size[implement92]",
            "clients.client.arr.extend",
            "vector[tls.handshake].spec.empty[after104]",
            "arr_pkt_num_s.create",
            "vector[tls.extension].spec.size[after111]",
            "prot.arr.impl.pop_back[implement95]",
            "tls_api.upper.get_initial_max_stream_data_uni",
            "quic_packet.retired_cids.impl.append[implement96]",
            "frame.new_token.handle[after310]",
            "stream_data.impl.create[implement88]",
            "stateless_reset_token.set",
            "replayed_pkt_serdes_0rtt.to_bytes",
            "versions_bv.impl.create[implement88]",
            "quic_packet.retired_cids.impl.get[implement91]",
            "replayed_quic_packet_0rtt.retired_cids.impl.reverse[implement98]",
            "tls.handshakes.impl.back[implement94]",
            "frame.ack_ecn.range.arr.impl.empty[implement89]",
            "quic_packet_0rtt.retired_cids.empty",
            "quic_packet_0rtt.arr.impl.append[implement96]",
            "frame.ack.range.arr.empty",
            "replayed_quic_packet_0rtt.arr.spec.get[after110]",
            "frame.ack_ecn.range.arr.spec.get[before109]",
            "attacker.set_tls_id",
            "tls_api.upper.keys_established",
            "forged_quic_packet_vn.arr.reverse",
            "frame_new_connection_id_handle[before493]",
            "forged_pkts.spec.create[after106]",
            "forged_protected_quic_packet.arr.spec.size[after111]",
            "forged_protected_pkt_serdes.to_bytes",
            "tls.handshakes.set",
            "tls_api.upper.foo.impl.save_initial_max_stream_data_uni[implement371]",
            "stream_data.spec.get[after110]",
            "frame_connection_close_handle[before495]",
            "forged_quic_packet_vn.arr.spec.get[after110]",
            "mim_agent.get_saved_packets",
            "forged_quic_packet_retry.retired_cids.impl.resize[implement93]",
            "vector[transport_parameter].get",
            "quic_packet.idx.prev",
            "quic_packet_0rtt.retired_cids.impl.back[implement94]",
            "quic_packet_retry.retired_cids.append",
            "cids.get",
            "packet_event_vn[before316]",
            "retry_source_connection_id.set",
            "frame.ack_ecn.range.arr.append",
            "quic_packet.arr.impl.set[implement90]",
            "quic_packet_coal_0rtt.retired_cids.append",
            "arr_pkt_num_s.spec.append[after113]",
            "quic_packet_retry.idx.prev",
            "frame.stream.handle",
            "frame.ack_ecn.range.arr.spec.size[after111]",
            "tls_api.upper.encrypt_cipher",
            "quic_packet.arr.get",
            "is_padding_packet",
            "vector[tls.handshake].impl.create[implement88]",
            "cids.size",
            "export_length_cid_mim",
            "show_level_offset_length",
            "vector[tls.handshake].spec.get[before109]",
            "forged_quic_packet_retry.retired_cids.pop_back",
            "quic_packet_0rtt.arr.impl.create[implement88]",
            "cids.set",
            "packet_event_vn[after317]",
            "quic_packet_coal_0rtt.retired_cids.spec.create[before105]",
            "vector[transport_parameter].domain.spec.next[after3]",
            "quic_packet.arr.spec.set[before107]",
            "ip_endpoints.append",
            "pkt_serdes.to_bytes[implement398]",
            "make_transport_parameters",
            "arr_streamid_r.spec.create[after106]",
            "quic_packet_retry.idx.impl.prev[implement9]",
            "replayed_quic_packet_0rtt.retired_cids.spec.resize[after112]",
            "vector[tls.handshake].domain.impl.prev[implement9]",
            "forged_protected_quic_packet.arr.reverse",
            "prot.arr.impl.empty[implement89]",
            "frame.max_stream_data.handle[before283]",
            "tls_api.upper.save_initial_max_stream_id_bidi",
            "prot.get_var_int_len",
            "replayed_quic_packet_0rtt.arr.empty",
            "mim_client_target.behavior",
            "quic_packet_coal_0rtt.retired_cids.spec.get[after110]",
            "frame.idx.impl.next[implement8]",
            "quic_packet_0rtt.long",
            "vector[transport_parameter].append",
            "quic_packet_vn.arr.create",
            "second_client.behavior",
            "app_server_open_event[before240]",
            "tls_extensions.spec.get[before109]",
            "frame.stream.handle[after268]",
            "stream_data.impl.reverse[implement98]",
            "vector[tls.handshake].impl.resize[implement93]",
            "init[after239]",
            "frame.ack.range.arr.impl.pop_back[implement95]",
            "tls_api.upper.save_initial_max_data",
            "quic_packet_0rtt.arr.impl.get[implement91]",
            "cids.impl.reverse[implement98]",
            "versions.impl.empty[implement89]",
            "tls_hand_extensions.impl.empty[implement89]",
            "tls_extensions.spec.empty[after104]",
            "tls_extensions.impl.get[implement91]",
            "quic_packet_0rtt.retired_cids.impl.resize[implement93]",
            "replayed_quic_packet_0rtt.retired_cids.pop_back",
            "frame.idx.prev",
            "arr_streamid_r.back",
            "tls_extensions.spec.append[after113]",
            "tls_hand_extensions.impl.set[implement90]",
            "forged_protected_quic_packet.retired_cids.impl.extend[implement97]",
            "index.spec.prev[before4]",
            "ip_endpoints.impl.back[implement94]",
            "frame.max_stream_data.handle[after284]",
            "frame_max_streams_handle[before492]",
            "vector[tls.compression_method].domain.spec.next[after3]",
            "handle_sending_dataSent",
            "quic_packet_coal_0rtt.idx.spec.prev[after5]",
            "prot.idx.prev",
            "vector[tls.cipher_suite].size",
            "forged_quic_packet_retry.arr.impl.size[implement92]",
            "frame.max_stream_data.handle",
            "show_fsm_receiving_sizeKnown_event",
            "quic_packet_0rtt.retired_cids.impl.set[implement90]",
            "quic_packet_retry.retired_cids.back",
            "vector[tls.extension].domain.spec.prev[before4]",
            "forged_quic_packet_retry.arr.spec.set[after108]",
            "frame.ack.range.idx.impl.next[implement8]",
            "replayed_quic_packet_0rtt.retired_cids.spec.append[after113]",
            "frame.arr.spec.size[after111]",
            "vector[tls.extension].set",
            "tls_api.upper.destroy[before391]",
            "quic_packet_coal_0rtt.arr.spec.get[after110]",
            "frame.malicious_frame.handle[before313]",
            "servers.server.arr.empty",
            "frame.path_response.handle",
            "cids.spec.get[before109]",
            "quic_packet_retry.retired_cids.impl.append[implement96]",
            "versions_bv.spec.empty[after104]",
            "greater_microsecs[implement446]",
            "forged_quic_packet.arr.spec.get[after110]",
            "replayed_quic_packet_0rtt.retired_cids.extend",
            "quic_packet.retired_cids.spec.create[after106]",
            "ip_endpoints.spec.resize[after112]",
            "prot.arr.size",
            "replayed_quic_packet_0rtt.retired_cids.back",
            "bytes.set",
            "quic_packet_retry.arr.pop_back",
            "quic_packet_coal_0rtt.retired_cids.empty",
            "frame.ack_ecn.range.arr.back",
            "servers.server.idx.spec.next[after3]",
            "vector[tls.handshake].impl.append[implement96]",
            "frame.ack_ecn.range.arr.impl.extend[implement97]",
            "cids.spec.append[after113]",
            "forged_quic_packet.idx.impl.next[implement8]",
            "arr_streamid_r.spec.get[after110]",
            "vector[transport_parameter].domain.impl.next[implement8]",
            "replayed_quic_packet_0rtt.retired_cids.spec.size[after111]",
            "clients.client.arr.spec.size[after111]",
            "forged_protected_quic_packet.long",
            "replayed_pkt_serdes_0rtt.to_bytes[implement398]",
            "tls_hand_extensions.domain.spec.prev[before4]",
            "attacker.set_ep",
            "net.impl.open",
            "init[after508]",
            "prot.arr.set",
            "frame.application_close.handle[after282]",
            "init[after463]",
            "quic_packet_0rtt.retired_cids.spec.size[after111]",
            "vector[tls.psk_identity].impl.extend[implement97]",
            "prot.arr.impl.get[implement91]",
            "forged_quic_packet_retry.retired_cids.spec.empty[after104]",
            "replayed_quic_packet_0rtt.arr.spec.create[before105]",
            "quic_packet.retired_cids.spec.size[after111]",
            "clients.client.arr.back",
            "vector[tls.cipher_suite].spec.set[before107]",
            "tls_hand_extensions.impl.create[implement88]",
            "victim_agent.setup_socket",
            "idx_r.spec.prev[before4]",
            "stream_data.impl.append[implement96]",
            "forged_quic_packet.retired_cids.spec.create[after106]",
            "frame.ack_ecn.range.arr.spec.empty[after104]",
            "arr_streamid_r.spec.empty[after104]",
            "frame.data_blocked.handle[before287]",
            "arr_streamid_r.append",
            "tls.handshakes.domain.spec.prev[before4]",
            "pkt_serdes.to_bytes",
            "frame.ack_ecn.range.arr.spec.get[after110]",
            "forged_quic_packet.arr.spec.set[before107]",
            "frame.ack.handle",
            "frame.arr.impl.set[implement90]",
            "jdx_r.spec.next[after3]",
            "packet_scid",
            "idx.next",
            "pkt_serdes_vn.from_bytes[implement399]",
            "prot.retry_integrity_tag[implement433]",
            "frame.ack.range.arr.spec.get[after110]",
            "quic_packet_coal_0rtt.idx.spec.next[after3]",
            "forward_packet_to_client_event[before339]",
            "tls_api.upper.foo.impl.create[implement360]",
            "index.spec.prev[after5]",
            "client_server.set_ep",
            "frame_rst_stream_handle[before489]",
            "handle_tls_handshake",
            "forged_quic_packet_retry.arr.spec.append[after113]",
            "arr_pkt_num_s.spec.set[after108]",
            "ip_endpoints.impl.empty[implement89]",
            "quic_packet_retry.arr.impl.append[implement96]",
            "frame.max_data.handle",
            "forged_quic_packet.arr.spec.size[after111]",
            "forged_pkts.spec.size[after111]",
            "ip_endpoints.resize",
            "tls_hand_extensions.domain.prev",
            "tls_hand_extensions.resize",
            "vector[tls.handshake].impl.reverse[implement98]",
            "quic_packet.arr.spec.create[before105]",
            "tls.handshakes.extend",
            "frame.ack_ecn.range.arr.spec.set[after108]",
            "tls_api.upper.key_material_export[before396]",
            "replayed_quic_packet_0rtt.arr.back",
            "versions_bv.spec.create[before105]",
            "tls_hand_extensions.impl.pop_back[implement95]",
            "scid_size_pos",
            "vector[tls.extension].get",
            "tls_extensions.size",
            "tls.handshakes.spec.append[after113]",
            "vector[tls.cipher_suite].impl.create[implement88]",
            "init[after460]",
            "tls.handshakes.resize",
            "show_fsm_receiving_recv_event",
            "http_request_file.sync",
            "cids.spec.resize[after112]",
            "packet_event_retry[after478]",
            "quic_packet_0rtt.retired_cids.back",
            "arr_streamid_s.impl.extend[implement97]",
            "quic_packet_0rtt.idx.next",
            "vector[transport_parameter].spec.create[before105]",
            "quic_packet_coal_0rtt.retired_cids.impl.pop_back[implement95]",
            "packet_event_coal_0rtt",
            "tls.handshakes.spec.get[after110]",
            "tls_extensions.resize",
            "quic_packet_coal_0rtt.long",
            "forged_quic_packet_vn.idx.spec.next[after3]",
            "arr_streamid_r.pop_back",
            "quic_packet_vn.idx.next",
            "forged_quic_packet.arr.append",
            "quic_packet_retry.arr.impl.reverse[implement98]",
            "stream_data.spec.resize[after112]",
            "jdx_r.spec.prev[before4]",
            "forged_quic_packet_vn.arr.spec.get[before109]",
            "forged_quic_packet_retry.idx.spec.next[after3]",
            "tls_extensions.impl.set[implement90]",
            "forged_quic_packet.idx.spec.next[after3]",
            "arr_pkt_num_r.create",
            "forged_quic_packet.arr.get",
            "clients.client.arr.get",
            "frame.idx.spec.next[after3]",
            "versions_bv.impl.resize[implement93]",
            "bytes.size",
            "forged_quic_packet.retired_cids.impl.create[implement88]",
            "cids.impl.resize[implement93]",
            "frame_stream_data_blocked_handle[before498]",
            "pkt_serdes_retry.to_bytes[implement398]",
            "prot.get_pnum_len",
            "forged_quic_packet.idx.impl.prev[implement9]",
            "attacker.configure_NAT_attack_in_spoof",
            "tls_api.upper.foo.impl.decrypt_aead[implement385]",
            "quic_packet_coal_0rtt.retired_cids.impl.resize[implement93]",
            "frame_stream_handle[before486]",
            "clients.client.arr.spec.get[after110]",
            "servers.init[after455]",
            "forged_quic_packet_vn.arr.impl.empty[implement89]",
            "frame.arr.impl.reverse[implement98]",
            "prot.arr.impl.resize[implement93]",
            "quic_packet_coal_0rtt.arr.spec.create[before105]",
            "http_request_file.read",
            "bytes.reverse",
            "replayed_quic_packet_0rtt.retired_cids.resize",
            "tls.handshakes.impl.size[implement92]",
            "vector[tls.compression_method].spec.get[after110]",
            "versions_bv.impl.append[implement96]",
            "forged_quic_packet_vn.arr.impl.get[implement91]",
            "vector[tls.compression_method].pop_back",
            "packet_event_0rtt",
            "quic_packet_vn.arr.empty",
            "quic_packet_0rtt.arr.spec.get[after110]",
            "versions_bv.size",
            "quic_packet_0rtt.arr.impl.set[implement90]",
            "arr_streamid_s.impl.back[implement94]",
            "quic_packet_0rtt.arr.spec.get[before109]",
            "stream_data.spec.append[after113]",
            "vector[tls.psk_identity].impl.empty[implement89]",
            "versions.reverse",
            "stream_max_data",
            "frame.crypto.handle[before269]",
            "quic_packet_coal_0rtt.arr.impl.reverse[implement98]",
            "quic_packet_coal_0rtt.arr.append",
            "prot.cid_to_tls_id",
            "replayed_quic_packet_0rtt.retired_cids.append",
            "tls_extensions.domain.spec.prev[after5]",
            "forged_quic_packet.retired_cids.set",
            "modify_protected_packet_event[after338]",
            "forged_quic_packet.retired_cids.spec.empty[after104]",
            "quic_packet_vn.arr.impl.set[implement90]",
            "forged_quic_packet.arr.pop_back",
            "show_set_initial_keys",
            "max_idle_timeout.set",
            "vector[tls.psk_identity].spec.set[before107]",
            "arr_pkt_num_r.impl.set[implement90]",
            "versions.spec.get[before109]",
            "app_server_open_event[after241]",
            "prot.arr.empty",
            "stream_data.spec.empty[after104]",
            "quic_packet_retry.arr.empty",
            "frame.crypto.handle[after270]",
            "frame.malicious_frame.handle[after314]",
            "frame.ack.range.arr.set",
            "vector[tls.handshake].impl.back[implement94]",
            "prot.stream_data_xor",
            "arr_pkt_num_r.impl.create[implement88]",
            "tls_hand_extensions.spec.empty[after104]",
            "arr_streamid_s.set",
            "quic_packet.arr.extend",
            "vector[tls.handshake].spec.set[after108]",
            "vector[transport_parameter].set",
            "victim_agent.init[after459]",
            "vector[tls.cipher_suite].spec.resize[after112]",
            "src_tls_id",
            "vector[tls.extension].domain.spec.prev[after5]",
            "frame.ack.range.arr.size",
            "quic_packet_0rtt.retired_cids.impl.extend[implement97]",
            "arr_pkt_num_r.impl.size[implement92]",
            "cids.spec.create[after106]",
            "versions_bv.impl.get[implement91]",
            "show_stream",
            "undefined_host_error",
            "replayed_quic_packet_0rtt.arr.impl.back[implement94]",
            "frame.ack_ecn.range.idx.next",
            "clients.client.arr.set",
            "tls_hand_extensions.impl.append[implement96]",
            "vector[tls.cipher_suite].extend",
            "vector[tls.cipher_suite].spec.empty[after104]",
            "quic_packet.arr.impl.get[implement91]",
            "forged_quic_packet_retry.arr.impl.back[implement94]",
            "show_fsm_receiving_resetRecvd_event",
            "tls_api.id.spec.next[after11]",
            "quic_packet_0rtt.arr.size",
            "forward_packet_to_client_event",
            "quic_packet.idx.spec.prev[after5]",
            "vector[tls.extension].resize",
            "tls.handshakes.spec.set[before107]",
            "quic_packet_coal_0rtt.retired_cids.impl.empty[implement89]",
            "endpoint_id_addr",
            "frame.ack_frequency.handle",
            "versions.spec.size[after111]",
            "arr_streamid_s.spec.get[before109]",
            "vector[tls.handshake].domain.spec.prev[after5]",
            "show_sending_fsm_event",
            "frame.arr.create",
            "quic_packet_0rtt.retired_cids.spec.get[before109]",
            "frame_max_stream_data_handle[before497]",
            "servers.server.arr.size",
            "quic_packet.arr.spec.get[after110]",
            "prot.idx.next",
            "vector[tls.handshake].empty",
            "tls_api.upper.foo.impl.get_initial_max_stream_data_bidi_local[implement378]",
            "quic_packet_retry.arr.spec.create[after106]",
            "vector[tls.compression_method].impl.back[implement94]",
            "quic_packet_retry.retired_cids.spec.create[before105]",
            "tls.handshakes.back",
            "bytes.append",
            "tls_extensions.impl.back[implement94]",
            "forged_quic_packet_retry.arr.empty",
            "forged_quic_packet.arr.impl.reverse[implement98]",
            "versions_bv.spec.get[before109]",
            "quic_packet_0rtt.idx.impl.prev[implement9]",
            "tls_extensions.spec.get[after110]",
            "tls.handshake_parser.deserialize",
            "vector[tls.compression_method].impl.get[implement91]",
            "forged_protected_quic_packet.arr.impl.back[implement94]",
            "vector[tls.compression_method].impl.create[implement88]",
            "arr_pkt_num_s.impl.resize[implement93]",
            "forged_quic_packet.arr.impl.back[implement94]",
            "vector[tls.compression_method].spec.empty[after104]",
            "forged_protected_quic_packet.arr.spec.get[before109]",
            "quic_packet_0rtt.arr.extend",
            "servers.set_ep",
            "tls_extensions.spec.set[after108]",
            "tls_hand_extensions.create",
            "bytes.pop_back",
            "versions.back",
            "arr_streamid_r.impl.reverse[implement98]",
            "vector[tls.cipher_suite].spec.set[after108]",
            "replayed_quic_packet_0rtt.retired_cids.spec.empty[after104]",
            "tls_api.upper.foo.impl.save_initial_max_stream_id_bidi[implement379]",
            "show_iretry",
            "quic_packet_0rtt.retired_cids.extend",
            "forged_quic_packet_retry.retired_cids.spec.resize[after112]",
            "replayed_quic_packet_0rtt.retired_cids.spec.create[after106]",
            "quic_packet_retry.arr.impl.empty[implement89]",
            "idx.spec.prev[before4]",
            "forged_quic_packet_vn.arr.spec.set[before107]",
            "frame_max_data_handle[before499]",
            "arr_streamid_s.empty",
            "replayed_packet_event_0rtt[before354]",
            "vector[tls.handshake].domain.impl.next[implement8]",
            "forged_quic_packet_retry.retired_cids.set",
            "stream_data.spec.set[after108]",
            "double_cid",
            "frame.application_close.handle[before281]",
            "tls_hand_extensions.impl.get[implement91]",
            "quic_packet_coal_0rtt.retired_cids.impl.extend[implement97]",
            "quic_packet_retry.retired_cids.spec.create[after106]",
            "quic_packet_retry.retired_cids.spec.set[after108]",
            "tls.handshake_data_event",
            "arr_pkt_num_s.impl.extend[implement97]",
            "vector[tls.compression_method].impl.set[implement90]",
            "tls_api.upper.create_0rtt",
            "quic_packet_coal_0rtt.arr.impl.extend[implement97]",
            "vector[tls.handshake].pop_back",
            "tls_hand_extensions.spec.create[before105]",
            "vector[tls.extension].impl.reverse[implement98]",
            "quic_packet_coal_0rtt.arr.spec.resize[after112]",
            "quic_packet_vn.arr.impl.back[implement94]",
            "forged_quic_packet_retry.retired_cids.reverse",
            "bytes.impl.empty[implement89]",
            "versions.impl.reverse[implement98]",
            "vector[tls.handshake].domain.spec.next[after3]",
            "forged_quic_packet.arr.extend",
            "prot.get_pnum_len_b",
            "frame.ack_ecn.range.arr.impl.back[implement94]",
            "tls_extensions.impl.resize[implement93]",
            "cids.impl.append[implement96]",
            "pkt_serdes_0rtt.from_bytes[implement399]",
            "servers.server.arr.impl.resize[implement93]",
            "init[after326]",
            "servers.server.arr.impl.reverse[implement98]",
            "vector[transport_parameter].back",
            "frame.ack.range.arr.spec.create[before105]",
            "forged_quic_packet.idx.spec.prev[before4]",
            "forged_pkts.impl.append[implement96]",
            "app_server_open_event_0rtt",
            "versions_bv.back",
            "tls.handshakes.impl.append[implement96]",
            "tls_api.upper.destroy[after392]",
            "servers.server.arr.spec.create[after106]",
            "vector[transport_parameter].impl.pop_back[implement95]",
            "quic_packet_retry.idx.next",
            "arr_streamid_r.impl.get[implement91]",
            "prot.arr.impl.create[implement88]",
            "forged_protected_quic_packet.retired_cids.impl.resize[implement93]",
            "ip_endpoints.impl.get[implement91]",
            "quic_packet_retry.arr.spec.create[before105]",
            "tls_api.upper.foo.impl.lower_recv[implement387]",
            "tls_api.upper.foo.impl.get_initial_max_data[implement376]",
            "frame.ack.range.arr.append",
            "clients.client.arr.resize",
            "prot.arr.get",
            "frame.ack.range.arr.pop_back",
            "ack_delay_exponent.set",
            "vector[tls.psk_identity].create",
            "bytes.back",
            "jdx_s.prev",
            "vector[tls.extension].back",
            "forged_protected_quic_packet.arr.spec.set[before107]",
            "tls_api.upper.create_0rtt_client",
            "frame.stop_sending.handle",
            "arr_streamid_s.reverse",
            "quic_packet_coal_0rtt.retired_cids.create",
            "replay_packet_to_server_event",
            "lower_stream_id",
            "quic_packet_retry.retired_cids.empty",
            "quic_packet_retry.arr.spec.set[after108]",
            "stream_data.impl.pop_back[implement95]",
            "tls_handshake_data_event[after470]",
            "fake_client.set_tls_id",
            "tls_client_retry_response[after474]",
            "forged_packet_event_vn[before351]",
            "quic_packet_retry.retired_cids.spec.set[before107]",
            "frame.arr.size",
            "vector[tls.cipher_suite].impl.get[implement91]",
            "forged_protected_quic_packet.retired_cids.impl.set[implement90]",
            "quic_packet_retry.arr.impl.back[implement94]",
            "tls_api.upper.destroy",
            "frame.ack.range.arr.spec.append[after113]",
            "show_endpoint",
            "arr_streamid_r.spec.set[after108]",
            "quic_packet_coal_0rtt.arr.create",
            "forged_quic_packet_retry.arr.spec.get[before109]",
            "frame.stop_sending.handle[after274]",
            "prot.get_packet_sample",
            "tls_api.upper.compute_retry_integrity_tag",
            "handle_receiving_sizeKnown",
            "forged_quic_packet_retry.arr.size",
            "stream_pos.spec.prev[after5]",
            "forged_quic_packet_retry.retired_cids.spec.create[before105]",
            "idx.prev",
            "quic_packet_0rtt.arr.set",
            "clients.client.arr.impl.set[implement90]",
            "mim_agent.set_tls_id",
            "client_send_event",
            "frame.ack.handle[before263]",
            "vector[transport_parameter].impl.size[implement92]",
            "quic_packet_coal_0rtt.retired_cids.spec.size[after111]",
            "forged_protected_quic_packet.retired_cids.spec.get[before109]",
            "forged_pkts.spec.set[before107]",
            "cids.spec.size[after111]",
            "stream_pos.impl.prev[implement9]",
            "quic_packet.retired_cids.spec.resize[after112]",
            "frame.arr.append",
            "tls_extensions.impl.append[implement96]",
            "quic_packet_coal_0rtt.arr.impl.size[implement92]",
            "replayed_quic_packet_0rtt.long",
            "tls_hand_extensions.impl.back[implement94]",
            "init[after462]",
            "show_pstats",
            "mim_agent.modify_packet",
            "quic_packet_retry.retired_cids.reverse",
            "quic_packet_0rtt.retired_cids.impl.size[implement92]",
            "frame.ack_ecn.range.arr.resize",
            "tls_hand_extensions.get",
            "forged_pkts.spec.create[before105]",
            "client_server.init[after456]",
            "quic_packet_vn.arr.pop_back",
            "prot.arr.spec.resize[after112]",
            "stream_data.pop_back",
            "vector[tls.cipher_suite].domain.spec.next[after3]",
            "clients.client.idx.spec.prev[after5]",
            "forged_protected_quic_packet.arr.back",
            "forged_quic_packet_retry.arr.spec.create[before105]",
            "forged_protected_quic_packet.arr.impl.resize[implement93]",
            "bytes.spec.size[after111]",
            "show_biatch_2",
            "handle_receiving_ack",
            "tls_recv_event",
            "show_test",
            "show_initial_request_vn",
            "vector[tls.psk_identity].domain.impl.prev[implement9]",
            "frame.ack.range.arr.spec.create[after106]",
            "clients.client.set_ep",
            "tls.handshakes.spec.resize[after112]",
            "tls_hand_extensions.extend",
            "arr_pkt_num_s.spec.size[after111]",
            "replayed_pkt_serdes_0rtt.from_bytes[implement399]",
            "vector[tls.cipher_suite].get",
            "frame.arr.set",
            "frame.max_data.handle[after294]",
            "forged_quic_packet_vn.arr.append",
            "pkt_serdes_0rtt_coal.to_bytes",
            "clients.client.idx.prev",
            "cids.impl.extend[implement97]",
            "frame.ack.range.arr.impl.size[implement92]",
            "frame.arr.spec.create[before105]",
            "servers.server.arr.spec.set[after108]",
            "cids.back",
            "quic_packet_coal_0rtt.arr.spec.get[before109]",
            "servers.server.arr.impl.empty[implement89]",
            "tls_api.upper.foo.impl.get_initial_max_stream_data_uni[implement372]",
            "infer_tls",
            "versions.impl.set[implement90]",
            "vector[tls.psk_identity].domain.next",
            "forged_protected_quic_packet.arr.spec.create[before105]",
            "packet_event_0rtt[after480]",
            "forged_protected_quic_packet.arr.empty",
            "frame.ack_ecn.range.idx.spec.next[after3]",
            "show_tls_id_to_cid",
            "frame.arr.impl.pop_back[implement95]",
            "forged_pkts.spec.get[before109]",
            "prot.to_var_int_16",
            "quic_packet_vn.idx.spec.prev[after5]",
            "replayed_quic_packet_0rtt.retired_cids.empty",
            "greater_stream_pos[implement439]",
            "arr_streamid_s.spec.create[before105]",
            "versions.spec.set[after108]",
            "forged_protected_pkt_serdes.from_bytes[implement399]",
            "enable_time_stamp.set",
            "forged_pkt_serdes.from_bytes",
            "prot.idx.spec.prev[before4]",
            "frame.ack.range.arr.spec.set[before107]",
            "initial_max_stream_id_uni.set",
            "forged_quic_packet_retry.arr.impl.append[implement96]",
            "arr_streamid_s.append",
            "vector[tls.compression_method].impl.append[implement96]",
            "handle_sending_send",
            "reflect_packet_to_victim_event[before345]",
            "forged_pkt_serdes_retry.from_bytes",
            "forged_quic_packet_retry.retired_cids.impl.set[implement90]",
            "frame.ack.range.arr.impl.back[implement94]",
            "server.behavior",
            "quic_packet_retry.retired_cids.resize",
            "tls_api.upper.get_initial_max_data",
            "tls_api.upper.key_material_export",
            "tls.handshake_parser.deserialize[implement253]",
            "replayed_quic_packet_0rtt.arr.resize",
            "quic_packet_retry.arr.append",
            "servers.server.arr.spec.append[after113]",
            "frame.arr.impl.size[implement92]",
            "forged_protected_quic_packet.retired_cids.append",
            "forged_packet_event[after336]",
            "mim_server_target.behavior",
            "forged_protected_quic_packet.arr.impl.size[implement92]",
            "vector[tls.cipher_suite].back",
            "stream_id_allowed",
            "vector[tls.handshake].impl.empty[implement89]",
            "quic_packet_coal_0rtt.arr.spec.create[after106]",
            "frame.ack_ecn.range.arr.pop_back",
            "frame.ack.range.arr.impl.extend[implement97]",
            "bytes.spec.set[before107]",
            "versions_bv.spec.set[before107]",
            "initial_source_connection_id.set",
            "idx_r.impl.prev[implement9]",
            "pkt_serdes_vn.to_bytes[implement398]",
            "forged_pkts.spec.append[after113]",
            "tls_client_version_response",
            "quic_packet.arr.append",
            "vector[transport_parameter].domain.spec.prev[after5]",
            "forged_quic_packet_retry.arr.spec.resize[after112]",
            "init[after329]",
            "http_request_file.read[after65]",
            "cids.append",
            "vector[tls.psk_identity].spec.resize[after112]",
            "handle_sending_dataRecvd",
            "forged_quic_packet_vn.arr.back",
            "versions_bv.get",
            "net.recv",
            "forged_quic_packet_retry.arr.extend",
            "servers.server.arr.spec.create[before105]",
            "quic_packet_retry.retired_cids.spec.empty[after104]",
            "vector[tls.handshake].spec.create[before105]",
            "prot.arr.spec.create[after106]",
            "vector[tls.cipher_suite].empty",
            "frame.arr.empty",
            "arr_pkt_num_r.reverse",
            "arr_pkt_num_r.impl.get[implement91]",
            "quic_packet_retry.arr.set",
            "lower_microsecs",
            "jdx_s.impl.prev[implement9]",
            "quic_packet.retired_cids.impl.pop_back[implement95]",
            "tls.handshakes.domain.impl.prev[implement9]",
            "frame.ack.range.arr.impl.set[implement90]",
            "versions_bv.spec.create[after106]",
            "forged_pkts.impl.extend[implement97]",
            "packet_event[before323]",
            "tls.handshakes.create",
            "jdx_s.spec.prev[before4]",
            "servers.src_tls_id",
            "forged_protected_quic_packet.retired_cids.reverse",
            "forged_protected_quic_packet.arr.append",
            "quic_packet.retired_cids.back",
            "vector[transport_parameter].impl.empty[implement89]",
            "show_fsm_sending_resetRecvd_event",
            "forged_quic_packet_retry.idx.impl.prev[implement9]",
            "greater_stream_pos",
            "dcid_size_cl",
            "packet_event[before485]",
            "forged_protected_quic_packet.retired_cids.impl.size[implement92]",
            "arr_pkt_num_r.spec.create[before105]",
            "arr_streamid_s.impl.set[implement90]",
            "bytes.get",
            "forged_quic_packet_retry.idx.spec.prev[after5]",
            "forged_packet_event_retry",
            "vector[transport_parameter].domain.prev",
            "arr_streamid_r.spec.size[after111]",
            "cid_to_bytes",
            "forged_pkt_serdes_retry.to_bytes",
            "http_request_file.init[after63]",
            "quic_packet_coal_0rtt.retired_cids.size",
            "vector[tls.compression_method].spec.get[before109]",
            "forged_pkts.impl.empty[implement89]",
            "frame.path_challenge.handle",
            "vector[transport_parameter].impl.resize[implement93]",
            "show_tls_lower_send",
            "frame.ack.range.idx.spec.prev[after5]",
            "versions_bv.empty",
            "tls_api.id.next",
            "frame.retire_connection_id.handle[before303]",
            "pkt_serdes_0rtt.from_bytes",
            "versions_bv.impl.empty[implement89]",
            "quic_packet_0rtt.arr.resize",
            "quic_packet_retry.retired_cids.impl.create[implement88]",
            "vector[transport_parameter].domain.impl.prev[implement9]",
            "prot.encrypt",
            "forged_quic_packet_vn.arr.impl.set[implement90]",
            "forged_quic_packet.retired_cids.spec.get[before109]",
            "show_fsm_sending_dataRecvd_event",
            "max_additional_data",
            "quic_packet_coal_0rtt.retired_cids.impl.create[implement88]",
            "frame.path_response.handle[after308]",
            "frame.new_token.handle",
            "quic_packet.arr.impl.reverse[implement98]",
            "quic_packet_0rtt.idx.prev",
            "show_tls_send_event",
            "forged_pkts.pop_back",
            "quic_packet_vn.arr.spec.size[after111]",
            "vector[tls.extension].domain.next",
            "ip_endpoints.spec.create[after106]",
            "handle_client_transport_parameters",
            "forged_quic_packet_vn.idx.next",
            "arr_streamid_r.spec.create[before105]",
            "vector[tls.psk_identity].spec.create[before105]",
            "ip_endpoints.spec.create[before105]",
            "replayed_quic_packet_0rtt.idx.impl.prev[implement9]",
            "vector[transport_parameter].reverse",
            "arr_pkt_num_s.impl.pop_back[implement95]",
            "replayed_quic_packet_0rtt.retired_cids.impl.empty[implement89]",
            "frame.max_streams_bidi.handle[before277]",
            "forward_packet_to_server_event[before341]",
            "show_aead",
            "replayed_quic_packet_0rtt.arr.spec.resize[after112]",
            "replayed_quic_packet_0rtt.retired_cids.get",
            "enqueue_frame",
            "quic_packet.arr.impl.append[implement96]",
            "quic_packet_retry.retired_cids.impl.extend[implement97]",
            "forged_quic_packet_vn.arr.spec.empty[after104]",
            "show_cid",
            "ip_endpoints.reverse",
            "forged_quic_packet.retired_cids.spec.size[after111]",
            "tls.handshakes.impl.pop_back[implement95]",
            "forged_quic_packet.retired_cids.pop_back",
            "stream_data.spec.set[before107]",
            "tls_api.upper.encrypt_aead",
            "forged_quic_packet.arr.spec.create[after106]",
            "second_server.init[after454]",
            "forged_packet_event_vn[after352]",
            "quic_packet_0rtt.retired_cids.impl.reverse[implement98]",
            "quic_packet.retired_cids.spec.create[before105]",
            "quic_packet_retry.arr.spec.empty[after104]",
            "arr_pkt_num_r.spec.empty[after104]",
            "init[after465]",
            "quic_packet_type.next",
            "forged_quic_packet.arr.set",
            "replayed_quic_packet_0rtt.idx.next",
            "quic_packet_0rtt.retired_cids.get",
            "forged_pkts.impl.reverse[implement98]",
            "stream_data.append",
            "show_socket",
            "arr_pkt_num_s.impl.reverse[implement98]",
            "fake_client.init[after452]",
            "vector[tls.cipher_suite].spec.size[after111]",
            "clients.client.set_tls_id"
        ],
        "definitions": [
            {
                "definition": false,
                "assumed": false,
                "temporal": null,
                "args": "(bit.def75, <ivy.ivy_logic.Definition object at 0x7fd8f1091e90>)",
                "explicit": false,
                "lineno": {},
                "id": 131
            },
            {
                "definition": false,
                "assumed": false,
                "temporal": null,
                "args": "(bit.def76, <ivy.ivy_logic.Definition object at 0x7fd8f0f82310>)",
                "explicit": false,
                "lineno": {},
                "id": 132
            },
            {
                "definition": false,
                "assumed": false,
                "temporal": null,
                "args": "(idx.impl.def7, <ivy.ivy_logic.Definition object at 0x7fd8f0fb2050>)",
                "explicit": false,
                "lineno": {},
                "id": 301
            },
            {
                "definition": false,
                "assumed": false,
                "temporal": null,
                "args": "(bytes.def102, <ivy.ivy_logic.Definition object at 0x7fd8f0fb2650>)",
                "explicit": false,
                "lineno": {},
                "id": 302
            },
            {
                "definition": false,
                "assumed": false,
                "temporal": null,
                "args": "(stream_pos.impl.def7, <ivy.ivy_logic.Definition object at 0x7fd8f0f9d410>)",
                "explicit": false,
                "lineno": {},
                "id": 317
            },
            {
                "definition": false,
                "assumed": false,
                "temporal": null,
                "args": "(stream_data.def102, <ivy.ivy_logic.Definition object at 0x7fd8f0f5d250>)",
                "explicit": false,
                "lineno": {},
                "id": 318
            },
            {
                "definition": false,
                "assumed": false,
                "temporal": null,
                "args": "(def237, <ivy.ivy_logic.Definition object at 0x7fd8f0f3ea90>)",
                "explicit": false,
                "lineno": {},
                "id": 326
            },
            {
                "definition": false,
                "assumed": false,
                "temporal": null,
                "args": "(def238, <ivy.ivy_logic.Definition object at 0x7fd8f0f53590>)",
                "explicit": false,
                "lineno": {},
                "id": 328
            },
            {
                "definition": false,
                "assumed": false,
                "temporal": null,
                "args": "(vector[tls.psk_identity].domain.impl.def7, <ivy.ivy_logic.Definition object at 0x7fd8f0f05150>)",
                "explicit": false,
                "lineno": {},
                "id": 1225
            },
            {
                "definition": false,
                "assumed": false,
                "temporal": null,
                "args": "(vector[tls.psk_identity].def102, <ivy.ivy_logic.Definition object at 0x7fd8f0f05790>)",
                "explicit": false,
                "lineno": {},
                "id": 1226
            },
            {
                "definition": false,
                "assumed": false,
                "temporal": null,
                "args": "(vector[tls.cipher_suite].domain.impl.def7, <ivy.ivy_logic.Definition object at 0x7fd8f0f1d0d0>)",
                "explicit": false,
                "lineno": {},
                "id": 1239
            },
            {
                "definition": false,
                "assumed": false,
                "temporal": null,
                "args": "(vector[tls.cipher_suite].def102, <ivy.ivy_logic.Definition object at 0x7fd8f0f18450>)",
                "explicit": false,
                "lineno": {},
                "id": 1240
            },
            {
                "definition": false,
                "assumed": false,
                "temporal": null,
                "args": "(vector[tls.compression_method].domain.impl.def7, <ivy.ivy_logic.Definition object at 0x7fd8f0f36f90>)",
                "explicit": false,
                "lineno": {},
                "id": 1253
            },
            {
                "definition": false,
                "assumed": false,
                "temporal": null,
                "args": "(vector[tls.compression_method].def102, <ivy.ivy_logic.Definition object at 0x7fd8f0f36310>)",
                "explicit": false,
                "lineno": {},
                "id": 1254
            },
            {
                "definition": false,
                "assumed": false,
                "temporal": null,
                "args": "(vector[tls.extension].domain.impl.def7, <ivy.ivy_logic.Definition object at 0x7fd8f0ecafd0>)",
                "explicit": false,
                "lineno": {},
                "id": 1267
            },
            {
                "definition": false,
                "assumed": false,
                "temporal": null,
                "args": "(vector[tls.extension].def102, <ivy.ivy_logic.Definition object at 0x7fd8f0eca5d0>)",
                "explicit": false,
                "lineno": {},
                "id": 1268
            },
            {
                "definition": false,
                "assumed": false,
                "temporal": null,
                "args": "(vector[tls.handshake].domain.impl.def7, <ivy.ivy_logic.Definition object at 0x7fd8f0ef42d0>)",
                "explicit": false,
                "lineno": {},
                "id": 1281
            },
            {
                "definition": false,
                "assumed": false,
                "temporal": null,
                "args": "(vector[tls.handshake].def102, <ivy.ivy_logic.Definition object at 0x7fd8f0ef4790>)",
                "explicit": false,
                "lineno": {},
                "id": 1282
            },
            {
                "definition": false,
                "assumed": false,
                "temporal": null,
                "args": "(tls.handshakes.domain.impl.def7, <ivy.ivy_logic.Definition object at 0x7fd8f0f36910>)",
                "explicit": false,
                "lineno": {},
                "id": 373
            },
            {
                "definition": false,
                "assumed": false,
                "temporal": null,
                "args": "(tls.handshakes.def102, <ivy.ivy_logic.Definition object at 0x7fd8f0e8e750>)",
                "explicit": false,
                "lineno": {},
                "id": 374
            },
            {
                "definition": false,
                "assumed": false,
                "temporal": null,
                "args": "(frame.ack.range.idx.impl.def7, <ivy.ivy_logic.Definition object at 0x7fd8f0ee3910>)",
                "explicit": false,
                "lineno": {},
                "id": 485
            },
            {
                "definition": false,
                "assumed": false,
                "temporal": null,
                "args": "(frame.ack.range.arr.def102, <ivy.ivy_logic.Definition object at 0x7fd8f0ea9e90>)",
                "explicit": false,
                "lineno": {},
                "id": 486
            },
            {
                "definition": false,
                "assumed": false,
                "temporal": null,
                "args": "(frame.ack_ecn.range.idx.impl.def7, <ivy.ivy_logic.Definition object at 0x7fd8f0ed1310>)",
                "explicit": false,
                "lineno": {},
                "id": 499
            },
            {
                "definition": false,
                "assumed": false,
                "temporal": null,
                "args": "(frame.ack_ecn.range.arr.def102, <ivy.ivy_logic.Definition object at 0x7fd8f0e3d110>)",
                "explicit": false,
                "lineno": {},
                "id": 500
            },
            {
                "definition": false,
                "assumed": false,
                "temporal": null,
                "args": "(frame.idx.impl.def7, <ivy.ivy_logic.Definition object at 0x7fd8f0ea5610>)",
                "explicit": false,
                "lineno": {},
                "id": 513
            },
            {
                "definition": false,
                "assumed": false,
                "temporal": null,
                "args": "(frame.arr.def102, <ivy.ivy_logic.Definition object at 0x7fd8f0e4d690>)",
                "explicit": false,
                "lineno": {},
                "id": 514
            },
            {
                "definition": false,
                "assumed": false,
                "temporal": null,
                "args": "(index.impl.def7, <ivy.ivy_logic.Definition object at 0x7fd8f0e698d0>)",
                "explicit": false,
                "lineno": {},
                "id": 527
            },
            {
                "definition": false,
                "assumed": false,
                "temporal": null,
                "args": "(versions.def102, <ivy.ivy_logic.Definition object at 0x7fd8f0ea49d0>)",
                "explicit": false,
                "lineno": {},
                "id": 528
            },
            {
                "definition": false,
                "assumed": false,
                "temporal": null,
                "args": "(versions_bv.def102, <ivy.ivy_logic.Definition object at 0x7fd8f0e67550>)",
                "explicit": false,
                "lineno": {},
                "id": 537
            },
            {
                "definition": false,
                "assumed": false,
                "temporal": null,
                "args": "(quic_packet_vn.idx.impl.def7, <ivy.ivy_logic.Definition object at 0x7fd8f0e42810>)",
                "explicit": false,
                "lineno": {},
                "id": 564
            },
            {
                "definition": false,
                "assumed": false,
                "temporal": null,
                "args": "(quic_packet_vn.arr.def102, <ivy.ivy_logic.Definition object at 0x7fd8f103cd90>)",
                "explicit": false,
                "lineno": {},
                "id": 565
            },
            {
                "definition": false,
                "assumed": false,
                "temporal": null,
                "args": "(vector[transport_parameter].domain.impl.def7, <ivy.ivy_logic.Definition object at 0x7fd8f0e42750>)",
                "explicit": false,
                "lineno": {},
                "id": 1295
            },
            {
                "definition": false,
                "assumed": false,
                "temporal": null,
                "args": "(vector[transport_parameter].def102, <ivy.ivy_logic.Definition object at 0x7fd8f0e309d0>)",
                "explicit": false,
                "lineno": {},
                "id": 1296
            },
            {
                "definition": false,
                "assumed": false,
                "temporal": null,
                "args": "(idx_s.impl.def7, <ivy.ivy_logic.Definition object at 0x7fd8f0e569d0>)",
                "explicit": false,
                "lineno": {},
                "id": 584
            },
            {
                "definition": false,
                "assumed": false,
                "temporal": null,
                "args": "(arr_streamid_s.def102, <ivy.ivy_logic.Definition object at 0x7fd8f0e37750>)",
                "explicit": false,
                "lineno": {},
                "id": 585
            },
            {
                "definition": false,
                "assumed": false,
                "temporal": null,
                "args": "(jdx_s.impl.def7, <ivy.ivy_logic.Definition object at 0x7fd8f0e13790>)",
                "explicit": false,
                "lineno": {},
                "id": 598
            },
            {
                "definition": false,
                "assumed": false,
                "temporal": null,
                "args": "(arr_pkt_num_s.def102, <ivy.ivy_logic.Definition object at 0x7fd8f0dd2150>)",
                "explicit": false,
                "lineno": {},
                "id": 599
            },
            {
                "definition": false,
                "assumed": false,
                "temporal": null,
                "args": "(idx_r.impl.def7, <ivy.ivy_logic.Definition object at 0x7fd8f103c290>)",
                "explicit": false,
                "lineno": {},
                "id": 612
            },
            {
                "definition": false,
                "assumed": false,
                "temporal": null,
                "args": "(arr_streamid_r.def102, <ivy.ivy_logic.Definition object at 0x7fd8f0de4550>)",
                "explicit": false,
                "lineno": {},
                "id": 613
            },
            {
                "definition": false,
                "assumed": false,
                "temporal": null,
                "args": "(jdx_r.impl.def7, <ivy.ivy_logic.Definition object at 0x7fd8f0e37150>)",
                "explicit": false,
                "lineno": {},
                "id": 626
            },
            {
                "definition": false,
                "assumed": false,
                "temporal": null,
                "args": "(arr_pkt_num_r.def102, <ivy.ivy_logic.Definition object at 0x7fd8f0df8190>)",
                "explicit": false,
                "lineno": {},
                "id": 627
            },
            {
                "definition": false,
                "assumed": false,
                "temporal": null,
                "args": "(quic_packet.idx.impl.def7, <ivy.ivy_logic.Definition object at 0x7fd8f103ced0>)",
                "explicit": false,
                "lineno": {},
                "id": 661
            },
            {
                "definition": false,
                "assumed": false,
                "temporal": null,
                "args": "(quic_packet.arr.def102, <ivy.ivy_logic.Definition object at 0x7fd8f0d8a090>)",
                "explicit": false,
                "lineno": {},
                "id": 662
            },
            {
                "definition": false,
                "assumed": false,
                "temporal": null,
                "args": "(quic_packet.retired_cids.def102, <ivy.ivy_logic.Definition object at 0x7fd8f0d81b90>)",
                "explicit": false,
                "lineno": {},
                "id": 669
            },
            {
                "definition": false,
                "assumed": false,
                "temporal": null,
                "args": "(quic_packet_retry.idx.impl.def7, <ivy.ivy_logic.Definition object at 0x7fd8f0dfa390>)",
                "explicit": false,
                "lineno": {},
                "id": 705
            },
            {
                "definition": false,
                "assumed": false,
                "temporal": null,
                "args": "(quic_packet_retry.arr.def102, <ivy.ivy_logic.Definition object at 0x7fd8f0d95e90>)",
                "explicit": false,
                "lineno": {},
                "id": 706
            },
            {
                "definition": false,
                "assumed": false,
                "temporal": null,
                "args": "(quic_packet_retry.retired_cids.def102, <ivy.ivy_logic.Definition object at 0x7fd8f0da22d0>)",
                "explicit": false,
                "lineno": {},
                "id": 713
            },
            {
                "definition": false,
                "assumed": false,
                "temporal": null,
                "args": "(quic_packet_0rtt.idx.impl.def7, <ivy.ivy_logic.Definition object at 0x7fd8f0dacd50>)",
                "explicit": false,
                "lineno": {},
                "id": 747
            },
            {
                "definition": false,
                "assumed": false,
                "temporal": null,
                "args": "(quic_packet_0rtt.arr.def102, <ivy.ivy_logic.Definition object at 0x7fd8f0dddd50>)",
                "explicit": false,
                "lineno": {},
                "id": 748
            },
            {
                "definition": false,
                "assumed": false,
                "temporal": null,
                "args": "(quic_packet_0rtt.retired_cids.def102, <ivy.ivy_logic.Definition object at 0x7fd8f0daf210>)",
                "explicit": false,
                "lineno": {},
                "id": 755
            },
            {
                "definition": false,
                "assumed": false,
                "temporal": null,
                "args": "(quic_packet_coal_0rtt.idx.impl.def7, <ivy.ivy_logic.Definition object at 0x7fd8f0d474d0>)",
                "explicit": false,
                "lineno": {},
                "id": 789
            },
            {
                "definition": false,
                "assumed": false,
                "temporal": null,
                "args": "(quic_packet_coal_0rtt.arr.def102, <ivy.ivy_logic.Definition object at 0x7fd8f0dac690>)",
                "explicit": false,
                "lineno": {},
                "id": 790
            },
            {
                "definition": false,
                "assumed": false,
                "temporal": null,
                "args": "(quic_packet_coal_0rtt.retired_cids.def102, <ivy.ivy_logic.Definition object at 0x7fd8f0d48d50>)",
                "explicit": false,
                "lineno": {},
                "id": 797
            },
            {
                "definition": false,
                "assumed": false,
                "temporal": null,
                "args": "(forged_pkts.def102, <ivy.ivy_logic.Definition object at 0x7fd8f0d583d0>)",
                "explicit": false,
                "lineno": {},
                "id": 804
            },
            {
                "definition": false,
                "assumed": false,
                "temporal": null,
                "args": "(forged_protected_quic_packet.idx.impl.def7, <ivy.ivy_logic.Definition object at 0x7fd8f0d95f10>)",
                "explicit": false,
                "lineno": {},
                "id": 838
            },
            {
                "definition": false,
                "assumed": false,
                "temporal": null,
                "args": "(forged_protected_quic_packet.arr.def102, <ivy.ivy_logic.Definition object at 0x7fd8f0d6c0d0>)",
                "explicit": false,
                "lineno": {},
                "id": 839
            },
            {
                "definition": false,
                "assumed": false,
                "temporal": null,
                "args": "(forged_protected_quic_packet.retired_cids.def102, <ivy.ivy_logic.Definition object at 0x7fd8f0d68a50>)",
                "explicit": false,
                "lineno": {},
                "id": 846
            },
            {
                "definition": false,
                "assumed": false,
                "temporal": null,
                "args": "(forged_quic_packet.idx.impl.def7, <ivy.ivy_logic.Definition object at 0x7fd8f0cff550>)",
                "explicit": false,
                "lineno": {},
                "id": 880
            },
            {
                "definition": false,
                "assumed": false,
                "temporal": null,
                "args": "(forged_quic_packet.arr.def102, <ivy.ivy_logic.Definition object at 0x7fd8f0dac410>)",
                "explicit": false,
                "lineno": {},
                "id": 881
            },
            {
                "definition": false,
                "assumed": false,
                "temporal": null,
                "args": "(forged_quic_packet.retired_cids.def102, <ivy.ivy_logic.Definition object at 0x7fd8f0d01b10>)",
                "explicit": false,
                "lineno": {},
                "id": 888
            },
            {
                "definition": false,
                "assumed": false,
                "temporal": null,
                "args": "(forged_quic_packet_retry.idx.impl.def7, <ivy.ivy_logic.Definition object at 0x7fd8f0cff1d0>)",
                "explicit": false,
                "lineno": {},
                "id": 924
            },
            {
                "definition": false,
                "assumed": false,
                "temporal": null,
                "args": "(forged_quic_packet_retry.arr.def102, <ivy.ivy_logic.Definition object at 0x7fd8f0d16450>)",
                "explicit": false,
                "lineno": {},
                "id": 925
            },
            {
                "definition": false,
                "assumed": false,
                "temporal": null,
                "args": "(forged_quic_packet_retry.retired_cids.def102, <ivy.ivy_logic.Definition object at 0x7fd8f0d25350>)",
                "explicit": false,
                "lineno": {},
                "id": 932
            },
            {
                "definition": false,
                "assumed": false,
                "temporal": null,
                "args": "(forged_quic_packet_vn.idx.impl.def7, <ivy.ivy_logic.Definition object at 0x7fd8f0d64750>)",
                "explicit": false,
                "lineno": {},
                "id": 959
            },
            {
                "definition": false,
                "assumed": false,
                "temporal": null,
                "args": "(forged_quic_packet_vn.arr.def102, <ivy.ivy_logic.Definition object at 0x7fd8f0d33050>)",
                "explicit": false,
                "lineno": {},
                "id": 960
            },
            {
                "definition": false,
                "assumed": false,
                "temporal": null,
                "args": "(replayed_quic_packet_0rtt.idx.impl.def7, <ivy.ivy_logic.Definition object at 0x7fd8f0d2d610>)",
                "explicit": false,
                "lineno": {},
                "id": 994
            },
            {
                "definition": false,
                "assumed": false,
                "temporal": null,
                "args": "(replayed_quic_packet_0rtt.arr.def102, <ivy.ivy_logic.Definition object at 0x7fd8f0d306d0>)",
                "explicit": false,
                "lineno": {},
                "id": 995
            },
            {
                "definition": false,
                "assumed": false,
                "temporal": null,
                "args": "(replayed_quic_packet_0rtt.retired_cids.def102, <ivy.ivy_logic.Definition object at 0x7fd8f0cc3650>)",
                "explicit": false,
                "lineno": {},
                "id": 1002
            },
            {
                "definition": false,
                "assumed": false,
                "temporal": null,
                "args": "(prot.idx.impl.def7, <ivy.ivy_logic.Definition object at 0x7fd8f0cd7490>)",
                "explicit": false,
                "lineno": {},
                "id": 1031
            },
            {
                "definition": false,
                "assumed": false,
                "temporal": null,
                "args": "(prot.arr.def102, <ivy.ivy_logic.Definition object at 0x7fd8f0cd7750>)",
                "explicit": false,
                "lineno": {},
                "id": 1032
            },
            {
                "definition": false,
                "assumed": false,
                "temporal": null,
                "args": "(tls_api.id.impl.def15, <ivy.ivy_logic.Definition object at 0x7fd8f0ceb990>)",
                "explicit": false,
                "lineno": {},
                "id": 1053
            },
            {
                "definition": false,
                "assumed": false,
                "temporal": null,
                "args": "(cids.def102, <ivy.ivy_logic.Definition object at 0x7fd8f0cf4e90>)",
                "explicit": false,
                "lineno": {},
                "id": 1139
            },
            {
                "definition": false,
                "assumed": false,
                "temporal": null,
                "args": "(clients.client.idx.impl.def7, <ivy.ivy_logic.Definition object at 0x7fd8f0c82b10>)",
                "explicit": false,
                "lineno": {},
                "id": 1152
            },
            {
                "definition": false,
                "assumed": false,
                "temporal": null,
                "args": "(clients.client.arr.def102, <ivy.ivy_logic.Definition object at 0x7fd8f0c82990>)",
                "explicit": false,
                "lineno": {},
                "id": 1153
            },
            {
                "definition": false,
                "assumed": false,
                "temporal": null,
                "args": "(servers.server.idx.impl.def7, <ivy.ivy_logic.Definition object at 0x7fd8f0c8f6d0>)",
                "explicit": false,
                "lineno": {},
                "id": 1166
            },
            {
                "definition": false,
                "assumed": false,
                "temporal": null,
                "args": "(servers.server.arr.def102, <ivy.ivy_logic.Definition object at 0x7fd8f0c7da90>)",
                "explicit": false,
                "lineno": {},
                "id": 1167
            },
            {
                "definition": false,
                "assumed": false,
                "temporal": null,
                "args": "(ip_endpoints.def102, <ivy.ivy_logic.Definition object at 0x7fd8f0c9e650>)",
                "explicit": false,
                "lineno": {},
                "id": 1174
            },
            {
                "definition": false,
                "assumed": false,
                "temporal": null,
                "args": "(tls_extensions.domain.impl.def7, <ivy.ivy_logic.Definition object at 0x7fd8f0ca84d0>)",
                "explicit": false,
                "lineno": {},
                "id": 1187
            },
            {
                "definition": false,
                "assumed": false,
                "temporal": null,
                "args": "(tls_extensions.def102, <ivy.ivy_logic.Definition object at 0x7fd8f0cab110>)",
                "explicit": false,
                "lineno": {},
                "id": 1188
            },
            {
                "definition": false,
                "assumed": false,
                "temporal": null,
                "args": "(tls_hand_extensions.domain.impl.def7, <ivy.ivy_logic.Definition object at 0x7fd8f0caa190>)",
                "explicit": false,
                "lineno": {},
                "id": 1201
            },
            {
                "definition": false,
                "assumed": false,
                "temporal": null,
                "args": "(tls_hand_extensions.def102, <ivy.ivy_logic.Definition object at 0x7fd8f0caa3d0>)",
                "explicit": false,
                "lineno": {},
                "id": 1202
            }
        ],
        "predicates": [],
        "isolate_proofs": [],
        "variants": [
            "[UninterpretedSort('original_destination_connection_id',), UninterpretedSort('initial_max_stream_data_bidi_local',), UninterpretedSort('initial_max_data',), UninterpretedSort('initial_max_stream_id_bidi',), UninterpretedSort('max_idle_timeout',), UninterpretedSort('preferred_address',), UninterpretedSort('max_packet_size',), UninterpretedSort('stateless_reset_token',), UninterpretedSort('ack_delay_exponent',), UninterpretedSort('initial_max_stream_id_uni',), UninterpretedSort('disable_active_migration',), UninterpretedSort('initial_max_stream_data_bidi_remote',), UninterpretedSort('initial_max_stream_data_uni',), UninterpretedSort('max_ack_delay',), UninterpretedSort('active_connection_id_limit',), UninterpretedSort('initial_source_connection_id',), UninterpretedSort('retry_source_connection_id',), UninterpretedSort('loss_bits',), UninterpretedSort('grease_quic_bit',), UninterpretedSort('enable_time_stamp',), UninterpretedSort('min_ack_delay',), UninterpretedSort('version_information',), UninterpretedSort('unknown_ignore',), UninterpretedSort('unknown_transport_parameter',)]",
            "[UninterpretedSort('frame.ping',), UninterpretedSort('frame.ack',), UninterpretedSort('frame.ack_ecn',), UninterpretedSort('frame.rst_stream',), UninterpretedSort('frame.stop_sending',), UninterpretedSort('frame.crypto',), UninterpretedSort('frame.new_token',), UninterpretedSort('frame.stream',), UninterpretedSort('frame.max_data',), UninterpretedSort('frame.max_stream_data',), UninterpretedSort('frame.max_streams',), UninterpretedSort('frame.max_streams_bidi',), UninterpretedSort('frame.data_blocked',), UninterpretedSort('frame.stream_data_blocked',), UninterpretedSort('frame.streams_blocked',), UninterpretedSort('frame.streams_blocked_bidi',), UninterpretedSort('frame.new_connection_id',), UninterpretedSort('frame.retire_connection_id',), UninterpretedSort('frame.path_challenge',), UninterpretedSort('frame.path_response',), UninterpretedSort('frame.connection_close',), UninterpretedSort('frame.application_close',), UninterpretedSort('frame.handshake_done',), UninterpretedSort('frame.ack_frequency',), UninterpretedSort('frame.unknown_frame',), UninterpretedSort('frame.malicious_frame',)]",
            "[UninterpretedSort('tls.unknown_extension',), UninterpretedSort('tls.early_data',), UninterpretedSort('tls.end_of_early_data',), UninterpretedSort('tls.psk_key_exchange_modes',), UninterpretedSort('tls.pre_shared_key_client',), UninterpretedSort('tls.pre_shared_key_server',), UninterpretedSort('quic_transport_parameters',)]",
            "[UninterpretedSort('server',), UninterpretedSort('second_server',), UninterpretedSort('client',), UninterpretedSort('second_client',), UninterpretedSort('client_server',), UninterpretedSort('attacker',), UninterpretedSort('victim_agent',), UninterpretedSort('mim_agent',), UninterpretedSort('mim_server_target',), UninterpretedSort('mim_client_target',), UninterpretedSort('fake_client',), UninterpretedSort('clients',), UninterpretedSort('servers',)]",
            "[UninterpretedSort('tls.handshake_record',), UninterpretedSort('tls.application_data_record',), UninterpretedSort('tls.change_cipher_spec',)]",
            "[UninterpretedSort('tls.client_hello',), UninterpretedSort('tls.server_hello',), UninterpretedSort('tls.new_session_ticket',), UninterpretedSort('tls.encrypted_extensions',), UninterpretedSort('tls.unknown_message',), UninterpretedSort('tls.finished',)]"
        ],
        "destructor_sorts": [
            "frame.crypto",
            "prot.header_info",
            "tls.psk_identity",
            "initial_max_stream_data_uni",
            "frame.ack_frequency",
            "initial_source_connection_id",
            "trans_params_struct",
            "forged_protected_quic_packet",
            "frame.connection_close",
            "preferred_address",
            "frame.max_streams_bidi",
            "tls.unknown_extension",
            "quic_transport_parameters",
            "frame.connection_close",
            "preferred_address",
            "tls.application_data_record",
            "trans_params_struct",
            "tls.early_data",
            "trans_params_struct",
            "clients.client",
            "quic_packet_retry",
            "frame.streams_blocked",
            "tls.client_hello",
            "unknown_transport_parameter",
            "forged_quic_packet",
            "quic_packet_0rtt",
            "frame.ack",
            "frame.application_close",
            "prot.header_info",
            "quic_packet_retry",
            "forged_quic_packet_retry",
            "trans_params_struct",
            "frame.ack_ecn",
            "replayed_quic_packet_0rtt",
            "frame.new_connection_id",
            "frame.max_data",
            "frame.stream",
            "retry_source_connection_id",
            "tls.server_hello",
            "trans_params_struct",
            "trans_params_struct",
            "forged_quic_packet",
            "trans_params_struct",
            "frame.crypto",
            "quic_packet_coal_0rtt",
            "quic_packet_vn",
            "trans_params_struct",
            "frame.new_connection_id",
            "frame.stream",
            "tls.new_session_ticket",
            "frame.path_response",
            "clients.client",
            "frame.ack_ecn",
            "preferred_address",
            "forged_quic_packet_vn",
            "prot.header_info",
            "quic_packet_0rtt",
            "trans_params_struct",
            "trans_params_struct",
            "forged_quic_packet",
            "clients.client",
            "initial_max_data",
            "trans_params_struct",
            "trans_params_struct",
            "tls.psk_identity",
            "tls.pre_shared_key_client",
            "frame.data_blocked",
            "trans_params_struct",
            "forged_quic_packet_retry",
            "version_information",
            "forged_quic_packet_retry",
            "initial_max_stream_data_bidi_local",
            "tls.client_hello",
            "forged_quic_packet_vn",
            "ipv6.endpoint",
            "forged_quic_packet_vn",
            "replayed_quic_packet_0rtt",
            "trans_params_struct",
            "prot.header_info",
            "quic_packet_coal_0rtt",
            "trans_params_struct",
            "quic_packet_retry",
            "prot.header_info",
            "quic_packet",
            "trans_params_struct",
            "tls.client_hello",
            "frame.max_stream_data",
            "frame.application_close",
            "tls.new_session_ticket",
            "tls.handshake_parser.result",
            "frame.retire_connection_id",
            "ip.endpoint",
            "ip.endpoint",
            "quic_packet_coal_0rtt",
            "trans_params_struct",
            "servers.server",
            "frame.ack.range",
            "quic_packet_0rtt",
            "trans_params_struct",
            "tls.server_hello",
            "preferred_address",
            "trans_params_struct",
            "quic_packet_coal_0rtt",
            "tls.unknown_message",
            "tls.new_session_ticket",
            "trans_params_struct",
            "frame.stream",
            "quic_packet_vn",
            "tls.pre_shared_key_server",
            "preferred_address",
            "trans_params_struct",
            "ip.endpoint",
            "trans_params_struct",
            "original_destination_connection_id",
            "tls.psk_key_exchange_modes",
            "tls_api.upper.decrypt_result",
            "tls_api.upper.decrypt_result",
            "replayed_quic_packet_0rtt",
            "prot.header_info",
            "frame.ack_ecn",
            "tls.new_session_ticket",
            "forged_quic_packet",
            "trans_params_struct",
            "tls.server_hello",
            "trans_params_struct",
            "forged_quic_packet",
            "quic_packet_coal_0rtt",
            "quic_packet",
            "replayed_quic_packet_0rtt",
            "trans_params_struct",
            "quic_packet_coal_0rtt",
            "frame.connection_close",
            "servers.server",
            "trans_params_struct",
            "frame.stop_sending",
            "forged_quic_packet",
            "ip.endpoint",
            "tls.finished",
            "quic_packet_coal_0rtt",
            "frame.stream_data_blocked",
            "initial_max_stream_id_uni",
            "tls.handshake_record",
            "replayed_quic_packet_0rtt",
            "forged_protected_quic_packet",
            "tls.random",
            "trans_params_struct",
            "frame.stream",
            "quic_packet_vn",
            "tls.pre_shared_key_client",
            "initial_max_stream_id_bidi",
            "trans_params_struct",
            "frame.ack",
            "max_ack_delay",
            "min_ack_delay",
            "frame.max_streams",
            "frame.stream",
            "initial_max_stream_data_bidi_remote",
            "frame.new_token",
            "frame.stop_sending",
            "preferred_address",
            "preferred_address",
            "quic_packet_retry",
            "forged_quic_packet_retry",
            "tls.finished",
            "frame.stream",
            "forged_quic_packet_vn",
            "frame.new_connection_id",
            "trans_params_struct",
            "quic_packet",
            "tls.unknown_extension",
            "trans_params_struct",
            "frame.ack",
            "tls.handshake_parser.result",
            "forged_quic_packet_retry",
            "trans_params_struct",
            "version_information",
            "forged_protected_quic_packet",
            "ipv6.endpoint",
            "frame.rst_stream",
            "ack_delay_exponent",
            "servers.server",
            "tls.change_cipher_spec",
            "quic_packet_vn",
            "frame.rst_stream",
            "replayed_quic_packet_0rtt",
            "ipv6.endpoint",
            "tls.application_data_record",
            "frame.new_connection_id",
            "forged_protected_quic_packet",
            "quic_packet_retry",
            "quic_packet_0rtt",
            "max_packet_size",
            "frame.ack_ecn.range",
            "forged_quic_packet_retry",
            "quic_packet_coal_0rtt",
            "frame.stream",
            "stateless_reset_token",
            "frame.rst_stream",
            "tls.client_hello",
            "trans_params_struct",
            "tls.change_cipher_spec",
            "quic_packet_coal_0rtt",
            "frame.ack_frequency",
            "forged_quic_packet_vn",
            "trans_params_struct",
            "quic_packet_coal_0rtt",
            "trans_params_struct",
            "frame.max_stream_data",
            "trans_params_struct",
            "tls_api.upper.decrypt_result",
            "trans_params_struct",
            "quic_packet_coal_0rtt",
            "frame.crypto",
            "forged_protected_quic_packet",
            "frame.ack_ecn.range",
            "frame.path_challenge",
            "trans_params_struct",
            "loss_bits",
            "trans_params_struct",
            "tls.new_session_ticket",
            "quic_packet",
            "quic_packet_retry",
            "trans_params_struct",
            "tls.encrypted_extensions",
            "frame.streams_blocked_bidi",
            "frame.application_close",
            "tls.unknown_message",
            "frame.new_token",
            "quic_packet_vn",
            "tls.random",
            "prot.header_info",
            "forged_protected_quic_packet",
            "tls.client_hello",
            "enable_time_stamp",
            "quic_packet",
            "active_connection_id_limit",
            "quic_packet",
            "forged_quic_packet",
            "frame.stream_data_blocked",
            "trans_params_struct",
            "trans_params_struct",
            "quic_packet_0rtt",
            "trans_params_struct",
            "tls.server_hello",
            "trans_params_struct",
            "trans_params_struct",
            "quic_packet_0rtt",
            "frame.new_connection_id",
            "prot.header_info",
            "tls.handshake_record",
            "max_idle_timeout",
            "trans_params_struct",
            "frame.malicious_frame",
            "quic_packet",
            "trans_params_struct",
            "frame.ack_frequency",
            "tls.client_hello",
            "tls.server_hello",
            "trans_params_struct",
            "frame.ack_frequency",
            "tls.server_hello",
            "quic_packet_coal_0rtt",
            "frame.connection_close",
            "frame.ack.range",
            "trans_params_struct",
            "quic_packet_coal_0rtt"
        ],
        "old_module": null,
        "name": "quic_server_test_stream",
        "init_cond": {
            "defs": [],
            "fmlas": [],
            "defidx": [],
            "annot": null
        },
        "interps": [
            "[[jdx_r.impl.interp6] jdx_r.t -> nat]",
            "[[stream_pos.impl.interp6] stream_pos.t -> nat]",
            "[[tls.interp246] tls.gmt -> bv[32]]",
            "[[jdx_s.impl.interp6] jdx_s.t -> nat]",
            "[[quic_packet_retry.idx.impl.interp6] quic_packet_retry.idx.t -> nat]",
            "[[vector[tls.extension].domain.impl.interp6] vector[tls.extension].domain.t -> nat]",
            "[[forged_quic_packet_retry.idx.impl.interp6] forged_quic_packet_retry.idx.t -> nat]",
            "[[replayed_quic_packet_0rtt.idx.impl.interp6] replayed_quic_packet_0rtt.idx.t -> nat]",
            "[[ipv6.interp318] ipv6.addr -> longbv[1][128][3]]",
            "[[bit.interp74] bit -> bv[1]]",
            "[[servers.server.idx.impl.interp6] servers.server.idx.t -> nat]",
            "[[frame.ack.range.idx.impl.interp6] frame.ack.range.idx.t -> nat]",
            "[[vector[transport_parameter].domain.impl.interp6] vector[transport_parameter].domain.t -> nat]",
            "[[interp78] cid_length -> bv[4]]",
            "[[tls.interp249] tls.message_type -> bv[8]]",
            "[[interp79] cid_seq -> bv[16]]",
            "[[tls.handshakes.domain.impl.interp6] tls.handshakes.domain.t -> nat]",
            "[[quic_packet_coal_0rtt.idx.impl.interp6] quic_packet_coal_0rtt.idx.t -> nat]",
            "[[quic_packet.idx.impl.interp6] quic_packet.idx.t -> nat]",
            "[[interp81] port -> bv[2]]",
            "[[quic_packet_vn.idx.impl.interp6] quic_packet_vn.idx.t -> nat]",
            "[[interp315] version -> bv[32], [interp504] version -> bv[32]]",
            "[[interp82] ipv4 -> bv[4]]",
            "[[tls.interp248] tls.compression_method -> bv[1]]",
            "[[tls_extensions.domain.impl.interp6] tls_extensions.domain.t -> nat]",
            "[[frame.idx.impl.interp6] frame.idx.t -> nat]",
            "[[clients.client.idx.impl.interp6] clients.client.idx.t -> nat]",
            "[[vector[tls.handshake].domain.impl.interp6] vector[tls.handshake].domain.t -> nat]",
            "[[index.impl.interp6] index.t -> nat]",
            "[[forged_quic_packet.idx.impl.interp6] forged_quic_packet.idx.t -> nat]",
            "[[interp83] ipv6 -> bv[16]]",
            "[[interp325] itoken -> longbv[1][13][16], [interp347] itoken -> longbv[1][13][16]]",
            "[[tls.interp244] tls.protocol_version -> bv[16]]",
            "[[vector[tls.cipher_suite].domain.impl.interp6] vector[tls.cipher_suite].domain.t -> nat]",
            "[[frame.ack_ecn.range.idx.impl.interp6] frame.ack_ecn.range.idx.t -> nat]",
            "[[ip.interp254] ip.addr -> bv[32]]",
            "[[interp236] byte -> bv[8]]",
            "[[tls.interp247] tls.cipher_suite -> bv[16]]",
            "[[prot.idx.impl.interp6] prot.idx.t -> nat]",
            "[[tls_api.id.impl.interp14] tls_api.id.t -> longbv[1][13][16]]",
            "[[quic_packet_0rtt.idx.impl.interp6] quic_packet_0rtt.idx.t -> nat]",
            "[[idx_s.impl.interp6] idx_s.t -> nat]",
            "[[idx.impl.interp6] idx.t -> nat]",
            "[[idx_r.impl.interp6] idx_r.t -> nat]",
            "[[forged_quic_packet_vn.idx.impl.interp6] forged_quic_packet_vn.idx.t -> nat]",
            "[[vector[tls.compression_method].domain.impl.interp6] vector[tls.compression_method].domain.t -> nat]",
            "[[tls_hand_extensions.domain.impl.interp6] tls_hand_extensions.domain.t -> nat]",
            "[[interp503] cid -> longbv[1][13][20]]",
            "[[interp80] reset_token -> bv[31]]",
            "[[tls.interp245] tls.extension_type -> bv[16]]",
            "[[interp507] stream_id -> bv[16]]",
            "[[vector[tls.psk_identity].domain.impl.interp6] vector[tls.psk_identity].domain.t -> nat]",
            "[[forged_protected_quic_packet.idx.impl.interp6] forged_protected_quic_packet.idx.t -> nat]",
            "[[interp77] type_bits -> bv[7]]",
            "[[ipv6.interp319] ipv6.port -> bv[16]]",
            "[[interp506] error_code -> bv[16]]",
            "[[ip.interp255] ip.port -> bv[16]]",
            "[[interp505] pkt_num -> bv[32]]"
        ],
        "theorems": [
            "{\n    property [prop114] vector[tls.cipher_suite].end(X) = vector[tls.cipher_suite].end(Y) & (forall I. 0:vector[tls.cipher_suite].domain <= I & I < vector[tls.cipher_suite].end(X) -> vector[tls.cipher_suite].value(X,I) = vector[tls.cipher_suite].value(Y,I))\n    property X:vector[tls.cipher_suite] = Y\n}\n",
            "{\n    property [prop114] quic_packet_0rtt.arr.end(X) = quic_packet_0rtt.arr.end(Y) & (forall I. 0:quic_packet_0rtt.idx <= I & I < quic_packet_0rtt.arr.end(X) -> quic_packet_0rtt.arr.value(X,I) = quic_packet_0rtt.arr.value(Y,I))\n    property X:quic_packet_0rtt.arr = Y\n}\n",
            "{\n    property [prop114] frame.ack.range.arr.end(X) = frame.ack.range.arr.end(Y) & (forall I. 0:frame.ack.range.idx <= I & I < frame.ack.range.arr.end(X) -> frame.ack.range.arr.value(X,I) = frame.ack.range.arr.value(Y,I))\n    property X:frame.ack.range.arr = Y\n}\n",
            "{\n    property [prop114] servers.server.arr.end(X) = servers.server.arr.end(Y) & (forall I. 0:servers.server.idx <= I & I < servers.server.arr.end(X) -> servers.server.arr.value(X,I) = servers.server.arr.value(Y,I))\n    property X:servers.server.arr = Y\n}\n",
            "{\n    property [prop114] frame.arr.end(X) = frame.arr.end(Y) & (forall I. 0:frame.idx <= I & I < frame.arr.end(X) -> frame.arr.value(X,I) = frame.arr.value(Y,I))\n    property X:frame.arr = Y\n}\n",
            "{\n    property [prop114] replayed_quic_packet_0rtt.arr.end(X) = replayed_quic_packet_0rtt.arr.end(Y) & (forall I. 0:replayed_quic_packet_0rtt.idx <= I & I < replayed_quic_packet_0rtt.arr.end(X) -> replayed_quic_packet_0rtt.arr.value(X,I) = replayed_quic_packet_0rtt.arr.value(Y,I))\n    property X:replayed_quic_packet_0rtt.arr = Y\n}\n",
            "{\n    property [prop114] forged_quic_packet_vn.arr.end(X) = forged_quic_packet_vn.arr.end(Y) & (forall I. 0:forged_quic_packet_vn.idx <= I & I < forged_quic_packet_vn.arr.end(X) -> forged_quic_packet_vn.arr.value(X,I) = forged_quic_packet_vn.arr.value(Y,I))\n    property X:forged_quic_packet_vn.arr = Y\n}\n",
            "{\n    property [prop114] forged_quic_packet_retry.retired_cids.end(X) = forged_quic_packet_retry.retired_cids.end(Y) & (forall I. 0:forged_quic_packet_retry.idx <= I & I < forged_quic_packet_retry.retired_cids.end(X) -> forged_quic_packet_retry.retired_cids.value(X,I) = forged_quic_packet_retry.retired_cids.value(Y,I))\n    property X:forged_quic_packet_retry.retired_cids = Y\n}\n",
            "{\n    property [prop114] arr_streamid_s.end(X) = arr_streamid_s.end(Y) & (forall I. 0:idx_s <= I & I < arr_streamid_s.end(X) -> arr_streamid_s.value(X,I) = arr_streamid_s.value(Y,I))\n    property X:arr_streamid_s = Y\n}\n",
            "{\n    property [prop114] prot.arr.end(X) = prot.arr.end(Y) & (forall I. 0:prot.idx <= I & I < prot.arr.end(X) -> prot.arr.value(X,I) = prot.arr.value(Y,I))\n    property X:prot.arr = Y\n}\n",
            "{\n    property [prop114] versions.end(X) = versions.end(Y) & (forall I. 0:index <= I & I < versions.end(X) -> versions.value(X,I) = versions.value(Y,I))\n    property X:versions = Y\n}\n",
            "{\n    property [prop114] arr_pkt_num_s.end(X) = arr_pkt_num_s.end(Y) & (forall I. 0:jdx_s <= I & I < arr_pkt_num_s.end(X) -> arr_pkt_num_s.value(X,I) = arr_pkt_num_s.value(Y,I))\n    property X:arr_pkt_num_s = Y\n}\n",
            "{\n    property [prop114] quic_packet_coal_0rtt.retired_cids.end(X) = quic_packet_coal_0rtt.retired_cids.end(Y) & (forall I. 0:quic_packet_coal_0rtt.idx <= I & I < quic_packet_coal_0rtt.retired_cids.end(X) -> quic_packet_coal_0rtt.retired_cids.value(X,I) = quic_packet_coal_0rtt.retired_cids.value(Y,I))\n    property X:quic_packet_coal_0rtt.retired_cids = Y\n}\n",
            "{\n    property [prop114] vector[tls.psk_identity].end(X) = vector[tls.psk_identity].end(Y) & (forall I. 0:vector[tls.psk_identity].domain <= I & I < vector[tls.psk_identity].end(X) -> vector[tls.psk_identity].value(X,I) = vector[tls.psk_identity].value(Y,I))\n    property X:vector[tls.psk_identity] = Y\n}\n",
            "{\n    property [prop114] arr_pkt_num_r.end(X) = arr_pkt_num_r.end(Y) & (forall I. 0:jdx_r <= I & I < arr_pkt_num_r.end(X) -> arr_pkt_num_r.value(X,I) = arr_pkt_num_r.value(Y,I))\n    property X:arr_pkt_num_r = Y\n}\n",
            "{\n    property [prop114] quic_packet.retired_cids.end(X) = quic_packet.retired_cids.end(Y) & (forall I. 0:quic_packet.idx <= I & I < quic_packet.retired_cids.end(X) -> quic_packet.retired_cids.value(X,I) = quic_packet.retired_cids.value(Y,I))\n    property X:quic_packet.retired_cids = Y\n}\n",
            "{\n    property [prop114] quic_packet_retry.retired_cids.end(X) = quic_packet_retry.retired_cids.end(Y) & (forall I. 0:quic_packet_retry.idx <= I & I < quic_packet_retry.retired_cids.end(X) -> quic_packet_retry.retired_cids.value(X,I) = quic_packet_retry.retired_cids.value(Y,I))\n    property X:quic_packet_retry.retired_cids = Y\n}\n",
            "{\n    property [prop114] cids.end(X) = cids.end(Y) & (forall I. 0:index <= I & I < cids.end(X) -> cids.value(X,I) = cids.value(Y,I))\n    property X:cids = Y\n}\n",
            "{\n    property [prop114] quic_packet_coal_0rtt.arr.end(X) = quic_packet_coal_0rtt.arr.end(Y) & (forall I. 0:quic_packet_coal_0rtt.idx <= I & I < quic_packet_coal_0rtt.arr.end(X) -> quic_packet_coal_0rtt.arr.value(X,I) = quic_packet_coal_0rtt.arr.value(Y,I))\n    property X:quic_packet_coal_0rtt.arr = Y\n}\n",
            "{\n    property [prop114] tls_hand_extensions.end(X) = tls_hand_extensions.end(Y) & (forall I. 0:tls_hand_extensions.domain <= I & I < tls_hand_extensions.end(X) -> tls_hand_extensions.value(X,I) = tls_hand_extensions.value(Y,I))\n    property X:tls_hand_extensions = Y\n}\n",
            "{\n    property [prop114] replayed_quic_packet_0rtt.retired_cids.end(X) = replayed_quic_packet_0rtt.retired_cids.end(Y) & (forall I. 0:replayed_quic_packet_0rtt.idx <= I & I < replayed_quic_packet_0rtt.retired_cids.end(X) -> replayed_quic_packet_0rtt.retired_cids.value(X,I) = replayed_quic_packet_0rtt.retired_cids.value(Y,I))\n    property X:replayed_quic_packet_0rtt.retired_cids = Y\n}\n",
            "{\n    property [prop114] quic_packet.arr.end(X) = quic_packet.arr.end(Y) & (forall I. 0:quic_packet.idx <= I & I < quic_packet.arr.end(X) -> quic_packet.arr.value(X,I) = quic_packet.arr.value(Y,I))\n    property X:quic_packet.arr = Y\n}\n",
            "{\n    property [prop114] frame.ack_ecn.range.arr.end(X) = frame.ack_ecn.range.arr.end(Y) & (forall I. 0:frame.ack_ecn.range.idx <= I & I < frame.ack_ecn.range.arr.end(X) -> frame.ack_ecn.range.arr.value(X,I) = frame.ack_ecn.range.arr.value(Y,I))\n    property X:frame.ack_ecn.range.arr = Y\n}\n",
            "{\n    property [prop114] vector[tls.handshake].end(X) = vector[tls.handshake].end(Y) & (forall I. 0:vector[tls.handshake].domain <= I & I < vector[tls.handshake].end(X) -> vector[tls.handshake].value(X,I) = vector[tls.handshake].value(Y,I))\n    property X:vector[tls.handshake] = Y\n}\n",
            "{\n    property [prop114] arr_streamid_r.end(X) = arr_streamid_r.end(Y) & (forall I. 0:idx_r <= I & I < arr_streamid_r.end(X) -> arr_streamid_r.value(X,I) = arr_streamid_r.value(Y,I))\n    property X:arr_streamid_r = Y\n}\n",
            "{\n    property [prop114] versions_bv.end(X) = versions_bv.end(Y) & (forall I. 0:index <= I & I < versions_bv.end(X) -> versions_bv.value(X,I) = versions_bv.value(Y,I))\n    property X:versions_bv = Y\n}\n",
            "{\n    property [prop114] forged_protected_quic_packet.arr.end(X) = forged_protected_quic_packet.arr.end(Y) & (forall I. 0:forged_protected_quic_packet.idx <= I & I < forged_protected_quic_packet.arr.end(X) -> forged_protected_quic_packet.arr.value(X,I) = forged_protected_quic_packet.arr.value(Y,I))\n    property X:forged_protected_quic_packet.arr = Y\n}\n",
            "{\n    property [prop114] forged_quic_packet.retired_cids.end(X) = forged_quic_packet.retired_cids.end(Y) & (forall I. 0:forged_quic_packet.idx <= I & I < forged_quic_packet.retired_cids.end(X) -> forged_quic_packet.retired_cids.value(X,I) = forged_quic_packet.retired_cids.value(Y,I))\n    property X:forged_quic_packet.retired_cids = Y\n}\n",
            "{\n    property [prop114] forged_protected_quic_packet.retired_cids.end(X) = forged_protected_quic_packet.retired_cids.end(Y) & (forall I. 0:forged_protected_quic_packet.idx <= I & I < forged_protected_quic_packet.retired_cids.end(X) -> forged_protected_quic_packet.retired_cids.value(X,I) = forged_protected_quic_packet.retired_cids.value(Y,I))\n    property X:forged_protected_quic_packet.retired_cids = Y\n}\n",
            "{\n    property [prop114] stream_data.end(X) = stream_data.end(Y) & (forall I. 0:stream_pos <= I & I < stream_data.end(X) -> stream_data.value(X,I) = stream_data.value(Y,I))\n    property X:stream_data = Y\n}\n",
            "{\n    property [prop114] forged_quic_packet_retry.arr.end(X) = forged_quic_packet_retry.arr.end(Y) & (forall I. 0:forged_quic_packet_retry.idx <= I & I < forged_quic_packet_retry.arr.end(X) -> forged_quic_packet_retry.arr.value(X,I) = forged_quic_packet_retry.arr.value(Y,I))\n    property X:forged_quic_packet_retry.arr = Y\n}\n",
            "{\n    property [prop114] forged_quic_packet.arr.end(X) = forged_quic_packet.arr.end(Y) & (forall I. 0:forged_quic_packet.idx <= I & I < forged_quic_packet.arr.end(X) -> forged_quic_packet.arr.value(X,I) = forged_quic_packet.arr.value(Y,I))\n    property X:forged_quic_packet.arr = Y\n}\n",
            "{\n    property [prop114] bytes.end(X) = bytes.end(Y) & (forall I. 0:idx <= I & I < bytes.end(X) -> bytes.value(X,I) = bytes.value(Y,I))\n    property X:bytes = Y\n}\n",
            "{\n    property [prop114] quic_packet_retry.arr.end(X) = quic_packet_retry.arr.end(Y) & (forall I. 0:quic_packet_retry.idx <= I & I < quic_packet_retry.arr.end(X) -> quic_packet_retry.arr.value(X,I) = quic_packet_retry.arr.value(Y,I))\n    property X:quic_packet_retry.arr = Y\n}\n",
            "{\n    property [prop114] tls_extensions.end(X) = tls_extensions.end(Y) & (forall I. 0:tls_extensions.domain <= I & I < tls_extensions.end(X) -> tls_extensions.value(X,I) = tls_extensions.value(Y,I))\n    property X:tls_extensions = Y\n}\n",
            "{\n    property [prop114] vector[tls.compression_method].end(X) = vector[tls.compression_method].end(Y) & (forall I. 0:vector[tls.compression_method].domain <= I & I < vector[tls.compression_method].end(X) -> vector[tls.compression_method].value(X,I) = vector[tls.compression_method].value(Y,I))\n    property X:vector[tls.compression_method] = Y\n}\n",
            "{\n    property [prop114] forged_pkts.end(X) = forged_pkts.end(Y) & (forall I. 0:index <= I & I < forged_pkts.end(X) -> forged_pkts.value(X,I) = forged_pkts.value(Y,I))\n    property X:forged_pkts = Y\n}\n",
            "{\n    property [prop114] vector[transport_parameter].end(X) = vector[transport_parameter].end(Y) & (forall I. 0:vector[transport_parameter].domain <= I & I < vector[transport_parameter].end(X) -> vector[transport_parameter].value(X,I) = vector[transport_parameter].value(Y,I))\n    property X:vector[transport_parameter] = Y\n}\n",
            "{\n    property [prop114] vector[tls.extension].end(X) = vector[tls.extension].end(Y) & (forall I. 0:vector[tls.extension].domain <= I & I < vector[tls.extension].end(X) -> vector[tls.extension].value(X,I) = vector[tls.extension].value(Y,I))\n    property X:vector[tls.extension] = Y\n}\n",
            "{\n    property [prop114] ip_endpoints.end(X) = ip_endpoints.end(Y) & (forall I. 0:index <= I & I < ip_endpoints.end(X) -> ip_endpoints.value(X,I) = ip_endpoints.value(Y,I))\n    property X:ip_endpoints = Y\n}\n",
            "{\n    property [prop114] clients.client.arr.end(X) = clients.client.arr.end(Y) & (forall I. 0:clients.client.idx <= I & I < clients.client.arr.end(X) -> clients.client.arr.value(X,I) = clients.client.arr.value(Y,I))\n    property X:clients.client.arr = Y\n}\n",
            "{\n    property [prop114] quic_packet_0rtt.retired_cids.end(X) = quic_packet_0rtt.retired_cids.end(Y) & (forall I. 0:quic_packet_0rtt.idx <= I & I < quic_packet_0rtt.retired_cids.end(X) -> quic_packet_0rtt.retired_cids.value(X,I) = quic_packet_0rtt.retired_cids.value(Y,I))\n    property X:quic_packet_0rtt.retired_cids = Y\n}\n",
            "{\n    property [prop114] tls.handshakes.end(X) = tls.handshakes.end(Y) & (forall I. 0:tls.handshakes.domain <= I & I < tls.handshakes.end(X) -> tls.handshakes.value(X,I) = tls.handshakes.value(Y,I))\n    property X:tls.handshakes = Y\n}\n",
            "{\n    property [prop114] quic_packet_vn.arr.end(X) = quic_packet_vn.arr.end(Y) & (forall I. 0:quic_packet_vn.idx <= I & I < quic_packet_vn.arr.end(X) -> quic_packet_vn.arr.value(X,I) = quic_packet_vn.arr.value(Y,I))\n    property X:quic_packet_vn.arr = Y\n}\n"
        ],
        "isolate_info": null,
        "sort_order": [
            "cid",
            "itoken",
            "version",
            "pkt_num",
            "microsecs",
            "error_code",
            "stream_kind",
            "bit",
            "role",
            "type_bits",
            "cid_length",
            "cid_seq",
            "reset_token",
            "port",
            "ipv4",
            "ipv6",
            "quic_packet_type",
            "byte",
            "idx",
            "bytes",
            "stream_pos",
            "stream_data",
            "stream_id",
            "tls.protocol_version",
            "tls.handshake",
            "tls.extension",
            "tls.extension_type",
            "tls.unknown_extension",
            "tls.early_data",
            "tls.end_of_early_data",
            "tls.psk_key_exchange_modes",
            "tls.psk_identity",
            "vector[tls.psk_identity].domain",
            "vector[tls.psk_identity]",
            "tls.pre_shared_key_client",
            "tls.pre_shared_key_server",
            "tls.gmt",
            "tls.random",
            "tls.cipher_suite",
            "tls.compression_method",
            "vector[tls.cipher_suite].domain",
            "vector[tls.cipher_suite]",
            "vector[tls.compression_method].domain",
            "vector[tls.compression_method]",
            "vector[tls.extension].domain",
            "vector[tls.extension]",
            "tls.client_hello",
            "tls.server_hello",
            "tls.new_session_ticket",
            "tls.encrypted_extensions",
            "tls.message_type",
            "tls.unknown_message",
            "tls.finished",
            "tls.record",
            "vector[tls.handshake].domain",
            "vector[tls.handshake]",
            "tls.handshake_record",
            "tls.application_data_record",
            "tls.change_cipher_spec",
            "ip.addr",
            "ip.port",
            "ip.protocol",
            "ip.interface",
            "ip.endpoint",
            "tls.handshakes.domain",
            "tls.handshakes",
            "tls.handshake_parser.result",
            "frame",
            "frame.ping",
            "frame.ack.range",
            "frame.ack.range.idx",
            "frame.ack.range.arr",
            "frame.ack",
            "frame.ack_ecn.range",
            "frame.ack_ecn.range.idx",
            "frame.ack_ecn.range.arr",
            "frame.ack_ecn",
            "frame.rst_stream",
            "frame.stop_sending",
            "frame.crypto",
            "frame.new_token",
            "frame.stream",
            "frame.max_data",
            "frame.max_stream_data",
            "frame.max_streams",
            "frame.max_streams_bidi",
            "frame.data_blocked",
            "frame.stream_data_blocked",
            "frame.streams_blocked",
            "frame.streams_blocked_bidi",
            "frame.new_connection_id",
            "frame.retire_connection_id",
            "frame.path_challenge",
            "frame.path_response",
            "frame.connection_close",
            "frame.application_close",
            "frame.handshake_done",
            "frame.ack_frequency",
            "frame.unknown_frame",
            "frame.malicious_frame",
            "frame.idx",
            "frame.arr",
            "index",
            "versions",
            "versions_bv",
            "quic_packet_vn",
            "quic_packet_vn.idx",
            "quic_packet_vn.arr",
            "ipv6.addr",
            "ipv6.port",
            "ipv6.protocol",
            "ipv6.endpoint",
            "transport_parameter",
            "original_destination_connection_id",
            "initial_max_stream_data_bidi_local",
            "initial_max_data",
            "initial_max_stream_id_bidi",
            "max_idle_timeout",
            "preferred_address",
            "max_packet_size",
            "stateless_reset_token",
            "ack_delay_exponent",
            "initial_max_stream_id_uni",
            "disable_active_migration",
            "initial_max_stream_data_bidi_remote",
            "initial_max_stream_data_uni",
            "max_ack_delay",
            "active_connection_id_limit",
            "initial_source_connection_id",
            "retry_source_connection_id",
            "loss_bits",
            "grease_quic_bit",
            "enable_time_stamp",
            "min_ack_delay",
            "version_information",
            "unknown_ignore",
            "unknown_transport_parameter",
            "trans_params_struct",
            "vector[transport_parameter].domain",
            "vector[transport_parameter]",
            "quic_transport_parameters",
            "idx_s",
            "arr_streamid_s",
            "jdx_s",
            "arr_pkt_num_s",
            "idx_r",
            "arr_streamid_r",
            "jdx_r",
            "arr_pkt_num_r",
            "quic_packet",
            "quic_packet.idx",
            "quic_packet.arr",
            "quic_packet.retired_cids",
            "quic_packet_retry",
            "quic_packet_retry.idx",
            "quic_packet_retry.arr",
            "quic_packet_retry.retired_cids",
            "quic_packet_0rtt",
            "quic_packet_0rtt.idx",
            "quic_packet_0rtt.arr",
            "quic_packet_0rtt.retired_cids",
            "quic_packet_coal_0rtt",
            "quic_packet_coal_0rtt.idx",
            "quic_packet_coal_0rtt.arr",
            "quic_packet_coal_0rtt.retired_cids",
            "forged_pkts",
            "forged_protected_quic_packet",
            "forged_protected_quic_packet.idx",
            "forged_protected_quic_packet.arr",
            "forged_protected_quic_packet.retired_cids",
            "forged_quic_packet",
            "forged_quic_packet.idx",
            "forged_quic_packet.arr",
            "forged_quic_packet.retired_cids",
            "forged_quic_packet_retry",
            "forged_quic_packet_retry.idx",
            "forged_quic_packet_retry.arr",
            "forged_quic_packet_retry.retired_cids",
            "forged_quic_packet_vn",
            "forged_quic_packet_vn.idx",
            "forged_quic_packet_vn.arr",
            "replayed_quic_packet_0rtt",
            "replayed_quic_packet_0rtt.idx",
            "replayed_quic_packet_0rtt.arr",
            "replayed_quic_packet_0rtt.retired_cids",
            "prot.idx",
            "prot.arr",
            "prot.header_info",
            "tls_api.id",
            "tls_api.lower.level",
            "tls_api.upper.level",
            "tls_api.upper.decrypt_result",
            "net.socket",
            "endpoint_id",
            "quic_endpoint",
            "server",
            "second_server",
            "client",
            "second_client",
            "client_server",
            "attacker",
            "victim_agent",
            "mim_agent",
            "mim_server_target",
            "mim_client_target",
            "fake_client",
            "cids",
            "clients",
            "clients.client",
            "clients.client.idx",
            "clients.client.arr",
            "servers",
            "servers.server",
            "servers.server.idx",
            "servers.server.arr",
            "ip_endpoints",
            "tls_extensions.domain",
            "tls_extensions",
            "tls_hand_extensions.domain",
            "tls_hand_extensions"
        ],
        "schemata": [
            "[forged_quic_packet_vn.constr] {\n    property exists Y. forged_quic_packet_vn.ptype(Y) = X0 & forged_quic_packet_vn.pversion(Y) = X1 & forged_quic_packet_vn.dst_cid(Y) = X2 & forged_quic_packet_vn.src_cid(Y) = X3 & forged_quic_packet_vn.supported_version(Y) = X4\n}\n",
            "[forged_quic_packet.constr] {\n    property exists Y. forged_quic_packet.ptype(Y) = X0 & forged_quic_packet.pversion(Y) = X1 & forged_quic_packet.dst_cid(Y) = X2 & forged_quic_packet.src_cid(Y) = X3 & forged_quic_packet.token(Y) = X4 & forged_quic_packet.seq_num(Y) = X5 & forged_quic_packet.payload(Y) = X6\n}\n",
            "[quic_packet_0rtt.constr] {\n    property exists Y. quic_packet_0rtt.ptype(Y) = X0 & quic_packet_0rtt.pversion(Y) = X1 & quic_packet_0rtt.dst_cid(Y) = X2 & quic_packet_0rtt.src_cid(Y) = X3 & quic_packet_0rtt.seq_num(Y) = X4 & quic_packet_0rtt.payload(Y) = X5\n}\n",
            "[tls.end_of_early_data.constr] {\n    property exists Y:tls.end_of_early_data. true\n}\n",
            "[rec[quic_packet_coal_0rtt.idx]] {\n    type q\n    function base(V0:quic_packet_coal_0rtt.idx) : q\n    function step(V0:q,V1:quic_packet_coal_0rtt.idx) : q\n    function fun(V0:quic_packet_coal_0rtt.idx) : q\n    property fun(X) = (base(X) if (X <= 0) else step(fun(X - 1),X))\n}\n",
            "[lep[frame.ack.range.idx]] {\n    individual n : frame.ack.range.idx\n    relation p(V0:frame.ack.range.idx)\n    property exists L. L:frame.ack.range.idx >= n & (forall B. B:frame.ack.range.idx >= n & p(B) -> p(L) & L <= B)\n}\n",
            "[servers.server.arr.spec.extensionality] {\n    property [prop114] servers.server.arr.end(X) = servers.server.arr.end(Y) & (forall I. 0:servers.server.idx <= I & I < servers.server.arr.end(X) -> servers.server.arr.value(X,I) = servers.server.arr.value(Y,I))\n    property X:servers.server.arr = Y\n}\n",
            "[rec[tls.compression_method]] {\n    type q\n    function base(V0:tls.compression_method) : q\n    function step(V0:q,V1:tls.compression_method) : q\n    function fun(V0:tls.compression_method) : q\n    property fun(X) = (base(X) if (X <= 0) else step(fun(X - 1),X))\n}\n",
            "[arr_pkt_num_r.spec.extensionality] {\n    property [prop114] arr_pkt_num_r.end(X) = arr_pkt_num_r.end(Y) & (forall I. 0:jdx_r <= I & I < arr_pkt_num_r.end(X) -> arr_pkt_num_r.value(X,I) = arr_pkt_num_r.value(Y,I))\n    property X:arr_pkt_num_r = Y\n}\n",
            "[rec[frame.idx]] {\n    type q\n    function base(V0:frame.idx) : q\n    function step(V0:q,V1:frame.idx) : q\n    function fun(V0:frame.idx) : q\n    property fun(X) = (base(X) if (X <= 0) else step(fun(X - 1),X))\n}\n",
            "[ind[frame.ack.range.idx]] {\n    relation p(V0:frame.ack.range.idx)\n    property [base] {\n        individual x : frame.ack.range.idx\n        property x <= 0 -> p(x)\n    }\n    property [step] {\n        individual x : frame.ack.range.idx\n        property p(x) -> p(x + 1)\n    }\n    property p(X)\n}\n",
            "[forged_quic_packet_retry.retired_cids.spec.extensionality] {\n    property [prop114] forged_quic_packet_retry.retired_cids.end(X) = forged_quic_packet_retry.retired_cids.end(Y) & (forall I. 0:forged_quic_packet_retry.idx <= I & I < forged_quic_packet_retry.retired_cids.end(X) -> forged_quic_packet_retry.retired_cids.value(X,I) = forged_quic_packet_retry.retired_cids.value(Y,I))\n    property X:forged_quic_packet_retry.retired_cids = Y\n}\n",
            "[lep[vector[transport_parameter].domain]] {\n    individual n : vector[transport_parameter].domain\n    relation p(V0:vector[transport_parameter].domain)\n    property exists L. L:vector[transport_parameter].domain >= n & (forall B. B:vector[transport_parameter].domain >= n & p(B) -> p(L) & L <= B)\n}\n",
            "[forged_quic_packet_retry.constr] {\n    property exists Y. forged_quic_packet_retry.ptype(Y) = X0 & forged_quic_packet_retry.pversion(Y) = X1 & forged_quic_packet_retry.dst_cid(Y) = X2 & forged_quic_packet_retry.src_cid(Y) = X3 & forged_quic_packet_retry.token(Y) = X4 & forged_quic_packet_retry.integrity_token(Y) = X5\n}\n",
            "[ind[frame.ack_ecn.range.idx]] {\n    relation p(V0:frame.ack_ecn.range.idx)\n    property [base] {\n        individual x : frame.ack_ecn.range.idx\n        property x <= 0 -> p(x)\n    }\n    property [step] {\n        individual x : frame.ack_ecn.range.idx\n        property p(x) -> p(x + 1)\n    }\n    property p(X)\n}\n",
            "[frame.new_connection_id.constr] {\n    property exists Y. frame.new_connection_id.seq_num(Y) = X0 & frame.new_connection_id.retire_prior_to(Y) = X1 & frame.new_connection_id.length(Y) = X2 & frame.new_connection_id.scid(Y) = X3 & frame.new_connection_id.token(Y) = X4\n}\n",
            "[versions.spec.extensionality] {\n    property [prop114] versions.end(X) = versions.end(Y) & (forall I. 0:index <= I & I < versions.end(X) -> versions.value(X,I) = versions.value(Y,I))\n    property X:versions = Y\n}\n",
            "[server.constr] {\n    property exists Y:server. true\n}\n",
            "[vector[tls.handshake].spec.extensionality] {\n    property [prop114] vector[tls.handshake].end(X) = vector[tls.handshake].end(Y) & (forall I. 0:vector[tls.handshake].domain <= I & I < vector[tls.handshake].end(X) -> vector[tls.handshake].value(X,I) = vector[tls.handshake].value(Y,I))\n    property X:vector[tls.handshake] = Y\n}\n",
            "[tls_api.upper.decrypt_result.constr] {\n    property exists Y. tls_api.upper.ok(Y) = X0 & tls_api.upper.data(Y) = X1 & tls_api.upper.payload(Y) = X2\n}\n",
            "[initial_max_stream_id_bidi.constr] {\n    property exists Y. initial_max_stream_id_bidi.stream_id_16(Y) = X0\n}\n",
            "[active_connection_id_limit.constr] {\n    property exists Y. active_connection_id_limit.stream_pos_32(Y) = X0\n}\n",
            "[ind[forged_quic_packet.idx]] {\n    relation p(V0:forged_quic_packet.idx)\n    property [base] {\n        individual x : forged_quic_packet.idx\n        property x <= 0 -> p(x)\n    }\n    property [step] {\n        individual x : forged_quic_packet.idx\n        property p(x) -> p(x + 1)\n    }\n    property p(X)\n}\n",
            "[tls.new_session_ticket.constr] {\n    property exists Y. tls.new_session_ticket.ticket_lifetime(Y) = X0 & tls.new_session_ticket.ticket_age_add(Y) = X1 & tls.new_session_ticket.ticket_nonce(Y) = X2 & tls.new_session_ticket.ticket(Y) = X3 & tls.new_session_ticket.extensions(Y) = X4\n}\n",
            "[ind[pkt_num]] {\n    relation p(V0:pkt_num)\n    property [base] {\n        individual x : pkt_num\n        property x <= 0 -> p(x)\n    }\n    property [step] {\n        individual x : pkt_num\n        property p(x) -> p(x + 1)\n    }\n    property p(X)\n}\n",
            "[max_ack_delay.constr] {\n    property exists Y. max_ack_delay.exponent_8(Y) = X0\n}\n",
            "[rec[byte]] {\n    type q\n    function base(V0:byte) : q\n    function step(V0:q,V1:byte) : q\n    function fun(V0:byte) : q\n    property fun(X) = (base(X) if (X <= 0) else step(fun(X - 1),X))\n}\n",
            "[rec[jdx_s]] {\n    type q\n    function base(V0:jdx_s) : q\n    function step(V0:q,V1:jdx_s) : q\n    function fun(V0:jdx_s) : q\n    property fun(X) = (base(X) if (X <= 0) else step(fun(X - 1),X))\n}\n",
            "[rec[servers.server.idx]] {\n    type q\n    function base(V0:servers.server.idx) : q\n    function step(V0:q,V1:servers.server.idx) : q\n    function fun(V0:servers.server.idx) : q\n    property fun(X) = (base(X) if (X <= 0) else step(fun(X - 1),X))\n}\n",
            "[lep[quic_packet_vn.idx]] {\n    individual n : quic_packet_vn.idx\n    relation p(V0:quic_packet_vn.idx)\n    property exists L. L:quic_packet_vn.idx >= n & (forall B. B:quic_packet_vn.idx >= n & p(B) -> p(L) & L <= B)\n}\n",
            "[quic_packet.retired_cids.spec.extensionality] {\n    property [prop114] quic_packet.retired_cids.end(X) = quic_packet.retired_cids.end(Y) & (forall I. 0:quic_packet.idx <= I & I < quic_packet.retired_cids.end(X) -> quic_packet.retired_cids.value(X,I) = quic_packet.retired_cids.value(Y,I))\n    property X:quic_packet.retired_cids = Y\n}\n",
            "[lep[forged_quic_packet_vn.idx]] {\n    individual n : forged_quic_packet_vn.idx\n    relation p(V0:forged_quic_packet_vn.idx)\n    property exists L. L:forged_quic_packet_vn.idx >= n & (forall B. B:forged_quic_packet_vn.idx >= n & p(B) -> p(L) & L <= B)\n}\n",
            "[ip.endpoint.constr] {\n    property exists Y. ip.endpoint.protocol(Y) = X0 & ip.endpoint.addr(Y) = X1 & ip.endpoint.port(Y) = X2 & ip.endpoint.interface(Y) = X3\n}\n",
            "[rec[ipv6]] {\n    type q\n    function base(V0:ipv6) : q\n    function step(V0:q,V1:ipv6) : q\n    function fun(V0:ipv6) : q\n    property fun(X) = (base(X) if (X <= 0) else step(fun(X - 1),X))\n}\n",
            "[attacker.constr] {\n    property exists Y:attacker. true\n}\n",
            "[mim_server_target.constr] {\n    property exists Y:mim_server_target. true\n}\n",
            "[frame.malicious_frame.constr] {\n    property exists Y. frame.malicious_frame.data(Y) = X0\n}\n",
            "[quic_packet.arr.spec.extensionality] {\n    property [prop114] quic_packet.arr.end(X) = quic_packet.arr.end(Y) & (forall I. 0:quic_packet.idx <= I & I < quic_packet.arr.end(X) -> quic_packet.arr.value(X,I) = quic_packet.arr.value(Y,I))\n    property X:quic_packet.arr = Y\n}\n",
            "[grease_quic_bit.constr] {\n    property exists Y:grease_quic_bit. true\n}\n",
            "[lep[quic_packet_retry.idx]] {\n    individual n : quic_packet_retry.idx\n    relation p(V0:quic_packet_retry.idx)\n    property exists L. L:quic_packet_retry.idx >= n & (forall B. B:quic_packet_retry.idx >= n & p(B) -> p(L) & L <= B)\n}\n",
            "[lep[version]] {\n    individual n : version\n    relation p(V0:version)\n    property exists L. L:version >= n & (forall B. B:version >= n & p(B) -> p(L) & L <= B)\n}\n",
            "[ind[index]] {\n    relation p(V0:index)\n    property [base] {\n        individual x : index\n        property x <= 0 -> p(x)\n    }\n    property [step] {\n        individual x : index\n        property p(x) -> p(x + 1)\n    }\n    property p(X)\n}\n",
            "[max_packet_size.constr] {\n    property exists Y. max_packet_size.stream_pos_16(Y) = X0\n}\n",
            "[forged_quic_packet.retired_cids.spec.extensionality] {\n    property [prop114] forged_quic_packet.retired_cids.end(X) = forged_quic_packet.retired_cids.end(Y) & (forall I. 0:forged_quic_packet.idx <= I & I < forged_quic_packet.retired_cids.end(X) -> forged_quic_packet.retired_cids.value(X,I) = forged_quic_packet.retired_cids.value(Y,I))\n    property X:forged_quic_packet.retired_cids = Y\n}\n",
            "[lep[tls_extensions.domain]] {\n    individual n : tls_extensions.domain\n    relation p(V0:tls_extensions.domain)\n    property exists L. L:tls_extensions.domain >= n & (forall B. B:tls_extensions.domain >= n & p(B) -> p(L) & L <= B)\n}\n",
            "[tls.psk_identity.constr] {\n    property exists Y. tls.psk_identity.identity(Y) = X0 & tls.psk_identity.obfuscated_ticket_age(Y) = X1\n}\n",
            "[lep[index]] {\n    individual n : index\n    relation p(V0:index)\n    property exists L. L:index >= n & (forall B. B:index >= n & p(B) -> p(L) & L <= B)\n}\n",
            "[stream_data.spec.extensionality] {\n    property [prop114] stream_data.end(X) = stream_data.end(Y) & (forall I. 0:stream_pos <= I & I < stream_data.end(X) -> stream_data.value(X,I) = stream_data.value(Y,I))\n    property X:stream_data = Y\n}\n",
            "[forged_quic_packet_retry.arr.spec.extensionality] {\n    property [prop114] forged_quic_packet_retry.arr.end(X) = forged_quic_packet_retry.arr.end(Y) & (forall I. 0:forged_quic_packet_retry.idx <= I & I < forged_quic_packet_retry.arr.end(X) -> forged_quic_packet_retry.arr.value(X,I) = forged_quic_packet_retry.arr.value(Y,I))\n    property X:forged_quic_packet_retry.arr = Y\n}\n",
            "[initial_max_data.constr] {\n    property exists Y. initial_max_data.stream_pos_32(Y) = X0\n}\n",
            "[lep[jdx_r]] {\n    individual n : jdx_r\n    relation p(V0:jdx_r)\n    property exists L. L:jdx_r >= n & (forall B. B:jdx_r >= n & p(B) -> p(L) & L <= B)\n}\n",
            "[frame.handshake_done.constr] {\n    property exists Y:frame.handshake_done. true\n}\n",
            "[lep[port]] {\n    individual n : port\n    relation p(V0:port)\n    property exists L. L:port >= n & (forall B. B:port >= n & p(B) -> p(L) & L <= B)\n}\n",
            "[rec[idx_r]] {\n    type q\n    function base(V0:idx_r) : q\n    function step(V0:q,V1:idx_r) : q\n    function fun(V0:idx_r) : q\n    property fun(X) = (base(X) if (X <= 0) else step(fun(X - 1),X))\n}\n",
            "[tls.handshakes.spec.extensionality] {\n    property [prop114] tls.handshakes.end(X) = tls.handshakes.end(Y) & (forall I. 0:tls.handshakes.domain <= I & I < tls.handshakes.end(X) -> tls.handshakes.value(X,I) = tls.handshakes.value(Y,I))\n    property X:tls.handshakes = Y\n}\n",
            "[rec[ip.addr]] {\n    type q\n    function base(V0:ip.addr) : q\n    function step(V0:q,V1:ip.addr) : q\n    function fun(V0:ip.addr) : q\n    property fun(X) = (base(X) if (X <= 0) else step(fun(X - 1),X))\n}\n",
            "[ind[tls.compression_method]] {\n    relation p(V0:tls.compression_method)\n    property [base] {\n        individual x : tls.compression_method\n        property x <= 0 -> p(x)\n    }\n    property [step] {\n        individual x : tls.compression_method\n        property p(x) -> p(x + 1)\n    }\n    property p(X)\n}\n",
            "[lep[tls_hand_extensions.domain]] {\n    individual n : tls_hand_extensions.domain\n    relation p(V0:tls_hand_extensions.domain)\n    property exists L. L:tls_hand_extensions.domain >= n & (forall B. B:tls_hand_extensions.domain >= n & p(B) -> p(L) & L <= B)\n}\n",
            "[ind[ip.addr]] {\n    relation p(V0:ip.addr)\n    property [base] {\n        individual x : ip.addr\n        property x <= 0 -> p(x)\n    }\n    property [step] {\n        individual x : ip.addr\n        property p(x) -> p(x + 1)\n    }\n    property p(X)\n}\n",
            "[ind[quic_packet_coal_0rtt.idx]] {\n    relation p(V0:quic_packet_coal_0rtt.idx)\n    property [base] {\n        individual x : quic_packet_coal_0rtt.idx\n        property x <= 0 -> p(x)\n    }\n    property [step] {\n        individual x : quic_packet_coal_0rtt.idx\n        property p(x) -> p(x + 1)\n    }\n    property p(X)\n}\n",
            "[ind[tls_extensions.domain]] {\n    relation p(V0:tls_extensions.domain)\n    property [base] {\n        individual x : tls_extensions.domain\n        property x <= 0 -> p(x)\n    }\n    property [step] {\n        individual x : tls_extensions.domain\n        property p(x) -> p(x + 1)\n    }\n    property p(X)\n}\n",
            "[preferred_address.constr] {\n    property exists Y. preferred_address.ip_addr(Y) = X0 & preferred_address.ip_port(Y) = X1 & preferred_address.ip6_addr(Y) = X2 & preferred_address.ip6_port(Y) = X3 & preferred_address.pcid_len(Y) = X4 & preferred_address.pcid(Y) = X5 & preferred_address.pref_token(Y) = X6\n}\n",
            "[rec[tls.extension_type]] {\n    type q\n    function base(V0:tls.extension_type) : q\n    function step(V0:q,V1:tls.extension_type) : q\n    function fun(V0:tls.extension_type) : q\n    property fun(X) = (base(X) if (X <= 0) else step(fun(X - 1),X))\n}\n",
            "[retry_source_connection_id.constr] {\n    property exists Y. retry_source_connection_id.rcid(Y) = X0\n}\n",
            "[prot.arr.spec.extensionality] {\n    property [prop114] prot.arr.end(X) = prot.arr.end(Y) & (forall I. 0:prot.idx <= I & I < prot.arr.end(X) -> prot.arr.value(X,I) = prot.arr.value(Y,I))\n    property X:prot.arr = Y\n}\n",
            "[forged_pkts.spec.extensionality] {\n    property [prop114] forged_pkts.end(X) = forged_pkts.end(Y) & (forall I. 0:index <= I & I < forged_pkts.end(X) -> forged_pkts.value(X,I) = forged_pkts.value(Y,I))\n    property X:forged_pkts = Y\n}\n",
            "[rec[prot.idx]] {\n    type q\n    function base(V0:prot.idx) : q\n    function step(V0:q,V1:prot.idx) : q\n    function fun(V0:prot.idx) : q\n    property fun(X) = (base(X) if (X <= 0) else step(fun(X - 1),X))\n}\n",
            "[lep[idx]] {\n    individual n : idx\n    relation p(V0:idx)\n    property exists L. L:idx >= n & (forall B. B:idx >= n & p(B) -> p(L) & L <= B)\n}\n",
            "[frame.ack_frequency.constr] {\n    property exists Y. frame.ack_frequency.seq_num(Y) = X0 & frame.ack_frequency.packet_tolerence(Y) = X1 & frame.ack_frequency.update_max_ack_delay(Y) = X2 & frame.ack_frequency.ignore_order(Y) = X3\n}\n",
            "[rec[jdx_r]] {\n    type q\n    function base(V0:jdx_r) : q\n    function step(V0:q,V1:jdx_r) : q\n    function fun(V0:jdx_r) : q\n    property fun(X) = (base(X) if (X <= 0) else step(fun(X - 1),X))\n}\n",
            "[frame.stream_data_blocked.constr] {\n    property exists Y. frame.stream_data_blocked.id(Y) = X0 & frame.stream_data_blocked.pos(Y) = X1\n}\n",
            "[lep[tls.handshakes.domain]] {\n    individual n : tls.handshakes.domain\n    relation p(V0:tls.handshakes.domain)\n    property exists L. L:tls.handshakes.domain >= n & (forall B. B:tls.handshakes.domain >= n & p(B) -> p(L) & L <= B)\n}\n",
            "[forged_quic_packet_vn.arr.spec.extensionality] {\n    property [prop114] forged_quic_packet_vn.arr.end(X) = forged_quic_packet_vn.arr.end(Y) & (forall I. 0:forged_quic_packet_vn.idx <= I & I < forged_quic_packet_vn.arr.end(X) -> forged_quic_packet_vn.arr.value(X,I) = forged_quic_packet_vn.arr.value(Y,I))\n    property X:forged_quic_packet_vn.arr = Y\n}\n",
            "[ind[quic_packet_0rtt.idx]] {\n    relation p(V0:quic_packet_0rtt.idx)\n    property [base] {\n        individual x : quic_packet_0rtt.idx\n        property x <= 0 -> p(x)\n    }\n    property [step] {\n        individual x : quic_packet_0rtt.idx\n        property p(x) -> p(x + 1)\n    }\n    property p(X)\n}\n",
            "[rec[error_code]] {\n    type q\n    function base(V0:error_code) : q\n    function step(V0:q,V1:error_code) : q\n    function fun(V0:error_code) : q\n    property fun(X) = (base(X) if (X <= 0) else step(fun(X - 1),X))\n}\n",
            "[rec[cid_seq]] {\n    type q\n    function base(V0:cid_seq) : q\n    function step(V0:q,V1:cid_seq) : q\n    function fun(V0:cid_seq) : q\n    property fun(X) = (base(X) if (X <= 0) else step(fun(X - 1),X))\n}\n",
            "[lep[stream_pos]] {\n    individual n : stream_pos\n    relation p(V0:stream_pos)\n    property exists L. L:stream_pos >= n & (forall B. B:stream_pos >= n & p(B) -> p(L) & L <= B)\n}\n",
            "[frame.max_streams.constr] {\n    property exists Y. frame.max_streams.id(Y) = X0\n}\n",
            "[lep[pkt_num]] {\n    individual n : pkt_num\n    relation p(V0:pkt_num)\n    property exists L. L:pkt_num >= n & (forall B. B:pkt_num >= n & p(B) -> p(L) & L <= B)\n}\n",
            "[fake_client.constr] {\n    property exists Y:fake_client. true\n}\n",
            "[tls.psk_key_exchange_modes.constr] {\n    property exists Y. tls.psk_key_exchange_modes.content(Y) = X0\n}\n",
            "[ind[vector[transport_parameter].domain]] {\n    relation p(V0:vector[transport_parameter].domain)\n    property [base] {\n        individual x : vector[transport_parameter].domain\n        property x <= 0 -> p(x)\n    }\n    property [step] {\n        individual x : vector[transport_parameter].domain\n        property p(x) -> p(x + 1)\n    }\n    property p(X)\n}\n",
            "[ack_delay_exponent.constr] {\n    property exists Y. ack_delay_exponent.exponent_8(Y) = X0\n}\n",
            "[ind[quic_packet.idx]] {\n    relation p(V0:quic_packet.idx)\n    property [base] {\n        individual x : quic_packet.idx\n        property x <= 0 -> p(x)\n    }\n    property [step] {\n        individual x : quic_packet.idx\n        property p(x) -> p(x + 1)\n    }\n    property p(X)\n}\n",
            "[lep[forged_protected_quic_packet.idx]] {\n    individual n : forged_protected_quic_packet.idx\n    relation p(V0:forged_protected_quic_packet.idx)\n    property exists L. L:forged_protected_quic_packet.idx >= n & (forall B. B:forged_protected_quic_packet.idx >= n & p(B) -> p(L) & L <= B)\n}\n",
            "[ind[clients.client.idx]] {\n    relation p(V0:clients.client.idx)\n    property [base] {\n        individual x : clients.client.idx\n        property x <= 0 -> p(x)\n    }\n    property [step] {\n        individual x : clients.client.idx\n        property p(x) -> p(x + 1)\n    }\n    property p(X)\n}\n",
            "[unknown_ignore.constr] {\n    property exists Y:unknown_ignore. true\n}\n",
            "[tls.unknown_message.constr] {\n    property exists Y. tls.unknown_message.mtype(Y) = X0 & tls.unknown_message.unknown_message_bytes(Y) = X1\n}\n",
            "[quic_packet_0rtt.arr.spec.extensionality] {\n    property [prop114] quic_packet_0rtt.arr.end(X) = quic_packet_0rtt.arr.end(Y) & (forall I. 0:quic_packet_0rtt.idx <= I & I < quic_packet_0rtt.arr.end(X) -> quic_packet_0rtt.arr.value(X,I) = quic_packet_0rtt.arr.value(Y,I))\n    property X:quic_packet_0rtt.arr = Y\n}\n",
            "[rec[vector[tls.psk_identity].domain]] {\n    type q\n    function base(V0:vector[tls.psk_identity].domain) : q\n    function step(V0:q,V1:vector[tls.psk_identity].domain) : q\n    function fun(V0:vector[tls.psk_identity].domain) : q\n    property fun(X) = (base(X) if (X <= 0) else step(fun(X - 1),X))\n}\n",
            "[disable_active_migration.constr] {\n    property exists Y:disable_active_migration. true\n}\n",
            "[enable_time_stamp.constr] {\n    property exists Y. enable_time_stamp.stream_pos_32(Y) = X0\n}\n",
            "[lep[vector[tls.cipher_suite].domain]] {\n    individual n : vector[tls.cipher_suite].domain\n    relation p(V0:vector[tls.cipher_suite].domain)\n    property exists L. L:vector[tls.cipher_suite].domain >= n & (forall B. B:vector[tls.cipher_suite].domain >= n & p(B) -> p(L) & L <= B)\n}\n",
            "[ind[servers.server.idx]] {\n    relation p(V0:servers.server.idx)\n    property [base] {\n        individual x : servers.server.idx\n        property x <= 0 -> p(x)\n    }\n    property [step] {\n        individual x : servers.server.idx\n        property p(x) -> p(x + 1)\n    }\n    property p(X)\n}\n",
            "[rec[clients.client.idx]] {\n    type q\n    function base(V0:clients.client.idx) : q\n    function step(V0:q,V1:clients.client.idx) : q\n    function fun(V0:clients.client.idx) : q\n    property fun(X) = (base(X) if (X <= 0) else step(fun(X - 1),X))\n}\n",
            "[rec[forged_quic_packet_vn.idx]] {\n    type q\n    function base(V0:forged_quic_packet_vn.idx) : q\n    function step(V0:q,V1:forged_quic_packet_vn.idx) : q\n    function fun(V0:forged_quic_packet_vn.idx) : q\n    property fun(X) = (base(X) if (X <= 0) else step(fun(X - 1),X))\n}\n",
            "[frame.retire_connection_id.constr] {\n    property exists Y. frame.retire_connection_id.seq_num(Y) = X0\n}\n",
            "[rec[quic_packet_vn.idx]] {\n    type q\n    function base(V0:quic_packet_vn.idx) : q\n    function step(V0:q,V1:quic_packet_vn.idx) : q\n    function fun(V0:quic_packet_vn.idx) : q\n    property fun(X) = (base(X) if (X <= 0) else step(fun(X - 1),X))\n}\n",
            "[quic_packet_vn.constr] {\n    property exists Y. quic_packet_vn.ptype(Y) = X0 & quic_packet_vn.pversion(Y) = X1 & quic_packet_vn.dst_cid(Y) = X2 & quic_packet_vn.src_cid(Y) = X3 & quic_packet_vn.supported_version(Y) = X4\n}\n",
            "[rec[bit]] {\n    type q\n    function base(V0:bit) : q\n    function step(V0:q,V1:bit) : q\n    function fun(V0:bit) : q\n    property fun(X) = (base(X) if (X <= 0) else step(fun(X - 1),X))\n}\n",
            "[lep[replayed_quic_packet_0rtt.idx]] {\n    individual n : replayed_quic_packet_0rtt.idx\n    relation p(V0:replayed_quic_packet_0rtt.idx)\n    property exists L. L:replayed_quic_packet_0rtt.idx >= n & (forall B. B:replayed_quic_packet_0rtt.idx >= n & p(B) -> p(L) & L <= B)\n}\n",
            "[ind[tls.cipher_suite]] {\n    relation p(V0:tls.cipher_suite)\n    property [base] {\n        individual x : tls.cipher_suite\n        property x <= 0 -> p(x)\n    }\n    property [step] {\n        individual x : tls.cipher_suite\n        property p(x) -> p(x + 1)\n    }\n    property p(X)\n}\n",
            "[mim_agent.constr] {\n    property exists Y:mim_agent. true\n}\n",
            "[lep[frame.idx]] {\n    individual n : frame.idx\n    relation p(V0:frame.idx)\n    property exists L. L:frame.idx >= n & (forall B. B:frame.idx >= n & p(B) -> p(L) & L <= B)\n}\n",
            "[lep[ipv6]] {\n    individual n : ipv6\n    relation p(V0:ipv6)\n    property exists L. L:ipv6 >= n & (forall B. B:ipv6 >= n & p(B) -> p(L) & L <= B)\n}\n",
            "[lep[servers.server.idx]] {\n    individual n : servers.server.idx\n    relation p(V0:servers.server.idx)\n    property exists L. L:servers.server.idx >= n & (forall B. B:servers.server.idx >= n & p(B) -> p(L) & L <= B)\n}\n",
            "[ind[jdx_s]] {\n    relation p(V0:jdx_s)\n    property [base] {\n        individual x : jdx_s\n        property x <= 0 -> p(x)\n    }\n    property [step] {\n        individual x : jdx_s\n        property p(x) -> p(x + 1)\n    }\n    property p(X)\n}\n",
            "[ind[forged_quic_packet_retry.idx]] {\n    relation p(V0:forged_quic_packet_retry.idx)\n    property [base] {\n        individual x : forged_quic_packet_retry.idx\n        property x <= 0 -> p(x)\n    }\n    property [step] {\n        individual x : forged_quic_packet_retry.idx\n        property p(x) -> p(x + 1)\n    }\n    property p(X)\n}\n",
            "[rec[replayed_quic_packet_0rtt.idx]] {\n    type q\n    function base(V0:replayed_quic_packet_0rtt.idx) : q\n    function step(V0:q,V1:replayed_quic_packet_0rtt.idx) : q\n    function fun(V0:replayed_quic_packet_0rtt.idx) : q\n    property fun(X) = (base(X) if (X <= 0) else step(fun(X - 1),X))\n}\n",
            "[lep[vector[tls.handshake].domain]] {\n    individual n : vector[tls.handshake].domain\n    relation p(V0:vector[tls.handshake].domain)\n    property exists L. L:vector[tls.handshake].domain >= n & (forall B. B:vector[tls.handshake].domain >= n & p(B) -> p(L) & L <= B)\n}\n",
            "[quic_packet_retry.constr] {\n    property exists Y. quic_packet_retry.ptype(Y) = X0 & quic_packet_retry.pversion(Y) = X1 & quic_packet_retry.dst_cid(Y) = X2 & quic_packet_retry.src_cid(Y) = X3 & quic_packet_retry.token(Y) = X4 & quic_packet_retry.integrity_token(Y) = X5\n}\n",
            "[lep[byte]] {\n    individual n : byte\n    relation p(V0:byte)\n    property exists L. L:byte >= n & (forall B. B:byte >= n & p(B) -> p(L) & L <= B)\n}\n",
            "[rec[tls.gmt]] {\n    type q\n    function base(V0:tls.gmt) : q\n    function step(V0:q,V1:tls.gmt) : q\n    function fun(V0:tls.gmt) : q\n    property fun(X) = (base(X) if (X <= 0) else step(fun(X - 1),X))\n}\n",
            "[lep[tls.gmt]] {\n    individual n : tls.gmt\n    relation p(V0:tls.gmt)\n    property exists L. L:tls.gmt >= n & (forall B. B:tls.gmt >= n & p(B) -> p(L) & L <= B)\n}\n",
            "[ind[replayed_quic_packet_0rtt.idx]] {\n    relation p(V0:replayed_quic_packet_0rtt.idx)\n    property [base] {\n        individual x : replayed_quic_packet_0rtt.idx\n        property x <= 0 -> p(x)\n    }\n    property [step] {\n        individual x : replayed_quic_packet_0rtt.idx\n        property p(x) -> p(x + 1)\n    }\n    property p(X)\n}\n",
            "[ind[idx_r]] {\n    relation p(V0:idx_r)\n    property [base] {\n        individual x : idx_r\n        property x <= 0 -> p(x)\n    }\n    property [step] {\n        individual x : idx_r\n        property p(x) -> p(x + 1)\n    }\n    property p(X)\n}\n",
            "[ind[byte]] {\n    relation p(V0:byte)\n    property [base] {\n        individual x : byte\n        property x <= 0 -> p(x)\n    }\n    property [step] {\n        individual x : byte\n        property p(x) -> p(x + 1)\n    }\n    property p(X)\n}\n",
            "[arr_pkt_num_s.spec.extensionality] {\n    property [prop114] arr_pkt_num_s.end(X) = arr_pkt_num_s.end(Y) & (forall I. 0:jdx_s <= I & I < arr_pkt_num_s.end(X) -> arr_pkt_num_s.value(X,I) = arr_pkt_num_s.value(Y,I))\n    property X:arr_pkt_num_s = Y\n}\n",
            "[quic_packet_coal_0rtt.retired_cids.spec.extensionality] {\n    property [prop114] quic_packet_coal_0rtt.retired_cids.end(X) = quic_packet_coal_0rtt.retired_cids.end(Y) & (forall I. 0:quic_packet_coal_0rtt.idx <= I & I < quic_packet_coal_0rtt.retired_cids.end(X) -> quic_packet_coal_0rtt.retired_cids.value(X,I) = quic_packet_coal_0rtt.retired_cids.value(Y,I))\n    property X:quic_packet_coal_0rtt.retired_cids = Y\n}\n",
            "[quic_packet.constr] {\n    property exists Y. quic_packet.ptype(Y) = X0 & quic_packet.pversion(Y) = X1 & quic_packet.dst_cid(Y) = X2 & quic_packet.src_cid(Y) = X3 & quic_packet.token(Y) = X4 & quic_packet.seq_num(Y) = X5 & quic_packet.payload(Y) = X6\n}\n",
            "[stateless_reset_token.constr] {\n    property exists Y. stateless_reset_token.data_8(Y) = X0\n}\n",
            "[tls.client_hello.constr] {\n    property exists Y. tls.client_hello.client_version(Y) = X0 & tls.client_hello.rand_info(Y) = X1 & tls.client_hello.session_id(Y) = X2 & tls.client_hello.cipher_suites(Y) = X3 & tls.client_hello.compression_methods(Y) = X4 & tls.client_hello.extensions(Y) = X5\n}\n",
            "[quic_packet_0rtt.retired_cids.spec.extensionality] {\n    property [prop114] quic_packet_0rtt.retired_cids.end(X) = quic_packet_0rtt.retired_cids.end(Y) & (forall I. 0:quic_packet_0rtt.idx <= I & I < quic_packet_0rtt.retired_cids.end(X) -> quic_packet_0rtt.retired_cids.value(X,I) = quic_packet_0rtt.retired_cids.value(Y,I))\n    property X:quic_packet_0rtt.retired_cids = Y\n}\n",
            "[version_information.constr] {\n    property exists Y. version_information.chosen_version(Y) = X0 & version_information.other_version(Y) = X1\n}\n",
            "[ind[ip.port]] {\n    relation p(V0:ip.port)\n    property [base] {\n        individual x : ip.port\n        property x <= 0 -> p(x)\n    }\n    property [step] {\n        individual x : ip.port\n        property p(x) -> p(x + 1)\n    }\n    property p(X)\n}\n",
            "[lep[ipv6.port]] {\n    individual n : ipv6.port\n    relation p(V0:ipv6.port)\n    property exists L. L:ipv6.port >= n & (forall B. B:ipv6.port >= n & p(B) -> p(L) & L <= B)\n}\n",
            "[rec[vector[tls.handshake].domain]] {\n    type q\n    function base(V0:vector[tls.handshake].domain) : q\n    function step(V0:q,V1:vector[tls.handshake].domain) : q\n    function fun(V0:vector[tls.handshake].domain) : q\n    property fun(X) = (base(X) if (X <= 0) else step(fun(X - 1),X))\n}\n",
            "[rec[quic_packet_0rtt.idx]] {\n    type q\n    function base(V0:quic_packet_0rtt.idx) : q\n    function step(V0:q,V1:quic_packet_0rtt.idx) : q\n    function fun(V0:quic_packet_0rtt.idx) : q\n    property fun(X) = (base(X) if (X <= 0) else step(fun(X - 1),X))\n}\n",
            "[lep[vector[tls.psk_identity].domain]] {\n    individual n : vector[tls.psk_identity].domain\n    relation p(V0:vector[tls.psk_identity].domain)\n    property exists L. L:vector[tls.psk_identity].domain >= n & (forall B. B:vector[tls.psk_identity].domain >= n & p(B) -> p(L) & L <= B)\n}\n",
            "[rec[pkt_num]] {\n    type q\n    function base(V0:pkt_num) : q\n    function step(V0:q,V1:pkt_num) : q\n    function fun(V0:pkt_num) : q\n    property fun(X) = (base(X) if (X <= 0) else step(fun(X - 1),X))\n}\n",
            "[initial_max_stream_id_uni.constr] {\n    property exists Y. initial_max_stream_id_uni.stream_id_16(Y) = X0\n}\n",
            "[quic_packet_coal_0rtt.arr.spec.extensionality] {\n    property [prop114] quic_packet_coal_0rtt.arr.end(X) = quic_packet_coal_0rtt.arr.end(Y) & (forall I. 0:quic_packet_coal_0rtt.idx <= I & I < quic_packet_coal_0rtt.arr.end(X) -> quic_packet_coal_0rtt.arr.value(X,I) = quic_packet_coal_0rtt.arr.value(Y,I))\n    property X:quic_packet_coal_0rtt.arr = Y\n}\n",
            "[ind[quic_packet_vn.idx]] {\n    relation p(V0:quic_packet_vn.idx)\n    property [base] {\n        individual x : quic_packet_vn.idx\n        property x <= 0 -> p(x)\n    }\n    property [step] {\n        individual x : quic_packet_vn.idx\n        property p(x) -> p(x + 1)\n    }\n    property p(X)\n}\n",
            "[frame.streams_blocked.constr] {\n    property exists Y. frame.streams_blocked.id(Y) = X0\n}\n",
            "[frame.connection_close.constr] {\n    property exists Y. frame.connection_close.err_code(Y) = X0 & frame.connection_close.frame_type(Y) = X1 & frame.connection_close.reason_phrase_length(Y) = X2 & frame.connection_close.reason_phrase(Y) = X3\n}\n",
            "[bytes.spec.extensionality] {\n    property [prop114] bytes.end(X) = bytes.end(Y) & (forall I. 0:idx <= I & I < bytes.end(X) -> bytes.value(X,I) = bytes.value(Y,I))\n    property X:bytes = Y\n}\n",
            "[frame.unknown_frame.constr] {\n    property exists Y:frame.unknown_frame. true\n}\n",
            "[rec[forged_quic_packet.idx]] {\n    type q\n    function base(V0:forged_quic_packet.idx) : q\n    function step(V0:q,V1:forged_quic_packet.idx) : q\n    function fun(V0:forged_quic_packet.idx) : q\n    property fun(X) = (base(X) if (X <= 0) else step(fun(X - 1),X))\n}\n",
            "[ind[prot.idx]] {\n    relation p(V0:prot.idx)\n    property [base] {\n        individual x : prot.idx\n        property x <= 0 -> p(x)\n    }\n    property [step] {\n        individual x : prot.idx\n        property p(x) -> p(x + 1)\n    }\n    property p(X)\n}\n",
            "[ind[frame.idx]] {\n    relation p(V0:frame.idx)\n    property [base] {\n        individual x : frame.idx\n        property x <= 0 -> p(x)\n    }\n    property [step] {\n        individual x : frame.idx\n        property p(x) -> p(x + 1)\n    }\n    property p(X)\n}\n",
            "[victim_agent.constr] {\n    property exists Y:victim_agent. true\n}\n",
            "[ind[bit]] {\n    relation p(V0:bit)\n    property [base] {\n        individual x : bit\n        property x <= 0 -> p(x)\n    }\n    property [step] {\n        individual x : bit\n        property p(x) -> p(x + 1)\n    }\n    property p(X)\n}\n",
            "[replayed_quic_packet_0rtt.arr.spec.extensionality] {\n    property [prop114] replayed_quic_packet_0rtt.arr.end(X) = replayed_quic_packet_0rtt.arr.end(Y) & (forall I. 0:replayed_quic_packet_0rtt.idx <= I & I < replayed_quic_packet_0rtt.arr.end(X) -> replayed_quic_packet_0rtt.arr.value(X,I) = replayed_quic_packet_0rtt.arr.value(Y,I))\n    property X:replayed_quic_packet_0rtt.arr = Y\n}\n",
            "[rec[idx]] {\n    type q\n    function base(V0:idx) : q\n    function step(V0:q,V1:idx) : q\n    function fun(V0:idx) : q\n    property fun(X) = (base(X) if (X <= 0) else step(fun(X - 1),X))\n}\n",
            "[rec[ipv6.port]] {\n    type q\n    function base(V0:ipv6.port) : q\n    function step(V0:q,V1:ipv6.port) : q\n    function fun(V0:ipv6.port) : q\n    property fun(X) = (base(X) if (X <= 0) else step(fun(X - 1),X))\n}\n",
            "[ind[stream_id]] {\n    relation p(V0:stream_id)\n    property [base] {\n        individual x : stream_id\n        property x <= 0 -> p(x)\n    }\n    property [step] {\n        individual x : stream_id\n        property p(x) -> p(x + 1)\n    }\n    property p(X)\n}\n",
            "[frame.path_challenge.constr] {\n    property exists Y. frame.path_challenge.data(Y) = X0\n}\n",
            "[second_client.constr] {\n    property exists Y:second_client. true\n}\n",
            "[rec[type_bits]] {\n    type q\n    function base(V0:type_bits) : q\n    function step(V0:q,V1:type_bits) : q\n    function fun(V0:type_bits) : q\n    property fun(X) = (base(X) if (X <= 0) else step(fun(X - 1),X))\n}\n",
            "[tls.random.constr] {\n    property exists Y. tls.gmt_unix_time(Y) = X0 & tls.random_bytes(Y) = X1\n}\n",
            "[clients.client.arr.spec.extensionality] {\n    property [prop114] clients.client.arr.end(X) = clients.client.arr.end(Y) & (forall I. 0:clients.client.idx <= I & I < clients.client.arr.end(X) -> clients.client.arr.value(X,I) = clients.client.arr.value(Y,I))\n    property X:clients.client.arr = Y\n}\n",
            "[frame.application_close.constr] {\n    property exists Y. frame.application_close.err_code(Y) = X0 & frame.application_close.reason_phrase_length(Y) = X1 & frame.application_close.reason_phrase(Y) = X2\n}\n",
            "[prot.header_info.constr] {\n    property exists Y. prot.hdr_long(Y) = X0 & prot.hdr_type(Y) = X1 & prot.dcid(Y) = X2 & prot.scid(Y) = X3 & prot.payload_length(Y) = X4 & prot.token_length(Y) = X5 & prot.payload_length_pos(Y) = X6 & prot.pkt_num_pos(Y) = X7\n}\n",
            "[rec[vector[tls.compression_method].domain]] {\n    type q\n    function base(V0:vector[tls.compression_method].domain) : q\n    function step(V0:q,V1:vector[tls.compression_method].domain) : q\n    function fun(V0:vector[tls.compression_method].domain) : q\n    property fun(X) = (base(X) if (X <= 0) else step(fun(X - 1),X))\n}\n",
            "[trans_params_struct.constr] {\n    property exists Y. original_destination_connection_id.is_set(Y) = X0 & original_destination_connection_id.value(Y) = X1 & initial_max_stream_data_bidi_local.is_set(Y) = X2 & initial_max_stream_data_bidi_local.value(Y) = X3 & initial_max_data.is_set(Y) = X4 & initial_max_data.value(Y) = X5 & initial_max_stream_id_bidi.is_set(Y) = X6 & initial_max_stream_id_bidi.value(Y) = X7 & max_idle_timeout.is_set(Y) = X8 & max_idle_timeout.value(Y) = X9 & preferred_address.is_set(Y) = X10 & preferred_address.value(Y) = X11 & max_packet_size.is_set(Y) = X12 & max_packet_size.value(Y) = X13 & stateless_reset_token.is_set(Y) = X14 & stateless_reset_token.value(Y) = X15 & ack_delay_exponent.is_set(Y) = X16 & ack_delay_exponent.value(Y) = X17 & initial_max_stream_id_uni.is_set(Y) = X18 & initial_max_stream_id_uni.value(Y) = X19 & disable_active_migration.is_set(Y) = X20 & disable_active_migration.value(Y) = X21 & initial_max_stream_data_bidi_remote.is_set(Y) = X22 & initial_max_stream_data_bidi_remote.value(Y) = X23 & initial_max_stream_data_uni.is_set(Y) = X24 & initial_max_stream_data_uni.value(Y) = X25 & max_ack_delay.is_set(Y) = X26 & max_ack_delay.value(Y) = X27 & active_connection_id_limit.is_set(Y) = X28 & active_connection_id_limit.value(Y) = X29 & initial_source_connection_id.is_set(Y) = X30 & initial_source_connection_id.value(Y) = X31 & retry_source_connection_id.is_set(Y) = X32 & retry_source_connection_id.value(Y) = X33 & loss_bits.is_set(Y) = X34 & loss_bits.value(Y) = X35 & grease_quic_bit.is_set(Y) = X36 & grease_quic_bit.value(Y) = X37 & enable_time_stamp.is_set(Y) = X38 & enable_time_stamp.value(Y) = X39 & min_ack_delay.is_set(Y) = X40 & min_ack_delay.value(Y) = X41 & version_information.is_set(Y) = X42 & version_information.value(Y) = X43 & unknown_ignore.is_set(Y) = X44 & unknown_ignore.value(Y) = X45 & unknown_transport_parameter.is_set(Y) = X46 & unknown_transport_parameter.value(Y) = X47\n}\n",
            "[client_server.constr] {\n    property exists Y:client_server. true\n}\n",
            "[client.constr] {\n    property exists Y:client. true\n}\n",
            "[frame.streams_blocked_bidi.constr] {\n    property exists Y. frame.streams_blocked_bidi.id(Y) = X0\n}\n",
            "[lep[bit]] {\n    individual n : bit\n    relation p(V0:bit)\n    property exists L. L:bit >= n & (forall B. B:bit >= n & p(B) -> p(L) & L <= B)\n}\n",
            "[lep[stream_id]] {\n    individual n : stream_id\n    relation p(V0:stream_id)\n    property exists L. L:stream_id >= n & (forall B. B:stream_id >= n & p(B) -> p(L) & L <= B)\n}\n",
            "[tls_extensions.spec.extensionality] {\n    property [prop114] tls_extensions.end(X) = tls_extensions.end(Y) & (forall I. 0:tls_extensions.domain <= I & I < tls_extensions.end(X) -> tls_extensions.value(X,I) = tls_extensions.value(Y,I))\n    property X:tls_extensions = Y\n}\n",
            "[frame.ack_ecn.range.constr] {\n    property exists Y. frame.ack_ecn.range.gap(Y) = X0 & frame.ack_ecn.range.ranges(Y) = X1\n}\n",
            "[tls.unknown_extension.constr] {\n    property exists Y. tls.unknown_extension.etype(Y) = X0 & tls.unknown_extension.content(Y) = X1\n}\n",
            "[lep[error_code]] {\n    individual n : error_code\n    relation p(V0:error_code)\n    property exists L. L:error_code >= n & (forall B. B:error_code >= n & p(B) -> p(L) & L <= B)\n}\n",
            "[rec[index]] {\n    type q\n    function base(V0:index) : q\n    function step(V0:q,V1:index) : q\n    function fun(V0:index) : q\n    property fun(X) = (base(X) if (X <= 0) else step(fun(X - 1),X))\n}\n",
            "[vector[tls.cipher_suite].spec.extensionality] {\n    property [prop114] vector[tls.cipher_suite].end(X) = vector[tls.cipher_suite].end(Y) & (forall I. 0:vector[tls.cipher_suite].domain <= I & I < vector[tls.cipher_suite].end(X) -> vector[tls.cipher_suite].value(X,I) = vector[tls.cipher_suite].value(Y,I))\n    property X:vector[tls.cipher_suite] = Y\n}\n",
            "[frame.ack.range.constr] {\n    property exists Y. frame.ack.range.gap(Y) = X0 & frame.ack.range.ranges(Y) = X1\n}\n",
            "[lep[vector[tls.compression_method].domain]] {\n    individual n : vector[tls.compression_method].domain\n    relation p(V0:vector[tls.compression_method].domain)\n    property exists L. L:vector[tls.compression_method].domain >= n & (forall B. B:vector[tls.compression_method].domain >= n & p(B) -> p(L) & L <= B)\n}\n",
            "[initial_source_connection_id.constr] {\n    property exists Y. initial_source_connection_id.scid(Y) = X0\n}\n",
            "[arr_streamid_s.spec.extensionality] {\n    property [prop114] arr_streamid_s.end(X) = arr_streamid_s.end(Y) & (forall I. 0:idx_s <= I & I < arr_streamid_s.end(X) -> arr_streamid_s.value(X,I) = arr_streamid_s.value(Y,I))\n    property X:arr_streamid_s = Y\n}\n",
            "[rec[tls.protocol_version]] {\n    type q\n    function base(V0:tls.protocol_version) : q\n    function step(V0:q,V1:tls.protocol_version) : q\n    function fun(V0:tls.protocol_version) : q\n    property fun(X) = (base(X) if (X <= 0) else step(fun(X - 1),X))\n}\n",
            "[ipv6.endpoint.constr] {\n    property exists Y. ipv6.endpoint.protocol(Y) = X0 & ipv6.endpoint.addr(Y) = X1 & ipv6.endpoint.port(Y) = X2\n}\n",
            "[tls.server_hello.constr] {\n    property exists Y. tls.server_hello.server_version(Y) = X0 & tls.server_hello.rand_info(Y) = X1 & tls.server_hello.session_id(Y) = X2 & tls.server_hello.the_cipher_suite(Y) = X3 & tls.server_hello.the_compression_method(Y) = X4 & tls.server_hello.extensions(Y) = X5\n}\n",
            "[tls.encrypted_extensions.constr] {\n    property exists Y. tls.encrypted_extensions.extensions(Y) = X0\n}\n",
            "[lep[tls.cipher_suite]] {\n    individual n : tls.cipher_suite\n    relation p(V0:tls.cipher_suite)\n    property exists L. L:tls.cipher_suite >= n & (forall B. B:tls.cipher_suite >= n & p(B) -> p(L) & L <= B)\n}\n",
            "[ind[stream_pos]] {\n    relation p(V0:stream_pos)\n    property [base] {\n        individual x : stream_pos\n        property x <= 0 -> p(x)\n    }\n    property [step] {\n        individual x : stream_pos\n        property p(x) -> p(x + 1)\n    }\n    property p(X)\n}\n",
            "[vector[tls.psk_identity].spec.extensionality] {\n    property [prop114] vector[tls.psk_identity].end(X) = vector[tls.psk_identity].end(Y) & (forall I. 0:vector[tls.psk_identity].domain <= I & I < vector[tls.psk_identity].end(X) -> vector[tls.psk_identity].value(X,I) = vector[tls.psk_identity].value(Y,I))\n    property X:vector[tls.psk_identity] = Y\n}\n",
            "[ind[version]] {\n    relation p(V0:version)\n    property [base] {\n        individual x : version\n        property x <= 0 -> p(x)\n    }\n    property [step] {\n        individual x : version\n        property p(x) -> p(x + 1)\n    }\n    property p(X)\n}\n",
            "[quic_packet_retry.retired_cids.spec.extensionality] {\n    property [prop114] quic_packet_retry.retired_cids.end(X) = quic_packet_retry.retired_cids.end(Y) & (forall I. 0:quic_packet_retry.idx <= I & I < quic_packet_retry.retired_cids.end(X) -> quic_packet_retry.retired_cids.value(X,I) = quic_packet_retry.retired_cids.value(Y,I))\n    property X:quic_packet_retry.retired_cids = Y\n}\n",
            "[lep[tls.message_type]] {\n    individual n : tls.message_type\n    relation p(V0:tls.message_type)\n    property exists L. L:tls.message_type >= n & (forall B. B:tls.message_type >= n & p(B) -> p(L) & L <= B)\n}\n",
            "[lep[clients.client.idx]] {\n    individual n : clients.client.idx\n    relation p(V0:clients.client.idx)\n    property exists L. L:clients.client.idx >= n & (forall B. B:clients.client.idx >= n & p(B) -> p(L) & L <= B)\n}\n",
            "[lep[quic_packet_coal_0rtt.idx]] {\n    individual n : quic_packet_coal_0rtt.idx\n    relation p(V0:quic_packet_coal_0rtt.idx)\n    property exists L. L:quic_packet_coal_0rtt.idx >= n & (forall B. B:quic_packet_coal_0rtt.idx >= n & p(B) -> p(L) & L <= B)\n}\n",
            "[tls.finished.constr] {\n    property exists Y. tls.finished.mtype(Y) = X0 & tls.finished.unknown_message_bytes(Y) = X1\n}\n",
            "[frame.max_data.constr] {\n    property exists Y. frame.max_data.pos(Y) = X0\n}\n",
            "[ind[cid_length]] {\n    relation p(V0:cid_length)\n    property [base] {\n        individual x : cid_length\n        property x <= 0 -> p(x)\n    }\n    property [step] {\n        individual x : cid_length\n        property p(x) -> p(x + 1)\n    }\n    property p(X)\n}\n",
            "[lep[cid_seq]] {\n    individual n : cid_seq\n    relation p(V0:cid_seq)\n    property exists L. L:cid_seq >= n & (forall B. B:cid_seq >= n & p(B) -> p(L) & L <= B)\n}\n",
            "[ind[tls.protocol_version]] {\n    relation p(V0:tls.protocol_version)\n    property [base] {\n        individual x : tls.protocol_version\n        property x <= 0 -> p(x)\n    }\n    property [step] {\n        individual x : tls.protocol_version\n        property p(x) -> p(x + 1)\n    }\n    property p(X)\n}\n",
            "[rec[frame.ack_ecn.range.idx]] {\n    type q\n    function base(V0:frame.ack_ecn.range.idx) : q\n    function step(V0:q,V1:frame.ack_ecn.range.idx) : q\n    function fun(V0:frame.ack_ecn.range.idx) : q\n    property fun(X) = (base(X) if (X <= 0) else step(fun(X - 1),X))\n}\n",
            "[frame.stop_sending.constr] {\n    property exists Y. frame.stop_sending.id(Y) = X0 & frame.stop_sending.err_code(Y) = X1\n}\n",
            "[ind[type_bits]] {\n    relation p(V0:type_bits)\n    property [base] {\n        individual x : type_bits\n        property x <= 0 -> p(x)\n    }\n    property [step] {\n        individual x : type_bits\n        property p(x) -> p(x + 1)\n    }\n    property p(X)\n}\n",
            "[second_server.constr] {\n    property exists Y:second_server. true\n}\n",
            "[lep[tls.protocol_version]] {\n    individual n : tls.protocol_version\n    relation p(V0:tls.protocol_version)\n    property exists L. L:tls.protocol_version >= n & (forall B. B:tls.protocol_version >= n & p(B) -> p(L) & L <= B)\n}\n",
            "[clients.constr] {\n    property exists Y:clients. true\n}\n",
            "[tls_hand_extensions.spec.extensionality] {\n    property [prop114] tls_hand_extensions.end(X) = tls_hand_extensions.end(Y) & (forall I. 0:tls_hand_extensions.domain <= I & I < tls_hand_extensions.end(X) -> tls_hand_extensions.value(X,I) = tls_hand_extensions.value(Y,I))\n    property X:tls_hand_extensions = Y\n}\n",
            "[loss_bits.constr] {\n    property exists Y. loss_bits.unknown(Y) = X0\n}\n",
            "[mim_client_target.constr] {\n    property exists Y:mim_client_target. true\n}\n",
            "[tls.change_cipher_spec.constr] {\n    property exists Y. tls.change_cipher_spec.version(Y) = X0 & tls.change_cipher_spec.content(Y) = X1\n}\n",
            "[frame.ack.constr] {\n    property exists Y. frame.ack.largest_acked(Y) = X0 & frame.ack.ack_delay(Y) = X1 & frame.ack.ack_ranges(Y) = X2\n}\n",
            "[ip_endpoints.spec.extensionality] {\n    property [prop114] ip_endpoints.end(X) = ip_endpoints.end(Y) & (forall I. 0:index <= I & I < ip_endpoints.end(X) -> ip_endpoints.value(X,I) = ip_endpoints.value(Y,I))\n    property X:ip_endpoints = Y\n}\n",
            "[rec[tls.message_type]] {\n    type q\n    function base(V0:tls.message_type) : q\n    function step(V0:q,V1:tls.message_type) : q\n    function fun(V0:tls.message_type) : q\n    property fun(X) = (base(X) if (X <= 0) else step(fun(X - 1),X))\n}\n",
            "[tls.pre_shared_key_client.constr] {\n    property exists Y. tls.pre_shared_key_client.psk_identities(Y) = X0 & tls.pre_shared_key_client.psk_binder(Y) = X1\n}\n",
            "[forged_protected_quic_packet.constr] {\n    property exists Y. forged_protected_quic_packet.ptype(Y) = X0 & forged_protected_quic_packet.pversion(Y) = X1 & forged_protected_quic_packet.dst_cid(Y) = X2 & forged_protected_quic_packet.src_cid(Y) = X3 & forged_protected_quic_packet.token(Y) = X4 & forged_protected_quic_packet.protected_payload(Y) = X5\n}\n",
            "[frame.ack.range.arr.spec.extensionality] {\n    property [prop114] frame.ack.range.arr.end(X) = frame.ack.range.arr.end(Y) & (forall I. 0:frame.ack.range.idx <= I & I < frame.ack.range.arr.end(X) -> frame.ack.range.arr.value(X,I) = frame.ack.range.arr.value(Y,I))\n    property X:frame.ack.range.arr = Y\n}\n",
            "[replayed_quic_packet_0rtt.constr] {\n    property exists Y. replayed_quic_packet_0rtt.ptype(Y) = X0 & replayed_quic_packet_0rtt.pversion(Y) = X1 & replayed_quic_packet_0rtt.dst_cid(Y) = X2 & replayed_quic_packet_0rtt.src_cid(Y) = X3 & replayed_quic_packet_0rtt.seq_num(Y) = X4 & replayed_quic_packet_0rtt.payload(Y) = X5\n}\n",
            "[lep[vector[tls.extension].domain]] {\n    individual n : vector[tls.extension].domain\n    relation p(V0:vector[tls.extension].domain)\n    property exists L. L:vector[tls.extension].domain >= n & (forall B. B:vector[tls.extension].domain >= n & p(B) -> p(L) & L <= B)\n}\n",
            "[rec[port]] {\n    type q\n    function base(V0:port) : q\n    function step(V0:q,V1:port) : q\n    function fun(V0:port) : q\n    property fun(X) = (base(X) if (X <= 0) else step(fun(X - 1),X))\n}\n",
            "[rec[tls.handshakes.domain]] {\n    type q\n    function base(V0:tls.handshakes.domain) : q\n    function step(V0:q,V1:tls.handshakes.domain) : q\n    function fun(V0:tls.handshakes.domain) : q\n    property fun(X) = (base(X) if (X <= 0) else step(fun(X - 1),X))\n}\n",
            "[frame.data_blocked.constr] {\n    property exists Y. frame.data_blocked.pos(Y) = X0\n}\n",
            "[forged_quic_packet.arr.spec.extensionality] {\n    property [prop114] forged_quic_packet.arr.end(X) = forged_quic_packet.arr.end(Y) & (forall I. 0:forged_quic_packet.idx <= I & I < forged_quic_packet.arr.end(X) -> forged_quic_packet.arr.value(X,I) = forged_quic_packet.arr.value(Y,I))\n    property X:forged_quic_packet.arr = Y\n}\n",
            "[ind[reset_token]] {\n    relation p(V0:reset_token)\n    property [base] {\n        individual x : reset_token\n        property x <= 0 -> p(x)\n    }\n    property [step] {\n        individual x : reset_token\n        property p(x) -> p(x + 1)\n    }\n    property p(X)\n}\n",
            "[ind[ipv6]] {\n    relation p(V0:ipv6)\n    property [base] {\n        individual x : ipv6\n        property x <= 0 -> p(x)\n    }\n    property [step] {\n        individual x : ipv6\n        property p(x) -> p(x + 1)\n    }\n    property p(X)\n}\n",
            "[lep[ip.port]] {\n    individual n : ip.port\n    relation p(V0:ip.port)\n    property exists L. L:ip.port >= n & (forall B. B:ip.port >= n & p(B) -> p(L) & L <= B)\n}\n",
            "[rec[forged_quic_packet_retry.idx]] {\n    type q\n    function base(V0:forged_quic_packet_retry.idx) : q\n    function step(V0:q,V1:forged_quic_packet_retry.idx) : q\n    function fun(V0:forged_quic_packet_retry.idx) : q\n    property fun(X) = (base(X) if (X <= 0) else step(fun(X - 1),X))\n}\n",
            "[frame.crypto.constr] {\n    property exists Y. frame.crypto.offset(Y) = X0 & frame.crypto.length(Y) = X1 & frame.crypto.data(Y) = X2\n}\n",
            "[ind[vector[tls.handshake].domain]] {\n    relation p(V0:vector[tls.handshake].domain)\n    property [base] {\n        individual x : vector[tls.handshake].domain\n        property x <= 0 -> p(x)\n    }\n    property [step] {\n        individual x : vector[tls.handshake].domain\n        property p(x) -> p(x + 1)\n    }\n    property p(X)\n}\n",
            "[original_destination_connection_id.constr] {\n    property exists Y. original_destination_connection_id.dcid(Y) = X0\n}\n",
            "[rec[vector[tls.extension].domain]] {\n    type q\n    function base(V0:vector[tls.extension].domain) : q\n    function step(V0:q,V1:vector[tls.extension].domain) : q\n    function fun(V0:vector[tls.extension].domain) : q\n    property fun(X) = (base(X) if (X <= 0) else step(fun(X - 1),X))\n}\n",
            "[vector[tls.compression_method].spec.extensionality] {\n    property [prop114] vector[tls.compression_method].end(X) = vector[tls.compression_method].end(Y) & (forall I. 0:vector[tls.compression_method].domain <= I & I < vector[tls.compression_method].end(X) -> vector[tls.compression_method].value(X,I) = vector[tls.compression_method].value(Y,I))\n    property X:vector[tls.compression_method] = Y\n}\n",
            "[ind[vector[tls.extension].domain]] {\n    relation p(V0:vector[tls.extension].domain)\n    property [base] {\n        individual x : vector[tls.extension].domain\n        property x <= 0 -> p(x)\n    }\n    property [step] {\n        individual x : vector[tls.extension].domain\n        property p(x) -> p(x + 1)\n    }\n    property p(X)\n}\n",
            "[tls.handshake_record.constr] {\n    property exists Y. tls.handshake_record.version(Y) = X0 & tls.handshake_record.fragment(Y) = X1\n}\n",
            "[lep[forged_quic_packet_retry.idx]] {\n    individual n : forged_quic_packet_retry.idx\n    relation p(V0:forged_quic_packet_retry.idx)\n    property exists L. L:forged_quic_packet_retry.idx >= n & (forall B. B:forged_quic_packet_retry.idx >= n & p(B) -> p(L) & L <= B)\n}\n",
            "[vector[transport_parameter].spec.extensionality] {\n    property [prop114] vector[transport_parameter].end(X) = vector[transport_parameter].end(Y) & (forall I. 0:vector[transport_parameter].domain <= I & I < vector[transport_parameter].end(X) -> vector[transport_parameter].value(X,I) = vector[transport_parameter].value(Y,I))\n    property X:vector[transport_parameter] = Y\n}\n",
            "[ind[vector[tls.cipher_suite].domain]] {\n    relation p(V0:vector[tls.cipher_suite].domain)\n    property [base] {\n        individual x : vector[tls.cipher_suite].domain\n        property x <= 0 -> p(x)\n    }\n    property [step] {\n        individual x : vector[tls.cipher_suite].domain\n        property p(x) -> p(x + 1)\n    }\n    property p(X)\n}\n",
            "[ind[jdx_r]] {\n    relation p(V0:jdx_r)\n    property [base] {\n        individual x : jdx_r\n        property x <= 0 -> p(x)\n    }\n    property [step] {\n        individual x : jdx_r\n        property p(x) -> p(x + 1)\n    }\n    property p(X)\n}\n",
            "[rec[idx_s]] {\n    type q\n    function base(V0:idx_s) : q\n    function step(V0:q,V1:idx_s) : q\n    function fun(V0:idx_s) : q\n    property fun(X) = (base(X) if (X <= 0) else step(fun(X - 1),X))\n}\n",
            "[lep[forged_quic_packet.idx]] {\n    individual n : forged_quic_packet.idx\n    relation p(V0:forged_quic_packet.idx)\n    property exists L. L:forged_quic_packet.idx >= n & (forall B. B:forged_quic_packet.idx >= n & p(B) -> p(L) & L <= B)\n}\n",
            "[lep[quic_packet_0rtt.idx]] {\n    individual n : quic_packet_0rtt.idx\n    relation p(V0:quic_packet_0rtt.idx)\n    property exists L. L:quic_packet_0rtt.idx >= n & (forall B. B:quic_packet_0rtt.idx >= n & p(B) -> p(L) & L <= B)\n}\n",
            "[lep[prot.idx]] {\n    individual n : prot.idx\n    relation p(V0:prot.idx)\n    property exists L. L:prot.idx >= n & (forall B. B:prot.idx >= n & p(B) -> p(L) & L <= B)\n}\n",
            "[frame.max_streams_bidi.constr] {\n    property exists Y. frame.max_streams_bidi.id(Y) = X0\n}\n",
            "[tls.early_data.constr] {\n    property exists Y. tls.early_data.max_early_data_size(Y) = X0\n}\n",
            "[ind[error_code]] {\n    relation p(V0:error_code)\n    property [base] {\n        individual x : error_code\n        property x <= 0 -> p(x)\n    }\n    property [step] {\n        individual x : error_code\n        property p(x) -> p(x + 1)\n    }\n    property p(X)\n}\n",
            "[lep[quic_packet.idx]] {\n    individual n : quic_packet.idx\n    relation p(V0:quic_packet.idx)\n    property exists L. L:quic_packet.idx >= n & (forall B. B:quic_packet.idx >= n & p(B) -> p(L) & L <= B)\n}\n",
            "[ind[idx_s]] {\n    relation p(V0:idx_s)\n    property [base] {\n        individual x : idx_s\n        property x <= 0 -> p(x)\n    }\n    property [step] {\n        individual x : idx_s\n        property p(x) -> p(x + 1)\n    }\n    property p(X)\n}\n",
            "[lep[type_bits]] {\n    individual n : type_bits\n    relation p(V0:type_bits)\n    property exists L. L:type_bits >= n & (forall B. B:type_bits >= n & p(B) -> p(L) & L <= B)\n}\n",
            "[quic_packet_vn.arr.spec.extensionality] {\n    property [prop114] quic_packet_vn.arr.end(X) = quic_packet_vn.arr.end(Y) & (forall I. 0:quic_packet_vn.idx <= I & I < quic_packet_vn.arr.end(X) -> quic_packet_vn.arr.value(X,I) = quic_packet_vn.arr.value(Y,I))\n    property X:quic_packet_vn.arr = Y\n}\n",
            "[frame.arr.spec.extensionality] {\n    property [prop114] frame.arr.end(X) = frame.arr.end(Y) & (forall I. 0:frame.idx <= I & I < frame.arr.end(X) -> frame.arr.value(X,I) = frame.arr.value(Y,I))\n    property X:frame.arr = Y\n}\n",
            "[lep[idx_r]] {\n    individual n : idx_r\n    relation p(V0:idx_r)\n    property exists L. L:idx_r >= n & (forall B. B:idx_r >= n & p(B) -> p(L) & L <= B)\n}\n",
            "[servers.server.constr] {\n    property exists Y. servers.server.ep(Y) = X0 & servers.server.tls_id(Y) = X1 & servers.server.enc_level(Y) = X2\n}\n",
            "[tls.handshake_parser.result.constr] {\n    property exists Y. tls.handshake_parser.pos(Y) = X0 & tls.handshake_parser.value(Y) = X1\n}\n",
            "[frame.rst_stream.constr] {\n    property exists Y. frame.rst_stream.id(Y) = X0 & frame.rst_stream.err_code(Y) = X1 & frame.rst_stream.final_offset(Y) = X2\n}\n",
            "[rec[ipv4]] {\n    type q\n    function base(V0:ipv4) : q\n    function step(V0:q,V1:ipv4) : q\n    function fun(V0:ipv4) : q\n    property fun(X) = (base(X) if (X <= 0) else step(fun(X - 1),X))\n}\n",
            "[ind[tls.handshakes.domain]] {\n    relation p(V0:tls.handshakes.domain)\n    property [base] {\n        individual x : tls.handshakes.domain\n        property x <= 0 -> p(x)\n    }\n    property [step] {\n        individual x : tls.handshakes.domain\n        property p(x) -> p(x + 1)\n    }\n    property p(X)\n}\n",
            "[lep[tls.extension_type]] {\n    individual n : tls.extension_type\n    relation p(V0:tls.extension_type)\n    property exists L. L:tls.extension_type >= n & (forall B. B:tls.extension_type >= n & p(B) -> p(L) & L <= B)\n}\n",
            "[ind[vector[tls.compression_method].domain]] {\n    relation p(V0:vector[tls.compression_method].domain)\n    property [base] {\n        individual x : vector[tls.compression_method].domain\n        property x <= 0 -> p(x)\n    }\n    property [step] {\n        individual x : vector[tls.compression_method].domain\n        property p(x) -> p(x + 1)\n    }\n    property p(X)\n}\n",
            "[rec[vector[tls.cipher_suite].domain]] {\n    type q\n    function base(V0:vector[tls.cipher_suite].domain) : q\n    function step(V0:q,V1:vector[tls.cipher_suite].domain) : q\n    function fun(V0:vector[tls.cipher_suite].domain) : q\n    property fun(X) = (base(X) if (X <= 0) else step(fun(X - 1),X))\n}\n",
            "[vector[tls.extension].spec.extensionality] {\n    property [prop114] vector[tls.extension].end(X) = vector[tls.extension].end(Y) & (forall I. 0:vector[tls.extension].domain <= I & I < vector[tls.extension].end(X) -> vector[tls.extension].value(X,I) = vector[tls.extension].value(Y,I))\n    property X:vector[tls.extension] = Y\n}\n",
            "[initial_max_stream_data_bidi_local.constr] {\n    property exists Y. initial_max_stream_data_bidi_local.stream_pos_32(Y) = X0\n}\n",
            "[rec[ip.port]] {\n    type q\n    function base(V0:ip.port) : q\n    function step(V0:q,V1:ip.port) : q\n    function fun(V0:ip.port) : q\n    property fun(X) = (base(X) if (X <= 0) else step(fun(X - 1),X))\n}\n",
            "[rec[vector[transport_parameter].domain]] {\n    type q\n    function base(V0:vector[transport_parameter].domain) : q\n    function step(V0:q,V1:vector[transport_parameter].domain) : q\n    function fun(V0:vector[transport_parameter].domain) : q\n    property fun(X) = (base(X) if (X <= 0) else step(fun(X - 1),X))\n}\n",
            "[ind[tls.gmt]] {\n    relation p(V0:tls.gmt)\n    property [base] {\n        individual x : tls.gmt\n        property x <= 0 -> p(x)\n    }\n    property [step] {\n        individual x : tls.gmt\n        property p(x) -> p(x + 1)\n    }\n    property p(X)\n}\n",
            "[lep[jdx_s]] {\n    individual n : jdx_s\n    relation p(V0:jdx_s)\n    property exists L. L:jdx_s >= n & (forall B. B:jdx_s >= n & p(B) -> p(L) & L <= B)\n}\n",
            "[tls.application_data_record.constr] {\n    property exists Y. tls.application_data_record.version(Y) = X0 & tls.application_data_record.content(Y) = X1\n}\n",
            "[rec[stream_pos]] {\n    type q\n    function base(V0:stream_pos) : q\n    function step(V0:q,V1:stream_pos) : q\n    function fun(V0:stream_pos) : q\n    property fun(X) = (base(X) if (X <= 0) else step(fun(X - 1),X))\n}\n",
            "[frame.ping.constr] {\n    property exists Y:frame.ping. true\n}\n",
            "[servers.constr] {\n    property exists Y:servers. true\n}\n",
            "[rec[reset_token]] {\n    type q\n    function base(V0:reset_token) : q\n    function step(V0:q,V1:reset_token) : q\n    function fun(V0:reset_token) : q\n    property fun(X) = (base(X) if (X <= 0) else step(fun(X - 1),X))\n}\n",
            "[ind[tls.message_type]] {\n    relation p(V0:tls.message_type)\n    property [base] {\n        individual x : tls.message_type\n        property x <= 0 -> p(x)\n    }\n    property [step] {\n        individual x : tls.message_type\n        property p(x) -> p(x + 1)\n    }\n    property p(X)\n}\n",
            "[initial_max_stream_data_bidi_remote.constr] {\n    property exists Y. initial_max_stream_data_bidi_remote.stream_pos_32(Y) = X0\n}\n",
            "[ind[tls.extension_type]] {\n    relation p(V0:tls.extension_type)\n    property [base] {\n        individual x : tls.extension_type\n        property x <= 0 -> p(x)\n    }\n    property [step] {\n        individual x : tls.extension_type\n        property p(x) -> p(x + 1)\n    }\n    property p(X)\n}\n",
            "[ind[idx]] {\n    relation p(V0:idx)\n    property [base] {\n        individual x : idx\n        property x <= 0 -> p(x)\n    }\n    property [step] {\n        individual x : idx\n        property p(x) -> p(x + 1)\n    }\n    property p(X)\n}\n",
            "[lep[cid_length]] {\n    individual n : cid_length\n    relation p(V0:cid_length)\n    property exists L. L:cid_length >= n & (forall B. B:cid_length >= n & p(B) -> p(L) & L <= B)\n}\n",
            "[rec[quic_packet.idx]] {\n    type q\n    function base(V0:quic_packet.idx) : q\n    function step(V0:q,V1:quic_packet.idx) : q\n    function fun(V0:quic_packet.idx) : q\n    property fun(X) = (base(X) if (X <= 0) else step(fun(X - 1),X))\n}\n",
            "[ind[forged_protected_quic_packet.idx]] {\n    relation p(V0:forged_protected_quic_packet.idx)\n    property [base] {\n        individual x : forged_protected_quic_packet.idx\n        property x <= 0 -> p(x)\n    }\n    property [step] {\n        individual x : forged_protected_quic_packet.idx\n        property p(x) -> p(x + 1)\n    }\n    property p(X)\n}\n",
            "[quic_transport_parameters.constr] {\n    property exists Y. quic_transport_parameters.transport_parameters(Y) = X0\n}\n",
            "[quic_packet_coal_0rtt.constr] {\n    property exists Y. quic_packet_coal_0rtt.ptype_i(Y) = X0 & quic_packet_coal_0rtt.pversion_i(Y) = X1 & quic_packet_coal_0rtt.dst_cid_i(Y) = X2 & quic_packet_coal_0rtt.src_cid_i(Y) = X3 & quic_packet_coal_0rtt.token_i(Y) = X4 & quic_packet_coal_0rtt.seq_num_i(Y) = X5 & quic_packet_coal_0rtt.payload_i(Y) = X6 & quic_packet_coal_0rtt.ptype(Y) = X7 & quic_packet_coal_0rtt.pversion(Y) = X8 & quic_packet_coal_0rtt.dst_cid(Y) = X9 & quic_packet_coal_0rtt.src_cid(Y) = X10 & quic_packet_coal_0rtt.seq_num(Y) = X11 & quic_packet_coal_0rtt.payload(Y) = X12\n}\n",
            "[ind[vector[tls.psk_identity].domain]] {\n    relation p(V0:vector[tls.psk_identity].domain)\n    property [base] {\n        individual x : vector[tls.psk_identity].domain\n        property x <= 0 -> p(x)\n    }\n    property [step] {\n        individual x : vector[tls.psk_identity].domain\n        property p(x) -> p(x + 1)\n    }\n    property p(X)\n}\n",
            "[forged_protected_quic_packet.arr.spec.extensionality] {\n    property [prop114] forged_protected_quic_packet.arr.end(X) = forged_protected_quic_packet.arr.end(Y) & (forall I. 0:forged_protected_quic_packet.idx <= I & I < forged_protected_quic_packet.arr.end(X) -> forged_protected_quic_packet.arr.value(X,I) = forged_protected_quic_packet.arr.value(Y,I))\n    property X:forged_protected_quic_packet.arr = Y\n}\n",
            "[tls.pre_shared_key_server.constr] {\n    property exists Y. tls.pre_shared_key_server.selected_identity(Y) = X0\n}\n",
            "[ind[cid_seq]] {\n    relation p(V0:cid_seq)\n    property [base] {\n        individual x : cid_seq\n        property x <= 0 -> p(x)\n    }\n    property [step] {\n        individual x : cid_seq\n        property p(x) -> p(x + 1)\n    }\n    property p(X)\n}\n",
            "[replayed_quic_packet_0rtt.retired_cids.spec.extensionality] {\n    property [prop114] replayed_quic_packet_0rtt.retired_cids.end(X) = replayed_quic_packet_0rtt.retired_cids.end(Y) & (forall I. 0:replayed_quic_packet_0rtt.idx <= I & I < replayed_quic_packet_0rtt.retired_cids.end(X) -> replayed_quic_packet_0rtt.retired_cids.value(X,I) = replayed_quic_packet_0rtt.retired_cids.value(Y,I))\n    property X:replayed_quic_packet_0rtt.retired_cids = Y\n}\n",
            "[ind[port]] {\n    relation p(V0:port)\n    property [base] {\n        individual x : port\n        property x <= 0 -> p(x)\n    }\n    property [step] {\n        individual x : port\n        property p(x) -> p(x + 1)\n    }\n    property p(X)\n}\n",
            "[frame.ack_ecn.range.arr.spec.extensionality] {\n    property [prop114] frame.ack_ecn.range.arr.end(X) = frame.ack_ecn.range.arr.end(Y) & (forall I. 0:frame.ack_ecn.range.idx <= I & I < frame.ack_ecn.range.arr.end(X) -> frame.ack_ecn.range.arr.value(X,I) = frame.ack_ecn.range.arr.value(Y,I))\n    property X:frame.ack_ecn.range.arr = Y\n}\n",
            "[ind[forged_quic_packet_vn.idx]] {\n    relation p(V0:forged_quic_packet_vn.idx)\n    property [base] {\n        individual x : forged_quic_packet_vn.idx\n        property x <= 0 -> p(x)\n    }\n    property [step] {\n        individual x : forged_quic_packet_vn.idx\n        property p(x) -> p(x + 1)\n    }\n    property p(X)\n}\n",
            "[arr_streamid_r.spec.extensionality] {\n    property [prop114] arr_streamid_r.end(X) = arr_streamid_r.end(Y) & (forall I. 0:idx_r <= I & I < arr_streamid_r.end(X) -> arr_streamid_r.value(X,I) = arr_streamid_r.value(Y,I))\n    property X:arr_streamid_r = Y\n}\n",
            "[cids.spec.extensionality] {\n    property [prop114] cids.end(X) = cids.end(Y) & (forall I. 0:index <= I & I < cids.end(X) -> cids.value(X,I) = cids.value(Y,I))\n    property X:cids = Y\n}\n",
            "[initial_max_stream_data_uni.constr] {\n    property exists Y. initial_max_stream_data_uni.stream_pos_32(Y) = X0\n}\n",
            "[forged_protected_quic_packet.retired_cids.spec.extensionality] {\n    property [prop114] forged_protected_quic_packet.retired_cids.end(X) = forged_protected_quic_packet.retired_cids.end(Y) & (forall I. 0:forged_protected_quic_packet.idx <= I & I < forged_protected_quic_packet.retired_cids.end(X) -> forged_protected_quic_packet.retired_cids.value(X,I) = forged_protected_quic_packet.retired_cids.value(Y,I))\n    property X:forged_protected_quic_packet.retired_cids = Y\n}\n",
            "[frame.path_response.constr] {\n    property exists Y. frame.path_response.data(Y) = X0\n}\n",
            "[versions_bv.spec.extensionality] {\n    property [prop114] versions_bv.end(X) = versions_bv.end(Y) & (forall I. 0:index <= I & I < versions_bv.end(X) -> versions_bv.value(X,I) = versions_bv.value(Y,I))\n    property X:versions_bv = Y\n}\n",
            "[lep[ipv4]] {\n    individual n : ipv4\n    relation p(V0:ipv4)\n    property exists L. L:ipv4 >= n & (forall B. B:ipv4 >= n & p(B) -> p(L) & L <= B)\n}\n",
            "[lep[frame.ack_ecn.range.idx]] {\n    individual n : frame.ack_ecn.range.idx\n    relation p(V0:frame.ack_ecn.range.idx)\n    property exists L. L:frame.ack_ecn.range.idx >= n & (forall B. B:frame.ack_ecn.range.idx >= n & p(B) -> p(L) & L <= B)\n}\n",
            "[rec[cid_length]] {\n    type q\n    function base(V0:cid_length) : q\n    function step(V0:q,V1:cid_length) : q\n    function fun(V0:cid_length) : q\n    property fun(X) = (base(X) if (X <= 0) else step(fun(X - 1),X))\n}\n",
            "[frame.max_stream_data.constr] {\n    property exists Y. frame.max_stream_data.id(Y) = X0 & frame.max_stream_data.pos(Y) = X1\n}\n",
            "[ind[ipv4]] {\n    relation p(V0:ipv4)\n    property [base] {\n        individual x : ipv4\n        property x <= 0 -> p(x)\n    }\n    property [step] {\n        individual x : ipv4\n        property p(x) -> p(x + 1)\n    }\n    property p(X)\n}\n",
            "[quic_packet_retry.arr.spec.extensionality] {\n    property [prop114] quic_packet_retry.arr.end(X) = quic_packet_retry.arr.end(Y) & (forall I. 0:quic_packet_retry.idx <= I & I < quic_packet_retry.arr.end(X) -> quic_packet_retry.arr.value(X,I) = quic_packet_retry.arr.value(Y,I))\n    property X:quic_packet_retry.arr = Y\n}\n",
            "[rec[frame.ack.range.idx]] {\n    type q\n    function base(V0:frame.ack.range.idx) : q\n    function step(V0:q,V1:frame.ack.range.idx) : q\n    function fun(V0:frame.ack.range.idx) : q\n    property fun(X) = (base(X) if (X <= 0) else step(fun(X - 1),X))\n}\n",
            "[rec[tls.cipher_suite]] {\n    type q\n    function base(V0:tls.cipher_suite) : q\n    function step(V0:q,V1:tls.cipher_suite) : q\n    function fun(V0:tls.cipher_suite) : q\n    property fun(X) = (base(X) if (X <= 0) else step(fun(X - 1),X))\n}\n",
            "[rec[forged_protected_quic_packet.idx]] {\n    type q\n    function base(V0:forged_protected_quic_packet.idx) : q\n    function step(V0:q,V1:forged_protected_quic_packet.idx) : q\n    function fun(V0:forged_protected_quic_packet.idx) : q\n    property fun(X) = (base(X) if (X <= 0) else step(fun(X - 1),X))\n}\n",
            "[rec[tls_extensions.domain]] {\n    type q\n    function base(V0:tls_extensions.domain) : q\n    function step(V0:q,V1:tls_extensions.domain) : q\n    function fun(V0:tls_extensions.domain) : q\n    property fun(X) = (base(X) if (X <= 0) else step(fun(X - 1),X))\n}\n",
            "[frame.ack_ecn.constr] {\n    property exists Y. frame.ack_ecn.largest_acked(Y) = X0 & frame.ack_ecn.ack_delay(Y) = X1 & frame.ack_ecn.ack_ranges(Y) = X2\n}\n",
            "[frame.stream.constr] {\n    property exists Y. frame.stream.off(Y) = X0 & frame.stream.len(Y) = X1 & frame.stream.fin(Y) = X2 & frame.stream.id(Y) = X3 & frame.stream.offset(Y) = X4 & frame.stream.length(Y) = X5 & frame.stream.data(Y) = X6\n}\n",
            "[lep[idx_s]] {\n    individual n : idx_s\n    relation p(V0:idx_s)\n    property exists L. L:idx_s >= n & (forall B. B:idx_s >= n & p(B) -> p(L) & L <= B)\n}\n",
            "[max_idle_timeout.constr] {\n    property exists Y. max_idle_timeout.seconds_16(Y) = X0\n}\n",
            "[ind[ipv6.port]] {\n    relation p(V0:ipv6.port)\n    property [base] {\n        individual x : ipv6.port\n        property x <= 0 -> p(x)\n    }\n    property [step] {\n        individual x : ipv6.port\n        property p(x) -> p(x + 1)\n    }\n    property p(X)\n}\n",
            "[ind[quic_packet_retry.idx]] {\n    relation p(V0:quic_packet_retry.idx)\n    property [base] {\n        individual x : quic_packet_retry.idx\n        property x <= 0 -> p(x)\n    }\n    property [step] {\n        individual x : quic_packet_retry.idx\n        property p(x) -> p(x + 1)\n    }\n    property p(X)\n}\n",
            "[rec[tls_hand_extensions.domain]] {\n    type q\n    function base(V0:tls_hand_extensions.domain) : q\n    function step(V0:q,V1:tls_hand_extensions.domain) : q\n    function fun(V0:tls_hand_extensions.domain) : q\n    property fun(X) = (base(X) if (X <= 0) else step(fun(X - 1),X))\n}\n",
            "[rec[stream_id]] {\n    type q\n    function base(V0:stream_id) : q\n    function step(V0:q,V1:stream_id) : q\n    function fun(V0:stream_id) : q\n    property fun(X) = (base(X) if (X <= 0) else step(fun(X - 1),X))\n}\n",
            "[clients.client.constr] {\n    property exists Y. clients.client.ep(Y) = X0 & clients.client.tls_id(Y) = X1 & clients.client.enc_level(Y) = X2\n}\n",
            "[rec[version]] {\n    type q\n    function base(V0:version) : q\n    function step(V0:q,V1:version) : q\n    function fun(V0:version) : q\n    property fun(X) = (base(X) if (X <= 0) else step(fun(X - 1),X))\n}\n",
            "[min_ack_delay.constr] {\n    property exists Y. min_ack_delay.exponent_8(Y) = X0\n}\n",
            "[ind[tls_hand_extensions.domain]] {\n    relation p(V0:tls_hand_extensions.domain)\n    property [base] {\n        individual x : tls_hand_extensions.domain\n        property x <= 0 -> p(x)\n    }\n    property [step] {\n        individual x : tls_hand_extensions.domain\n        property p(x) -> p(x + 1)\n    }\n    property p(X)\n}\n",
            "[lep[tls.compression_method]] {\n    individual n : tls.compression_method\n    relation p(V0:tls.compression_method)\n    property exists L. L:tls.compression_method >= n & (forall B. B:tls.compression_method >= n & p(B) -> p(L) & L <= B)\n}\n",
            "[rec[quic_packet_retry.idx]] {\n    type q\n    function base(V0:quic_packet_retry.idx) : q\n    function step(V0:q,V1:quic_packet_retry.idx) : q\n    function fun(V0:quic_packet_retry.idx) : q\n    property fun(X) = (base(X) if (X <= 0) else step(fun(X - 1),X))\n}\n",
            "[frame.new_token.constr] {\n    property exists Y. frame.new_token.length(Y) = X0 & frame.new_token.data(Y) = X1\n}\n",
            "[lep[reset_token]] {\n    individual n : reset_token\n    relation p(V0:reset_token)\n    property exists L. L:reset_token >= n & (forall B. B:reset_token >= n & p(B) -> p(L) & L <= B)\n}\n",
            "[unknown_transport_parameter.constr] {\n    property exists Y. unknown_transport_parameter.unknown(Y) = X0\n}\n",
            "[lep[ip.addr]] {\n    individual n : ip.addr\n    relation p(V0:ip.addr)\n    property exists L. L:ip.addr >= n & (forall B. B:ip.addr >= n & p(B) -> p(L) & L <= B)\n}\n"
        ],
        "all_relations": [
            "(Const('get_stream_kind', FunctionSort(TopSort('alpha0',), TopSort('alpha1',))), 1)",
            "(Const('get_stream_role', FunctionSort(TopSort('alpha0',), TopSort('alpha1',))), 1)"
        ],
        "sig": {
            "default_numeric_sort": "int",
            "constructors": [
                "quic_packet_type.handshake",
                "quic_packet_type.zero_rtt",
                "ip.lo",
                "bidir",
                "endpoint_id.client_vn",
                "endpoint_id.client_server",
                "ip.udp",
                "role.client",
                "unidir",
                "endpoint_id.server_alt",
                "quic_packet_type.version_negociation",
                "ip.tcp",
                "endpoint_id.client",
                "endpoint_id.mim",
                "role.server",
                "endpoint_id.server",
                "endpoint_id.attacker",
                "ip.ivy",
                "quic_packet_type.retry",
                "endpoint_id.victim",
                "quic_packet_type.initial",
                "ipv6.udp6",
                "ipv6.tcp6",
                "quic_packet_type.one_rtt",
                "endpoint_id.client_alt"
            ],
            "interp": [
                "nat",
                "nat",
                "bv[32]",
                "nat",
                "nat",
                "nat",
                "nat",
                "nat",
                "longbv[1][128][3]",
                "bv[1]",
                "nat",
                "nat",
                "nat",
                "bv[4]",
                "bv[8]",
                "bv[16]",
                "nat",
                "nat",
                "nat",
                "bv[2]",
                "nat",
                "bv[32]",
                "bv[4]",
                "bv[1]",
                "nat",
                "nat",
                "nat",
                "nat",
                "nat",
                "nat",
                "bv[16]",
                "longbv[1][13][16]",
                "bv[16]",
                "nat",
                "nat",
                "bv[32]",
                "bv[8]",
                "bv[16]",
                "nat",
                "longbv[1][13][16]",
                "nat",
                "nat",
                "nat",
                "nat",
                "nat",
                "nat",
                "nat",
                "longbv[1][13][20]",
                "bv[31]",
                "bv[16]",
                "bv[16]",
                "nat",
                "nat",
                "bv[7]",
                "bv[16]",
                "bv[16]",
                "bv[16]",
                "bv[32]"
            ],
            "symbols": [
                "stateless_reset_token.value",
                "forged_quic_packet_retry.pversion",
                "frame.connection_close.reason_phrase_length",
                "tls.application_data_record.version",
                "quic_packet_retry.ptype",
                "sending_resetSent",
                "preferred_address.ip6_port",
                "frame.application_close.err_code",
                "arr_pkt_num_s.segment",
                "forged_quic_packet_retry.src_cid",
                "arr_pkt_num_r.end",
                "quic_packet_0rtt.arr.value",
                "frame.ack_ecn.range.arr.segment",
                "retry_source_connection_id.rcid",
                "cids.begin",
                "vector[tls.compression_method].domain.succ",
                "servers.servers",
                "initial_max_stream_data_bidi_local.value",
                "retry_source_connection_id.value",
                "quic_transport_parameters.transport_parameters",
                "prot.arr.end",
                "versions.end",
                "endpoint_id.client_server",
                "tls.client_hello.cipher_suites",
                "replayed_quic_packet_0rtt.arr.value",
                "stream_data.begin",
                "ip.endpoint.addr",
                "cid_mapped_token",
                "frame.idx.succ",
                "last_packet_length",
                "forged_protected_quic_packet.arr.segment",
                "initial_max_stream_data_bidi_remote.value",
                "min_ack_delay.exponent_8",
                "prot.idx.succ",
                "quic_packet.payload",
                "client_initial_rcid",
                "quic_packet_retry.arr.value",
                "fake_client.ep",
                "established_0rtt_keys",
                "forged_quic_packet_vn.idx.succ",
                "quic_packet.seq_num",
                "version_negociated",
                "versions_bv.value",
                "frame.arr.segment",
                "loss_bits.is_set",
                "stream_app_data",
                "replayed_quic_packet_0rtt.idx.succ",
                "tls.new_session_ticket.ticket_nonce",
                "frame.stream.off",
                "frame.ack.ack_ranges",
                "queued_level",
                "tp_client_set",
                "forged_quic_packet_retry.arr.segment",
                "is_stream_state_error",
                "frame.ack.range.arr.value",
                "issued_zero_length_cid",
                "header_retry",
                "max_acked",
                "forged_quic_packet_vn.arr.end",
                "quic_packet_0rtt.src_cid",
                "max_packet_size.stream_pos_16",
                "prot.hdr_long",
                "send_retire_cid",
                "forged_quic_packet_retry.token",
                "frame.ack_ecn.range.idx.succ",
                "quic_packet_coal_0rtt.pversion",
                "frame.ack_ecn.range.arr.end",
                "server_addr",
                "forged_quic_packet_retry.arr.end",
                "quic_packet_type.retry",
                "second_server.ep",
                "quic_packet_coal_0rtt.pversion_i",
                "frame.ack_frequency.ignore_order",
                "mim_client_target.enc_level",
                "client_port_alt",
                "is_frame_encoding_error",
                "forged_protected_quic_packet.idx.succ",
                "quic_packet_retry.retired_cids.value",
                "loss_bits.unknown",
                "stream_pos.succ",
                "tls.new_session_ticket.ticket_lifetime",
                "server.tls_id",
                "tls.unknown_extension.content",
                "mim_agent.ppkt_to_be_reflected_to_victim",
                "tls_extensions.end",
                "quic_packet.ptype",
                "replayed_quic_packet_0rtt.arr.segment",
                "quic_packet.arr.begin",
                "n_clients",
                "versions.value",
                "frame.ack_ecn.range.arr.begin",
                "tls.client_hello.session_id",
                "quic_packet_vn.supported_version",
                "max_stream_data_set",
                "frame.new_connection_id.length",
                "quic_packet_coal_0rtt.seq_num",
                "clients.client.arr.end",
                "forged_pkts.segment",
                "versions.begin",
                "arr_pkt_num_r.value",
                "vector[tls.cipher_suite].domain.succ",
                "clients.client.enc_level",
                "supported_versions",
                "sending_send",
                "arr_pkt_num_r.begin",
                "frame.max_data.pos",
                "forged_quic_packet.seq_num",
                "replayed_quic_packet_0rtt.retired_cids.value",
                "retry_response",
                "disable_active_migration.is_set",
                "server_port_alt",
                "client_server.init_cids",
                "forged_quic_packet_vn.pversion",
                "conn_total_data",
                "initial_max_data.stream_pos_32",
                "is_connection_id_limit_error",
                "lastest_stream_id_sender",
                "count_stream_frame",
                "mim_agent.ppkt_saved_b",
                "replayed_quic_packet_0rtt.retired_cids.segment",
                "active_connection_id_limit.value",
                "mim_addr",
                "mim_agent.ppkt_to_be_replayed_to_server",
                "is_stream_limit_test",
                "victim_agent.enc_level",
                "mim_port_in",
                "servers.server.arr.value",
                "connected_to",
                "handshake_done_send",
                "frame.ack.range.ranges",
                "iversion",
                "client_non_zero_scil",
                "ip.udp",
                "the_cids",
                "tls.unknown_message.mtype",
                "tls.new_session_ticket.extensions",
                "quic_packet_vn.pversion",
                "http_request_file.pending",
                "http_request",
                "forged_quic_packet_vn.src_cid",
                "tls_hand_extensions.begin",
                "quic_packet_coal_0rtt.ptype",
                "quic_packet_vn.arr.begin",
                "arr_streamid_r.end",
                "servers.server.ep",
                "client_server.ep_in",
                "max_seq_num",
                "quic_packet_coal_0rtt.payload_i",
                "frame.stream_data_blocked.pos",
                "quic_packet_retry.arr.segment",
                "mim_agent.enc_level_ppkt_to_be_forge",
                "initial_max_stream_data_uni.value",
                "frame.stop_sending.err_code",
                "frame.ack.range.arr.segment",
                "attacker.tls_id",
                "tls_api.upper.data",
                "frame.max_streams.id",
                "initial_max_stream_id_bidi.value",
                "frame.ack.ack_delay",
                "tls.handshake_parser.value",
                "forged_quic_packet_retry.ptype",
                "arr_streamid_r.begin",
                "forged_quic_packet.idx.succ",
                "initial_keys_set",
                "frame.rst_stream.err_code",
                "the_cid",
                "lastest_pkt_num_sender",
                "forged_protected_quic_packet.retired_cids.end",
                "stateless_reset_token.data_8",
                "bytes.value",
                "forged_protected_quic_packet.ptype",
                "vector[tls.cipher_suite].begin",
                "forged_pkts.value",
                "frame.application_close.reason_phrase_length",
                "forged_protected_quic_packet.retired_cids.value",
                "disable_active_migration.value",
                "mim_agent.cppkt_forwarded_to_server",
                "unknown_transport_parameter.is_set",
                "tls.encrypted_extensions.extensions",
                "vector[tls.extension].domain.succ",
                "quic_packet_0rtt.retired_cids.end",
                "preferred_address.pcid",
                "servers.server.arr.segment",
                "is_no_error",
                "grease_quic_bit.value",
                "second_client.ep",
                "tls_hand_extensions.segment",
                "zero_length_token",
                "prot.pkt_num_pos",
                "initial_max_stream_data_bidi_remote.stream_pos_32",
                "server_cid",
                "trans_params",
                "servers.server.arr.end",
                "frame.ack_frequency.packet_tolerence",
                "arr_pkt_num_s.value",
                "quic_packet_coal_0rtt.dst_cid_i",
                "frame.connection_close.frame_type",
                "servers.server.idx.succ",
                "tls.psk_identity.obfuscated_ticket_age",
                "initial_scid",
                "unknown_ignore.value",
                "prot.arr.begin",
                "quic_packet_0rtt.pversion",
                "frame.ack.largest_acked",
                "crypto_handler_pos",
                "frame.new_connection_id.seq_num",
                "preferred_address.value",
                "stream_app_data_finished",
                "count_sdb_frame",
                "initial_max_streams_bidi",
                "ack_credit",
                "frame.ack_ecn.ack_delay",
                "first_datagram_received",
                "stream_app_data_end",
                "tls.psk_identity.identity",
                "frame.data_blocked.pos",
                "victim_addr",
                "initial_max_data_server_0rtt",
                "max_data_val",
                "client_server.enc_level",
                "idx_s.succ",
                "client.tls_id",
                "prot.payload_length_pos",
                "forged_quic_packet_retry.retired_cids.segment",
                "frame.max_stream_data.id",
                "mim_agent.last_cppkt_forwarded_to_server",
                "frame.retire_connection_id.seq_num",
                "mim_server_target.ep",
                "ip.endpoint.port",
                "quic_packet_0rtt.ptype",
                "grease_quic_bit.is_set",
                "quic_packet_0rtt.arr.end",
                "migration_done",
                "save_packet",
                "http_request_file.contents",
                "arr_streamid_s.begin",
                "forged_pkts.end",
                "queued_challenge",
                "endpoint_id.server",
                "forged_quic_packet.payload",
                "mim_agent.ppkt_to_be_forge_parsed",
                "initial_source_connection_id.value",
                "forged_quic_packet_vn.supported_version",
                "forged_quic_packet.ptype",
                "tls.finished.unknown_message_bytes",
                "replayed_quic_packet_0rtt.retired_cids.end",
                "vector[tls.extension].value",
                "crypto_data",
                "tls_api.upper.open",
                "forged_protected_quic_packet.retired_cids.begin",
                "forged_protected_quic_packet.protected_payload",
                "trans_params_set",
                "last_packet_type",
                "quic_packet_0rtt.retired_cids.begin",
                "max_rtp_num",
                "established_handshake_keys",
                "quic_packet.retired_cids.end",
                "conn_requested",
                "forged_quic_packet_retry.retired_cids.end",
                "version_information.chosen_version",
                "mim_agent.ppkt_to_be_forwarded_to_server",
                "bit.zero",
                "queued_level_rtt",
                "tls.handshakes.domain.succ",
                "min_ack_delay.value",
                "tls_extensions.begin",
                "quic_packet_coal_0rtt.retired_cids.end",
                "vector[tls.psk_identity].begin",
                "quic_packet_coal_0rtt.src_cid",
                "frame.crypto.data",
                "quic_packet_retry.arr.end",
                "bit.one",
                "acked_pkt",
                "frame.new_token.length",
                "quic_packet.arr.value",
                "enable_time_stamp.stream_pos_32",
                "quic_packet.pversion",
                "forged_quic_packet.retired_cids.value",
                "server_cids",
                "mim_agent.ppkt_to_be_forwarded_to_client",
                "frame.stream_data_blocked.id",
                "arr_streamid_s.segment",
                "tls_api.upper.established",
                "quic_packet_vn.arr.segment",
                "quic_packet_vn.idx.succ",
                "max_idle_timeout.seconds_16",
                "quic_packet_type.one_rtt",
                "jdx_s.succ",
                "client_initial_version",
                "quic_packet.dst_cid",
                "quic_packet_type.handshake",
                "hi_non_probing",
                "quic_packet_coal_0rtt.retired_cids.begin",
                "quic_packet_coal_0rtt.arr.value",
                "initial_version",
                "victim_port",
                "is_protocol_violation",
                "conn_draining",
                "clients.client.arr.value",
                "preferred_address.is_set",
                "queued_frames",
                "jdx_r.succ",
                "clients.client.tls_id",
                "is_server_busy",
                "zrtt_pkt_process",
                "sock_mim_server",
                "initial_max_stream_data_uni.stream_pos_32",
                "crypto_length",
                "queued_non_probing",
                "mim_agent.max_retransmit",
                "cid_to_aid",
                "mim_agent.enc_level",
                "forged_quic_packet_retry.integrity_token",
                "forged_quic_packet.pversion",
                "endpoint_id.client_vn",
                "client_addr",
                "mim_port_out",
                "vector[tls.handshake].begin",
                "initial_max_stream_data_bidi_local.stream_pos_32",
                "tls.client_hello.compression_methods",
                "quic_packet_vn.arr.end",
                "ipv6.endpoint.addr",
                "tls_hand_extensions.domain.succ",
                "cids.value",
                "fake_client.enc_level",
                "prot.arr.segment",
                "forged_protected_quic_packet.token",
                "idx_r.succ",
                "bidir",
                "servers.server.enc_level",
                "tls.server_hello.session_id",
                "tls_hand_extensions.value",
                "versions_bv.segment",
                "frame.stream.len",
                "receiving_resetRecvd",
                "quic_packet_0rtt.arr.begin",
                "attacker.enc_level",
                "frame.ack_ecn.ack_ranges",
                "initial_max_data.is_set",
                "quic_packet_retry.token",
                "client.ep",
                "initial_source_connection_id.is_set",
                "sock_vn",
                "mim_server_target.enc_level",
                "quic_packet_coal_0rtt.src_cid_i",
                "forged_quic_packet.retired_cids.end",
                "zrtt_pkt_set",
                "tls.gmt_unix_time",
                "is_application_error",
                "queued_close",
                "max_ack_delay.exponent_8",
                "stream_data.value",
                "is_aead_limit_reached",
                "is_no_viable_path",
                "ip_endpoints.segment",
                "is_mim",
                "sock",
                "versions.segment",
                "is_key_update_error",
                "initial_max_data.value",
                "quic_packet_vn.ptype",
                "ip_endpoints.begin",
                "prot.arr.value",
                "ip.lo",
                "initial_max_stream_data_bidi_local.is_set",
                "quic_packet_retry.arr.begin",
                "server.enc_level",
                "client.enc_level",
                "forged_quic_packet_retry.idx.succ",
                "arr_streamid_s.end",
                "frame.path_challenge.data",
                "tls.server_hello.server_version",
                "zero_rtt_sent",
                "quic_packet.token",
                "quic_packet_coal_0rtt.token_i",
                "reset_frame_restransmitted",
                "frame.streams_blocked_bidi.id",
                "frame.application_close.reason_phrase",
                "tls.unknown_message.unknown_message_bytes",
                "mim_server_target.tls_id",
                "tls.random_bytes",
                "tls_handshake_finished",
                "vector[tls.psk_identity].value",
                "frame.arr.end",
                "stateless_reset_token.is_set",
                "preferred_address.ip_port",
                "last_zrtt_pkt",
                "forged_quic_packet.arr.segment",
                "quic_packet_retry.idx.succ",
                "sent_pkt",
                "the_cid_alt",
                "max_idle_timeout.value",
                "client_server.ep_out",
                "prot.token_length",
                "quic_packet.retired_cids.value",
                "preferred_address.ip6_addr",
                "frame.max_streams_bidi.id",
                "is_flow_control_error",
                "replayed_quic_packet_0rtt.retired_cids.begin",
                "frame.ack.range.idx.succ",
                "tls.client_hello.client_version",
                "forged_quic_packet.src_cid",
                "sending_dataRecvd",
                "vector[transport_parameter].value",
                "forged_quic_packet.arr.begin",
                "initial_source_connection_id.scid",
                "replayed_quic_packet_0rtt.ptype",
                "max_stream_data_val",
                "unknown_transport_parameter.value",
                "zero_rtt_allowed",
                "crypto_data_present",
                "tls.new_session_ticket.ticket",
                "mim_agent.nat_configured",
                "retry_recv",
                "stream_seen",
                "forward_packets_victim",
                "victim_agent.tls_id",
                "initial_max_stream_id_uni.value",
                "vector[tls.compression_method].end",
                "forged_quic_packet.arr.value",
                "version_information.other_version",
                "nclients",
                "receiving_resetRead",
                "queued_frames_rtt",
                "initial_max_stream_data_bidi_remote.is_set",
                "quic_packet.retired_cids.begin",
                "endpoint_id.attacker",
                "forged_pkts.begin",
                "first_initial_send",
                "vector[tls.psk_identity].domain.succ",
                "zero_rtt_server_test",
                "modify_packets",
                "last_pkt_num",
                "forged_quic_packet.arr.end",
                "preferred_address.pcid_len",
                "client_initial_scid",
                "ip.endpoint.protocol",
                "num_queued_frames",
                "first_zrtt_pkt",
                "client_initial_scil",
                "cid_to_token",
                "vector[tls.psk_identity].end",
                "max_stream_data",
                "replayed_quic_packet_0rtt.arr.end",
                "client_port",
                "tls.server_hello.rand_info",
                "ack_delay_exponent.value",
                "versions_bv.begin",
                "initial_max_stream_id_bidi.stream_id_16",
                "frame.stream.fin",
                "frame.new_token.data",
                "preferred_address.ip_addr",
                "clients.client.arr.segment",
                "arr_streamid_s.value",
                "mim_client_target.ep",
                "tls_extensions.domain.succ",
                "tls_api.id.succ",
                "endpoint_id.server_alt",
                "ipv6.endpoint.port",
                "initial_dcid",
                "quic_packet_coal_0rtt.retired_cids.value",
                "stream_data.segment",
                "role.client",
                "ip.ivy",
                "quic_packet_vn.arr.value",
                "quic_packet_retry.dst_cid",
                "force_new_ack",
                "forged_quic_packet_retry.retired_cids.begin",
                "version_not_found",
                "tls.client_hello.rand_info",
                "tls_api.upper.ok",
                "quic_packet_coal_0rtt.seq_num_i",
                "sock_victim",
                "send_connection_close",
                "max_packet_size.value",
                "frame.max_stream_data.pos",
                "arr_pkt_num_r.segment",
                "vector[transport_parameter].begin",
                "initial_max_stream_id_uni.is_set",
                "stream_data.end",
                "arr_pkt_num_s.begin",
                "quic_packet_retry.src_cid",
                "initial_max_stream_data_uni_server_0rtt",
                "stream_reset",
                "second_server.tls_id",
                "tls.handshake_parser.pos",
                "mim_agent.force_client_forward",
                "max_packet_size.is_set",
                "tls.server_hello.the_cipher_suite",
                "sock_alt",
                "unidir",
                "client_alt",
                "tls.handshake_record.fragment",
                "frame.ack_frequency.update_max_ack_delay",
                "tls.server_hello.the_compression_method",
                "packed_forwarded_arr",
                "forged_packet_send",
                "forged_quic_packet_vn.arr.begin",
                "vector[tls.psk_identity].segment",
                "ip_endpoints.end",
                "forged_protected_quic_packet.dst_cid",
                "established_1rtt_keys",
                "enable_time_stamp.value",
                "frame.ack_ecn.range.arr.value",
                "tls.handshakes.value",
                "tls.handshakes.begin",
                "mim_agent.ppkt_saved",
                "vector[tls.compression_method].begin",
                "second_client.enc_level",
                "count_rcid_frame",
                "used_cid",
                "stream_app_pos",
                "forged_protected_quic_packet.arr.value",
                "retry_source_connection_id.is_set",
                "vector[transport_parameter].end",
                "frame.crypto.length",
                "arr_pkt_num_s.end",
                "lastest_pkt_num_receiving",
                "final_version",
                "arr_streamid_r.segment",
                "ipv6.udp6",
                "endpoint_id.victim",
                "original_destination_connection_id.is_set",
                "forged_quic_packet.retired_cids.segment",
                "forward_packets",
                "zrtt_pkt_update",
                "index.succ",
                "max_data_set",
                "forged_quic_packet_vn.dst_cid",
                "stream_finished",
                "mim_agent.forward_turn_count",
                "forged_quic_packet.retired_cids.begin",
                "is_transport_parameter_error",
                "second_client.tls_id",
                "quic_packet_0rtt.seq_num",
                "initial_max_stream_data_bidi_local_server_0rtt",
                "quic_packet_type.initial",
                "count_reset_frame",
                "vector[tls.compression_method].segment",
                "victim_agent.ep",
                "tls.psk_key_exchange_modes.content",
                "mim_client_target.tls_id",
                "quic_packet.arr.segment",
                "forged_quic_packet.token",
                "ack_delay_exponent.is_set",
                "tls.server_hello.extensions",
                "client_initial_dcid",
                "attacker.ep",
                "client_initial_dcil",
                "quic_packet_coal_0rtt.idx.succ",
                "initial_max_stream_id_bidi.is_set",
                "frame.stop_sending.id",
                "ip.endpoint.interface",
                "server.ep",
                "sending_resetRecvd",
                "is_client",
                "quic_packet_retry.retired_cids.end",
                "vector[transport_parameter].domain.succ",
                "quic_packet_retry.retired_cids.begin",
                "forged_quic_packet_vn.ptype",
                "frame.stream.data",
                "role.server",
                "initial_max_stream_data_uni.is_set",
                "zero_rtt_client_test",
                "forged_protected_quic_packet.arr.end",
                "sdb_frame_restransmitted",
                "version_information.value",
                "get_stream_kind",
                "ack_delay_exponent.exponent_8",
                "vector[tls.handshake].segment",
                "replayed_quic_packet_0rtt.dst_cid",
                "tls.handshakes.end",
                "quic_packet_0rtt.arr.segment",
                "quic_packet.retired_cids.segment",
                "frame.rst_stream.final_offset",
                "vector[tls.extension].segment",
                "mim_agent.force_server_forward",
                "quic_packet_coal_0rtt.arr.begin",
                "idx.succ",
                "token_saved",
                "retry_client_test",
                "quic_packet_vn.dst_cid",
                "ipv6.tcp6",
                "quic_packet_retry.integrity_token",
                "mim_agent.wait_forward",
                "frame.arr.value",
                "unknown_ignore.is_set",
                "quic_packet.arr.end",
                "connected",
                "frame.malicious_frame.data",
                "max_idle_timeout.is_set",
                "vnversion",
                "is_internal_error",
                "quic_packet_retry.retired_cids.segment",
                "frame.ack.range.gap",
                "count_newcid_frame",
                "is_crypto_limit_test",
                "max_stream_set",
                "tls_hand_extensions.end",
                "forged_quic_packet_retry.retired_cids.value",
                "frame.ack_frequency.seq_num",
                "vector[tls.extension].begin",
                "enable_time_stamp.is_set",
                "bytes.begin",
                "frame.connection_close.err_code",
                "quic_packet_coal_0rtt.payload",
                "is_victim",
                "frame.ack.range.arr.begin",
                "frame.streams_blocked.id",
                "mim_agent.last_cppkt_forwarded_to_client",
                "bytes.segment",
                "sending_ready",
                "quic_packet_retry.pversion",
                "frame.ack_ecn.largest_acked",
                "num_queued_frames_rtt",
                "endpoint_id.client_alt",
                "mim_agent.tls_id",
                "loss_bits.value",
                "prot.hdr_type",
                "min_ack_delay.is_set",
                "nonce_cid",
                "is_invalid_token",
                "quic_packet_0rtt.dst_cid",
                "sock_attacker",
                "client_server.tls_id_client",
                "is_stream_limit_error",
                "vector[transport_parameter].segment",
                "preferred_address.pref_token",
                "prot.payload_length",
                "server_cid_alt",
                "quic_packet_0rtt.retired_cids.value",
                "mim_agent.ppkt_to_be_forge",
                "tls.handshakes.segment",
                "tls.new_session_ticket.ticket_age_add",
                "pkt_has_close",
                "vector[tls.cipher_suite].end",
                "active_connection_id_limit.is_set",
                "clients.client.arr.begin",
                "initial_max_stream_id_bidi_server_0rtt",
                "last_cid_seq",
                "vector[tls.cipher_suite].segment",
                "tls.pre_shared_key_server.selected_identity",
                "client_vn",
                "replayed_quic_packet_0rtt.payload",
                "arr_streamid_r.value",
                "quic_packet_type.zero_rtt",
                "num_conn",
                "vector[tls.cipher_suite].value",
                "first_ack_freq_received",
                "initial_max_stream_id_uni.stream_id_16",
                "tls.handshake_record.version",
                "quic_packet_vn.src_cid",
                "receiving_dataRecvd",
                "original_destination_connection_id.value",
                "stream_length",
                "vector[tls.handshake].domain.succ",
                "last_datagram_received_size",
                "cids.segment",
                "cids.end",
                "tls.finished.mtype",
                "vector[tls.compression_method].value",
                "tls.unknown_extension.etype",
                "conn_closed",
                "stream_frame_restransmitted",
                "ipv6.endpoint.protocol",
                "frame.rst_stream.id",
                "vector[tls.handshake].end",
                "queued_non_ack",
                "tls.change_cipher_spec.version",
                "endpoint_id.client",
                "forged_quic_packet_retry.arr.value",
                "queued_ack_eliciting",
                "tls_api.upper.payload",
                "is_final_size_error",
                "forged_protected_quic_packet.arr.begin",
                "frame.ack_ecn.range.ranges",
                "active_connection_id_limit.stream_pos_32",
                "servers.server.arr.begin",
                "replayed_quic_packet_0rtt.arr.begin",
                "mim_agent.forward_turn",
                "lastest_stream_id_receiving",
                "tls.client_hello.extensions",
                "client_server.tls_id_server",
                "frame.connection_close.reason_phrase",
                "ip_endpoints.value",
                "allowed_migration",
                "tls_extensions.segment",
                "_generating",
                "mim_agent.ep_out",
                "max_stream",
                "frame.crypto.offset",
                "forged_protected_quic_packet.pversion",
                "initial_token",
                "replay_packets",
                "tls.early_data.max_early_data_size",
                "mim_agent.ep_in",
                "unknown_transport_parameter.unknown",
                "quic_packet_0rtt.idx.succ",
                "conn_enc_level",
                "frame.stream.offset",
                "version_information.is_set",
                "crypto_pos",
                "sock_mim_client",
                "current_stream",
                "frame.stream.id",
                "allowed_multiple_migration",
                "clients.client.ep",
                "frame.ack.range.arr.end",
                "quic_packet_type.version_negociation",
                "fake_client.tls_id",
                "tls.pre_shared_key_client.psk_binder",
                "quic_packet_coal_0rtt.arr.end",
                "frame.arr.begin",
                "second_server.enc_level",
                "replayed_quic_packet_0rtt.seq_num",
                "initial_max_stream_data_bidi_remote_server_0rtt",
                "ip.tcp",
                "quic_packet.src_cid",
                "quic_packet_coal_0rtt.retired_cids.segment",
                "receiving_dataRead",
                "crypto_reset",
                "quic_packet_coal_0rtt.dst_cid",
                "cid_mapped",
                "prot.dcid",
                "server_port",
                "forged_quic_packet.dst_cid",
                "client_port_vn",
                "max_ack_delay.is_set",
                "forged_protected_quic_packet.retired_cids.segment",
                "original_destination_connection_id.dcid",
                "victim_agent.ppkt_recvd",
                "bytes.end",
                "forged_quic_packet_retry.arr.begin",
                "quic_packet_0rtt.retired_cids.segment",
                "replayed_quic_packet_0rtt.pversion",
                "crypto_data_end",
                "frame.path_response.data",
                "connection_closed",
                "replayed_quic_packet_0rtt.src_cid",
                "receiving_sizeKnown",
                "hi_non_probing_endpoint",
                "tls.pre_shared_key_client.psk_identities",
                "last_ack_freq_seq",
                "quic_packet_coal_0rtt.arr.segment",
                "is_crypto_error",
                "queued_level_type",
                "retry_token",
                "is_version_negociation_error",
                "packed_forwarded",
                "draining_pkt_sent",
                "get_stream_role",
                "frame.new_connection_id.token",
                "versions_bv.end",
                "stop_sending_in_bad_state",
                "forged_quic_packet_vn.arr.segment",
                "forged_quic_packet_retry.dst_cid",
                "servers.server.tls_id",
                "tls.change_cipher_spec.content",
                "clients.clients",
                "tls.application_data_record.content",
                "frame.new_connection_id.scid",
                "is_mim_standalone",
                "active_connection_id_limit_server_0rtt",
                "frame.ack_ecn.range.gap",
                "prot.scid",
                "frame.stream.length",
                "mim_agent.init_cids",
                "sending_dataSent",
                "keep_coalesed",
                "quic_packet_coal_0rtt.ptype_i",
                "receiving_recv",
                "vector[tls.extension].end",
                "vector[tls.handshake].value",
                "negocation_of_version",
                "endpoint_id.mim",
                "forged_protected_quic_packet.src_cid",
                "is_crypto_buffer_exceeded",
                "negocation_of_version_initiated",
                "quic_packet_0rtt.payload",
                "frame.new_connection_id.retire_prior_to",
                "path_challenge_pending",
                "supported_versions_bv",
                "mim_agent.cppkt_forwarded_to_client",
                "max_ack_delay.value",
                "clients.client.idx.succ",
                "seqnum_to_cid",
                "retry_sent",
                "tls_extensions.value",
                "quic_packet.idx.succ",
                "conn_seen",
                "forged_quic_packet_vn.arr.value"
            ],
            "sorts": [
                "jdx_r",
                "jdx_s",
                "forged_quic_packet.arr",
                "quic_packet_vn",
                "unknown_transport_parameter",
                "frame.ping",
                "frame.stream",
                "tls.psk_identity",
                "trans_params_struct",
                "prot.header_info",
                "vector[tls.psk_identity]",
                "tls_api.id",
                "quic_packet_vn.idx",
                "idx_r",
                "replayed_quic_packet_0rtt.retired_cids",
                "servers.server.arr",
                "{role.client,role.server}",
                "frame.ack_frequency",
                "original_destination_connection_id",
                "versions_bv",
                "vector[tls.handshake].domain",
                "tls.compression_method",
                "initial_max_stream_id_bidi",
                "quic_packet_0rtt.retired_cids",
                "frame.new_connection_id",
                "tls.protocol_version",
                "preferred_address",
                "quic_packet_vn.arr",
                "tls_api.upper.level",
                "ip.addr",
                "bit",
                "servers",
                "prot.idx",
                "quic_packet_0rtt",
                "quic_packet_0rtt.idx",
                "victim_agent",
                "replayed_quic_packet_0rtt",
                "forged_quic_packet_vn.idx",
                "versions",
                "bytes",
                "server",
                "quic_endpoint",
                "quic_packet_retry.arr",
                "error_code",
                "clients.client.arr",
                "frame.retire_connection_id",
                "{quic_packet_type.initial,quic_packet_type.zero_rtt,quic_packet_type.handshake,quic_packet_type.one_rtt,quic_packet_type.version_negociation,quic_packet_type.retry}",
                "stream_pos",
                "frame.stream_data_blocked",
                "forged_protected_quic_packet.arr",
                "tls_hand_extensions",
                "clients.client",
                "tls.pre_shared_key_server",
                "frame",
                "quic_packet_retry.idx",
                "tls.server_hello",
                "tls.unknown_message",
                "vector[transport_parameter]",
                "{ip.lo,ip.ivy}",
                "ip.endpoint",
                "vector[tls.compression_method]",
                "port",
                "servers.server.idx",
                "frame.path_response",
                "frame.crypto",
                "index",
                "tls.message_type",
                "{ip.udp,ip.tcp}",
                "frame.application_close",
                "vector[tls.cipher_suite]",
                "min_ack_delay",
                "quic_packet_coal_0rtt.idx",
                "tls_extensions",
                "quic_packet_coal_0rtt.retired_cids",
                "fake_client",
                "net.socket",
                "enable_time_stamp",
                "version",
                "frame.ack.range.arr",
                "initial_max_stream_data_bidi_local",
                "tls.handshake",
                "replayed_quic_packet_0rtt.arr",
                "initial_max_stream_id_uni",
                "forged_quic_packet.idx",
                "initial_source_connection_id",
                "mim_agent",
                "tls.psk_key_exchange_modes",
                "vector[tls.cipher_suite].domain",
                "servers.server",
                "client_server",
                "byte",
                "tls.cipher_suite",
                "ipv6.port",
                "idx",
                "frame.path_challenge",
                "tls.handshakes",
                "frame.ack_ecn.range.arr",
                "ip_endpoints",
                "tls.end_of_early_data",
                "{endpoint_id.client,endpoint_id.client_alt,endpoint_id.client_vn,endpoint_id.server,endpoint_id.server_alt,endpoint_id.mim,endpoint_id.victim,endpoint_id.client_server,endpoint_id.attacker}",
                "forged_protected_quic_packet.idx",
                "frame.max_streams",
                "frame.rst_stream",
                "tls.gmt",
                "ipv6.endpoint",
                "tls.handshake_record",
                "initial_max_stream_data_uni",
                "quic_packet_retry.retired_cids",
                "tls.pre_shared_key_client",
                "replayed_quic_packet_0rtt.idx",
                "tls.early_data",
                "frame.ack.range.idx",
                "frame.ack_ecn",
                "loss_bits",
                "frame.streams_blocked",
                "quic_packet.retired_cids",
                "cid_seq",
                "frame.data_blocked",
                "tls.change_cipher_spec",
                "quic_packet.idx",
                "frame.ack",
                "ipv4",
                "ipv6",
                "tls_api.lower.level",
                "frame.stop_sending",
                "frame.handshake_done",
                "tls.record",
                "{unidir,bidir}",
                "frame.ack_ecn.range",
                "initial_max_stream_data_bidi_remote",
                "stateless_reset_token",
                "clients",
                "tls.new_session_ticket",
                "attacker",
                "forged_quic_packet_retry.arr",
                "forged_quic_packet_retry",
                "cids",
                "forged_quic_packet_vn.arr",
                "frame.streams_blocked_bidi",
                "vector[tls.extension]",
                "forged_pkts",
                "vector[tls.handshake]",
                "clients.client.idx",
                "idx_s",
                "cid",
                "tls_hand_extensions.domain",
                "microsecs",
                "reset_token",
                "tls.application_data_record",
                "frame.idx",
                "version_information",
                "tls.finished",
                "tls.extension",
                "forged_quic_packet.retired_cids",
                "max_idle_timeout",
                "frame.max_streams_bidi",
                "type_bits",
                "tls.client_hello",
                "quic_packet_coal_0rtt",
                "tls_api.upper.decrypt_result",
                "tls.unknown_extension",
                "second_server",
                "frame.connection_close",
                "forged_quic_packet_retry.idx",
                "frame.max_data",
                "quic_transport_parameters",
                "vector[tls.extension].domain",
                "arr_streamid_r",
                "forged_quic_packet_retry.retired_cids",
                "quic_packet.arr",
                "frame.malicious_frame",
                "arr_pkt_num_r",
                "arr_pkt_num_s",
                "vector[transport_parameter].domain",
                "cid_length",
                "forged_quic_packet_vn",
                "unknown_ignore",
                "quic_packet_0rtt.arr",
                "frame.new_token",
                "arr_streamid_s",
                "tls.handshakes.domain",
                "mim_client_target",
                "tls.random",
                "vector[tls.psk_identity].domain",
                "ipv6.addr",
                "Boolean",
                "forged_quic_packet",
                "tls_extensions.domain",
                "frame.max_stream_data",
                "initial_max_data",
                "quic_packet_retry",
                "second_client",
                "transport_parameter",
                "prot.arr",
                "tls.handshake_parser.result",
                "disable_active_migration",
                "grease_quic_bit",
                "itoken",
                "stream_data",
                "forged_protected_quic_packet.retired_cids",
                "frame.ack_ecn.range.idx",
                "frame.arr",
                "ack_delay_exponent",
                "max_packet_size",
                "frame.unknown_frame",
                "pkt_num",
                "quic_packet_coal_0rtt.arr",
                "vector[tls.compression_method].domain",
                "tls.extension_type",
                "mim_server_target",
                "stream_id",
                "tls.encrypted_extensions",
                "client",
                "forged_protected_quic_packet",
                "retry_source_connection_id",
                "quic_packet",
                "frame.ack.range",
                "max_ack_delay",
                "{ipv6.udp6,ipv6.tcp6}",
                "ip.port",
                "active_connection_id_limit"
            ],
            "old_sigs": []
        },
        "sort_constructors": [
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            []
        ],
        "attributes": [
            "impl",
            "1",
            "yes",
            "impl",
            "impl",
            "yes",
            "yes",
            "16",
            "impl",
            "yes",
            "yes",
            "yes",
            "yes",
            "impl",
            "yes",
            "impl",
            "impl",
            "impl",
            "yes",
            "impl",
            "impl",
            "yes",
            "impl",
            "impl",
            "impl",
            "impl",
            "yes",
            "impl",
            "yes",
            "impl",
            "impl",
            "impl",
            "impl",
            "impl",
            "impl",
            "impl",
            "impl",
            "impl",
            "impl",
            "impl",
            "impl",
            "impl",
            "impl",
            "yes",
            "impl",
            "yes",
            "yes",
            "yes",
            "impl",
            "yes",
            "yes",
            "impl",
            "impl",
            "yes",
            "yes",
            "impl",
            "impl",
            "impl",
            "impl",
            "yes",
            "yes",
            "impl",
            "yes",
            "yes",
            "impl",
            "yes",
            "yes",
            "impl",
            "impl",
            "impl",
            "impl",
            "yes",
            "impl",
            "impl",
            "yes",
            "\"picotls-core,picotls-minicrypto,picotls-openssl,ssl,crypto,dl,picotls.lib,libcrypto.lib,libssl.lib,cifra.lib,bcrypt.lib\"",
            "impl",
            "yes",
            "yes",
            "yes",
            "impl",
            "impl",
            "yes",
            "yes",
            "yes",
            "yes",
            "impl",
            "1",
            "yes",
            "impl",
            "impl",
            "impl",
            "yes",
            "yes",
            "impl",
            "yes",
            "yes",
            "yes",
            "impl",
            "yes",
            "1",
            "impl",
            "impl",
            "impl",
            "yes",
            "yes",
            "impl",
            "yes",
            "impl",
            "impl",
            "impl",
            "yes",
            "impl",
            "4",
            "\"5\"",
            "impl",
            "impl",
            "impl",
            "impl",
            "impl",
            "yes",
            "impl",
            "impl",
            "yes",
            "impl",
            "\"5\"",
            "impl",
            "yes",
            "impl",
            "yes",
            "impl",
            "impl",
            "yes",
            "impl",
            "impl",
            "yes",
            "yes",
            "impl",
            "yes",
            "impl",
            "impl",
            "yes",
            "impl",
            "impl",
            "impl",
            "yes",
            "impl",
            "impl",
            "yes",
            "impl",
            "impl",
            "impl",
            "impl",
            "impl",
            "yes",
            "yes"
        ],
        "initial_actions": [],
        "old_sig": {
            "default_numeric_sort": "int",
            "constructors": [],
            "interp": [],
            "symbols": [],
            "sorts": [
                "Boolean"
            ],
            "old_sigs": []
        },
        "updates": [
            {
                "dependencies": [
                    "0:bit"
                ],
                "defn": {
                    "args": "(Const('bit.zero', UninterpretedSort('bit',)), Const('0', UninterpretedSort('bit',)))"
                }
            },
            {
                "dependencies": [
                    "1:bit"
                ],
                "defn": {
                    "args": "(Const('bit.one', UninterpretedSort('bit',)), Const('1', UninterpretedSort('bit',)))"
                }
            },
            {
                "dependencies": [
                    "+",
                    "1:idx"
                ],
                "defn": {
                    "args": "(Apply(Const('idx.succ', FunctionSort(UninterpretedSort('idx',), UninterpretedSort('idx',), BooleanSort())), Var('X', UninterpretedSort('idx',)), Var('Y', UninterpretedSort('idx',))), Eq(Var('Y', UninterpretedSort('idx',)), Apply(Const('+', FunctionSort(UninterpretedSort('idx',), UninterpretedSort('idx',), UninterpretedSort('idx',))), Var('X', UninterpretedSort('idx',)), Const('1', UninterpretedSort('idx',)))))"
                }
            },
            {
                "dependencies": [
                    "0:idx"
                ],
                "defn": {
                    "args": "(Apply(Const('bytes.begin', FunctionSort(UninterpretedSort('bytes',), UninterpretedSort('idx',))), Var('A', UninterpretedSort('bytes',))), Const('0', UninterpretedSort('idx',)))"
                }
            },
            {
                "dependencies": [
                    "i",
                    "a"
                ],
                "defn": {
                    "args": "(Apply(Const('bytes.value', FunctionSort(UninterpretedSort('bytes',), UninterpretedSort('idx',), UninterpretedSort('byte',))), Const('a', UninterpretedSort('bytes',)), Const('i', UninterpretedSort('idx',))), <ivy.ivy_ast.NativeExpr object at 0x7fd8f0f3e4d0>)"
                }
            },
            {
                "dependencies": [
                    "a"
                ],
                "defn": {
                    "args": "(Apply(Const('bytes.end', FunctionSort(UninterpretedSort('bytes',), UninterpretedSort('idx',))), Const('a', UninterpretedSort('bytes',))), <ivy.ivy_ast.NativeExpr object at 0x7fd8f0f47410>)"
                }
            },
            {
                "dependencies": [],
                "defn": {
                    "args": "(Apply(Const('bytes.segment', FunctionSort(UninterpretedSort('bytes',), UninterpretedSort('idx',), UninterpretedSort('idx',), UninterpretedSort('bytes',))), Const('a', UninterpretedSort('bytes',)), Const('lo', UninterpretedSort('idx',)), Const('hi', UninterpretedSort('idx',))), <ivy.ivy_ast.NativeExpr object at 0x7fd8f0f472d0>)"
                }
            },
            {
                "dependencies": [
                    "1:stream_pos",
                    "+"
                ],
                "defn": {
                    "args": "(Apply(Const('stream_pos.succ', FunctionSort(UninterpretedSort('stream_pos',), UninterpretedSort('stream_pos',), BooleanSort())), Var('X', UninterpretedSort('stream_pos',)), Var('Y', UninterpretedSort('stream_pos',))), Eq(Var('Y', UninterpretedSort('stream_pos',)), Apply(Const('+', FunctionSort(UninterpretedSort('stream_pos',), UninterpretedSort('stream_pos',), UninterpretedSort('stream_pos',))), Var('X', UninterpretedSort('stream_pos',)), Const('1', UninterpretedSort('stream_pos',)))))"
                }
            },
            {
                "dependencies": [
                    "0:stream_pos"
                ],
                "defn": {
                    "args": "(Apply(Const('stream_data.begin', FunctionSort(UninterpretedSort('stream_data',), UninterpretedSort('stream_pos',))), Var('A', UninterpretedSort('stream_data',))), Const('0', UninterpretedSort('stream_pos',)))"
                }
            },
            {
                "dependencies": [
                    "i",
                    "a"
                ],
                "defn": {
                    "args": "(Apply(Const('stream_data.value', FunctionSort(UninterpretedSort('stream_data',), UninterpretedSort('stream_pos',), UninterpretedSort('byte',))), Const('a', UninterpretedSort('stream_data',)), Const('i', UninterpretedSort('stream_pos',))), <ivy.ivy_ast.NativeExpr object at 0x7fd8f0f48690>)"
                }
            },
            {
                "dependencies": [
                    "a"
                ],
                "defn": {
                    "args": "(Apply(Const('stream_data.end', FunctionSort(UninterpretedSort('stream_data',), UninterpretedSort('stream_pos',))), Const('a', UninterpretedSort('stream_data',))), <ivy.ivy_ast.NativeExpr object at 0x7fd8f0f48890>)"
                }
            },
            {
                "dependencies": [],
                "defn": {
                    "args": "(Apply(Const('stream_data.segment', FunctionSort(UninterpretedSort('stream_data',), UninterpretedSort('stream_pos',), UninterpretedSort('stream_pos',), UninterpretedSort('stream_data',))), Const('a', UninterpretedSort('stream_data',)), Const('lo', UninterpretedSort('stream_pos',)), Const('hi', UninterpretedSort('stream_pos',))), <ivy.ivy_ast.NativeExpr object at 0x7fd8f0f3f810>)"
                }
            },
            {
                "dependencies": [
                    "bit.one",
                    "unidir",
                    "bfe[1][1]",
                    "bidir"
                ],
                "defn": {
                    "args": "(Apply(Const('get_stream_kind', FunctionSort(UninterpretedSort('stream_id',), EnumeratedSort('stream_kind', ('unidir', 'bidir')))), Var('S', UninterpretedSort('stream_id',))), Ite(EnumeratedSort('stream_kind', ('unidir', 'bidir')), Eq(Apply(Const('bfe[1][1]', FunctionSort(UninterpretedSort('stream_id',), UninterpretedSort('bit',))), Var('S', UninterpretedSort('stream_id',))), Const('bit.one', UninterpretedSort('bit',))), Const('unidir', EnumeratedSort('stream_kind', ('unidir', 'bidir'))), Const('bidir', EnumeratedSort('stream_kind', ('unidir', 'bidir')))))"
                }
            },
            {
                "dependencies": [
                    "bit.one",
                    "bfe[0][0]",
                    "role.client",
                    "role.server"
                ],
                "defn": {
                    "args": "(Apply(Const('get_stream_role', FunctionSort(UninterpretedSort('stream_id',), EnumeratedSort('role', ('role.client', 'role.server')))), Var('S', UninterpretedSort('stream_id',))), Ite(EnumeratedSort('role', ('role.client', 'role.server')), Eq(Apply(Const('bfe[0][0]', FunctionSort(UninterpretedSort('stream_id',), UninterpretedSort('bit',))), Var('S', UninterpretedSort('stream_id',))), Const('bit.one', UninterpretedSort('bit',))), Const('role.server', EnumeratedSort('role', ('role.client', 'role.server'))), Const('role.client', EnumeratedSort('role', ('role.client', 'role.server')))))"
                }
            },
            {
                "dependencies": [
                    "1:vector[tls.psk_identity].domain",
                    "+"
                ],
                "defn": {
                    "args": "(Apply(Const('vector[tls.psk_identity].domain.succ', FunctionSort(UninterpretedSort('vector[tls.psk_identity].domain',), UninterpretedSort('vector[tls.psk_identity].domain',), BooleanSort())), Var('X', UninterpretedSort('vector[tls.psk_identity].domain',)), Var('Y', UninterpretedSort('vector[tls.psk_identity].domain',))), Eq(Var('Y', UninterpretedSort('vector[tls.psk_identity].domain',)), Apply(Const('+', FunctionSort(UninterpretedSort('vector[tls.psk_identity].domain',), UninterpretedSort('vector[tls.psk_identity].domain',), UninterpretedSort('vector[tls.psk_identity].domain',))), Var('X', UninterpretedSort('vector[tls.psk_identity].domain',)), Const('1', UninterpretedSort('vector[tls.psk_identity].domain',)))))"
                }
            },
            {
                "dependencies": [
                    "0:vector[tls.psk_identity].domain"
                ],
                "defn": {
                    "args": "(Apply(Const('vector[tls.psk_identity].begin', FunctionSort(UninterpretedSort('vector[tls.psk_identity]',), UninterpretedSort('vector[tls.psk_identity].domain',))), Var('A', UninterpretedSort('vector[tls.psk_identity]',))), Const('0', UninterpretedSort('vector[tls.psk_identity].domain',)))"
                }
            },
            {
                "dependencies": [
                    "i",
                    "a"
                ],
                "defn": {
                    "args": "(Apply(Const('vector[tls.psk_identity].value', FunctionSort(UninterpretedSort('vector[tls.psk_identity]',), UninterpretedSort('vector[tls.psk_identity].domain',), UninterpretedSort('tls.psk_identity',))), Const('a', UninterpretedSort('vector[tls.psk_identity]',)), Const('i', UninterpretedSort('vector[tls.psk_identity].domain',))), <ivy.ivy_ast.NativeExpr object at 0x7fd8f0f6aad0>)"
                }
            },
            {
                "dependencies": [
                    "a"
                ],
                "defn": {
                    "args": "(Apply(Const('vector[tls.psk_identity].end', FunctionSort(UninterpretedSort('vector[tls.psk_identity]',), UninterpretedSort('vector[tls.psk_identity].domain',))), Const('a', UninterpretedSort('vector[tls.psk_identity]',))), <ivy.ivy_ast.NativeExpr object at 0x7fd8f0f6b310>)"
                }
            },
            {
                "dependencies": [],
                "defn": {
                    "args": "(Apply(Const('vector[tls.psk_identity].segment', FunctionSort(UninterpretedSort('vector[tls.psk_identity]',), UninterpretedSort('vector[tls.psk_identity].domain',), UninterpretedSort('vector[tls.psk_identity].domain',), UninterpretedSort('vector[tls.psk_identity]',))), Const('a', UninterpretedSort('vector[tls.psk_identity]',)), Const('lo', UninterpretedSort('vector[tls.psk_identity].domain',)), Const('hi', UninterpretedSort('vector[tls.psk_identity].domain',))), <ivy.ivy_ast.NativeExpr object at 0x7fd8f0f5bc90>)"
                }
            },
            {
                "dependencies": [
                    "1:vector[tls.cipher_suite].domain",
                    "+"
                ],
                "defn": {
                    "args": "(Apply(Const('vector[tls.cipher_suite].domain.succ', FunctionSort(UninterpretedSort('vector[tls.cipher_suite].domain',), UninterpretedSort('vector[tls.cipher_suite].domain',), BooleanSort())), Var('X', UninterpretedSort('vector[tls.cipher_suite].domain',)), Var('Y', UninterpretedSort('vector[tls.cipher_suite].domain',))), Eq(Var('Y', UninterpretedSort('vector[tls.cipher_suite].domain',)), Apply(Const('+', FunctionSort(UninterpretedSort('vector[tls.cipher_suite].domain',), UninterpretedSort('vector[tls.cipher_suite].domain',), UninterpretedSort('vector[tls.cipher_suite].domain',))), Var('X', UninterpretedSort('vector[tls.cipher_suite].domain',)), Const('1', UninterpretedSort('vector[tls.cipher_suite].domain',)))))"
                }
            },
            {
                "dependencies": [
                    "0:vector[tls.cipher_suite].domain"
                ],
                "defn": {
                    "args": "(Apply(Const('vector[tls.cipher_suite].begin', FunctionSort(UninterpretedSort('vector[tls.cipher_suite]',), UninterpretedSort('vector[tls.cipher_suite].domain',))), Var('A', UninterpretedSort('vector[tls.cipher_suite]',))), Const('0', UninterpretedSort('vector[tls.cipher_suite].domain',)))"
                }
            },
            {
                "dependencies": [
                    "a",
                    "i"
                ],
                "defn": {
                    "args": "(Apply(Const('vector[tls.cipher_suite].value', FunctionSort(UninterpretedSort('vector[tls.cipher_suite]',), UninterpretedSort('vector[tls.cipher_suite].domain',), UninterpretedSort('tls.cipher_suite',))), Const('a', UninterpretedSort('vector[tls.cipher_suite]',)), Const('i', UninterpretedSort('vector[tls.cipher_suite].domain',))), <ivy.ivy_ast.NativeExpr object at 0x7fd8f0f2d450>)"
                }
            },
            {
                "dependencies": [
                    "a"
                ],
                "defn": {
                    "args": "(Apply(Const('vector[tls.cipher_suite].end', FunctionSort(UninterpretedSort('vector[tls.cipher_suite]',), UninterpretedSort('vector[tls.cipher_suite].domain',))), Const('a', UninterpretedSort('vector[tls.cipher_suite]',))), <ivy.ivy_ast.NativeExpr object at 0x7fd8f0f32150>)"
                }
            },
            {
                "dependencies": [],
                "defn": {
                    "args": "(Apply(Const('vector[tls.cipher_suite].segment', FunctionSort(UninterpretedSort('vector[tls.cipher_suite]',), UninterpretedSort('vector[tls.cipher_suite].domain',), UninterpretedSort('vector[tls.cipher_suite].domain',), UninterpretedSort('vector[tls.cipher_suite]',))), Const('a', UninterpretedSort('vector[tls.cipher_suite]',)), Const('lo', UninterpretedSort('vector[tls.cipher_suite].domain',)), Const('hi', UninterpretedSort('vector[tls.cipher_suite].domain',))), <ivy.ivy_ast.NativeExpr object at 0x7fd8f0f32790>)"
                }
            },
            {
                "dependencies": [
                    "1:vector[tls.compression_method].domain",
                    "+"
                ],
                "defn": {
                    "args": "(Apply(Const('vector[tls.compression_method].domain.succ', FunctionSort(UninterpretedSort('vector[tls.compression_method].domain',), UninterpretedSort('vector[tls.compression_method].domain',), BooleanSort())), Var('X', UninterpretedSort('vector[tls.compression_method].domain',)), Var('Y', UninterpretedSort('vector[tls.compression_method].domain',))), Eq(Var('Y', UninterpretedSort('vector[tls.compression_method].domain',)), Apply(Const('+', FunctionSort(UninterpretedSort('vector[tls.compression_method].domain',), UninterpretedSort('vector[tls.compression_method].domain',), UninterpretedSort('vector[tls.compression_method].domain',))), Var('X', UninterpretedSort('vector[tls.compression_method].domain',)), Const('1', UninterpretedSort('vector[tls.compression_method].domain',)))))"
                }
            },
            {
                "dependencies": [
                    "0:vector[tls.compression_method].domain"
                ],
                "defn": {
                    "args": "(Apply(Const('vector[tls.compression_method].begin', FunctionSort(UninterpretedSort('vector[tls.compression_method]',), UninterpretedSort('vector[tls.compression_method].domain',))), Var('A', UninterpretedSort('vector[tls.compression_method]',))), Const('0', UninterpretedSort('vector[tls.compression_method].domain',)))"
                }
            },
            {
                "dependencies": [
                    "i",
                    "a"
                ],
                "defn": {
                    "args": "(Apply(Const('vector[tls.compression_method].value', FunctionSort(UninterpretedSort('vector[tls.compression_method]',), UninterpretedSort('vector[tls.compression_method].domain',), UninterpretedSort('tls.compression_method',))), Const('a', UninterpretedSort('vector[tls.compression_method]',)), Const('i', UninterpretedSort('vector[tls.compression_method].domain',))), <ivy.ivy_ast.NativeExpr object at 0x7fd8f0ebd110>)"
                }
            },
            {
                "dependencies": [
                    "a"
                ],
                "defn": {
                    "args": "(Apply(Const('vector[tls.compression_method].end', FunctionSort(UninterpretedSort('vector[tls.compression_method]',), UninterpretedSort('vector[tls.compression_method].domain',))), Const('a', UninterpretedSort('vector[tls.compression_method]',))), <ivy.ivy_ast.NativeExpr object at 0x7fd8f0ec6f50>)"
                }
            },
            {
                "dependencies": [],
                "defn": {
                    "args": "(Apply(Const('vector[tls.compression_method].segment', FunctionSort(UninterpretedSort('vector[tls.compression_method]',), UninterpretedSort('vector[tls.compression_method].domain',), UninterpretedSort('vector[tls.compression_method].domain',), UninterpretedSort('vector[tls.compression_method]',))), Const('a', UninterpretedSort('vector[tls.compression_method]',)), Const('lo', UninterpretedSort('vector[tls.compression_method].domain',)), Const('hi', UninterpretedSort('vector[tls.compression_method].domain',))), <ivy.ivy_ast.NativeExpr object at 0x7fd8f0ec6350>)"
                }
            },
            {
                "dependencies": [
                    "1:vector[tls.extension].domain",
                    "+"
                ],
                "defn": {
                    "args": "(Apply(Const('vector[tls.extension].domain.succ', FunctionSort(UninterpretedSort('vector[tls.extension].domain',), UninterpretedSort('vector[tls.extension].domain',), BooleanSort())), Var('X', UninterpretedSort('vector[tls.extension].domain',)), Var('Y', UninterpretedSort('vector[tls.extension].domain',))), Eq(Var('Y', UninterpretedSort('vector[tls.extension].domain',)), Apply(Const('+', FunctionSort(UninterpretedSort('vector[tls.extension].domain',), UninterpretedSort('vector[tls.extension].domain',), UninterpretedSort('vector[tls.extension].domain',))), Var('X', UninterpretedSort('vector[tls.extension].domain',)), Const('1', UninterpretedSort('vector[tls.extension].domain',)))))"
                }
            },
            {
                "dependencies": [
                    "0:vector[tls.extension].domain"
                ],
                "defn": {
                    "args": "(Apply(Const('vector[tls.extension].begin', FunctionSort(UninterpretedSort('vector[tls.extension]',), UninterpretedSort('vector[tls.extension].domain',))), Var('A', UninterpretedSort('vector[tls.extension]',))), Const('0', UninterpretedSort('vector[tls.extension].domain',)))"
                }
            },
            {
                "dependencies": [
                    "i",
                    "a"
                ],
                "defn": {
                    "args": "(Apply(Const('vector[tls.extension].value', FunctionSort(UninterpretedSort('vector[tls.extension]',), UninterpretedSort('vector[tls.extension].domain',), UninterpretedSort('tls.extension',))), Const('a', UninterpretedSort('vector[tls.extension]',)), Const('i', UninterpretedSort('vector[tls.extension].domain',))), <ivy.ivy_ast.NativeExpr object at 0x7fd8f0ed1d90>)"
                }
            },
            {
                "dependencies": [
                    "a"
                ],
                "defn": {
                    "args": "(Apply(Const('vector[tls.extension].end', FunctionSort(UninterpretedSort('vector[tls.extension]',), UninterpretedSort('vector[tls.extension].domain',))), Const('a', UninterpretedSort('vector[tls.extension]',))), <ivy.ivy_ast.NativeExpr object at 0x7fd8f0edefd0>)"
                }
            },
            {
                "dependencies": [],
                "defn": {
                    "args": "(Apply(Const('vector[tls.extension].segment', FunctionSort(UninterpretedSort('vector[tls.extension]',), UninterpretedSort('vector[tls.extension].domain',), UninterpretedSort('vector[tls.extension].domain',), UninterpretedSort('vector[tls.extension]',))), Const('a', UninterpretedSort('vector[tls.extension]',)), Const('lo', UninterpretedSort('vector[tls.extension].domain',)), Const('hi', UninterpretedSort('vector[tls.extension].domain',))), <ivy.ivy_ast.NativeExpr object at 0x7fd8f0ede410>)"
                }
            },
            {
                "dependencies": [
                    "+",
                    "1:vector[tls.handshake].domain"
                ],
                "defn": {
                    "args": "(Apply(Const('vector[tls.handshake].domain.succ', FunctionSort(UninterpretedSort('vector[tls.handshake].domain',), UninterpretedSort('vector[tls.handshake].domain',), BooleanSort())), Var('X', UninterpretedSort('vector[tls.handshake].domain',)), Var('Y', UninterpretedSort('vector[tls.handshake].domain',))), Eq(Var('Y', UninterpretedSort('vector[tls.handshake].domain',)), Apply(Const('+', FunctionSort(UninterpretedSort('vector[tls.handshake].domain',), UninterpretedSort('vector[tls.handshake].domain',), UninterpretedSort('vector[tls.handshake].domain',))), Var('X', UninterpretedSort('vector[tls.handshake].domain',)), Const('1', UninterpretedSort('vector[tls.handshake].domain',)))))"
                }
            },
            {
                "dependencies": [
                    "0:vector[tls.handshake].domain"
                ],
                "defn": {
                    "args": "(Apply(Const('vector[tls.handshake].begin', FunctionSort(UninterpretedSort('vector[tls.handshake]',), UninterpretedSort('vector[tls.handshake].domain',))), Var('A', UninterpretedSort('vector[tls.handshake]',))), Const('0', UninterpretedSort('vector[tls.handshake].domain',)))"
                }
            },
            {
                "dependencies": [
                    "a",
                    "i"
                ],
                "defn": {
                    "args": "(Apply(Const('vector[tls.handshake].value', FunctionSort(UninterpretedSort('vector[tls.handshake]',), UninterpretedSort('vector[tls.handshake].domain',), UninterpretedSort('tls.handshake',))), Const('a', UninterpretedSort('vector[tls.handshake]',)), Const('i', UninterpretedSort('vector[tls.handshake].domain',))), <ivy.ivy_ast.NativeExpr object at 0x7fd8f0ee1050>)"
                }
            },
            {
                "dependencies": [
                    "a"
                ],
                "defn": {
                    "args": "(Apply(Const('vector[tls.handshake].end', FunctionSort(UninterpretedSort('vector[tls.handshake]',), UninterpretedSort('vector[tls.handshake].domain',))), Const('a', UninterpretedSort('vector[tls.handshake]',))), <ivy.ivy_ast.NativeExpr object at 0x7fd8f0ee1310>)"
                }
            },
            {
                "dependencies": [],
                "defn": {
                    "args": "(Apply(Const('vector[tls.handshake].segment', FunctionSort(UninterpretedSort('vector[tls.handshake]',), UninterpretedSort('vector[tls.handshake].domain',), UninterpretedSort('vector[tls.handshake].domain',), UninterpretedSort('vector[tls.handshake]',))), Const('a', UninterpretedSort('vector[tls.handshake]',)), Const('lo', UninterpretedSort('vector[tls.handshake].domain',)), Const('hi', UninterpretedSort('vector[tls.handshake].domain',))), <ivy.ivy_ast.NativeExpr object at 0x7fd8f0ee36d0>)"
                }
            },
            {
                "dependencies": [
                    "+",
                    "1:tls.handshakes.domain"
                ],
                "defn": {
                    "args": "(Apply(Const('tls.handshakes.domain.succ', FunctionSort(UninterpretedSort('tls.handshakes.domain',), UninterpretedSort('tls.handshakes.domain',), BooleanSort())), Var('X', UninterpretedSort('tls.handshakes.domain',)), Var('Y', UninterpretedSort('tls.handshakes.domain',))), Eq(Var('Y', UninterpretedSort('tls.handshakes.domain',)), Apply(Const('+', FunctionSort(UninterpretedSort('tls.handshakes.domain',), UninterpretedSort('tls.handshakes.domain',), UninterpretedSort('tls.handshakes.domain',))), Var('X', UninterpretedSort('tls.handshakes.domain',)), Const('1', UninterpretedSort('tls.handshakes.domain',)))))"
                }
            },
            {
                "dependencies": [
                    "0:tls.handshakes.domain"
                ],
                "defn": {
                    "args": "(Apply(Const('tls.handshakes.begin', FunctionSort(UninterpretedSort('tls.handshakes',), UninterpretedSort('tls.handshakes.domain',))), Var('A', UninterpretedSort('tls.handshakes',))), Const('0', UninterpretedSort('tls.handshakes.domain',)))"
                }
            },
            {
                "dependencies": [
                    "i",
                    "a"
                ],
                "defn": {
                    "args": "(Apply(Const('tls.handshakes.value', FunctionSort(UninterpretedSort('tls.handshakes',), UninterpretedSort('tls.handshakes.domain',), UninterpretedSort('tls.handshake',))), Const('a', UninterpretedSort('tls.handshakes',)), Const('i', UninterpretedSort('tls.handshakes.domain',))), <ivy.ivy_ast.NativeExpr object at 0x7fd8f0e83790>)"
                }
            },
            {
                "dependencies": [
                    "a"
                ],
                "defn": {
                    "args": "(Apply(Const('tls.handshakes.end', FunctionSort(UninterpretedSort('tls.handshakes',), UninterpretedSort('tls.handshakes.domain',))), Const('a', UninterpretedSort('tls.handshakes',))), <ivy.ivy_ast.NativeExpr object at 0x7fd8f0e83290>)"
                }
            },
            {
                "dependencies": [],
                "defn": {
                    "args": "(Apply(Const('tls.handshakes.segment', FunctionSort(UninterpretedSort('tls.handshakes',), UninterpretedSort('tls.handshakes.domain',), UninterpretedSort('tls.handshakes.domain',), UninterpretedSort('tls.handshakes',))), Const('a', UninterpretedSort('tls.handshakes',)), Const('lo', UninterpretedSort('tls.handshakes.domain',)), Const('hi', UninterpretedSort('tls.handshakes.domain',))), <ivy.ivy_ast.NativeExpr object at 0x7fd8f0e91e10>)"
                }
            },
            {
                "dependencies": [
                    "1:frame.ack.range.idx",
                    "+"
                ],
                "defn": {
                    "args": "(Apply(Const('frame.ack.range.idx.succ', FunctionSort(UninterpretedSort('frame.ack.range.idx',), UninterpretedSort('frame.ack.range.idx',), BooleanSort())), Var('X', UninterpretedSort('frame.ack.range.idx',)), Var('Y', UninterpretedSort('frame.ack.range.idx',))), Eq(Var('Y', UninterpretedSort('frame.ack.range.idx',)), Apply(Const('+', FunctionSort(UninterpretedSort('frame.ack.range.idx',), UninterpretedSort('frame.ack.range.idx',), UninterpretedSort('frame.ack.range.idx',))), Var('X', UninterpretedSort('frame.ack.range.idx',)), Const('1', UninterpretedSort('frame.ack.range.idx',)))))"
                }
            },
            {
                "dependencies": [
                    "0:frame.ack.range.idx"
                ],
                "defn": {
                    "args": "(Apply(Const('frame.ack.range.arr.begin', FunctionSort(UninterpretedSort('frame.ack.range.arr',), UninterpretedSort('frame.ack.range.idx',))), Var('A', UninterpretedSort('frame.ack.range.arr',))), Const('0', UninterpretedSort('frame.ack.range.idx',)))"
                }
            },
            {
                "dependencies": [
                    "a",
                    "i"
                ],
                "defn": {
                    "args": "(Apply(Const('frame.ack.range.arr.value', FunctionSort(UninterpretedSort('frame.ack.range.arr',), UninterpretedSort('frame.ack.range.idx',), UninterpretedSort('frame.ack.range',))), Const('a', UninterpretedSort('frame.ack.range.arr',)), Const('i', UninterpretedSort('frame.ack.range.idx',))), <ivy.ivy_ast.NativeExpr object at 0x7fd8f0ea7c50>)"
                }
            },
            {
                "dependencies": [
                    "a"
                ],
                "defn": {
                    "args": "(Apply(Const('frame.ack.range.arr.end', FunctionSort(UninterpretedSort('frame.ack.range.arr',), UninterpretedSort('frame.ack.range.idx',))), Const('a', UninterpretedSort('frame.ack.range.arr',))), <ivy.ivy_ast.NativeExpr object at 0x7fd8f0ea7e50>)"
                }
            },
            {
                "dependencies": [],
                "defn": {
                    "args": "(Apply(Const('frame.ack.range.arr.segment', FunctionSort(UninterpretedSort('frame.ack.range.arr',), UninterpretedSort('frame.ack.range.idx',), UninterpretedSort('frame.ack.range.idx',), UninterpretedSort('frame.ack.range.arr',))), Const('a', UninterpretedSort('frame.ack.range.arr',)), Const('lo', UninterpretedSort('frame.ack.range.idx',)), Const('hi', UninterpretedSort('frame.ack.range.idx',))), <ivy.ivy_ast.NativeExpr object at 0x7fd8f0ea7c10>)"
                }
            },
            {
                "dependencies": [
                    "+",
                    "1:frame.ack_ecn.range.idx"
                ],
                "defn": {
                    "args": "(Apply(Const('frame.ack_ecn.range.idx.succ', FunctionSort(UninterpretedSort('frame.ack_ecn.range.idx',), UninterpretedSort('frame.ack_ecn.range.idx',), BooleanSort())), Var('X', UninterpretedSort('frame.ack_ecn.range.idx',)), Var('Y', UninterpretedSort('frame.ack_ecn.range.idx',))), Eq(Var('Y', UninterpretedSort('frame.ack_ecn.range.idx',)), Apply(Const('+', FunctionSort(UninterpretedSort('frame.ack_ecn.range.idx',), UninterpretedSort('frame.ack_ecn.range.idx',), UninterpretedSort('frame.ack_ecn.range.idx',))), Var('X', UninterpretedSort('frame.ack_ecn.range.idx',)), Const('1', UninterpretedSort('frame.ack_ecn.range.idx',)))))"
                }
            },
            {
                "dependencies": [
                    "0:frame.ack_ecn.range.idx"
                ],
                "defn": {
                    "args": "(Apply(Const('frame.ack_ecn.range.arr.begin', FunctionSort(UninterpretedSort('frame.ack_ecn.range.arr',), UninterpretedSort('frame.ack_ecn.range.idx',))), Var('A', UninterpretedSort('frame.ack_ecn.range.arr',))), Const('0', UninterpretedSort('frame.ack_ecn.range.idx',)))"
                }
            },
            {
                "dependencies": [
                    "i",
                    "a"
                ],
                "defn": {
                    "args": "(Apply(Const('frame.ack_ecn.range.arr.value', FunctionSort(UninterpretedSort('frame.ack_ecn.range.arr',), UninterpretedSort('frame.ack_ecn.range.idx',), UninterpretedSort('frame.ack_ecn.range',))), Const('a', UninterpretedSort('frame.ack_ecn.range.arr',)), Const('i', UninterpretedSort('frame.ack_ecn.range.idx',))), <ivy.ivy_ast.NativeExpr object at 0x7fd8f0e3c8d0>)"
                }
            },
            {
                "dependencies": [
                    "a"
                ],
                "defn": {
                    "args": "(Apply(Const('frame.ack_ecn.range.arr.end', FunctionSort(UninterpretedSort('frame.ack_ecn.range.arr',), UninterpretedSort('frame.ack_ecn.range.idx',))), Const('a', UninterpretedSort('frame.ack_ecn.range.arr',))), <ivy.ivy_ast.NativeExpr object at 0x7fd8f0e3bb10>)"
                }
            },
            {
                "dependencies": [],
                "defn": {
                    "args": "(Apply(Const('frame.ack_ecn.range.arr.segment', FunctionSort(UninterpretedSort('frame.ack_ecn.range.arr',), UninterpretedSort('frame.ack_ecn.range.idx',), UninterpretedSort('frame.ack_ecn.range.idx',), UninterpretedSort('frame.ack_ecn.range.arr',))), Const('a', UninterpretedSort('frame.ack_ecn.range.arr',)), Const('lo', UninterpretedSort('frame.ack_ecn.range.idx',)), Const('hi', UninterpretedSort('frame.ack_ecn.range.idx',))), <ivy.ivy_ast.NativeExpr object at 0x7fd8f0e3b390>)"
                }
            },
            {
                "dependencies": [
                    "1:frame.idx",
                    "+"
                ],
                "defn": {
                    "args": "(Apply(Const('frame.idx.succ', FunctionSort(UninterpretedSort('frame.idx',), UninterpretedSort('frame.idx',), BooleanSort())), Var('X', UninterpretedSort('frame.idx',)), Var('Y', UninterpretedSort('frame.idx',))), Eq(Var('Y', UninterpretedSort('frame.idx',)), Apply(Const('+', FunctionSort(UninterpretedSort('frame.idx',), UninterpretedSort('frame.idx',), UninterpretedSort('frame.idx',))), Var('X', UninterpretedSort('frame.idx',)), Const('1', UninterpretedSort('frame.idx',)))))"
                }
            },
            {
                "dependencies": [
                    "0:frame.idx"
                ],
                "defn": {
                    "args": "(Apply(Const('frame.arr.begin', FunctionSort(UninterpretedSort('frame.arr',), UninterpretedSort('frame.idx',))), Var('A', UninterpretedSort('frame.arr',))), Const('0', UninterpretedSort('frame.idx',)))"
                }
            },
            {
                "dependencies": [
                    "i",
                    "a"
                ],
                "defn": {
                    "args": "(Apply(Const('frame.arr.value', FunctionSort(UninterpretedSort('frame.arr',), UninterpretedSort('frame.idx',), UninterpretedSort('frame',))), Const('a', UninterpretedSort('frame.arr',)), Const('i', UninterpretedSort('frame.idx',))), <ivy.ivy_ast.NativeExpr object at 0x7fd8f0ead410>)"
                }
            },
            {
                "dependencies": [
                    "a"
                ],
                "defn": {
                    "args": "(Apply(Const('frame.arr.end', FunctionSort(UninterpretedSort('frame.arr',), UninterpretedSort('frame.idx',))), Const('a', UninterpretedSort('frame.arr',))), <ivy.ivy_ast.NativeExpr object at 0x7fd8f0e4f610>)"
                }
            },
            {
                "dependencies": [],
                "defn": {
                    "args": "(Apply(Const('frame.arr.segment', FunctionSort(UninterpretedSort('frame.arr',), UninterpretedSort('frame.idx',), UninterpretedSort('frame.idx',), UninterpretedSort('frame.arr',))), Const('a', UninterpretedSort('frame.arr',)), Const('lo', UninterpretedSort('frame.idx',)), Const('hi', UninterpretedSort('frame.idx',))), <ivy.ivy_ast.NativeExpr object at 0x7fd8f0e5b390>)"
                }
            },
            {
                "dependencies": [
                    "1:index",
                    "+"
                ],
                "defn": {
                    "args": "(Apply(Const('index.succ', FunctionSort(UninterpretedSort('index',), UninterpretedSort('index',), BooleanSort())), Var('X', UninterpretedSort('index',)), Var('Y', UninterpretedSort('index',))), Eq(Var('Y', UninterpretedSort('index',)), Apply(Const('+', FunctionSort(UninterpretedSort('index',), UninterpretedSort('index',), UninterpretedSort('index',))), Var('X', UninterpretedSort('index',)), Const('1', UninterpretedSort('index',)))))"
                }
            },
            {
                "dependencies": [
                    "0:index"
                ],
                "defn": {
                    "args": "(Apply(Const('versions.begin', FunctionSort(UninterpretedSort('versions',), UninterpretedSort('index',))), Var('A', UninterpretedSort('versions',))), Const('0', UninterpretedSort('index',)))"
                }
            },
            {
                "dependencies": [
                    "i",
                    "a"
                ],
                "defn": {
                    "args": "(Apply(Const('versions.value', FunctionSort(UninterpretedSort('versions',), UninterpretedSort('index',), UninterpretedSort('stream_data',))), Const('a', UninterpretedSort('versions',)), Const('i', UninterpretedSort('index',))), <ivy.ivy_ast.NativeExpr object at 0x7fd8f0e758d0>)"
                }
            },
            {
                "dependencies": [
                    "a"
                ],
                "defn": {
                    "args": "(Apply(Const('versions.end', FunctionSort(UninterpretedSort('versions',), UninterpretedSort('index',))), Const('a', UninterpretedSort('versions',))), <ivy.ivy_ast.NativeExpr object at 0x7fd8f0e75ad0>)"
                }
            },
            {
                "dependencies": [],
                "defn": {
                    "args": "(Apply(Const('versions.segment', FunctionSort(UninterpretedSort('versions',), UninterpretedSort('index',), UninterpretedSort('index',), UninterpretedSort('versions',))), Const('a', UninterpretedSort('versions',)), Const('lo', UninterpretedSort('index',)), Const('hi', UninterpretedSort('index',))), <ivy.ivy_ast.NativeExpr object at 0x7fd8f0e42a50>)"
                }
            },
            {
                "dependencies": [
                    "0:index"
                ],
                "defn": {
                    "args": "(Apply(Const('versions_bv.begin', FunctionSort(UninterpretedSort('versions_bv',), UninterpretedSort('index',))), Var('A', UninterpretedSort('versions_bv',))), Const('0', UninterpretedSort('index',)))"
                }
            },
            {
                "dependencies": [
                    "i",
                    "a"
                ],
                "defn": {
                    "args": "(Apply(Const('versions_bv.value', FunctionSort(UninterpretedSort('versions_bv',), UninterpretedSort('index',), UninterpretedSort('version',))), Const('a', UninterpretedSort('versions_bv',)), Const('i', UninterpretedSort('index',))), <ivy.ivy_ast.NativeExpr object at 0x7fd8f0e42310>)"
                }
            },
            {
                "dependencies": [
                    "a"
                ],
                "defn": {
                    "args": "(Apply(Const('versions_bv.end', FunctionSort(UninterpretedSort('versions_bv',), UninterpretedSort('index',))), Const('a', UninterpretedSort('versions_bv',))), <ivy.ivy_ast.NativeExpr object at 0x7fd8f0e79090>)"
                }
            },
            {
                "dependencies": [],
                "defn": {
                    "args": "(Apply(Const('versions_bv.segment', FunctionSort(UninterpretedSort('versions_bv',), UninterpretedSort('index',), UninterpretedSort('index',), UninterpretedSort('versions_bv',))), Const('a', UninterpretedSort('versions_bv',)), Const('lo', UninterpretedSort('index',)), Const('hi', UninterpretedSort('index',))), <ivy.ivy_ast.NativeExpr object at 0x7fd8f0e79510>)"
                }
            },
            {
                "dependencies": [
                    "1:quic_packet_vn.idx",
                    "+"
                ],
                "defn": {
                    "args": "(Apply(Const('quic_packet_vn.idx.succ', FunctionSort(UninterpretedSort('quic_packet_vn.idx',), UninterpretedSort('quic_packet_vn.idx',), BooleanSort())), Var('X', UninterpretedSort('quic_packet_vn.idx',)), Var('Y', UninterpretedSort('quic_packet_vn.idx',))), Eq(Var('Y', UninterpretedSort('quic_packet_vn.idx',)), Apply(Const('+', FunctionSort(UninterpretedSort('quic_packet_vn.idx',), UninterpretedSort('quic_packet_vn.idx',), UninterpretedSort('quic_packet_vn.idx',))), Var('X', UninterpretedSort('quic_packet_vn.idx',)), Const('1', UninterpretedSort('quic_packet_vn.idx',)))))"
                }
            },
            {
                "dependencies": [
                    "0:quic_packet_vn.idx"
                ],
                "defn": {
                    "args": "(Apply(Const('quic_packet_vn.arr.begin', FunctionSort(UninterpretedSort('quic_packet_vn.arr',), UninterpretedSort('quic_packet_vn.idx',))), Var('A', UninterpretedSort('quic_packet_vn.arr',))), Const('0', UninterpretedSort('quic_packet_vn.idx',)))"
                }
            },
            {
                "dependencies": [
                    "i",
                    "a"
                ],
                "defn": {
                    "args": "(Apply(Const('quic_packet_vn.arr.value', FunctionSort(UninterpretedSort('quic_packet_vn.arr',), UninterpretedSort('quic_packet_vn.idx',), UninterpretedSort('quic_packet_vn',))), Const('a', UninterpretedSort('quic_packet_vn.arr',)), Const('i', UninterpretedSort('quic_packet_vn.idx',))), <ivy.ivy_ast.NativeExpr object at 0x7fd8f0e0b5d0>)"
                }
            },
            {
                "dependencies": [
                    "a"
                ],
                "defn": {
                    "args": "(Apply(Const('quic_packet_vn.arr.end', FunctionSort(UninterpretedSort('quic_packet_vn.arr',), UninterpretedSort('quic_packet_vn.idx',))), Const('a', UninterpretedSort('quic_packet_vn.arr',))), <ivy.ivy_ast.NativeExpr object at 0x7fd8f0e0bbd0>)"
                }
            },
            {
                "dependencies": [],
                "defn": {
                    "args": "(Apply(Const('quic_packet_vn.arr.segment', FunctionSort(UninterpretedSort('quic_packet_vn.arr',), UninterpretedSort('quic_packet_vn.idx',), UninterpretedSort('quic_packet_vn.idx',), UninterpretedSort('quic_packet_vn.arr',))), Const('a', UninterpretedSort('quic_packet_vn.arr',)), Const('lo', UninterpretedSort('quic_packet_vn.idx',)), Const('hi', UninterpretedSort('quic_packet_vn.idx',))), <ivy.ivy_ast.NativeExpr object at 0x7fd8f0e0cc90>)"
                }
            },
            {
                "dependencies": [
                    "+",
                    "1:vector[transport_parameter].domain"
                ],
                "defn": {
                    "args": "(Apply(Const('vector[transport_parameter].domain.succ', FunctionSort(UninterpretedSort('vector[transport_parameter].domain',), UninterpretedSort('vector[transport_parameter].domain',), BooleanSort())), Var('X', UninterpretedSort('vector[transport_parameter].domain',)), Var('Y', UninterpretedSort('vector[transport_parameter].domain',))), Eq(Var('Y', UninterpretedSort('vector[transport_parameter].domain',)), Apply(Const('+', FunctionSort(UninterpretedSort('vector[transport_parameter].domain',), UninterpretedSort('vector[transport_parameter].domain',), UninterpretedSort('vector[transport_parameter].domain',))), Var('X', UninterpretedSort('vector[transport_parameter].domain',)), Const('1', UninterpretedSort('vector[transport_parameter].domain',)))))"
                }
            },
            {
                "dependencies": [
                    "0:vector[transport_parameter].domain"
                ],
                "defn": {
                    "args": "(Apply(Const('vector[transport_parameter].begin', FunctionSort(UninterpretedSort('vector[transport_parameter]',), UninterpretedSort('vector[transport_parameter].domain',))), Var('A', UninterpretedSort('vector[transport_parameter]',))), Const('0', UninterpretedSort('vector[transport_parameter].domain',)))"
                }
            },
            {
                "dependencies": [
                    "i",
                    "a"
                ],
                "defn": {
                    "args": "(Apply(Const('vector[transport_parameter].value', FunctionSort(UninterpretedSort('vector[transport_parameter]',), UninterpretedSort('vector[transport_parameter].domain',), UninterpretedSort('transport_parameter',))), Const('a', UninterpretedSort('vector[transport_parameter]',)), Const('i', UninterpretedSort('vector[transport_parameter].domain',))), <ivy.ivy_ast.NativeExpr object at 0x7fd8f0e2ab10>)"
                }
            },
            {
                "dependencies": [
                    "a"
                ],
                "defn": {
                    "args": "(Apply(Const('vector[transport_parameter].end', FunctionSort(UninterpretedSort('vector[transport_parameter]',), UninterpretedSort('vector[transport_parameter].domain',))), Const('a', UninterpretedSort('vector[transport_parameter]',))), <ivy.ivy_ast.NativeExpr object at 0x7fd8f0e26550>)"
                }
            },
            {
                "dependencies": [],
                "defn": {
                    "args": "(Apply(Const('vector[transport_parameter].segment', FunctionSort(UninterpretedSort('vector[transport_parameter]',), UninterpretedSort('vector[transport_parameter].domain',), UninterpretedSort('vector[transport_parameter].domain',), UninterpretedSort('vector[transport_parameter]',))), Const('a', UninterpretedSort('vector[transport_parameter]',)), Const('lo', UninterpretedSort('vector[transport_parameter].domain',)), Const('hi', UninterpretedSort('vector[transport_parameter].domain',))), <ivy.ivy_ast.NativeExpr object at 0x7fd8f0e28050>)"
                }
            },
            {
                "dependencies": [
                    "+",
                    "1:idx_s"
                ],
                "defn": {
                    "args": "(Apply(Const('idx_s.succ', FunctionSort(UninterpretedSort('idx_s',), UninterpretedSort('idx_s',), BooleanSort())), Var('X', UninterpretedSort('idx_s',)), Var('Y', UninterpretedSort('idx_s',))), Eq(Var('Y', UninterpretedSort('idx_s',)), Apply(Const('+', FunctionSort(UninterpretedSort('idx_s',), UninterpretedSort('idx_s',), UninterpretedSort('idx_s',))), Var('X', UninterpretedSort('idx_s',)), Const('1', UninterpretedSort('idx_s',)))))"
                }
            },
            {
                "dependencies": [
                    "0:idx_s"
                ],
                "defn": {
                    "args": "(Apply(Const('arr_streamid_s.begin', FunctionSort(UninterpretedSort('arr_streamid_s',), UninterpretedSort('idx_s',))), Var('A', UninterpretedSort('arr_streamid_s',))), Const('0', UninterpretedSort('idx_s',)))"
                }
            },
            {
                "dependencies": [
                    "a",
                    "i"
                ],
                "defn": {
                    "args": "(Apply(Const('arr_streamid_s.value', FunctionSort(UninterpretedSort('arr_streamid_s',), UninterpretedSort('idx_s',), UninterpretedSort('stream_id',))), Const('a', UninterpretedSort('arr_streamid_s',)), Const('i', UninterpretedSort('idx_s',))), <ivy.ivy_ast.NativeExpr object at 0x7fd8f0e38890>)"
                }
            },
            {
                "dependencies": [
                    "a"
                ],
                "defn": {
                    "args": "(Apply(Const('arr_streamid_s.end', FunctionSort(UninterpretedSort('arr_streamid_s',), UninterpretedSort('idx_s',))), Const('a', UninterpretedSort('arr_streamid_s',))), <ivy.ivy_ast.NativeExpr object at 0x7fd8f0e386d0>)"
                }
            },
            {
                "dependencies": [],
                "defn": {
                    "args": "(Apply(Const('arr_streamid_s.segment', FunctionSort(UninterpretedSort('arr_streamid_s',), UninterpretedSort('idx_s',), UninterpretedSort('idx_s',), UninterpretedSort('arr_streamid_s',))), Const('a', UninterpretedSort('arr_streamid_s',)), Const('lo', UninterpretedSort('idx_s',)), Const('hi', UninterpretedSort('idx_s',))), <ivy.ivy_ast.NativeExpr object at 0x7fd8f0e39d50>)"
                }
            },
            {
                "dependencies": [
                    "1:jdx_s",
                    "+"
                ],
                "defn": {
                    "args": "(Apply(Const('jdx_s.succ', FunctionSort(UninterpretedSort('jdx_s',), UninterpretedSort('jdx_s',), BooleanSort())), Var('X', UninterpretedSort('jdx_s',)), Var('Y', UninterpretedSort('jdx_s',))), Eq(Var('Y', UninterpretedSort('jdx_s',)), Apply(Const('+', FunctionSort(UninterpretedSort('jdx_s',), UninterpretedSort('jdx_s',), UninterpretedSort('jdx_s',))), Var('X', UninterpretedSort('jdx_s',)), Const('1', UninterpretedSort('jdx_s',)))))"
                }
            },
            {
                "dependencies": [
                    "0:jdx_s"
                ],
                "defn": {
                    "args": "(Apply(Const('arr_pkt_num_s.begin', FunctionSort(UninterpretedSort('arr_pkt_num_s',), UninterpretedSort('jdx_s',))), Var('A', UninterpretedSort('arr_pkt_num_s',))), Const('0', UninterpretedSort('jdx_s',)))"
                }
            },
            {
                "dependencies": [
                    "i",
                    "a"
                ],
                "defn": {
                    "args": "(Apply(Const('arr_pkt_num_s.value', FunctionSort(UninterpretedSort('arr_pkt_num_s',), UninterpretedSort('jdx_s',), UninterpretedSort('pkt_num',))), Const('a', UninterpretedSort('arr_pkt_num_s',)), Const('i', UninterpretedSort('jdx_s',))), <ivy.ivy_ast.NativeExpr object at 0x7fd8f0dcc1d0>)"
                }
            },
            {
                "dependencies": [
                    "a"
                ],
                "defn": {
                    "args": "(Apply(Const('arr_pkt_num_s.end', FunctionSort(UninterpretedSort('arr_pkt_num_s',), UninterpretedSort('jdx_s',))), Const('a', UninterpretedSort('arr_pkt_num_s',))), <ivy.ivy_ast.NativeExpr object at 0x7fd8f0dc4890>)"
                }
            },
            {
                "dependencies": [],
                "defn": {
                    "args": "(Apply(Const('arr_pkt_num_s.segment', FunctionSort(UninterpretedSort('arr_pkt_num_s',), UninterpretedSort('jdx_s',), UninterpretedSort('jdx_s',), UninterpretedSort('arr_pkt_num_s',))), Const('a', UninterpretedSort('arr_pkt_num_s',)), Const('lo', UninterpretedSort('jdx_s',)), Const('hi', UninterpretedSort('jdx_s',))), <ivy.ivy_ast.NativeExpr object at 0x7fd8f0dca310>)"
                }
            },
            {
                "dependencies": [
                    "1:idx_r",
                    "+"
                ],
                "defn": {
                    "args": "(Apply(Const('idx_r.succ', FunctionSort(UninterpretedSort('idx_r',), UninterpretedSort('idx_r',), BooleanSort())), Var('X', UninterpretedSort('idx_r',)), Var('Y', UninterpretedSort('idx_r',))), Eq(Var('Y', UninterpretedSort('idx_r',)), Apply(Const('+', FunctionSort(UninterpretedSort('idx_r',), UninterpretedSort('idx_r',), UninterpretedSort('idx_r',))), Var('X', UninterpretedSort('idx_r',)), Const('1', UninterpretedSort('idx_r',)))))"
                }
            },
            {
                "dependencies": [
                    "0:idx_r"
                ],
                "defn": {
                    "args": "(Apply(Const('arr_streamid_r.begin', FunctionSort(UninterpretedSort('arr_streamid_r',), UninterpretedSort('idx_r',))), Var('A', UninterpretedSort('arr_streamid_r',))), Const('0', UninterpretedSort('idx_r',)))"
                }
            },
            {
                "dependencies": [
                    "i",
                    "a"
                ],
                "defn": {
                    "args": "(Apply(Const('arr_streamid_r.value', FunctionSort(UninterpretedSort('arr_streamid_r',), UninterpretedSort('idx_r',), UninterpretedSort('stream_id',))), Const('a', UninterpretedSort('arr_streamid_r',)), Const('i', UninterpretedSort('idx_r',))), <ivy.ivy_ast.NativeExpr object at 0x7fd8f0ddf7d0>)"
                }
            },
            {
                "dependencies": [
                    "a"
                ],
                "defn": {
                    "args": "(Apply(Const('arr_streamid_r.end', FunctionSort(UninterpretedSort('arr_streamid_r',), UninterpretedSort('idx_r',))), Const('a', UninterpretedSort('arr_streamid_r',))), <ivy.ivy_ast.NativeExpr object at 0x7fd8f0ddf190>)"
                }
            },
            {
                "dependencies": [],
                "defn": {
                    "args": "(Apply(Const('arr_streamid_r.segment', FunctionSort(UninterpretedSort('arr_streamid_r',), UninterpretedSort('idx_r',), UninterpretedSort('idx_r',), UninterpretedSort('arr_streamid_r',))), Const('a', UninterpretedSort('arr_streamid_r',)), Const('lo', UninterpretedSort('idx_r',)), Const('hi', UninterpretedSort('idx_r',))), <ivy.ivy_ast.NativeExpr object at 0x7fd8f0ddee90>)"
                }
            },
            {
                "dependencies": [
                    "+",
                    "1:jdx_r"
                ],
                "defn": {
                    "args": "(Apply(Const('jdx_r.succ', FunctionSort(UninterpretedSort('jdx_r',), UninterpretedSort('jdx_r',), BooleanSort())), Var('X', UninterpretedSort('jdx_r',)), Var('Y', UninterpretedSort('jdx_r',))), Eq(Var('Y', UninterpretedSort('jdx_r',)), Apply(Const('+', FunctionSort(UninterpretedSort('jdx_r',), UninterpretedSort('jdx_r',), UninterpretedSort('jdx_r',))), Var('X', UninterpretedSort('jdx_r',)), Const('1', UninterpretedSort('jdx_r',)))))"
                }
            },
            {
                "dependencies": [
                    "0:jdx_r"
                ],
                "defn": {
                    "args": "(Apply(Const('arr_pkt_num_r.begin', FunctionSort(UninterpretedSort('arr_pkt_num_r',), UninterpretedSort('jdx_r',))), Var('A', UninterpretedSort('arr_pkt_num_r',))), Const('0', UninterpretedSort('jdx_r',)))"
                }
            },
            {
                "dependencies": [
                    "i",
                    "a"
                ],
                "defn": {
                    "args": "(Apply(Const('arr_pkt_num_r.value', FunctionSort(UninterpretedSort('arr_pkt_num_r',), UninterpretedSort('jdx_r',), UninterpretedSort('pkt_num',))), Const('a', UninterpretedSort('arr_pkt_num_r',)), Const('i', UninterpretedSort('jdx_r',))), <ivy.ivy_ast.NativeExpr object at 0x7fd8f0df0210>)"
                }
            },
            {
                "dependencies": [
                    "a"
                ],
                "defn": {
                    "args": "(Apply(Const('arr_pkt_num_r.end', FunctionSort(UninterpretedSort('arr_pkt_num_r',), UninterpretedSort('jdx_r',))), Const('a', UninterpretedSort('arr_pkt_num_r',))), <ivy.ivy_ast.NativeExpr object at 0x7fd8f0ddd7d0>)"
                }
            },
            {
                "dependencies": [],
                "defn": {
                    "args": "(Apply(Const('arr_pkt_num_r.segment', FunctionSort(UninterpretedSort('arr_pkt_num_r',), UninterpretedSort('jdx_r',), UninterpretedSort('jdx_r',), UninterpretedSort('arr_pkt_num_r',))), Const('a', UninterpretedSort('arr_pkt_num_r',)), Const('lo', UninterpretedSort('jdx_r',)), Const('hi', UninterpretedSort('jdx_r',))), <ivy.ivy_ast.NativeExpr object at 0x7fd8f0ded390>)"
                }
            },
            {
                "dependencies": [
                    "1:quic_packet.idx",
                    "+"
                ],
                "defn": {
                    "args": "(Apply(Const('quic_packet.idx.succ', FunctionSort(UninterpretedSort('quic_packet.idx',), UninterpretedSort('quic_packet.idx',), BooleanSort())), Var('X', UninterpretedSort('quic_packet.idx',)), Var('Y', UninterpretedSort('quic_packet.idx',))), Eq(Var('Y', UninterpretedSort('quic_packet.idx',)), Apply(Const('+', FunctionSort(UninterpretedSort('quic_packet.idx',), UninterpretedSort('quic_packet.idx',), UninterpretedSort('quic_packet.idx',))), Var('X', UninterpretedSort('quic_packet.idx',)), Const('1', UninterpretedSort('quic_packet.idx',)))))"
                }
            },
            {
                "dependencies": [
                    "0:quic_packet.idx"
                ],
                "defn": {
                    "args": "(Apply(Const('quic_packet.arr.begin', FunctionSort(UninterpretedSort('quic_packet.arr',), UninterpretedSort('quic_packet.idx',))), Var('A', UninterpretedSort('quic_packet.arr',))), Const('0', UninterpretedSort('quic_packet.idx',)))"
                }
            },
            {
                "dependencies": [
                    "i",
                    "a"
                ],
                "defn": {
                    "args": "(Apply(Const('quic_packet.arr.value', FunctionSort(UninterpretedSort('quic_packet.arr',), UninterpretedSort('quic_packet.idx',), UninterpretedSort('quic_packet',))), Const('a', UninterpretedSort('quic_packet.arr',)), Const('i', UninterpretedSort('quic_packet.idx',))), <ivy.ivy_ast.NativeExpr object at 0x7fd8f0d828d0>)"
                }
            },
            {
                "dependencies": [
                    "a"
                ],
                "defn": {
                    "args": "(Apply(Const('quic_packet.arr.end', FunctionSort(UninterpretedSort('quic_packet.arr',), UninterpretedSort('quic_packet.idx',))), Const('a', UninterpretedSort('quic_packet.arr',))), <ivy.ivy_ast.NativeExpr object at 0x7fd8f0d818d0>)"
                }
            },
            {
                "dependencies": [],
                "defn": {
                    "args": "(Apply(Const('quic_packet.arr.segment', FunctionSort(UninterpretedSort('quic_packet.arr',), UninterpretedSort('quic_packet.idx',), UninterpretedSort('quic_packet.idx',), UninterpretedSort('quic_packet.arr',))), Const('a', UninterpretedSort('quic_packet.arr',)), Const('lo', UninterpretedSort('quic_packet.idx',)), Const('hi', UninterpretedSort('quic_packet.idx',))), <ivy.ivy_ast.NativeExpr object at 0x7fd8f0d81e10>)"
                }
            },
            {
                "dependencies": [
                    "0:quic_packet.idx"
                ],
                "defn": {
                    "args": "(Apply(Const('quic_packet.retired_cids.begin', FunctionSort(UninterpretedSort('quic_packet.retired_cids',), UninterpretedSort('quic_packet.idx',))), Var('A', UninterpretedSort('quic_packet.retired_cids',))), Const('0', UninterpretedSort('quic_packet.idx',)))"
                }
            },
            {
                "dependencies": [
                    "i",
                    "a"
                ],
                "defn": {
                    "args": "(Apply(Const('quic_packet.retired_cids.value', FunctionSort(UninterpretedSort('quic_packet.retired_cids',), UninterpretedSort('quic_packet.idx',), UninterpretedSort('cid_seq',))), Const('a', UninterpretedSort('quic_packet.retired_cids',)), Const('i', UninterpretedSort('quic_packet.idx',))), <ivy.ivy_ast.NativeExpr object at 0x7fd8f0d7ff90>)"
                }
            },
            {
                "dependencies": [
                    "a"
                ],
                "defn": {
                    "args": "(Apply(Const('quic_packet.retired_cids.end', FunctionSort(UninterpretedSort('quic_packet.retired_cids',), UninterpretedSort('quic_packet.idx',))), Const('a', UninterpretedSort('quic_packet.retired_cids',))), <ivy.ivy_ast.NativeExpr object at 0x7fd8f0d80110>)"
                }
            },
            {
                "dependencies": [],
                "defn": {
                    "args": "(Apply(Const('quic_packet.retired_cids.segment', FunctionSort(UninterpretedSort('quic_packet.retired_cids',), UninterpretedSort('quic_packet.idx',), UninterpretedSort('quic_packet.idx',), UninterpretedSort('quic_packet.retired_cids',))), Const('a', UninterpretedSort('quic_packet.retired_cids',)), Const('lo', UninterpretedSort('quic_packet.idx',)), Const('hi', UninterpretedSort('quic_packet.idx',))), <ivy.ivy_ast.NativeExpr object at 0x7fd8f0d80b90>)"
                }
            },
            {
                "dependencies": [
                    "+",
                    "1:quic_packet_retry.idx"
                ],
                "defn": {
                    "args": "(Apply(Const('quic_packet_retry.idx.succ', FunctionSort(UninterpretedSort('quic_packet_retry.idx',), UninterpretedSort('quic_packet_retry.idx',), BooleanSort())), Var('X', UninterpretedSort('quic_packet_retry.idx',)), Var('Y', UninterpretedSort('quic_packet_retry.idx',))), Eq(Var('Y', UninterpretedSort('quic_packet_retry.idx',)), Apply(Const('+', FunctionSort(UninterpretedSort('quic_packet_retry.idx',), UninterpretedSort('quic_packet_retry.idx',), UninterpretedSort('quic_packet_retry.idx',))), Var('X', UninterpretedSort('quic_packet_retry.idx',)), Const('1', UninterpretedSort('quic_packet_retry.idx',)))))"
                }
            },
            {
                "dependencies": [
                    "0:quic_packet_retry.idx"
                ],
                "defn": {
                    "args": "(Apply(Const('quic_packet_retry.arr.begin', FunctionSort(UninterpretedSort('quic_packet_retry.arr',), UninterpretedSort('quic_packet_retry.idx',))), Var('A', UninterpretedSort('quic_packet_retry.arr',))), Const('0', UninterpretedSort('quic_packet_retry.idx',)))"
                }
            },
            {
                "dependencies": [
                    "a",
                    "i"
                ],
                "defn": {
                    "args": "(Apply(Const('quic_packet_retry.arr.value', FunctionSort(UninterpretedSort('quic_packet_retry.arr',), UninterpretedSort('quic_packet_retry.idx',), UninterpretedSort('quic_packet_retry',))), Const('a', UninterpretedSort('quic_packet_retry.arr',)), Const('i', UninterpretedSort('quic_packet_retry.idx',))), <ivy.ivy_ast.NativeExpr object at 0x7fd8f0d989d0>)"
                }
            },
            {
                "dependencies": [
                    "a"
                ],
                "defn": {
                    "args": "(Apply(Const('quic_packet_retry.arr.end', FunctionSort(UninterpretedSort('quic_packet_retry.arr',), UninterpretedSort('quic_packet_retry.idx',))), Const('a', UninterpretedSort('quic_packet_retry.arr',))), <ivy.ivy_ast.NativeExpr object at 0x7fd8f0d98950>)"
                }
            },
            {
                "dependencies": [],
                "defn": {
                    "args": "(Apply(Const('quic_packet_retry.arr.segment', FunctionSort(UninterpretedSort('quic_packet_retry.arr',), UninterpretedSort('quic_packet_retry.idx',), UninterpretedSort('quic_packet_retry.idx',), UninterpretedSort('quic_packet_retry.arr',))), Const('a', UninterpretedSort('quic_packet_retry.arr',)), Const('lo', UninterpretedSort('quic_packet_retry.idx',)), Const('hi', UninterpretedSort('quic_packet_retry.idx',))), <ivy.ivy_ast.NativeExpr object at 0x7fd8f0da2e10>)"
                }
            },
            {
                "dependencies": [
                    "0:quic_packet_retry.idx"
                ],
                "defn": {
                    "args": "(Apply(Const('quic_packet_retry.retired_cids.begin', FunctionSort(UninterpretedSort('quic_packet_retry.retired_cids',), UninterpretedSort('quic_packet_retry.idx',))), Var('A', UninterpretedSort('quic_packet_retry.retired_cids',))), Const('0', UninterpretedSort('quic_packet_retry.idx',)))"
                }
            },
            {
                "dependencies": [
                    "a",
                    "i"
                ],
                "defn": {
                    "args": "(Apply(Const('quic_packet_retry.retired_cids.value', FunctionSort(UninterpretedSort('quic_packet_retry.retired_cids',), UninterpretedSort('quic_packet_retry.idx',), UninterpretedSort('cid_seq',))), Const('a', UninterpretedSort('quic_packet_retry.retired_cids',)), Const('i', UninterpretedSort('quic_packet_retry.idx',))), <ivy.ivy_ast.NativeExpr object at 0x7fd8f0d99310>)"
                }
            },
            {
                "dependencies": [
                    "a"
                ],
                "defn": {
                    "args": "(Apply(Const('quic_packet_retry.retired_cids.end', FunctionSort(UninterpretedSort('quic_packet_retry.retired_cids',), UninterpretedSort('quic_packet_retry.idx',))), Const('a', UninterpretedSort('quic_packet_retry.retired_cids',))), <ivy.ivy_ast.NativeExpr object at 0x7fd8f0d97890>)"
                }
            },
            {
                "dependencies": [],
                "defn": {
                    "args": "(Apply(Const('quic_packet_retry.retired_cids.segment', FunctionSort(UninterpretedSort('quic_packet_retry.retired_cids',), UninterpretedSort('quic_packet_retry.idx',), UninterpretedSort('quic_packet_retry.idx',), UninterpretedSort('quic_packet_retry.retired_cids',))), Const('a', UninterpretedSort('quic_packet_retry.retired_cids',)), Const('lo', UninterpretedSort('quic_packet_retry.idx',)), Const('hi', UninterpretedSort('quic_packet_retry.idx',))), <ivy.ivy_ast.NativeExpr object at 0x7fd8f0d97510>)"
                }
            },
            {
                "dependencies": [
                    "1:quic_packet_0rtt.idx",
                    "+"
                ],
                "defn": {
                    "args": "(Apply(Const('quic_packet_0rtt.idx.succ', FunctionSort(UninterpretedSort('quic_packet_0rtt.idx',), UninterpretedSort('quic_packet_0rtt.idx',), BooleanSort())), Var('X', UninterpretedSort('quic_packet_0rtt.idx',)), Var('Y', UninterpretedSort('quic_packet_0rtt.idx',))), Eq(Var('Y', UninterpretedSort('quic_packet_0rtt.idx',)), Apply(Const('+', FunctionSort(UninterpretedSort('quic_packet_0rtt.idx',), UninterpretedSort('quic_packet_0rtt.idx',), UninterpretedSort('quic_packet_0rtt.idx',))), Var('X', UninterpretedSort('quic_packet_0rtt.idx',)), Const('1', UninterpretedSort('quic_packet_0rtt.idx',)))))"
                }
            },
            {
                "dependencies": [
                    "0:quic_packet_0rtt.idx"
                ],
                "defn": {
                    "args": "(Apply(Const('quic_packet_0rtt.arr.begin', FunctionSort(UninterpretedSort('quic_packet_0rtt.arr',), UninterpretedSort('quic_packet_0rtt.idx',))), Var('A', UninterpretedSort('quic_packet_0rtt.arr',))), Const('0', UninterpretedSort('quic_packet_0rtt.idx',)))"
                }
            },
            {
                "dependencies": [
                    "i",
                    "a"
                ],
                "defn": {
                    "args": "(Apply(Const('quic_packet_0rtt.arr.value', FunctionSort(UninterpretedSort('quic_packet_0rtt.arr',), UninterpretedSort('quic_packet_0rtt.idx',), UninterpretedSort('quic_packet_0rtt',))), Const('a', UninterpretedSort('quic_packet_0rtt.arr',)), Const('i', UninterpretedSort('quic_packet_0rtt.idx',))), <ivy.ivy_ast.NativeExpr object at 0x7fd8f0dadc90>)"
                }
            },
            {
                "dependencies": [
                    "a"
                ],
                "defn": {
                    "args": "(Apply(Const('quic_packet_0rtt.arr.end', FunctionSort(UninterpretedSort('quic_packet_0rtt.arr',), UninterpretedSort('quic_packet_0rtt.idx',))), Const('a', UninterpretedSort('quic_packet_0rtt.arr',))), <ivy.ivy_ast.NativeExpr object at 0x7fd8f0dad0d0>)"
                }
            },
            {
                "dependencies": [],
                "defn": {
                    "args": "(Apply(Const('quic_packet_0rtt.arr.segment', FunctionSort(UninterpretedSort('quic_packet_0rtt.arr',), UninterpretedSort('quic_packet_0rtt.idx',), UninterpretedSort('quic_packet_0rtt.idx',), UninterpretedSort('quic_packet_0rtt.arr',))), Const('a', UninterpretedSort('quic_packet_0rtt.arr',)), Const('lo', UninterpretedSort('quic_packet_0rtt.idx',)), Const('hi', UninterpretedSort('quic_packet_0rtt.idx',))), <ivy.ivy_ast.NativeExpr object at 0x7fd8f0daf310>)"
                }
            },
            {
                "dependencies": [
                    "0:quic_packet_0rtt.idx"
                ],
                "defn": {
                    "args": "(Apply(Const('quic_packet_0rtt.retired_cids.begin', FunctionSort(UninterpretedSort('quic_packet_0rtt.retired_cids',), UninterpretedSort('quic_packet_0rtt.idx',))), Var('A', UninterpretedSort('quic_packet_0rtt.retired_cids',))), Const('0', UninterpretedSort('quic_packet_0rtt.idx',)))"
                }
            },
            {
                "dependencies": [
                    "i",
                    "a"
                ],
                "defn": {
                    "args": "(Apply(Const('quic_packet_0rtt.retired_cids.value', FunctionSort(UninterpretedSort('quic_packet_0rtt.retired_cids',), UninterpretedSort('quic_packet_0rtt.idx',), UninterpretedSort('cid_seq',))), Const('a', UninterpretedSort('quic_packet_0rtt.retired_cids',)), Const('i', UninterpretedSort('quic_packet_0rtt.idx',))), <ivy.ivy_ast.NativeExpr object at 0x7fd8f0db0690>)"
                }
            },
            {
                "dependencies": [
                    "a"
                ],
                "defn": {
                    "args": "(Apply(Const('quic_packet_0rtt.retired_cids.end', FunctionSort(UninterpretedSort('quic_packet_0rtt.retired_cids',), UninterpretedSort('quic_packet_0rtt.idx',))), Const('a', UninterpretedSort('quic_packet_0rtt.retired_cids',))), <ivy.ivy_ast.NativeExpr object at 0x7fd8f0db1810>)"
                }
            },
            {
                "dependencies": [],
                "defn": {
                    "args": "(Apply(Const('quic_packet_0rtt.retired_cids.segment', FunctionSort(UninterpretedSort('quic_packet_0rtt.retired_cids',), UninterpretedSort('quic_packet_0rtt.idx',), UninterpretedSort('quic_packet_0rtt.idx',), UninterpretedSort('quic_packet_0rtt.retired_cids',))), Const('a', UninterpretedSort('quic_packet_0rtt.retired_cids',)), Const('lo', UninterpretedSort('quic_packet_0rtt.idx',)), Const('hi', UninterpretedSort('quic_packet_0rtt.idx',))), <ivy.ivy_ast.NativeExpr object at 0x7fd8f0db1590>)"
                }
            },
            {
                "dependencies": [
                    "+",
                    "1:quic_packet_coal_0rtt.idx"
                ],
                "defn": {
                    "args": "(Apply(Const('quic_packet_coal_0rtt.idx.succ', FunctionSort(UninterpretedSort('quic_packet_coal_0rtt.idx',), UninterpretedSort('quic_packet_coal_0rtt.idx',), BooleanSort())), Var('X', UninterpretedSort('quic_packet_coal_0rtt.idx',)), Var('Y', UninterpretedSort('quic_packet_coal_0rtt.idx',))), Eq(Var('Y', UninterpretedSort('quic_packet_coal_0rtt.idx',)), Apply(Const('+', FunctionSort(UninterpretedSort('quic_packet_coal_0rtt.idx',), UninterpretedSort('quic_packet_coal_0rtt.idx',), UninterpretedSort('quic_packet_coal_0rtt.idx',))), Var('X', UninterpretedSort('quic_packet_coal_0rtt.idx',)), Const('1', UninterpretedSort('quic_packet_coal_0rtt.idx',)))))"
                }
            },
            {
                "dependencies": [
                    "0:quic_packet_coal_0rtt.idx"
                ],
                "defn": {
                    "args": "(Apply(Const('quic_packet_coal_0rtt.arr.begin', FunctionSort(UninterpretedSort('quic_packet_coal_0rtt.arr',), UninterpretedSort('quic_packet_coal_0rtt.idx',))), Var('A', UninterpretedSort('quic_packet_coal_0rtt.arr',))), Const('0', UninterpretedSort('quic_packet_coal_0rtt.idx',)))"
                }
            },
            {
                "dependencies": [
                    "a",
                    "i"
                ],
                "defn": {
                    "args": "(Apply(Const('quic_packet_coal_0rtt.arr.value', FunctionSort(UninterpretedSort('quic_packet_coal_0rtt.arr',), UninterpretedSort('quic_packet_coal_0rtt.idx',), UninterpretedSort('quic_packet_coal_0rtt',))), Const('a', UninterpretedSort('quic_packet_coal_0rtt.arr',)), Const('i', UninterpretedSort('quic_packet_coal_0rtt.idx',))), <ivy.ivy_ast.NativeExpr object at 0x7fd8f0d49e10>)"
                }
            },
            {
                "dependencies": [
                    "a"
                ],
                "defn": {
                    "args": "(Apply(Const('quic_packet_coal_0rtt.arr.end', FunctionSort(UninterpretedSort('quic_packet_coal_0rtt.arr',), UninterpretedSort('quic_packet_coal_0rtt.idx',))), Const('a', UninterpretedSort('quic_packet_coal_0rtt.arr',))), <ivy.ivy_ast.NativeExpr object at 0x7fd8f0d48890>)"
                }
            },
            {
                "dependencies": [],
                "defn": {
                    "args": "(Apply(Const('quic_packet_coal_0rtt.arr.segment', FunctionSort(UninterpretedSort('quic_packet_coal_0rtt.arr',), UninterpretedSort('quic_packet_coal_0rtt.idx',), UninterpretedSort('quic_packet_coal_0rtt.idx',), UninterpretedSort('quic_packet_coal_0rtt.arr',))), Const('a', UninterpretedSort('quic_packet_coal_0rtt.arr',)), Const('lo', UninterpretedSort('quic_packet_coal_0rtt.idx',)), Const('hi', UninterpretedSort('quic_packet_coal_0rtt.idx',))), <ivy.ivy_ast.NativeExpr object at 0x7fd8f0d56f90>)"
                }
            },
            {
                "dependencies": [
                    "0:quic_packet_coal_0rtt.idx"
                ],
                "defn": {
                    "args": "(Apply(Const('quic_packet_coal_0rtt.retired_cids.begin', FunctionSort(UninterpretedSort('quic_packet_coal_0rtt.retired_cids',), UninterpretedSort('quic_packet_coal_0rtt.idx',))), Var('A', UninterpretedSort('quic_packet_coal_0rtt.retired_cids',))), Const('0', UninterpretedSort('quic_packet_coal_0rtt.idx',)))"
                }
            },
            {
                "dependencies": [
                    "a",
                    "i"
                ],
                "defn": {
                    "args": "(Apply(Const('quic_packet_coal_0rtt.retired_cids.value', FunctionSort(UninterpretedSort('quic_packet_coal_0rtt.retired_cids',), UninterpretedSort('quic_packet_coal_0rtt.idx',), UninterpretedSort('cid_seq',))), Const('a', UninterpretedSort('quic_packet_coal_0rtt.retired_cids',)), Const('i', UninterpretedSort('quic_packet_coal_0rtt.idx',))), <ivy.ivy_ast.NativeExpr object at 0x7fd8f0d4a650>)"
                }
            },
            {
                "dependencies": [
                    "a"
                ],
                "defn": {
                    "args": "(Apply(Const('quic_packet_coal_0rtt.retired_cids.end', FunctionSort(UninterpretedSort('quic_packet_coal_0rtt.retired_cids',), UninterpretedSort('quic_packet_coal_0rtt.idx',))), Const('a', UninterpretedSort('quic_packet_coal_0rtt.retired_cids',))), <ivy.ivy_ast.NativeExpr object at 0x7fd8f0d58290>)"
                }
            },
            {
                "dependencies": [],
                "defn": {
                    "args": "(Apply(Const('quic_packet_coal_0rtt.retired_cids.segment', FunctionSort(UninterpretedSort('quic_packet_coal_0rtt.retired_cids',), UninterpretedSort('quic_packet_coal_0rtt.idx',), UninterpretedSort('quic_packet_coal_0rtt.idx',), UninterpretedSort('quic_packet_coal_0rtt.retired_cids',))), Const('a', UninterpretedSort('quic_packet_coal_0rtt.retired_cids',)), Const('lo', UninterpretedSort('quic_packet_coal_0rtt.idx',)), Const('hi', UninterpretedSort('quic_packet_coal_0rtt.idx',))), <ivy.ivy_ast.NativeExpr object at 0x7fd8f0d581d0>)"
                }
            },
            {
                "dependencies": [
                    "0:index"
                ],
                "defn": {
                    "args": "(Apply(Const('forged_pkts.begin', FunctionSort(UninterpretedSort('forged_pkts',), UninterpretedSort('index',))), Var('A', UninterpretedSort('forged_pkts',))), Const('0', UninterpretedSort('index',)))"
                }
            },
            {
                "dependencies": [
                    "i",
                    "a"
                ],
                "defn": {
                    "args": "(Apply(Const('forged_pkts.value', FunctionSort(UninterpretedSort('forged_pkts',), UninterpretedSort('index',), UninterpretedSort('stream_data',))), Const('a', UninterpretedSort('forged_pkts',)), Const('i', UninterpretedSort('index',))), <ivy.ivy_ast.NativeExpr object at 0x7fd8f0d5d0d0>)"
                }
            },
            {
                "dependencies": [
                    "a"
                ],
                "defn": {
                    "args": "(Apply(Const('forged_pkts.end', FunctionSort(UninterpretedSort('forged_pkts',), UninterpretedSort('index',))), Const('a', UninterpretedSort('forged_pkts',))), <ivy.ivy_ast.NativeExpr object at 0x7fd8f0d5d610>)"
                }
            },
            {
                "dependencies": [],
                "defn": {
                    "args": "(Apply(Const('forged_pkts.segment', FunctionSort(UninterpretedSort('forged_pkts',), UninterpretedSort('index',), UninterpretedSort('index',), UninterpretedSort('forged_pkts',))), Const('a', UninterpretedSort('forged_pkts',)), Const('lo', UninterpretedSort('index',)), Const('hi', UninterpretedSort('index',))), <ivy.ivy_ast.NativeExpr object at 0x7fd8f0d5e650>)"
                }
            },
            {
                "dependencies": [
                    "1:forged_protected_quic_packet.idx",
                    "+"
                ],
                "defn": {
                    "args": "(Apply(Const('forged_protected_quic_packet.idx.succ', FunctionSort(UninterpretedSort('forged_protected_quic_packet.idx',), UninterpretedSort('forged_protected_quic_packet.idx',), BooleanSort())), Var('X', UninterpretedSort('forged_protected_quic_packet.idx',)), Var('Y', UninterpretedSort('forged_protected_quic_packet.idx',))), Eq(Var('Y', UninterpretedSort('forged_protected_quic_packet.idx',)), Apply(Const('+', FunctionSort(UninterpretedSort('forged_protected_quic_packet.idx',), UninterpretedSort('forged_protected_quic_packet.idx',), UninterpretedSort('forged_protected_quic_packet.idx',))), Var('X', UninterpretedSort('forged_protected_quic_packet.idx',)), Const('1', UninterpretedSort('forged_protected_quic_packet.idx',)))))"
                }
            },
            {
                "dependencies": [
                    "0:forged_protected_quic_packet.idx"
                ],
                "defn": {
                    "args": "(Apply(Const('forged_protected_quic_packet.arr.begin', FunctionSort(UninterpretedSort('forged_protected_quic_packet.arr',), UninterpretedSort('forged_protected_quic_packet.idx',))), Var('A', UninterpretedSort('forged_protected_quic_packet.arr',))), Const('0', UninterpretedSort('forged_protected_quic_packet.idx',)))"
                }
            },
            {
                "dependencies": [
                    "i",
                    "a"
                ],
                "defn": {
                    "args": "(Apply(Const('forged_protected_quic_packet.arr.value', FunctionSort(UninterpretedSort('forged_protected_quic_packet.arr',), UninterpretedSort('forged_protected_quic_packet.idx',), UninterpretedSort('forged_protected_quic_packet',))), Const('a', UninterpretedSort('forged_protected_quic_packet.arr',)), Const('i', UninterpretedSort('forged_protected_quic_packet.idx',))), <ivy.ivy_ast.NativeExpr object at 0x7fd8f0d68990>)"
                }
            },
            {
                "dependencies": [
                    "a"
                ],
                "defn": {
                    "args": "(Apply(Const('forged_protected_quic_packet.arr.end', FunctionSort(UninterpretedSort('forged_protected_quic_packet.arr',), UninterpretedSort('forged_protected_quic_packet.idx',))), Const('a', UninterpretedSort('forged_protected_quic_packet.arr',))), <ivy.ivy_ast.NativeExpr object at 0x7fd8f0d68910>)"
                }
            },
            {
                "dependencies": [],
                "defn": {
                    "args": "(Apply(Const('forged_protected_quic_packet.arr.segment', FunctionSort(UninterpretedSort('forged_protected_quic_packet.arr',), UninterpretedSort('forged_protected_quic_packet.idx',), UninterpretedSort('forged_protected_quic_packet.idx',), UninterpretedSort('forged_protected_quic_packet.arr',))), Const('a', UninterpretedSort('forged_protected_quic_packet.arr',)), Const('lo', UninterpretedSort('forged_protected_quic_packet.idx',)), Const('hi', UninterpretedSort('forged_protected_quic_packet.idx',))), <ivy.ivy_ast.NativeExpr object at 0x7fd8f0d68ad0>)"
                }
            },
            {
                "dependencies": [
                    "0:forged_protected_quic_packet.idx"
                ],
                "defn": {
                    "args": "(Apply(Const('forged_protected_quic_packet.retired_cids.begin', FunctionSort(UninterpretedSort('forged_protected_quic_packet.retired_cids',), UninterpretedSort('forged_protected_quic_packet.idx',))), Var('A', UninterpretedSort('forged_protected_quic_packet.retired_cids',))), Const('0', UninterpretedSort('forged_protected_quic_packet.idx',)))"
                }
            },
            {
                "dependencies": [
                    "i",
                    "a"
                ],
                "defn": {
                    "args": "(Apply(Const('forged_protected_quic_packet.retired_cids.value', FunctionSort(UninterpretedSort('forged_protected_quic_packet.retired_cids',), UninterpretedSort('forged_protected_quic_packet.idx',), UninterpretedSort('cid_seq',))), Const('a', UninterpretedSort('forged_protected_quic_packet.retired_cids',)), Const('i', UninterpretedSort('forged_protected_quic_packet.idx',))), <ivy.ivy_ast.NativeExpr object at 0x7fd8f0d64690>)"
                }
            },
            {
                "dependencies": [
                    "a"
                ],
                "defn": {
                    "args": "(Apply(Const('forged_protected_quic_packet.retired_cids.end', FunctionSort(UninterpretedSort('forged_protected_quic_packet.retired_cids',), UninterpretedSort('forged_protected_quic_packet.idx',))), Const('a', UninterpretedSort('forged_protected_quic_packet.retired_cids',))), <ivy.ivy_ast.NativeExpr object at 0x7fd8f0d643d0>)"
                }
            },
            {
                "dependencies": [],
                "defn": {
                    "args": "(Apply(Const('forged_protected_quic_packet.retired_cids.segment', FunctionSort(UninterpretedSort('forged_protected_quic_packet.retired_cids',), UninterpretedSort('forged_protected_quic_packet.idx',), UninterpretedSort('forged_protected_quic_packet.idx',), UninterpretedSort('forged_protected_quic_packet.retired_cids',))), Const('a', UninterpretedSort('forged_protected_quic_packet.retired_cids',)), Const('lo', UninterpretedSort('forged_protected_quic_packet.idx',)), Const('hi', UninterpretedSort('forged_protected_quic_packet.idx',))), <ivy.ivy_ast.NativeExpr object at 0x7fd8f0d7a650>)"
                }
            },
            {
                "dependencies": [
                    "1:forged_quic_packet.idx",
                    "+"
                ],
                "defn": {
                    "args": "(Apply(Const('forged_quic_packet.idx.succ', FunctionSort(UninterpretedSort('forged_quic_packet.idx',), UninterpretedSort('forged_quic_packet.idx',), BooleanSort())), Var('X', UninterpretedSort('forged_quic_packet.idx',)), Var('Y', UninterpretedSort('forged_quic_packet.idx',))), Eq(Var('Y', UninterpretedSort('forged_quic_packet.idx',)), Apply(Const('+', FunctionSort(UninterpretedSort('forged_quic_packet.idx',), UninterpretedSort('forged_quic_packet.idx',), UninterpretedSort('forged_quic_packet.idx',))), Var('X', UninterpretedSort('forged_quic_packet.idx',)), Const('1', UninterpretedSort('forged_quic_packet.idx',)))))"
                }
            },
            {
                "dependencies": [
                    "0:forged_quic_packet.idx"
                ],
                "defn": {
                    "args": "(Apply(Const('forged_quic_packet.arr.begin', FunctionSort(UninterpretedSort('forged_quic_packet.arr',), UninterpretedSort('forged_quic_packet.idx',))), Var('A', UninterpretedSort('forged_quic_packet.arr',))), Const('0', UninterpretedSort('forged_quic_packet.idx',)))"
                }
            },
            {
                "dependencies": [
                    "i",
                    "a"
                ],
                "defn": {
                    "args": "(Apply(Const('forged_quic_packet.arr.value', FunctionSort(UninterpretedSort('forged_quic_packet.arr',), UninterpretedSort('forged_quic_packet.idx',), UninterpretedSort('forged_quic_packet',))), Const('a', UninterpretedSort('forged_quic_packet.arr',)), Const('i', UninterpretedSort('forged_quic_packet.idx',))), <ivy.ivy_ast.NativeExpr object at 0x7fd8f0d03050>)"
                }
            },
            {
                "dependencies": [
                    "a"
                ],
                "defn": {
                    "args": "(Apply(Const('forged_quic_packet.arr.end', FunctionSort(UninterpretedSort('forged_quic_packet.arr',), UninterpretedSort('forged_quic_packet.idx',))), Const('a', UninterpretedSort('forged_quic_packet.arr',))), <ivy.ivy_ast.NativeExpr object at 0x7fd8f0d01550>)"
                }
            },
            {
                "dependencies": [],
                "defn": {
                    "args": "(Apply(Const('forged_quic_packet.arr.segment', FunctionSort(UninterpretedSort('forged_quic_packet.arr',), UninterpretedSort('forged_quic_packet.idx',), UninterpretedSort('forged_quic_packet.idx',), UninterpretedSort('forged_quic_packet.arr',))), Const('a', UninterpretedSort('forged_quic_packet.arr',)), Const('lo', UninterpretedSort('forged_quic_packet.idx',)), Const('hi', UninterpretedSort('forged_quic_packet.idx',))), <ivy.ivy_ast.NativeExpr object at 0x7fd8f0d0db90>)"
                }
            },
            {
                "dependencies": [
                    "0:forged_quic_packet.idx"
                ],
                "defn": {
                    "args": "(Apply(Const('forged_quic_packet.retired_cids.begin', FunctionSort(UninterpretedSort('forged_quic_packet.retired_cids',), UninterpretedSort('forged_quic_packet.idx',))), Var('A', UninterpretedSort('forged_quic_packet.retired_cids',))), Const('0', UninterpretedSort('forged_quic_packet.idx',)))"
                }
            },
            {
                "dependencies": [
                    "i",
                    "a"
                ],
                "defn": {
                    "args": "(Apply(Const('forged_quic_packet.retired_cids.value', FunctionSort(UninterpretedSort('forged_quic_packet.retired_cids',), UninterpretedSort('forged_quic_packet.idx',), UninterpretedSort('cid_seq',))), Const('a', UninterpretedSort('forged_quic_packet.retired_cids',)), Const('i', UninterpretedSort('forged_quic_packet.idx',))), <ivy.ivy_ast.NativeExpr object at 0x7fd8f0d10e50>)"
                }
            },
            {
                "dependencies": [
                    "a"
                ],
                "defn": {
                    "args": "(Apply(Const('forged_quic_packet.retired_cids.end', FunctionSort(UninterpretedSort('forged_quic_packet.retired_cids',), UninterpretedSort('forged_quic_packet.idx',))), Const('a', UninterpretedSort('forged_quic_packet.retired_cids',))), <ivy.ivy_ast.NativeExpr object at 0x7fd8f0d10710>)"
                }
            },
            {
                "dependencies": [],
                "defn": {
                    "args": "(Apply(Const('forged_quic_packet.retired_cids.segment', FunctionSort(UninterpretedSort('forged_quic_packet.retired_cids',), UninterpretedSort('forged_quic_packet.idx',), UninterpretedSort('forged_quic_packet.idx',), UninterpretedSort('forged_quic_packet.retired_cids',))), Const('a', UninterpretedSort('forged_quic_packet.retired_cids',)), Const('lo', UninterpretedSort('forged_quic_packet.idx',)), Const('hi', UninterpretedSort('forged_quic_packet.idx',))), <ivy.ivy_ast.NativeExpr object at 0x7fd8f0d02610>)"
                }
            },
            {
                "dependencies": [
                    "1:forged_quic_packet_retry.idx",
                    "+"
                ],
                "defn": {
                    "args": "(Apply(Const('forged_quic_packet_retry.idx.succ', FunctionSort(UninterpretedSort('forged_quic_packet_retry.idx',), UninterpretedSort('forged_quic_packet_retry.idx',), BooleanSort())), Var('X', UninterpretedSort('forged_quic_packet_retry.idx',)), Var('Y', UninterpretedSort('forged_quic_packet_retry.idx',))), Eq(Var('Y', UninterpretedSort('forged_quic_packet_retry.idx',)), Apply(Const('+', FunctionSort(UninterpretedSort('forged_quic_packet_retry.idx',), UninterpretedSort('forged_quic_packet_retry.idx',), UninterpretedSort('forged_quic_packet_retry.idx',))), Var('X', UninterpretedSort('forged_quic_packet_retry.idx',)), Const('1', UninterpretedSort('forged_quic_packet_retry.idx',)))))"
                }
            },
            {
                "dependencies": [
                    "0:forged_quic_packet_retry.idx"
                ],
                "defn": {
                    "args": "(Apply(Const('forged_quic_packet_retry.arr.begin', FunctionSort(UninterpretedSort('forged_quic_packet_retry.arr',), UninterpretedSort('forged_quic_packet_retry.idx',))), Var('A', UninterpretedSort('forged_quic_packet_retry.arr',))), Const('0', UninterpretedSort('forged_quic_packet_retry.idx',)))"
                }
            },
            {
                "dependencies": [
                    "i",
                    "a"
                ],
                "defn": {
                    "args": "(Apply(Const('forged_quic_packet_retry.arr.value', FunctionSort(UninterpretedSort('forged_quic_packet_retry.arr',), UninterpretedSort('forged_quic_packet_retry.idx',), UninterpretedSort('forged_quic_packet_retry',))), Const('a', UninterpretedSort('forged_quic_packet_retry.arr',)), Const('i', UninterpretedSort('forged_quic_packet_retry.idx',))), <ivy.ivy_ast.NativeExpr object at 0x7fd8f0d18110>)"
                }
            },
            {
                "dependencies": [
                    "a"
                ],
                "defn": {
                    "args": "(Apply(Const('forged_quic_packet_retry.arr.end', FunctionSort(UninterpretedSort('forged_quic_packet_retry.arr',), UninterpretedSort('forged_quic_packet_retry.idx',))), Const('a', UninterpretedSort('forged_quic_packet_retry.arr',))), <ivy.ivy_ast.NativeExpr object at 0x7fd8f0d174d0>)"
                }
            },
            {
                "dependencies": [],
                "defn": {
                    "args": "(Apply(Const('forged_quic_packet_retry.arr.segment', FunctionSort(UninterpretedSort('forged_quic_packet_retry.arr',), UninterpretedSort('forged_quic_packet_retry.idx',), UninterpretedSort('forged_quic_packet_retry.idx',), UninterpretedSort('forged_quic_packet_retry.arr',))), Const('a', UninterpretedSort('forged_quic_packet_retry.arr',)), Const('lo', UninterpretedSort('forged_quic_packet_retry.idx',)), Const('hi', UninterpretedSort('forged_quic_packet_retry.idx',))), <ivy.ivy_ast.NativeExpr object at 0x7fd8f0d25790>)"
                }
            },
            {
                "dependencies": [
                    "0:forged_quic_packet_retry.idx"
                ],
                "defn": {
                    "args": "(Apply(Const('forged_quic_packet_retry.retired_cids.begin', FunctionSort(UninterpretedSort('forged_quic_packet_retry.retired_cids',), UninterpretedSort('forged_quic_packet_retry.idx',))), Var('A', UninterpretedSort('forged_quic_packet_retry.retired_cids',))), Const('0', UninterpretedSort('forged_quic_packet_retry.idx',)))"
                }
            },
            {
                "dependencies": [
                    "i",
                    "a"
                ],
                "defn": {
                    "args": "(Apply(Const('forged_quic_packet_retry.retired_cids.value', FunctionSort(UninterpretedSort('forged_quic_packet_retry.retired_cids',), UninterpretedSort('forged_quic_packet_retry.idx',), UninterpretedSort('cid_seq',))), Const('a', UninterpretedSort('forged_quic_packet_retry.retired_cids',)), Const('i', UninterpretedSort('forged_quic_packet_retry.idx',))), <ivy.ivy_ast.NativeExpr object at 0x7fd8f0d17f90>)"
                }
            },
            {
                "dependencies": [
                    "a"
                ],
                "defn": {
                    "args": "(Apply(Const('forged_quic_packet_retry.retired_cids.end', FunctionSort(UninterpretedSort('forged_quic_packet_retry.retired_cids',), UninterpretedSort('forged_quic_packet_retry.idx',))), Const('a', UninterpretedSort('forged_quic_packet_retry.retired_cids',))), <ivy.ivy_ast.NativeExpr object at 0x7fd8f0d195d0>)"
                }
            },
            {
                "dependencies": [],
                "defn": {
                    "args": "(Apply(Const('forged_quic_packet_retry.retired_cids.segment', FunctionSort(UninterpretedSort('forged_quic_packet_retry.retired_cids',), UninterpretedSort('forged_quic_packet_retry.idx',), UninterpretedSort('forged_quic_packet_retry.idx',), UninterpretedSort('forged_quic_packet_retry.retired_cids',))), Const('a', UninterpretedSort('forged_quic_packet_retry.retired_cids',)), Const('lo', UninterpretedSort('forged_quic_packet_retry.idx',)), Const('hi', UninterpretedSort('forged_quic_packet_retry.idx',))), <ivy.ivy_ast.NativeExpr object at 0x7fd8f0d18a50>)"
                }
            },
            {
                "dependencies": [
                    "+",
                    "1:forged_quic_packet_vn.idx"
                ],
                "defn": {
                    "args": "(Apply(Const('forged_quic_packet_vn.idx.succ', FunctionSort(UninterpretedSort('forged_quic_packet_vn.idx',), UninterpretedSort('forged_quic_packet_vn.idx',), BooleanSort())), Var('X', UninterpretedSort('forged_quic_packet_vn.idx',)), Var('Y', UninterpretedSort('forged_quic_packet_vn.idx',))), Eq(Var('Y', UninterpretedSort('forged_quic_packet_vn.idx',)), Apply(Const('+', FunctionSort(UninterpretedSort('forged_quic_packet_vn.idx',), UninterpretedSort('forged_quic_packet_vn.idx',), UninterpretedSort('forged_quic_packet_vn.idx',))), Var('X', UninterpretedSort('forged_quic_packet_vn.idx',)), Const('1', UninterpretedSort('forged_quic_packet_vn.idx',)))))"
                }
            },
            {
                "dependencies": [
                    "0:forged_quic_packet_vn.idx"
                ],
                "defn": {
                    "args": "(Apply(Const('forged_quic_packet_vn.arr.begin', FunctionSort(UninterpretedSort('forged_quic_packet_vn.arr',), UninterpretedSort('forged_quic_packet_vn.idx',))), Var('A', UninterpretedSort('forged_quic_packet_vn.arr',))), Const('0', UninterpretedSort('forged_quic_packet_vn.idx',)))"
                }
            },
            {
                "dependencies": [
                    "i",
                    "a"
                ],
                "defn": {
                    "args": "(Apply(Const('forged_quic_packet_vn.arr.value', FunctionSort(UninterpretedSort('forged_quic_packet_vn.arr',), UninterpretedSort('forged_quic_packet_vn.idx',), UninterpretedSort('forged_quic_packet_vn',))), Const('a', UninterpretedSort('forged_quic_packet_vn.arr',)), Const('i', UninterpretedSort('forged_quic_packet_vn.idx',))), <ivy.ivy_ast.NativeExpr object at 0x7fd8f0cbda50>)"
                }
            },
            {
                "dependencies": [
                    "a"
                ],
                "defn": {
                    "args": "(Apply(Const('forged_quic_packet_vn.arr.end', FunctionSort(UninterpretedSort('forged_quic_packet_vn.arr',), UninterpretedSort('forged_quic_packet_vn.idx',))), Const('a', UninterpretedSort('forged_quic_packet_vn.arr',))), <ivy.ivy_ast.NativeExpr object at 0x7fd8f0d31cd0>)"
                }
            },
            {
                "dependencies": [],
                "defn": {
                    "args": "(Apply(Const('forged_quic_packet_vn.arr.segment', FunctionSort(UninterpretedSort('forged_quic_packet_vn.arr',), UninterpretedSort('forged_quic_packet_vn.idx',), UninterpretedSort('forged_quic_packet_vn.idx',), UninterpretedSort('forged_quic_packet_vn.arr',))), Const('a', UninterpretedSort('forged_quic_packet_vn.arr',)), Const('lo', UninterpretedSort('forged_quic_packet_vn.idx',)), Const('hi', UninterpretedSort('forged_quic_packet_vn.idx',))), <ivy.ivy_ast.NativeExpr object at 0x7fd8f0d312d0>)"
                }
            },
            {
                "dependencies": [
                    "1:replayed_quic_packet_0rtt.idx",
                    "+"
                ],
                "defn": {
                    "args": "(Apply(Const('replayed_quic_packet_0rtt.idx.succ', FunctionSort(UninterpretedSort('replayed_quic_packet_0rtt.idx',), UninterpretedSort('replayed_quic_packet_0rtt.idx',), BooleanSort())), Var('X', UninterpretedSort('replayed_quic_packet_0rtt.idx',)), Var('Y', UninterpretedSort('replayed_quic_packet_0rtt.idx',))), Eq(Var('Y', UninterpretedSort('replayed_quic_packet_0rtt.idx',)), Apply(Const('+', FunctionSort(UninterpretedSort('replayed_quic_packet_0rtt.idx',), UninterpretedSort('replayed_quic_packet_0rtt.idx',), UninterpretedSort('replayed_quic_packet_0rtt.idx',))), Var('X', UninterpretedSort('replayed_quic_packet_0rtt.idx',)), Const('1', UninterpretedSort('replayed_quic_packet_0rtt.idx',)))))"
                }
            },
            {
                "dependencies": [
                    "0:replayed_quic_packet_0rtt.idx"
                ],
                "defn": {
                    "args": "(Apply(Const('replayed_quic_packet_0rtt.arr.begin', FunctionSort(UninterpretedSort('replayed_quic_packet_0rtt.arr',), UninterpretedSort('replayed_quic_packet_0rtt.idx',))), Var('A', UninterpretedSort('replayed_quic_packet_0rtt.arr',))), Const('0', UninterpretedSort('replayed_quic_packet_0rtt.idx',)))"
                }
            },
            {
                "dependencies": [
                    "i",
                    "a"
                ],
                "defn": {
                    "args": "(Apply(Const('replayed_quic_packet_0rtt.arr.value', FunctionSort(UninterpretedSort('replayed_quic_packet_0rtt.arr',), UninterpretedSort('replayed_quic_packet_0rtt.idx',), UninterpretedSort('replayed_quic_packet_0rtt',))), Const('a', UninterpretedSort('replayed_quic_packet_0rtt.arr',)), Const('i', UninterpretedSort('replayed_quic_packet_0rtt.idx',))), <ivy.ivy_ast.NativeExpr object at 0x7fd8f0cc2950>)"
                }
            },
            {
                "dependencies": [
                    "a"
                ],
                "defn": {
                    "args": "(Apply(Const('replayed_quic_packet_0rtt.arr.end', FunctionSort(UninterpretedSort('replayed_quic_packet_0rtt.arr',), UninterpretedSort('replayed_quic_packet_0rtt.idx',))), Const('a', UninterpretedSort('replayed_quic_packet_0rtt.arr',))), <ivy.ivy_ast.NativeExpr object at 0x7fd8f0cc2710>)"
                }
            },
            {
                "dependencies": [],
                "defn": {
                    "args": "(Apply(Const('replayed_quic_packet_0rtt.arr.segment', FunctionSort(UninterpretedSort('replayed_quic_packet_0rtt.arr',), UninterpretedSort('replayed_quic_packet_0rtt.idx',), UninterpretedSort('replayed_quic_packet_0rtt.idx',), UninterpretedSort('replayed_quic_packet_0rtt.arr',))), Const('a', UninterpretedSort('replayed_quic_packet_0rtt.arr',)), Const('lo', UninterpretedSort('replayed_quic_packet_0rtt.idx',)), Const('hi', UninterpretedSort('replayed_quic_packet_0rtt.idx',))), <ivy.ivy_ast.NativeExpr object at 0x7fd8f0cc3350>)"
                }
            },
            {
                "dependencies": [
                    "0:replayed_quic_packet_0rtt.idx"
                ],
                "defn": {
                    "args": "(Apply(Const('replayed_quic_packet_0rtt.retired_cids.begin', FunctionSort(UninterpretedSort('replayed_quic_packet_0rtt.retired_cids',), UninterpretedSort('replayed_quic_packet_0rtt.idx',))), Var('A', UninterpretedSort('replayed_quic_packet_0rtt.retired_cids',))), Const('0', UninterpretedSort('replayed_quic_packet_0rtt.idx',)))"
                }
            },
            {
                "dependencies": [
                    "i",
                    "a"
                ],
                "defn": {
                    "args": "(Apply(Const('replayed_quic_packet_0rtt.retired_cids.value', FunctionSort(UninterpretedSort('replayed_quic_packet_0rtt.retired_cids',), UninterpretedSort('replayed_quic_packet_0rtt.idx',), UninterpretedSort('cid_seq',))), Const('a', UninterpretedSort('replayed_quic_packet_0rtt.retired_cids',)), Const('i', UninterpretedSort('replayed_quic_packet_0rtt.idx',))), <ivy.ivy_ast.NativeExpr object at 0x7fd8f0cc4ed0>)"
                }
            },
            {
                "dependencies": [
                    "a"
                ],
                "defn": {
                    "args": "(Apply(Const('replayed_quic_packet_0rtt.retired_cids.end', FunctionSort(UninterpretedSort('replayed_quic_packet_0rtt.retired_cids',), UninterpretedSort('replayed_quic_packet_0rtt.idx',))), Const('a', UninterpretedSort('replayed_quic_packet_0rtt.retired_cids',))), <ivy.ivy_ast.NativeExpr object at 0x7fd8f0ccf950>)"
                }
            },
            {
                "dependencies": [],
                "defn": {
                    "args": "(Apply(Const('replayed_quic_packet_0rtt.retired_cids.segment', FunctionSort(UninterpretedSort('replayed_quic_packet_0rtt.retired_cids',), UninterpretedSort('replayed_quic_packet_0rtt.idx',), UninterpretedSort('replayed_quic_packet_0rtt.idx',), UninterpretedSort('replayed_quic_packet_0rtt.retired_cids',))), Const('a', UninterpretedSort('replayed_quic_packet_0rtt.retired_cids',)), Const('lo', UninterpretedSort('replayed_quic_packet_0rtt.idx',)), Const('hi', UninterpretedSort('replayed_quic_packet_0rtt.idx',))), <ivy.ivy_ast.NativeExpr object at 0x7fd8f0ccfe50>)"
                }
            },
            {
                "dependencies": [
                    "+",
                    "1:prot.idx"
                ],
                "defn": {
                    "args": "(Apply(Const('prot.idx.succ', FunctionSort(UninterpretedSort('prot.idx',), UninterpretedSort('prot.idx',), BooleanSort())), Var('X', UninterpretedSort('prot.idx',)), Var('Y', UninterpretedSort('prot.idx',))), Eq(Var('Y', UninterpretedSort('prot.idx',)), Apply(Const('+', FunctionSort(UninterpretedSort('prot.idx',), UninterpretedSort('prot.idx',), UninterpretedSort('prot.idx',))), Var('X', UninterpretedSort('prot.idx',)), Const('1', UninterpretedSort('prot.idx',)))))"
                }
            },
            {
                "dependencies": [
                    "0:prot.idx"
                ],
                "defn": {
                    "args": "(Apply(Const('prot.arr.begin', FunctionSort(UninterpretedSort('prot.arr',), UninterpretedSort('prot.idx',))), Var('A', UninterpretedSort('prot.arr',))), Const('0', UninterpretedSort('prot.idx',)))"
                }
            },
            {
                "dependencies": [
                    "a",
                    "i"
                ],
                "defn": {
                    "args": "(Apply(Const('prot.arr.value', FunctionSort(UninterpretedSort('prot.arr',), UninterpretedSort('prot.idx',), UninterpretedSort('stream_data',))), Const('a', UninterpretedSort('prot.arr',)), Const('i', UninterpretedSort('prot.idx',))), <ivy.ivy_ast.NativeExpr object at 0x7fd8f0cdb6d0>)"
                }
            },
            {
                "dependencies": [
                    "a"
                ],
                "defn": {
                    "args": "(Apply(Const('prot.arr.end', FunctionSort(UninterpretedSort('prot.arr',), UninterpretedSort('prot.idx',))), Const('a', UninterpretedSort('prot.arr',))), <ivy.ivy_ast.NativeExpr object at 0x7fd8f0cdac50>)"
                }
            },
            {
                "dependencies": [],
                "defn": {
                    "args": "(Apply(Const('prot.arr.segment', FunctionSort(UninterpretedSort('prot.arr',), UninterpretedSort('prot.idx',), UninterpretedSort('prot.idx',), UninterpretedSort('prot.arr',))), Const('a', UninterpretedSort('prot.arr',)), Const('lo', UninterpretedSort('prot.idx',)), Const('hi', UninterpretedSort('prot.idx',))), <ivy.ivy_ast.NativeExpr object at 0x7fd8f0ce7350>)"
                }
            },
            {
                "dependencies": [
                    "1:tls_api.id",
                    "+"
                ],
                "defn": {
                    "args": "(Apply(Const('tls_api.id.succ', FunctionSort(UninterpretedSort('tls_api.id',), UninterpretedSort('tls_api.id',), BooleanSort())), Var('X', UninterpretedSort('tls_api.id',)), Var('Y', UninterpretedSort('tls_api.id',))), Eq(Var('Y', UninterpretedSort('tls_api.id',)), Apply(Const('+', FunctionSort(UninterpretedSort('tls_api.id',), UninterpretedSort('tls_api.id',), UninterpretedSort('tls_api.id',))), Var('X', UninterpretedSort('tls_api.id',)), Const('1', UninterpretedSort('tls_api.id',)))))"
                }
            },
            {
                "dependencies": [
                    "0:index"
                ],
                "defn": {
                    "args": "(Apply(Const('cids.begin', FunctionSort(UninterpretedSort('cids',), UninterpretedSort('index',))), Var('A', UninterpretedSort('cids',))), Const('0', UninterpretedSort('index',)))"
                }
            },
            {
                "dependencies": [
                    "i",
                    "a"
                ],
                "defn": {
                    "args": "(Apply(Const('cids.value', FunctionSort(UninterpretedSort('cids',), UninterpretedSort('index',), UninterpretedSort('cid',))), Const('a', UninterpretedSort('cids',)), Const('i', UninterpretedSort('index',))), <ivy.ivy_ast.NativeExpr object at 0x7fd8f0cf6790>)"
                }
            },
            {
                "dependencies": [
                    "a"
                ],
                "defn": {
                    "args": "(Apply(Const('cids.end', FunctionSort(UninterpretedSort('cids',), UninterpretedSort('index',))), Const('a', UninterpretedSort('cids',))), <ivy.ivy_ast.NativeExpr object at 0x7fd8f0cf9950>)"
                }
            },
            {
                "dependencies": [],
                "defn": {
                    "args": "(Apply(Const('cids.segment', FunctionSort(UninterpretedSort('cids',), UninterpretedSort('index',), UninterpretedSort('index',), UninterpretedSort('cids',))), Const('a', UninterpretedSort('cids',)), Const('lo', UninterpretedSort('index',)), Const('hi', UninterpretedSort('index',))), <ivy.ivy_ast.NativeExpr object at 0x7fd8f0cf96d0>)"
                }
            },
            {
                "dependencies": [
                    "+",
                    "1:clients.client.idx"
                ],
                "defn": {
                    "args": "(Apply(Const('clients.client.idx.succ', FunctionSort(UninterpretedSort('clients.client.idx',), UninterpretedSort('clients.client.idx',), BooleanSort())), Var('X', UninterpretedSort('clients.client.idx',)), Var('Y', UninterpretedSort('clients.client.idx',))), Eq(Var('Y', UninterpretedSort('clients.client.idx',)), Apply(Const('+', FunctionSort(UninterpretedSort('clients.client.idx',), UninterpretedSort('clients.client.idx',), UninterpretedSort('clients.client.idx',))), Var('X', UninterpretedSort('clients.client.idx',)), Const('1', UninterpretedSort('clients.client.idx',)))))"
                }
            },
            {
                "dependencies": [
                    "0:clients.client.idx"
                ],
                "defn": {
                    "args": "(Apply(Const('clients.client.arr.begin', FunctionSort(UninterpretedSort('clients.client.arr',), UninterpretedSort('clients.client.idx',))), Var('A', UninterpretedSort('clients.client.arr',))), Const('0', UninterpretedSort('clients.client.idx',)))"
                }
            },
            {
                "dependencies": [
                    "a",
                    "i"
                ],
                "defn": {
                    "args": "(Apply(Const('clients.client.arr.value', FunctionSort(UninterpretedSort('clients.client.arr',), UninterpretedSort('clients.client.idx',), UninterpretedSort('clients.client',))), Const('a', UninterpretedSort('clients.client.arr',)), Const('i', UninterpretedSort('clients.client.idx',))), <ivy.ivy_ast.NativeExpr object at 0x7fd8f0c81cd0>)"
                }
            },
            {
                "dependencies": [
                    "a"
                ],
                "defn": {
                    "args": "(Apply(Const('clients.client.arr.end', FunctionSort(UninterpretedSort('clients.client.arr',), UninterpretedSort('clients.client.idx',))), Const('a', UninterpretedSort('clients.client.arr',))), <ivy.ivy_ast.NativeExpr object at 0x7fd8f0c8cb90>)"
                }
            },
            {
                "dependencies": [],
                "defn": {
                    "args": "(Apply(Const('clients.client.arr.segment', FunctionSort(UninterpretedSort('clients.client.arr',), UninterpretedSort('clients.client.idx',), UninterpretedSort('clients.client.idx',), UninterpretedSort('clients.client.arr',))), Const('a', UninterpretedSort('clients.client.arr',)), Const('lo', UninterpretedSort('clients.client.idx',)), Const('hi', UninterpretedSort('clients.client.idx',))), <ivy.ivy_ast.NativeExpr object at 0x7fd8f0c8c810>)"
                }
            },
            {
                "dependencies": [
                    "+",
                    "1:servers.server.idx"
                ],
                "defn": {
                    "args": "(Apply(Const('servers.server.idx.succ', FunctionSort(UninterpretedSort('servers.server.idx',), UninterpretedSort('servers.server.idx',), BooleanSort())), Var('X', UninterpretedSort('servers.server.idx',)), Var('Y', UninterpretedSort('servers.server.idx',))), Eq(Var('Y', UninterpretedSort('servers.server.idx',)), Apply(Const('+', FunctionSort(UninterpretedSort('servers.server.idx',), UninterpretedSort('servers.server.idx',), UninterpretedSort('servers.server.idx',))), Var('X', UninterpretedSort('servers.server.idx',)), Const('1', UninterpretedSort('servers.server.idx',)))))"
                }
            },
            {
                "dependencies": [
                    "0:servers.server.idx"
                ],
                "defn": {
                    "args": "(Apply(Const('servers.server.arr.begin', FunctionSort(UninterpretedSort('servers.server.arr',), UninterpretedSort('servers.server.idx',))), Var('A', UninterpretedSort('servers.server.arr',))), Const('0', UninterpretedSort('servers.server.idx',)))"
                }
            },
            {
                "dependencies": [
                    "a",
                    "i"
                ],
                "defn": {
                    "args": "(Apply(Const('servers.server.arr.value', FunctionSort(UninterpretedSort('servers.server.arr',), UninterpretedSort('servers.server.idx',), UninterpretedSort('servers.server',))), Const('a', UninterpretedSort('servers.server.arr',)), Const('i', UninterpretedSort('servers.server.idx',))), <ivy.ivy_ast.NativeExpr object at 0x7fd8f0c96650>)"
                }
            },
            {
                "dependencies": [
                    "a"
                ],
                "defn": {
                    "args": "(Apply(Const('servers.server.arr.end', FunctionSort(UninterpretedSort('servers.server.arr',), UninterpretedSort('servers.server.idx',))), Const('a', UninterpretedSort('servers.server.arr',))), <ivy.ivy_ast.NativeExpr object at 0x7fd8f0c9eb50>)"
                }
            },
            {
                "dependencies": [],
                "defn": {
                    "args": "(Apply(Const('servers.server.arr.segment', FunctionSort(UninterpretedSort('servers.server.arr',), UninterpretedSort('servers.server.idx',), UninterpretedSort('servers.server.idx',), UninterpretedSort('servers.server.arr',))), Const('a', UninterpretedSort('servers.server.arr',)), Const('lo', UninterpretedSort('servers.server.idx',)), Const('hi', UninterpretedSort('servers.server.idx',))), <ivy.ivy_ast.NativeExpr object at 0x7fd8f0c9e190>)"
                }
            },
            {
                "dependencies": [
                    "0:index"
                ],
                "defn": {
                    "args": "(Apply(Const('ip_endpoints.begin', FunctionSort(UninterpretedSort('ip_endpoints',), UninterpretedSort('index',))), Var('A', UninterpretedSort('ip_endpoints',))), Const('0', UninterpretedSort('index',)))"
                }
            },
            {
                "dependencies": [
                    "i",
                    "a"
                ],
                "defn": {
                    "args": "(Apply(Const('ip_endpoints.value', FunctionSort(UninterpretedSort('ip_endpoints',), UninterpretedSort('index',), UninterpretedSort('ip.endpoint',))), Const('a', UninterpretedSort('ip_endpoints',)), Const('i', UninterpretedSort('index',))), <ivy.ivy_ast.NativeExpr object at 0x7fd8f0c96b10>)"
                }
            },
            {
                "dependencies": [
                    "a"
                ],
                "defn": {
                    "args": "(Apply(Const('ip_endpoints.end', FunctionSort(UninterpretedSort('ip_endpoints',), UninterpretedSort('index',))), Const('a', UninterpretedSort('ip_endpoints',))), <ivy.ivy_ast.NativeExpr object at 0x7fd8f0c96b50>)"
                }
            },
            {
                "dependencies": [],
                "defn": {
                    "args": "(Apply(Const('ip_endpoints.segment', FunctionSort(UninterpretedSort('ip_endpoints',), UninterpretedSort('index',), UninterpretedSort('index',), UninterpretedSort('ip_endpoints',))), Const('a', UninterpretedSort('ip_endpoints',)), Const('lo', UninterpretedSort('index',)), Const('hi', UninterpretedSort('index',))), <ivy.ivy_ast.NativeExpr object at 0x7fd8f0ca7190>)"
                }
            },
            {
                "dependencies": [
                    "1:tls_extensions.domain",
                    "+"
                ],
                "defn": {
                    "args": "(Apply(Const('tls_extensions.domain.succ', FunctionSort(UninterpretedSort('tls_extensions.domain',), UninterpretedSort('tls_extensions.domain',), BooleanSort())), Var('X', UninterpretedSort('tls_extensions.domain',)), Var('Y', UninterpretedSort('tls_extensions.domain',))), Eq(Var('Y', UninterpretedSort('tls_extensions.domain',)), Apply(Const('+', FunctionSort(UninterpretedSort('tls_extensions.domain',), UninterpretedSort('tls_extensions.domain',), UninterpretedSort('tls_extensions.domain',))), Var('X', UninterpretedSort('tls_extensions.domain',)), Const('1', UninterpretedSort('tls_extensions.domain',)))))"
                }
            },
            {
                "dependencies": [
                    "0:tls_extensions.domain"
                ],
                "defn": {
                    "args": "(Apply(Const('tls_extensions.begin', FunctionSort(UninterpretedSort('tls_extensions',), UninterpretedSort('tls_extensions.domain',))), Var('A', UninterpretedSort('tls_extensions',))), Const('0', UninterpretedSort('tls_extensions.domain',)))"
                }
            },
            {
                "dependencies": [
                    "i",
                    "a"
                ],
                "defn": {
                    "args": "(Apply(Const('tls_extensions.value', FunctionSort(UninterpretedSort('tls_extensions',), UninterpretedSort('tls_extensions.domain',), UninterpretedSort('tls.extension',))), Const('a', UninterpretedSort('tls_extensions',)), Const('i', UninterpretedSort('tls_extensions.domain',))), <ivy.ivy_ast.NativeExpr object at 0x7fd8f0caa990>)"
                }
            },
            {
                "dependencies": [
                    "a"
                ],
                "defn": {
                    "args": "(Apply(Const('tls_extensions.end', FunctionSort(UninterpretedSort('tls_extensions',), UninterpretedSort('tls_extensions.domain',))), Const('a', UninterpretedSort('tls_extensions',))), <ivy.ivy_ast.NativeExpr object at 0x7fd8f0cb6210>)"
                }
            },
            {
                "dependencies": [],
                "defn": {
                    "args": "(Apply(Const('tls_extensions.segment', FunctionSort(UninterpretedSort('tls_extensions',), UninterpretedSort('tls_extensions.domain',), UninterpretedSort('tls_extensions.domain',), UninterpretedSort('tls_extensions',))), Const('a', UninterpretedSort('tls_extensions',)), Const('lo', UninterpretedSort('tls_extensions.domain',)), Const('hi', UninterpretedSort('tls_extensions.domain',))), <ivy.ivy_ast.NativeExpr object at 0x7fd8f0cb66d0>)"
                }
            },
            {
                "dependencies": [
                    "1:tls_hand_extensions.domain",
                    "+"
                ],
                "defn": {
                    "args": "(Apply(Const('tls_hand_extensions.domain.succ', FunctionSort(UninterpretedSort('tls_hand_extensions.domain',), UninterpretedSort('tls_hand_extensions.domain',), BooleanSort())), Var('X', UninterpretedSort('tls_hand_extensions.domain',)), Var('Y', UninterpretedSort('tls_hand_extensions.domain',))), Eq(Var('Y', UninterpretedSort('tls_hand_extensions.domain',)), Apply(Const('+', FunctionSort(UninterpretedSort('tls_hand_extensions.domain',), UninterpretedSort('tls_hand_extensions.domain',), UninterpretedSort('tls_hand_extensions.domain',))), Var('X', UninterpretedSort('tls_hand_extensions.domain',)), Const('1', UninterpretedSort('tls_hand_extensions.domain',)))))"
                }
            },
            {
                "dependencies": [
                    "0:tls_hand_extensions.domain"
                ],
                "defn": {
                    "args": "(Apply(Const('tls_hand_extensions.begin', FunctionSort(UninterpretedSort('tls_hand_extensions',), UninterpretedSort('tls_hand_extensions.domain',))), Var('A', UninterpretedSort('tls_hand_extensions',))), Const('0', UninterpretedSort('tls_hand_extensions.domain',)))"
                }
            },
            {
                "dependencies": [
                    "i",
                    "a"
                ],
                "defn": {
                    "args": "(Apply(Const('tls_hand_extensions.value', FunctionSort(UninterpretedSort('tls_hand_extensions',), UninterpretedSort('tls_hand_extensions.domain',), UninterpretedSort('tls.handshake',))), Const('a', UninterpretedSort('tls_hand_extensions',)), Const('i', UninterpretedSort('tls_hand_extensions.domain',))), <ivy.ivy_ast.NativeExpr object at 0x7fd8f0c40e50>)"
                }
            },
            {
                "dependencies": [
                    "a"
                ],
                "defn": {
                    "args": "(Apply(Const('tls_hand_extensions.end', FunctionSort(UninterpretedSort('tls_hand_extensions',), UninterpretedSort('tls_hand_extensions.domain',))), Const('a', UninterpretedSort('tls_hand_extensions',))), <ivy.ivy_ast.NativeExpr object at 0x7fd8f0c48c90>)"
                }
            },
            {
                "dependencies": [],
                "defn": {
                    "args": "(Apply(Const('tls_hand_extensions.segment', FunctionSort(UninterpretedSort('tls_hand_extensions',), UninterpretedSort('tls_hand_extensions.domain',), UninterpretedSort('tls_hand_extensions.domain',), UninterpretedSort('tls_hand_extensions',))), Const('a', UninterpretedSort('tls_hand_extensions',)), Const('lo', UninterpretedSort('tls_hand_extensions.domain',)), Const('hi', UninterpretedSort('tls_hand_extensions.domain',))), <ivy.ivy_ast.NativeExpr object at 0x7fd8f0c48890>)"
                }
            }
        ],
        "natives": [
            {
                "args": "(bytes.impl.native99, <ivy.ivy_ast.NativeCode object at 0x7fd8f3371110>)",
                "lineno": {}
            },
            {
                "args": "(bytes.impl.native101, <ivy.ivy_ast.NativeCode object at 0x7fd8f341f210>, bytes, bytes, bytes, bytes, byte, bytes, bytes, bytes, bytes, bytes, bytes, bytes, bytes, bytes, Const('bytes.end', FunctionSort(UninterpretedSort('bytes',), UninterpretedSort('idx',))), Const('bytes.value', FunctionSort(UninterpretedSort('bytes',), UninterpretedSort('idx',), UninterpretedSort('byte',))), Var('X', UninterpretedSort('idx',)), bytes, bytes, idx, Const('bytes.end', FunctionSort(UninterpretedSort('bytes',), UninterpretedSort('idx',))), Const('bytes.value', FunctionSort(UninterpretedSort('bytes',), UninterpretedSort('idx',), UninterpretedSort('byte',))), Var('X', UninterpretedSort('idx',)), bytes, Var('X', UninterpretedSort('idx',)), Const('bytes.end', FunctionSort(UninterpretedSort('bytes',), UninterpretedSort('idx',))), byte, Const('bytes.value', FunctionSort(UninterpretedSort('bytes',), UninterpretedSort('idx',), UninterpretedSort('byte',))), Var('X', UninterpretedSort('idx',)))",
                "lineno": {}
            },
            {
                "args": "(stream_data.impl.native99, <ivy.ivy_ast.NativeCode object at 0x7fd8f32f4a50>)",
                "lineno": {}
            },
            {
                "args": "(stream_data.impl.native101, <ivy.ivy_ast.NativeCode object at 0x7fd8f32f66d0>, stream_data, stream_data, stream_data, stream_data, byte, stream_data, stream_data, stream_data, stream_data, stream_data, stream_data, stream_data, stream_data, stream_data, Const('stream_data.end', FunctionSort(UninterpretedSort('stream_data',), UninterpretedSort('stream_pos',))), Const('stream_data.value', FunctionSort(UninterpretedSort('stream_data',), UninterpretedSort('stream_pos',), UninterpretedSort('byte',))), Var('X', UninterpretedSort('stream_pos',)), stream_data, stream_data, stream_pos, Const('stream_data.end', FunctionSort(UninterpretedSort('stream_data',), UninterpretedSort('stream_pos',))), Const('stream_data.value', FunctionSort(UninterpretedSort('stream_data',), UninterpretedSort('stream_pos',), UninterpretedSort('byte',))), Var('X', UninterpretedSort('stream_pos',)), stream_data, Var('X', UninterpretedSort('stream_pos',)), Const('stream_data.end', FunctionSort(UninterpretedSort('stream_data',), UninterpretedSort('stream_pos',))), byte, Const('stream_data.value', FunctionSort(UninterpretedSort('stream_data',), UninterpretedSort('stream_pos',), UninterpretedSort('byte',))), Var('X', UninterpretedSort('stream_pos',)))",
                "lineno": {}
            },
            {
                "args": "(vector[tls.psk_identity].impl.native99, <ivy.ivy_ast.NativeCode object at 0x7fd8f123ce90>)",
                "lineno": {}
            },
            {
                "args": "(vector[tls.psk_identity].impl.native101, <ivy.ivy_ast.NativeCode object at 0x7fd8f12b9b90>, vector[tls.psk_identity], vector[tls.psk_identity], vector[tls.psk_identity], vector[tls.psk_identity], tls.psk_identity, vector[tls.psk_identity], vector[tls.psk_identity], vector[tls.psk_identity], vector[tls.psk_identity], vector[tls.psk_identity], vector[tls.psk_identity], vector[tls.psk_identity], vector[tls.psk_identity], vector[tls.psk_identity], Const('vector[tls.psk_identity].end', FunctionSort(UninterpretedSort('vector[tls.psk_identity]',), UninterpretedSort('vector[tls.psk_identity].domain',))), Const('vector[tls.psk_identity].value', FunctionSort(UninterpretedSort('vector[tls.psk_identity]',), UninterpretedSort('vector[tls.psk_identity].domain',), UninterpretedSort('tls.psk_identity',))), Var('X', UninterpretedSort('vector[tls.psk_identity].domain',)), vector[tls.psk_identity], vector[tls.psk_identity], vector[tls.psk_identity].domain, Const('vector[tls.psk_identity].end', FunctionSort(UninterpretedSort('vector[tls.psk_identity]',), UninterpretedSort('vector[tls.psk_identity].domain',))), Const('vector[tls.psk_identity].value', FunctionSort(UninterpretedSort('vector[tls.psk_identity]',), UninterpretedSort('vector[tls.psk_identity].domain',), UninterpretedSort('tls.psk_identity',))), Var('X', UninterpretedSort('vector[tls.psk_identity].domain',)), vector[tls.psk_identity], Var('X', UninterpretedSort('vector[tls.psk_identity].domain',)), Const('vector[tls.psk_identity].end', FunctionSort(UninterpretedSort('vector[tls.psk_identity]',), UninterpretedSort('vector[tls.psk_identity].domain',))), tls.psk_identity, Const('vector[tls.psk_identity].value', FunctionSort(UninterpretedSort('vector[tls.psk_identity]',), UninterpretedSort('vector[tls.psk_identity].domain',), UninterpretedSort('tls.psk_identity',))), Var('X', UninterpretedSort('vector[tls.psk_identity].domain',)))",
                "lineno": {}
            },
            {
                "args": "(vector[tls.cipher_suite].impl.native99, <ivy.ivy_ast.NativeCode object at 0x7fd8f1219e50>)",
                "lineno": {}
            },
            {
                "args": "(vector[tls.cipher_suite].impl.native101, <ivy.ivy_ast.NativeCode object at 0x7fd8f1224b10>, vector[tls.cipher_suite], vector[tls.cipher_suite], vector[tls.cipher_suite], vector[tls.cipher_suite], tls.cipher_suite, vector[tls.cipher_suite], vector[tls.cipher_suite], vector[tls.cipher_suite], vector[tls.cipher_suite], vector[tls.cipher_suite], vector[tls.cipher_suite], vector[tls.cipher_suite], vector[tls.cipher_suite], vector[tls.cipher_suite], Const('vector[tls.cipher_suite].end', FunctionSort(UninterpretedSort('vector[tls.cipher_suite]',), UninterpretedSort('vector[tls.cipher_suite].domain',))), Const('vector[tls.cipher_suite].value', FunctionSort(UninterpretedSort('vector[tls.cipher_suite]',), UninterpretedSort('vector[tls.cipher_suite].domain',), UninterpretedSort('tls.cipher_suite',))), Var('X', UninterpretedSort('vector[tls.cipher_suite].domain',)), vector[tls.cipher_suite], vector[tls.cipher_suite], vector[tls.cipher_suite].domain, Const('vector[tls.cipher_suite].end', FunctionSort(UninterpretedSort('vector[tls.cipher_suite]',), UninterpretedSort('vector[tls.cipher_suite].domain',))), Const('vector[tls.cipher_suite].value', FunctionSort(UninterpretedSort('vector[tls.cipher_suite]',), UninterpretedSort('vector[tls.cipher_suite].domain',), UninterpretedSort('tls.cipher_suite',))), Var('X', UninterpretedSort('vector[tls.cipher_suite].domain',)), vector[tls.cipher_suite], Var('X', UninterpretedSort('vector[tls.cipher_suite].domain',)), Const('vector[tls.cipher_suite].end', FunctionSort(UninterpretedSort('vector[tls.cipher_suite]',), UninterpretedSort('vector[tls.cipher_suite].domain',))), tls.cipher_suite, Const('vector[tls.cipher_suite].value', FunctionSort(UninterpretedSort('vector[tls.cipher_suite]',), UninterpretedSort('vector[tls.cipher_suite].domain',), UninterpretedSort('tls.cipher_suite',))), Var('X', UninterpretedSort('vector[tls.cipher_suite].domain',)))",
                "lineno": {}
            },
            {
                "args": "(vector[tls.compression_method].impl.native99, <ivy.ivy_ast.NativeCode object at 0x7fd8f1256910>)",
                "lineno": {}
            },
            {
                "args": "(vector[tls.compression_method].impl.native101, <ivy.ivy_ast.NativeCode object at 0x7fd8f11e2f10>, vector[tls.compression_method], vector[tls.compression_method], vector[tls.compression_method], vector[tls.compression_method], tls.compression_method, vector[tls.compression_method], vector[tls.compression_method], vector[tls.compression_method], vector[tls.compression_method], vector[tls.compression_method], vector[tls.compression_method], vector[tls.compression_method], vector[tls.compression_method], vector[tls.compression_method], Const('vector[tls.compression_method].end', FunctionSort(UninterpretedSort('vector[tls.compression_method]',), UninterpretedSort('vector[tls.compression_method].domain',))), Const('vector[tls.compression_method].value', FunctionSort(UninterpretedSort('vector[tls.compression_method]',), UninterpretedSort('vector[tls.compression_method].domain',), UninterpretedSort('tls.compression_method',))), Var('X', UninterpretedSort('vector[tls.compression_method].domain',)), vector[tls.compression_method], vector[tls.compression_method], vector[tls.compression_method].domain, Const('vector[tls.compression_method].end', FunctionSort(UninterpretedSort('vector[tls.compression_method]',), UninterpretedSort('vector[tls.compression_method].domain',))), Const('vector[tls.compression_method].value', FunctionSort(UninterpretedSort('vector[tls.compression_method]',), UninterpretedSort('vector[tls.compression_method].domain',), UninterpretedSort('tls.compression_method',))), Var('X', UninterpretedSort('vector[tls.compression_method].domain',)), vector[tls.compression_method], Var('X', UninterpretedSort('vector[tls.compression_method].domain',)), Const('vector[tls.compression_method].end', FunctionSort(UninterpretedSort('vector[tls.compression_method]',), UninterpretedSort('vector[tls.compression_method].domain',))), tls.compression_method, Const('vector[tls.compression_method].value', FunctionSort(UninterpretedSort('vector[tls.compression_method]',), UninterpretedSort('vector[tls.compression_method].domain',), UninterpretedSort('tls.compression_method',))), Var('X', UninterpretedSort('vector[tls.compression_method].domain',)))",
                "lineno": {}
            },
            {
                "args": "(vector[tls.extension].impl.native99, <ivy.ivy_ast.NativeCode object at 0x7fd8f1161a90>)",
                "lineno": {}
            },
            {
                "args": "(vector[tls.extension].impl.native101, <ivy.ivy_ast.NativeCode object at 0x7fd8f114ae90>, vector[tls.extension], vector[tls.extension], vector[tls.extension], vector[tls.extension], tls.extension, vector[tls.extension], vector[tls.extension], vector[tls.extension], vector[tls.extension], vector[tls.extension], vector[tls.extension], vector[tls.extension], vector[tls.extension], vector[tls.extension], Const('vector[tls.extension].end', FunctionSort(UninterpretedSort('vector[tls.extension]',), UninterpretedSort('vector[tls.extension].domain',))), Const('vector[tls.extension].value', FunctionSort(UninterpretedSort('vector[tls.extension]',), UninterpretedSort('vector[tls.extension].domain',), UninterpretedSort('tls.extension',))), Var('X', UninterpretedSort('vector[tls.extension].domain',)), vector[tls.extension], vector[tls.extension], vector[tls.extension].domain, Const('vector[tls.extension].end', FunctionSort(UninterpretedSort('vector[tls.extension]',), UninterpretedSort('vector[tls.extension].domain',))), Const('vector[tls.extension].value', FunctionSort(UninterpretedSort('vector[tls.extension]',), UninterpretedSort('vector[tls.extension].domain',), UninterpretedSort('tls.extension',))), Var('X', UninterpretedSort('vector[tls.extension].domain',)), vector[tls.extension], Var('X', UninterpretedSort('vector[tls.extension].domain',)), Const('vector[tls.extension].end', FunctionSort(UninterpretedSort('vector[tls.extension]',), UninterpretedSort('vector[tls.extension].domain',))), tls.extension, Const('vector[tls.extension].value', FunctionSort(UninterpretedSort('vector[tls.extension]',), UninterpretedSort('vector[tls.extension].domain',), UninterpretedSort('tls.extension',))), Var('X', UninterpretedSort('vector[tls.extension].domain',)))",
                "lineno": {}
            },
            {
                "args": "(vector[tls.handshake].impl.native99, <ivy.ivy_ast.NativeCode object at 0x7fd8f10d4850>)",
                "lineno": {}
            },
            {
                "args": "(vector[tls.handshake].impl.native101, <ivy.ivy_ast.NativeCode object at 0x7fd8f10d7510>, vector[tls.handshake], vector[tls.handshake], vector[tls.handshake], vector[tls.handshake], tls.handshake, vector[tls.handshake], vector[tls.handshake], vector[tls.handshake], vector[tls.handshake], vector[tls.handshake], vector[tls.handshake], vector[tls.handshake], vector[tls.handshake], vector[tls.handshake], Const('vector[tls.handshake].end', FunctionSort(UninterpretedSort('vector[tls.handshake]',), UninterpretedSort('vector[tls.handshake].domain',))), Const('vector[tls.handshake].value', FunctionSort(UninterpretedSort('vector[tls.handshake]',), UninterpretedSort('vector[tls.handshake].domain',), UninterpretedSort('tls.handshake',))), Var('X', UninterpretedSort('vector[tls.handshake].domain',)), vector[tls.handshake], vector[tls.handshake], vector[tls.handshake].domain, Const('vector[tls.handshake].end', FunctionSort(UninterpretedSort('vector[tls.handshake]',), UninterpretedSort('vector[tls.handshake].domain',))), Const('vector[tls.handshake].value', FunctionSort(UninterpretedSort('vector[tls.handshake]',), UninterpretedSort('vector[tls.handshake].domain',), UninterpretedSort('tls.handshake',))), Var('X', UninterpretedSort('vector[tls.handshake].domain',)), vector[tls.handshake], Var('X', UninterpretedSort('vector[tls.handshake].domain',)), Const('vector[tls.handshake].end', FunctionSort(UninterpretedSort('vector[tls.handshake]',), UninterpretedSort('vector[tls.handshake].domain',))), tls.handshake, Const('vector[tls.handshake].value', FunctionSort(UninterpretedSort('vector[tls.handshake]',), UninterpretedSort('vector[tls.handshake].domain',), UninterpretedSort('tls.handshake',))), Var('X', UninterpretedSort('vector[tls.handshake].domain',)))",
                "lineno": {}
            },
            {
                "args": "(native250, <ivy.ivy_ast.NativeCode object at 0x7fd8f328bc50>, tls_deser, tls_ser, tls_ser_server)",
                "lineno": {}
            },
            {
                "args": "(native251, <ivy.ivy_ast.NativeCode object at 0x7fd8f328b390>, tls_deser, tls_deser, tls_ser, tls_ser, tls_ser_server)",
                "lineno": {}
            },
            {
                "args": "(native252, <ivy.ivy_ast.NativeCode object at 0x7fd8f328bbd0>)",
                "lineno": {}
            },
            {
                "args": "(tls.handshakes.impl.native99, <ivy.ivy_ast.NativeCode object at 0x7fd8f31b0dd0>)",
                "lineno": {}
            },
            {
                "args": "(tls.handshakes.impl.native101, <ivy.ivy_ast.NativeCode object at 0x7fd8f319a290>, tls.handshakes, tls.handshakes, tls.handshakes, tls.handshakes, tls.handshake, tls.handshakes, tls.handshakes, tls.handshakes, tls.handshakes, tls.handshakes, tls.handshakes, tls.handshakes, tls.handshakes, tls.handshakes, Const('tls.handshakes.end', FunctionSort(UninterpretedSort('tls.handshakes',), UninterpretedSort('tls.handshakes.domain',))), Const('tls.handshakes.value', FunctionSort(UninterpretedSort('tls.handshakes',), UninterpretedSort('tls.handshakes.domain',), UninterpretedSort('tls.handshake',))), Var('X', UninterpretedSort('tls.handshakes.domain',)), tls.handshakes, tls.handshakes, tls.handshakes.domain, Const('tls.handshakes.end', FunctionSort(UninterpretedSort('tls.handshakes',), UninterpretedSort('tls.handshakes.domain',))), Const('tls.handshakes.value', FunctionSort(UninterpretedSort('tls.handshakes',), UninterpretedSort('tls.handshakes.domain',), UninterpretedSort('tls.handshake',))), Var('X', UninterpretedSort('tls.handshakes.domain',)), tls.handshakes, Var('X', UninterpretedSort('tls.handshakes.domain',)), Const('tls.handshakes.end', FunctionSort(UninterpretedSort('tls.handshakes',), UninterpretedSort('tls.handshakes.domain',))), tls.handshake, Const('tls.handshakes.value', FunctionSort(UninterpretedSort('tls.handshakes',), UninterpretedSort('tls.handshakes.domain',), UninterpretedSort('tls.handshake',))), Var('X', UninterpretedSort('tls.handshakes.domain',)))",
                "lineno": {}
            },
            {
                "args": "(frame.ack.range.arr.impl.native99, <ivy.ivy_ast.NativeCode object at 0x7fd8f2f3d650>)",
                "lineno": {}
            },
            {
                "args": "(frame.ack.range.arr.impl.native101, <ivy.ivy_ast.NativeCode object at 0x7fd8f2f404d0>, frame.ack.range.arr, frame.ack.range.arr, frame.ack.range.arr, frame.ack.range.arr, frame.ack.range, frame.ack.range.arr, frame.ack.range.arr, frame.ack.range.arr, frame.ack.range.arr, frame.ack.range.arr, frame.ack.range.arr, frame.ack.range.arr, frame.ack.range.arr, frame.ack.range.arr, Const('frame.ack.range.arr.end', FunctionSort(UninterpretedSort('frame.ack.range.arr',), UninterpretedSort('frame.ack.range.idx',))), Const('frame.ack.range.arr.value', FunctionSort(UninterpretedSort('frame.ack.range.arr',), UninterpretedSort('frame.ack.range.idx',), UninterpretedSort('frame.ack.range',))), Var('X', UninterpretedSort('frame.ack.range.idx',)), frame.ack.range.arr, frame.ack.range.arr, frame.ack.range.idx, Const('frame.ack.range.arr.end', FunctionSort(UninterpretedSort('frame.ack.range.arr',), UninterpretedSort('frame.ack.range.idx',))), Const('frame.ack.range.arr.value', FunctionSort(UninterpretedSort('frame.ack.range.arr',), UninterpretedSort('frame.ack.range.idx',), UninterpretedSort('frame.ack.range',))), Var('X', UninterpretedSort('frame.ack.range.idx',)), frame.ack.range.arr, Var('X', UninterpretedSort('frame.ack.range.idx',)), Const('frame.ack.range.arr.end', FunctionSort(UninterpretedSort('frame.ack.range.arr',), UninterpretedSort('frame.ack.range.idx',))), frame.ack.range, Const('frame.ack.range.arr.value', FunctionSort(UninterpretedSort('frame.ack.range.arr',), UninterpretedSort('frame.ack.range.idx',), UninterpretedSort('frame.ack.range',))), Var('X', UninterpretedSort('frame.ack.range.idx',)))",
                "lineno": {}
            },
            {
                "args": "(frame.ack_ecn.range.arr.impl.native99, <ivy.ivy_ast.NativeCode object at 0x7fd8f2f266d0>)",
                "lineno": {}
            },
            {
                "args": "(frame.ack_ecn.range.arr.impl.native101, <ivy.ivy_ast.NativeCode object at 0x7fd8f2f23310>, frame.ack_ecn.range.arr, frame.ack_ecn.range.arr, frame.ack_ecn.range.arr, frame.ack_ecn.range.arr, frame.ack_ecn.range, frame.ack_ecn.range.arr, frame.ack_ecn.range.arr, frame.ack_ecn.range.arr, frame.ack_ecn.range.arr, frame.ack_ecn.range.arr, frame.ack_ecn.range.arr, frame.ack_ecn.range.arr, frame.ack_ecn.range.arr, frame.ack_ecn.range.arr, Const('frame.ack_ecn.range.arr.end', FunctionSort(UninterpretedSort('frame.ack_ecn.range.arr',), UninterpretedSort('frame.ack_ecn.range.idx',))), Const('frame.ack_ecn.range.arr.value', FunctionSort(UninterpretedSort('frame.ack_ecn.range.arr',), UninterpretedSort('frame.ack_ecn.range.idx',), UninterpretedSort('frame.ack_ecn.range',))), Var('X', UninterpretedSort('frame.ack_ecn.range.idx',)), frame.ack_ecn.range.arr, frame.ack_ecn.range.arr, frame.ack_ecn.range.idx, Const('frame.ack_ecn.range.arr.end', FunctionSort(UninterpretedSort('frame.ack_ecn.range.arr',), UninterpretedSort('frame.ack_ecn.range.idx',))), Const('frame.ack_ecn.range.arr.value', FunctionSort(UninterpretedSort('frame.ack_ecn.range.arr',), UninterpretedSort('frame.ack_ecn.range.idx',), UninterpretedSort('frame.ack_ecn.range',))), Var('X', UninterpretedSort('frame.ack_ecn.range.idx',)), frame.ack_ecn.range.arr, Var('X', UninterpretedSort('frame.ack_ecn.range.idx',)), Const('frame.ack_ecn.range.arr.end', FunctionSort(UninterpretedSort('frame.ack_ecn.range.arr',), UninterpretedSort('frame.ack_ecn.range.idx',))), frame.ack_ecn.range, Const('frame.ack_ecn.range.arr.value', FunctionSort(UninterpretedSort('frame.ack_ecn.range.arr',), UninterpretedSort('frame.ack_ecn.range.idx',), UninterpretedSort('frame.ack_ecn.range',))), Var('X', UninterpretedSort('frame.ack_ecn.range.idx',)))",
                "lineno": {}
            },
            {
                "args": "(frame.arr.impl.native99, <ivy.ivy_ast.NativeCode object at 0x7fd8f3207590>)",
                "lineno": {}
            },
            {
                "args": "(frame.arr.impl.native101, <ivy.ivy_ast.NativeCode object at 0x7fd8f32422d0>, frame.arr, frame.arr, frame.arr, frame.arr, frame, frame.arr, frame.arr, frame.arr, frame.arr, frame.arr, frame.arr, frame.arr, frame.arr, frame.arr, Const('frame.arr.end', FunctionSort(UninterpretedSort('frame.arr',), UninterpretedSort('frame.idx',))), Const('frame.arr.value', FunctionSort(UninterpretedSort('frame.arr',), UninterpretedSort('frame.idx',), UninterpretedSort('frame',))), Var('X', UninterpretedSort('frame.idx',)), frame.arr, frame.arr, frame.idx, Const('frame.arr.end', FunctionSort(UninterpretedSort('frame.arr',), UninterpretedSort('frame.idx',))), Const('frame.arr.value', FunctionSort(UninterpretedSort('frame.arr',), UninterpretedSort('frame.idx',), UninterpretedSort('frame',))), Var('X', UninterpretedSort('frame.idx',)), frame.arr, Var('X', UninterpretedSort('frame.idx',)), Const('frame.arr.end', FunctionSort(UninterpretedSort('frame.arr',), UninterpretedSort('frame.idx',))), frame, Const('frame.arr.value', FunctionSort(UninterpretedSort('frame.arr',), UninterpretedSort('frame.idx',), UninterpretedSort('frame',))), Var('X', UninterpretedSort('frame.idx',)))",
                "lineno": {}
            },
            {
                "args": "(versions.impl.native99, <ivy.ivy_ast.NativeCode object at 0x7fd8f2d830d0>)",
                "lineno": {}
            },
            {
                "args": "(versions.impl.native101, <ivy.ivy_ast.NativeCode object at 0x7fd8f2d91bd0>, versions, versions, versions, versions, stream_data, versions, versions, versions, versions, versions, versions, versions, versions, versions, Const('versions.end', FunctionSort(UninterpretedSort('versions',), UninterpretedSort('index',))), Const('versions.value', FunctionSort(UninterpretedSort('versions',), UninterpretedSort('index',), UninterpretedSort('stream_data',))), Var('X', UninterpretedSort('index',)), versions, versions, index, Const('versions.end', FunctionSort(UninterpretedSort('versions',), UninterpretedSort('index',))), Const('versions.value', FunctionSort(UninterpretedSort('versions',), UninterpretedSort('index',), UninterpretedSort('stream_data',))), Var('X', UninterpretedSort('index',)), versions, Var('X', UninterpretedSort('index',)), Const('versions.end', FunctionSort(UninterpretedSort('versions',), UninterpretedSort('index',))), stream_data, Const('versions.value', FunctionSort(UninterpretedSort('versions',), UninterpretedSort('index',), UninterpretedSort('stream_data',))), Var('X', UninterpretedSort('index',)))",
                "lineno": {}
            },
            {
                "args": "(versions_bv.impl.native99, <ivy.ivy_ast.NativeCode object at 0x7fd8f2cfe710>)",
                "lineno": {}
            },
            {
                "args": "(versions_bv.impl.native101, <ivy.ivy_ast.NativeCode object at 0x7fd8f2d0eb10>, versions_bv, versions_bv, versions_bv, versions_bv, version, versions_bv, versions_bv, versions_bv, versions_bv, versions_bv, versions_bv, versions_bv, versions_bv, versions_bv, Const('versions_bv.end', FunctionSort(UninterpretedSort('versions_bv',), UninterpretedSort('index',))), Const('versions_bv.value', FunctionSort(UninterpretedSort('versions_bv',), UninterpretedSort('index',), UninterpretedSort('version',))), Var('X', UninterpretedSort('index',)), versions_bv, versions_bv, index, Const('versions_bv.end', FunctionSort(UninterpretedSort('versions_bv',), UninterpretedSort('index',))), Const('versions_bv.value', FunctionSort(UninterpretedSort('versions_bv',), UninterpretedSort('index',), UninterpretedSort('version',))), Var('X', UninterpretedSort('index',)), versions_bv, Var('X', UninterpretedSort('index',)), Const('versions_bv.end', FunctionSort(UninterpretedSort('versions_bv',), UninterpretedSort('index',))), version, Const('versions_bv.value', FunctionSort(UninterpretedSort('versions_bv',), UninterpretedSort('index',), UninterpretedSort('version',))), Var('X', UninterpretedSort('index',)))",
                "lineno": {}
            },
            {
                "args": "(quic_packet_vn.arr.impl.native99, <ivy.ivy_ast.NativeCode object at 0x7fd8f2c72590>)",
                "lineno": {}
            },
            {
                "args": "(quic_packet_vn.arr.impl.native101, <ivy.ivy_ast.NativeCode object at 0x7fd8f2c65b50>, quic_packet_vn.arr, quic_packet_vn.arr, quic_packet_vn.arr, quic_packet_vn.arr, quic_packet_vn, quic_packet_vn.arr, quic_packet_vn.arr, quic_packet_vn.arr, quic_packet_vn.arr, quic_packet_vn.arr, quic_packet_vn.arr, quic_packet_vn.arr, quic_packet_vn.arr, quic_packet_vn.arr, Const('quic_packet_vn.arr.end', FunctionSort(UninterpretedSort('quic_packet_vn.arr',), UninterpretedSort('quic_packet_vn.idx',))), Const('quic_packet_vn.arr.value', FunctionSort(UninterpretedSort('quic_packet_vn.arr',), UninterpretedSort('quic_packet_vn.idx',), UninterpretedSort('quic_packet_vn',))), Var('X', UninterpretedSort('quic_packet_vn.idx',)), quic_packet_vn.arr, quic_packet_vn.arr, quic_packet_vn.idx, Const('quic_packet_vn.arr.end', FunctionSort(UninterpretedSort('quic_packet_vn.arr',), UninterpretedSort('quic_packet_vn.idx',))), Const('quic_packet_vn.arr.value', FunctionSort(UninterpretedSort('quic_packet_vn.arr',), UninterpretedSort('quic_packet_vn.idx',), UninterpretedSort('quic_packet_vn',))), Var('X', UninterpretedSort('quic_packet_vn.idx',)), quic_packet_vn.arr, Var('X', UninterpretedSort('quic_packet_vn.idx',)), Const('quic_packet_vn.arr.end', FunctionSort(UninterpretedSort('quic_packet_vn.arr',), UninterpretedSort('quic_packet_vn.idx',))), quic_packet_vn, Const('quic_packet_vn.arr.value', FunctionSort(UninterpretedSort('quic_packet_vn.arr',), UninterpretedSort('quic_packet_vn.idx',), UninterpretedSort('quic_packet_vn',))), Var('X', UninterpretedSort('quic_packet_vn.idx',)))",
                "lineno": {}
            },
            {
                "args": "(vector[transport_parameter].impl.native99, <ivy.ivy_ast.NativeCode object at 0x7fd8f103c3d0>)",
                "lineno": {}
            },
            {
                "args": "(vector[transport_parameter].impl.native101, <ivy.ivy_ast.NativeCode object at 0x7fd8f103cf50>, vector[transport_parameter], vector[transport_parameter], vector[transport_parameter], vector[transport_parameter], transport_parameter, vector[transport_parameter], vector[transport_parameter], vector[transport_parameter], vector[transport_parameter], vector[transport_parameter], vector[transport_parameter], vector[transport_parameter], vector[transport_parameter], vector[transport_parameter], Const('vector[transport_parameter].end', FunctionSort(UninterpretedSort('vector[transport_parameter]',), UninterpretedSort('vector[transport_parameter].domain',))), Const('vector[transport_parameter].value', FunctionSort(UninterpretedSort('vector[transport_parameter]',), UninterpretedSort('vector[transport_parameter].domain',), UninterpretedSort('transport_parameter',))), Var('X', UninterpretedSort('vector[transport_parameter].domain',)), vector[transport_parameter], vector[transport_parameter], vector[transport_parameter].domain, Const('vector[transport_parameter].end', FunctionSort(UninterpretedSort('vector[transport_parameter]',), UninterpretedSort('vector[transport_parameter].domain',))), Const('vector[transport_parameter].value', FunctionSort(UninterpretedSort('vector[transport_parameter]',), UninterpretedSort('vector[transport_parameter].domain',), UninterpretedSort('transport_parameter',))), Var('X', UninterpretedSort('vector[transport_parameter].domain',)), vector[transport_parameter], Var('X', UninterpretedSort('vector[transport_parameter].domain',)), Const('vector[transport_parameter].end', FunctionSort(UninterpretedSort('vector[transport_parameter]',), UninterpretedSort('vector[transport_parameter].domain',))), transport_parameter, Const('vector[transport_parameter].value', FunctionSort(UninterpretedSort('vector[transport_parameter]',), UninterpretedSort('vector[transport_parameter].domain',), UninterpretedSort('transport_parameter',))), Var('X', UninterpretedSort('vector[transport_parameter].domain',)))",
                "lineno": {}
            },
            {
                "args": "(arr_streamid_s.impl.native99, <ivy.ivy_ast.NativeCode object at 0x7fd8f2c18890>)",
                "lineno": {}
            },
            {
                "args": "(arr_streamid_s.impl.native101, <ivy.ivy_ast.NativeCode object at 0x7fd8f2c0e1d0>, arr_streamid_s, arr_streamid_s, arr_streamid_s, arr_streamid_s, stream_id, arr_streamid_s, arr_streamid_s, arr_streamid_s, arr_streamid_s, arr_streamid_s, arr_streamid_s, arr_streamid_s, arr_streamid_s, arr_streamid_s, Const('arr_streamid_s.end', FunctionSort(UninterpretedSort('arr_streamid_s',), UninterpretedSort('idx_s',))), Const('arr_streamid_s.value', FunctionSort(UninterpretedSort('arr_streamid_s',), UninterpretedSort('idx_s',), UninterpretedSort('stream_id',))), Var('X', UninterpretedSort('idx_s',)), arr_streamid_s, arr_streamid_s, idx_s, Const('arr_streamid_s.end', FunctionSort(UninterpretedSort('arr_streamid_s',), UninterpretedSort('idx_s',))), Const('arr_streamid_s.value', FunctionSort(UninterpretedSort('arr_streamid_s',), UninterpretedSort('idx_s',), UninterpretedSort('stream_id',))), Var('X', UninterpretedSort('idx_s',)), arr_streamid_s, Var('X', UninterpretedSort('idx_s',)), Const('arr_streamid_s.end', FunctionSort(UninterpretedSort('arr_streamid_s',), UninterpretedSort('idx_s',))), stream_id, Const('arr_streamid_s.value', FunctionSort(UninterpretedSort('arr_streamid_s',), UninterpretedSort('idx_s',), UninterpretedSort('stream_id',))), Var('X', UninterpretedSort('idx_s',)))",
                "lineno": {}
            },
            {
                "args": "(arr_pkt_num_s.impl.native99, <ivy.ivy_ast.NativeCode object at 0x7fd8f2b00890>)",
                "lineno": {}
            },
            {
                "args": "(arr_pkt_num_s.impl.native101, <ivy.ivy_ast.NativeCode object at 0x7fd8f2b04510>, arr_pkt_num_s, arr_pkt_num_s, arr_pkt_num_s, arr_pkt_num_s, pkt_num, arr_pkt_num_s, arr_pkt_num_s, arr_pkt_num_s, arr_pkt_num_s, arr_pkt_num_s, arr_pkt_num_s, arr_pkt_num_s, arr_pkt_num_s, arr_pkt_num_s, Const('arr_pkt_num_s.end', FunctionSort(UninterpretedSort('arr_pkt_num_s',), UninterpretedSort('jdx_s',))), Const('arr_pkt_num_s.value', FunctionSort(UninterpretedSort('arr_pkt_num_s',), UninterpretedSort('jdx_s',), UninterpretedSort('pkt_num',))), Var('X', UninterpretedSort('jdx_s',)), arr_pkt_num_s, arr_pkt_num_s, jdx_s, Const('arr_pkt_num_s.end', FunctionSort(UninterpretedSort('arr_pkt_num_s',), UninterpretedSort('jdx_s',))), Const('arr_pkt_num_s.value', FunctionSort(UninterpretedSort('arr_pkt_num_s',), UninterpretedSort('jdx_s',), UninterpretedSort('pkt_num',))), Var('X', UninterpretedSort('jdx_s',)), arr_pkt_num_s, Var('X', UninterpretedSort('jdx_s',)), Const('arr_pkt_num_s.end', FunctionSort(UninterpretedSort('arr_pkt_num_s',), UninterpretedSort('jdx_s',))), pkt_num, Const('arr_pkt_num_s.value', FunctionSort(UninterpretedSort('arr_pkt_num_s',), UninterpretedSort('jdx_s',), UninterpretedSort('pkt_num',))), Var('X', UninterpretedSort('jdx_s',)))",
                "lineno": {}
            },
            {
                "args": "(arr_streamid_r.impl.native99, <ivy.ivy_ast.NativeCode object at 0x7fd8f2a7ff50>)",
                "lineno": {}
            },
            {
                "args": "(arr_streamid_r.impl.native101, <ivy.ivy_ast.NativeCode object at 0x7fd8f2a99710>, arr_streamid_r, arr_streamid_r, arr_streamid_r, arr_streamid_r, stream_id, arr_streamid_r, arr_streamid_r, arr_streamid_r, arr_streamid_r, arr_streamid_r, arr_streamid_r, arr_streamid_r, arr_streamid_r, arr_streamid_r, Const('arr_streamid_r.end', FunctionSort(UninterpretedSort('arr_streamid_r',), UninterpretedSort('idx_r',))), Const('arr_streamid_r.value', FunctionSort(UninterpretedSort('arr_streamid_r',), UninterpretedSort('idx_r',), UninterpretedSort('stream_id',))), Var('X', UninterpretedSort('idx_r',)), arr_streamid_r, arr_streamid_r, idx_r, Const('arr_streamid_r.end', FunctionSort(UninterpretedSort('arr_streamid_r',), UninterpretedSort('idx_r',))), Const('arr_streamid_r.value', FunctionSort(UninterpretedSort('arr_streamid_r',), UninterpretedSort('idx_r',), UninterpretedSort('stream_id',))), Var('X', UninterpretedSort('idx_r',)), arr_streamid_r, Var('X', UninterpretedSort('idx_r',)), Const('arr_streamid_r.end', FunctionSort(UninterpretedSort('arr_streamid_r',), UninterpretedSort('idx_r',))), stream_id, Const('arr_streamid_r.value', FunctionSort(UninterpretedSort('arr_streamid_r',), UninterpretedSort('idx_r',), UninterpretedSort('stream_id',))), Var('X', UninterpretedSort('idx_r',)))",
                "lineno": {}
            },
            {
                "args": "(arr_pkt_num_r.impl.native99, <ivy.ivy_ast.NativeCode object at 0x7fd8f2a10f50>)",
                "lineno": {}
            },
            {
                "args": "(arr_pkt_num_r.impl.native101, <ivy.ivy_ast.NativeCode object at 0x7fd8f2a78c10>, arr_pkt_num_r, arr_pkt_num_r, arr_pkt_num_r, arr_pkt_num_r, pkt_num, arr_pkt_num_r, arr_pkt_num_r, arr_pkt_num_r, arr_pkt_num_r, arr_pkt_num_r, arr_pkt_num_r, arr_pkt_num_r, arr_pkt_num_r, arr_pkt_num_r, Const('arr_pkt_num_r.end', FunctionSort(UninterpretedSort('arr_pkt_num_r',), UninterpretedSort('jdx_r',))), Const('arr_pkt_num_r.value', FunctionSort(UninterpretedSort('arr_pkt_num_r',), UninterpretedSort('jdx_r',), UninterpretedSort('pkt_num',))), Var('X', UninterpretedSort('jdx_r',)), arr_pkt_num_r, arr_pkt_num_r, jdx_r, Const('arr_pkt_num_r.end', FunctionSort(UninterpretedSort('arr_pkt_num_r',), UninterpretedSort('jdx_r',))), Const('arr_pkt_num_r.value', FunctionSort(UninterpretedSort('arr_pkt_num_r',), UninterpretedSort('jdx_r',), UninterpretedSort('pkt_num',))), Var('X', UninterpretedSort('jdx_r',)), arr_pkt_num_r, Var('X', UninterpretedSort('jdx_r',)), Const('arr_pkt_num_r.end', FunctionSort(UninterpretedSort('arr_pkt_num_r',), UninterpretedSort('jdx_r',))), pkt_num, Const('arr_pkt_num_r.value', FunctionSort(UninterpretedSort('arr_pkt_num_r',), UninterpretedSort('jdx_r',), UninterpretedSort('pkt_num',))), Var('X', UninterpretedSort('jdx_r',)))",
                "lineno": {}
            },
            {
                "args": "(quic_packet.arr.impl.native99, <ivy.ivy_ast.NativeCode object at 0x7fd8f28ecb50>)",
                "lineno": {}
            },
            {
                "args": "(quic_packet.arr.impl.native101, <ivy.ivy_ast.NativeCode object at 0x7fd8f28c6f10>, quic_packet.arr, quic_packet.arr, quic_packet.arr, quic_packet.arr, quic_packet, quic_packet.arr, quic_packet.arr, quic_packet.arr, quic_packet.arr, quic_packet.arr, quic_packet.arr, quic_packet.arr, quic_packet.arr, quic_packet.arr, Const('quic_packet.arr.end', FunctionSort(UninterpretedSort('quic_packet.arr',), UninterpretedSort('quic_packet.idx',))), Const('quic_packet.arr.value', FunctionSort(UninterpretedSort('quic_packet.arr',), UninterpretedSort('quic_packet.idx',), UninterpretedSort('quic_packet',))), Var('X', UninterpretedSort('quic_packet.idx',)), quic_packet.arr, quic_packet.arr, quic_packet.idx, Const('quic_packet.arr.end', FunctionSort(UninterpretedSort('quic_packet.arr',), UninterpretedSort('quic_packet.idx',))), Const('quic_packet.arr.value', FunctionSort(UninterpretedSort('quic_packet.arr',), UninterpretedSort('quic_packet.idx',), UninterpretedSort('quic_packet',))), Var('X', UninterpretedSort('quic_packet.idx',)), quic_packet.arr, Var('X', UninterpretedSort('quic_packet.idx',)), Const('quic_packet.arr.end', FunctionSort(UninterpretedSort('quic_packet.arr',), UninterpretedSort('quic_packet.idx',))), quic_packet, Const('quic_packet.arr.value', FunctionSort(UninterpretedSort('quic_packet.arr',), UninterpretedSort('quic_packet.idx',), UninterpretedSort('quic_packet',))), Var('X', UninterpretedSort('quic_packet.idx',)))",
                "lineno": {}
            },
            {
                "args": "(quic_packet.retired_cids.impl.native99, <ivy.ivy_ast.NativeCode object at 0x7fd8f2847710>)",
                "lineno": {}
            },
            {
                "args": "(quic_packet.retired_cids.impl.native101, <ivy.ivy_ast.NativeCode object at 0x7fd8f283bd10>, quic_packet.retired_cids, quic_packet.retired_cids, quic_packet.retired_cids, quic_packet.retired_cids, cid_seq, quic_packet.retired_cids, quic_packet.retired_cids, quic_packet.retired_cids, quic_packet.retired_cids, quic_packet.retired_cids, quic_packet.retired_cids, quic_packet.retired_cids, quic_packet.retired_cids, quic_packet.retired_cids, Const('quic_packet.retired_cids.end', FunctionSort(UninterpretedSort('quic_packet.retired_cids',), UninterpretedSort('quic_packet.idx',))), Const('quic_packet.retired_cids.value', FunctionSort(UninterpretedSort('quic_packet.retired_cids',), UninterpretedSort('quic_packet.idx',), UninterpretedSort('cid_seq',))), Var('X', UninterpretedSort('quic_packet.idx',)), quic_packet.retired_cids, quic_packet.retired_cids, quic_packet.idx, Const('quic_packet.retired_cids.end', FunctionSort(UninterpretedSort('quic_packet.retired_cids',), UninterpretedSort('quic_packet.idx',))), Const('quic_packet.retired_cids.value', FunctionSort(UninterpretedSort('quic_packet.retired_cids',), UninterpretedSort('quic_packet.idx',), UninterpretedSort('cid_seq',))), Var('X', UninterpretedSort('quic_packet.idx',)), quic_packet.retired_cids, Var('X', UninterpretedSort('quic_packet.idx',)), Const('quic_packet.retired_cids.end', FunctionSort(UninterpretedSort('quic_packet.retired_cids',), UninterpretedSort('quic_packet.idx',))), cid_seq, Const('quic_packet.retired_cids.value', FunctionSort(UninterpretedSort('quic_packet.retired_cids',), UninterpretedSort('quic_packet.idx',), UninterpretedSort('cid_seq',))), Var('X', UninterpretedSort('quic_packet.idx',)))",
                "lineno": {}
            },
            {
                "args": "(quic_packet_retry.arr.impl.native99, <ivy.ivy_ast.NativeCode object at 0x7fd8f2763510>)",
                "lineno": {}
            },
            {
                "args": "(quic_packet_retry.arr.impl.native101, <ivy.ivy_ast.NativeCode object at 0x7fd8f2763dd0>, quic_packet_retry.arr, quic_packet_retry.arr, quic_packet_retry.arr, quic_packet_retry.arr, quic_packet_retry, quic_packet_retry.arr, quic_packet_retry.arr, quic_packet_retry.arr, quic_packet_retry.arr, quic_packet_retry.arr, quic_packet_retry.arr, quic_packet_retry.arr, quic_packet_retry.arr, quic_packet_retry.arr, Const('quic_packet_retry.arr.end', FunctionSort(UninterpretedSort('quic_packet_retry.arr',), UninterpretedSort('quic_packet_retry.idx',))), Const('quic_packet_retry.arr.value', FunctionSort(UninterpretedSort('quic_packet_retry.arr',), UninterpretedSort('quic_packet_retry.idx',), UninterpretedSort('quic_packet_retry',))), Var('X', UninterpretedSort('quic_packet_retry.idx',)), quic_packet_retry.arr, quic_packet_retry.arr, quic_packet_retry.idx, Const('quic_packet_retry.arr.end', FunctionSort(UninterpretedSort('quic_packet_retry.arr',), UninterpretedSort('quic_packet_retry.idx',))), Const('quic_packet_retry.arr.value', FunctionSort(UninterpretedSort('quic_packet_retry.arr',), UninterpretedSort('quic_packet_retry.idx',), UninterpretedSort('quic_packet_retry',))), Var('X', UninterpretedSort('quic_packet_retry.idx',)), quic_packet_retry.arr, Var('X', UninterpretedSort('quic_packet_retry.idx',)), Const('quic_packet_retry.arr.end', FunctionSort(UninterpretedSort('quic_packet_retry.arr',), UninterpretedSort('quic_packet_retry.idx',))), quic_packet_retry, Const('quic_packet_retry.arr.value', FunctionSort(UninterpretedSort('quic_packet_retry.arr',), UninterpretedSort('quic_packet_retry.idx',), UninterpretedSort('quic_packet_retry',))), Var('X', UninterpretedSort('quic_packet_retry.idx',)))",
                "lineno": {}
            },
            {
                "args": "(quic_packet_retry.retired_cids.impl.native99, <ivy.ivy_ast.NativeCode object at 0x7fd8f2729810>)",
                "lineno": {}
            },
            {
                "args": "(quic_packet_retry.retired_cids.impl.native101, <ivy.ivy_ast.NativeCode object at 0x7fd8f27327d0>, quic_packet_retry.retired_cids, quic_packet_retry.retired_cids, quic_packet_retry.retired_cids, quic_packet_retry.retired_cids, cid_seq, quic_packet_retry.retired_cids, quic_packet_retry.retired_cids, quic_packet_retry.retired_cids, quic_packet_retry.retired_cids, quic_packet_retry.retired_cids, quic_packet_retry.retired_cids, quic_packet_retry.retired_cids, quic_packet_retry.retired_cids, quic_packet_retry.retired_cids, Const('quic_packet_retry.retired_cids.end', FunctionSort(UninterpretedSort('quic_packet_retry.retired_cids',), UninterpretedSort('quic_packet_retry.idx',))), Const('quic_packet_retry.retired_cids.value', FunctionSort(UninterpretedSort('quic_packet_retry.retired_cids',), UninterpretedSort('quic_packet_retry.idx',), UninterpretedSort('cid_seq',))), Var('X', UninterpretedSort('quic_packet_retry.idx',)), quic_packet_retry.retired_cids, quic_packet_retry.retired_cids, quic_packet_retry.idx, Const('quic_packet_retry.retired_cids.end', FunctionSort(UninterpretedSort('quic_packet_retry.retired_cids',), UninterpretedSort('quic_packet_retry.idx',))), Const('quic_packet_retry.retired_cids.value', FunctionSort(UninterpretedSort('quic_packet_retry.retired_cids',), UninterpretedSort('quic_packet_retry.idx',), UninterpretedSort('cid_seq',))), Var('X', UninterpretedSort('quic_packet_retry.idx',)), quic_packet_retry.retired_cids, Var('X', UninterpretedSort('quic_packet_retry.idx',)), Const('quic_packet_retry.retired_cids.end', FunctionSort(UninterpretedSort('quic_packet_retry.retired_cids',), UninterpretedSort('quic_packet_retry.idx',))), cid_seq, Const('quic_packet_retry.retired_cids.value', FunctionSort(UninterpretedSort('quic_packet_retry.retired_cids',), UninterpretedSort('quic_packet_retry.idx',), UninterpretedSort('cid_seq',))), Var('X', UninterpretedSort('quic_packet_retry.idx',)))",
                "lineno": {}
            },
            {
                "args": "(quic_packet_0rtt.arr.impl.native99, <ivy.ivy_ast.NativeCode object at 0x7fd8f2662dd0>)",
                "lineno": {}
            },
            {
                "args": "(quic_packet_0rtt.arr.impl.native101, <ivy.ivy_ast.NativeCode object at 0x7fd8f2662ad0>, quic_packet_0rtt.arr, quic_packet_0rtt.arr, quic_packet_0rtt.arr, quic_packet_0rtt.arr, quic_packet_0rtt, quic_packet_0rtt.arr, quic_packet_0rtt.arr, quic_packet_0rtt.arr, quic_packet_0rtt.arr, quic_packet_0rtt.arr, quic_packet_0rtt.arr, quic_packet_0rtt.arr, quic_packet_0rtt.arr, quic_packet_0rtt.arr, Const('quic_packet_0rtt.arr.end', FunctionSort(UninterpretedSort('quic_packet_0rtt.arr',), UninterpretedSort('quic_packet_0rtt.idx',))), Const('quic_packet_0rtt.arr.value', FunctionSort(UninterpretedSort('quic_packet_0rtt.arr',), UninterpretedSort('quic_packet_0rtt.idx',), UninterpretedSort('quic_packet_0rtt',))), Var('X', UninterpretedSort('quic_packet_0rtt.idx',)), quic_packet_0rtt.arr, quic_packet_0rtt.arr, quic_packet_0rtt.idx, Const('quic_packet_0rtt.arr.end', FunctionSort(UninterpretedSort('quic_packet_0rtt.arr',), UninterpretedSort('quic_packet_0rtt.idx',))), Const('quic_packet_0rtt.arr.value', FunctionSort(UninterpretedSort('quic_packet_0rtt.arr',), UninterpretedSort('quic_packet_0rtt.idx',), UninterpretedSort('quic_packet_0rtt',))), Var('X', UninterpretedSort('quic_packet_0rtt.idx',)), quic_packet_0rtt.arr, Var('X', UninterpretedSort('quic_packet_0rtt.idx',)), Const('quic_packet_0rtt.arr.end', FunctionSort(UninterpretedSort('quic_packet_0rtt.arr',), UninterpretedSort('quic_packet_0rtt.idx',))), quic_packet_0rtt, Const('quic_packet_0rtt.arr.value', FunctionSort(UninterpretedSort('quic_packet_0rtt.arr',), UninterpretedSort('quic_packet_0rtt.idx',), UninterpretedSort('quic_packet_0rtt',))), Var('X', UninterpretedSort('quic_packet_0rtt.idx',)))",
                "lineno": {}
            },
            {
                "args": "(quic_packet_0rtt.retired_cids.impl.native99, <ivy.ivy_ast.NativeCode object at 0x7fd8f2673250>)",
                "lineno": {}
            },
            {
                "args": "(quic_packet_0rtt.retired_cids.impl.native101, <ivy.ivy_ast.NativeCode object at 0x7fd8f262ced0>, quic_packet_0rtt.retired_cids, quic_packet_0rtt.retired_cids, quic_packet_0rtt.retired_cids, quic_packet_0rtt.retired_cids, cid_seq, quic_packet_0rtt.retired_cids, quic_packet_0rtt.retired_cids, quic_packet_0rtt.retired_cids, quic_packet_0rtt.retired_cids, quic_packet_0rtt.retired_cids, quic_packet_0rtt.retired_cids, quic_packet_0rtt.retired_cids, quic_packet_0rtt.retired_cids, quic_packet_0rtt.retired_cids, Const('quic_packet_0rtt.retired_cids.end', FunctionSort(UninterpretedSort('quic_packet_0rtt.retired_cids',), UninterpretedSort('quic_packet_0rtt.idx',))), Const('quic_packet_0rtt.retired_cids.value', FunctionSort(UninterpretedSort('quic_packet_0rtt.retired_cids',), UninterpretedSort('quic_packet_0rtt.idx',), UninterpretedSort('cid_seq',))), Var('X', UninterpretedSort('quic_packet_0rtt.idx',)), quic_packet_0rtt.retired_cids, quic_packet_0rtt.retired_cids, quic_packet_0rtt.idx, Const('quic_packet_0rtt.retired_cids.end', FunctionSort(UninterpretedSort('quic_packet_0rtt.retired_cids',), UninterpretedSort('quic_packet_0rtt.idx',))), Const('quic_packet_0rtt.retired_cids.value', FunctionSort(UninterpretedSort('quic_packet_0rtt.retired_cids',), UninterpretedSort('quic_packet_0rtt.idx',), UninterpretedSort('cid_seq',))), Var('X', UninterpretedSort('quic_packet_0rtt.idx',)), quic_packet_0rtt.retired_cids, Var('X', UninterpretedSort('quic_packet_0rtt.idx',)), Const('quic_packet_0rtt.retired_cids.end', FunctionSort(UninterpretedSort('quic_packet_0rtt.retired_cids',), UninterpretedSort('quic_packet_0rtt.idx',))), cid_seq, Const('quic_packet_0rtt.retired_cids.value', FunctionSort(UninterpretedSort('quic_packet_0rtt.retired_cids',), UninterpretedSort('quic_packet_0rtt.idx',), UninterpretedSort('cid_seq',))), Var('X', UninterpretedSort('quic_packet_0rtt.idx',)))",
                "lineno": {}
            },
            {
                "args": "(quic_packet_coal_0rtt.arr.impl.native99, <ivy.ivy_ast.NativeCode object at 0x7fd8f2565690>)",
                "lineno": {}
            },
            {
                "args": "(quic_packet_coal_0rtt.arr.impl.native101, <ivy.ivy_ast.NativeCode object at 0x7fd8f25582d0>, quic_packet_coal_0rtt.arr, quic_packet_coal_0rtt.arr, quic_packet_coal_0rtt.arr, quic_packet_coal_0rtt.arr, quic_packet_coal_0rtt, quic_packet_coal_0rtt.arr, quic_packet_coal_0rtt.arr, quic_packet_coal_0rtt.arr, quic_packet_coal_0rtt.arr, quic_packet_coal_0rtt.arr, quic_packet_coal_0rtt.arr, quic_packet_coal_0rtt.arr, quic_packet_coal_0rtt.arr, quic_packet_coal_0rtt.arr, Const('quic_packet_coal_0rtt.arr.end', FunctionSort(UninterpretedSort('quic_packet_coal_0rtt.arr',), UninterpretedSort('quic_packet_coal_0rtt.idx',))), Const('quic_packet_coal_0rtt.arr.value', FunctionSort(UninterpretedSort('quic_packet_coal_0rtt.arr',), UninterpretedSort('quic_packet_coal_0rtt.idx',), UninterpretedSort('quic_packet_coal_0rtt',))), Var('X', UninterpretedSort('quic_packet_coal_0rtt.idx',)), quic_packet_coal_0rtt.arr, quic_packet_coal_0rtt.arr, quic_packet_coal_0rtt.idx, Const('quic_packet_coal_0rtt.arr.end', FunctionSort(UninterpretedSort('quic_packet_coal_0rtt.arr',), UninterpretedSort('quic_packet_coal_0rtt.idx',))), Const('quic_packet_coal_0rtt.arr.value', FunctionSort(UninterpretedSort('quic_packet_coal_0rtt.arr',), UninterpretedSort('quic_packet_coal_0rtt.idx',), UninterpretedSort('quic_packet_coal_0rtt',))), Var('X', UninterpretedSort('quic_packet_coal_0rtt.idx',)), quic_packet_coal_0rtt.arr, Var('X', UninterpretedSort('quic_packet_coal_0rtt.idx',)), Const('quic_packet_coal_0rtt.arr.end', FunctionSort(UninterpretedSort('quic_packet_coal_0rtt.arr',), UninterpretedSort('quic_packet_coal_0rtt.idx',))), quic_packet_coal_0rtt, Const('quic_packet_coal_0rtt.arr.value', FunctionSort(UninterpretedSort('quic_packet_coal_0rtt.arr',), UninterpretedSort('quic_packet_coal_0rtt.idx',), UninterpretedSort('quic_packet_coal_0rtt',))), Var('X', UninterpretedSort('quic_packet_coal_0rtt.idx',)))",
                "lineno": {}
            },
            {
                "args": "(quic_packet_coal_0rtt.retired_cids.impl.native99, <ivy.ivy_ast.NativeCode object at 0x7fd8f2533b90>)",
                "lineno": {}
            },
            {
                "args": "(quic_packet_coal_0rtt.retired_cids.impl.native101, <ivy.ivy_ast.NativeCode object at 0x7fd8f2533e90>, quic_packet_coal_0rtt.retired_cids, quic_packet_coal_0rtt.retired_cids, quic_packet_coal_0rtt.retired_cids, quic_packet_coal_0rtt.retired_cids, cid_seq, quic_packet_coal_0rtt.retired_cids, quic_packet_coal_0rtt.retired_cids, quic_packet_coal_0rtt.retired_cids, quic_packet_coal_0rtt.retired_cids, quic_packet_coal_0rtt.retired_cids, quic_packet_coal_0rtt.retired_cids, quic_packet_coal_0rtt.retired_cids, quic_packet_coal_0rtt.retired_cids, quic_packet_coal_0rtt.retired_cids, Const('quic_packet_coal_0rtt.retired_cids.end', FunctionSort(UninterpretedSort('quic_packet_coal_0rtt.retired_cids',), UninterpretedSort('quic_packet_coal_0rtt.idx',))), Const('quic_packet_coal_0rtt.retired_cids.value', FunctionSort(UninterpretedSort('quic_packet_coal_0rtt.retired_cids',), UninterpretedSort('quic_packet_coal_0rtt.idx',), UninterpretedSort('cid_seq',))), Var('X', UninterpretedSort('quic_packet_coal_0rtt.idx',)), quic_packet_coal_0rtt.retired_cids, quic_packet_coal_0rtt.retired_cids, quic_packet_coal_0rtt.idx, Const('quic_packet_coal_0rtt.retired_cids.end', FunctionSort(UninterpretedSort('quic_packet_coal_0rtt.retired_cids',), UninterpretedSort('quic_packet_coal_0rtt.idx',))), Const('quic_packet_coal_0rtt.retired_cids.value', FunctionSort(UninterpretedSort('quic_packet_coal_0rtt.retired_cids',), UninterpretedSort('quic_packet_coal_0rtt.idx',), UninterpretedSort('cid_seq',))), Var('X', UninterpretedSort('quic_packet_coal_0rtt.idx',)), quic_packet_coal_0rtt.retired_cids, Var('X', UninterpretedSort('quic_packet_coal_0rtt.idx',)), Const('quic_packet_coal_0rtt.retired_cids.end', FunctionSort(UninterpretedSort('quic_packet_coal_0rtt.retired_cids',), UninterpretedSort('quic_packet_coal_0rtt.idx',))), cid_seq, Const('quic_packet_coal_0rtt.retired_cids.value', FunctionSort(UninterpretedSort('quic_packet_coal_0rtt.retired_cids',), UninterpretedSort('quic_packet_coal_0rtt.idx',), UninterpretedSort('cid_seq',))), Var('X', UninterpretedSort('quic_packet_coal_0rtt.idx',)))",
                "lineno": {}
            },
            {
                "args": "(forged_pkts.impl.native99, <ivy.ivy_ast.NativeCode object at 0x7fd8f2966e90>)",
                "lineno": {}
            },
            {
                "args": "(forged_pkts.impl.native101, <ivy.ivy_ast.NativeCode object at 0x7fd8f26f8990>, forged_pkts, forged_pkts, forged_pkts, forged_pkts, stream_data, forged_pkts, forged_pkts, forged_pkts, forged_pkts, forged_pkts, forged_pkts, forged_pkts, forged_pkts, forged_pkts, Const('forged_pkts.end', FunctionSort(UninterpretedSort('forged_pkts',), UninterpretedSort('index',))), Const('forged_pkts.value', FunctionSort(UninterpretedSort('forged_pkts',), UninterpretedSort('index',), UninterpretedSort('stream_data',))), Var('X', UninterpretedSort('index',)), forged_pkts, forged_pkts, index, Const('forged_pkts.end', FunctionSort(UninterpretedSort('forged_pkts',), UninterpretedSort('index',))), Const('forged_pkts.value', FunctionSort(UninterpretedSort('forged_pkts',), UninterpretedSort('index',), UninterpretedSort('stream_data',))), Var('X', UninterpretedSort('index',)), forged_pkts, Var('X', UninterpretedSort('index',)), Const('forged_pkts.end', FunctionSort(UninterpretedSort('forged_pkts',), UninterpretedSort('index',))), stream_data, Const('forged_pkts.value', FunctionSort(UninterpretedSort('forged_pkts',), UninterpretedSort('index',), UninterpretedSort('stream_data',))), Var('X', UninterpretedSort('index',)))",
                "lineno": {}
            },
            {
                "args": "(forged_protected_quic_packet.arr.impl.native99, <ivy.ivy_ast.NativeCode object at 0x7fd8f23ed890>)",
                "lineno": {}
            },
            {
                "args": "(forged_protected_quic_packet.arr.impl.native101, <ivy.ivy_ast.NativeCode object at 0x7fd8f23e3bd0>, forged_protected_quic_packet.arr, forged_protected_quic_packet.arr, forged_protected_quic_packet.arr, forged_protected_quic_packet.arr, forged_protected_quic_packet, forged_protected_quic_packet.arr, forged_protected_quic_packet.arr, forged_protected_quic_packet.arr, forged_protected_quic_packet.arr, forged_protected_quic_packet.arr, forged_protected_quic_packet.arr, forged_protected_quic_packet.arr, forged_protected_quic_packet.arr, forged_protected_quic_packet.arr, Const('forged_protected_quic_packet.arr.end', FunctionSort(UninterpretedSort('forged_protected_quic_packet.arr',), UninterpretedSort('forged_protected_quic_packet.idx',))), Const('forged_protected_quic_packet.arr.value', FunctionSort(UninterpretedSort('forged_protected_quic_packet.arr',), UninterpretedSort('forged_protected_quic_packet.idx',), UninterpretedSort('forged_protected_quic_packet',))), Var('X', UninterpretedSort('forged_protected_quic_packet.idx',)), forged_protected_quic_packet.arr, forged_protected_quic_packet.arr, forged_protected_quic_packet.idx, Const('forged_protected_quic_packet.arr.end', FunctionSort(UninterpretedSort('forged_protected_quic_packet.arr',), UninterpretedSort('forged_protected_quic_packet.idx',))), Const('forged_protected_quic_packet.arr.value', FunctionSort(UninterpretedSort('forged_protected_quic_packet.arr',), UninterpretedSort('forged_protected_quic_packet.idx',), UninterpretedSort('forged_protected_quic_packet',))), Var('X', UninterpretedSort('forged_protected_quic_packet.idx',)), forged_protected_quic_packet.arr, Var('X', UninterpretedSort('forged_protected_quic_packet.idx',)), Const('forged_protected_quic_packet.arr.end', FunctionSort(UninterpretedSort('forged_protected_quic_packet.arr',), UninterpretedSort('forged_protected_quic_packet.idx',))), forged_protected_quic_packet, Const('forged_protected_quic_packet.arr.value', FunctionSort(UninterpretedSort('forged_protected_quic_packet.arr',), UninterpretedSort('forged_protected_quic_packet.idx',), UninterpretedSort('forged_protected_quic_packet',))), Var('X', UninterpretedSort('forged_protected_quic_packet.idx',)))",
                "lineno": {}
            },
            {
                "args": "(forged_protected_quic_packet.retired_cids.impl.native99, <ivy.ivy_ast.NativeCode object at 0x7fd8f2909290>)",
                "lineno": {}
            },
            {
                "args": "(forged_protected_quic_packet.retired_cids.impl.native101, <ivy.ivy_ast.NativeCode object at 0x7fd8f29ea910>, forged_protected_quic_packet.retired_cids, forged_protected_quic_packet.retired_cids, forged_protected_quic_packet.retired_cids, forged_protected_quic_packet.retired_cids, cid_seq, forged_protected_quic_packet.retired_cids, forged_protected_quic_packet.retired_cids, forged_protected_quic_packet.retired_cids, forged_protected_quic_packet.retired_cids, forged_protected_quic_packet.retired_cids, forged_protected_quic_packet.retired_cids, forged_protected_quic_packet.retired_cids, forged_protected_quic_packet.retired_cids, forged_protected_quic_packet.retired_cids, Const('forged_protected_quic_packet.retired_cids.end', FunctionSort(UninterpretedSort('forged_protected_quic_packet.retired_cids',), UninterpretedSort('forged_protected_quic_packet.idx',))), Const('forged_protected_quic_packet.retired_cids.value', FunctionSort(UninterpretedSort('forged_protected_quic_packet.retired_cids',), UninterpretedSort('forged_protected_quic_packet.idx',), UninterpretedSort('cid_seq',))), Var('X', UninterpretedSort('forged_protected_quic_packet.idx',)), forged_protected_quic_packet.retired_cids, forged_protected_quic_packet.retired_cids, forged_protected_quic_packet.idx, Const('forged_protected_quic_packet.retired_cids.end', FunctionSort(UninterpretedSort('forged_protected_quic_packet.retired_cids',), UninterpretedSort('forged_protected_quic_packet.idx',))), Const('forged_protected_quic_packet.retired_cids.value', FunctionSort(UninterpretedSort('forged_protected_quic_packet.retired_cids',), UninterpretedSort('forged_protected_quic_packet.idx',), UninterpretedSort('cid_seq',))), Var('X', UninterpretedSort('forged_protected_quic_packet.idx',)), forged_protected_quic_packet.retired_cids, Var('X', UninterpretedSort('forged_protected_quic_packet.idx',)), Const('forged_protected_quic_packet.retired_cids.end', FunctionSort(UninterpretedSort('forged_protected_quic_packet.retired_cids',), UninterpretedSort('forged_protected_quic_packet.idx',))), cid_seq, Const('forged_protected_quic_packet.retired_cids.value', FunctionSort(UninterpretedSort('forged_protected_quic_packet.retired_cids',), UninterpretedSort('forged_protected_quic_packet.idx',), UninterpretedSort('cid_seq',))), Var('X', UninterpretedSort('forged_protected_quic_packet.idx',)))",
                "lineno": {}
            },
            {
                "args": "(forged_quic_packet.arr.impl.native99, <ivy.ivy_ast.NativeCode object at 0x7fd8f22bec90>)",
                "lineno": {}
            },
            {
                "args": "(forged_quic_packet.arr.impl.native101, <ivy.ivy_ast.NativeCode object at 0x7fd8f2331610>, forged_quic_packet.arr, forged_quic_packet.arr, forged_quic_packet.arr, forged_quic_packet.arr, forged_quic_packet, forged_quic_packet.arr, forged_quic_packet.arr, forged_quic_packet.arr, forged_quic_packet.arr, forged_quic_packet.arr, forged_quic_packet.arr, forged_quic_packet.arr, forged_quic_packet.arr, forged_quic_packet.arr, Const('forged_quic_packet.arr.end', FunctionSort(UninterpretedSort('forged_quic_packet.arr',), UninterpretedSort('forged_quic_packet.idx',))), Const('forged_quic_packet.arr.value', FunctionSort(UninterpretedSort('forged_quic_packet.arr',), UninterpretedSort('forged_quic_packet.idx',), UninterpretedSort('forged_quic_packet',))), Var('X', UninterpretedSort('forged_quic_packet.idx',)), forged_quic_packet.arr, forged_quic_packet.arr, forged_quic_packet.idx, Const('forged_quic_packet.arr.end', FunctionSort(UninterpretedSort('forged_quic_packet.arr',), UninterpretedSort('forged_quic_packet.idx',))), Const('forged_quic_packet.arr.value', FunctionSort(UninterpretedSort('forged_quic_packet.arr',), UninterpretedSort('forged_quic_packet.idx',), UninterpretedSort('forged_quic_packet',))), Var('X', UninterpretedSort('forged_quic_packet.idx',)), forged_quic_packet.arr, Var('X', UninterpretedSort('forged_quic_packet.idx',)), Const('forged_quic_packet.arr.end', FunctionSort(UninterpretedSort('forged_quic_packet.arr',), UninterpretedSort('forged_quic_packet.idx',))), forged_quic_packet, Const('forged_quic_packet.arr.value', FunctionSort(UninterpretedSort('forged_quic_packet.arr',), UninterpretedSort('forged_quic_packet.idx',), UninterpretedSort('forged_quic_packet',))), Var('X', UninterpretedSort('forged_quic_packet.idx',)))",
                "lineno": {}
            },
            {
                "args": "(forged_quic_packet.retired_cids.impl.native99, <ivy.ivy_ast.NativeCode object at 0x7fd8f228f2d0>)",
                "lineno": {}
            },
            {
                "args": "(forged_quic_packet.retired_cids.impl.native101, <ivy.ivy_ast.NativeCode object at 0x7fd8f228fe90>, forged_quic_packet.retired_cids, forged_quic_packet.retired_cids, forged_quic_packet.retired_cids, forged_quic_packet.retired_cids, cid_seq, forged_quic_packet.retired_cids, forged_quic_packet.retired_cids, forged_quic_packet.retired_cids, forged_quic_packet.retired_cids, forged_quic_packet.retired_cids, forged_quic_packet.retired_cids, forged_quic_packet.retired_cids, forged_quic_packet.retired_cids, forged_quic_packet.retired_cids, Const('forged_quic_packet.retired_cids.end', FunctionSort(UninterpretedSort('forged_quic_packet.retired_cids',), UninterpretedSort('forged_quic_packet.idx',))), Const('forged_quic_packet.retired_cids.value', FunctionSort(UninterpretedSort('forged_quic_packet.retired_cids',), UninterpretedSort('forged_quic_packet.idx',), UninterpretedSort('cid_seq',))), Var('X', UninterpretedSort('forged_quic_packet.idx',)), forged_quic_packet.retired_cids, forged_quic_packet.retired_cids, forged_quic_packet.idx, Const('forged_quic_packet.retired_cids.end', FunctionSort(UninterpretedSort('forged_quic_packet.retired_cids',), UninterpretedSort('forged_quic_packet.idx',))), Const('forged_quic_packet.retired_cids.value', FunctionSort(UninterpretedSort('forged_quic_packet.retired_cids',), UninterpretedSort('forged_quic_packet.idx',), UninterpretedSort('cid_seq',))), Var('X', UninterpretedSort('forged_quic_packet.idx',)), forged_quic_packet.retired_cids, Var('X', UninterpretedSort('forged_quic_packet.idx',)), Const('forged_quic_packet.retired_cids.end', FunctionSort(UninterpretedSort('forged_quic_packet.retired_cids',), UninterpretedSort('forged_quic_packet.idx',))), cid_seq, Const('forged_quic_packet.retired_cids.value', FunctionSort(UninterpretedSort('forged_quic_packet.retired_cids',), UninterpretedSort('forged_quic_packet.idx',), UninterpretedSort('cid_seq',))), Var('X', UninterpretedSort('forged_quic_packet.idx',)))",
                "lineno": {}
            },
            {
                "args": "(forged_quic_packet_retry.arr.impl.native99, <ivy.ivy_ast.NativeCode object at 0x7fd8f2189e10>)",
                "lineno": {}
            },
            {
                "args": "(forged_quic_packet_retry.arr.impl.native101, <ivy.ivy_ast.NativeCode object at 0x7fd8f2189b10>, forged_quic_packet_retry.arr, forged_quic_packet_retry.arr, forged_quic_packet_retry.arr, forged_quic_packet_retry.arr, forged_quic_packet_retry, forged_quic_packet_retry.arr, forged_quic_packet_retry.arr, forged_quic_packet_retry.arr, forged_quic_packet_retry.arr, forged_quic_packet_retry.arr, forged_quic_packet_retry.arr, forged_quic_packet_retry.arr, forged_quic_packet_retry.arr, forged_quic_packet_retry.arr, Const('forged_quic_packet_retry.arr.end', FunctionSort(UninterpretedSort('forged_quic_packet_retry.arr',), UninterpretedSort('forged_quic_packet_retry.idx',))), Const('forged_quic_packet_retry.arr.value', FunctionSort(UninterpretedSort('forged_quic_packet_retry.arr',), UninterpretedSort('forged_quic_packet_retry.idx',), UninterpretedSort('forged_quic_packet_retry',))), Var('X', UninterpretedSort('forged_quic_packet_retry.idx',)), forged_quic_packet_retry.arr, forged_quic_packet_retry.arr, forged_quic_packet_retry.idx, Const('forged_quic_packet_retry.arr.end', FunctionSort(UninterpretedSort('forged_quic_packet_retry.arr',), UninterpretedSort('forged_quic_packet_retry.idx',))), Const('forged_quic_packet_retry.arr.value', FunctionSort(UninterpretedSort('forged_quic_packet_retry.arr',), UninterpretedSort('forged_quic_packet_retry.idx',), UninterpretedSort('forged_quic_packet_retry',))), Var('X', UninterpretedSort('forged_quic_packet_retry.idx',)), forged_quic_packet_retry.arr, Var('X', UninterpretedSort('forged_quic_packet_retry.idx',)), Const('forged_quic_packet_retry.arr.end', FunctionSort(UninterpretedSort('forged_quic_packet_retry.arr',), UninterpretedSort('forged_quic_packet_retry.idx',))), forged_quic_packet_retry, Const('forged_quic_packet_retry.arr.value', FunctionSort(UninterpretedSort('forged_quic_packet_retry.arr',), UninterpretedSort('forged_quic_packet_retry.idx',), UninterpretedSort('forged_quic_packet_retry',))), Var('X', UninterpretedSort('forged_quic_packet_retry.idx',)))",
                "lineno": {}
            },
            {
                "args": "(forged_quic_packet_retry.retired_cids.impl.native99, <ivy.ivy_ast.NativeCode object at 0x7fd8f2151810>)",
                "lineno": {}
            },
            {
                "args": "(forged_quic_packet_retry.retired_cids.impl.native101, <ivy.ivy_ast.NativeCode object at 0x7fd8f215b250>, forged_quic_packet_retry.retired_cids, forged_quic_packet_retry.retired_cids, forged_quic_packet_retry.retired_cids, forged_quic_packet_retry.retired_cids, cid_seq, forged_quic_packet_retry.retired_cids, forged_quic_packet_retry.retired_cids, forged_quic_packet_retry.retired_cids, forged_quic_packet_retry.retired_cids, forged_quic_packet_retry.retired_cids, forged_quic_packet_retry.retired_cids, forged_quic_packet_retry.retired_cids, forged_quic_packet_retry.retired_cids, forged_quic_packet_retry.retired_cids, Const('forged_quic_packet_retry.retired_cids.end', FunctionSort(UninterpretedSort('forged_quic_packet_retry.retired_cids',), UninterpretedSort('forged_quic_packet_retry.idx',))), Const('forged_quic_packet_retry.retired_cids.value', FunctionSort(UninterpretedSort('forged_quic_packet_retry.retired_cids',), UninterpretedSort('forged_quic_packet_retry.idx',), UninterpretedSort('cid_seq',))), Var('X', UninterpretedSort('forged_quic_packet_retry.idx',)), forged_quic_packet_retry.retired_cids, forged_quic_packet_retry.retired_cids, forged_quic_packet_retry.idx, Const('forged_quic_packet_retry.retired_cids.end', FunctionSort(UninterpretedSort('forged_quic_packet_retry.retired_cids',), UninterpretedSort('forged_quic_packet_retry.idx',))), Const('forged_quic_packet_retry.retired_cids.value', FunctionSort(UninterpretedSort('forged_quic_packet_retry.retired_cids',), UninterpretedSort('forged_quic_packet_retry.idx',), UninterpretedSort('cid_seq',))), Var('X', UninterpretedSort('forged_quic_packet_retry.idx',)), forged_quic_packet_retry.retired_cids, Var('X', UninterpretedSort('forged_quic_packet_retry.idx',)), Const('forged_quic_packet_retry.retired_cids.end', FunctionSort(UninterpretedSort('forged_quic_packet_retry.retired_cids',), UninterpretedSort('forged_quic_packet_retry.idx',))), cid_seq, Const('forged_quic_packet_retry.retired_cids.value', FunctionSort(UninterpretedSort('forged_quic_packet_retry.retired_cids',), UninterpretedSort('forged_quic_packet_retry.idx',), UninterpretedSort('cid_seq',))), Var('X', UninterpretedSort('forged_quic_packet_retry.idx',)))",
                "lineno": {}
            },
            {
                "args": "(forged_quic_packet_vn.arr.impl.native99, <ivy.ivy_ast.NativeCode object at 0x7fd8f2108750>)",
                "lineno": {}
            },
            {
                "args": "(forged_quic_packet_vn.arr.impl.native101, <ivy.ivy_ast.NativeCode object at 0x7fd8f2121b90>, forged_quic_packet_vn.arr, forged_quic_packet_vn.arr, forged_quic_packet_vn.arr, forged_quic_packet_vn.arr, forged_quic_packet_vn, forged_quic_packet_vn.arr, forged_quic_packet_vn.arr, forged_quic_packet_vn.arr, forged_quic_packet_vn.arr, forged_quic_packet_vn.arr, forged_quic_packet_vn.arr, forged_quic_packet_vn.arr, forged_quic_packet_vn.arr, forged_quic_packet_vn.arr, Const('forged_quic_packet_vn.arr.end', FunctionSort(UninterpretedSort('forged_quic_packet_vn.arr',), UninterpretedSort('forged_quic_packet_vn.idx',))), Const('forged_quic_packet_vn.arr.value', FunctionSort(UninterpretedSort('forged_quic_packet_vn.arr',), UninterpretedSort('forged_quic_packet_vn.idx',), UninterpretedSort('forged_quic_packet_vn',))), Var('X', UninterpretedSort('forged_quic_packet_vn.idx',)), forged_quic_packet_vn.arr, forged_quic_packet_vn.arr, forged_quic_packet_vn.idx, Const('forged_quic_packet_vn.arr.end', FunctionSort(UninterpretedSort('forged_quic_packet_vn.arr',), UninterpretedSort('forged_quic_packet_vn.idx',))), Const('forged_quic_packet_vn.arr.value', FunctionSort(UninterpretedSort('forged_quic_packet_vn.arr',), UninterpretedSort('forged_quic_packet_vn.idx',), UninterpretedSort('forged_quic_packet_vn',))), Var('X', UninterpretedSort('forged_quic_packet_vn.idx',)), forged_quic_packet_vn.arr, Var('X', UninterpretedSort('forged_quic_packet_vn.idx',)), Const('forged_quic_packet_vn.arr.end', FunctionSort(UninterpretedSort('forged_quic_packet_vn.arr',), UninterpretedSort('forged_quic_packet_vn.idx',))), forged_quic_packet_vn, Const('forged_quic_packet_vn.arr.value', FunctionSort(UninterpretedSort('forged_quic_packet_vn.arr',), UninterpretedSort('forged_quic_packet_vn.idx',), UninterpretedSort('forged_quic_packet_vn',))), Var('X', UninterpretedSort('forged_quic_packet_vn.idx',)))",
                "lineno": {}
            },
            {
                "args": "(replayed_quic_packet_0rtt.arr.impl.native99, <ivy.ivy_ast.NativeCode object at 0x7fd8f2011dd0>)",
                "lineno": {}
            },
            {
                "args": "(replayed_quic_packet_0rtt.arr.impl.native101, <ivy.ivy_ast.NativeCode object at 0x7fd8f20765d0>, replayed_quic_packet_0rtt.arr, replayed_quic_packet_0rtt.arr, replayed_quic_packet_0rtt.arr, replayed_quic_packet_0rtt.arr, replayed_quic_packet_0rtt, replayed_quic_packet_0rtt.arr, replayed_quic_packet_0rtt.arr, replayed_quic_packet_0rtt.arr, replayed_quic_packet_0rtt.arr, replayed_quic_packet_0rtt.arr, replayed_quic_packet_0rtt.arr, replayed_quic_packet_0rtt.arr, replayed_quic_packet_0rtt.arr, replayed_quic_packet_0rtt.arr, Const('replayed_quic_packet_0rtt.arr.end', FunctionSort(UninterpretedSort('replayed_quic_packet_0rtt.arr',), UninterpretedSort('replayed_quic_packet_0rtt.idx',))), Const('replayed_quic_packet_0rtt.arr.value', FunctionSort(UninterpretedSort('replayed_quic_packet_0rtt.arr',), UninterpretedSort('replayed_quic_packet_0rtt.idx',), UninterpretedSort('replayed_quic_packet_0rtt',))), Var('X', UninterpretedSort('replayed_quic_packet_0rtt.idx',)), replayed_quic_packet_0rtt.arr, replayed_quic_packet_0rtt.arr, replayed_quic_packet_0rtt.idx, Const('replayed_quic_packet_0rtt.arr.end', FunctionSort(UninterpretedSort('replayed_quic_packet_0rtt.arr',), UninterpretedSort('replayed_quic_packet_0rtt.idx',))), Const('replayed_quic_packet_0rtt.arr.value', FunctionSort(UninterpretedSort('replayed_quic_packet_0rtt.arr',), UninterpretedSort('replayed_quic_packet_0rtt.idx',), UninterpretedSort('replayed_quic_packet_0rtt',))), Var('X', UninterpretedSort('replayed_quic_packet_0rtt.idx',)), replayed_quic_packet_0rtt.arr, Var('X', UninterpretedSort('replayed_quic_packet_0rtt.idx',)), Const('replayed_quic_packet_0rtt.arr.end', FunctionSort(UninterpretedSort('replayed_quic_packet_0rtt.arr',), UninterpretedSort('replayed_quic_packet_0rtt.idx',))), replayed_quic_packet_0rtt, Const('replayed_quic_packet_0rtt.arr.value', FunctionSort(UninterpretedSort('replayed_quic_packet_0rtt.arr',), UninterpretedSort('replayed_quic_packet_0rtt.idx',), UninterpretedSort('replayed_quic_packet_0rtt',))), Var('X', UninterpretedSort('replayed_quic_packet_0rtt.idx',)))",
                "lineno": {}
            },
            {
                "args": "(replayed_quic_packet_0rtt.retired_cids.impl.native99, <ivy.ivy_ast.NativeCode object at 0x7fd8f1fe1210>)",
                "lineno": {}
            },
            {
                "args": "(replayed_quic_packet_0rtt.retired_cids.impl.native101, <ivy.ivy_ast.NativeCode object at 0x7fd8f1fe1ed0>, replayed_quic_packet_0rtt.retired_cids, replayed_quic_packet_0rtt.retired_cids, replayed_quic_packet_0rtt.retired_cids, replayed_quic_packet_0rtt.retired_cids, cid_seq, replayed_quic_packet_0rtt.retired_cids, replayed_quic_packet_0rtt.retired_cids, replayed_quic_packet_0rtt.retired_cids, replayed_quic_packet_0rtt.retired_cids, replayed_quic_packet_0rtt.retired_cids, replayed_quic_packet_0rtt.retired_cids, replayed_quic_packet_0rtt.retired_cids, replayed_quic_packet_0rtt.retired_cids, replayed_quic_packet_0rtt.retired_cids, Const('replayed_quic_packet_0rtt.retired_cids.end', FunctionSort(UninterpretedSort('replayed_quic_packet_0rtt.retired_cids',), UninterpretedSort('replayed_quic_packet_0rtt.idx',))), Const('replayed_quic_packet_0rtt.retired_cids.value', FunctionSort(UninterpretedSort('replayed_quic_packet_0rtt.retired_cids',), UninterpretedSort('replayed_quic_packet_0rtt.idx',), UninterpretedSort('cid_seq',))), Var('X', UninterpretedSort('replayed_quic_packet_0rtt.idx',)), replayed_quic_packet_0rtt.retired_cids, replayed_quic_packet_0rtt.retired_cids, replayed_quic_packet_0rtt.idx, Const('replayed_quic_packet_0rtt.retired_cids.end', FunctionSort(UninterpretedSort('replayed_quic_packet_0rtt.retired_cids',), UninterpretedSort('replayed_quic_packet_0rtt.idx',))), Const('replayed_quic_packet_0rtt.retired_cids.value', FunctionSort(UninterpretedSort('replayed_quic_packet_0rtt.retired_cids',), UninterpretedSort('replayed_quic_packet_0rtt.idx',), UninterpretedSort('cid_seq',))), Var('X', UninterpretedSort('replayed_quic_packet_0rtt.idx',)), replayed_quic_packet_0rtt.retired_cids, Var('X', UninterpretedSort('replayed_quic_packet_0rtt.idx',)), Const('replayed_quic_packet_0rtt.retired_cids.end', FunctionSort(UninterpretedSort('replayed_quic_packet_0rtt.retired_cids',), UninterpretedSort('replayed_quic_packet_0rtt.idx',))), cid_seq, Const('replayed_quic_packet_0rtt.retired_cids.value', FunctionSort(UninterpretedSort('replayed_quic_packet_0rtt.retired_cids',), UninterpretedSort('replayed_quic_packet_0rtt.idx',), UninterpretedSort('cid_seq',))), Var('X', UninterpretedSort('replayed_quic_packet_0rtt.idx',)))",
                "lineno": {}
            },
            {
                "args": "(native400, <ivy.ivy_ast.NativeCode object at 0x7fd8f25d9b90>)",
                "lineno": {}
            },
            {
                "args": "(native401, <ivy.ivy_ast.NativeCode object at 0x7fd8f2134c50>, std_serializer, std_deserializer, std_serializer, std_deserializer)",
                "lineno": {}
            },
            {
                "args": "(native402, <ivy.ivy_ast.NativeCode object at 0x7fd8f217acd0>, quic_deser)",
                "lineno": {}
            },
            {
                "args": "(native403, <ivy.ivy_ast.NativeCode object at 0x7fd8f2474c90>, quic_deser, quic_deser)",
                "lineno": {}
            },
            {
                "args": "(native404, <ivy.ivy_ast.NativeCode object at 0x7fd8f217af10>)",
                "lineno": {}
            },
            {
                "args": "(native405, <ivy.ivy_ast.NativeCode object at 0x7fd8f20d7b50>, quic_ser)",
                "lineno": {}
            },
            {
                "args": "(native406, <ivy.ivy_ast.NativeCode object at 0x7fd8f20d7350>, quic_ser, quic_ser)",
                "lineno": {}
            },
            {
                "args": "(native407, <ivy.ivy_ast.NativeCode object at 0x7fd8f20d7e50>)",
                "lineno": {}
            },
            {
                "args": "(native408, <ivy.ivy_ast.NativeCode object at 0x7fd8f20d7ed0>, quic_deser_vn)",
                "lineno": {}
            },
            {
                "args": "(native409, <ivy.ivy_ast.NativeCode object at 0x7fd8f20d79d0>, quic_deser_vn, quic_deser_vn)",
                "lineno": {}
            },
            {
                "args": "(native410, <ivy.ivy_ast.NativeCode object at 0x7fd8f20d7cd0>)",
                "lineno": {}
            },
            {
                "args": "(native411, <ivy.ivy_ast.NativeCode object at 0x7fd8f20d7c10>, quic_ser_vn)",
                "lineno": {}
            },
            {
                "args": "(native412, <ivy.ivy_ast.NativeCode object at 0x7fd8f20d76d0>, quic_ser_vn, quic_ser_vn)",
                "lineno": {}
            },
            {
                "args": "(native413, <ivy.ivy_ast.NativeCode object at 0x7fd8f2822bd0>)",
                "lineno": {}
            },
            {
                "args": "(native414, <ivy.ivy_ast.NativeCode object at 0x7fd8f2098a90>, quic_deser_retry)",
                "lineno": {}
            },
            {
                "args": "(native415, <ivy.ivy_ast.NativeCode object at 0x7fd8f2098150>, quic_deser_retry, quic_deser_retry)",
                "lineno": {}
            },
            {
                "args": "(native416, <ivy.ivy_ast.NativeCode object at 0x7fd8f2098590>)",
                "lineno": {}
            },
            {
                "args": "(native417, <ivy.ivy_ast.NativeCode object at 0x7fd8f249de90>, quic_ser_retry)",
                "lineno": {}
            },
            {
                "args": "(native418, <ivy.ivy_ast.NativeCode object at 0x7fd8f2635cd0>, quic_ser_retry, quic_ser_retry)",
                "lineno": {}
            },
            {
                "args": "(native419, <ivy.ivy_ast.NativeCode object at 0x7fd8f249d150>)",
                "lineno": {}
            },
            {
                "args": "(native420, <ivy.ivy_ast.NativeCode object at 0x7fd8f2486e90>, quic_deser_zerortt)",
                "lineno": {}
            },
            {
                "args": "(native421, <ivy.ivy_ast.NativeCode object at 0x7fd8f2121450>, quic_deser_zerortt, quic_deser_zerortt)",
                "lineno": {}
            },
            {
                "args": "(native422, <ivy.ivy_ast.NativeCode object at 0x7fd8f20fde90>, quic_ser_zerortt)",
                "lineno": {}
            },
            {
                "args": "(native423, <ivy.ivy_ast.NativeCode object at 0x7fd8f215bf90>, quic_ser_zerortt, quic_ser_zerortt)",
                "lineno": {}
            },
            {
                "args": "(native424, <ivy.ivy_ast.NativeCode object at 0x7fd8f20fd890>)",
                "lineno": {}
            },
            {
                "args": "(native425, <ivy.ivy_ast.NativeCode object at 0x7fd8f2089690>, quic_deser_forged)",
                "lineno": {}
            },
            {
                "args": "(native426, <ivy.ivy_ast.NativeCode object at 0x7fd8f2089750>, quic_deser_forged, quic_deser_forged)",
                "lineno": {}
            },
            {
                "args": "(native427, <ivy.ivy_ast.NativeCode object at 0x7fd8f2089ed0>, quic_ser_forged)",
                "lineno": {}
            },
            {
                "args": "(native428, <ivy.ivy_ast.NativeCode object at 0x7fd8f20890d0>, quic_ser_forged, quic_ser_forged)",
                "lineno": {}
            },
            {
                "args": "(native429, <ivy.ivy_ast.NativeCode object at 0x7fd8f2089150>)",
                "lineno": {}
            },
            {
                "args": "(native434, <ivy.ivy_ast.NativeCode object at 0x7fd8f1e3bb50>, quic_prot_ser)",
                "lineno": {}
            },
            {
                "args": "(native435, <ivy.ivy_ast.NativeCode object at 0x7fd8f1e78ad0>, quic_prot_ser)",
                "lineno": {}
            },
            {
                "args": "(native436, <ivy.ivy_ast.NativeCode object at 0x7fd8f1e859d0>, quic_prot_deser)",
                "lineno": {}
            },
            {
                "args": "(native437, <ivy.ivy_ast.NativeCode object at 0x7fd8f1e85250>, quic_prot_deser)",
                "lineno": {}
            },
            {
                "args": "(prot.arr.impl.native99, <ivy.ivy_ast.NativeCode object at 0x7fd8f1df1cd0>)",
                "lineno": {}
            },
            {
                "args": "(prot.arr.impl.native101, <ivy.ivy_ast.NativeCode object at 0x7fd8f1d8b490>, prot.arr, prot.arr, prot.arr, prot.arr, stream_data, prot.arr, prot.arr, prot.arr, prot.arr, prot.arr, prot.arr, prot.arr, prot.arr, prot.arr, Const('prot.arr.end', FunctionSort(UninterpretedSort('prot.arr',), UninterpretedSort('prot.idx',))), Const('prot.arr.value', FunctionSort(UninterpretedSort('prot.arr',), UninterpretedSort('prot.idx',), UninterpretedSort('stream_data',))), Var('X', UninterpretedSort('prot.idx',)), prot.arr, prot.arr, prot.idx, Const('prot.arr.end', FunctionSort(UninterpretedSort('prot.arr',), UninterpretedSort('prot.idx',))), Const('prot.arr.value', FunctionSort(UninterpretedSort('prot.arr',), UninterpretedSort('prot.idx',), UninterpretedSort('stream_data',))), Var('X', UninterpretedSort('prot.idx',)), prot.arr, Var('X', UninterpretedSort('prot.idx',)), Const('prot.arr.end', FunctionSort(UninterpretedSort('prot.arr',), UninterpretedSort('prot.idx',))), stream_data, Const('prot.arr.value', FunctionSort(UninterpretedSort('prot.arr',), UninterpretedSort('prot.idx',), UninterpretedSort('stream_data',))), Var('X', UninterpretedSort('prot.idx',)))",
                "lineno": {}
            },
            {
                "args": "(tls_api.upper.foo.native356, <ivy.ivy_ast.NativeCode object at 0x7fd8f1bdd790>)",
                "lineno": {}
            },
            {
                "args": "(tls_api.upper.foo.native357, <ivy.ivy_ast.NativeCode object at 0x7fd8f1bdd990>, tls_api.lower.send, tls_api.upper.recv, tls_api.upper.alert, tls_api.upper.keys_established, tls_api.lower.send, tls_api.upper.recv, tls_api.upper.alert, tls_api.upper.keys_established, tls_api.id, tls_api.id, stream_data, stream_data, stream_data, stream_data, stream_data, stream_data, stream_data)",
                "lineno": {}
            },
            {
                "args": "(tls_api.upper.foo.native358, <ivy.ivy_ast.NativeCode object at 0x7fd8f1bd4a90>, tls_api.id, tls_api.upper.foo.cid_map, tls_api.upper.foo.cb)",
                "lineno": {}
            },
            {
                "args": "(tls_api.upper.foo.native359, <ivy.ivy_ast.NativeCode object at 0x7fd8f1bc6750>, tls_api.upper.foo.cb, tls_api.lower.send, tls_api.upper.recv, tls_api.upper.alert, tls_api.upper.keys_established)",
                "lineno": {}
            },
            {
                "args": "(net.native448, <ivy.ivy_ast.NativeCode object at 0x7fd8f1eb6690>)",
                "lineno": {}
            },
            {
                "args": "(net.native449, <ivy.ivy_ast.NativeCode object at 0x7fd8f1b87750>, net.impl.handle_recv, net.impl.handle_recv, endpoint_id, endpoint_id, endpoint_id, prot.arr, quic_prot_deser, ip.endpoint, Const('ip.udp', EnumeratedSort('ip.protocol', ('ip.udp', 'ip.tcp'))), Const('ip.ivy', EnumeratedSort('ip.interface', ('ip.lo', 'ip.ivy'))), Const('ip.lo', EnumeratedSort('ip.interface', ('ip.lo', 'ip.ivy'))))",
                "lineno": {}
            },
            {
                "args": "(net.impl.native450(V0:endpoint_id), <ivy.ivy_ast.NativeCode object at 0x7fd8f1b8e7d0>, net.impl.cb(V0:endpoint_id))",
                "lineno": {}
            },
            {
                "args": "(net.impl.native451(V0:endpoint_id), <ivy.ivy_ast.NativeCode object at 0x7fd8f1b8ec90>, net.impl.cb(V0:endpoint_id), net.impl.handle_recv(V0:endpoint_id))",
                "lineno": {}
            },
            {
                "args": "(cids.impl.native99, <ivy.ivy_ast.NativeCode object at 0x7fd8f1a84850>)",
                "lineno": {}
            },
            {
                "args": "(cids.impl.native101, <ivy.ivy_ast.NativeCode object at 0x7fd8f1b87e10>, cids, cids, cids, cids, cid, cids, cids, cids, cids, cids, cids, cids, cids, cids, Const('cids.end', FunctionSort(UninterpretedSort('cids',), UninterpretedSort('index',))), Const('cids.value', FunctionSort(UninterpretedSort('cids',), UninterpretedSort('index',), UninterpretedSort('cid',))), Var('X', UninterpretedSort('index',)), cids, cids, index, Const('cids.end', FunctionSort(UninterpretedSort('cids',), UninterpretedSort('index',))), Const('cids.value', FunctionSort(UninterpretedSort('cids',), UninterpretedSort('index',), UninterpretedSort('cid',))), Var('X', UninterpretedSort('index',)), cids, Var('X', UninterpretedSort('index',)), Const('cids.end', FunctionSort(UninterpretedSort('cids',), UninterpretedSort('index',))), cid, Const('cids.value', FunctionSort(UninterpretedSort('cids',), UninterpretedSort('index',), UninterpretedSort('cid',))), Var('X', UninterpretedSort('index',)))",
                "lineno": {}
            },
            {
                "args": "(clients.client.arr.impl.native99, <ivy.ivy_ast.NativeCode object at 0x7fd8f171a390>)",
                "lineno": {}
            },
            {
                "args": "(clients.client.arr.impl.native101, <ivy.ivy_ast.NativeCode object at 0x7fd8f171ae50>, clients.client.arr, clients.client.arr, clients.client.arr, clients.client.arr, clients.client, clients.client.arr, clients.client.arr, clients.client.arr, clients.client.arr, clients.client.arr, clients.client.arr, clients.client.arr, clients.client.arr, clients.client.arr, Const('clients.client.arr.end', FunctionSort(UninterpretedSort('clients.client.arr',), UninterpretedSort('clients.client.idx',))), Const('clients.client.arr.value', FunctionSort(UninterpretedSort('clients.client.arr',), UninterpretedSort('clients.client.idx',), UninterpretedSort('clients.client',))), Var('X', UninterpretedSort('clients.client.idx',)), clients.client.arr, clients.client.arr, clients.client.idx, Const('clients.client.arr.end', FunctionSort(UninterpretedSort('clients.client.arr',), UninterpretedSort('clients.client.idx',))), Const('clients.client.arr.value', FunctionSort(UninterpretedSort('clients.client.arr',), UninterpretedSort('clients.client.idx',), UninterpretedSort('clients.client',))), Var('X', UninterpretedSort('clients.client.idx',)), clients.client.arr, Var('X', UninterpretedSort('clients.client.idx',)), Const('clients.client.arr.end', FunctionSort(UninterpretedSort('clients.client.arr',), UninterpretedSort('clients.client.idx',))), clients.client, Const('clients.client.arr.value', FunctionSort(UninterpretedSort('clients.client.arr',), UninterpretedSort('clients.client.idx',), UninterpretedSort('clients.client',))), Var('X', UninterpretedSort('clients.client.idx',)))",
                "lineno": {}
            },
            {
                "args": "(servers.server.arr.impl.native99, <ivy.ivy_ast.NativeCode object at 0x7fd8f167d610>)",
                "lineno": {}
            },
            {
                "args": "(servers.server.arr.impl.native101, <ivy.ivy_ast.NativeCode object at 0x7fd8f16ab7d0>, servers.server.arr, servers.server.arr, servers.server.arr, servers.server.arr, servers.server, servers.server.arr, servers.server.arr, servers.server.arr, servers.server.arr, servers.server.arr, servers.server.arr, servers.server.arr, servers.server.arr, servers.server.arr, Const('servers.server.arr.end', FunctionSort(UninterpretedSort('servers.server.arr',), UninterpretedSort('servers.server.idx',))), Const('servers.server.arr.value', FunctionSort(UninterpretedSort('servers.server.arr',), UninterpretedSort('servers.server.idx',), UninterpretedSort('servers.server',))), Var('X', UninterpretedSort('servers.server.idx',)), servers.server.arr, servers.server.arr, servers.server.idx, Const('servers.server.arr.end', FunctionSort(UninterpretedSort('servers.server.arr',), UninterpretedSort('servers.server.idx',))), Const('servers.server.arr.value', FunctionSort(UninterpretedSort('servers.server.arr',), UninterpretedSort('servers.server.idx',), UninterpretedSort('servers.server',))), Var('X', UninterpretedSort('servers.server.idx',)), servers.server.arr, Var('X', UninterpretedSort('servers.server.idx',)), Const('servers.server.arr.end', FunctionSort(UninterpretedSort('servers.server.arr',), UninterpretedSort('servers.server.idx',))), servers.server, Const('servers.server.arr.value', FunctionSort(UninterpretedSort('servers.server.arr',), UninterpretedSort('servers.server.idx',), UninterpretedSort('servers.server',))), Var('X', UninterpretedSort('servers.server.idx',)))",
                "lineno": {}
            },
            {
                "args": "(ip_endpoints.impl.native99, <ivy.ivy_ast.NativeCode object at 0x7fd8f1601090>)",
                "lineno": {}
            },
            {
                "args": "(ip_endpoints.impl.native101, <ivy.ivy_ast.NativeCode object at 0x7fd8f1610950>, ip_endpoints, ip_endpoints, ip_endpoints, ip_endpoints, ip.endpoint, ip_endpoints, ip_endpoints, ip_endpoints, ip_endpoints, ip_endpoints, ip_endpoints, ip_endpoints, ip_endpoints, ip_endpoints, Const('ip_endpoints.end', FunctionSort(UninterpretedSort('ip_endpoints',), UninterpretedSort('index',))), Const('ip_endpoints.value', FunctionSort(UninterpretedSort('ip_endpoints',), UninterpretedSort('index',), UninterpretedSort('ip.endpoint',))), Var('X', UninterpretedSort('index',)), ip_endpoints, ip_endpoints, index, Const('ip_endpoints.end', FunctionSort(UninterpretedSort('ip_endpoints',), UninterpretedSort('index',))), Const('ip_endpoints.value', FunctionSort(UninterpretedSort('ip_endpoints',), UninterpretedSort('index',), UninterpretedSort('ip.endpoint',))), Var('X', UninterpretedSort('index',)), ip_endpoints, Var('X', UninterpretedSort('index',)), Const('ip_endpoints.end', FunctionSort(UninterpretedSort('ip_endpoints',), UninterpretedSort('index',))), ip.endpoint, Const('ip_endpoints.value', FunctionSort(UninterpretedSort('ip_endpoints',), UninterpretedSort('index',), UninterpretedSort('ip.endpoint',))), Var('X', UninterpretedSort('index',)))",
                "lineno": {}
            },
            {
                "args": "(tls_extensions.impl.native99, <ivy.ivy_ast.NativeCode object at 0x7fd8f142dad0>)",
                "lineno": {}
            },
            {
                "args": "(tls_extensions.impl.native101, <ivy.ivy_ast.NativeCode object at 0x7fd8f14216d0>, tls_extensions, tls_extensions, tls_extensions, tls_extensions, tls.extension, tls_extensions, tls_extensions, tls_extensions, tls_extensions, tls_extensions, tls_extensions, tls_extensions, tls_extensions, tls_extensions, Const('tls_extensions.end', FunctionSort(UninterpretedSort('tls_extensions',), UninterpretedSort('tls_extensions.domain',))), Const('tls_extensions.value', FunctionSort(UninterpretedSort('tls_extensions',), UninterpretedSort('tls_extensions.domain',), UninterpretedSort('tls.extension',))), Var('X', UninterpretedSort('tls_extensions.domain',)), tls_extensions, tls_extensions, tls_extensions.domain, Const('tls_extensions.end', FunctionSort(UninterpretedSort('tls_extensions',), UninterpretedSort('tls_extensions.domain',))), Const('tls_extensions.value', FunctionSort(UninterpretedSort('tls_extensions',), UninterpretedSort('tls_extensions.domain',), UninterpretedSort('tls.extension',))), Var('X', UninterpretedSort('tls_extensions.domain',)), tls_extensions, Var('X', UninterpretedSort('tls_extensions.domain',)), Const('tls_extensions.end', FunctionSort(UninterpretedSort('tls_extensions',), UninterpretedSort('tls_extensions.domain',))), tls.extension, Const('tls_extensions.value', FunctionSort(UninterpretedSort('tls_extensions',), UninterpretedSort('tls_extensions.domain',), UninterpretedSort('tls.extension',))), Var('X', UninterpretedSort('tls_extensions.domain',)))",
                "lineno": {}
            },
            {
                "args": "(tls_hand_extensions.impl.native99, <ivy.ivy_ast.NativeCode object at 0x7fd8f138bfd0>)",
                "lineno": {}
            },
            {
                "args": "(tls_hand_extensions.impl.native101, <ivy.ivy_ast.NativeCode object at 0x7fd8f139af50>, tls_hand_extensions, tls_hand_extensions, tls_hand_extensions, tls_hand_extensions, tls.handshake, tls_hand_extensions, tls_hand_extensions, tls_hand_extensions, tls_hand_extensions, tls_hand_extensions, tls_hand_extensions, tls_hand_extensions, tls_hand_extensions, tls_hand_extensions, Const('tls_hand_extensions.end', FunctionSort(UninterpretedSort('tls_hand_extensions',), UninterpretedSort('tls_hand_extensions.domain',))), Const('tls_hand_extensions.value', FunctionSort(UninterpretedSort('tls_hand_extensions',), UninterpretedSort('tls_hand_extensions.domain',), UninterpretedSort('tls.handshake',))), Var('X', UninterpretedSort('tls_hand_extensions.domain',)), tls_hand_extensions, tls_hand_extensions, tls_hand_extensions.domain, Const('tls_hand_extensions.end', FunctionSort(UninterpretedSort('tls_hand_extensions',), UninterpretedSort('tls_hand_extensions.domain',))), Const('tls_hand_extensions.value', FunctionSort(UninterpretedSort('tls_hand_extensions',), UninterpretedSort('tls_hand_extensions.domain',), UninterpretedSort('tls.handshake',))), Var('X', UninterpretedSort('tls_hand_extensions.domain',)), tls_hand_extensions, Var('X', UninterpretedSort('tls_hand_extensions.domain',)), Const('tls_hand_extensions.end', FunctionSort(UninterpretedSort('tls_hand_extensions',), UninterpretedSort('tls_hand_extensions.domain',))), tls.handshake, Const('tls_hand_extensions.value', FunctionSort(UninterpretedSort('tls_hand_extensions',), UninterpretedSort('tls_hand_extensions.domain',), UninterpretedSort('tls.handshake',))), Var('X', UninterpretedSort('tls_hand_extensions.domain',)))",
                "lineno": {}
            },
            {
                "args": "(http_request_file.native68, <ivy.ivy_ast.NativeCode object at 0x7fd8f134ee90>, http_request_file.fildes)",
                "lineno": {}
            },
            {
                "args": "(http_request_file.native69, <ivy.ivy_ast.NativeCode object at 0x7fd8f134e490>, http_request_file, http_request_file.fildes, http_request_file.fildes)",
                "lineno": {}
            },
            {
                "args": "(http_request_file.native72, <ivy.ivy_ast.NativeCode object at 0x7fd8f13b8d90>)",
                "lineno": {}
            }
        ]
    },
    "covering": [],
    "init_cond": {
        "defs": [],
        "fmlas": [],
        "defidx": [],
        "annot": null
    },
    "state_graphs": [],
    "mixins": [
        "[<ivy.ivy_ast.MixinAfterDef object at 0x7fd8f2890850>, <ivy.ivy_ast.MixinImplementDef object at 0x7fd8f28a7950>]",
        "[<ivy.ivy_ast.MixinBeforeDef object at 0x7fd8f2e10610>, <ivy.ivy_ast.MixinAfterDef object at 0x7fd8f2e51bd0>, <ivy.ivy_ast.MixinImplementDef object at 0x7fd8f2dd8710>]",
        "[<ivy.ivy_ast.MixinImplementDef object at 0x7fd8f1bdd250>]",
        "[<ivy.ivy_ast.MixinImplementDef object at 0x7fd8f2b6a750>]",
        "[<ivy.ivy_ast.MixinImplementDef object at 0x7fd8f2c18310>]",
        "[<ivy.ivy_ast.MixinImplementDef object at 0x7fd8f27058d0>]",
        "[<ivy.ivy_ast.MixinImplementDef object at 0x7fd8f24a96d0>]",
        "[<ivy.ivy_ast.MixinBeforeDef object at 0x7fd8f1dd18d0>, <ivy.ivy_ast.MixinAfterDef object at 0x7fd8f1dd1e10>, <ivy.ivy_ast.MixinImplementDef object at 0x7fd8f1de5f50>]",
        "[<ivy.ivy_ast.MixinImplementDef object at 0x7fd8f25726d0>]",
        "[<ivy.ivy_ast.MixinBeforeDef object at 0x7fd8f2e80710>, <ivy.ivy_ast.MixinAfterDef object at 0x7fd8f2e8df50>, <ivy.ivy_ast.MixinBeforeDef object at 0x7fd8f1369b90>]",
        "[<ivy.ivy_ast.MixinBeforeDef object at 0x7fd8f3271a10>, <ivy.ivy_ast.MixinAfterDef object at 0x7fd8f300ec90>, <ivy.ivy_ast.MixinImplementDef object at 0x7fd8f3090450>]",
        "[<ivy.ivy_ast.MixinImplementDef object at 0x7fd8f1711c50>]",
        "[<ivy.ivy_ast.MixinAfterDef object at 0x7fd8f3749cd0>, <ivy.ivy_ast.MixinAfterDef object at 0x7fd8f32d0710>, <ivy.ivy_ast.MixinAfterDef object at 0x7fd8f32dfd90>, <ivy.ivy_ast.MixinAfterDef object at 0x7fd8f313c290>, <ivy.ivy_ast.MixinAfterDef object at 0x7fd8f32ad610>, <ivy.ivy_ast.MixinAfterDef object at 0x7fd8f2b75250>, <ivy.ivy_ast.MixinAfterDef object at 0x7fd8f2a21150>, <ivy.ivy_ast.MixinAfterDef object at 0x7fd8f28901d0>, <ivy.ivy_ast.MixinAfterDef object at 0x7fd8f2711c90>, <ivy.ivy_ast.MixinAfterDef object at 0x7fd8f2607b50>, <ivy.ivy_ast.MixinAfterDef object at 0x7fd8f2291650>, <ivy.ivy_ast.MixinAfterDef object at 0x7fd8f21a3350>, <ivy.ivy_ast.MixinAfterDef object at 0x7fd8f2029f90>, <ivy.ivy_ast.MixinAfterDef object at 0x7fd8f1c22210>, <ivy.ivy_ast.MixinAfterDef object at 0x7fd8f1b5a210>, <ivy.ivy_ast.MixinAfterDef object at 0x7fd8f1b5acd0>, <ivy.ivy_ast.MixinAfterDef object at 0x7fd8f1a8d310>, <ivy.ivy_ast.MixinAfterDef object at 0x7fd8f1b71f10>, <ivy.ivy_ast.MixinAfterDef object at 0x7fd8f1b5c790>, <ivy.ivy_ast.MixinAfterDef object at 0x7fd8f1b17850>, <ivy.ivy_ast.MixinAfterDef object at 0x7fd8f1c8eb50>, <ivy.ivy_ast.MixinAfterDef object at 0x7fd8f1b0afd0>, <ivy.ivy_ast.MixinAfterDef object at 0x7fd8f1c4a190>, <ivy.ivy_ast.MixinAfterDef object at 0x7fd8f1a31bd0>, <ivy.ivy_ast.MixinAfterDef object at 0x7fd8f1a7a990>, <ivy.ivy_ast.MixinAfterDef object at 0x7fd8f1adc6d0>, <ivy.ivy_ast.MixinAfterDef object at 0x7fd8f1c52310>, <ivy.ivy_ast.MixinAfterDef object at 0x7fd8f1ca8290>, <ivy.ivy_ast.MixinAfterDef object at 0x7fd8f1720fd0>, <ivy.ivy_ast.MixinAfterDef object at 0x7fd8f16b8f50>, <ivy.ivy_ast.MixinAfterDef object at 0x7fd8f169ff50>, <ivy.ivy_ast.MixinAfterDef object at 0x7fd8f165d790>, <ivy.ivy_ast.MixinAfterDef object at 0x7fd8f1610a10>, <ivy.ivy_ast.MixinAfterDef object at 0x7fd8f14ab110>, <ivy.ivy_ast.MixinAfterDef object at 0x7fd8f13d0210>, <ivy.ivy_ast.MixinAfterDef object at 0x7fd8f1342510>, <ivy.ivy_ast.MixinAfterDef object at 0x7fd8f135a910>, <ivy.ivy_ast.MixinAfterDef object at 0x7fd8f135ad50>, <ivy.ivy_ast.MixinAfterDef object at 0x7fd8f1316d90>, <ivy.ivy_ast.MixinAfterDef object at 0x7fd8f12e2ad0>]",
        "[<ivy.ivy_ast.MixinBeforeDef object at 0x7fd8f2263cd0>, <ivy.ivy_ast.MixinAfterDef object at 0x7fd8f22cbbd0>]",
        "[<ivy.ivy_ast.MixinImplementDef object at 0x7fd8f31bab50>]",
        "[<ivy.ivy_ast.MixinBeforeDef object at 0x7fd8f29b6350>, <ivy.ivy_ast.MixinAfterDef object at 0x7fd8f29b6090>, <ivy.ivy_ast.MixinImplementDef object at 0x7fd8f2822510>]",
        "[<ivy.ivy_ast.MixinImplementDef object at 0x7fd8f1dfcc10>]",
        "[<ivy.ivy_ast.MixinBeforeDef object at 0x7fd8f295df10>, <ivy.ivy_ast.MixinAfterDef object at 0x7fd8f28be490>, <ivy.ivy_ast.MixinImplementDef object at 0x7fd8f28d5390>]",
        "[<ivy.ivy_ast.MixinAfterDef object at 0x7fd8f2a7f410>, <ivy.ivy_ast.MixinImplementDef object at 0x7fd8f2a8cb10>]",
        "[<ivy.ivy_ast.MixinBeforeDef object at 0x7fd8f240f510>, <ivy.ivy_ast.MixinAfterDef object at 0x7fd8f2423750>, <ivy.ivy_ast.MixinImplementDef object at 0x7fd8f2428150>]",
        "[<ivy.ivy_ast.MixinBeforeDef object at 0x7fd8f24e5d10>, <ivy.ivy_ast.MixinAfterDef object at 0x7fd8f2418d90>, <ivy.ivy_ast.MixinImplementDef object at 0x7fd8f23d7fd0>]",
        "[<ivy.ivy_ast.MixinImplementDef object at 0x7fd8f1202650>]",
        "[<ivy.ivy_ast.MixinBeforeDef object at 0x7fd8f2fd3210>, <ivy.ivy_ast.MixinAfterDef object at 0x7fd8f32ab450>, <ivy.ivy_ast.MixinBeforeDef object at 0x7fd8f13690d0>]",
        "[<ivy.ivy_ast.MixinBeforeDef object at 0x7fd8f1c220d0>]",
        "[<ivy.ivy_ast.MixinImplementDef object at 0x7fd8f1bec4d0>]",
        "[<ivy.ivy_ast.MixinAfterDef object at 0x7fd8f340b3d0>, <ivy.ivy_ast.MixinImplementDef object at 0x7fd8f33b1750>]",
        "[<ivy.ivy_ast.MixinAfterDef object at 0x7fd8f210c210>, <ivy.ivy_ast.MixinImplementDef object at 0x7fd8f217aa10>]",
        "[<ivy.ivy_ast.MixinImplementDef object at 0x7fd8f142b390>]",
        "[<ivy.ivy_ast.MixinBeforeDef object at 0x7fd8f32d2d10>, <ivy.ivy_ast.MixinAfterDef object at 0x7fd8f344e310>]",
        "[<ivy.ivy_ast.MixinBeforeDef object at 0x7fd8f26b2e10>, <ivy.ivy_ast.MixinAfterDef object at 0x7fd8f26ad490>, <ivy.ivy_ast.MixinImplementDef object at 0x7fd8f2656210>]",
        "[<ivy.ivy_ast.MixinImplementDef object at 0x7fd8f1be09d0>]",
        "[<ivy.ivy_ast.MixinAfterDef object at 0x7fd8f214e490>, <ivy.ivy_ast.MixinImplementDef object at 0x7fd8f20fd4d0>]",
        "[<ivy.ivy_ast.MixinBeforeDef object at 0x7fd8f1284210>, <ivy.ivy_ast.MixinAfterDef object at 0x7fd8f12ca990>, <ivy.ivy_ast.MixinImplementDef object at 0x7fd8f12b0910>]",
        "[<ivy.ivy_ast.MixinImplementDef object at 0x7fd8f294b450>]",
        "[<ivy.ivy_ast.MixinAfterDef object at 0x7fd8f22c6dd0>, <ivy.ivy_ast.MixinImplementDef object at 0x7fd8f227b950>]",
        "[<ivy.ivy_ast.MixinAfterDef object at 0x7fd8f28c6a90>, <ivy.ivy_ast.MixinImplementDef object at 0x7fd8f28b9c90>]",
        "[<ivy.ivy_ast.MixinBeforeDef object at 0x7fd8f31c0b50>, <ivy.ivy_ast.MixinAfterDef object at 0x7fd8f3215350>, <ivy.ivy_ast.MixinBeforeDef object at 0x7fd8f136d950>]",
        "[<ivy.ivy_ast.MixinBeforeDef object at 0x7fd8f2dd8a90>, <ivy.ivy_ast.MixinAfterDef object at 0x7fd8f2dd6110>, <ivy.ivy_ast.MixinImplementDef object at 0x7fd8f2dec310>]",
        "[<ivy.ivy_ast.MixinAfterDef object at 0x7fd8f26fb350>, <ivy.ivy_ast.MixinImplementDef object at 0x7fd8f271f1d0>]",
        "[<ivy.ivy_ast.MixinBeforeDef object at 0x7fd8f2506f90>, <ivy.ivy_ast.MixinAfterDef object at 0x7fd8f24fd4d0>, <ivy.ivy_ast.MixinImplementDef object at 0x7fd8f2525550>]",
        "[<ivy.ivy_ast.MixinImplementDef object at 0x7fd8f1c8e590>]",
        "[<ivy.ivy_ast.MixinImplementDef object at 0x7fd8f230c490>]",
        "[<ivy.ivy_ast.MixinImplementDef object at 0x7fd8f12a3410>]",
        "[<ivy.ivy_ast.MixinBeforeDef object at 0x7fd8f30dac50>, <ivy.ivy_ast.MixinAfterDef object at 0x7fd8f307bad0>, <ivy.ivy_ast.MixinBeforeDef object at 0x7fd8f131b5d0>]",
        "[<ivy.ivy_ast.MixinAfterDef object at 0x7fd8f13bbd10>, <ivy.ivy_ast.MixinImplementDef object at 0x7fd8f13c6990>]",
        "[<ivy.ivy_ast.MixinAfterDef object at 0x7fd8f1645c10>, <ivy.ivy_ast.MixinImplementDef object at 0x7fd8f1604d90>]",
        "[<ivy.ivy_ast.MixinAfterDef object at 0x7fd8f2d17790>, <ivy.ivy_ast.MixinImplementDef object at 0x7fd8f2c7bed0>]",
        "[<ivy.ivy_ast.MixinBeforeDef object at 0x7fd8f142b650>, <ivy.ivy_ast.MixinAfterDef object at 0x7fd8f142d0d0>, <ivy.ivy_ast.MixinImplementDef object at 0x7fd8f13d0490>]",
        "[<ivy.ivy_ast.MixinAfterDef object at 0x7fd8f1410990>, <ivy.ivy_ast.MixinImplementDef object at 0x7fd8f1398510>]",
        "[<ivy.ivy_ast.MixinAfterDef object at 0x7fd8f2f6de90>, <ivy.ivy_ast.MixinImplementDef object at 0x7fd8f2f6bcd0>]",
        "[<ivy.ivy_ast.MixinAfterDef object at 0x7fd8f2f55410>, <ivy.ivy_ast.MixinImplementDef object at 0x7fd8f2f04fd0>]",
        "[<ivy.ivy_ast.MixinAfterDef object at 0x7fd8f2d9e190>, <ivy.ivy_ast.MixinImplementDef object at 0x7fd8f2db5e10>]",
        "[<ivy.ivy_ast.MixinAfterDef object at 0x7fd8f15cb690>]",
        "[<ivy.ivy_ast.MixinBeforeDef object at 0x7fd8f205f150>, <ivy.ivy_ast.MixinAfterDef object at 0x7fd8f205fcd0>, <ivy.ivy_ast.MixinImplementDef object at 0x7fd8f2078090>]",
        "[<ivy.ivy_ast.MixinBeforeDef object at 0x7fd8f126cb50>, <ivy.ivy_ast.MixinAfterDef object at 0x7fd8f1269610>, <ivy.ivy_ast.MixinImplementDef object at 0x7fd8f1273410>]",
        "[<ivy.ivy_ast.MixinBeforeDef object at 0x7fd8f12bdf10>, <ivy.ivy_ast.MixinAfterDef object at 0x7fd8f12da250>, <ivy.ivy_ast.MixinImplementDef object at 0x7fd8f12f62d0>]",
        "[<ivy.ivy_ast.MixinAfterDef object at 0x7fd8f23cb850>, <ivy.ivy_ast.MixinImplementDef object at 0x7fd8f23e3590>]",
        "[<ivy.ivy_ast.MixinImplementDef object at 0x7fd8f2662710>]",
        "[<ivy.ivy_ast.MixinImplementDef object at 0x7fd8f2533510>]",
        "[<ivy.ivy_ast.MixinBeforeDef object at 0x7fd8f332c290>, <ivy.ivy_ast.MixinAfterDef object at 0x7fd8f3338250>, <ivy.ivy_ast.MixinImplementDef object at 0x7fd8f32d2f90>]",
        "[<ivy.ivy_ast.MixinBeforeDef object at 0x7fd8f210c7d0>, <ivy.ivy_ast.MixinAfterDef object at 0x7fd8f2143a10>, <ivy.ivy_ast.MixinImplementDef object at 0x7fd8f2107ad0>]",
        "[<ivy.ivy_ast.MixinBeforeDef object at 0x7fd8f16db0d0>, <ivy.ivy_ast.MixinAfterDef object at 0x7fd8f176c8d0>, <ivy.ivy_ast.MixinImplementDef object at 0x7fd8f1695190>]",
        "[<ivy.ivy_ast.MixinBeforeDef object at 0x7fd8f118d710>, <ivy.ivy_ast.MixinAfterDef object at 0x7fd8f11a8910>, <ivy.ivy_ast.MixinImplementDef object at 0x7fd8f1149bd0>]",
        "[<ivy.ivy_ast.MixinImplementDef object at 0x7fd8f123c650>]",
        "[<ivy.ivy_ast.MixinAfterDef object at 0x7fd8f1473d90>, <ivy.ivy_ast.MixinImplementDef object at 0x7fd8f141eed0>]",
        "[<ivy.ivy_ast.MixinBeforeDef object at 0x7fd8f207de50>, <ivy.ivy_ast.MixinAfterDef object at 0x7fd8f2047310>, <ivy.ivy_ast.MixinImplementDef object at 0x7fd8f20b2310>]",
        "[<ivy.ivy_ast.MixinAfterDef object at 0x7fd8f3180850>, <ivy.ivy_ast.MixinImplementDef object at 0x7fd8f319aad0>]",
        "[<ivy.ivy_ast.MixinBeforeDef object at 0x7fd8f134e410>, <ivy.ivy_ast.MixinImplementDef object at 0x7fd8f1351b10>]",
        "[<ivy.ivy_ast.MixinImplementDef object at 0x7fd8f2529790>]",
        "[<ivy.ivy_ast.MixinBeforeDef object at 0x7fd8f2feb450>, <ivy.ivy_ast.MixinAfterDef object at 0x7fd8f30da0d0>]",
        "[<ivy.ivy_ast.MixinAfterDef object at 0x7fd8f21a3f10>, <ivy.ivy_ast.MixinImplementDef object at 0x7fd8f2143490>]",
        "[<ivy.ivy_ast.MixinAfterDef object at 0x7fd8f16e5bd0>, <ivy.ivy_ast.MixinImplementDef object at 0x7fd8f169f950>]",
        "[<ivy.ivy_ast.MixinImplementDef object at 0x7fd8f262a5d0>]",
        "[<ivy.ivy_ast.MixinAfterDef object at 0x7fd8f2adc490>, <ivy.ivy_ast.MixinImplementDef object at 0x7fd8f2ab9310>]",
        "[<ivy.ivy_ast.MixinAfterDef object at 0x7fd8f1279a50>, <ivy.ivy_ast.MixinImplementDef object at 0x7fd8f1217d10>]",
        "[<ivy.ivy_ast.MixinAfterDef object at 0x7fd8f2e8b7d0>, <ivy.ivy_ast.MixinImplementDef object at 0x7fd8f3116c50>]",
        "[<ivy.ivy_ast.MixinAfterDef object at 0x7fd8f2683390>, <ivy.ivy_ast.MixinImplementDef object at 0x7fd8f2681b90>]",
        "[<ivy.ivy_ast.MixinBeforeDef object at 0x7fd8f2235ed0>, <ivy.ivy_ast.MixinAfterDef object at 0x7fd8f2255750>, <ivy.ivy_ast.MixinImplementDef object at 0x7fd8f21c0510>]",
        "[<ivy.ivy_ast.MixinAfterDef object at 0x7fd8f2011310>, <ivy.ivy_ast.MixinImplementDef object at 0x7fd8f1fcc950>]",
        "[<ivy.ivy_ast.MixinBeforeDef object at 0x7fd8f165da50>, <ivy.ivy_ast.MixinAfterDef object at 0x7fd8f165dd90>, <ivy.ivy_ast.MixinImplementDef object at 0x7fd8f1677610>]",
        "[<ivy.ivy_ast.MixinBeforeDef object at 0x7fd8f2790cd0>, <ivy.ivy_ast.MixinAfterDef object at 0x7fd8f27bd150>, <ivy.ivy_ast.MixinImplementDef object at 0x7fd8f279b590>]",
        "[<ivy.ivy_ast.MixinImplementDef object at 0x7fd8f1502ad0>]",
        "[<ivy.ivy_ast.MixinAfterDef object at 0x7fd8f24a75d0>, <ivy.ivy_ast.MixinImplementDef object at 0x7fd8f299c790>]",
        "[<ivy.ivy_ast.MixinImplementDef object at 0x7fd8f116e250>]",
        "[<ivy.ivy_ast.MixinAfterDef object at 0x7fd8f28fcf90>, <ivy.ivy_ast.MixinImplementDef object at 0x7fd8f29b3550>]",
        "[<ivy.ivy_ast.MixinAfterDef object at 0x7fd8f31ebe10>, <ivy.ivy_ast.MixinImplementDef object at 0x7fd8f31f3810>]",
        "[<ivy.ivy_ast.MixinAfterDef object at 0x7fd8f13ff690>, <ivy.ivy_ast.MixinImplementDef object at 0x7fd8f14141d0>]",
        "[<ivy.ivy_ast.MixinImplementDef object at 0x7fd8f2d73450>]",
        "[<ivy.ivy_ast.MixinImplementDef object at 0x7fd8f2a96e10>]",
        "[<ivy.ivy_ast.MixinImplementDef object at 0x7fd8f2a13450>]",
        "[<ivy.ivy_ast.MixinAfterDef object at 0x7fd8f2c9eb10>, <ivy.ivy_ast.MixinImplementDef object at 0x7fd8f2ca1250>]",
        "[<ivy.ivy_ast.MixinBeforeDef object at 0x7fd8f21c3cd0>, <ivy.ivy_ast.MixinAfterDef object at 0x7fd8f294eb50>, <ivy.ivy_ast.MixinImplementDef object at 0x7fd8f222a810>]",
        "[<ivy.ivy_ast.MixinAfterDef object at 0x7fd8f31802d0>, <ivy.ivy_ast.MixinImplementDef object at 0x7fd8f31a6f50>]",
        "[<ivy.ivy_ast.MixinAfterDef object at 0x7fd8f230cfd0>, <ivy.ivy_ast.MixinImplementDef object at 0x7fd8f2331490>]",
        "[<ivy.ivy_ast.MixinImplementDef object at 0x7fd8f25651d0>]",
        "[<ivy.ivy_ast.MixinImplementDef object at 0x7fd8f2fa4190>]",
        "[<ivy.ivy_ast.MixinAfterDef object at 0x7fd8f2ad0c90>, <ivy.ivy_ast.MixinImplementDef object at 0x7fd8f2a8cb90>]",
        "[<ivy.ivy_ast.MixinImplementDef object at 0x7fd8f2dabc10>]",
        "[<ivy.ivy_ast.MixinImplementDef object at 0x7fd8f153bf50>]",
        "[<ivy.ivy_ast.MixinImplementDef object at 0x7fd8f2760e10>]",
        "[<ivy.ivy_ast.MixinBeforeDef object at 0x7fd8f2b46e50>, <ivy.ivy_ast.MixinAfterDef object at 0x7fd8f2baa2d0>, <ivy.ivy_ast.MixinImplementDef object at 0x7fd8f2b55e90>]",
        "[<ivy.ivy_ast.MixinImplementDef object at 0x7fd8f28f7550>]",
        "[<ivy.ivy_ast.MixinAfterDef object at 0x7fd8f13f8190>, <ivy.ivy_ast.MixinImplementDef object at 0x7fd8f138f990>]",
        "[<ivy.ivy_ast.MixinBeforeDef object at 0x7fd8f2a55b50>, <ivy.ivy_ast.MixinAfterDef object at 0x7fd8f2a53ad0>, <ivy.ivy_ast.MixinImplementDef object at 0x7fd8f2a63d90>]",
        "[<ivy.ivy_ast.MixinBeforeDef object at 0x7fd8f2385490>, <ivy.ivy_ast.MixinAfterDef object at 0x7fd8f2377b50>, <ivy.ivy_ast.MixinImplementDef object at 0x7fd8f23311d0>]",
        "[<ivy.ivy_ast.MixinBeforeDef object at 0x7fd8f1825ed0>, <ivy.ivy_ast.MixinAfterDef object at 0x7fd8f1756c50>, <ivy.ivy_ast.MixinImplementDef object at 0x7fd8f1777990>]",
        "[<ivy.ivy_ast.MixinBeforeDef object at 0x7fd8f146e610>, <ivy.ivy_ast.MixinAfterDef object at 0x7fd8f14598d0>, <ivy.ivy_ast.MixinImplementDef object at 0x7fd8f1414b90>]",
        "[<ivy.ivy_ast.MixinAfterDef object at 0x7fd8f334a610>, <ivy.ivy_ast.MixinImplementDef object at 0x7fd8f3351b90>]",
        "[<ivy.ivy_ast.MixinImplementDef object at 0x7fd8f1bf9190>]",
        "[<ivy.ivy_ast.MixinAfterDef object at 0x7fd8f1c6fa90>, <ivy.ivy_ast.MixinImplementDef object at 0x7fd8f19d0410>]",
        "[<ivy.ivy_ast.MixinAfterDef object at 0x7fd8f26b2810>, <ivy.ivy_ast.MixinImplementDef object at 0x7fd8f2642fd0>]",
        "[<ivy.ivy_ast.MixinImplementDef object at 0x7fd8f32e9dd0>]",
        "[<ivy.ivy_ast.MixinImplementDef object at 0x7fd8f160ecd0>]",
        "[<ivy.ivy_ast.MixinAfterDef object at 0x7fd8f23c0dd0>, <ivy.ivy_ast.MixinImplementDef object at 0x7fd8f2485090>]",
        "[<ivy.ivy_ast.MixinBeforeDef object at 0x7fd8f2ac3310>, <ivy.ivy_ast.MixinAfterDef object at 0x7fd8f2b9e250>, <ivy.ivy_ast.MixinImplementDef object at 0x7fd8f2acc190>]",
        "[<ivy.ivy_ast.MixinBeforeDef object at 0x7fd8f2f70b10>, <ivy.ivy_ast.MixinAfterDef object at 0x7fd8f2f48a50>, <ivy.ivy_ast.MixinImplementDef object at 0x7fd8f2f1a890>]",
        "[<ivy.ivy_ast.MixinBeforeDef object at 0x7fd8f12b0750>, <ivy.ivy_ast.MixinAfterDef object at 0x7fd8f1273850>, <ivy.ivy_ast.MixinImplementDef object at 0x7fd8f1279750>]",
        "[<ivy.ivy_ast.MixinAfterDef object at 0x7fd8f2c42990>, <ivy.ivy_ast.MixinImplementDef object at 0x7fd8f2cad410>]",
        "[<ivy.ivy_ast.MixinImplementDef object at 0x7fd8f1be0b90>]",
        "[<ivy.ivy_ast.MixinImplementDef object at 0x7fd8f1e81590>]",
        "[<ivy.ivy_ast.MixinBeforeDef object at 0x7fd8f16cb310>, <ivy.ivy_ast.MixinAfterDef object at 0x7fd8f16cbb50>, <ivy.ivy_ast.MixinImplementDef object at 0x7fd8f16bf910>]",
        "[<ivy.ivy_ast.MixinImplementDef object at 0x7fd8f128dd10>]",
        "[<ivy.ivy_ast.MixinBeforeDef object at 0x7fd8f2a5ff90>, <ivy.ivy_ast.MixinAfterDef object at 0x7fd8f2a57a50>, <ivy.ivy_ast.MixinImplementDef object at 0x7fd8f2a06e10>]",
        "[<ivy.ivy_ast.MixinBeforeDef object at 0x7fd8f2968fd0>, <ivy.ivy_ast.MixinAfterDef object at 0x7fd8f2449d90>, <ivy.ivy_ast.MixinImplementDef object at 0x7fd8f26f8110>]",
        "[<ivy.ivy_ast.MixinAfterDef object at 0x7fd8f1131e10>, <ivy.ivy_ast.MixinImplementDef object at 0x7fd8f10bfad0>]",
        "[<ivy.ivy_ast.MixinImplementDef object at 0x7fd8f3371f10>]",
        "[<ivy.ivy_ast.MixinImplementDef object at 0x7fd8f261f790>]",
        "[<ivy.ivy_ast.MixinAfterDef object at 0x7fd8f1fbf250>, <ivy.ivy_ast.MixinImplementDef object at 0x7fd8f1fcc510>]",
        "[<ivy.ivy_ast.MixinBeforeDef object at 0x7fd8f2659a90>, <ivy.ivy_ast.MixinAfterDef object at 0x7fd8f2670310>, <ivy.ivy_ast.MixinImplementDef object at 0x7fd8f264de50>]",
        "[<ivy.ivy_ast.MixinAfterDef object at 0x7fd8f29a91d0>, <ivy.ivy_ast.MixinImplementDef object at 0x7fd8f29bc510>]",
        "[<ivy.ivy_ast.MixinAfterDef object at 0x7fd8f25fdd90>, <ivy.ivy_ast.MixinImplementDef object at 0x7fd8f262ae10>]",
        "[<ivy.ivy_ast.MixinImplementDef object at 0x7fd8f1181f10>]",
        "[<ivy.ivy_ast.MixinImplementDef object at 0x7fd8f307b8d0>]",
        "[<ivy.ivy_ast.MixinBeforeDef object at 0x7fd8f25df290>, <ivy.ivy_ast.MixinAfterDef object at 0x7fd8f25d9550>, <ivy.ivy_ast.MixinAfterDef object at 0x7fd8f14abb50>]",
        "[<ivy.ivy_ast.MixinBeforeDef object at 0x7fd8f111bbd0>, <ivy.ivy_ast.MixinAfterDef object at 0x7fd8f1125990>, <ivy.ivy_ast.MixinImplementDef object at 0x7fd8f1131510>]",
        "[<ivy.ivy_ast.MixinAfterDef object at 0x7fd8f2cb50d0>, <ivy.ivy_ast.MixinImplementDef object at 0x7fd8f2c44610>]",
        "[<ivy.ivy_ast.MixinImplementDef object at 0x7fd8f26a85d0>]",
        "[<ivy.ivy_ast.MixinAfterDef object at 0x7fd8f28fca10>, <ivy.ivy_ast.MixinImplementDef object at 0x7fd8f298f050>]",
        "[<ivy.ivy_ast.MixinAfterDef object at 0x7fd8f2d65790>, <ivy.ivy_ast.MixinImplementDef object at 0x7fd8f2d71590>]",
        "[<ivy.ivy_ast.MixinImplementDef object at 0x7fd8f170ecd0>]",
        "[<ivy.ivy_ast.MixinAfterDef object at 0x7fd8f16e5f90>, <ivy.ivy_ast.MixinImplementDef object at 0x7fd8f1695f90>]",
        "[<ivy.ivy_ast.MixinBeforeDef object at 0x7fd8f2404850>, <ivy.ivy_ast.MixinAfterDef object at 0x7fd8f23754d0>, <ivy.ivy_ast.MixinImplementDef object at 0x7fd8f2304e90>]",
        "[<ivy.ivy_ast.MixinAfterDef object at 0x7fd8f331d810>, <ivy.ivy_ast.MixinImplementDef object at 0x7fd8f3351a50>]",
        "[<ivy.ivy_ast.MixinBeforeDef object at 0x7fd8f20297d0>, <ivy.ivy_ast.MixinAfterDef object at 0x7fd8f20a4f10>, <ivy.ivy_ast.MixinImplementDef object at 0x7fd8f2031250>]",
        "[<ivy.ivy_ast.MixinBeforeDef object at 0x7fd8f2b2ab50>, <ivy.ivy_ast.MixinAfterDef object at 0x7fd8f2adc050>, <ivy.ivy_ast.MixinImplementDef object at 0x7fd8f2a8a850>]",
        "[<ivy.ivy_ast.MixinImplementDef object at 0x7fd8f25fdcd0>]",
        "[<ivy.ivy_ast.MixinBeforeDef object at 0x7fd8f21ac490>, <ivy.ivy_ast.MixinAfterDef object at 0x7fd8f21acf10>, <ivy.ivy_ast.MixinImplementDef object at 0x7fd8f21b7a90>]",
        "[<ivy.ivy_ast.MixinBeforeDef object at 0x7fd8f21d1250>, <ivy.ivy_ast.MixinAfterDef object at 0x7fd8f21db350>, <ivy.ivy_ast.MixinImplementDef object at 0x7fd8f225a9d0>]",
        "[<ivy.ivy_ast.MixinImplementDef object at 0x7fd8f1be0fd0>]",
        "[<ivy.ivy_ast.MixinAfterDef object at 0x7fd8f28a4cd0>, <ivy.ivy_ast.MixinImplementDef object at 0x7fd8f28a4550>]",
        "[<ivy.ivy_ast.MixinAfterDef object at 0x7fd8f2d86850>, <ivy.ivy_ast.MixinImplementDef object at 0x7fd8f2d01f10>]",
        "[<ivy.ivy_ast.MixinImplementDef object at 0x7fd8f2d9a750>]",
        "[<ivy.ivy_ast.MixinBeforeDef object at 0x7fd8f27abe50>, <ivy.ivy_ast.MixinAfterDef object at 0x7fd8f279bad0>, <ivy.ivy_ast.MixinImplementDef object at 0x7fd8f27559d0>]",
        "[<ivy.ivy_ast.MixinAfterDef object at 0x7fd8f1204290>, <ivy.ivy_ast.MixinImplementDef object at 0x7fd8f1231510>]",
        "[<ivy.ivy_ast.MixinAfterDef object at 0x7fd8f2542210>, <ivy.ivy_ast.MixinImplementDef object at 0x7fd8f2558150>]",
        "[<ivy.ivy_ast.MixinImplementDef object at 0x7fd8f1091710>]",
        "[<ivy.ivy_ast.MixinAfterDef object at 0x7fd8f2047f50>, <ivy.ivy_ast.MixinImplementDef object at 0x7fd8f2031110>]",
        "[<ivy.ivy_ast.MixinAfterDef object at 0x7fd8f2a6cd90>, <ivy.ivy_ast.MixinImplementDef object at 0x7fd8f2a6cd10>]",
        "[<ivy.ivy_ast.MixinBeforeDef object at 0x7fd8f2317f10>, <ivy.ivy_ast.MixinAfterDef object at 0x7fd8f22d7d10>, <ivy.ivy_ast.MixinImplementDef object at 0x7fd8f22cbb90>]",
        "[<ivy.ivy_ast.MixinImplementDef object at 0x7fd8f2d0b710>]",
        "[<ivy.ivy_ast.MixinAfterDef object at 0x7fd8f206cc10>, <ivy.ivy_ast.MixinImplementDef object at 0x7fd8f2076590>]",
        "[<ivy.ivy_ast.MixinImplementDef object at 0x7fd8f1bf5ed0>]",
        "[<ivy.ivy_ast.MixinBeforeDef object at 0x7fd8f1bc8350>, <ivy.ivy_ast.MixinImplementDef object at 0x7fd8f1be9c10>]",
        "[<ivy.ivy_ast.MixinAfterDef object at 0x7fd8f318f050>, <ivy.ivy_ast.MixinImplementDef object at 0x7fd8f3180f50>]",
        "[<ivy.ivy_ast.MixinImplementDef object at 0x7fd8f2325210>]",
        "[<ivy.ivy_ast.MixinBeforeDef object at 0x7fd8f33ce4d0>, <ivy.ivy_ast.MixinAfterDef object at 0x7fd8f340bbd0>, <ivy.ivy_ast.MixinImplementDef object at 0x7fd8f3351650>]",
        "[<ivy.ivy_ast.MixinBeforeDef object at 0x7fd8f2f57690>, <ivy.ivy_ast.MixinAfterDef object at 0x7fd8f2f79d10>, <ivy.ivy_ast.MixinImplementDef object at 0x7fd8f2f103d0>]",
        "[<ivy.ivy_ast.MixinAfterDef object at 0x7fd8f1316d50>, <ivy.ivy_ast.MixinImplementDef object at 0x7fd8f133ab90>]",
        "[<ivy.ivy_ast.MixinBeforeDef object at 0x7fd8f25d7b50>, <ivy.ivy_ast.MixinAfterDef object at 0x7fd8f25e1fd0>, <ivy.ivy_ast.MixinImplementDef object at 0x7fd8f259c8d0>]",
        "[<ivy.ivy_ast.MixinImplementDef object at 0x7fd8f29c0d90>]",
        "[<ivy.ivy_ast.MixinBeforeDef object at 0x7fd8f1bcfb90>]",
        "[<ivy.ivy_ast.MixinBeforeDef object at 0x7fd8f22b9f90>, <ivy.ivy_ast.MixinAfterDef object at 0x7fd8f2267e50>]",
        "[<ivy.ivy_ast.MixinAfterDef object at 0x7fd8f1dcee50>, <ivy.ivy_ast.MixinImplementDef object at 0x7fd8f1d7cd50>]",
        "[<ivy.ivy_ast.MixinBeforeDef object at 0x7fd8f2418550>, <ivy.ivy_ast.MixinAfterDef object at 0x7fd8f249bb50>, <ivy.ivy_ast.MixinImplementDef object at 0x7fd8f24285d0>]",
        "[<ivy.ivy_ast.MixinAfterDef object at 0x7fd8f27a9d10>, <ivy.ivy_ast.MixinImplementDef object at 0x7fd8f273ded0>]",
        "[<ivy.ivy_ast.MixinBeforeDef object at 0x7fd8f1125190>, <ivy.ivy_ast.MixinAfterDef object at 0x7fd8f111b790>, <ivy.ivy_ast.MixinImplementDef object at 0x7fd8f10c8350>]",
        "[<ivy.ivy_ast.MixinImplementDef object at 0x7fd8f1bbc390>]",
        "[<ivy.ivy_ast.MixinBeforeDef object at 0x7fd8f3070350>, <ivy.ivy_ast.MixinAfterDef object at 0x7fd8f2f87c50>, <ivy.ivy_ast.MixinImplementDef object at 0x7fd8f2f9a9d0>]",
        "[<ivy.ivy_ast.MixinAfterDef object at 0x7fd8f16457d0>, <ivy.ivy_ast.MixinImplementDef object at 0x7fd8f1601f50>]",
        "[<ivy.ivy_ast.MixinAfterDef object at 0x7fd8f12971d0>, <ivy.ivy_ast.MixinImplementDef object at 0x7fd8f12dd990>]",
        "[<ivy.ivy_ast.MixinAfterDef object at 0x7fd8f2c9e810>, <ivy.ivy_ast.MixinImplementDef object at 0x7fd8f2c635d0>]",
        "[<ivy.ivy_ast.MixinBeforeDef object at 0x7fd8f21d1f50>, <ivy.ivy_ast.MixinAfterDef object at 0x7fd8f222ac90>, <ivy.ivy_ast.MixinImplementDef object at 0x7fd8f21f3890>]",
        "[<ivy.ivy_ast.MixinImplementDef object at 0x7fd8f2acc8d0>]",
        "[<ivy.ivy_ast.MixinBeforeDef object at 0x7fd8f1473e50>, <ivy.ivy_ast.MixinAfterDef object at 0x7fd8f13fcf50>, <ivy.ivy_ast.MixinImplementDef object at 0x7fd8f141ec90>]",
        "[<ivy.ivy_ast.MixinImplementDef object at 0x7fd8f28f7850>]",
        "[<ivy.ivy_ast.MixinBeforeDef object at 0x7fd8f28c6950>, <ivy.ivy_ast.MixinAfterDef object at 0x7fd8f28be3d0>, <ivy.ivy_ast.MixinImplementDef object at 0x7fd8f28ea450>]",
        "[<ivy.ivy_ast.MixinBeforeDef object at 0x7fd8f10bfbd0>, <ivy.ivy_ast.MixinAfterDef object at 0x7fd8f108d6d0>, <ivy.ivy_ast.MixinImplementDef object at 0x7fd8f10e9890>]",
        "[<ivy.ivy_ast.MixinImplementDef object at 0x7fd8f13821d0>]",
        "[<ivy.ivy_ast.MixinBeforeDef object at 0x7fd8f2898250>, <ivy.ivy_ast.MixinAfterDef object at 0x7fd8f2950ed0>, <ivy.ivy_ast.MixinImplementDef object at 0x7fd8f28b9d90>]",
        "[<ivy.ivy_ast.MixinImplementDef object at 0x7fd8f147be10>]",
        "[<ivy.ivy_ast.MixinAfterDef object at 0x7fd8f30f0850>, <ivy.ivy_ast.MixinImplementDef object at 0x7fd8f2fb2a10>]",
        "[<ivy.ivy_ast.MixinBeforeDef object at 0x7fd8f2c9e250>, <ivy.ivy_ast.MixinAfterDef object at 0x7fd8f2c7b390>, <ivy.ivy_ast.MixinImplementDef object at 0x7fd8f2caa0d0>]",
        "[<ivy.ivy_ast.MixinAfterDef object at 0x7fd8f2a53950>, <ivy.ivy_ast.MixinImplementDef object at 0x7fd8f2a704d0>]",
        "[<ivy.ivy_ast.MixinImplementDef object at 0x7fd8f1d1fbd0>]",
        "[<ivy.ivy_ast.MixinBeforeDef object at 0x7fd8f2ff42d0>, <ivy.ivy_ast.MixinAfterDef object at 0x7fd8f3167890>]",
        "[<ivy.ivy_ast.MixinBeforeDef object at 0x7fd8f224d690>, <ivy.ivy_ast.MixinAfterDef object at 0x7fd8f225a550>]",
        "[<ivy.ivy_ast.MixinImplementDef object at 0x7fd8f22e3ad0>]",
        "[<ivy.ivy_ast.MixinImplementDef object at 0x7fd8f1bec990>]",
        "[<ivy.ivy_ast.MixinImplementDef object at 0x7fd8f1da9f10>]",
        "[<ivy.ivy_ast.MixinImplementDef object at 0x7fd8f326c790>]",
        "[<ivy.ivy_ast.MixinBeforeDef object at 0x7fd8f13b3290>, <ivy.ivy_ast.MixinImplementDef object at 0x7fd8f13b3790>]",
        "[<ivy.ivy_ast.MixinBeforeDef object at 0x7fd8f2f6bad0>, <ivy.ivy_ast.MixinAfterDef object at 0x7fd8f2f3d290>, <ivy.ivy_ast.MixinImplementDef object at 0x7fd8f2f3db50>]",
        "[<ivy.ivy_ast.MixinImplementDef object at 0x7fd8f25b2850>]",
        "[<ivy.ivy_ast.MixinBeforeDef object at 0x7fd8f2d5af10>, <ivy.ivy_ast.MixinAfterDef object at 0x7fd8f2d41810>, <ivy.ivy_ast.MixinImplementDef object at 0x7fd8f2d69a90>]",
        "[<ivy.ivy_ast.MixinBeforeDef object at 0x7fd8f2a8ce10>, <ivy.ivy_ast.MixinAfterDef object at 0x7fd8f2a5f250>, <ivy.ivy_ast.MixinImplementDef object at 0x7fd8f2a7ab10>]",
        "[<ivy.ivy_ast.MixinBeforeDef object at 0x7fd8f286d150>, <ivy.ivy_ast.MixinAfterDef object at 0x7fd8f295a9d0>, <ivy.ivy_ast.MixinImplementDef object at 0x7fd8f249e9d0>]",
        "[<ivy.ivy_ast.MixinBeforeDef object at 0x7fd8f1760550>, <ivy.ivy_ast.MixinAfterDef object at 0x7fd8f17584d0>, <ivy.ivy_ast.MixinImplementDef object at 0x7fd8f1a81a50>]",
        "[<ivy.ivy_ast.MixinImplementDef object at 0x7fd8f167fed0>]",
        "[<ivy.ivy_ast.MixinImplementDef object at 0x7fd8f1277390>]",
        "[<ivy.ivy_ast.MixinImplementDef object at 0x7fd8f2f26bd0>]",
        "[<ivy.ivy_ast.MixinImplementDef object at 0x7fd8f20059d0>]",
        "[<ivy.ivy_ast.MixinImplementDef object at 0x7fd8f11d1810>]",
        "[<ivy.ivy_ast.MixinAfterDef object at 0x7fd8f25f8ed0>, <ivy.ivy_ast.MixinImplementDef object at 0x7fd8f2598a90>]",
        "[<ivy.ivy_ast.MixinImplementDef object at 0x7fd8f299cdd0>]",
        "[<ivy.ivy_ast.MixinImplementDef object at 0x7fd8f1181950>]",
        "[<ivy.ivy_ast.MixinAfterDef object at 0x7fd8f26e9e50>, <ivy.ivy_ast.MixinImplementDef object at 0x7fd8f2656cd0>]",
        "[<ivy.ivy_ast.MixinBeforeDef object at 0x7fd8f22b9150>, <ivy.ivy_ast.MixinAfterDef object at 0x7fd8f22b9b50>]",
        "[<ivy.ivy_ast.MixinAfterDef object at 0x7fd8f1c5ce90>, <ivy.ivy_ast.MixinImplementDef object at 0x7fd8f16fb590>]",
        "[<ivy.ivy_ast.MixinAfterDef object at 0x7fd8f2369c10>, <ivy.ivy_ast.MixinImplementDef object at 0x7fd8f22e1dd0>]",
        "[<ivy.ivy_ast.MixinAfterDef object at 0x7fd8f118d190>, <ivy.ivy_ast.MixinImplementDef object at 0x7fd8f114a1d0>]",
        "[<ivy.ivy_ast.MixinBeforeDef object at 0x7fd8f2136550>, <ivy.ivy_ast.MixinAfterDef object at 0x7fd8f215e710>]",
        "[<ivy.ivy_ast.MixinBeforeDef object at 0x7fd8f22a1690>, <ivy.ivy_ast.MixinAfterDef object at 0x7fd8f21fd410>]",
        "[<ivy.ivy_ast.MixinImplementDef object at 0x7fd8f1e22590>]",
        "[<ivy.ivy_ast.MixinAfterDef object at 0x7fd8f2026390>, <ivy.ivy_ast.MixinImplementDef object at 0x7fd8f201ead0>]",
        "[<ivy.ivy_ast.MixinImplementDef object at 0x7fd8f1219550>]",
        "[<ivy.ivy_ast.MixinBeforeDef object at 0x7fd8f169f4d0>, <ivy.ivy_ast.MixinAfterDef object at 0x7fd8f1654a50>, <ivy.ivy_ast.MixinImplementDef object at 0x7fd8f1601a50>]",
        "[<ivy.ivy_ast.MixinBeforeDef object at 0x7fd8f2e5d490>, <ivy.ivy_ast.MixinAfterDef object at 0x7fd8f3105950>]",
        "[<ivy.ivy_ast.MixinBeforeDef object at 0x7fd8f32bb3d0>, <ivy.ivy_ast.MixinAfterDef object at 0x7fd8f32c3490>, <ivy.ivy_ast.MixinImplementDef object at 0x7fd8f32d0b50>]",
        "[<ivy.ivy_ast.MixinAfterDef object at 0x7fd8f2d87350>, <ivy.ivy_ast.MixinImplementDef object at 0x7fd8f2d9e810>]",
        "[<ivy.ivy_ast.MixinBeforeDef object at 0x7fd8f2edd710>, <ivy.ivy_ast.MixinAfterDef object at 0x7fd8f2ed1350>, <ivy.ivy_ast.MixinImplementDef object at 0x7fd8f30dccd0>]",
        "[<ivy.ivy_ast.MixinBeforeDef object at 0x7fd8f11d16d0>, <ivy.ivy_ast.MixinAfterDef object at 0x7fd8f11d4c10>, <ivy.ivy_ast.MixinImplementDef object at 0x7fd8f11f7150>]",
        "[<ivy.ivy_ast.MixinImplementDef object at 0x7fd8f2542e90>]",
        "[<ivy.ivy_ast.MixinAfterDef object at 0x7fd8f2983d90>, <ivy.ivy_ast.MixinImplementDef object at 0x7fd8f27bd850>]",
        "[<ivy.ivy_ast.MixinBeforeDef object at 0x7fd8f31d19d0>, <ivy.ivy_ast.MixinAfterDef object at 0x7fd8f3180290>, <ivy.ivy_ast.MixinImplementDef object at 0x7fd8f31a6210>]",
        "[<ivy.ivy_ast.MixinImplementDef object at 0x7fd8f10d4210>]",
        "[<ivy.ivy_ast.MixinAfterDef object at 0x7fd8f123ca90>, <ivy.ivy_ast.MixinImplementDef object at 0x7fd8f1297ad0>]",
        "[<ivy.ivy_ast.MixinAfterDef object at 0x7fd8f1466a10>, <ivy.ivy_ast.MixinImplementDef object at 0x7fd8f1470810>]",
        "[<ivy.ivy_ast.MixinImplementDef object at 0x7fd8f32c6390>]",
        "[<ivy.ivy_ast.MixinAfterDef object at 0x7fd8f1e31750>, <ivy.ivy_ast.MixinImplementDef object at 0x7fd8f1e25790>]",
        "[<ivy.ivy_ast.MixinAfterDef object at 0x7fd8f1119ed0>, <ivy.ivy_ast.MixinImplementDef object at 0x7fd8f11021d0>]",
        "[<ivy.ivy_ast.MixinAfterDef object at 0x7fd8f204a310>, <ivy.ivy_ast.MixinImplementDef object at 0x7fd8f2003410>]",
        "[<ivy.ivy_ast.MixinAfterDef object at 0x7fd8f1282190>, <ivy.ivy_ast.MixinImplementDef object at 0x7fd8f1282650>]",
        "[<ivy.ivy_ast.MixinAfterDef object at 0x7fd8f14b1490>, <ivy.ivy_ast.MixinImplementDef object at 0x7fd8f1443890>]",
        "[<ivy.ivy_ast.MixinAfterDef object at 0x7fd8f2302050>, <ivy.ivy_ast.MixinImplementDef object at 0x7fd8f230e210>]",
        "[<ivy.ivy_ast.MixinImplementDef object at 0x7fd8f31b06d0>]",
        "[<ivy.ivy_ast.MixinImplementDef object at 0x7fd8f24edd10>]",
        "[<ivy.ivy_ast.MixinBeforeDef object at 0x7fd8f27ab650>, <ivy.ivy_ast.MixinAfterDef object at 0x7fd8f27b5490>, <ivy.ivy_ast.MixinImplementDef object at 0x7fd8f274a5d0>]",
        "[<ivy.ivy_ast.MixinAfterDef object at 0x7fd8f2a5f310>, <ivy.ivy_ast.MixinImplementDef object at 0x7fd8f2a10710>]",
        "[<ivy.ivy_ast.MixinImplementDef object at 0x7fd8f2708a10>]",
        "[<ivy.ivy_ast.MixinBeforeDef object at 0x7fd8f2f557d0>, <ivy.ivy_ast.MixinAfterDef object at 0x7fd8f2f3da90>, <ivy.ivy_ast.MixinImplementDef object at 0x7fd8f2f4af10>]",
        "[<ivy.ivy_ast.MixinAfterDef object at 0x7fd8f342a710>, <ivy.ivy_ast.MixinImplementDef object at 0x7fd8f3379250>]",
        "[<ivy.ivy_ast.MixinAfterDef object at 0x7fd8f21ceb90>, <ivy.ivy_ast.MixinImplementDef object at 0x7fd8f2233350>]",
        "[<ivy.ivy_ast.MixinBeforeDef object at 0x7fd8f342ab50>, <ivy.ivy_ast.MixinAfterDef object at 0x7fd8f3305c10>, <ivy.ivy_ast.MixinImplementDef object at 0x7fd8f3320b90>]",
        "[<ivy.ivy_ast.MixinBeforeDef object at 0x7fd8f3338c90>, <ivy.ivy_ast.MixinAfterDef object at 0x7fd8f331d210>, <ivy.ivy_ast.MixinImplementDef object at 0x7fd8f332c2d0>]",
        "[<ivy.ivy_ast.MixinBeforeDef object at 0x7fd8f2e8b8d0>, <ivy.ivy_ast.MixinAfterDef object at 0x7fd8f2e80090>]",
        "[<ivy.ivy_ast.MixinImplementDef object at 0x7fd8f3145390>]",
        "[<ivy.ivy_ast.MixinImplementDef object at 0x7fd8f3379f10>]",
        "[<ivy.ivy_ast.MixinBeforeDef object at 0x7fd8f11d6150>, <ivy.ivy_ast.MixinAfterDef object at 0x7fd8f11df450>, <ivy.ivy_ast.MixinImplementDef object at 0x7fd8f11e2f90>]",
        "[<ivy.ivy_ast.MixinImplementDef object at 0x7fd8f21d9e90>]",
        "[<ivy.ivy_ast.MixinImplementDef object at 0x7fd8f160ee10>]",
        "[<ivy.ivy_ast.MixinImplementDef object at 0x7fd8f1bbc610>]",
        "[<ivy.ivy_ast.MixinImplementDef object at 0x7fd8f26598d0>]",
        "[<ivy.ivy_ast.MixinImplementDef object at 0x7fd8f32f41d0>]",
        "[<ivy.ivy_ast.MixinBeforeDef object at 0x7fd8f2705510>, <ivy.ivy_ast.MixinAfterDef object at 0x7fd8f2705890>, <ivy.ivy_ast.MixinImplementDef object at 0x7fd8f2708910>]",
        "[<ivy.ivy_ast.MixinBeforeDef object at 0x7fd8f1435cd0>, <ivy.ivy_ast.MixinAfterDef object at 0x7fd8f13dfc50>, <ivy.ivy_ast.MixinImplementDef object at 0x7fd8f138bd50>]",
        "[<ivy.ivy_ast.MixinImplementDef object at 0x7fd8f13fc550>]",
        "[<ivy.ivy_ast.MixinImplementDef object at 0x7fd8f3371750>]",
        "[<ivy.ivy_ast.MixinImplementDef object at 0x7fd8f2dabd10>]",
        "[<ivy.ivy_ast.MixinBeforeDef object at 0x7fd8f2c3fcd0>, <ivy.ivy_ast.MixinAfterDef object at 0x7fd8f2ca1610>, <ivy.ivy_ast.MixinImplementDef object at 0x7fd8f2c63a90>]",
        "[<ivy.ivy_ast.MixinBeforeDef object at 0x7fd8f1ff7b10>, <ivy.ivy_ast.MixinAfterDef object at 0x7fd8f1f97610>]",
        "[<ivy.ivy_ast.MixinImplementDef object at 0x7fd8f1129890>]",
        "[<ivy.ivy_ast.MixinAfterDef object at 0x7fd8f1c22f50>, <ivy.ivy_ast.MixinImplementDef object at 0x7fd8f1c249d0>]",
        "[<ivy.ivy_ast.MixinImplementDef object at 0x7fd8f261f710>]",
        "[<ivy.ivy_ast.MixinBeforeDef object at 0x7fd8f31e7b90>, <ivy.ivy_ast.MixinAfterDef object at 0x7fd8f3236fd0>, <ivy.ivy_ast.MixinImplementDef object at 0x7fd8f31f66d0>]",
        "[<ivy.ivy_ast.MixinImplementDef object at 0x7fd8f2db54d0>]",
        "[<ivy.ivy_ast.MixinBeforeDef object at 0x7fd8f2a99d10>, <ivy.ivy_ast.MixinAfterDef object at 0x7fd8f2a3b390>, <ivy.ivy_ast.MixinImplementDef object at 0x7fd8f2ae81d0>]",
        "[<ivy.ivy_ast.MixinAfterDef object at 0x7fd8f2dd6350>, <ivy.ivy_ast.MixinImplementDef object at 0x7fd8f2dc1b90>]",
        "[<ivy.ivy_ast.MixinAfterDef object at 0x7fd8f18375d0>, <ivy.ivy_ast.MixinImplementDef object at 0x7fd8f1b23410>]",
        "[<ivy.ivy_ast.MixinImplementDef object at 0x7fd8f1d88790>]",
        "[<ivy.ivy_ast.MixinAfterDef object at 0x7fd8f2ada090>, <ivy.ivy_ast.MixinImplementDef object at 0x7fd8f2a8ae50>]",
        "[<ivy.ivy_ast.MixinAfterDef object at 0x7fd8f14a98d0>, <ivy.ivy_ast.MixinImplementDef object at 0x7fd8f1421ad0>]",
        "[<ivy.ivy_ast.MixinImplementDef object at 0x7fd8f23ed850>]",
        "[<ivy.ivy_ast.MixinImplementDef object at 0x7fd8f14bcc10>]",
        "[<ivy.ivy_ast.MixinBeforeDef object at 0x7fd8f2c3f290>, <ivy.ivy_ast.MixinAfterDef object at 0x7fd8f2c42f90>, <ivy.ivy_ast.MixinImplementDef object at 0x7fd8f2c59b90>]",
        "[<ivy.ivy_ast.MixinAfterDef object at 0x7fd8f1dcb590>, <ivy.ivy_ast.MixinImplementDef object at 0x7fd8f1d7ed90>]",
        "[<ivy.ivy_ast.MixinBeforeDef object at 0x7fd8f2778a50>, <ivy.ivy_ast.MixinAfterDef object at 0x7fd8f2778510>, <ivy.ivy_ast.MixinImplementDef object at 0x7fd8f2712f90>]",
        "[<ivy.ivy_ast.MixinAfterDef object at 0x7fd8f1345410>, <ivy.ivy_ast.MixinImplementDef object at 0x7fd8f139a9d0>]",
        "[<ivy.ivy_ast.MixinImplementDef object at 0x7fd8f160eb90>]",
        "[<ivy.ivy_ast.MixinImplementDef object at 0x7fd8f16e5150>]",
        "[<ivy.ivy_ast.MixinBeforeDef object at 0x7fd8f2392190>, <ivy.ivy_ast.MixinAfterDef object at 0x7fd8f24868d0>, <ivy.ivy_ast.MixinImplementDef object at 0x7fd8f29b6750>]",
        "[<ivy.ivy_ast.MixinImplementDef object at 0x7fd8f11618d0>]",
        "[<ivy.ivy_ast.MixinImplementDef object at 0x7fd8f1dc2990>]",
        "[<ivy.ivy_ast.MixinBeforeDef object at 0x7fd8f16cf390>, <ivy.ivy_ast.MixinAfterDef object at 0x7fd8f16db750>, <ivy.ivy_ast.MixinImplementDef object at 0x7fd8f167f290>]",
        "[<ivy.ivy_ast.MixinBeforeDef object at 0x7fd8f288e190>, <ivy.ivy_ast.MixinAfterDef object at 0x7fd8f28f7390>, <ivy.ivy_ast.MixinImplementDef object at 0x7fd8f288b510>]",
        "[<ivy.ivy_ast.MixinBeforeDef object at 0x7fd8f2ef8b90>, <ivy.ivy_ast.MixinAfterDef object at 0x7fd8f2f79450>, <ivy.ivy_ast.MixinImplementDef object at 0x7fd8f3176f90>]",
        "[<ivy.ivy_ast.MixinImplementDef object at 0x7fd8f22f8510>]",
        "[<ivy.ivy_ast.MixinBeforeDef object at 0x7fd8f3247050>, <ivy.ivy_ast.MixinAfterDef object at 0x7fd8f322a150>]",
        "[<ivy.ivy_ast.MixinImplementDef object at 0x7fd8f142d250>]",
        "[<ivy.ivy_ast.MixinImplementDef object at 0x7fd8f25575d0>]",
        "[<ivy.ivy_ast.MixinAfterDef object at 0x7fd8f15ce390>]",
        "[<ivy.ivy_ast.MixinImplementDef object at 0x7fd8f2844e10>]",
        "[<ivy.ivy_ast.MixinImplementDef object at 0x7fd8f1c24a90>]",
        "[<ivy.ivy_ast.MixinAfterDef object at 0x7fd8f2197b50>, <ivy.ivy_ast.MixinImplementDef object at 0x7fd8f21afd90>]",
        "[<ivy.ivy_ast.MixinImplementDef object at 0x7fd8f1e8c050>]",
        "[<ivy.ivy_ast.MixinBeforeDef object at 0x7fd8f269f210>, <ivy.ivy_ast.MixinAfterDef object at 0x7fd8f2729510>, <ivy.ivy_ast.MixinImplementDef object at 0x7fd8f269d450>]",
        "[<ivy.ivy_ast.MixinAfterDef object at 0x7fd8f259c110>, <ivy.ivy_ast.MixinImplementDef object at 0x7fd8f25b7d10>]",
        "[<ivy.ivy_ast.MixinImplementDef object at 0x7fd8f21ba9d0>]",
        "[<ivy.ivy_ast.MixinBeforeDef object at 0x7fd8f20ac990>, <ivy.ivy_ast.MixinAfterDef object at 0x7fd8f201ee50>, <ivy.ivy_ast.MixinImplementDef object at 0x7fd8f2029250>]",
        "[<ivy.ivy_ast.MixinAfterDef object at 0x7fd8f310f250>]",
        "[<ivy.ivy_ast.MixinAfterDef object at 0x7fd8f28c8a90>, <ivy.ivy_ast.MixinImplementDef object at 0x7fd8f291a750>]",
        "[<ivy.ivy_ast.MixinAfterDef object at 0x7fd8f22d51d0>, <ivy.ivy_ast.MixinImplementDef object at 0x7fd8f22d7450>]",
        "[<ivy.ivy_ast.MixinImplementDef object at 0x7fd8f2189790>]",
        "[<ivy.ivy_ast.MixinImplementDef object at 0x7fd8f22bb7d0>]",
        "[<ivy.ivy_ast.MixinBeforeDef object at 0x7fd8f2d83610>, <ivy.ivy_ast.MixinAfterDef object at 0x7fd8f2d863d0>, <ivy.ivy_ast.MixinImplementDef object at 0x7fd8f2da77d0>]",
        "[<ivy.ivy_ast.MixinImplementDef object at 0x7fd8f2760190>]",
        "[<ivy.ivy_ast.MixinBeforeDef object at 0x7fd8f146e790>, <ivy.ivy_ast.MixinAfterDef object at 0x7fd8f1470e10>, <ivy.ivy_ast.MixinImplementDef object at 0x7fd8f14664d0>]",
        "[<ivy.ivy_ast.MixinImplementDef object at 0x7fd8f2616c90>]",
        "[<ivy.ivy_ast.MixinAfterDef object at 0x7fd8f15c6410>]",
        "[<ivy.ivy_ast.MixinAfterDef object at 0x7fd8f32c3ad0>, <ivy.ivy_ast.MixinImplementDef object at 0x7fd8f32dfa90>]",
        "[<ivy.ivy_ast.MixinBeforeDef object at 0x7fd8f24fba50>, <ivy.ivy_ast.MixinAfterDef object at 0x7fd8f2565250>, <ivy.ivy_ast.MixinImplementDef object at 0x7fd8f2572fd0>]",
        "[<ivy.ivy_ast.MixinImplementDef object at 0x7fd8f10a9d50>]",
        "[<ivy.ivy_ast.MixinImplementDef object at 0x7fd8f2b78b10>]",
        "[<ivy.ivy_ast.MixinBeforeDef object at 0x7fd8f2760450>, <ivy.ivy_ast.MixinAfterDef object at 0x7fd8f276c990>, <ivy.ivy_ast.MixinImplementDef object at 0x7fd8f27a9310>]",
        "[<ivy.ivy_ast.MixinAfterDef object at 0x7fd8f109a790>, <ivy.ivy_ast.MixinImplementDef object at 0x7fd8f10b3c10>]",
        "[<ivy.ivy_ast.MixinBeforeDef object at 0x7fd8f24a51d0>, <ivy.ivy_ast.MixinAfterDef object at 0x7fd8f210e650>, <ivy.ivy_ast.MixinImplementDef object at 0x7fd8f248db10>]",
        "[<ivy.ivy_ast.MixinImplementDef object at 0x7fd8f26adf10>]",
        "[<ivy.ivy_ast.MixinBeforeDef object at 0x7fd8f31444d0>, <ivy.ivy_ast.MixinAfterDef object at 0x7fd8f15efc50>]",
        "[<ivy.ivy_ast.MixinImplementDef object at 0x7fd8f16ab9d0>]",
        "[<ivy.ivy_ast.MixinBeforeDef object at 0x7fd8f1827210>, <ivy.ivy_ast.MixinAfterDef object at 0x7fd8f1815e50>, <ivy.ivy_ast.MixinImplementDef object at 0x7fd8f16fbf50>]",
        "[<ivy.ivy_ast.MixinAfterDef object at 0x7fd8f2df9450>, <ivy.ivy_ast.MixinImplementDef object at 0x7fd8f2da78d0>]",
        "[<ivy.ivy_ast.MixinImplementDef object at 0x7fd8f2d0bc90>]",
        "[<ivy.ivy_ast.MixinAfterDef object at 0x7fd8f2367dd0>, <ivy.ivy_ast.MixinImplementDef object at 0x7fd8f2372350>]",
        "[<ivy.ivy_ast.MixinAfterDef object at 0x7fd8f27920d0>, <ivy.ivy_ast.MixinImplementDef object at 0x7fd8f2792ed0>]",
        "[<ivy.ivy_ast.MixinBeforeDef object at 0x7fd8f21a0950>, <ivy.ivy_ast.MixinAfterDef object at 0x7fd8f21a0750>, <ivy.ivy_ast.MixinImplementDef object at 0x7fd8f21af350>]",
        "[<ivy.ivy_ast.MixinBeforeDef object at 0x7fd8f2392dd0>, <ivy.ivy_ast.MixinAfterDef object at 0x7fd8f294ead0>, <ivy.ivy_ast.MixinImplementDef object at 0x7fd8f23751d0>]",
        "[<ivy.ivy_ast.MixinBeforeDef object at 0x7fd8f25e1a90>, <ivy.ivy_ast.MixinAfterDef object at 0x7fd8f25ab810>, <ivy.ivy_ast.MixinImplementDef object at 0x7fd8f25a8e10>]",
        "[<ivy.ivy_ast.MixinImplementDef object at 0x7fd8f1de5e90>]",
        "[<ivy.ivy_ast.MixinAfterDef object at 0x7fd8f2930d90>, <ivy.ivy_ast.MixinImplementDef object at 0x7fd8f291a310>]",
        "[<ivy.ivy_ast.MixinAfterDef object at 0x7fd8f11f71d0>, <ivy.ivy_ast.MixinImplementDef object at 0x7fd8f11563d0>]",
        "[<ivy.ivy_ast.MixinAfterDef object at 0x7fd8f2f82fd0>, <ivy.ivy_ast.MixinImplementDef object at 0x7fd8f30704d0>]",
        "[<ivy.ivy_ast.MixinAfterDef object at 0x7fd8f17583d0>, <ivy.ivy_ast.MixinImplementDef object at 0x7fd8f1711310>]",
        "[<ivy.ivy_ast.MixinBeforeDef object at 0x7fd8f1e27650>, <ivy.ivy_ast.MixinAfterDef object at 0x7fd8f1dcb250>, <ivy.ivy_ast.MixinImplementDef object at 0x7fd8f1e38b10>]",
        "[<ivy.ivy_ast.MixinImplementDef object at 0x7fd8f2f9a850>]",
        "[<ivy.ivy_ast.MixinAfterDef object at 0x7fd8f11242d0>, <ivy.ivy_ast.MixinImplementDef object at 0x7fd8f1134590>]",
        "[<ivy.ivy_ast.MixinBeforeDef object at 0x7fd8f12bd650>, <ivy.ivy_ast.MixinAfterDef object at 0x7fd8f12e4590>, <ivy.ivy_ast.MixinImplementDef object at 0x7fd8f12ccbd0>]",
        "[<ivy.ivy_ast.MixinImplementDef object at 0x7fd8f3358750>]",
        "[<ivy.ivy_ast.MixinBeforeDef object at 0x7fd8f2b9ed10>, <ivy.ivy_ast.MixinAfterDef object at 0x7fd8f2ceee90>, <ivy.ivy_ast.MixinImplementDef object at 0x7fd8f2baa8d0>]",
        "[<ivy.ivy_ast.MixinImplementDef object at 0x7fd8f1156310>]",
        "[<ivy.ivy_ast.MixinBeforeDef object at 0x7fd8f30dc190>, <ivy.ivy_ast.MixinAfterDef object at 0x7fd8f2cc87d0>, <ivy.ivy_ast.MixinImplementDef object at 0x7fd8f2c15790>]",
        "[<ivy.ivy_ast.MixinImplementDef object at 0x7fd8f274aa10>]",
        "[<ivy.ivy_ast.MixinImplementDef object at 0x7fd8f1bd2050>]",
        "[<ivy.ivy_ast.MixinBeforeDef object at 0x7fd8f304ee50>, <ivy.ivy_ast.MixinAfterDef object at 0x7fd8f31fb110>, <ivy.ivy_ast.MixinBeforeDef object at 0x7fd8f136d410>]",
        "[<ivy.ivy_ast.MixinImplementDef object at 0x7fd8f2c1b6d0>]",
        "[<ivy.ivy_ast.MixinAfterDef object at 0x7fd8f2f400d0>, <ivy.ivy_ast.MixinImplementDef object at 0x7fd8f2f46f10>]",
        "[<ivy.ivy_ast.MixinImplementDef object at 0x7fd8f1bcf810>]",
        "[<ivy.ivy_ast.MixinAfterDef object at 0x7fd8f2f9a510>, <ivy.ivy_ast.MixinImplementDef object at 0x7fd8f2fb2c10>]",
        "[<ivy.ivy_ast.MixinImplementDef object at 0x7fd8f1f31a10>]",
        "[<ivy.ivy_ast.MixinImplementDef object at 0x7fd8f109ab50>]",
        "[<ivy.ivy_ast.MixinAfterDef object at 0x7fd8f276fe90>, <ivy.ivy_ast.MixinImplementDef object at 0x7fd8f2712990>]",
        "[<ivy.ivy_ast.MixinImplementDef object at 0x7fd8f1bec790>]",
        "[<ivy.ivy_ast.MixinImplementDef object at 0x7fd8f2208590>]",
        "[<ivy.ivy_ast.MixinAfterDef object at 0x7fd8f25a8390>, <ivy.ivy_ast.MixinImplementDef object at 0x7fd8f254ec10>]",
        "[<ivy.ivy_ast.MixinImplementDef object at 0x7fd8f1486c10>]",
        "[<ivy.ivy_ast.MixinAfterDef object at 0x7fd8f241a4d0>, <ivy.ivy_ast.MixinImplementDef object at 0x7fd8f2423810>]",
        "[<ivy.ivy_ast.MixinImplementDef object at 0x7fd8f153bfd0>]",
        "[<ivy.ivy_ast.MixinImplementDef object at 0x7fd8f23d5a10>]",
        "[<ivy.ivy_ast.MixinImplementDef object at 0x7fd8f14f5d50>]",
        "[<ivy.ivy_ast.MixinAfterDef object at 0x7fd8f2eeb350>, <ivy.ivy_ast.MixinImplementDef object at 0x7fd8f32abf50>]",
        "[<ivy.ivy_ast.MixinImplementDef object at 0x7fd8f15a9c90>]",
        "[<ivy.ivy_ast.MixinImplementDef object at 0x7fd8f146edd0>]",
        "[<ivy.ivy_ast.MixinImplementDef object at 0x7fd8f16a2410>]",
        "[<ivy.ivy_ast.MixinImplementDef object at 0x7fd8f1161ed0>]",
        "[<ivy.ivy_ast.MixinAfterDef object at 0x7fd8f291acd0>, <ivy.ivy_ast.MixinImplementDef object at 0x7fd8f292da50>]",
        "[<ivy.ivy_ast.MixinBeforeDef object at 0x7fd8f1bcffd0>, <ivy.ivy_ast.MixinAfterDef object at 0x7fd8f1bd2890>, <ivy.ivy_ast.MixinImplementDef object at 0x7fd8f1be9f10>]",
        "[<ivy.ivy_ast.MixinAfterDef object at 0x7fd8f2ab0650>, <ivy.ivy_ast.MixinImplementDef object at 0x7fd8f2a7af10>]",
        "[<ivy.ivy_ast.MixinAfterDef object at 0x7fd8f16775d0>, <ivy.ivy_ast.MixinImplementDef object at 0x7fd8f1604a10>]",
        "[<ivy.ivy_ast.MixinBeforeDef object at 0x7fd8f1083f50>, <ivy.ivy_ast.MixinAfterDef object at 0x7fd8f10eced0>, <ivy.ivy_ast.MixinImplementDef object at 0x7fd8f109d710>]",
        "[<ivy.ivy_ast.MixinImplementDef object at 0x7fd8f28df750>]",
        "[<ivy.ivy_ast.MixinBeforeDef object at 0x7fd8f1351290>]",
        "[<ivy.ivy_ast.MixinBeforeDef object at 0x7fd8f2dec1d0>, <ivy.ivy_ast.MixinAfterDef object at 0x7fd8f2e030d0>, <ivy.ivy_ast.MixinImplementDef object at 0x7fd8f2da7190>]",
        "[<ivy.ivy_ast.MixinAfterDef object at 0x7fd8f2642c10>, <ivy.ivy_ast.MixinImplementDef object at 0x7fd8f2670a90>]",
        "[<ivy.ivy_ast.MixinAfterDef object at 0x7fd8f176c250>, <ivy.ivy_ast.MixinImplementDef object at 0x7fd8f1704190>]",
        "[<ivy.ivy_ast.MixinBeforeDef object at 0x7fd8f2c4d0d0>, <ivy.ivy_ast.MixinAfterDef object at 0x7fd8f2c0e810>, <ivy.ivy_ast.MixinAfterDef object at 0x7fd8f14a7810>]",
        "[<ivy.ivy_ast.MixinAfterDef object at 0x7fd8f2790a50>, <ivy.ivy_ast.MixinImplementDef object at 0x7fd8f2756550>]",
        "[<ivy.ivy_ast.MixinAfterDef object at 0x7fd8f2233bd0>, <ivy.ivy_ast.MixinImplementDef object at 0x7fd8f294e990>]",
        "[<ivy.ivy_ast.MixinImplementDef object at 0x7fd8f20afcd0>]",
        "[<ivy.ivy_ast.MixinBeforeDef object at 0x7fd8f3494610>, <ivy.ivy_ast.MixinAfterDef object at 0x7fd8f346ead0>, <ivy.ivy_ast.MixinImplementDef object at 0x7fd8f3342190>]",
        "[<ivy.ivy_ast.MixinImplementDef object at 0x7fd8f10ca1d0>]",
        "[<ivy.ivy_ast.MixinImplementDef object at 0x7fd8f16a2190>]",
        "[<ivy.ivy_ast.MixinAfterDef object at 0x7fd8f11400d0>, <ivy.ivy_ast.MixinImplementDef object at 0x7fd8f11a5250>]",
        "[<ivy.ivy_ast.MixinAfterDef object at 0x7fd8f1231290>, <ivy.ivy_ast.MixinImplementDef object at 0x7fd8f11dfad0>]",
        "[<ivy.ivy_ast.MixinAfterDef object at 0x7fd8f253f8d0>, <ivy.ivy_ast.MixinImplementDef object at 0x7fd8f2529210>]",
        "[<ivy.ivy_ast.MixinBeforeDef object at 0x7fd8f11d1a90>, <ivy.ivy_ast.MixinAfterDef object at 0x7fd8f122ff50>, <ivy.ivy_ast.MixinImplementDef object at 0x7fd8f1224b90>]",
        "[<ivy.ivy_ast.MixinBeforeDef object at 0x7fd8f3220f10>, <ivy.ivy_ast.MixinAfterDef object at 0x7fd8f307b2d0>, <ivy.ivy_ast.MixinBeforeDef object at 0x7fd8f12fbfd0>]",
        "[<ivy.ivy_ast.MixinAfterDef object at 0x7fd8f27f2a50>, <ivy.ivy_ast.MixinImplementDef object at 0x7fd8f279c8d0>]",
        "[<ivy.ivy_ast.MixinAfterDef object at 0x7fd8f2235410>, <ivy.ivy_ast.MixinImplementDef object at 0x7fd8f221fa10>]",
        "[<ivy.ivy_ast.MixinAfterDef object at 0x7fd8f26a8a10>, <ivy.ivy_ast.MixinImplementDef object at 0x7fd8f2683a10>]",
        "[<ivy.ivy_ast.MixinBeforeDef object at 0x7fd8f23e3510>, <ivy.ivy_ast.MixinAfterDef object at 0x7fd8f23d7150>, <ivy.ivy_ast.MixinImplementDef object at 0x7fd8f29a9610>]",
        "[<ivy.ivy_ast.MixinAfterDef object at 0x7fd8f225a150>, <ivy.ivy_ast.MixinImplementDef object at 0x7fd8f22eea10>]",
        "[<ivy.ivy_ast.MixinBeforeDef object at 0x7fd8f1249dd0>, <ivy.ivy_ast.MixinAfterDef object at 0x7fd8f12537d0>, <ivy.ivy_ast.MixinImplementDef object at 0x7fd8f1247190>]",
        "[<ivy.ivy_ast.MixinAfterDef object at 0x7fd8f1083850>, <ivy.ivy_ast.MixinImplementDef object at 0x7fd8f1091b50>]",
        "[<ivy.ivy_ast.MixinImplementDef object at 0x7fd8f1d88810>]",
        "[<ivy.ivy_ast.MixinAfterDef object at 0x7fd8f2ba2810>, <ivy.ivy_ast.MixinImplementDef object at 0x7fd8f2bae110>]",
        "[<ivy.ivy_ast.MixinAfterDef object at 0x7fd8f10e9590>, <ivy.ivy_ast.MixinImplementDef object at 0x7fd8f110dd90>]",
        "[<ivy.ivy_ast.MixinImplementDef object at 0x7fd8f2284c10>]",
        "[<ivy.ivy_ast.MixinBeforeDef object at 0x7fd8f2c58d50>, <ivy.ivy_ast.MixinAfterDef object at 0x7fd8f2e8bfd0>, <ivy.ivy_ast.MixinImplementDef object at 0x7fd8f2d31fd0>]",
        "[<ivy.ivy_ast.MixinImplementDef object at 0x7fd8f1da0110>]",
        "[<ivy.ivy_ast.MixinAfterDef object at 0x7fd8f29a9510>, <ivy.ivy_ast.MixinImplementDef object at 0x7fd8f26ddc90>]",
        "[<ivy.ivy_ast.MixinAfterDef object at 0x7fd8f1152650>, <ivy.ivy_ast.MixinImplementDef object at 0x7fd8f116b550>]",
        "[<ivy.ivy_ast.MixinAfterDef object at 0x7fd8f2ee1050>, <ivy.ivy_ast.MixinImplementDef object at 0x7fd8f3207490>]",
        "[<ivy.ivy_ast.MixinAfterDef object at 0x7fd8f1defc50>, <ivy.ivy_ast.MixinImplementDef object at 0x7fd8f1d7e550>]",
        "[<ivy.ivy_ast.MixinBeforeDef object at 0x7fd8f2ae5750>, <ivy.ivy_ast.MixinAfterDef object at 0x7fd8f2ae5f10>, <ivy.ivy_ast.MixinImplementDef object at 0x7fd8f2af3dd0>]",
        "[<ivy.ivy_ast.MixinBeforeDef object at 0x7fd8f14ac910>, <ivy.ivy_ast.MixinAfterDef object at 0x7fd8f1443850>, <ivy.ivy_ast.MixinImplementDef object at 0x7fd8f1448090>]",
        "[<ivy.ivy_ast.MixinBeforeDef object at 0x7fd8f26ad790>, <ivy.ivy_ast.MixinAfterDef object at 0x7fd8f26b3bd0>, <ivy.ivy_ast.MixinImplementDef object at 0x7fd8f264d590>]",
        "[<ivy.ivy_ast.MixinAfterDef object at 0x7fd8f1576c10>]",
        "[<ivy.ivy_ast.MixinBeforeDef object at 0x7fd8f1e35f10>, <ivy.ivy_ast.MixinAfterDef object at 0x7fd8f1e27d50>, <ivy.ivy_ast.MixinImplementDef object at 0x7fd8f1d7c990>]",
        "[<ivy.ivy_ast.MixinImplementDef object at 0x7fd8f14f9d10>]",
        "[<ivy.ivy_ast.MixinImplementDef object at 0x7fd8f271c9d0>]",
        "[<ivy.ivy_ast.MixinAfterDef object at 0x7fd8f328b310>]",
        "[<ivy.ivy_ast.MixinAfterDef object at 0x7fd8f12f80d0>, <ivy.ivy_ast.MixinImplementDef object at 0x7fd8f1297f50>]",
        "[<ivy.ivy_ast.MixinAfterDef object at 0x7fd8f21af5d0>, <ivy.ivy_ast.MixinImplementDef object at 0x7fd8f214ed90>]",
        "[<ivy.ivy_ast.MixinAfterDef object at 0x7fd8f2f04e10>, <ivy.ivy_ast.MixinImplementDef object at 0x7fd8f2fb4b50>]",
        "[<ivy.ivy_ast.MixinAfterDef object at 0x7fd8f226ed90>, <ivy.ivy_ast.MixinImplementDef object at 0x7fd8f21085d0>]",
        "[<ivy.ivy_ast.MixinBeforeDef object at 0x7fd8f13e7d10>, <ivy.ivy_ast.MixinAfterDef object at 0x7fd8f13e7b10>, <ivy.ivy_ast.MixinImplementDef object at 0x7fd8f13f6c10>]",
        "[<ivy.ivy_ast.MixinBeforeDef object at 0x7fd8f2284290>, <ivy.ivy_ast.MixinAfterDef object at 0x7fd8f21fde50>]",
        "[<ivy.ivy_ast.MixinImplementDef object at 0x7fd8f2d43810>]",
        "[<ivy.ivy_ast.MixinBeforeDef object at 0x7fd8f1435ed0>, <ivy.ivy_ast.MixinAfterDef object at 0x7fd8f13dc110>, <ivy.ivy_ast.MixinImplementDef object at 0x7fd8f13e7190>]",
        "[<ivy.ivy_ast.MixinBeforeDef object at 0x7fd8f2056650>, <ivy.ivy_ast.MixinAfterDef object at 0x7fd8f20ac450>, <ivy.ivy_ast.MixinImplementDef object at 0x7fd8f2003890>]",
        "[<ivy.ivy_ast.MixinBeforeDef object at 0x7fd8f22e3190>, <ivy.ivy_ast.MixinAfterDef object at 0x7fd8f22d7c50>, <ivy.ivy_ast.MixinImplementDef object at 0x7fd8f22ec150>]",
        "[<ivy.ivy_ast.MixinImplementDef object at 0x7fd8f2a5f9d0>]",
        "[<ivy.ivy_ast.MixinImplementDef object at 0x7fd8f2c4e390>]",
        "[<ivy.ivy_ast.MixinBeforeDef object at 0x7fd8f1224810>, <ivy.ivy_ast.MixinAfterDef object at 0x7fd8f123a7d0>, <ivy.ivy_ast.MixinImplementDef object at 0x7fd8f12196d0>]",
        "[<ivy.ivy_ast.MixinImplementDef object at 0x7fd8f2c3fe10>]",
        "[<ivy.ivy_ast.MixinImplementDef object at 0x7fd8f332cf10>]",
        "[<ivy.ivy_ast.MixinImplementDef object at 0x7fd8f2fa8790>]",
        "[<ivy.ivy_ast.MixinImplementDef object at 0x7fd8f23bdc90>]",
        "[<ivy.ivy_ast.MixinAfterDef object at 0x7fd8f3108a90>]",
        "[<ivy.ivy_ast.MixinImplementDef object at 0x7fd8f22bb210>]",
        "[<ivy.ivy_ast.MixinBeforeDef object at 0x7fd8f30b9f50>, <ivy.ivy_ast.MixinAfterDef object at 0x7fd8f30a0b10>, <ivy.ivy_ast.MixinBeforeDef object at 0x7fd8f13693d0>]",
        "[<ivy.ivy_ast.MixinBeforeDef object at 0x7fd8f3147c50>, <ivy.ivy_ast.MixinAfterDef object at 0x7fd8f31089d0>]",
        "[<ivy.ivy_ast.MixinAfterDef object at 0x7fd8f142ba50>, <ivy.ivy_ast.MixinImplementDef object at 0x7fd8f138bf50>]",
        "[<ivy.ivy_ast.MixinBeforeDef object at 0x7fd8f2304e10>, <ivy.ivy_ast.MixinAfterDef object at 0x7fd8f230c9d0>, <ivy.ivy_ast.MixinImplementDef object at 0x7fd8f232f2d0>]",
        "[<ivy.ivy_ast.MixinImplementDef object at 0x7fd8f205f450>]",
        "[<ivy.ivy_ast.MixinAfterDef object at 0x7fd8f30cf950>, <ivy.ivy_ast.MixinImplementDef object at 0x7fd8f3088710>]",
        "[<ivy.ivy_ast.MixinAfterDef object at 0x7fd8f1caad50>, <ivy.ivy_ast.MixinImplementDef object at 0x7fd8f1c777d0>]",
        "[<ivy.ivy_ast.MixinBeforeDef object at 0x7fd8f28ead50>, <ivy.ivy_ast.MixinAfterDef object at 0x7fd8f2898810>, <ivy.ivy_ast.MixinImplementDef object at 0x7fd8f28af710>]",
        "[<ivy.ivy_ast.MixinAfterDef object at 0x7fd8f2bfd490>, <ivy.ivy_ast.MixinImplementDef object at 0x7fd8f2cd4810>]",
        "[<ivy.ivy_ast.MixinBeforeDef object at 0x7fd8f2fd35d0>, <ivy.ivy_ast.MixinAfterDef object at 0x7fd8f2fc9890>, <ivy.ivy_ast.MixinBeforeDef object at 0x7fd8f1379950>]",
        "[<ivy.ivy_ast.MixinBeforeDef object at 0x7fd8f1284590>, <ivy.ivy_ast.MixinAfterDef object at 0x7fd8f128dcd0>, <ivy.ivy_ast.MixinImplementDef object at 0x7fd8f12a5550>]",
        "[<ivy.ivy_ast.MixinImplementDef object at 0x7fd8f2c70e50>]",
        "[<ivy.ivy_ast.MixinImplementDef object at 0x7fd8f13d3cd0>]",
        "[<ivy.ivy_ast.MixinImplementDef object at 0x7fd8f22be5d0>]",
        "[<ivy.ivy_ast.MixinBeforeDef object at 0x7fd8f1277c50>, <ivy.ivy_ast.MixinAfterDef object at 0x7fd8f1273f90>, <ivy.ivy_ast.MixinImplementDef object at 0x7fd8f120e410>]",
        "[<ivy.ivy_ast.MixinBeforeDef object at 0x7fd8f2ef8850>, <ivy.ivy_ast.MixinAfterDef object at 0x7fd8f2e809d0>, <ivy.ivy_ast.MixinImplementDef object at 0x7fd8f31c0b10>]",
        "[<ivy.ivy_ast.MixinAfterDef object at 0x7fd8f1535c90>]",
        "[<ivy.ivy_ast.MixinImplementDef object at 0x7fd8f29b3c10>]",
        "[<ivy.ivy_ast.MixinBeforeDef object at 0x7fd8f1c1fc90>, <ivy.ivy_ast.MixinAfterDef object at 0x7fd8f1c69a10>, <ivy.ivy_ast.MixinImplementDef object at 0x7fd8f1c2d850>]",
        "[<ivy.ivy_ast.MixinBeforeDef object at 0x7fd8f254e690>, <ivy.ivy_ast.MixinAfterDef object at 0x7fd8f2506550>, <ivy.ivy_ast.MixinImplementDef object at 0x7fd8f2509810>]",
        "[<ivy.ivy_ast.MixinAfterDef object at 0x7fd8f218bcd0>, <ivy.ivy_ast.MixinImplementDef object at 0x7fd8f215e790>]",
        "[<ivy.ivy_ast.MixinImplementDef object at 0x7fd8f14da1d0>]",
        "[<ivy.ivy_ast.MixinBeforeDef object at 0x7fd8f1827190>, <ivy.ivy_ast.MixinAfterDef object at 0x7fd8f1c06390>, <ivy.ivy_ast.MixinImplementDef object at 0x7fd8f18663d0>]",
        "[<ivy.ivy_ast.MixinBeforeDef object at 0x7fd8f25b2e50>, <ivy.ivy_ast.MixinAfterDef object at 0x7fd8f25b2f90>, <ivy.ivy_ast.MixinImplementDef object at 0x7fd8f254ee10>]",
        "[<ivy.ivy_ast.MixinAfterDef object at 0x7fd8f23192d0>, <ivy.ivy_ast.MixinImplementDef object at 0x7fd8f2304c50>]",
        "[<ivy.ivy_ast.MixinImplementDef object at 0x7fd8f1508950>]",
        "[<ivy.ivy_ast.MixinImplementDef object at 0x7fd8f1c9bd50>]",
        "[<ivy.ivy_ast.MixinAfterDef object at 0x7fd8f11d11d0>, <ivy.ivy_ast.MixinImplementDef object at 0x7fd8f11f7b50>]",
        "[<ivy.ivy_ast.MixinBeforeDef object at 0x7fd8f3090a90>, <ivy.ivy_ast.MixinAfterDef object at 0x7fd8f31fb5d0>]",
        "[<ivy.ivy_ast.MixinBeforeDef object at 0x7fd8f11a5c50>, <ivy.ivy_ast.MixinAfterDef object at 0x7fd8f113b250>, <ivy.ivy_ast.MixinImplementDef object at 0x7fd8f1156210>]",
        "[<ivy.ivy_ast.MixinBeforeDef object at 0x7fd8f2e80850>, <ivy.ivy_ast.MixinAfterDef object at 0x7fd8f2e51b50>, <ivy.ivy_ast.MixinBeforeDef object at 0x7fd8f1371d10>]",
        "[<ivy.ivy_ast.MixinImplementDef object at 0x7fd8f2565e50>]",
        "[<ivy.ivy_ast.MixinImplementDef object at 0x7fd8f28be810>]",
        "[<ivy.ivy_ast.MixinAfterDef object at 0x7fd8f28c8290>, <ivy.ivy_ast.MixinImplementDef object at 0x7fd8f28d1b90>]",
        "[<ivy.ivy_ast.MixinImplementDef object at 0x7fd8f28f9950>]",
        "[<ivy.ivy_ast.MixinAfterDef object at 0x7fd8f2d71a90>, <ivy.ivy_ast.MixinImplementDef object at 0x7fd8f2d01350>]",
        "[<ivy.ivy_ast.MixinAfterDef object at 0x7fd8f2428210>, <ivy.ivy_ast.MixinImplementDef object at 0x7fd8f23c0690>]",
        "[<ivy.ivy_ast.MixinBeforeDef object at 0x7fd8f25fd490>, <ivy.ivy_ast.MixinAfterDef object at 0x7fd8f25fd590>, <ivy.ivy_ast.MixinImplementDef object at 0x7fd8f260ac90>]",
        "[<ivy.ivy_ast.MixinAfterDef object at 0x7fd8f2432550>, <ivy.ivy_ast.MixinImplementDef object at 0x7fd8f23c9ed0>]",
        "[<ivy.ivy_ast.MixinImplementDef object at 0x7fd8f1e93990>]",
        "[<ivy.ivy_ast.MixinImplementDef object at 0x7fd8f2f23b90>]",
        "[<ivy.ivy_ast.MixinAfterDef object at 0x7fd8f16e5310>, <ivy.ivy_ast.MixinImplementDef object at 0x7fd8f168be90>]",
        "[<ivy.ivy_ast.MixinBeforeDef object at 0x7fd8f304bd10>, <ivy.ivy_ast.MixinAfterDef object at 0x7fd8f322ad10>, <ivy.ivy_ast.MixinBeforeDef object at 0x7fd8f130ed10>]",
        "[<ivy.ivy_ast.MixinAfterDef object at 0x7fd8f116e790>, <ivy.ivy_ast.MixinImplementDef object at 0x7fd8f10c8f50>]",
        "[<ivy.ivy_ast.MixinAfterDef object at 0x7fd8f33e5110>, <ivy.ivy_ast.MixinImplementDef object at 0x7fd8f3361850>]",
        "[<ivy.ivy_ast.MixinBeforeDef object at 0x7fd8f23bd290>, <ivy.ivy_ast.MixinAfterDef object at 0x7fd8f23bd190>, <ivy.ivy_ast.MixinImplementDef object at 0x7fd8f23d7a10>]",
        "[<ivy.ivy_ast.MixinAfterDef object at 0x7fd8f16c3850>, <ivy.ivy_ast.MixinImplementDef object at 0x7fd8f1720a10>]",
        "[<ivy.ivy_ast.MixinBeforeDef object at 0x7fd8f3085250>, <ivy.ivy_ast.MixinAfterDef object at 0x7fd8f3070510>]",
        "[<ivy.ivy_ast.MixinImplementDef object at 0x7fd8f1758850>]",
        "[<ivy.ivy_ast.MixinImplementDef object at 0x7fd8f2c27a90>]",
        "[<ivy.ivy_ast.MixinBeforeDef object at 0x7fd8f2033350>, <ivy.ivy_ast.MixinAfterDef object at 0x7fd8f201e5d0>, <ivy.ivy_ast.MixinImplementDef object at 0x7fd8f1fbf310>]",
        "[<ivy.ivy_ast.MixinImplementDef object at 0x7fd8f15029d0>]",
        "[<ivy.ivy_ast.MixinAfterDef object at 0x7fd8f2511990>, <ivy.ivy_ast.MixinImplementDef object at 0x7fd8f25114d0>]",
        "[<ivy.ivy_ast.MixinImplementDef object at 0x7fd8f1bf57d0>]",
        "[<ivy.ivy_ast.MixinBeforeDef object at 0x7fd8f217d510>, <ivy.ivy_ast.MixinAfterDef object at 0x7fd8f21949d0>, <ivy.ivy_ast.MixinImplementDef object at 0x7fd8f21e4790>]",
        "[<ivy.ivy_ast.MixinAfterDef object at 0x7fd8f30328d0>, <ivy.ivy_ast.MixinImplementDef object at 0x7fd8f322a8d0>]",
        "[<ivy.ivy_ast.MixinAfterDef object at 0x7fd8f21e6190>, <ivy.ivy_ast.MixinImplementDef object at 0x7fd8f2197310>]",
        "[<ivy.ivy_ast.MixinAfterDef object at 0x7fd8f2d19a90>, <ivy.ivy_ast.MixinImplementDef object at 0x7fd8f2c1b4d0>]",
        "[<ivy.ivy_ast.MixinBeforeDef object at 0x7fd8f2827a50>, <ivy.ivy_ast.MixinAfterDef object at 0x7fd8f28246d0>, <ivy.ivy_ast.MixinAfterDef object at 0x7fd8f14f93d0>, <ivy.ivy_ast.MixinBeforeDef object at 0x7fd8f135a450>]",
        "[<ivy.ivy_ast.MixinImplementDef object at 0x7fd8f20fd950>]",
        "[<ivy.ivy_ast.MixinImplementDef object at 0x7fd8f151c390>]",
        "[<ivy.ivy_ast.MixinAfterDef object at 0x7fd8f2b44ed0>, <ivy.ivy_ast.MixinImplementDef object at 0x7fd8f2b75d90>]",
        "[<ivy.ivy_ast.MixinImplementDef object at 0x7fd8f12b97d0>]",
        "[<ivy.ivy_ast.MixinImplementDef object at 0x7fd8f176cfd0>]",
        "[<ivy.ivy_ast.MixinAfterDef object at 0x7fd8f2708810>, <ivy.ivy_ast.MixinImplementDef object at 0x7fd8f2729450>]",
        "[<ivy.ivy_ast.MixinBeforeDef object at 0x7fd8f21af150>, <ivy.ivy_ast.MixinAfterDef object at 0x7fd8f21a0150>, <ivy.ivy_ast.MixinImplementDef object at 0x7fd8f2151cd0>]",
        "[<ivy.ivy_ast.MixinAfterDef object at 0x7fd8f31a2750>, <ivy.ivy_ast.MixinImplementDef object at 0x7fd8f31bae90>]",
        "[<ivy.ivy_ast.MixinAfterDef object at 0x7fd8f1260f90>, <ivy.ivy_ast.MixinImplementDef object at 0x7fd8f1269810>]",
        "[<ivy.ivy_ast.MixinBeforeDef object at 0x7fd8f1bc6d50>]",
        "[<ivy.ivy_ast.MixinAfterDef object at 0x7fd8f26735d0>, <ivy.ivy_ast.MixinImplementDef object at 0x7fd8f2607fd0>]",
        "[<ivy.ivy_ast.MixinAfterDef object at 0x7fd8f25ffc10>, <ivy.ivy_ast.MixinImplementDef object at 0x7fd8f261f2d0>]",
        "[<ivy.ivy_ast.MixinAfterDef object at 0x7fd8f2f82f50>, <ivy.ivy_ast.MixinImplementDef object at 0x7fd8f2fdfb90>]",
        "[<ivy.ivy_ast.MixinAfterDef object at 0x7fd8f206a2d0>, <ivy.ivy_ast.MixinImplementDef object at 0x7fd8f206a550>]",
        "[<ivy.ivy_ast.MixinImplementDef object at 0x7fd8f2fb44d0>]",
        "[<ivy.ivy_ast.MixinBeforeDef object at 0x7fd8f27a6490>, <ivy.ivy_ast.MixinAfterDef object at 0x7fd8f2792490>, <ivy.ivy_ast.MixinImplementDef object at 0x7fd8f27b5c50>]",
        "[<ivy.ivy_ast.MixinBeforeDef object at 0x7fd8f2387850>, <ivy.ivy_ast.MixinAfterDef object at 0x7fd8f2385590>, <ivy.ivy_ast.MixinImplementDef object at 0x7fd8f2485390>]",
        "[<ivy.ivy_ast.MixinImplementDef object at 0x7fd8f1d4b350>]",
        "[<ivy.ivy_ast.MixinImplementDef object at 0x7fd8f147b5d0>]",
        "[<ivy.ivy_ast.MixinImplementDef object at 0x7fd8f15efd10>]",
        "[<ivy.ivy_ast.MixinImplementDef object at 0x7fd8f2143150>]",
        "[<ivy.ivy_ast.MixinAfterDef object at 0x7fd8f2712e90>, <ivy.ivy_ast.MixinImplementDef object at 0x7fd8f27bd450>]",
        "[<ivy.ivy_ast.MixinBeforeDef object at 0x7fd8f2f8fd90>, <ivy.ivy_ast.MixinAfterDef object at 0x7fd8f30fa450>, <ivy.ivy_ast.MixinImplementDef object at 0x7fd8f2fa84d0>]",
        "[<ivy.ivy_ast.MixinImplementDef object at 0x7fd8f14f9490>]",
        "[<ivy.ivy_ast.MixinAfterDef object at 0x7fd8f1777590>, <ivy.ivy_ast.MixinImplementDef object at 0x7fd8f1704ad0>]",
        "[<ivy.ivy_ast.MixinBeforeDef object at 0x7fd8f318c090>, <ivy.ivy_ast.MixinAfterDef object at 0x7fd8f31fbc90>, <ivy.ivy_ast.MixinImplementDef object at 0x7fd8f31b04d0>]",
        "[<ivy.ivy_ast.MixinImplementDef object at 0x7fd8f120e250>]",
        "[<ivy.ivy_ast.MixinAfterDef object at 0x7fd8f11dff50>, <ivy.ivy_ast.MixinImplementDef object at 0x7fd8f11ed8d0>]",
        "[<ivy.ivy_ast.MixinImplementDef object at 0x7fd8f2f0e410>]",
        "[<ivy.ivy_ast.MixinBeforeDef object at 0x7fd8f2f84e90>, <ivy.ivy_ast.MixinAfterDef object at 0x7fd8f2fd2d50>, <ivy.ivy_ast.MixinImplementDef object at 0x7fd8f2f927d0>]",
        "[<ivy.ivy_ast.MixinAfterDef object at 0x7fd8f1688ad0>, <ivy.ivy_ast.MixinImplementDef object at 0x7fd8f169f250>]",
        "[<ivy.ivy_ast.MixinBeforeDef object at 0x7fd8f2b3b3d0>, <ivy.ivy_ast.MixinAfterDef object at 0x7fd8f2b44dd0>, <ivy.ivy_ast.MixinImplementDef object at 0x7fd8f2b49790>]",
        "[<ivy.ivy_ast.MixinBeforeDef object at 0x7fd8f1091a50>, <ivy.ivy_ast.MixinAfterDef object at 0x7fd8f1091090>, <ivy.ivy_ast.MixinImplementDef object at 0x7fd8f10a9610>]",
        "[<ivy.ivy_ast.MixinBeforeDef object at 0x7fd8f24ed190>, <ivy.ivy_ast.MixinAfterDef object at 0x7fd8f2950650>, <ivy.ivy_ast.MixinImplementDef object at 0x7fd8f24e5790>]",
        "[<ivy.ivy_ast.MixinBeforeDef object at 0x7fd8f2909090>, <ivy.ivy_ast.MixinAfterDef object at 0x7fd8f2914c50>, <ivy.ivy_ast.MixinImplementDef object at 0x7fd8f292ded0>]",
        "[<ivy.ivy_ast.MixinBeforeDef object at 0x7fd8f1bc87d0>, <ivy.ivy_ast.MixinAfterDef object at 0x7fd8f1bcf590>, <ivy.ivy_ast.MixinImplementDef object at 0x7fd8f1c382d0>]",
        "[<ivy.ivy_ast.MixinImplementDef object at 0x7fd8f1513b90>]",
        "[<ivy.ivy_ast.MixinAfterDef object at 0x7fd8f276f9d0>, <ivy.ivy_ast.MixinImplementDef object at 0x7fd8f27b5810>]",
        "[<ivy.ivy_ast.MixinBeforeDef object at 0x7fd8f1a9a550>, <ivy.ivy_ast.MixinAfterDef object at 0x7fd8f1b40f50>, <ivy.ivy_ast.MixinImplementDef object at 0x7fd8f1a1ef10>]",
        "[<ivy.ivy_ast.MixinAfterDef object at 0x7fd8f15ead50>]",
        "[<ivy.ivy_ast.MixinAfterDef object at 0x7fd8f21e6510>, <ivy.ivy_ast.MixinImplementDef object at 0x7fd8f21e4e10>]",
        "[<ivy.ivy_ast.MixinBeforeDef object at 0x7fd8f262c090>, <ivy.ivy_ast.MixinAfterDef object at 0x7fd8f25d7950>, <ivy.ivy_ast.MixinImplementDef object at 0x7fd8f2557e90>]",
        "[<ivy.ivy_ast.MixinAfterDef object at 0x7fd8f28d5c90>, <ivy.ivy_ast.MixinImplementDef object at 0x7fd8f28eca10>]",
        "[<ivy.ivy_ast.MixinImplementDef object at 0x7fd8f1bdd890>]",
        "[<ivy.ivy_ast.MixinAfterDef object at 0x7fd8f2f79290>, <ivy.ivy_ast.MixinImplementDef object at 0x7fd8f2f1a090>]",
        "[<ivy.ivy_ast.MixinAfterDef object at 0x7fd8f24fd650>, <ivy.ivy_ast.MixinImplementDef object at 0x7fd8f2515b90>]",
        "[<ivy.ivy_ast.MixinAfterDef object at 0x7fd8f1c4a810>, <ivy.ivy_ast.MixinImplementDef object at 0x7fd8f1ade3d0>]",
        "[<ivy.ivy_ast.MixinBeforeDef object at 0x7fd8f2493f90>, <ivy.ivy_ast.MixinAfterDef object at 0x7fd8f2487890>, <ivy.ivy_ast.MixinAfterDef object at 0x7fd8f14ab750>]",
        "[<ivy.ivy_ast.MixinBeforeDef object at 0x7fd8f3108c90>, <ivy.ivy_ast.MixinAfterDef object at 0x7fd8f306eb10>, <ivy.ivy_ast.MixinBeforeDef object at 0x7fd8f135ef90>]",
        "[<ivy.ivy_ast.MixinBeforeDef object at 0x7fd8f2d43650>, <ivy.ivy_ast.MixinAfterDef object at 0x7fd8f2d5cad0>, <ivy.ivy_ast.MixinImplementDef object at 0x7fd8f2da7750>]",
        "[<ivy.ivy_ast.MixinBeforeDef object at 0x7fd8f30e6f10>, <ivy.ivy_ast.MixinAfterDef object at 0x7fd8f2ef5750>]",
        "[<ivy.ivy_ast.MixinImplementDef object at 0x7fd8f1bbc9d0>]",
        "[<ivy.ivy_ast.MixinBeforeDef object at 0x7fd8f291a290>, <ivy.ivy_ast.MixinAfterDef object at 0x7fd8f28bc410>, <ivy.ivy_ast.MixinImplementDef object at 0x7fd8f28ea490>]",
        "[<ivy.ivy_ast.MixinImplementDef object at 0x7fd8f217d610>]",
        "[<ivy.ivy_ast.MixinBeforeDef object at 0x7fd8f2da7250>, <ivy.ivy_ast.MixinAfterDef object at 0x7fd8f2d51a10>, <ivy.ivy_ast.MixinImplementDef object at 0x7fd8f2cfecd0>]",
        "[<ivy.ivy_ast.MixinAfterDef object at 0x7fd8f1a4bd10>, <ivy.ivy_ast.MixinImplementDef object at 0x7fd8f1c597d0>]",
        "[<ivy.ivy_ast.MixinImplementDef object at 0x7fd8f31d1a50>]",
        "[<ivy.ivy_ast.MixinAfterDef object at 0x7fd8f1269950>, <ivy.ivy_ast.MixinImplementDef object at 0x7fd8f12b9050>]",
        "[<ivy.ivy_ast.MixinAfterDef object at 0x7fd8f2ef5110>, <ivy.ivy_ast.MixinImplementDef object at 0x7fd8f30cbb90>]",
        "[<ivy.ivy_ast.MixinAfterDef object at 0x7fd8f288ea50>, <ivy.ivy_ast.MixinImplementDef object at 0x7fd8f289cbd0>]",
        "[<ivy.ivy_ast.MixinImplementDef object at 0x7fd8f2143c90>]",
        "[<ivy.ivy_ast.MixinImplementDef object at 0x7fd8f2a13890>]",
        "[<ivy.ivy_ast.MixinAfterDef object at 0x7fd8f2304650>, <ivy.ivy_ast.MixinImplementDef object at 0x7fd8f2319e90>]",
        "[<ivy.ivy_ast.MixinImplementDef object at 0x7fd8f31ba110>]",
        "[<ivy.ivy_ast.MixinAfterDef object at 0x7fd8f21d1a90>, <ivy.ivy_ast.MixinImplementDef object at 0x7fd8f21ef490>]",
        "[<ivy.ivy_ast.MixinBeforeDef object at 0x7fd8f1a6e150>, <ivy.ivy_ast.MixinAfterDef object at 0x7fd8f1a1e550>, <ivy.ivy_ast.MixinImplementDef object at 0x7fd8f1a47690>]",
        "[<ivy.ivy_ast.MixinAfterDef object at 0x7fd8f128d810>, <ivy.ivy_ast.MixinImplementDef object at 0x7fd8f12b0710>]",
        "[<ivy.ivy_ast.MixinBeforeDef object at 0x7fd8f2bb9ad0>, <ivy.ivy_ast.MixinAfterDef object at 0x7fd8f2b49f90>, <ivy.ivy_ast.MixinImplementDef object at 0x7fd8f2b6a390>]",
        "[<ivy.ivy_ast.MixinAfterDef object at 0x7fd8f2b46b90>, <ivy.ivy_ast.MixinImplementDef object at 0x7fd8f2b9e990>]",
        "[<ivy.ivy_ast.MixinBeforeDef object at 0x7fd8f31e0990>, <ivy.ivy_ast.MixinAfterDef object at 0x7fd8f31f6ad0>, <ivy.ivy_ast.MixinImplementDef object at 0x7fd8f31a6c90>]",
        "[<ivy.ivy_ast.MixinAfterDef object at 0x7fd8f3338150>, <ivy.ivy_ast.MixinImplementDef object at 0x7fd8f32dffd0>]",
        "[<ivy.ivy_ast.MixinImplementDef object at 0x7fd8f139a3d0>]",
        "[<ivy.ivy_ast.MixinImplementDef object at 0x7fd8f29500d0>]",
        "[<ivy.ivy_ast.MixinImplementDef object at 0x7fd8f313cf10>]",
        "[<ivy.ivy_ast.MixinAfterDef object at 0x7fd8f3310350>, <ivy.ivy_ast.MixinImplementDef object at 0x7fd8f3320450>]",
        "[<ivy.ivy_ast.MixinImplementDef object at 0x7fd8f2883d10>]",
        "[<ivy.ivy_ast.MixinAfterDef object at 0x7fd8f1660250>, <ivy.ivy_ast.MixinImplementDef object at 0x7fd8f166e5d0>]",
        "[<ivy.ivy_ast.MixinImplementDef object at 0x7fd8f1a5e650>]",
        "[<ivy.ivy_ast.MixinBeforeDef object at 0x7fd8f31fbfd0>, <ivy.ivy_ast.MixinAfterDef object at 0x7fd8f3070150>, <ivy.ivy_ast.MixinBeforeDef object at 0x7fd8f1351250>]",
        "[<ivy.ivy_ast.MixinImplementDef object at 0x7fd8f2124c90>]",
        "[<ivy.ivy_ast.MixinAfterDef object at 0x7fd8f3351d90>, <ivy.ivy_ast.MixinImplementDef object at 0x7fd8f33d7f90>]",
        "[<ivy.ivy_ast.MixinImplementDef object at 0x7fd8f1be9d10>]",
        "[<ivy.ivy_ast.MixinImplementDef object at 0x7fd8f2c70190>]",
        "[<ivy.ivy_ast.MixinAfterDef object at 0x7fd8f13ed4d0>, <ivy.ivy_ast.MixinImplementDef object at 0x7fd8f138f510>]",
        "[<ivy.ivy_ast.MixinImplementDef object at 0x7fd8f1e81dd0>]",
        "[<ivy.ivy_ast.MixinImplementDef object at 0x7fd8f1be9710>]",
        "[<ivy.ivy_ast.MixinImplementDef object at 0x7fd8f23edc50>]",
        "[<ivy.ivy_ast.MixinImplementDef object at 0x7fd8f14d0210>]",
        "[<ivy.ivy_ast.MixinBeforeDef object at 0x7fd8f2732390>, <ivy.ivy_ast.MixinAfterDef object at 0x7fd8f294b150>, <ivy.ivy_ast.MixinAfterDef object at 0x7fd8f14b1d10>]",
        "[<ivy.ivy_ast.MixinBeforeDef object at 0x7fd8f2acca10>, <ivy.ivy_ast.MixinAfterDef object at 0x7fd8f2b2df90>, <ivy.ivy_ast.MixinImplementDef object at 0x7fd8f2adc450>]",
        "[<ivy.ivy_ast.MixinBeforeDef object at 0x7fd8f33be250>, <ivy.ivy_ast.MixinAfterDef object at 0x7fd8f337ce50>, <ivy.ivy_ast.MixinImplementDef object at 0x7fd8f349a0d0>]",
        "[<ivy.ivy_ast.MixinBeforeDef object at 0x7fd8f2121690>, <ivy.ivy_ast.MixinAfterDef object at 0x7fd8f2101750>]",
        "[<ivy.ivy_ast.MixinImplementDef object at 0x7fd8f1bcf750>]",
        "[<ivy.ivy_ast.MixinImplementDef object at 0x7fd8f2b00210>]",
        "[<ivy.ivy_ast.MixinBeforeDef object at 0x7fd8f10ec290>, <ivy.ivy_ast.MixinAfterDef object at 0x7fd8f10ec750>, <ivy.ivy_ast.MixinImplementDef object at 0x7fd8f10d7250>]",
        "[<ivy.ivy_ast.MixinAfterDef object at 0x7fd8f204a050>, <ivy.ivy_ast.MixinImplementDef object at 0x7fd8f2062550>]",
        "[<ivy.ivy_ast.MixinImplementDef object at 0x7fd8f161aed0>]",
        "[<ivy.ivy_ast.MixinAfterDef object at 0x7fd8f10867d0>, <ivy.ivy_ast.MixinImplementDef object at 0x7fd8f10bc610>]",
        "[<ivy.ivy_ast.MixinBeforeDef object at 0x7fd8f2c85890>, <ivy.ivy_ast.MixinAfterDef object at 0x7fd8f2ca1d50>, <ivy.ivy_ast.MixinImplementDef object at 0x7fd8f2c9cf50>]",
        "[<ivy.ivy_ast.MixinAfterDef object at 0x7fd8f1086c10>, <ivy.ivy_ast.MixinImplementDef object at 0x7fd8f10a9f10>]",
        "[<ivy.ivy_ast.MixinAfterDef object at 0x7fd8f2e5d750>, <ivy.ivy_ast.MixinImplementDef object at 0x7fd8f2d2ed50>]",
        "[<ivy.ivy_ast.MixinAfterDef object at 0x7fd8f22ec090>, <ivy.ivy_ast.MixinImplementDef object at 0x7fd8f227ba10>]",
        "[<ivy.ivy_ast.MixinBeforeDef object at 0x7fd8f2e61150>, <ivy.ivy_ast.MixinAfterDef object at 0x7fd8f3247790>]",
        "[<ivy.ivy_ast.MixinBeforeDef object at 0x7fd8f1219690>, <ivy.ivy_ast.MixinAfterDef object at 0x7fd8f119a850>, <ivy.ivy_ast.MixinImplementDef object at 0x7fd8f11a5d50>]",
        "[<ivy.ivy_ast.MixinAfterDef object at 0x7fd8f25b7c10>, <ivy.ivy_ast.MixinImplementDef object at 0x7fd8f25a8c90>]",
        "[<ivy.ivy_ast.MixinAfterDef object at 0x7fd8f2b392d0>, <ivy.ivy_ast.MixinImplementDef object at 0x7fd8f2ac3910>]",
        "[<ivy.ivy_ast.MixinAfterDef object at 0x7fd8f2d43410>, <ivy.ivy_ast.MixinImplementDef object at 0x7fd8f2cfe510>]",
        "[<ivy.ivy_ast.MixinImplementDef object at 0x7fd8f2ce1b10>]",
        "[<ivy.ivy_ast.MixinImplementDef object at 0x7fd8f214e590>]",
        "[<ivy.ivy_ast.MixinImplementDef object at 0x7fd8f1bf5b10>]",
        "[<ivy.ivy_ast.MixinBeforeDef object at 0x7fd8f1af6050>, <ivy.ivy_ast.MixinAfterDef object at 0x7fd8f1af3990>, <ivy.ivy_ast.MixinImplementDef object at 0x7fd8f19de050>]",
        "[<ivy.ivy_ast.MixinAfterDef object at 0x7fd8f2af1050>, <ivy.ivy_ast.MixinImplementDef object at 0x7fd8f2a7df90>]",
        "[<ivy.ivy_ast.MixinBeforeDef object at 0x7fd8f20b2b50>, <ivy.ivy_ast.MixinAfterDef object at 0x7fd8f2080410>, <ivy.ivy_ast.MixinImplementDef object at 0x7fd8f2047390>]",
        "[<ivy.ivy_ast.MixinImplementDef object at 0x7fd8f1104b50>]",
        "[<ivy.ivy_ast.MixinImplementDef object at 0x7fd8f11ed490>]",
        "[<ivy.ivy_ast.MixinAfterDef object at 0x7fd8f2642350>, <ivy.ivy_ast.MixinImplementDef object at 0x7fd8f264d110>]",
        "[<ivy.ivy_ast.MixinImplementDef object at 0x7fd8f2af3ad0>]",
        "[<ivy.ivy_ast.MixinAfterDef object at 0x7fd8f11e2e90>, <ivy.ivy_ast.MixinImplementDef object at 0x7fd8f11f7dd0>]",
        "[<ivy.ivy_ast.MixinImplementDef object at 0x7fd8f2026e10>]",
        "[<ivy.ivy_ast.MixinBeforeDef object at 0x7fd8f2edd350>, <ivy.ivy_ast.MixinAfterDef object at 0x7fd8f2f2e750>, <ivy.ivy_ast.MixinImplementDef object at 0x7fd8f2ee92d0>]",
        "[<ivy.ivy_ast.MixinImplementDef object at 0x7fd8f2a96990>]",
        "[<ivy.ivy_ast.MixinAfterDef object at 0x7fd8f2b52d50>, <ivy.ivy_ast.MixinImplementDef object at 0x7fd8f2b75750>]",
        "[<ivy.ivy_ast.MixinBeforeDef object at 0x7fd8f163b990>, <ivy.ivy_ast.MixinAfterDef object at 0x7fd8f16b8110>, <ivy.ivy_ast.MixinImplementDef object at 0x7fd8f165d3d0>]",
        "[<ivy.ivy_ast.MixinImplementDef object at 0x7fd8f2a8c390>]",
        "[<ivy.ivy_ast.MixinImplementDef object at 0x7fd8f2844190>]",
        "[<ivy.ivy_ast.MixinAfterDef object at 0x7fd8f2eddb90>, <ivy.ivy_ast.MixinImplementDef object at 0x7fd8f2ee14d0>]",
        "[<ivy.ivy_ast.MixinBeforeDef object at 0x7fd8f2e00a50>, <ivy.ivy_ast.MixinAfterDef object at 0x7fd8f2e0b250>, <ivy.ivy_ast.MixinBeforeDef object at 0x7fd8f1345990>]",
        "[<ivy.ivy_ast.MixinAfterDef object at 0x7fd8f2cc8bd0>, <ivy.ivy_ast.MixinImplementDef object at 0x7fd8f2bae450>]",
        "[<ivy.ivy_ast.MixinBeforeDef object at 0x7fd8f2683dd0>, <ivy.ivy_ast.MixinAfterDef object at 0x7fd8f26dde10>, <ivy.ivy_ast.MixinImplementDef object at 0x7fd8f2694a90>]",
        "[<ivy.ivy_ast.MixinBeforeDef object at 0x7fd8f1e354d0>, <ivy.ivy_ast.MixinAfterDef object at 0x7fd8f1e31c10>, <ivy.ivy_ast.MixinImplementDef object at 0x7fd8f1e38510>]",
        "[<ivy.ivy_ast.MixinImplementDef object at 0x7fd8f2a21ad0>]",
        "[<ivy.ivy_ast.MixinImplementDef object at 0x7fd8f1b844d0>]",
        "[<ivy.ivy_ast.MixinBeforeDef object at 0x7fd8f12bd110>, <ivy.ivy_ast.MixinAfterDef object at 0x7fd8f12cae50>]",
        "[<ivy.ivy_ast.MixinImplementDef object at 0x7fd8f14f5550>]",
        "[<ivy.ivy_ast.MixinAfterDef object at 0x7fd8f1256110>, <ivy.ivy_ast.MixinImplementDef object at 0x7fd8f1217410>]",
        "[<ivy.ivy_ast.MixinBeforeDef object at 0x7fd8f31160d0>, <ivy.ivy_ast.MixinAfterDef object at 0x7fd8f3174b50>, <ivy.ivy_ast.MixinBeforeDef object at 0x7fd8f1379450>]",
        "[<ivy.ivy_ast.MixinImplementDef object at 0x7fd8f271f5d0>]",
        "[<ivy.ivy_ast.MixinAfterDef object at 0x7fd8f2df92d0>, <ivy.ivy_ast.MixinImplementDef object at 0x7fd8f2d86510>]",
        "[<ivy.ivy_ast.MixinImplementDef object at 0x7fd8f10a5810>]",
        "[<ivy.ivy_ast.MixinImplementDef object at 0x7fd8f1dfca90>]",
        "[<ivy.ivy_ast.MixinBeforeDef object at 0x7fd8f1102f50>, <ivy.ivy_ast.MixinAfterDef object at 0x7fd8f114a150>, <ivy.ivy_ast.MixinImplementDef object at 0x7fd8f1104090>]",
        "[<ivy.ivy_ast.MixinBeforeDef object at 0x7fd8f113d710>, <ivy.ivy_ast.MixinAfterDef object at 0x7fd8f113b310>, <ivy.ivy_ast.MixinImplementDef object at 0x7fd8f1161090>]",
        "[<ivy.ivy_ast.MixinImplementDef object at 0x7fd8f1fd7b50>]",
        "[<ivy.ivy_ast.MixinBeforeDef object at 0x7fd8f22d73d0>, <ivy.ivy_ast.MixinAfterDef object at 0x7fd8f22cb7d0>, <ivy.ivy_ast.MixinImplementDef object at 0x7fd8f22e1110>]",
        "[<ivy.ivy_ast.MixinBeforeDef object at 0x7fd8f2cbfcd0>, <ivy.ivy_ast.MixinAfterDef object at 0x7fd8f2c87390>, <ivy.ivy_ast.MixinImplementDef object at 0x7fd8f2c15950>]",
        "[<ivy.ivy_ast.MixinBeforeDef object at 0x7fd8f2e00310>, <ivy.ivy_ast.MixinAfterDef object at 0x7fd8f2e00990>]",
        "[<ivy.ivy_ast.MixinImplementDef object at 0x7fd8f2011750>]",
        "[<ivy.ivy_ast.MixinAfterDef object at 0x7fd8f2c4d3d0>, <ivy.ivy_ast.MixinImplementDef object at 0x7fd8f2c44c50>]",
        "[<ivy.ivy_ast.MixinImplementDef object at 0x7fd8f1c6a550>]",
        "[<ivy.ivy_ast.MixinImplementDef object at 0x7fd8f13987d0>]",
        "[<ivy.ivy_ast.MixinImplementDef object at 0x7fd8f166b3d0>]",
        "[<ivy.ivy_ast.MixinImplementDef object at 0x7fd8f1fca050>]",
        "[<ivy.ivy_ast.MixinAfterDef object at 0x7fd8f1ddc290>, <ivy.ivy_ast.MixinImplementDef object at 0x7fd8f1def0d0>]",
        "[<ivy.ivy_ast.MixinAfterDef object at 0x7fd8f2385410>, <ivy.ivy_ast.MixinImplementDef object at 0x7fd8f25d7190>]",
        "[<ivy.ivy_ast.MixinImplementDef object at 0x7fd8f2033150>]",
        "[<ivy.ivy_ast.MixinImplementDef object at 0x7fd8f1b84b10>]",
        "[<ivy.ivy_ast.MixinAfterDef object at 0x7fd8f2740bd0>, <ivy.ivy_ast.MixinImplementDef object at 0x7fd8f27556d0>]",
        "[<ivy.ivy_ast.MixinBeforeDef object at 0x7fd8f3413cd0>, <ivy.ivy_ast.MixinAfterDef object at 0x7fd8f3437ed0>, <ivy.ivy_ast.MixinImplementDef object at 0x7fd8f336ca50>]",
        "[<ivy.ivy_ast.MixinBeforeDef object at 0x7fd8f2e1f550>, <ivy.ivy_ast.MixinAfterDef object at 0x7fd8f2e205d0>]",
        "[<ivy.ivy_ast.MixinImplementDef object at 0x7fd8f31fbe10>]",
        "[<ivy.ivy_ast.MixinImplementDef object at 0x7fd8f1bd4290>]",
        "[<ivy.ivy_ast.MixinBeforeDef object at 0x7fd8f1110550>, <ivy.ivy_ast.MixinAfterDef object at 0x7fd8f116e390>, <ivy.ivy_ast.MixinImplementDef object at 0x7fd8f110df90>]",
        "[<ivy.ivy_ast.MixinBeforeDef object at 0x7fd8f322dad0>, <ivy.ivy_ast.MixinAfterDef object at 0x7fd8f2fbfed0>, <ivy.ivy_ast.MixinImplementDef object at 0x7fd8f3116990>]",
        "[<ivy.ivy_ast.MixinImplementDef object at 0x7fd8f27b5b90>]",
        "[<ivy.ivy_ast.MixinBeforeDef object at 0x7fd8f16e82d0>, <ivy.ivy_ast.MixinAfterDef object at 0x7fd8f16f2190>, <ivy.ivy_ast.MixinImplementDef object at 0x7fd8f16f4a50>]",
        "[<ivy.ivy_ast.MixinAfterDef object at 0x7fd8f24fb7d0>, <ivy.ivy_ast.MixinImplementDef object at 0x7fd8f25dfd50>]",
        "[<ivy.ivy_ast.MixinImplementDef object at 0x7fd8f1bf9610>]",
        "[<ivy.ivy_ast.MixinImplementDef object at 0x7fd8f2f57610>]",
        "[<ivy.ivy_ast.MixinImplementDef object at 0x7fd8f1efa750>]",
        "[<ivy.ivy_ast.MixinImplementDef object at 0x7fd8f148a390>]",
        "[<ivy.ivy_ast.MixinBeforeDef object at 0x7fd8f2e8d290>, <ivy.ivy_ast.MixinAfterDef object at 0x7fd8f307b390>]",
        "[<ivy.ivy_ast.MixinImplementDef object at 0x7fd8f14d0050>]",
        "[<ivy.ivy_ast.MixinImplementDef object at 0x7fd8f1e221d0>]",
        "[<ivy.ivy_ast.MixinBeforeDef object at 0x7fd8f2607190>, <ivy.ivy_ast.MixinAfterDef object at 0x7fd8f2607950>, <ivy.ivy_ast.MixinImplementDef object at 0x7fd8f2613350>]",
        "[<ivy.ivy_ast.MixinAfterDef object at 0x7fd8f11ed590>, <ivy.ivy_ast.MixinImplementDef object at 0x7fd8f11a5510>]",
        "[<ivy.ivy_ast.MixinAfterDef object at 0x7fd8f3338bd0>, <ivy.ivy_ast.MixinImplementDef object at 0x7fd8f32dc090>]",
        "[<ivy.ivy_ast.MixinImplementDef object at 0x7fd8f2b55dd0>]",
        "[<ivy.ivy_ast.MixinAfterDef object at 0x7fd8f203bf10>, <ivy.ivy_ast.MixinImplementDef object at 0x7fd8f203d5d0>]",
        "[<ivy.ivy_ast.MixinAfterDef object at 0x7fd8f1102e10>, <ivy.ivy_ast.MixinImplementDef object at 0x7fd8f1178850>]",
        "[<ivy.ivy_ast.MixinImplementDef object at 0x7fd8f21a3f50>]"
    ],
    "exports": [
        {
            "args": "(frame.ack.handle, )",
            "lineno": {}
        },
        {
            "args": "(frame.stream.handle, )",
            "lineno": {}
        },
        {
            "args": "(frame.crypto.handle, )",
            "lineno": {}
        },
        {
            "args": "(frame.path_response.handle, )",
            "lineno": {}
        },
        {
            "args": "(packet_event, )",
            "lineno": {}
        },
        {
            "args": "(client_send_event, )",
            "lineno": {}
        },
        {
            "args": "(tls_recv_event, )",
            "lineno": {}
        },
        {
            "args": "(frame.connection_close.handle, )",
            "lineno": {}
        },
        {
            "args": "(_finalize, )"
        }
    ],
    "actions": [
        "assert 0:servers.server.idx < fml:x",
        "{}",
        "{}",
        "{}",
        "<<<\n\t        if (`fml:a`.size() > 0) {\n\t            a.pop_back();\n\t        }\n            >>>",
        "{}",
        "{}",
        "{}",
        "{}",
        "<<<\n\t        `fml:a`.push_back(`fml:v`);\n            >>>",
        "{version_information.is_set(fml:s) := true; version_information.value(fml:s) := fml:p}",
        "{}",
        "{}",
        "<<<\n\t        if (0 <= `fml:x` && `fml:x` < (`jdx_s`)`fml:a`.size()) \n\t            `fml:y` = `fml:a`[`fml:x`];\n\t    >>>",
        "<<<        std::cerr << \"encrypt_cipher start \" << \"\\n\";\n        std::cerr << \"encrypt_cipher c \" << c << \"\\n\";\n        std::cerr << \"encrypt_cipher iv \" << iv << \"\\n\";\n\t    picotls_connection *s = `tls_api.upper.foo.cid_map`[c];\n        ptls_cipher_context_t *pn_enc;\n        if (recv) {\n            pn_enc = (ptls_cipher_context_t *)(s->crypto_context[l].pn_dec);\n            std::cerr << \"encrypt_cipher pn_dec \" << pn_enc << \"\\n\";\n        } \n        else {\n            pn_enc = (ptls_cipher_context_t *)(s->crypto_context[l].pn_enc);\n            std::cerr << \"encrypt_cipher pn_enc \" << pn_enc << \"\\n\";\n        }\n\t    if(pn_enc != 0)\n        \tencrypt_symm(pn_enc,clear,iv,cipher);\n        std::cerr << \"encrypt_cipher end \" << cipher << \"\\n\";\n        >>>",
        "{}",
        "{}",
        "{}",
        "{}",
        "{assert forged_quic_packet.retired_cids.end(fml:a) > forged_quic_packet.retired_cids.end(old_fml:a) & ~(forged_quic_packet.retired_cids.end(old_fml:a) < X & X < forged_quic_packet.retired_cids.end(fml:a)); assert 0:forged_quic_packet.idx <= X & X < forged_quic_packet.retired_cids.end(old_fml:a) -> forged_quic_packet.retired_cids.value(fml:a,X) = forged_quic_packet.retired_cids.value(old_fml:a,X); assert forged_quic_packet.retired_cids.value(fml:a,forged_quic_packet.retired_cids.end(old_fml:a)) = fml:v}",
        "local loc:0 {call loc:0 := socket_endpoint(fml:host, fml:s); local loc:dst {loc:dst := loc:0; local loc:idx {loc:idx := prot.arr.begin(fml:pkts); while loc:idx < prot.arr.end(fml:pkts)\n{local loc:ppkt {loc:ppkt := prot.arr.value(fml:pkts,loc:idx); local loc:0 {call loc:0 := src_tls_id(loc:dst); local loc:tls_id {loc:tls_id := loc:0; local loc:header {loc:header := stream_data.value(loc:ppkt,0); local loc:hdr_type {loc:hdr_type := bfe[0][6](stream_data.value(loc:ppkt,0)); local loc:tt {loc:tt := bvand(loc:hdr_type,0x30); local loc:is_long {loc:is_long := bvand(0x80:byte,loc:header) ~= 0; local loc:version {loc:version := stream_data.segment(loc:ppkt,1,1 + 4); local loc:0 {call loc:0 := bytes_to_version(loc:version); local loc:bversion {loc:bversion := loc:0; local loc:ptype {loc:ptype := bvand(0x30:byte,loc:header); if zrtt_pkt_set & ~zrtt_pkt_process {zrtt_pkt_process := true; local loc:0 {call loc:0 := reference_pkt_num(last_zrtt_pkt, true); local loc:rnum {loc:rnum := loc:0; local loc:0 {call loc:0 := prot.decrypt(loc:tls_id, loc:rnum, last_zrtt_pkt); local loc:res {loc:res := loc:0; if tls_api.upper.ok(loc:res) {if loc:bversion ~= 0 {call tls_client_0rtt_response(fml:src, loc:dst, tls_api.upper.data(loc:res))}}\nelse {call undecryptable_packet_event(fml:host, fml:src, loc:dst, last_zrtt_pkt)}}}}}}; if bvand(stream_data.value(loc:ppkt,0),0xf0) = 0xc0 {call tls_client_initial_response(fml:src, loc:dst, loc:ppkt)}; local loc:0 {call loc:0 := reference_pkt_num(loc:ppkt, true); local loc:rnum {loc:rnum := loc:0; local loc:0 {call loc:0 := prot.decrypt(loc:tls_id, loc:rnum, loc:ppkt); local loc:res {loc:res := loc:0; if tls_api.upper.ok(loc:res) {local loc:0 {call loc:0 := is_padding_packet(tls_api.upper.payload(loc:res)); local loc:is_pad {loc:is_pad := loc:0; if loc:is_pad {call padding_packet_event(fml:host, fml:src, loc:dst, loc:ppkt)}\nelse {if loc:tt = 0x10 & loc:bversion ~= 0 {call tls_client_0rtt_response(fml:src, loc:dst, tls_api.upper.data(loc:res))}\nelse {local loc:0 {call loc:0 := pkt_serdes.from_bytes(tls_api.upper.data(loc:res)); local loc:pkt {loc:pkt := loc:0; local loc:0 {call loc:0 := prot.get_pnum_len(tls_api.upper.data(loc:res)); call quic_packet.seq_num(loc:pkt) := prot.correct_pnum(loc:rnum, quic_packet.seq_num(loc:pkt), loc:0)}; call recv_packet(fml:host, fml:src, loc:dst, loc:pkt); call infer_tls_events(fml:src, loc:dst, loc:pkt); call packet_event(fml:src, loc:dst, loc:pkt); if nclients > 1 {local loc:cdx {loc:cdx := cids.begin(the_cids); while loc:cdx < cids.end(the_cids)\n{local loc:tcid {loc:tcid := cids.value(the_cids,loc:cdx); if bvand(stream_data.value(loc:ppkt,0),0xf0) = 0xc0 & ~connected(loc:tcid) {call app_server_open_event(loc:dst, fml:src, loc:tcid, quic_packet.src_cid(loc:pkt))}; call loc:cdx := index.next(loc:cdx)}}}}\nelse {if bvand(stream_data.value(loc:ppkt,0),0xf0) = 0xc0 & ~connected(the_cid) {call app_server_open_event(loc:dst, fml:src, the_cid, quic_packet.src_cid(loc:pkt))}}}}}}}}}\nelse {call undecryptable_packet_event(fml:host, fml:src, loc:dst, loc:ppkt)}; call loc:idx := prot.idx.next(loc:idx)}}}}}}}}}}}}}}}}; version_not_found(fml:src) := false; call show_last_datagram_size(last_datagram_received_size); if ~first_datagram_received {first_datagram_received := true}; last_datagram_received_size := 0:stream_pos}}}",
        "<<<\n\t        `fml:a`.resize(`fml:s`);\n\t        for (unsigned i = 0; i < `fml:s`; i++)\n\t            `fml:a`[i] = y;\n\t    >>>",
        "<<<\n\t    >>>",
        "{assert vector[transport_parameter].end(fml:a) = vector[transport_parameter].end(old_fml:a); assert vector[transport_parameter].value(fml:a,X) = (fml:y if (X = fml:x) else vector[transport_parameter].value(old_fml:a,X))}",
        "{}",
        "{}",
        "<<<\n                if ((`quic_packet_retry.idx`)`fml:a`.size() > 0)\n                    `fml:res` = `fml:a`.back();\n            >>>",
        "{path_challenge_pending(fml:dcid,frame.path_challenge.data(fml:f)) := true; call enqueue_frame(fml:scid, fml:f, fml:e, true)}",
        "{}",
        "assert 0:forged_protected_quic_packet.idx <= fml:x & fml:x < forged_protected_quic_packet.retired_cids.end(fml:a)",
        "{}",
        "{assert quic_packet.retired_cids.end(fml:a) = quic_packet.retired_cids.end(old_fml:a); assert quic_packet.retired_cids.value(fml:a,X) = (fml:y if (X = fml:x) else quic_packet.retired_cids.value(old_fml:a,X))}",
        "{}",
        "{}",
        "{assert forged_quic_packet_vn.arr.end(fml:a) > forged_quic_packet_vn.arr.end(old_fml:a) & ~(forged_quic_packet_vn.arr.end(old_fml:a) < X & X < forged_quic_packet_vn.arr.end(fml:a)); assert 0:forged_quic_packet_vn.idx <= X & X < forged_quic_packet_vn.arr.end(old_fml:a) -> forged_quic_packet_vn.arr.value(fml:a,X) = forged_quic_packet_vn.arr.value(old_fml:a,X); assert forged_quic_packet_vn.arr.value(fml:a,forged_quic_packet_vn.arr.end(old_fml:a)) = fml:v}",
        "{}",
        "<<<\n\t        `fml:s` = (`frame.ack_ecn.range.idx`) `fml:a`.size();\n\t    >>>",
        "{original_destination_connection_id.is_set(fml:s) := true; original_destination_connection_id.value(fml:s) := fml:p}",
        "<<<\n                for (unsigned i = 0; i < `fml:b`.size(); i++)\n\t            `fml:a`.push_back(`fml:b`[i]);\n            >>>",
        "fml:y := fml:x + 1",
        "<<<\n                if ((`jdx_r`)`fml:a`.size() > 0)\n                    `fml:res` = `fml:a`.back();\n            >>>",
        "<<<\n                for (unsigned i = 0; i < `fml:b`.size(); i++)\n\t            `fml:a`.push_back(`fml:b`[i]);\n            >>>",
        "{mim_server_target.enc_level := quic_packet_type.initial; ip.endpoint.protocol(mim_server_target.ep) := ip.udp; ip.endpoint.addr(mim_server_target.ep) := server_addr; ip.endpoint.port(mim_server_target.ep) := server_port; if ip.endpoint.addr(mim_server_target.ep) = 0x7f000001 | is_mim {ip.endpoint.interface(mim_server_target.ep) := ip.lo}\nelse {ip.endpoint.interface(mim_server_target.ep) := ip.ivy}}",
        "{}",
        "<<<\n\t        unsigned __old_size = `fml:a`.size();\n\t        `fml:a`.resize(`fml:s`);\n\t        for (unsigned i = __old_size; i < (unsigned)`fml:s`; i++)\n\t            `fml:a`[i] = v;\n            >>>",
        "{}",
        "{}",
        "{}",
        "{}",
        "{}",
        "local loc:scid {loc:scid := quic_packet_retry.src_cid(fml:pkt); local loc:dcid {loc:dcid := quic_packet_retry.dst_cid(fml:pkt); if quic_packet_retry.ptype(fml:pkt) = quic_packet_type.retry {nonce_cid(loc:scid) := loc:dcid}; if conn_requested(fml:dst,fml:src,loc:dcid) & ~connected(loc:dcid) & ~connected(loc:scid) {call app_server_open_event_retry(fml:src, fml:dst, loc:scid, loc:dcid); call app_server_open_event(fml:src, fml:dst, loc:scid, loc:dcid)}}}",
        "{assert ip_endpoints.end(fml:a) > ip_endpoints.end(old_fml:a) & ~(ip_endpoints.end(old_fml:a) < X & X < ip_endpoints.end(fml:a)); assert 0:index <= X & X < ip_endpoints.end(old_fml:a) -> ip_endpoints.value(fml:a,X) = ip_endpoints.value(old_fml:a,X); assert ip_endpoints.value(fml:a,ip_endpoints.end(old_fml:a)) = fml:v}",
        "{assert fml:x < fml:y & (fml:x < Y -> fml:y <= Y); assert quic_packet_retry.idx.succ(fml:x,fml:y)}",
        "<<<\n                for (unsigned i = 0; i < `fml:a`.size()/2; i++) {\n                    std::swap(`fml:a`[i],`fml:a`[`fml:a`.size()-i-1]);\n                }\n            >>>",
        "assert prot.arr.value(fml:a,fml:x) = fml:y",
        "<<<\n                for (unsigned i = 0; i < `fml:b`.size(); i++)\n\t            `fml:a`.push_back(`fml:b`[i]);\n            >>>",
        "fml:src := (client.ep if (fml:tls_id = client.tls_id & ~version_negociated) else (client_vn if (fml:tls_id = client.tls_id & version_negociated) else server.ep))",
        "<<<\n\t        `fml:s` = (`index`) `fml:a`.size();\n\t    >>>",
        "{assert fml:x < fml:y & (fml:x < Y -> fml:y <= Y); assert replayed_quic_packet_0rtt.idx.succ(fml:x,fml:y)}",
        "{}",
        "<<<\n\t        if (`fml:a`.size() > 0) {\n\t            a.pop_back();\n\t        }\n            >>>",
        "local loc:scid {loc:scid := quic_packet_vn.src_cid(fml:pkt); local loc:dcid {loc:dcid := quic_packet_vn.dst_cid(fml:pkt); if quic_packet_vn.ptype(fml:pkt) = quic_packet_type.version_negociation {nonce_cid(loc:scid) := loc:dcid}; if conn_requested(fml:dst,fml:src,loc:dcid) & ~connected(loc:dcid) & ~connected(loc:scid) {call app_server_open_event_vn(fml:src, fml:dst, loc:scid, loc:dcid); call app_server_open_event(fml:src, fml:dst, loc:scid, loc:dcid)}}}",
        "<<<\n\t        if (`fml:a`.size() > 0) {\n\t            a.pop_back();\n\t        }\n            >>>",
        "{assert versions_bv.end(fml:a) = fml:s; assert 0:index <= X & X < versions_bv.end(old_fml:a) -> versions_bv.value(fml:a,X) = versions_bv.value(old_fml:a,X); assert versions_bv.end(old_fml:a) <= X & X < fml:s -> versions_bv.value(fml:a,X) = fml:v}",
        "<<<\n\t    >>>",
        "{}",
        "assert 0:vector[tls.extension].domain <= fml:s",
        "<<<\n\t        if (`fml:a`.size() > 0) {\n\t            a.pop_back();\n\t        }\n            >>>",
        "{}",
        "<<<\n\t        `fml:a`.push_back(`fml:v`);\n            >>>",
        "assert ip_endpoints.value(fml:a,fml:x) = fml:y",
        "{}",
        "{assert vector[tls.psk_identity].end(fml:a) > vector[tls.psk_identity].end(old_fml:a) & ~(vector[tls.psk_identity].end(old_fml:a) < X & X < vector[tls.psk_identity].end(fml:a)); assert 0:vector[tls.psk_identity].domain <= X & X < vector[tls.psk_identity].end(old_fml:a) -> vector[tls.psk_identity].value(fml:a,X) = vector[tls.psk_identity].value(old_fml:a,X); assert vector[tls.psk_identity].value(fml:a,vector[tls.psk_identity].end(old_fml:a)) = fml:v}",
        "{}",
        "<<<\n\t        if (0 <= `fml:x` && `fml:x` < (`quic_packet_coal_0rtt.idx`)`fml:a`.size()) \n\t            `fml:y` = `fml:a`[`fml:x`];\n\t    >>>",
        "<<<\n                for (unsigned i = 0; i < `fml:b`.size(); i++)\n\t            `fml:a`.push_back(`fml:b`[i]);\n            >>>",
        "<<<\n\t    >>>",
        "<<<\n\t        if (0 <= `fml:x` && `fml:x` < (`quic_packet_coal_0rtt.idx`)`fml:a`.size()) \n\t            `fml:y` = `fml:a`[`fml:x`];\n\t    >>>",
        "{}",
        "<<<\n\t        `fml:s` = (`vector[tls.handshake].domain`) `fml:a`.size();\n\t    >>>",
        "fml:y := fml:x - 1",
        "assert 0:idx_r <= fml:x & fml:x < arr_streamid_r.end(fml:a)",
        "assert tls_api.upper.open(fml:c) & tls_api.upper.established(fml:c)",
        "{assert quic_packet_coal_0rtt.arr.end(fml:a) = quic_packet_coal_0rtt.arr.end(old_fml:a); assert quic_packet_coal_0rtt.arr.value(fml:a,X) = (fml:y if (X = fml:x) else quic_packet_coal_0rtt.arr.value(old_fml:a,X))}",
        "<<<\n                if ((`vector[tls.extension].domain`)`fml:a`.size() > 0)\n                    `fml:res` = `fml:a`.back();\n            >>>",
        "{assert connected(fml:dcid) & connected_to(fml:dcid) = fml:scid; assert fml:e = quic_packet_type.one_rtt & established_1rtt_keys(fml:scid); assert num_queued_frames(fml:scid) > 0 -> fml:e = queued_level(fml:scid)}",
        "<<<\n\t        `fml:s` = (`quic_packet.idx`) `fml:a`.size();\n\t    >>>",
        "local loc:dst {loc:dst := server.ep; local loc:0 {call loc:0 := prot.arr.empty; local loc:pkts_mim {loc:pkts_mim := loc:0; call loc:pkts_mim := prot.arr.append(loc:pkts_mim, fml:ppkt); call net.send(endpoint_id.victim, sock_victim, loc:dst, loc:pkts_mim)}}}",
        "{}",
        "{}",
        "<<<\n\t        unsigned __old_size = `fml:a`.size();\n\t        `fml:a`.resize(`fml:s`);\n\t        for (unsigned i = __old_size; i < (unsigned)`fml:s`; i++)\n\t            `fml:a`[i] = v;\n            >>>",
        "assert 0:quic_packet_retry.idx <= fml:x & fml:x < quic_packet_retry.arr.end(fml:a)",
        "assert 0:vector[tls.cipher_suite].domain < fml:x",
        "assert 0:clients.client.idx < fml:x",
        "<<<\n                for (unsigned i = 0; i < `fml:b`.size(); i++)\n\t            `fml:a`.push_back(`fml:b`[i]);\n            >>>",
        "{assert forged_protected_quic_packet.arr.end(fml:a) = fml:s; assert 0:forged_protected_quic_packet.idx <= X & X < forged_protected_quic_packet.arr.end(old_fml:a) -> forged_protected_quic_packet.arr.value(fml:a,X) = forged_protected_quic_packet.arr.value(old_fml:a,X); assert forged_protected_quic_packet.arr.end(old_fml:a) <= X & X < fml:s -> forged_protected_quic_packet.arr.value(fml:a,X) = fml:v}",
        "{assert clients.client.arr.end(fml:a) = fml:s; assert 0:clients.client.idx <= X & X < clients.client.arr.end(old_fml:a) -> clients.client.arr.value(fml:a,X) = clients.client.arr.value(old_fml:a,X); assert clients.client.arr.end(old_fml:a) <= X & X < fml:s -> clients.client.arr.value(fml:a,X) = fml:v}",
        "<<<\n\t        `fml:s` = (`vector[tls.compression_method].domain`) `fml:a`.size();\n\t    >>>",
        "fml:y := fml:x - 1",
        "<<<\n\t        `fml:a`.resize(`fml:s`);\n\t        for (unsigned i = 0; i < `fml:s`; i++)\n\t            `fml:a`[i] = y;\n\t    >>>",
        "<<<\n\t        if (`fml:a`.size() > 0) {\n\t            a.pop_back();\n\t        }\n            >>>",
        "{}",
        "{}",
        "{last_packet_type(C) := quic_packet_type.initial; last_packet_length(C) := 1200:stream_pos}",
        "<<<\n                if ((`idx`)`fml:a`.size() > 0)\n                    `fml:res` = `fml:a`.back();\n            >>>",
        "<<<\n\t    >>>",
        "<<<\n\t        if (`fml:a`.size() > 0) {\n\t            a.pop_back();\n\t        }\n            >>>",
        "{}",
        "{}",
        "<<<\n\t        if (0 <= `fml:x` && `fml:x` < (`vector[tls.psk_identity].domain`)`fml:a`.size()) \n\t            `fml:a`[`fml:x`] = `fml:y`;\n\t    >>>",
        "{}",
        "<<<\n\t        `fml:a`.resize(`fml:s`);\n\t        for (unsigned i = 0; i < `fml:s`; i++)\n\t            `fml:a`[i] = y;\n\t    >>>",
        "{grease_quic_bit.is_set(fml:s) := true; grease_quic_bit.value(fml:s) := fml:p}",
        "{fml:ok := false; local loc:tp {loc:tp := trans_params(fml:dcid); fml:ok := min_ack_delay.exponent_8(min_ack_delay.value(loc:tp)) * 1000 < max_ack_delay.exponent_8(max_ack_delay.value(loc:tp))}}",
        "{}",
        "{cid_mapped(seqnum_to_cid(fml:dcid,frame.retire_connection_id.seq_num(fml:f))) := false; count_rcid_frame(frame.retire_connection_id.seq_num(fml:f)) := count_rcid_frame(frame.retire_connection_id.seq_num(fml:f)) + 1; if count_rcid_frame(frame.retire_connection_id.seq_num(fml:f)) = 1 {num_conn(fml:dcid) := num_conn(fml:dcid) - 1}; call enqueue_frame(fml:scid, fml:f, fml:e, false)}",
        "<<<\n\t        if (`fml:a`.size() > 0) {\n\t            a.pop_back();\n\t        }\n            >>>",
        "<<<\n       srand((unsigned) time(0)); //fixed or random seed ?\n       res = 0;\n       res = ::rand()% (max-min+1) + min;\n       std::cerr << \"between random: \" << res << \"\\n\";\n       >>>",
        "{assert fml:y < fml:x & (Y:quic_packet_0rtt.idx < fml:x -> Y <= fml:y); assert quic_packet_0rtt.idx.succ(fml:y,fml:x)}",
        "local loc:0 {call loc:0 := prot.get_header_info(fml:spkt, fml:decrypt); local loc:h {loc:h := loc:0; local loc:0 {call loc:0 := packet_encryption_level(loc:h); local loc:e {loc:e := loc:0; local loc:0 {call loc:0 := packet_scid(loc:h); local loc:scid {loc:scid := loc:0; call last_packet_type(loc:scid) := packet_encryption_level_up(loc:h); last_packet_length(loc:scid) := prot.payload_length(loc:h); fml:pnum := last_pkt_num(loc:scid,loc:e)}}}}}}",
        "{}",
        "call enqueue_frame(fml:scid, fml:f, fml:e, false)",
        "assert fml:s = tls.handshakes.end(fml:a)",
        "<<<\n\t        `fml:a`.resize(`fml:s`);\n\t        for (unsigned i = 0; i < `fml:s`; i++)\n\t            `fml:a`[i] = y;\n\t    >>>",
        "local loc:dcid {loc:dcid := quic_packet_0rtt.dst_cid(fml:pkt); local loc:scid {loc:scid := quic_packet_0rtt.src_cid(fml:pkt); if cid_mapped(loc:dcid) {loc:dcid := cid_to_aid(loc:dcid)}; if fml:src = client_alt | fml:dst = client_alt {migration_done := true}; assert quic_packet_0rtt.ptype(fml:pkt) = quic_packet_type.zero_rtt; local loc:pn_app_space {loc:pn_app_space := quic_packet_type.one_rtt; assert ~sent_pkt(loc:scid,loc:pn_app_space,quic_packet_0rtt.seq_num(fml:pkt)); sent_pkt(loc:scid,loc:pn_app_space,quic_packet_0rtt.seq_num(fml:pkt)) := true; assert loc:scid = initial_scid & loc:dcid = initial_dcid; assert num_queued_frames_rtt(loc:scid) > 0; assert quic_packet_0rtt.payload(fml:pkt) = queued_frames_rtt(loc:scid); assert connected(loc:dcid) -> connected_to(loc:dcid) = loc:scid; local loc:0 {call loc:0 := quic_packet_0rtt.long(fml:pkt); assert conn_seen(loc:scid) & loc:0 & is_client(loc:scid) -> conn_requested(fml:src,fml:dst,loc:scid)}}}}",
        "assert fml:s = forged_protected_quic_packet.retired_cids.end(fml:a)",
        "{}",
        "{assert quic_packet_retry.retired_cids.end(fml:a) = fml:s; assert 0:quic_packet_retry.idx <= X & X < quic_packet_retry.retired_cids.end(old_fml:a) -> quic_packet_retry.retired_cids.value(fml:a,X) = quic_packet_retry.retired_cids.value(old_fml:a,X); assert quic_packet_retry.retired_cids.end(old_fml:a) <= X & X < fml:s -> quic_packet_retry.retired_cids.value(fml:a,X) = fml:v}",
        "{packed_forwarded_arr(fml:pkt) := true; call mim_agent.ppkt_to_be_reflected_to_victim := forged_pkts.empty; mim_agent.force_server_forward := false}",
        "<<<\n\t        if (0 <= `fml:x` && `fml:x` < (`quic_packet_retry.idx`)`fml:a`.size()) \n\t            `fml:a`[`fml:x`] = `fml:y`;\n\t    >>>",
        "{assert connected(fml:dcid) & connected_to(fml:dcid) = fml:scid; assert fml:e = quic_packet_type.one_rtt & established_1rtt_keys(fml:scid); assert num_queued_frames(fml:scid) > 0 -> fml:e = queued_level(fml:scid); assert stream_data.end(frame.path_response.data(fml:f)) = 8; assert path_challenge_pending(fml:scid,frame.path_response.data(fml:f))}",
        "fml:y := fml:x - 1",
        "<<<\n\t        if (0 <= `fml:x` && `fml:x` < (`idx`)`fml:a`.size()) \n\t            `fml:y` = `fml:a`[`fml:x`];\n\t    >>>",
        "{}",
        "<<<\n    res.val = c.val + inc;\n    >>>",
        "<<<\n\t        `fml:s` = (`jdx_s`) `fml:a`.size();\n\t    >>>",
        "local loc:tp {loc:tp := trans_params(fml:dcid); local loc:min {loc:min := 0:microsecs; if min_ack_delay.is_set(loc:tp) {loc:min := min_ack_delay.exponent_8(min_ack_delay.value(trans_params(fml:dcid)))}; assert frame.ack_frequency.packet_tolerence(fml:f) > 0; assert frame.ack_frequency.update_max_ack_delay(fml:f) > loc:min; assert frame.ack_frequency.ignore_order(fml:f) = 1 | frame.ack_frequency.ignore_order(fml:f) = 0; if first_ack_freq_received {assert frame.ack_frequency.seq_num(fml:f) = 0; first_ack_freq_received := false}\nelse {assert frame.ack_frequency.seq_num(fml:f) > last_ack_freq_seq(fml:scid); last_ack_freq_seq(fml:scid) := frame.ack_frequency.seq_num(fml:f)}; call enqueue_frame(fml:scid, fml:f, fml:e, false)}}",
        "<<<\n                for (unsigned i = 0; i < `fml:a`.size()/2; i++) {\n                    std::swap(`fml:a`[i],`fml:a`[`fml:a`.size()-i-1]);\n                }\n            >>>",
        "{}",
        "<<<\n\t        unsigned __old_size = `fml:a`.size();\n\t        `fml:a`.resize(`fml:s`);\n\t        for (unsigned i = __old_size; i < (unsigned)`fml:s`; i++)\n\t            `fml:a`[i] = v;\n            >>>",
        "fml:y := fml:x + 1",
        "{}",
        "if fml:ec = 0x0 {is_no_error := true}\nelse {if fml:ec = 0x1 {is_internal_error := true; is_no_error := false}\nelse {if fml:ec = 0x2 {is_server_busy := true; is_no_error := false}\nelse {if fml:ec = 0x3 {is_flow_control_error := true; is_no_error := false}\nelse {if fml:ec = 0x4 {is_stream_limit_error := true; is_no_error := false}\nelse {if fml:ec = 0x5 {is_stream_state_error := true; is_no_error := false}\nelse {if fml:ec = 0x6 {is_final_size_error := true; is_no_error := false}\nelse {if fml:ec = 0x7 {is_frame_encoding_error := true; is_no_error := false}\nelse {if fml:ec = 0x8 {is_transport_parameter_error := true; is_no_error := false}\nelse {if fml:ec = 0x9 {is_connection_id_limit_error := true; is_no_error := false}\nelse {if fml:ec = 0xa {is_protocol_violation := true; is_no_error := false}\nelse {if fml:ec = 0xb {is_invalid_token := true; is_no_error := false}\nelse {if fml:ec = 0xc {is_application_error := true; is_no_error := false}\nelse {if fml:ec = 0xd {is_crypto_buffer_exceeded := true}\nelse {if fml:ec = 0xe {is_key_update_error := true}\nelse {if fml:ec = 0xf {is_aead_limit_reached := true}\nelse {if fml:ec = 0x10 {is_no_viable_path := true}\nelse {if fml:ec = 0x53F8 {is_version_negociation_error := true; is_no_error := false}\nelse {is_crypto_error := true; is_no_error := false}}}}}}}}}}}}}}}}}}",
        "{}",
        "{receiving_sizeKnown(fml:id) := false; receiving_resetRecvd(fml:id) := false; receiving_dataRecvd(fml:id) := true}",
        "{}",
        "<<<\n\t        `fml:s` = (`servers.server.idx`) `fml:a`.size();\n\t    >>>",
        "local loc:0 {call loc:0 := socket_endpoint(fml:host, fml:s); local loc:dst {loc:dst := loc:0; local loc:idx {loc:idx := prot.arr.begin(fml:pkts); while loc:idx < prot.arr.end(fml:pkts)\n{local loc:ppkt {loc:ppkt := prot.arr.value(fml:pkts,loc:idx); local loc:0 {call loc:0 := src_tls_id(loc:dst); local loc:tls_id {loc:tls_id := loc:0; local loc:header {loc:header := stream_data.value(loc:ppkt,0); local loc:hdr_type {loc:hdr_type := bfe[0][6](stream_data.value(loc:ppkt,0)); local loc:tt {loc:tt := bvand(loc:hdr_type,0x30); local loc:is_long {loc:is_long := bvand(0x80:byte,loc:header) ~= 0; local loc:version {loc:version := stream_data.segment(loc:ppkt,1,1 + 4); local loc:0 {call loc:0 := bytes_to_version(loc:version); local loc:bversion {loc:bversion := loc:0; local loc:ptype {loc:ptype := bvand(0x30:byte,loc:header); call recv_packet_victim(fml:host, fml:src, loc:dst, loc:ppkt); call victim_agent.ppkt_recvd := forged_pkts.append(victim_agent.ppkt_recvd, loc:ppkt); call loc:idx := prot.idx.next(loc:idx)}}}}}}}}}}}}}}}",
        "<<<\n\t        if (0 <= `fml:x` && `fml:x` < (`tls.handshakes.domain`)`fml:a`.size()) \n\t            `fml:y` = `fml:a`[`fml:x`];\n\t    >>>",
        "assert 0:idx <= fml:s",
        "<<<\n                for (unsigned i = 0; i < `fml:b`.size(); i++)\n\t            `fml:a`.push_back(`fml:b`[i]);\n            >>>",
        "{max_packet_size.is_set(fml:s) := true; max_packet_size.value(fml:s) := fml:p}",
        "assert 0:quic_packet_retry.idx < fml:x",
        "assert arr_streamid_s.end(fml:a) = 0",
        "{}",
        "{assert fml:x < fml:y & (fml:x < Y -> fml:y <= Y); assert quic_packet.idx.succ(fml:x,fml:y)}",
        "{}",
        "<<<\n                for (unsigned i = 0; i < `fml:a`.size()/2; i++) {\n                    std::swap(`fml:a`[i],`fml:a`[`fml:a`.size()-i-1]);\n                }\n            >>>",
        "{assert tls_hand_extensions.end(fml:a) > tls_hand_extensions.end(old_fml:a) & ~(tls_hand_extensions.end(old_fml:a) < X & X < tls_hand_extensions.end(fml:a)); assert 0:tls_hand_extensions.domain <= X & X < tls_hand_extensions.end(old_fml:a) -> tls_hand_extensions.value(fml:a,X) = tls_hand_extensions.value(old_fml:a,X); assert tls_hand_extensions.value(fml:a,tls_hand_extensions.end(old_fml:a)) = fml:v}",
        "{assert frame.ack_ecn.range.arr.end(fml:a) = fml:s; assert 0:frame.ack_ecn.range.idx <= X & X < frame.ack_ecn.range.arr.end(old_fml:a) -> frame.ack_ecn.range.arr.value(fml:a,X) = frame.ack_ecn.range.arr.value(old_fml:a,X); assert frame.ack_ecn.range.arr.end(old_fml:a) <= X & X < fml:s -> frame.ack_ecn.range.arr.value(fml:a,X) = fml:v}",
        "{}",
        "{assert forged_protected_quic_packet.retired_cids.end(fml:a) = forged_protected_quic_packet.retired_cids.end(old_fml:a); assert forged_protected_quic_packet.retired_cids.value(fml:a,X) = (fml:y if (X = fml:x) else forged_protected_quic_packet.retired_cids.value(old_fml:a,X))}",
        "assert 0:idx_s < fml:x",
        "fml:y := fml:x + 1",
        "assert quic_packet_0rtt.arr.end(fml:a) = 0",
        "<<<\n\t        if (0 <= `fml:x` && `fml:x` < (`frame.ack.range.idx`)`fml:a`.size()) \n\t            `fml:y` = `fml:a`[`fml:x`];\n\t    >>>",
        "{}",
        "<<<\n                if ((`stream_pos`)`fml:a`.size() > 0)\n                    `fml:res` = `fml:a`.back();\n            >>>",
        "{}",
        "<<<\n\t        if (0 <= `fml:x` && `fml:x` < (`idx_r`)`fml:a`.size()) \n\t            `fml:a`[`fml:x`] = `fml:y`;\n\t    >>>",
        "{}",
        "<<<\n    val = b;\n    >>>",
        "assert forged_quic_packet_retry.arr.end(fml:a) = 0",
        "assert 0:forged_quic_packet_vn.idx < fml:x",
        "assert fml:s = vector[tls.handshake].end(fml:a)",
        "<<<\n                if ((`servers.server.idx`)`fml:a`.size() > 0)\n                    `fml:res` = `fml:a`.back();\n            >>>",
        "fml:y := fml:x + 1",
        "<<<\n                const char * command = \"sudo iptables -t nat -L -n -v;sudo iptables -t nat -F >/dev/null 2>&1\"; \n                int cr = system( command );\n            >>>",
        "assert 0:vector[tls.extension].domain <= fml:x & fml:x < vector[tls.extension].end(fml:a)",
        "fml:res := quic_packet.ptype(fml:pkt) ~= quic_packet_type.one_rtt",
        "assert 0:tls_api.id < fml:x",
        "{}",
        "<<<\n\t        unsigned __old_size = `fml:a`.size();\n\t        `fml:a`.resize(`fml:s`);\n\t        for (unsigned i = __old_size; i < (unsigned)`fml:s`; i++)\n\t            `fml:a`[i] = v;\n            >>>",
        "{assert vector[transport_parameter].end(fml:a) = fml:s; assert 0:vector[transport_parameter].domain <= X & X < vector[transport_parameter].end(old_fml:a) -> vector[transport_parameter].value(fml:a,X) = vector[transport_parameter].value(old_fml:a,X); assert vector[transport_parameter].end(old_fml:a) <= X & X < fml:s -> vector[transport_parameter].value(fml:a,X) = fml:v}",
        "{}",
        "{}",
        "{}",
        "assert 0:vector[tls.compression_method].domain <= fml:s",
        "<<<\n\t    `quic_ser_forged` ser;\n\t    __ser(ser,x);\n\t    y.resize(ser.res.size());\n\t    for (unsigned i = 0; i < ser.res.size(); i++)\n\t        y[i] = (unsigned char) ser.res[i];\n//\t    std::copy(ser.res.begin(),ser.res.end(),y.begin());\n\t    >>>",
        "fml:y := fml:x + 1",
        "{assert fml:y < fml:x & (Y:quic_packet_retry.idx < fml:x -> Y <= fml:y); assert quic_packet_retry.idx.succ(fml:y,fml:x)}",
        "{}",
        "call fml:s := net.impl.listen(fml:me, fml:addr)",
        "fml:y := fml:x + 1",
        "fml:y := fml:x + 1",
        "<<<\n\t        if (`fml:a`.size() > 0) {\n\t            a.pop_back();\n\t        }\n            >>>",
        "assert vector[tls.compression_method].end(fml:a) = fml:s & vector[tls.compression_method].value(fml:a,X) = fml:y",
        "{}",
        "fml:y := fml:x - 1",
        "fml:y := fml:x + 1",
        "{assert vector[tls.handshake].end(fml:a) = fml:s; assert 0:vector[tls.handshake].domain <= X & X < vector[tls.handshake].end(old_fml:a) -> vector[tls.handshake].value(fml:a,X) = vector[tls.handshake].value(old_fml:a,X); assert vector[tls.handshake].end(old_fml:a) <= X & X < fml:s -> vector[tls.handshake].value(fml:a,X) = fml:v}",
        "{}",
        "{}",
        "{assert clients.client.arr.end(fml:a) > clients.client.arr.end(old_fml:a) & ~(clients.client.arr.end(old_fml:a) < X & X < clients.client.arr.end(fml:a)); assert 0:clients.client.idx <= X & X < clients.client.arr.end(old_fml:a) -> clients.client.arr.value(fml:a,X) = clients.client.arr.value(old_fml:a,X); assert clients.client.arr.value(fml:a,clients.client.arr.end(old_fml:a)) = fml:v}",
        "{}",
        "<<<\n\t        `fml:a`.resize(`fml:s`);\n\t        for (unsigned i = 0; i < `fml:s`; i++)\n\t            `fml:a`[i] = y;\n\t    >>>",
        "{}",
        "{packed_forwarded_arr(fml:pkt) := true; call mim_agent.ppkt_to_be_forwarded_to_client(mim_agent.last_cppkt_forwarded_to_client) := forged_pkts.empty; mim_agent.force_server_forward := false; mim_agent.forward_turn := false}",
        "{assert vector[tls.compression_method].end(fml:a) = fml:s; assert 0:vector[tls.compression_method].domain <= X & X < vector[tls.compression_method].end(old_fml:a) -> vector[tls.compression_method].value(fml:a,X) = vector[tls.compression_method].value(old_fml:a,X); assert vector[tls.compression_method].end(old_fml:a) <= X & X < fml:s -> vector[tls.compression_method].value(fml:a,X) = fml:v}",
        "{}",
        "{}",
        "fake_client.ep := fml:e",
        "assert 0:tls_hand_extensions.domain <= fml:x & fml:x < tls_hand_extensions.end(fml:a)",
        "{}",
        "assert fml:s = forged_quic_packet_retry.retired_cids.end(fml:a)",
        "<<<\n\t        if (0 <= `fml:x` && `fml:x` < (`idx_s`)`fml:a`.size()) \n\t            `fml:y` = `fml:a`[`fml:x`];\n\t    >>>",
        "assert 0:tls_extensions.domain <= fml:s",
        "{}",
        "{}",
        "{call client_initial_scil := scid_size_pos(false); local loc:0,loc:1 {call loc:0 := dcid_size_cl(retry_response(the_cid)); call loc:1 := cid_to_bytes(fml:nonce, loc:0); local loc:ikm {loc:ikm := loc:1; local loc:0 {call loc:0 := stream_data.empty; local loc:salt {loc:salt := loc:0; if fml:pversion = 0xfaceb002 | fml:pversion = 0xff00001b | fml:pversion = 0xff00001c {call loc:salt := stream_data.append(loc:salt, 0xc3:byte); call loc:salt := stream_data.append(loc:salt, 0xee:byte); call loc:salt := stream_data.append(loc:salt, 0xf7:byte); call loc:salt := stream_data.append(loc:salt, 0x12:byte); call loc:salt := stream_data.append(loc:salt, 0xc7:byte); call loc:salt := stream_data.append(loc:salt, 0x2e:byte); call loc:salt := stream_data.append(loc:salt, 0xbb:byte); call loc:salt := stream_data.append(loc:salt, 0x5a:byte); call loc:salt := stream_data.append(loc:salt, 0x11:byte); call loc:salt := stream_data.append(loc:salt, 0xa7:byte); call loc:salt := stream_data.append(loc:salt, 0xd2:byte); call loc:salt := stream_data.append(loc:salt, 0x43:byte); call loc:salt := stream_data.append(loc:salt, 0x2b:byte); call loc:salt := stream_data.append(loc:salt, 0xb4:byte); call loc:salt := stream_data.append(loc:salt, 0x63:byte); call loc:salt := stream_data.append(loc:salt, 0x65:byte); call loc:salt := stream_data.append(loc:salt, 0xbe:byte); call loc:salt := stream_data.append(loc:salt, 0xf9:byte); call loc:salt := stream_data.append(loc:salt, 0xf5:byte); call loc:salt := stream_data.append(loc:salt, 0x02:byte)}\nelse {if fml:pversion = 0xff00001d {call loc:salt := stream_data.append(loc:salt, 0xaf:byte); call loc:salt := stream_data.append(loc:salt, 0xbf:byte); call loc:salt := stream_data.append(loc:salt, 0xec:byte); call loc:salt := stream_data.append(loc:salt, 0x28:byte); call loc:salt := stream_data.append(loc:salt, 0x99:byte); call loc:salt := stream_data.append(loc:salt, 0x93:byte); call loc:salt := stream_data.append(loc:salt, 0xd2:byte); call loc:salt := stream_data.append(loc:salt, 0x4c:byte); call loc:salt := stream_data.append(loc:salt, 0x9e:byte); call loc:salt := stream_data.append(loc:salt, 0x97:byte); call loc:salt := stream_data.append(loc:salt, 0x86:byte); call loc:salt := stream_data.append(loc:salt, 0xf1:byte); call loc:salt := stream_data.append(loc:salt, 0x9c:byte); call loc:salt := stream_data.append(loc:salt, 0x61:byte); call loc:salt := stream_data.append(loc:salt, 0x11:byte); call loc:salt := stream_data.append(loc:salt, 0xe0:byte); call loc:salt := stream_data.append(loc:salt, 0x43:byte); call loc:salt := stream_data.append(loc:salt, 0x90:byte); call loc:salt := stream_data.append(loc:salt, 0xa8:byte); call loc:salt := stream_data.append(loc:salt, 0x99:byte)}\nelse {if fml:pversion = 0x00000001 | fml:pversion = 0xff000022 {call loc:salt := stream_data.append(loc:salt, 0x38:byte); call loc:salt := stream_data.append(loc:salt, 0x76:byte); call loc:salt := stream_data.append(loc:salt, 0x2c:byte); call loc:salt := stream_data.append(loc:salt, 0xf7:byte); call loc:salt := stream_data.append(loc:salt, 0xf5:byte); call loc:salt := stream_data.append(loc:salt, 0x59:byte); call loc:salt := stream_data.append(loc:salt, 0x34:byte); call loc:salt := stream_data.append(loc:salt, 0xb3:byte); call loc:salt := stream_data.append(loc:salt, 0x4d:byte); call loc:salt := stream_data.append(loc:salt, 0x17:byte); call loc:salt := stream_data.append(loc:salt, 0x9a:byte); call loc:salt := stream_data.append(loc:salt, 0xe6:byte); call loc:salt := stream_data.append(loc:salt, 0xa4:byte); call loc:salt := stream_data.append(loc:salt, 0xc8:byte); call loc:salt := stream_data.append(loc:salt, 0x0c:byte); call loc:salt := stream_data.append(loc:salt, 0xad:byte); call loc:salt := stream_data.append(loc:salt, 0xcc:byte); call loc:salt := stream_data.append(loc:salt, 0xbb:byte); call loc:salt := stream_data.append(loc:salt, 0x7f:byte); call loc:salt := stream_data.append(loc:salt, 0x0a:byte)}}}; call tls_api.upper.set_initial_keys(fml:id, loc:salt, loc:ikm)}}}}}",
        "<<<\n\t        unsigned __old_size = `fml:a`.size();\n\t        `fml:a`.resize(`fml:s`);\n\t        for (unsigned i = __old_size; i < (unsigned)`fml:s`; i++)\n\t            `fml:a`[i] = v;\n            >>>",
        "<<<\n                for (unsigned i = 0; i < `fml:a`.size()/2; i++) {\n                    std::swap(`fml:a`[i],`fml:a`[`fml:a`.size()-i-1]);\n                }\n            >>>",
        "fml:y := fml:x + 1",
        "{}",
        "<<<\n        z = x ^ y;\n        >>>",
        "http_request_file.contents := fml:d",
        "{initial_max_stream_id_bidi.is_set(fml:s) := true; initial_max_stream_id_bidi.value(fml:s) := fml:p}",
        "<<<\n\t        unsigned __old_size = `fml:a`.size();\n\t        `fml:a`.resize(`fml:s`);\n\t        for (unsigned i = __old_size; i < (unsigned)`fml:s`; i++)\n\t            `fml:a`[i] = v;\n            >>>",
        "<<<\n\t    >>>",
        "assert 0:forged_quic_packet.idx <= fml:s",
        "assert 0:index <= fml:x & fml:x < cids.end(fml:a)",
        "{assert quic_packet_vn.arr.end(fml:a) = fml:s; assert 0:quic_packet_vn.idx <= X & X < quic_packet_vn.arr.end(old_fml:a) -> quic_packet_vn.arr.value(fml:a,X) = quic_packet_vn.arr.value(old_fml:a,X); assert quic_packet_vn.arr.end(old_fml:a) <= X & X < fml:s -> quic_packet_vn.arr.value(fml:a,X) = fml:v}",
        "<<<\n                for (unsigned i = 0; i < `fml:b`.size(); i++)\n\t            `fml:a`.push_back(`fml:b`[i]);\n            >>>",
        "assert quic_packet_0rtt.retired_cids.value(fml:a,fml:x) = fml:y",
        "<<<\n\t        `fml:a`.push_back(`fml:v`);\n            >>>",
        "assert 0:vector[transport_parameter].domain <= fml:x & fml:x < vector[transport_parameter].end(fml:a)",
        "fml:y := fml:x - 1",
        "<<<\n                if ((`quic_packet_0rtt.idx`)`fml:a`.size() > 0)\n                    `fml:res` = `fml:a`.back();\n            >>>",
        "<<<\n                for (unsigned i = 0; i < `fml:b`.size(); i++)\n\t            `fml:a`.push_back(`fml:b`[i]);\n            >>>",
        "<<<\n\t        unsigned __old_size = `fml:a`.size();\n\t        `fml:a`.resize(`fml:s`);\n\t        for (unsigned i = __old_size; i < (unsigned)`fml:s`; i++)\n\t            `fml:a`[i] = v;\n            >>>",
        "{}",
        "<<<\n       srand((unsigned) time(0)); //fixed or random seed ?\n       res = 0;\n       res = ::rand()% (max-min+1) + min;\n       std::cerr << \"between random: \" << res << \"\\n\";\n       >>>",
        "<<<\n                if ((`idx_r`)`fml:a`.size() > 0)\n                    `fml:res` = `fml:a`.back();\n            >>>",
        "<<<\n\t        if (`fml:a`.size() > 0) {\n\t            a.pop_back();\n\t        }\n            >>>",
        "<<<\n\t        `fml:a`.resize(`fml:s`);\n\t        for (unsigned i = 0; i < `fml:s`; i++)\n\t            `fml:a`[i] = y;\n\t    >>>",
        "local loc:dcid {loc:dcid := forged_quic_packet_retry.dst_cid(fml:pkt); local loc:scid {loc:scid := forged_quic_packet_retry.src_cid(fml:pkt); if cid_mapped(loc:dcid) {loc:dcid := cid_to_aid(loc:dcid)}; if fml:src = client_alt | fml:dst = client_alt {migration_done := true}; if ~_generating {local loc:0,loc:1,loc:2 {call loc:0 := scid_size_pos(true); call loc:1 := dcid_size_pos(true); call loc:2 := prot.retry_integrity_tag(8:stream_pos, server_cid, forged_quic_packet_retry.pversion(fml:pkt), loc:0, loc:dcid, loc:1, loc:scid, forged_quic_packet_retry.token(fml:pkt), last_pkt_num(loc:scid,quic_packet_type.initial), header_retry, token_saved); local loc:expected_itoken {loc:expected_itoken := loc:2; local loc:0 {call loc:0 := bytes_to_itoken(loc:expected_itoken); assert loc:0 = forged_quic_packet_retry.integrity_token(fml:pkt)}}}}; assert forged_quic_packet_retry.ptype(fml:pkt) = quic_packet_type.retry}}",
        "{}",
        "{}",
        "assert frame.arr.end(fml:a) = fml:s & frame.arr.value(fml:a,X) = fml:y",
        "{}",
        "assert 0:frame.ack.range.idx < fml:x",
        "local loc:dcid {loc:dcid := quic_packet.dst_cid(fml:pkt); local loc:0 {call loc:0 := quic_packet.long(fml:pkt); local loc:scid {loc:scid := (quic_packet.src_cid(fml:pkt) if loc:0 else connected_to(loc:dcid)); if cid_mapped(loc:dcid) {loc:dcid := cid_to_aid(loc:dcid)}; if quic_packet.ptype(fml:pkt) = quic_packet_type.initial {initial_token := quic_packet.token(fml:pkt); if ~conn_seen(loc:dcid) {if ~zero_rtt_sent {call show_initial_request_initial; local loc:0 {call loc:0 := src_tls_id(fml:src); call tls_client_initial_request(fml:src, fml:dst, loc:dcid, quic_packet.pversion(fml:pkt), loc:0)}}; conn_requested(fml:src,fml:dst,loc:scid) := true}; cid_to_token(loc:dcid) := quic_packet.token(fml:pkt)}; conn_seen(loc:scid) := true; if queued_ack_eliciting(loc:scid) {ack_credit(loc:dcid) := ack_credit(loc:dcid) + 1}; if ~queued_non_ack(loc:scid) {ack_credit(loc:scid) := ack_credit(loc:scid) - 1}; if queued_non_probing(loc:scid) {if quic_packet.ptype(fml:pkt) = quic_packet_type.one_rtt {if quic_packet.seq_num(fml:pkt) >= hi_non_probing(loc:scid) {hi_non_probing(loc:scid) := quic_packet.seq_num(fml:pkt); hi_non_probing_endpoint(loc:scid,fml:src) := true}}\nelse {hi_non_probing_endpoint(loc:scid,fml:src) := true}}; if queued_close(loc:scid) {pkt_has_close(loc:scid,quic_packet.ptype(fml:pkt),quic_packet.seq_num(fml:pkt)) := true}; if conn_draining(loc:scid) {draining_pkt_sent(loc:scid) := true}; if quic_packet.ptype(fml:pkt) = quic_packet_type.initial & ~first_initial_send & zero_rtt_allowed {first_initial_send := true; initial_scid := loc:scid; initial_dcid := loc:dcid; queued_level(the_cid) := quic_packet_type.zero_rtt}\nelse {first_initial_send := false}; call queued_frames(loc:scid) := frame.arr.empty; queued_non_probing(loc:scid) := false; queued_non_ack(loc:scid) := false; queued_close(loc:scid) := false; num_queued_frames(loc:scid) := 0:frame.idx; queued_ack_eliciting(loc:scid) := false}}}",
        "{}",
        "{assert quic_packet_coal_0rtt.arr.end(fml:a) > quic_packet_coal_0rtt.arr.end(old_fml:a) & ~(quic_packet_coal_0rtt.arr.end(old_fml:a) < X & X < quic_packet_coal_0rtt.arr.end(fml:a)); assert 0:quic_packet_coal_0rtt.idx <= X & X < quic_packet_coal_0rtt.arr.end(old_fml:a) -> quic_packet_coal_0rtt.arr.value(fml:a,X) = quic_packet_coal_0rtt.arr.value(old_fml:a,X); assert quic_packet_coal_0rtt.arr.value(fml:a,quic_packet_coal_0rtt.arr.end(old_fml:a)) = fml:v}",
        "<<<\n                if ((`quic_packet_coal_0rtt.idx`)`fml:a`.size() > 0)\n                    `fml:res` = `fml:a`.back();\n            >>>",
        "<<<\n\t    >>>",
        "assert 0:frame.ack_ecn.range.idx < fml:x",
        "call fml:s := net.impl.open(fml:me, fml:addr)",
        "{}",
        "{assert connected(fml:dcid) & connected_to(fml:dcid) = fml:scid; assert fml:lo < fml:hi & fml:lo = crypto_pos(fml:dcid,fml:e) & fml:hi <= crypto_length(fml:scid,fml:e)}",
        "{assert fml:y < fml:x & (Y:idx_r < fml:x -> Y <= fml:y); assert idx_r.succ(fml:y,fml:x)}",
        "{}",
        "local loc:0 {call loc:0 := prot.get_header_info(fml:pkt, true); local loc:h {loc:h := loc:0; call prot.show_header(loc:h); local loc:0 {call loc:0 := prot.get_level(fml:pkt); local loc:level {loc:level := loc:0; if loc:level = 1 & ~zrtt_pkt_set {zrtt_pkt_set := true; last_zrtt_pkt := fml:pkt}; local loc:0 {call loc:0 := tls_api.upper.iv_size(fml:c, loc:level); local loc:sample_size {loc:sample_size := loc:0; if ~zrtt_pkt_process & loc:level = 1 {tls_api.upper.ok(fml:res) := false}\nelse {if loc:sample_size = 0 {tls_api.upper.ok(fml:res) := false}\nelse {local loc:pnum_pos {loc:pnum_pos := prot.pkt_num_pos(loc:h); local loc:sample_pos {loc:sample_pos := loc:pnum_pos + 4; if loc:sample_pos + loc:sample_size > stream_data.end(fml:pkt) {loc:sample_pos := stream_data.end(fml:pkt) - loc:sample_size}; local loc:sample {loc:sample := stream_data.segment(fml:pkt,loc:sample_pos,loc:sample_pos + loc:sample_size); local loc:pnum {loc:pnum := stream_data.segment(fml:pkt,loc:pnum_pos,loc:pnum_pos + 4); local loc:0 {call loc:0 := stream_data.empty; local loc:mask {loc:mask := loc:0; local loc:0 {call loc:0 := stream_data.resize(loc:mask, 5:stream_pos, 0:byte); call loc:mask := tls_api.upper.encrypt_cipher(fml:c, loc:level, loc:0, loc:sample, true)}; local loc:byte0_mask {loc:byte0_mask := bvand(stream_data.value(loc:mask,0),(0x0f if prot.hdr_long(loc:h) else 0x1f)); local loc:hdr {loc:hdr := stream_data.segment(fml:pkt,0,loc:pnum_pos); local loc:0 {call loc:0 := prot.byte_xor(stream_data.value(loc:hdr,0), loc:byte0_mask); call loc:hdr := stream_data.set(loc:hdr, 0:stream_pos, loc:0)}; local loc:0 {call loc:0 := prot.get_pnum_len_b(loc:hdr); local loc:pnum_len {loc:pnum_len := loc:0; last_datagram_received_size := last_datagram_received_size + prot.payload_length(loc:h) + prot.pkt_num_pos(loc:h) + loc:pnum_len; call prot.show_token_len(loc:pnum_len); call loc:pnum := prot.stream_data_xor(stream_data.segment(fml:pkt,loc:pnum_pos,loc:pnum_pos + loc:pnum_len), stream_data.segment(loc:mask,1,1 + loc:pnum_len)); call loc:hdr := stream_data.extend(loc:hdr, loc:pnum); local loc:0 {call loc:0 := prot.get_pnum(loc:pnum, 0:stream_pos, loc:pnum_len); local loc:new_seq {loc:new_seq := loc:0; call loc:new_seq := prot.correct_pnum(fml:seq, loc:new_seq, loc:pnum_len); local loc:pyld {loc:pyld := stream_data.segment(fml:pkt,loc:pnum_pos + loc:pnum_len,stream_data.end(fml:pkt)); call fml:res := tls_api.upper.decrypt_aead(fml:c, loc:level, loc:pyld, loc:new_seq, loc:hdr); if tls_api.upper.ok(fml:res) {if prot.hdr_long(loc:h) {local loc:0 {call loc:0 := prot.to_var_int_16(prot.payload_length(loc:h) - 16); local loc:new_len {loc:new_len := loc:0; call loc:hdr := stream_data.resize(loc:hdr, prot.payload_length_pos(loc:h), 0:byte); call loc:hdr := stream_data.extend(loc:hdr, loc:new_len); call loc:hdr := stream_data.extend(loc:hdr, loc:pnum)}}}; tls_api.upper.payload(fml:res) := tls_api.upper.data(fml:res); call tls_api.upper.data(fml:res) := stream_data.extend(loc:hdr, tls_api.upper.data(fml:res))}}}}}}}}}}}}}}}}}}}}}}",
        "{}",
        "{}",
        "<<<\n       res = 0;\n       srand((unsigned) time(0)); //fixed or random seed ?\n       res = ::rand()%(max-1) + 0;\n       std::cerr << \"lower random: \" << res << \"\\n\";\n       >>>",
        "{}",
        "<<<\n\t        `fml:a`.resize(`fml:s`);\n\t        for (unsigned i = 0; i < `fml:s`; i++)\n\t            `fml:a`[i] = y;\n\t    >>>",
        "<<<\n\t        if (`fml:a`.size() > 0) {\n\t            a.pop_back();\n\t        }\n            >>>",
        "{}",
        "{}",
        "{}",
        "<<<\n\t        `fml:a`.push_back(`fml:v`);\n            >>>",
        "{assert quic_packet_coal_0rtt.retired_cids.end(fml:a) > quic_packet_coal_0rtt.retired_cids.end(old_fml:a) & ~(quic_packet_coal_0rtt.retired_cids.end(old_fml:a) < X & X < quic_packet_coal_0rtt.retired_cids.end(fml:a)); assert 0:quic_packet_coal_0rtt.idx <= X & X < quic_packet_coal_0rtt.retired_cids.end(old_fml:a) -> quic_packet_coal_0rtt.retired_cids.value(fml:a,X) = quic_packet_coal_0rtt.retired_cids.value(old_fml:a,X); assert quic_packet_coal_0rtt.retired_cids.value(fml:a,quic_packet_coal_0rtt.retired_cids.end(old_fml:a)) = fml:v}",
        "{}",
        "{}",
        "<<<\n                for (unsigned i = 0; i < `fml:a`.size()/2; i++) {\n                    std::swap(`fml:a`[i],`fml:a`[`fml:a`.size()-i-1]);\n                }\n            >>>",
        "<<<\n            const char * session_file = getenv(\"NEW_TOKEN_FILE\");\n            FILE *fp;\n            size_t len = 0;\n            ssize_t read;\n            char * line = NULL;\n            if(session_file != NULL) {\n                fp = fopen(session_file,\"r\");\n                read = getline(&line, &len, fp);\n                fclose(fp);\n                bool is_error = false;\n                if(line != NULL) { \n                    // std::cerr << \"NEW_TOKEN_FILE 1 \" << line << std::endl;\n                    int hex_len = strlen(line);\n                    // std::cerr << \"NEW_TOKEN_FILE hex_len \" << hex_len << std::endl;\n                    uint8_t secret[hex_len/2];\n                    for (int j = 0; j < hex_len/2; j++) {\n                        int a = ws_xton(line[j*2]);\n                        int b = ws_xton(line[j*2 + 1]);\n                        if (a == -1 || b == -1) {\n                            is_error = true;\n                            std::cerr << \"a ERROR \" << line[j*2] << std::endl;\n                            std::cerr << \"b ERROR \" << line[j*2 + 1] << std::endl;\n                            std::cerr << \"NEW_TOKEN_FILE ERROR \" << std::endl;\n                            break;\n                        }\n                        secret[j] = a << 4 | b;\n                        // std::cerr << \"NEW_TOKEN_FILE a \" << a << std::endl;\n                        // std::cerr << \"NEW_TOKEN_FILE b \" << b << std::endl;\n                        // std::cerr << \"NEW_TOKEN_FILE secret[j] \" << secret[j] << std::endl;\n                    }  \n                    //std::cerr << \"NEW_TOKEN_FILE 2 \" << secret << std::endl;\n                    /*for(int i = (hex_len/2)-1; i >=0 && !is_error; i--)\n                        b.push_back(secret[i]);*/\n                    for(int i = 0; i < hex_len/2 && !is_error; i++)\n                        b.push_back(secret[i]);\n                }\n            }\n        >>>",
        "<<<\n\t        `fml:a`.push_back(`fml:v`);\n            >>>",
        "<<<\n\t        if (0 <= `fml:x` && `fml:x` < (`quic_packet_retry.idx`)`fml:a`.size()) \n\t            `fml:y` = `fml:a`[`fml:x`];\n\t    >>>",
        "<<<\n\t        `fml:s` = (`idx_r`) `fml:a`.size();\n\t    >>>",
        "<<<\n\t    >>>",
        "{}",
        "assert 0:quic_packet_0rtt.idx <= fml:x & fml:x < quic_packet_0rtt.arr.end(fml:a)",
        "call http_request_file.synced(fml:c)",
        "{}",
        "{initial_max_stream_data_uni.is_set(fml:s) := true; initial_max_stream_data_uni.value(fml:s) := fml:p}",
        "<<<\n       srand((unsigned) time(0)); //fixed or random seed ?\n       res = 0;\n       res = ::rand()%32767 + (min+1);\n       std::cerr << \"greater random: \" << res << \"\\n\";\n       >>>",
        "<<<\n\t        if (`fml:a`.size() > 0) {\n\t            a.pop_back();\n\t        }\n            >>>",
        "{}",
        "<<<\n\t        `fml:s` = (`index`) `fml:a`.size();\n\t    >>>",
        "<<<\n\t        if (0 <= `fml:x` && `fml:x` < (`servers.server.idx`)`fml:a`.size()) \n\t            `fml:y` = `fml:a`[`fml:x`];\n\t    >>>",
        "{}",
        "<<<        // TODO: implement this\n        //picotls_connection *s = `tls_api.upper.foo.cid_map`[c];\n        std::cerr << \"upper.send s \"   << \"\\n\";\n        >>>",
        "<<<\n       // 128 + 40 (38..) bit = 2^168 value = 21 bytes\n       srand((unsigned) time(0)); //fixed or random seed ?\n       res.resize(len);\n       for (unsigned i = 0; i < len; i++) {\n         res[len-i-1] =  0xff & ::rand()%(max-min+1) + min;\n       }\n       std::cerr << \"between random: \" << res << \"\\n\";\n       >>>",
        "{assert connected(fml:dcid) & connected_to(fml:dcid) = fml:scid; assert fml:e = quic_packet_type.one_rtt & established_1rtt_keys(fml:scid); assert num_queued_frames(fml:scid) > 0 -> fml:e = queued_level(fml:scid); assert ~conn_closed(fml:scid); assert connected(fml:scid) & connected_to(fml:scid) = fml:dcid; if ~_generating {assert stream_seen(fml:dcid,frame.stop_sending.id(fml:f)); local loc:0 {call loc:0 := stream_id_allowed(fml:dcid, frame.stop_sending.id(fml:f), fml:e); assert loc:0}}}",
        "assert forged_pkts.end(fml:a) = 0",
        "<<<\n\t        if (0 <= `fml:x` && `fml:x` < (`quic_packet_vn.idx`)`fml:a`.size()) \n\t            `fml:y` = `fml:a`[`fml:x`];\n\t    >>>",
        "{}",
        "<<<\n\t        if (0 <= `fml:x` && `fml:x` < (`index`)`fml:a`.size()) \n\t            `fml:a`[`fml:x`] = `fml:y`;\n\t    >>>",
        "<<<\n\t        if (`fml:a`.size() > 0) {\n\t            a.pop_back();\n\t        }\n            >>>",
        "{assert arr_pkt_num_r.end(fml:a) = arr_pkt_num_r.end(old_fml:a); assert arr_pkt_num_r.value(fml:a,X) = (fml:y if (X = fml:x) else arr_pkt_num_r.value(old_fml:a,X))}",
        "<<<\n\t        `fml:a`.resize(`fml:s`);\n\t        for (unsigned i = 0; i < `fml:s`; i++)\n\t            `fml:a`[i] = y;\n\t    >>>",
        "<<<\n                for (unsigned i = 0; i < `fml:b`.size(); i++)\n\t            `fml:a`.push_back(`fml:b`[i]);\n            >>>",
        "{}",
        "{}",
        "{}",
        "{}",
        "{}",
        "{}",
        "<<<\n    res = c.val;\n    >>>",
        "{}",
        "{}",
        "{assert fml:y < fml:x & (Y:replayed_quic_packet_0rtt.idx < fml:x -> Y <= fml:y); assert replayed_quic_packet_0rtt.idx.succ(fml:y,fml:x)}",
        "<<<\n                for (unsigned i = 0; i < `fml:a`.size()/2; i++) {\n                    std::swap(`fml:a`[i],`fml:a`[`fml:a`.size()-i-1]);\n                }\n            >>>",
        "<<<\n\t        if (0 <= `fml:x` && `fml:x` < (`forged_quic_packet.idx`)`fml:a`.size()) \n\t            `fml:y` = `fml:a`[`fml:x`];\n\t    >>>",
        "<<<\n\t        `fml:a`.resize(`fml:s`);\n\t        for (unsigned i = 0; i < `fml:s`; i++)\n\t            `fml:a`[i] = y;\n\t    >>>",
        "assert 0:index <= fml:x & fml:x < ip_endpoints.end(fml:a)",
        "assert frame.arr.end(fml:a) = 0",
        "assert fml:s = vector[tls.psk_identity].end(fml:a)",
        "{}",
        "<<<        std::cerr << \"iv_size start \" << \"\\n\";\n        std::cerr << \"iv_size cid \" <<  c << \"\\n\";\n        std::cerr << \"iv_size level \" << l <<  \"\\n\";\n\t    picotls_connection *s = `tls_api.upper.foo.cid_map`[c];\n        ptls_cipher_context_t *pn_enc = (ptls_cipher_context_t *)(s->crypto_context[l].pn_enc);\n        if (!pn_enc)\n            pn_enc = (ptls_cipher_context_t *)(s->crypto_context[l].pn_dec);\n        if (!pn_enc) {\n            std::cerr << \"cipher for level \" << l << \" is not set\\n\";\n            sz = 0;\n        }\n        else sz = pn_enc->algo->iv_size;\n        std::cerr << \"iv_size end \" << sz << \"\\n\";\n        >>>",
        "fml:y := fml:x + 1",
        "assert bytes.value(fml:a,fml:x) = fml:y",
        "{}",
        "<<<\n                if ((`index`)`fml:a`.size() > 0)\n                    `fml:res` = `fml:a`.back();\n            >>>",
        "{assert fml:x < fml:y & (fml:x < Y -> fml:y <= Y); assert clients.client.idx.succ(fml:x,fml:y)}",
        "{}",
        "assert 0:prot.idx <= fml:x & fml:x < prot.arr.end(fml:a)",
        "{if ~reset_frame_restransmitted(fml:id) {receiving_recv(fml:id) := false; receiving_sizeKnown(fml:id) := false; receiving_dataRecvd(fml:id) := false; receiving_resetRecvd(fml:id) := true}; call lastest_stream_id_receiving(fml:seq) := arr_streamid_r.append(lastest_stream_id_receiving(fml:seq), fml:id); call lastest_pkt_num_receiving := arr_pkt_num_r.append(lastest_pkt_num_receiving, fml:seq)}",
        "{}",
        "{}",
        "{}",
        "{}",
        "local loc:0 {call loc:0 := prot.get_header_info(fml:pkt, false); local loc:h {loc:h := loc:0; local loc:0 {call loc:0 := prot.get_level(fml:pkt); local loc:level {loc:level := loc:0; local loc:0 {call loc:0 := tls_api.upper.iv_size(fml:c, loc:level); local loc:sample_size {loc:sample_size := loc:0; local loc:pnum_pos {loc:pnum_pos := prot.pkt_num_pos(loc:h); local loc:0 {call loc:0 := prot.get_pnum_len(fml:pkt); local loc:pnum_len {loc:pnum_len := loc:0; local loc:hdr_len {loc:hdr_len := loc:pnum_pos + loc:pnum_len; if prot.hdr_long(loc:h) {local loc:0 {call loc:0 := prot.to_var_int_16(prot.payload_length(loc:h) + 16); local loc:new_len {loc:new_len := loc:0; call fml:pkt := stream_data.set(fml:pkt, loc:pnum_pos - 2, stream_data.value(loc:new_len,0)); call fml:pkt := stream_data.set(fml:pkt, loc:pnum_pos - 1, stream_data.value(loc:new_len,1))}}}; local loc:hdr {loc:hdr := stream_data.segment(fml:pkt,0,loc:pnum_pos); local loc:pnum {loc:pnum := stream_data.segment(fml:pkt,loc:pnum_pos,loc:hdr_len); local loc:pyld {loc:pyld := stream_data.segment(fml:pkt,loc:hdr_len,stream_data.end(fml:pkt)); local loc:auth {loc:auth := stream_data.segment(fml:pkt,0,loc:hdr_len); local loc:0 {call loc:0 := prot.get_pnum(loc:pnum, 0:stream_pos, loc:pnum_len); local loc:new_seq {loc:new_seq := loc:0; call loc:new_seq := prot.correct_pnum(fml:seq, loc:new_seq, loc:pnum_len); call loc:pyld := tls_api.upper.encrypt_aead(fml:c, loc:level, loc:pyld, loc:new_seq, loc:auth); local loc:pn_offset {loc:pn_offset := 0:stream_pos; if prot.hdr_long(loc:h) {loc:pn_offset := loc:hdr_len - loc:pnum_pos}\nelse {loc:pn_offset := 1:stream_pos + 4}; local loc:sample_pos {loc:sample_pos := 4:stream_pos - loc:pnum_len; local loc:new_pyld {loc:new_pyld := loc:pyld; if loc:sample_pos + loc:sample_size > stream_data.end(fml:pkt) {local loc:diff {loc:diff := (loc:sample_pos + loc:sample_size) - stream_data.end(loc:pyld); local loc:i {loc:i := 0:stream_pos; while loc:i < loc:diff\n{call loc:new_pyld := stream_data.append(loc:new_pyld, 0x00:byte); loc:i := loc:i + 1}; loc:pyld := loc:new_pyld}}}; local loc:sample {loc:sample := stream_data.segment(loc:pyld,loc:sample_pos,loc:sample_pos + loc:sample_size); local loc:0 {call loc:0 := stream_data.empty; local loc:mask {loc:mask := loc:0; local loc:0 {call loc:0 := stream_data.resize(loc:mask, 5:stream_pos, 0:byte); call loc:mask := tls_api.upper.encrypt_cipher(fml:c, loc:level, loc:0, loc:sample, false)}; local loc:byte0_mask {loc:byte0_mask := bvand(stream_data.value(loc:mask,0),(0x0f if prot.hdr_long(loc:h) else 0x1f)); local loc:0 {call loc:0 := prot.byte_xor(stream_data.value(fml:pkt,0), loc:byte0_mask); call loc:hdr := stream_data.set(loc:hdr, 0:stream_pos, loc:0)}; call loc:pnum := prot.stream_data_xor(stream_data.segment(fml:pkt,loc:pnum_pos,loc:pnum_pos + loc:pnum_len), stream_data.segment(loc:mask,1,1 + loc:pnum_len)); local loc:0 {call loc:0 := stream_data.extend(loc:hdr, loc:pnum); call fml:pkt := stream_data.extend(loc:0, loc:pyld)}}}}}}}}}}}}}}}}}}}}}}}}",
        "local loc:send_end {loc:send_end := fml:pos + stream_data.end(fml:data); assert ~(loc:send_end > stream_app_data_end(fml:dcid,fml:s) & stream_app_data_finished(fml:dcid,fml:s)); local loc:end {loc:end := stream_data.end(stream_app_data(fml:dcid,fml:s)); if loc:end < loc:send_end {loc:end := loc:send_end}; call stream_app_data(fml:dcid,fml:s) := stream_data.resize(stream_app_data(fml:dcid,fml:s), loc:end, 0:byte); local loc:idx {loc:idx := stream_data.begin(fml:data); while loc:idx < stream_data.end(fml:data)\n{local loc:val {loc:val := stream_data.value(stream_app_data(fml:dcid,fml:s),fml:pos + loc:idx); assert loc:val ~= 0 -> stream_data.value(fml:data,loc:idx) = loc:val; call stream_app_data(fml:dcid,fml:s) := stream_data.set(stream_app_data(fml:dcid,fml:s), fml:pos + loc:idx, stream_data.value(fml:data,loc:idx)); call loc:idx := stream_pos.next(loc:idx)}}; stream_app_data_end(fml:dcid,fml:s) := loc:end; if fml:close {stream_app_data_finished(fml:dcid,fml:s) := true}}}}",
        "<<<\n                for (unsigned i = 0; i < `fml:b`.size(); i++)\n\t            `fml:a`.push_back(`fml:b`[i]);\n            >>>",
        "{}",
        "{assert prot.arr.end(fml:a) > prot.arr.end(old_fml:a) & ~(prot.arr.end(old_fml:a) < X & X < prot.arr.end(fml:a)); assert 0:prot.idx <= X & X < prot.arr.end(old_fml:a) -> prot.arr.value(fml:a,X) = prot.arr.value(old_fml:a,X); assert prot.arr.value(fml:a,prot.arr.end(old_fml:a)) = fml:v}",
        "{}",
        "{}",
        "if fml:src = client.ep {fml:socket := sock}\nelse {if fml:src = client_alt {fml:socket := sock_alt}\nelse {if fml:src = client_vn {fml:socket := sock_vn}}}",
        "{}",
        "{}",
        "local loc:jdx {loc:jdx := stream_data.begin(fml:data); if retry_sent(fml:scid) & ~crypto_reset(fml:dcid) {call show_test; crypto_handler_pos(C,L) := 0:stream_pos; call crypto_data(fml:scid,fml:e) := stream_data.empty; while loc:jdx < stream_data.end(fml:data)\n{local loc:cpos {loc:cpos := fml:pos + loc:jdx; crypto_data_present(fml:scid,fml:e,loc:cpos) := false; call loc:jdx := stream_pos.next(loc:jdx)}}; crypto_reset(fml:dcid) := true}; local loc:end {loc:end := fml:pos + stream_data.end(fml:data); if loc:end > stream_data.end(crypto_data(fml:scid,fml:e)) {call crypto_data(fml:scid,fml:e) := stream_data.resize(crypto_data(fml:scid,fml:e), loc:end, 0:byte)}; loc:jdx := stream_data.begin(fml:data); while loc:jdx < stream_data.end(fml:data)\n{local loc:cpos {loc:cpos := fml:pos + loc:jdx; local loc:byte {loc:byte := stream_data.value(fml:data,loc:jdx); assert crypto_data_present(fml:scid,fml:e,loc:cpos) -> stream_data.value(crypto_data(fml:scid,fml:e),loc:cpos) = loc:byte; crypto_data_end(fml:scid,fml:e) := loc:end; call crypto_data(fml:scid,fml:e) := stream_data.set(crypto_data(fml:scid,fml:e), loc:cpos, loc:byte); crypto_data_present(fml:scid,fml:e,loc:cpos) := true; call loc:jdx := stream_pos.next(loc:jdx)}}}; crypto_data_end(fml:scid,fml:e) := stream_data.end(crypto_data(fml:scid,fml:e)); local loc:max_present {loc:max_present := 0:stream_pos; while loc:max_present < crypto_data_end(fml:scid,fml:e) & crypto_data_present(fml:scid,fml:e,loc:max_present)\n{call loc:max_present := stream_pos.next(loc:max_present)}; local loc:avail {loc:avail := stream_data.segment(crypto_data(fml:scid,fml:e),crypto_handler_pos(fml:scid,fml:e),loc:max_present); local loc:0 {call loc:0 := tls.handshake_parser.deserialize(loc:avail, 0:stream_pos); local loc:res {loc:res := loc:0; local loc:hs {loc:hs := tls.handshake_parser.value(loc:res); call tls.handshake_data_event(fml:src, fml:dst, stream_data.segment(loc:avail,0,tls.handshake_parser.pos(loc:res))); crypto_handler_pos(fml:scid,fml:e) := crypto_handler_pos(fml:scid,fml:e) + tls.handshake_parser.pos(loc:res); local loc:idx {loc:idx := tls.handshakes.begin(loc:hs); while loc:idx < tls.handshakes.end(loc:hs)\n{local loc:h {loc:h := tls.handshakes.value(loc:hs,loc:idx); call tls.handshake_event(fml:src, fml:dst, loc:h); call handle_tls_handshake(fml:src, fml:dst, fml:scid, fml:dcid, loc:h); call loc:idx := tls.handshakes.domain.next(loc:idx)}}}}}}}}}}",
        "{assert forged_protected_quic_packet.retired_cids.end(fml:a) > forged_protected_quic_packet.retired_cids.end(old_fml:a) & ~(forged_protected_quic_packet.retired_cids.end(old_fml:a) < X & X < forged_protected_quic_packet.retired_cids.end(fml:a)); assert 0:forged_protected_quic_packet.idx <= X & X < forged_protected_quic_packet.retired_cids.end(old_fml:a) -> forged_protected_quic_packet.retired_cids.value(fml:a,X) = forged_protected_quic_packet.retired_cids.value(old_fml:a,X); assert forged_protected_quic_packet.retired_cids.value(fml:a,forged_protected_quic_packet.retired_cids.end(old_fml:a)) = fml:v}",
        "<<<\n\t        `fml:s` = (`tls_extensions.domain`) `fml:a`.size();\n\t    >>>",
        "{assert forged_protected_quic_packet.arr.end(fml:a) > forged_protected_quic_packet.arr.end(old_fml:a) & ~(forged_protected_quic_packet.arr.end(old_fml:a) < X & X < forged_protected_quic_packet.arr.end(fml:a)); assert 0:forged_protected_quic_packet.idx <= X & X < forged_protected_quic_packet.arr.end(old_fml:a) -> forged_protected_quic_packet.arr.value(fml:a,X) = forged_protected_quic_packet.arr.value(old_fml:a,X); assert forged_protected_quic_packet.arr.value(fml:a,forged_protected_quic_packet.arr.end(old_fml:a)) = fml:v}",
        "<<<\n\t        unsigned __old_size = `fml:a`.size();\n\t        `fml:a`.resize(`fml:s`);\n\t        for (unsigned i = __old_size; i < (unsigned)`fml:s`; i++)\n\t            `fml:a`[i] = v;\n            >>>",
        "{}",
        "{}",
        "fml:y := fml:x - 1",
        "{}",
        "local loc:0 {call loc:0 := prot.get_header_info(fml:spkt, true); local loc:h {loc:h := loc:0; local loc:0 {call loc:0 := packet_encryption_level_up(loc:h); local loc:e {loc:e := loc:0; if last_packet_type(prot.scid(loc:h)) = quic_packet_type.initial & last_packet_length(prot.scid(loc:h)) < 1200 {fml:is_padding := true}\nelse {fml:is_padding := false}}}}}",
        "{}",
        "{}",
        "fml:y := fml:x + 1",
        "{assert fml:x < fml:y & (fml:x < Y -> fml:y <= Y); assert vector[tls.extension].domain.succ(fml:x,fml:y)}",
        "{}",
        "{}",
        "{}",
        "{}",
        "{}",
        "assert cids.end(fml:a) = 0",
        "{min_ack_delay.is_set(fml:s) := true; min_ack_delay.value(fml:s) := fml:p}",
        "{}",
        "forged_packet_send := false",
        "<<<\n\t        unsigned __old_size = `fml:a`.size();\n\t        `fml:a`.resize(`fml:s`);\n\t        for (unsigned i = __old_size; i < (unsigned)`fml:s`; i++)\n\t            `fml:a`[i] = v;\n            >>>",
        "{}",
        "conn_enc_level(fml:src,fml:scid) := fml:e",
        "{}",
        "{conn_seen(C) := false; last_pkt_num(C,L) := 0:pkt_num; conn_closed(C) := false; conn_draining(C) := false; draining_pkt_sent(C) := false; sent_pkt(C,L,N) := false; acked_pkt(C,L,N) := false; pkt_has_close(C,L,N) := false; max_acked(C,L) := 0:pkt_num; ack_credit(C) := 0:pkt_num; trans_params_set(C) := false; is_client(C) := false; conn_requested(S,D,C) := false; hi_non_probing(C) := 0:pkt_num; hi_non_probing_endpoint(C,E) := false; cid_mapped(C) := false; max_seq_num(C) := 0:cid_seq; num_conn(C) := 1:stream_pos; migration_done := false; tls_handshake_finished := false; first_initial_send := false; issued_zero_length_cid := false}",
        "assert fml:s = versions_bv.end(fml:a)",
        "{}",
        "{}",
        "<<<\n            const char * session_file = getenv(\"initial_max_stream_id_bidi\");\n            FILE *fp;\n            size_t len = 0;\n            ssize_t read;\n            char * line = NULL;\n            if(session_file != NULL) {\n                fp = fopen(session_file,\"r\");\n                read = getline(&line, &len, fp);\n                fclose(fp);\n                bool is_error = false;\n                if(line != NULL) { \n                    i = (uint16_t) std::stoll(line);\n                }\n            }\n        >>>",
        "<<<\n\t        if (`fml:a`.size() > 0) {\n\t            a.pop_back();\n\t        }\n            >>>",
        "{}",
        "<<<\n\t        `fml:s` = (`forged_quic_packet_vn.idx`) `fml:a`.size();\n\t    >>>",
        "<<<\n                for (unsigned i = 0; i < `fml:a`.size()/2; i++) {\n                    std::swap(`fml:a`[i],`fml:a`[`fml:a`.size()-i-1]);\n                }\n            >>>",
        "call enqueue_frame(fml:scid, fml:f, fml:e, false)",
        "assert 0:index <= fml:s",
        "{}",
        "<<<\n\t        unsigned __old_size = `fml:a`.size();\n\t        `fml:a`.resize(`fml:s`);\n\t        for (unsigned i = __old_size; i < (unsigned)`fml:s`; i++)\n\t            `fml:a`[i] = v;\n            >>>",
        "{assert quic_packet.arr.end(fml:a) = fml:s; assert 0:quic_packet.idx <= X & X < quic_packet.arr.end(old_fml:a) -> quic_packet.arr.value(fml:a,X) = quic_packet.arr.value(old_fml:a,X); assert quic_packet.arr.end(old_fml:a) <= X & X < fml:s -> quic_packet.arr.value(fml:a,X) = fml:v}",
        "{prot.hdr_long(fml:h) := bvand(0x80:byte,stream_data.value(fml:pkt,0)) ~= 0; prot.hdr_type(fml:h) := bfe[0][6](stream_data.value(fml:pkt,0)); if prot.hdr_long(fml:h) {local loc:dcil {loc:dcil := bfe[0][7](stream_data.value(fml:pkt,5)); call prot.dcid(fml:h) := prot.bytes_to_cid(stream_data.segment(fml:pkt,6,6 + loc:dcil)); local loc:scil {loc:scil := bfe[0][7](stream_data.value(fml:pkt,6 + loc:dcil)); call prot.scid(fml:h) := prot.bytes_to_cid(stream_data.segment(fml:pkt,7 + loc:dcil,7 + loc:dcil + loc:scil)); if fml:decrypt {client_initial_scil := loc:scil}; local loc:pos {loc:pos := 1:stream_pos + 4 + 1 + loc:dcil + 1 + loc:scil; local loc:tlen {loc:tlen := 0:stream_pos; local loc:retry_token_len {loc:retry_token_len := 0:stream_pos; if bvand(prot.hdr_type(fml:h),0x30) = 0x00 {call loc:tlen := prot.get_var_int_len(fml:pkt, loc:pos); call loc:retry_token_len := prot.get_var_int(fml:pkt, loc:pos, loc:tlen); prot.token_length(fml:h) := loc:retry_token_len; loc:pos := loc:pos + loc:tlen + loc:retry_token_len}\nelse {prot.token_length(fml:h) := 0:stream_pos}; local loc:0 {call loc:0 := prot.get_var_int_len(fml:pkt, loc:pos); local loc:len {loc:len := loc:0; call prot.payload_length(fml:h) := prot.get_var_int(fml:pkt, loc:pos, loc:len); prot.payload_length_pos(fml:h) := loc:pos; prot.pkt_num_pos(fml:h) := loc:pos + loc:len}}}}}}}}\nelse {if ~fml:decrypt {call prot.dcid(fml:h) := prot.bytes_to_cid(stream_data.segment(fml:pkt,1,1 + client_initial_scil)); prot.payload_length_pos(fml:h) := 1:stream_pos + client_initial_scil; prot.pkt_num_pos(fml:h) := 1:stream_pos + client_initial_scil}\nelse {call prot.dcid(fml:h) := prot.bytes_to_cid(stream_data.segment(fml:pkt,1,1 + 8)); prot.payload_length_pos(fml:h) := 1:stream_pos + 8; prot.pkt_num_pos(fml:h) := 1:stream_pos + 8}}}",
        "<<<\n\t        `fml:a`.push_back(`fml:v`);\n            >>>",
        "fml:src := (client.ep if (fml:host = endpoint_id.client) else (client_vn if version_negociated else client_alt))",
        "<<<\n\t        `fml:s` = (`idx`) `fml:a`.size();\n\t    >>>",
        "{}",
        "<<<\n\t        if (`fml:a`.size() > 0) {\n\t            a.pop_back();\n\t        }\n            >>>",
        "{}",
        "<<<\n\t        `fml:s` = (`forged_quic_packet_retry.idx`) `fml:a`.size();\n\t    >>>",
        "{if ~reset_frame_restransmitted(fml:id) {sending_ready(fml:id) := false; sending_dataSent(fml:id) := false; sending_send(fml:id) := false; sending_resetSent(fml:id) := true}; call lastest_stream_id_sender(fml:seq) := arr_streamid_s.append(lastest_stream_id_sender(fml:seq), fml:id); call lastest_pkt_num_sender := arr_pkt_num_s.append(lastest_pkt_num_sender, fml:seq)}",
        "{}",
        "{}",
        "<<<\n    res = c.val;\n    >>>",
        "{}",
        "{assert arr_streamid_s.end(fml:a) = fml:s; assert 0:idx_s <= X & X < arr_streamid_s.end(old_fml:a) -> arr_streamid_s.value(fml:a,X) = arr_streamid_s.value(old_fml:a,X); assert arr_streamid_s.end(old_fml:a) <= X & X < fml:s -> arr_streamid_s.value(fml:a,X) = fml:v}",
        "local loc:0 {call loc:0 := socket_endpoint(fml:host, fml:s); local loc:dst {loc:dst := loc:0; local loc:idx {loc:idx := prot.arr.begin(fml:pkts); while loc:idx < prot.arr.end(fml:pkts)\n{local loc:ppkt {loc:ppkt := prot.arr.value(fml:pkts,loc:idx); local loc:0 {call loc:0 := src_tls_id(loc:dst); local loc:tls_id {loc:tls_id := loc:0; local loc:header {loc:header := stream_data.value(loc:ppkt,0); local loc:hdr_type {loc:hdr_type := bfe[0][6](stream_data.value(loc:ppkt,0)); local loc:tt {loc:tt := bvand(loc:hdr_type,0x30); local loc:is_long {loc:is_long := bvand(0x80:byte,loc:header) ~= 0; local loc:version {loc:version := stream_data.segment(loc:ppkt,1,1 + 4); local loc:0 {call loc:0 := bytes_to_version(loc:version); local loc:bversion {loc:bversion := loc:0; local loc:ptype {loc:ptype := bvand(0x30:byte,loc:header); call loc:idx := prot.idx.next(loc:idx)}}}}}}}}}}}}}}}",
        "assert quic_packet_0rtt.arr.end(fml:a) = fml:s & quic_packet_0rtt.arr.value(fml:a,X) = fml:y",
        "assert versions.end(fml:a) = fml:s & versions.value(fml:a,X) = fml:y",
        "{}",
        "assert forged_protected_quic_packet.arr.end(fml:a) = 0",
        "fml:y := fml:x - 1",
        "if _generating {assert fml:scid = the_cid; assert frame.stop_sending.id(fml:f) = 4}",
        "{}",
        "<<<\n                for (unsigned i = 0; i < `fml:a`.size()/2; i++) {\n                    std::swap(`fml:a`[i],`fml:a`[`fml:a`.size()-i-1]);\n                }\n            >>>",
        "assert fml:s = vector[transport_parameter].end(fml:a)",
        "{}",
        "<<<\n\t        `fml:s` = (`idx_s`) `fml:a`.size();\n\t    >>>",
        "{assert connected(fml:dcid) & connected_to(fml:dcid) = fml:scid; assert fml:e = quic_packet_type.one_rtt & established_1rtt_keys(fml:scid); assert num_queued_frames(fml:scid) > 0 -> fml:e = queued_level(fml:scid); if ~max_data_set(fml:scid) | frame.max_data.pos(fml:f) > max_data_val(fml:scid) {max_data_set(fml:scid) := true; max_data_val(fml:scid) := frame.max_data.pos(fml:f)}}",
        "<<<\n                for (unsigned i = 0; i < `fml:a`.size()/2; i++) {\n                    std::swap(`fml:a`[i],`fml:a`[`fml:a`.size()-i-1]);\n                }\n            >>>",
        "assert 0:quic_packet_coal_0rtt.idx <= fml:x & fml:x < quic_packet_coal_0rtt.retired_cids.end(fml:a)",
        "<<<\n\t        `fml:a`.resize(`fml:s`);\n\t        for (unsigned i = 0; i < `fml:s`; i++)\n\t            `fml:a`[i] = y;\n\t    >>>",
        "{assert fml:y < fml:x & (Y:forged_quic_packet_vn.idx < fml:x -> Y <= fml:y); assert forged_quic_packet_vn.idx.succ(fml:y,fml:x)}",
        "{}",
        "{}",
        "assert 0:quic_packet_retry.idx <= fml:x & fml:x < quic_packet_retry.arr.end(fml:a)",
        "{}",
        "{call show_tls_keys_established_event(fml:scid, fml:e); if fml:e = quic_packet_type.zero_rtt {established_0rtt_keys(fml:scid) := true}\nelse {if fml:e = quic_packet_type.handshake {established_handshake_keys(fml:scid) := true}\nelse {if fml:e = quic_packet_type.one_rtt {established_1rtt_keys(fml:scid) := true}}}}",
        "{}",
        "assert 0:jdx_s <= fml:s",
        "{}",
        "{}",
        "{assert forged_quic_packet_retry.retired_cids.end(fml:a) = forged_quic_packet_retry.retired_cids.end(old_fml:a); assert forged_quic_packet_retry.retired_cids.value(fml:a,X) = (fml:y if (X = fml:x) else forged_quic_packet_retry.retired_cids.value(old_fml:a,X))}",
        "{}",
        "local loc:diff {loc:diff := bfe[0][29](fml:pnum - fml:last); fml:pnum := fml:last + loc:diff; if loc:diff >= 0x20000000 {fml:pnum := fml:pnum - 0x40000000}}",
        "<<<        std::cerr << \"encrypt_aead start l \" << l << \"\\n\";\n        std::cerr << \"encrypt_aead start c \" << c << \"\\n\";\n\t    picotls_connection *s = `tls_api.upper.foo.cid_map`[c];\n        ptls_aead_context_t *aead = (ptls_aead_context_t *)(s->crypto_context[l].aead_encrypt);\n        std::cerr << \"encrypt_aead aead \" << aead << \"\\n\";\n        uint32_t checksum_length = aead->algo->tag_size;\n        std::vector<uint8_t> bytes;\n        bytes.resize(ad.size());\n        std::copy(ad.begin(),ad.end(),bytes.begin());\n        std::vector<uint8_t> input, output;\n        input.resize(clear.size());\n        std::copy(clear.begin(),clear.end(),input.begin());\n        output.resize(clear.size() + checksum_length);\n        std::cerr << \"encrypt_aead encrypted  1\" << \"\\n\";\n        size_t encrypted = ptls_aead_encrypt(aead,\n          &output[0], &input[0], input.size(), seq,\n          &bytes[0], bytes.size());\n        std::cerr << \"encrypt_aead encrypted \" << encrypted << \"\\n\";\n        cipher.resize(output.size());\n        std::copy(output.begin(),output.end(),cipher.begin());\n        std::cerr << \"encrypt_aead finish \" << \"\\n\";\n        >>>",
        "server.tls_id := fml:e",
        "client.ep := fml:e",
        "fml:y := fml:x + 1",
        "{sending_resetSent(fml:id) := false; sending_ready(fml:id) := true; sending_resetRecvd(fml:id) := true}",
        "{assert arr_streamid_r.end(fml:a) > arr_streamid_r.end(old_fml:a) & ~(arr_streamid_r.end(old_fml:a) < X & X < arr_streamid_r.end(fml:a)); assert 0:idx_r <= X & X < arr_streamid_r.end(old_fml:a) -> arr_streamid_r.value(fml:a,X) = arr_streamid_r.value(old_fml:a,X); assert arr_streamid_r.value(fml:a,arr_streamid_r.end(old_fml:a)) = fml:v}",
        "{}",
        "{}",
        "<<<\n    res.resize(len);\n    for (unsigned i = 0; i < len; i++) {\n        res[len-i-1] = 0xff & (c.val >> (i * 8));\n    }\n    >>>",
        "<<<\n\t    >>>",
        "{}",
        "{}",
        "{allowed_multiple_migration := true; version_negociated := false}",
        "assert 0:quic_packet_vn.idx <= fml:x & fml:x < quic_packet_vn.arr.end(fml:a)",
        "{}",
        "sock_attacker := sock_victim",
        "{}",
        "{}",
        "{}",
        "{assert connected(fml:dcid) & connected_to(fml:dcid) = fml:scid; assert fml:e = quic_packet_type.one_rtt & established_1rtt_keys(fml:scid); assert num_queued_frames(fml:scid) > 0 -> fml:e = queued_level(fml:scid); assert ~conn_closed(fml:scid); assert connected(fml:scid) & connected_to(fml:scid) = fml:dcid; assert stream_length(fml:dcid,frame.rst_stream.id(fml:f)) <= frame.rst_stream.final_offset(fml:f); assert stream_reset(fml:dcid,frame.rst_stream.id(fml:f)) | stream_finished(fml:dcid,frame.rst_stream.id(fml:f)) -> stream_length(fml:dcid,frame.rst_stream.id(fml:f)) = frame.rst_stream.final_offset(fml:f); stream_reset(fml:dcid,frame.rst_stream.id(fml:f)) := true; stream_length(fml:dcid,frame.rst_stream.id(fml:f)) := frame.rst_stream.final_offset(fml:f); local loc:0 {call loc:0 := stream_id_allowed(fml:dcid, frame.rst_stream.id(fml:f), fml:e); assert loc:0}}",
        "{}",
        "{cid_mapped(frame.new_connection_id.scid(fml:f)) := true; cid_to_aid(frame.new_connection_id.scid(fml:f)) := fml:scid; seqnum_to_cid(fml:scid,frame.new_connection_id.seq_num(fml:f)) := frame.new_connection_id.scid(fml:f); last_cid_seq(fml:scid) := frame.new_connection_id.seq_num(fml:f); count_newcid_frame(frame.new_connection_id.seq_num(fml:f),frame.new_connection_id.retire_prior_to(fml:f),frame.new_connection_id.length(fml:f),frame.new_connection_id.scid(fml:f),frame.new_connection_id.token(fml:f)) := count_newcid_frame(frame.new_connection_id.seq_num(fml:f),frame.new_connection_id.retire_prior_to(fml:f),frame.new_connection_id.length(fml:f),frame.new_connection_id.scid(fml:f),frame.new_connection_id.token(fml:f)) + 1; if count_newcid_frame(frame.new_connection_id.seq_num(fml:f),frame.new_connection_id.retire_prior_to(fml:f),frame.new_connection_id.length(fml:f),frame.new_connection_id.scid(fml:f),frame.new_connection_id.token(fml:f)) = 1 {num_conn(fml:dcid) := num_conn(fml:dcid) + 1; local loc:tp {loc:tp := trans_params(fml:dcid); if ~_generating & active_connection_id_limit.is_set(loc:tp) {local loc:0 {call loc:0 := acti_coid_check(fml:dcid, num_conn(fml:dcid)); assert loc:0}}}}; if frame.new_connection_id.retire_prior_to(fml:f) > max_rtp_num(fml:scid) {max_rtp_num(fml:scid) := frame.new_connection_id.retire_prior_to(fml:f)}; if frame.new_connection_id.seq_num(fml:f) > max_seq_num(fml:scid) {max_seq_num(fml:scid) := frame.new_connection_id.seq_num(fml:f)}; call enqueue_frame(fml:scid, fml:f, fml:e, true)}",
        "{assert versions_bv.end(fml:a) = versions_bv.end(old_fml:a); assert versions_bv.value(fml:a,X) = (fml:y if (X = fml:x) else versions_bv.value(old_fml:a,X))}",
        "assert vector[tls.psk_identity].value(fml:a,fml:x) = fml:y",
        "<<<\n                if ((`prot.idx`)`fml:a`.size() > 0)\n                    `fml:res` = `fml:a`.back();\n            >>>",
        "{assert http_request_file.pending(fml:c); http_request_file.pending(fml:c) := false}",
        "if _generating {assert fml:scid = the_cid}\nelse {assert is_no_error; call _finalize}",
        "<<<\n    val.val = 0;\n    for (unsigned i = 0; i < bytes.size(); i++)\n        val.val = (val.val << 8) + bytes[i];\n    >>>",
        "{assert tls_hand_extensions.end(fml:a) = fml:s; assert 0:tls_hand_extensions.domain <= X & X < tls_hand_extensions.end(old_fml:a) -> tls_hand_extensions.value(fml:a,X) = tls_hand_extensions.value(old_fml:a,X); assert tls_hand_extensions.end(old_fml:a) <= X & X < fml:s -> tls_hand_extensions.value(fml:a,X) = fml:v}",
        "<<<\n\t    std::vector<char> buf(y.size());\n\t    std::copy(y.begin(),y.end(),buf.begin());\n\t    `quic_deser` des(buf);\n\t    __deser(des,x);\n\t    >>>",
        "{}",
        "assert 0:vector[transport_parameter].domain <= fml:x & fml:x < vector[transport_parameter].end(fml:a)",
        "<<<\n                for (unsigned i = 0; i < `fml:b`.size(); i++)\n\t            `fml:a`.push_back(`fml:b`[i]);\n            >>>",
        "{}",
        "assert ip_endpoints.end(fml:a) = 0",
        "assert 0:forged_quic_packet_retry.idx <= fml:x & fml:x < forged_quic_packet_retry.retired_cids.end(fml:a)",
        "{assert versions.end(fml:a) = fml:s; assert 0:index <= X & X < versions.end(old_fml:a) -> versions.value(fml:a,X) = versions.value(old_fml:a,X); assert versions.end(old_fml:a) <= X & X < fml:s -> versions.value(fml:a,X) = fml:v}",
        "<<<\n\t        unsigned __old_size = `fml:a`.size();\n\t        `fml:a`.resize(`fml:s`);\n\t        for (unsigned i = __old_size; i < (unsigned)`fml:s`; i++)\n\t            `fml:a`[i] = v;\n            >>>",
        "fml:y := fml:x - 1",
        "<<<\n\t        `fml:a`.push_back(`fml:v`);\n            >>>",
        "local loc:0 {call loc:0 := prot.arr.empty; local loc:pkts_mim {loc:pkts_mim := loc:0; call loc:pkts_mim := prot.arr.append(loc:pkts_mim, fml:ppkt); local loc:0 {call loc:0 := endpoint_to_socket(fml:src); call net.send(endpoint_id.mim, loc:0, fml:dst, loc:pkts_mim)}}}",
        "<<<\n                if ((`index`)`fml:a`.size() > 0)\n                    `fml:res` = `fml:a`.back();\n            >>>",
        "{assert vector[tls.psk_identity].end(fml:a) = vector[tls.psk_identity].end(old_fml:a); assert vector[tls.psk_identity].value(fml:a,X) = (fml:y if (X = fml:x) else vector[tls.psk_identity].value(old_fml:a,X))}",
        "<<<\n\t        `fml:a`.push_back(`fml:v`);\n            >>>",
        "{assert quic_packet_retry.retired_cids.end(fml:a) > quic_packet_retry.retired_cids.end(old_fml:a) & ~(quic_packet_retry.retired_cids.end(old_fml:a) < X & X < quic_packet_retry.retired_cids.end(fml:a)); assert 0:quic_packet_retry.idx <= X & X < quic_packet_retry.retired_cids.end(old_fml:a) -> quic_packet_retry.retired_cids.value(fml:a,X) = quic_packet_retry.retired_cids.value(old_fml:a,X); assert quic_packet_retry.retired_cids.value(fml:a,quic_packet_retry.retired_cids.end(old_fml:a)) = fml:v}",
        "fml:y := fml:x + 1",
        "<<<\n\t    `quic_ser_retry` ser;\n\t    __ser(ser,x);\n\t    y.resize(ser.res.size());\n\t    for (unsigned i = 0; i < ser.res.size(); i++)\n\t        y[i] = (unsigned char) ser.res[i];\n//\t    std::copy(ser.res.begin(),ser.res.end(),y.begin());\n\t    >>>",
        "<<<\n\t        if (`fml:a`.size() > 0) {\n\t            a.pop_back();\n\t        }\n            >>>",
        "{}",
        "{}",
        "<<<        const char * session_file = getenv(\"active_connection_id_limit\");\n        FILE *fp;\n        if(session_file != NULL) {\n            fp = fopen(session_file,\"w\");\n            fprintf(fp, \"%llu\", i);\n            fclose(fp);\n        }\n\n        >>>",
        "<<<\n\t        unsigned __old_size = `fml:a`.size();\n\t        `fml:a`.resize(`fml:s`);\n\t        for (unsigned i = __old_size; i < (unsigned)`fml:s`; i++)\n\t            `fml:a`[i] = v;\n            >>>",
        "{}",
        "assert 0:stream_pos <= fml:s",
        "<<<\n                for (unsigned i = 0; i < `fml:b`.size(); i++)\n\t            `fml:a`.push_back(`fml:b`[i]);\n            >>>",
        "{}",
        "{}",
        "assert vector[tls.cipher_suite].value(fml:a,fml:x) = fml:y",
        "local loc:cdx {loc:cdx := 0:clients.client.idx; local loc:ti {loc:ti := 0:tls_api.id; while loc:cdx < 2\n{clients.client.tls_id(clients.client.arr.value(clients.clients,loc:cdx)) := loc:ti; call loc:cdx := clients.client.idx.next(loc:cdx); loc:ti := loc:ti + 1}}}",
        "<<<\n\t        `fml:s` = (`vector[tls.psk_identity].domain`) `fml:a`.size();\n\t    >>>",
        "<<<\n\t        `fml:s` = (`vector[tls.extension].domain`) `fml:a`.size();\n\t    >>>",
        "current_stream := 4:stream_id",
        "{}",
        "fml:dst := (client.ep if (is_mim_standalone | fml:src = mim_server_target.ep) else server.ep)",
        "{}",
        "{}",
        "servers.server.tls_id(servers.server.arr.value(servers.servers,fml:n)) := fml:e",
        "<<<\n\t        if (0 <= `fml:x` && `fml:x` < (`replayed_quic_packet_0rtt.idx`)`fml:a`.size()) \n\t            `fml:a`[`fml:x`] = `fml:y`;\n\t    >>>",
        "<<<\n\t        if (0 <= `fml:x` && `fml:x` < (`forged_quic_packet.idx`)`fml:a`.size()) \n\t            `fml:a`[`fml:x`] = `fml:y`;\n\t    >>>",
        "{tls_api.upper.open(C) := false; tls_api.upper.established(C) := false}",
        "{assert fml:x < fml:y & (fml:x < Y -> fml:y <= Y); assert quic_packet_0rtt.idx.succ(fml:x,fml:y)}",
        "mim_client_target.ep := fml:e",
        "<<<\n\t        if (0 <= `fml:x` && `fml:x` < (`forged_protected_quic_packet.idx`)`fml:a`.size()) \n\t            `fml:y` = `fml:a`[`fml:x`];\n\t    >>>",
        "{assert is_no_error; assert conn_total_data(the_cid) > 0}",
        "<<<\n\t        unsigned __old_size = `fml:a`.size();\n\t        `fml:a`.resize(`fml:s`);\n\t        for (unsigned i = __old_size; i < (unsigned)`fml:s`; i++)\n\t            `fml:a`[i] = v;\n            >>>",
        "<<<\n\t        if (0 <= `fml:x` && `fml:x` < (`jdx_s`)`fml:a`.size()) \n\t            `fml:a`[`fml:x`] = `fml:y`;\n\t    >>>",
        "{active_connection_id_limit.is_set(fml:s) := true; active_connection_id_limit.value(fml:s) := fml:p}",
        "<<<\n                for (unsigned i = 0; i < `fml:b`.size(); i++)\n\t            `fml:a`.push_back(`fml:b`[i]);\n            >>>",
        "{}",
        "{assert versions_bv.end(fml:a) > versions_bv.end(old_fml:a) & ~(versions_bv.end(old_fml:a) < X & X < versions_bv.end(fml:a)); assert 0:index <= X & X < versions_bv.end(old_fml:a) -> versions_bv.value(fml:a,X) = versions_bv.value(old_fml:a,X); assert versions_bv.value(fml:a,versions_bv.end(old_fml:a)) = fml:v}",
        "<<<\n                for (unsigned i = 0; i < `fml:b`.size(); i++)\n\t            `fml:a`.push_back(`fml:b`[i]);\n            >>>",
        "<<<\n\t        if (0 <= `fml:x` && `fml:x` < (`frame.ack_ecn.range.idx`)`fml:a`.size()) \n\t            `fml:y` = `fml:a`[`fml:x`];\n\t    >>>",
        "<<<\n\t        `fml:a`.push_back(`fml:v`);\n            >>>",
        "{}",
        "<<<\n\t        if (0 <= `fml:x` && `fml:x` < (`index`)`fml:a`.size()) \n\t            `fml:a`[`fml:x`] = `fml:y`;\n\t    >>>",
        "{}",
        "assert quic_packet_0rtt.retired_cids.end(fml:a) = 0",
        "{}",
        "{}",
        "{}",
        "<<<\n\t        `fml:s` = (`forged_quic_packet.idx`) `fml:a`.size();\n\t    >>>",
        "assert vector[tls.extension].value(fml:a,fml:x) = fml:y",
        "local loc:idx {loc:idx := vector[tls.extension].begin(fml:exts); while loc:idx < vector[tls.extension].end(fml:exts)\n{local loc:ext {loc:ext := vector[tls.extension].value(fml:exts,loc:idx); if some loc:tps. *>(loc:ext,loc:tps) {call handle_client_transport_parameters(fml:src, fml:dst, fml:scid, loc:tps, fml:is_client_hello); trans_params_set(fml:scid) := true}; call loc:idx := vector[tls.extension].domain.next(loc:idx)}}}",
        "{}",
        "assert vector[transport_parameter].value(fml:a,fml:x) = fml:y",
        "<<<\n                for (unsigned i = 0; i < `fml:a`.size()/2; i++) {\n                    std::swap(`fml:a`[i],`fml:a`[`fml:a`.size()-i-1]);\n                }\n            >>>",
        "assert fml:s = replayed_quic_packet_0rtt.arr.end(fml:a)",
        "{assert vector[tls.handshake].end(fml:a) > vector[tls.handshake].end(old_fml:a) & ~(vector[tls.handshake].end(old_fml:a) < X & X < vector[tls.handshake].end(fml:a)); assert 0:vector[tls.handshake].domain <= X & X < vector[tls.handshake].end(old_fml:a) -> vector[tls.handshake].value(fml:a,X) = vector[tls.handshake].value(old_fml:a,X); assert vector[tls.handshake].value(fml:a,vector[tls.handshake].end(old_fml:a)) = fml:v}",
        "victim_agent.tls_id := fml:e",
        "{assert frame.arr.end(fml:a) = frame.arr.end(old_fml:a); assert frame.arr.value(fml:a,X) = (fml:y if (X = fml:x) else frame.arr.value(old_fml:a,X))}",
        "{client_server.tls_id_server := fml:ee; client_server.tls_id_client := fml:e}",
        "{}",
        "{}",
        "assert quic_packet_coal_0rtt.arr.end(fml:a) = 0",
        "{}",
        "{}",
        "{}",
        "{}",
        "<<<\n\t        if (0 <= `fml:x` && `fml:x` < (`forged_protected_quic_packet.idx`)`fml:a`.size()) \n\t            `fml:a`[`fml:x`] = `fml:y`;\n\t    >>>",
        "<<<\n\t        if (0 <= `fml:x` && `fml:x` < (`index`)`fml:a`.size()) \n\t            `fml:y` = `fml:a`[`fml:x`];\n\t    >>>",
        "<<<\n\t        unsigned __old_size = `fml:a`.size();\n\t        `fml:a`.resize(`fml:s`);\n\t        for (unsigned i = __old_size; i < (unsigned)`fml:s`; i++)\n\t            `fml:a`[i] = v;\n            >>>",
        "if _generating {local loc:0 {call loc:0 := pkt_serdes_0rtt_coal.to_bytes(fml:pkt); local loc:spkt {loc:spkt := loc:0; local loc:0 {call loc:0 := prot.arr.empty; local loc:pkts {loc:pkts := loc:0; local loc:0 {call loc:0 := src_tls_id(fml:src); local loc:tls_id {loc:tls_id := loc:0; local loc:0 {call loc:0 := reference_pkt_num(loc:spkt, false); local loc:rnum {loc:rnum := loc:0; local loc:0 {call loc:0 := prot.encrypt_rtt(loc:tls_id, loc:rnum, loc:spkt); local loc:ppkt {loc:ppkt := loc:0; call loc:pkts := prot.arr.append(loc:pkts, loc:ppkt); local loc:0,loc:1 {call loc:0 := endpoint_to_pid(fml:src); call loc:1 := endpoint_to_socket(fml:src); call net.send(loc:0, loc:1, fml:dst, loc:pkts)}; zero_rtt_sent := true}}}}}}}}}}}",
        "{}",
        "{}",
        "{}",
        "<<<\n\t        `fml:a`.resize(`fml:s`);\n\t        for (unsigned i = 0; i < `fml:s`; i++)\n\t            `fml:a`[i] = y;\n\t    >>>",
        "{}",
        "server.ep := fml:e",
        "tls_api.upper.open(fml:c) := true",
        "<<<\n\t        if (0 <= `fml:x` && `fml:x` < (`stream_pos`)`fml:a`.size()) \n\t            `fml:a`[`fml:x`] = `fml:y`;\n\t    >>>",
        "call enqueue_frame(fml:scid, fml:f, fml:e, false)",
        "{}",
        "{}",
        "<<<\n\t        if (`fml:a`.size() > 0) {\n\t            a.pop_back();\n\t        }\n            >>>",
        "{}",
        "{}",
        "{assert fml:y < fml:x & (Y:forged_protected_quic_packet.idx < fml:x -> Y <= fml:y); assert forged_protected_quic_packet.idx.succ(fml:y,fml:x)}",
        "assert vector[transport_parameter].end(fml:a) = fml:s & vector[transport_parameter].value(fml:a,X) = fml:y",
        "<<<\n            const char * session_file = getenv(\"SAVED_PACKET\");\n            std::cerr << \"SAVED_PACKET 5b \" << ppkt.size() << \"\\n\";\n            FILE *fp;\n            if(session_file != NULL) {\n                fp = fopen(session_file,\"w\");\n                for(int j = 0; j < ppkt.size(); j++) {\n                    fprintf(fp, \"%02x\",  ppkt[j]); //length field\n                }\n                fclose(fp);\n            }        \n            >>>",
        "<<<\n\t    >>>",
        "{}",
        "{}",
        "fml:y := fml:x + 1",
        "{}",
        "{}",
        "<<<\n\t        unsigned __old_size = `fml:a`.size();\n\t        `fml:a`.resize(`fml:s`);\n\t        for (unsigned i = __old_size; i < (unsigned)`fml:s`; i++)\n\t            `fml:a`[i] = v;\n            >>>",
        "<<<\n\t    >>>",
        "assert 0:tls.handshakes.domain <= fml:s",
        "{}",
        "assert replayed_quic_packet_0rtt.retired_cids.value(fml:a,fml:x) = fml:y",
        "{assert quic_packet_retry.arr.end(fml:a) = fml:s; assert 0:quic_packet_retry.idx <= X & X < quic_packet_retry.arr.end(old_fml:a) -> quic_packet_retry.arr.value(fml:a,X) = quic_packet_retry.arr.value(old_fml:a,X); assert quic_packet_retry.arr.end(old_fml:a) <= X & X < fml:s -> quic_packet_retry.arr.value(fml:a,X) = fml:v}",
        "{assert tls_api.upper.open(fml:c) & ~tls_api.upper.established(fml:c); tls_api.upper.established(fml:c) := true}",
        "{}",
        "<<<\n\t        if (0 <= `fml:x` && `fml:x` < (`quic_packet_coal_0rtt.idx`)`fml:a`.size()) \n\t            `fml:a`[`fml:x`] = `fml:y`;\n\t    >>>",
        "{}",
        "{}",
        "assert forged_protected_quic_packet.arr.end(fml:a) = fml:s & forged_protected_quic_packet.arr.value(fml:a,X) = fml:y",
        "<<<\n\t        `fml:a`.resize(`fml:s`);\n\t        for (unsigned i = 0; i < `fml:s`; i++)\n\t            `fml:a`[i] = y;\n\t    >>>",
        "assert quic_packet_vn.arr.end(fml:a) = 0",
        "<<<\n\t        if (0 <= `fml:x` && `fml:x` < (`vector[tls.extension].domain`)`fml:a`.size()) \n\t            `fml:a`[`fml:x`] = `fml:y`;\n\t    >>>",
        "{assert fml:x < fml:y & (fml:x < Y -> fml:y <= Y); assert stream_pos.succ(fml:x,fml:y)}",
        "{}",
        "{}",
        "{}",
        "assert versions.value(fml:a,fml:x) = fml:y",
        "{initial_max_stream_data_bidi_local.is_set(fml:s) := true; initial_max_stream_data_bidi_local.value(fml:s) := fml:p}",
        "fml:y := fml:x - 1",
        "{}",
        "assert versions.end(fml:a) = 0",
        "{}",
        "<<<\n    val = 0;\n    for (unsigned i = 0; i < bytes.size(); i++)\n        val = (val << 8) + bytes[i];\n    >>>",
        "{}",
        "{}",
        "fml:y := fml:x - 1",
        "{assert quic_packet.arr.end(fml:a) > quic_packet.arr.end(old_fml:a) & ~(quic_packet.arr.end(old_fml:a) < X & X < quic_packet.arr.end(fml:a)); assert 0:quic_packet.idx <= X & X < quic_packet.arr.end(old_fml:a) -> quic_packet.arr.value(fml:a,X) = quic_packet.arr.value(old_fml:a,X); assert quic_packet.arr.value(fml:a,quic_packet.arr.end(old_fml:a)) = fml:v}",
        "<<<\n\t        `fml:s` = (`index`) `fml:a`.size();\n\t    >>>",
        "{}",
        "{}",
        "assert forged_protected_quic_packet.retired_cids.value(fml:a,fml:x) = fml:y",
        "assert 0:frame.idx <= fml:x & fml:x < frame.arr.end(fml:a)",
        "{}",
        "assert 0:vector[tls.handshake].domain <= fml:x & fml:x < vector[tls.handshake].end(fml:a)",
        "{}",
        "<<<\n\t        if (0 <= `fml:x` && `fml:x` < (`quic_packet_coal_0rtt.idx`)`fml:a`.size()) \n\t            `fml:a`[`fml:x`] = `fml:y`;\n\t    >>>",
        "{}",
        "{assert arr_streamid_r.end(fml:a) = fml:s; assert 0:idx_r <= X & X < arr_streamid_r.end(old_fml:a) -> arr_streamid_r.value(fml:a,X) = arr_streamid_r.value(old_fml:a,X); assert arr_streamid_r.end(old_fml:a) <= X & X < fml:s -> arr_streamid_r.value(fml:a,X) = fml:v}",
        "assert 0:vector[tls.psk_identity].domain <= fml:x & fml:x < vector[tls.psk_identity].end(fml:a)",
        "{}",
        "assert vector[tls.handshake].end(fml:a) = fml:s & vector[tls.handshake].value(fml:a,X) = fml:y",
        "assert 0:idx_s <= fml:x & fml:x < arr_streamid_s.end(fml:a)",
        "{call queued_frames_rtt(fml:scid) := frame.arr.append(queued_frames_rtt(fml:scid), fml:f); num_queued_frames_rtt(fml:scid) := frame.arr.end(queued_frames_rtt(fml:scid)); queued_level_rtt(fml:scid) := fml:e; if ~(exists V. *>(fml:f,V:frame.ack)) {queued_non_ack(fml:scid) := true}}",
        "<<<\n\t        if (0 <= `fml:x` && `fml:x` < (`tls.handshakes.domain`)`fml:a`.size()) \n\t            `fml:a`[`fml:x`] = `fml:y`;\n\t    >>>",
        "{}",
        "{}",
        "<<<\n\t        `fml:a`.resize(`fml:s`);\n\t        for (unsigned i = 0; i < `fml:s`; i++)\n\t            `fml:a`[i] = y;\n\t    >>>",
        "{}",
        "<<<\n\t        unsigned __old_size = `fml:a`.size();\n\t        `fml:a`.resize(`fml:s`);\n\t        for (unsigned i = __old_size; i < (unsigned)`fml:s`; i++)\n\t            `fml:a`[i] = v;\n            >>>",
        "<<<\n\t        `fml:s` = (`vector[tls.cipher_suite].domain`) `fml:a`.size();\n\t    >>>",
        "call show_tls_send_event(fml:src, fml:dst, fml:scid, fml:dcid, fml:data, fml:pos, fml:e, fml:tls_id)",
        "{assert bytes.end(fml:a) = bytes.end(old_fml:a); assert bytes.value(fml:a,X) = (fml:y if (X = fml:x) else bytes.value(old_fml:a,X))}",
        "{assert tls_hand_extensions.end(fml:a) = tls_hand_extensions.end(old_fml:a); assert tls_hand_extensions.value(fml:a,X) = (fml:y if (X = fml:x) else tls_hand_extensions.value(old_fml:a,X))}",
        "{assert connected(fml:dcid) & connected_to(fml:dcid) = fml:scid; if _generating {assert fml:e ~= quic_packet_type.initial & fml:e ~= quic_packet_type.handshake}; assert fml:e = quic_packet_type.handshake -> established_handshake_keys(fml:scid); assert fml:e = quic_packet_type.one_rtt -> established_1rtt_keys(fml:scid); assert num_queued_frames(fml:scid) > 0 -> fml:e = queued_level(fml:scid); local loc:idx {loc:idx := 0:frame.ack_ecn.range.idx; local loc:last {loc:last := frame.ack_ecn.largest_acked(fml:f); if max_acked(fml:dcid,fml:e) < loc:last {max_acked(fml:dcid,fml:e) := loc:last}; assert frame.ack_ecn.range.arr.end(frame.ack_ecn.ack_ranges(fml:f)) > 0; local loc:some_new_ack {loc:some_new_ack := false; while loc:idx < frame.ack_ecn.range.arr.end(frame.ack_ecn.ack_ranges(fml:f))\n{local loc:ack_range {loc:ack_range := frame.ack_ecn.range.arr.value(frame.ack_ecn.ack_ranges(fml:f),loc:idx); assert loc:idx > 0 -> frame.ack_ecn.range.gap(loc:ack_range) < loc:last - 1; local loc:upper {loc:upper := loc:last - (frame.ack_ecn.range.gap(loc:ack_range) + 2 if (loc:idx > 0) else 0); assert frame.ack_ecn.range.ranges(loc:ack_range) <= loc:upper; loc:last := loc:upper - frame.ack_ecn.range.ranges(loc:ack_range); local loc:jdx {loc:jdx := loc:last; while loc:jdx <= loc:upper\n{assert sent_pkt(fml:dcid,fml:e,loc:jdx); if pkt_has_close(fml:dcid,fml:e,loc:jdx) {conn_draining(fml:scid) := true}; if ~acked_pkt(fml:dcid,fml:e,loc:jdx) {loc:some_new_ack := true}; acked_pkt(fml:dcid,fml:e,loc:jdx) := true; loc:jdx := loc:jdx + 1}; call loc:idx := frame.ack_ecn.range.idx.next(loc:idx)}}}}; if _generating {assert loc:some_new_ack}}}}}",
        "{}",
        "assert fml:s = forged_quic_packet_vn.arr.end(fml:a)",
        "{assert vector[tls.extension].end(fml:a) = fml:s; assert 0:vector[tls.extension].domain <= X & X < vector[tls.extension].end(old_fml:a) -> vector[tls.extension].value(fml:a,X) = vector[tls.extension].value(old_fml:a,X); assert vector[tls.extension].end(old_fml:a) <= X & X < fml:s -> vector[tls.extension].value(fml:a,X) = fml:v}",
        "fml:y := fml:x + 1",
        "<<<\n                if ((`jdx_s`)`fml:a`.size() > 0)\n                    `fml:res` = `fml:a`.back();\n            >>>",
        "local loc:cdx {loc:cdx := 0:clients.client.idx; local loc:last_cid {loc:last_cid := the_cid; local loc:idx_port {loc:idx_port := 0:ip.port; while loc:cdx < 2\n{local loc:cc {clients.client.enc_level(loc:cc) := quic_packet_type.initial; ip.endpoint.protocol(clients.client.ep(loc:cc)) := ip.udp; ip.endpoint.addr(clients.client.ep(loc:cc)) := client_addr; ip.endpoint.port(clients.client.ep(loc:cc)) := client_port + 2 * (loc:idx_port + 1); call clients.clients := clients.client.arr.append(clients.clients, loc:cc); call the_cids := cids.append(the_cids, loc:last_cid); call loc:last_cid := double_cid(loc:last_cid); call loc:cdx := clients.client.idx.next(loc:cdx); loc:idx_port := loc:idx_port + 1}}}}}",
        "assert 0:quic_packet_vn.idx <= fml:x & fml:x < quic_packet_vn.arr.end(fml:a)",
        "{}",
        "<<<\n\t        `fml:a`.push_back(`fml:v`);\n            >>>",
        "<<<\n\t        if (`fml:a`.size() > 0) {\n\t            a.pop_back();\n\t        }\n            >>>",
        "assert fml:s = quic_packet_retry.retired_cids.end(fml:a)",
        "{}",
        "{}",
        "{loss_bits.is_set(fml:s) := true; loss_bits.value(fml:s) := fml:p}",
        "{}",
        "assert 0:quic_packet_coal_0rtt.idx <= fml:x & fml:x < quic_packet_coal_0rtt.arr.end(fml:a)",
        "{}",
        "assert 0:forged_quic_packet_vn.idx <= fml:s",
        "assert 0:servers.server.idx <= fml:x & fml:x < servers.server.arr.end(fml:a)",
        "{}",
        "{assert fml:y < fml:x & (Y:servers.server.idx < fml:x -> Y <= fml:y); assert servers.server.idx.succ(fml:y,fml:x)}",
        "victim_agent.ep := fml:e",
        "{}",
        "{}",
        "{}",
        "{}",
        "{}",
        "{}",
        "<<<\n\t    >>>",
        "{}",
        "nonce_cid(the_cid) := server_cid",
        "assert quic_packet_vn.arr.end(fml:a) = fml:s & quic_packet_vn.arr.value(fml:a,X) = fml:y",
        "<<<\n\t        `fml:a`.resize(`fml:s`);\n\t        for (unsigned i = 0; i < `fml:s`; i++)\n\t            `fml:a`[i] = y;\n\t    >>>",
        "assert fml:s = forged_quic_packet_retry.arr.end(fml:a)",
        "{}",
        "<<<\n\t        `fml:s` = (`clients.client.idx`) `fml:a`.size();\n\t    >>>",
        "<<<\n                /**\n                    Not working in localhost but should be ok in private adress TODO\n                        -> To simulate that we set: sock_mim_client = sock (from server) to simulate NAT\n                */\n                // -o lo\n                std::string command = \"sudo iptables -t nat -A POSTROUTING -d 10.0.3.1 -p udp --sport 4439:4439 -j SNAT --to-source 10.0.1.1:\" + std::to_string(dst); //  # error in localhost\n                int n = command.length();\n\n                // declaring character array\n                char command_array[n + 1];\n            \n                // copying the contents of the\n                // string to char array\n                strcpy(command_array, command.c_str());\n\n                int cr = system(command_array);\n            >>>",
        "<<<\n\t        if (`fml:a`.size() > 0) {\n\t            a.pop_back();\n\t        }\n            >>>",
        "{}",
        "{}",
        "{}",
        "{assert ip_endpoints.end(fml:a) = ip_endpoints.end(old_fml:a); assert ip_endpoints.value(fml:a,X) = (fml:y if (X = fml:x) else ip_endpoints.value(old_fml:a,X))}",
        "{}",
        "assert 0:frame.idx < fml:x",
        "{assert fml:y < fml:x & (Y:vector[tls.cipher_suite].domain < fml:x -> Y <= fml:y); assert vector[tls.cipher_suite].domain.succ(fml:y,fml:x)}",
        "{}",
        "<<<\n                for (unsigned i = 0; i < `fml:b`.size(); i++)\n\t            `fml:a`.push_back(`fml:b`[i]);\n            >>>",
        "assert 0:replayed_quic_packet_0rtt.idx <= fml:x & fml:x < replayed_quic_packet_0rtt.arr.end(fml:a)",
        "local loc:0 {call loc:0 := prot.get_header_info(fml:pkt, false); local loc:h {loc:h := loc:0; local loc:pkt_rtt {loc:pkt_rtt := stream_data.segment(fml:pkt,prot.payload_length(loc:h),stream_data.end(fml:pkt)); local loc:pkt_init {loc:pkt_init := stream_data.segment(fml:pkt,0,prot.payload_length(loc:h)); local loc:0 {call loc:0 := prot.get_header_info(loc:pkt_rtt, false); local loc:h_rtt {loc:h_rtt := loc:0; local loc:0 {call loc:0 := prot.get_level(loc:pkt_init); local loc:level {loc:level := loc:0; local loc:0 {call loc:0 := tls_api.upper.iv_size(fml:c, loc:level); local loc:sample_size {loc:sample_size := loc:0; local loc:pnum_pos {loc:pnum_pos := prot.pkt_num_pos(loc:h); local loc:0 {call loc:0 := prot.get_pnum_len(loc:pkt_init); local loc:pnum_len {loc:pnum_len := loc:0; local loc:hdr_len {loc:hdr_len := loc:pnum_pos + loc:pnum_len; if prot.hdr_long(loc:h) {local loc:0 {call loc:0 := prot.to_var_int_16(prot.payload_length(loc:h) - 10); local loc:new_len {loc:new_len := loc:0; call loc:pkt_init := stream_data.set(loc:pkt_init, loc:pnum_pos - 2, stream_data.value(loc:new_len,0)); call loc:pkt_init := stream_data.set(loc:pkt_init, loc:pnum_pos - 1, stream_data.value(loc:new_len,1))}}}; local loc:hdr {loc:hdr := stream_data.segment(loc:pkt_init,0,loc:pnum_pos); local loc:pnum {loc:pnum := stream_data.segment(loc:pkt_init,loc:pnum_pos,loc:hdr_len); local loc:pyld_i {loc:pyld_i := stream_data.segment(loc:pkt_init,loc:hdr_len,stream_data.end(fml:pkt)); local loc:auth {loc:auth := stream_data.segment(loc:pkt_init,0,loc:hdr_len); local loc:0 {call loc:0 := prot.get_pnum(loc:pnum, 0:stream_pos, loc:pnum_len); local loc:new_seq {loc:new_seq := loc:0; call loc:new_seq := prot.correct_pnum(fml:seq, loc:new_seq, loc:pnum_len); call loc:pyld_i := tls_api.upper.encrypt_aead(fml:c, loc:level, loc:pyld_i, loc:new_seq, loc:auth); local loc:pn_offset {loc:pn_offset := 0:stream_pos; if prot.hdr_long(loc:h) {loc:pn_offset := loc:hdr_len - loc:pnum_pos}\nelse {loc:pn_offset := 1:stream_pos + 4}; local loc:sample_pos {loc:sample_pos := 4:stream_pos - loc:pnum_len; local loc:new_pyld {loc:new_pyld := loc:pyld_i; if loc:sample_pos + loc:sample_size > stream_data.end(loc:pkt_init) {local loc:diff {loc:diff := (loc:sample_pos + loc:sample_size) - stream_data.end(loc:pyld_i); local loc:i {loc:i := 0:stream_pos; while loc:i < loc:diff\n{call loc:new_pyld := stream_data.append(loc:new_pyld, 0x00:byte); loc:i := loc:i + 1}; loc:pyld_i := loc:new_pyld}}}; local loc:sample {loc:sample := stream_data.segment(loc:pyld_i,loc:sample_pos,loc:sample_pos + loc:sample_size); local loc:0 {call loc:0 := stream_data.empty; local loc:mask {loc:mask := loc:0; local loc:0 {call loc:0 := stream_data.resize(loc:mask, 5:stream_pos, 0:byte); call loc:mask := tls_api.upper.encrypt_cipher(fml:c, loc:level, loc:0, loc:sample, false)}; local loc:byte0_mask {loc:byte0_mask := bvand(stream_data.value(loc:mask,0),(0x0f if prot.hdr_long(loc:h) else 0x1f)); local loc:0 {call loc:0 := prot.byte_xor(stream_data.value(loc:pkt_init,0), loc:byte0_mask); call loc:hdr := stream_data.set(loc:hdr, 0:stream_pos, loc:0)}; call loc:pnum := prot.stream_data_xor(stream_data.segment(loc:pkt_init,loc:pnum_pos,loc:pnum_pos + loc:pnum_len), stream_data.segment(loc:mask,1,1 + loc:pnum_len)); local loc:0 {call loc:0 := stream_data.extend(loc:hdr, loc:pnum); call loc:pkt_init := stream_data.extend(loc:0, loc:pyld_i)}; local loc:0 {call loc:0 := tls_api.upper.iv_size(fml:c, 1:tls_api.upper.level); local loc:sample_size_rtt {loc:sample_size_rtt := loc:0; local loc:pnum_pos_rtt {loc:pnum_pos_rtt := prot.pkt_num_pos(loc:h_rtt); local loc:0 {call loc:0 := prot.get_pnum_len_b(loc:pkt_rtt); local loc:pnum_len_rtt {loc:pnum_len_rtt := loc:0; local loc:hdr_len_rtt {loc:hdr_len_rtt := loc:pnum_pos_rtt + loc:pnum_len_rtt; if prot.hdr_long(loc:h_rtt) {local loc:0 {call loc:0 := prot.to_var_int_16(prot.payload_length(loc:h_rtt) + 16); local loc:new_len {loc:new_len := loc:0; call loc:pkt_rtt := stream_data.set(loc:pkt_rtt, loc:pnum_pos_rtt - 2, stream_data.value(loc:new_len,0)); call loc:pkt_rtt := stream_data.set(loc:pkt_rtt, loc:pnum_pos_rtt - 1, stream_data.value(loc:new_len,1))}}}; local loc:hdr_rtt {loc:hdr_rtt := stream_data.segment(loc:pkt_rtt,0,loc:pnum_pos_rtt); local loc:pnum_rtt {loc:pnum_rtt := stream_data.segment(loc:pkt_rtt,loc:pnum_pos_rtt,loc:hdr_len_rtt); local loc:pyld_rtt {loc:pyld_rtt := stream_data.segment(loc:pkt_rtt,loc:hdr_len_rtt,stream_data.end(loc:pkt_rtt)); local loc:auth_rtt {loc:auth_rtt := stream_data.segment(loc:pkt_rtt,0,loc:hdr_len_rtt); local loc:0 {call loc:0 := prot.get_pnum(loc:pnum_rtt, 0:stream_pos, loc:pnum_len_rtt); local loc:new_seq_rtt {loc:new_seq_rtt := loc:0; call loc:new_seq_rtt := prot.correct_pnum(fml:seq, loc:new_seq_rtt, loc:pnum_len_rtt); call loc:pyld_rtt := tls_api.upper.encrypt_aead(fml:c, 1:tls_api.upper.level, loc:pyld_rtt, loc:new_seq_rtt, loc:auth_rtt); local loc:pn_offset_rtt {loc:pn_offset_rtt := 0:stream_pos; if prot.hdr_long(loc:h_rtt) {loc:pn_offset_rtt := loc:hdr_len_rtt - loc:pnum_pos_rtt}\nelse {loc:pn_offset_rtt := 1:stream_pos + 4}; local loc:sample_pos_rtt {loc:sample_pos_rtt := 4:stream_pos - loc:pnum_len_rtt; local loc:new_pyld_rtt {loc:new_pyld_rtt := loc:pyld_rtt; if loc:sample_pos_rtt + loc:sample_size_rtt > stream_data.end(loc:pkt_rtt) {local loc:diff {loc:diff := (loc:sample_pos_rtt + loc:sample_size_rtt) - stream_data.end(loc:pyld_rtt); local loc:i {loc:i := 0:stream_pos; while loc:i < loc:diff\n{call loc:new_pyld_rtt := stream_data.append(loc:new_pyld_rtt, 0x00:byte); loc:i := loc:i + 1}; loc:pyld_rtt := loc:new_pyld_rtt}}}; local loc:sample_rtt {loc:sample_rtt := stream_data.segment(loc:pyld_rtt,loc:sample_pos_rtt,loc:sample_pos_rtt + loc:sample_size_rtt); local loc:0 {call loc:0 := stream_data.empty; local loc:mask_rtt {loc:mask_rtt := loc:0; local loc:0 {call loc:0 := stream_data.resize(loc:mask_rtt, 5:stream_pos, 0:byte); call loc:mask_rtt := tls_api.upper.encrypt_cipher(fml:c, 1:tls_api.upper.level, loc:0, loc:sample_rtt, false)}; local loc:byte0_mask_rtt {loc:byte0_mask_rtt := bvand(stream_data.value(loc:mask_rtt,0),(0x0f if prot.hdr_long(loc:h_rtt) else 0x1f)); local loc:0 {call loc:0 := prot.byte_xor(stream_data.value(loc:pkt_rtt,0), loc:byte0_mask_rtt); call loc:hdr_rtt := stream_data.set(loc:hdr_rtt, 0:stream_pos, loc:0)}; call loc:pnum_rtt := prot.stream_data_xor(stream_data.segment(loc:pkt_rtt,loc:pnum_pos_rtt,loc:pnum_pos_rtt + loc:pnum_len_rtt), stream_data.segment(loc:mask_rtt,1,1 + loc:pnum_len_rtt)); local loc:0 {call loc:0 := stream_data.extend(loc:hdr_rtt, loc:pnum_rtt); call loc:pkt_rtt := stream_data.extend(loc:0, loc:pyld_rtt)}; call fml:pkt := stream_data.extend(loc:pkt_init, loc:pkt_rtt)}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}",
        "{}",
        "{}",
        "local loc:dcid {loc:dcid := quic_packet_coal_0rtt.dst_cid(fml:pkt); local loc:0 {call loc:0 := quic_packet_coal_0rtt.long(fml:pkt); local loc:scid {loc:scid := (quic_packet_coal_0rtt.src_cid(fml:pkt) if loc:0 else connected_to(loc:dcid)); if cid_mapped(loc:dcid) {loc:dcid := cid_to_aid(loc:dcid)}; local loc:dcid_i {loc:dcid_i := quic_packet_coal_0rtt.dst_cid_i(fml:pkt); local loc:0 {call loc:0 := quic_packet_coal_0rtt.long(fml:pkt); local loc:scid_i {loc:scid_i := (quic_packet_coal_0rtt.src_cid_i(fml:pkt) if loc:0 else connected_to(loc:dcid_i)); if cid_mapped(loc:dcid_i) {loc:dcid_i := cid_to_aid(loc:dcid_i)}; last_pkt_num(loc:scid_i,quic_packet_coal_0rtt.ptype_i(fml:pkt)) := quic_packet_coal_0rtt.seq_num_i(fml:pkt); last_pkt_num(loc:scid,quic_packet_coal_0rtt.ptype(fml:pkt)) := quic_packet_coal_0rtt.seq_num(fml:pkt); if quic_packet_coal_0rtt.ptype(fml:pkt) = quic_packet_type.zero_rtt & ~_generating {conn_requested(fml:src,fml:dst,loc:scid) := false; conn_requested(fml:src,fml:dst,loc:dcid) := false; connected(loc:dcid) := false; connected(loc:scid) := false; conn_seen(loc:dcid) := false; conn_seen(loc:scid) := false; conn_seen(server_cid) := false; conn_seen(the_cid) := false; connected(the_cid) := false; connected(server_cid) := false; local loc:0 {call loc:0 := tls_extensions.empty; local loc:extns {loc:extns := loc:0; local loc:0 {call loc:0 := make_transport_parameters; call loc:extns := tls_extensions.append(loc:extns, loc:0)}; call tls_api.upper.create(0:tls_api.id, true, loc:extns); conn_requested(fml:src,fml:dst,the_cid) := true}}}; zero_rtt_sent := true; call queued_frames_rtt(loc:scid) := frame.arr.empty; queued_non_probing(loc:scid) := false; queued_non_ack(loc:scid) := false; queued_close(loc:scid) := false; num_queued_frames_rtt(loc:scid) := 0:frame.idx; queued_ack_eliciting(loc:scid) := false; if quic_packet_coal_0rtt.ptype_i(fml:pkt) = quic_packet_type.initial {initial_token := quic_packet_coal_0rtt.token_i(fml:pkt); if ~conn_seen(loc:dcid_i) {call tls_client_initial_request(fml:src, fml:dst, loc:dcid_i, quic_packet_coal_0rtt.pversion_i(fml:pkt), 0:tls_api.id); conn_requested(fml:src,fml:dst,loc:scid_i) := true}; cid_to_token(loc:dcid_i) := quic_packet_coal_0rtt.token_i(fml:pkt)}; if queued_ack_eliciting(loc:scid_i) {ack_credit(loc:dcid) := ack_credit(loc:dcid) + 1}; if ~queued_non_ack(loc:scid_i) {ack_credit(loc:scid_i) := ack_credit(loc:scid_i) - 1}; if queued_non_probing(loc:scid_i) {if quic_packet_coal_0rtt.ptype_i(fml:pkt) = quic_packet_type.one_rtt {if quic_packet_coal_0rtt.seq_num_i(fml:pkt) >= hi_non_probing(loc:scid_i) {hi_non_probing(loc:scid_i) := quic_packet_coal_0rtt.seq_num_i(fml:pkt); hi_non_probing_endpoint(loc:scid_i,fml:src) := true}}\nelse {hi_non_probing_endpoint(loc:scid_i,fml:src) := true}}; if queued_close(loc:scid_i) {pkt_has_close(loc:scid_i,quic_packet_coal_0rtt.ptype_i(fml:pkt),quic_packet_coal_0rtt.seq_num_i(fml:pkt)) := true}; if conn_draining(loc:scid_i) {draining_pkt_sent(loc:scid_i) := true}; if quic_packet_coal_0rtt.ptype_i(fml:pkt) = quic_packet_type.initial & ~first_initial_send & zero_rtt_allowed {first_initial_send := true}\nelse {first_initial_send := false}; call queued_frames(loc:scid_i) := frame.arr.empty; queued_non_probing(loc:scid_i) := false; queued_non_ack(loc:scid_i) := false; queued_close(loc:scid_i) := false; num_queued_frames(loc:scid_i) := 0:frame.idx; queued_ack_eliciting(loc:scid_i) := false}}}}}}",
        "<<<\n\t        `fml:s` = (`stream_pos`) `fml:a`.size();\n\t    >>>",
        "{assert prot.arr.end(fml:a) = prot.arr.end(old_fml:a); assert prot.arr.value(fml:a,X) = (fml:y if (X = fml:x) else prot.arr.value(old_fml:a,X))}",
        "<<<\n            const char * session_file = getenv(\"initial_max_stream_data_bidi_remote\");\n            FILE *fp;\n            size_t len = 0;\n            ssize_t read;\n            char * line = NULL;\n            if(session_file != NULL) {\n                fp = fopen(session_file,\"r\");\n                read = getline(&line, &len, fp);\n                fclose(fp);\n                bool is_error = false;\n                if(line != NULL) { \n                    i = (uint32_t) std::stoll(line);\n                }\n            }\n        >>>",
        "{}",
        "{}",
        "{}",
        "{packed_forwarded_arr(fml:pkt) := true; call mim_agent.ppkt_to_be_replayed_to_server := forged_pkts.empty; mim_agent.force_client_forward := false; mim_agent.forward_turn := true}",
        "{}",
        "{assert vector[tls.extension].end(fml:a) > vector[tls.extension].end(old_fml:a) & ~(vector[tls.extension].end(old_fml:a) < X & X < vector[tls.extension].end(fml:a)); assert 0:vector[tls.extension].domain <= X & X < vector[tls.extension].end(old_fml:a) -> vector[tls.extension].value(fml:a,X) = vector[tls.extension].value(old_fml:a,X); assert vector[tls.extension].value(fml:a,vector[tls.extension].end(old_fml:a)) = fml:v}",
        "{assert fml:x < fml:y & (fml:x < Y -> fml:y <= Y); assert quic_packet_vn.idx.succ(fml:x,fml:y)}",
        "assert frame.arr.value(fml:a,fml:x) = fml:y",
        "fml:socket := (sock_mim_client if (fml:src = mim_client_target.ep) else sock_mim_server)",
        "assert fml:s = servers.server.arr.end(fml:a)",
        "{}",
        "{}",
        "{}",
        "{}",
        "crypto_pos(fml:dcid,fml:e) := fml:hi",
        "{}",
        "<<<\n                if ((`frame.idx`)`fml:a`.size() > 0)\n                    `fml:res` = `fml:a`.back();\n            >>>",
        "assert 0:quic_packet_retry.idx <= fml:x & fml:x < quic_packet_retry.retired_cids.end(fml:a)",
        "{}",
        "{sending_ready(S) := true; sending_send(S) := false; sending_dataSent(S) := false; sending_dataRecvd(S) := false; sending_resetSent(S) := false; sending_resetRecvd(S) := false}",
        "{}",
        "<<<\n        const char * session_file = getenv(\"initial_max_stream_data_bidi_local\");\n        FILE *fp;\n        if(session_file != NULL) {\n            fp = fopen(session_file,\"w\");\n            fprintf(fp, \"%llu\", i);\n            fclose(fp);\n        }\n\n        >>>",
        "fml:y := fml:x + 1",
        "local loc:dcid {loc:dcid := quic_packet_retry.dst_cid(fml:pkt); local loc:scid {loc:scid := quic_packet_retry.src_cid(fml:pkt); if cid_mapped(loc:dcid) {loc:dcid := cid_to_aid(loc:dcid)}; if fml:src = client_alt | fml:dst = client_alt {migration_done := true}; if ~_generating {local loc:0,loc:1,loc:2 {call loc:0 := scid_size_pos(true); call loc:1 := dcid_size_pos(true); call loc:2 := prot.retry_integrity_tag(8:stream_pos, server_cid, quic_packet_retry.pversion(fml:pkt), loc:0, loc:dcid, loc:1, loc:scid, quic_packet_retry.token(fml:pkt), last_pkt_num(loc:scid,quic_packet_type.initial), header_retry, token_saved); local loc:expected_itoken {loc:expected_itoken := loc:2; local loc:0 {call loc:0 := bytes_to_itoken(loc:expected_itoken); assert loc:0 = quic_packet_retry.integrity_token(fml:pkt)}}}}; assert quic_packet_retry.ptype(fml:pkt) = quic_packet_type.retry}}",
        "{}",
        "{}",
        "local loc:cdx {loc:cdx := 0:servers.server.idx; local loc:ti {loc:ti := 0:tls_api.id; while loc:cdx < 2\n{servers.server.tls_id(servers.server.arr.value(servers.servers,loc:cdx)) := loc:ti; call loc:cdx := servers.server.idx.next(loc:cdx); loc:ti := loc:ti + 1}}}",
        "{}",
        "{}",
        "{}",
        "<<<\n                for (unsigned i = 0; i < `fml:b`.size(); i++)\n\t            `fml:a`.push_back(`fml:b`[i]);\n            >>>",
        "<<<\n\t        `fml:a`.push_back(`fml:v`);\n            >>>",
        "assert 0:vector[tls.extension].domain <= fml:x & fml:x < vector[tls.extension].end(fml:a)",
        "mim_server_target.ep := fml:e",
        "assert tls_api.upper.open(fml:c)",
        "assert 0:jdx_r <= fml:x & fml:x < arr_pkt_num_r.end(fml:a)",
        "{}",
        "{if ~_generating {call handle_transport_error(frame.rst_stream.err_code(fml:f))}; call enqueue_frame(fml:scid, fml:f, fml:e, false)}",
        "{}",
        "<<<\n                for (unsigned i = 0; i < `fml:a`.size()/2; i++) {\n                    std::swap(`fml:a`[i],`fml:a`[`fml:a`.size()-i-1]);\n                }\n            >>>",
        "{}",
        "{receiving_dataRecvd(fml:id) := false; receiving_dataRead(fml:id) := true}",
        "{}",
        "{}",
        "<<<\n\t    `quic_ser_zerortt` ser;\n\t    __ser(ser,x);\n\t    y.resize(ser.res.size());\n\t    for (unsigned i = 0; i < ser.res.size(); i++)\n\t        y[i] = (unsigned char) ser.res[i];\n//\t    std::copy(ser.res.begin(),ser.res.end(),y.begin());\n\t    >>>",
        "<<<\n                for (unsigned i = 0; i < `fml:a`.size()/2; i++) {\n                    std::swap(`fml:a`[i],`fml:a`[`fml:a`.size()-i-1]);\n                }\n            >>>",
        "assert 0:clients.client.idx <= fml:x & fml:x < clients.client.arr.end(fml:a)",
        "<<<\n\t        unsigned __old_size = `fml:a`.size();\n\t        `fml:a`.resize(`fml:s`);\n\t        for (unsigned i = __old_size; i < (unsigned)`fml:s`; i++)\n\t            `fml:a`[i] = v;\n            >>>",
        "<<<\n\t        unsigned __old_size = `fml:a`.size();\n\t        `fml:a`.resize(`fml:s`);\n\t        for (unsigned i = __old_size; i < (unsigned)`fml:s`; i++)\n\t            `fml:a`[i] = v;\n            >>>",
        "{}",
        "<<<\n\t        `fml:a`.push_back(`fml:v`);\n            >>>",
        "clients.client.ep(clients.client.arr.value(clients.clients,fml:n)) := fml:e",
        "{}",
        "<<<\n\t        `fml:a`.resize(`fml:s`);\n\t        for (unsigned i = 0; i < `fml:s`; i++)\n\t            `fml:a`[i] = y;\n\t    >>>",
        "{}",
        "<<<\n\t        `fml:a`.push_back(`fml:v`);\n            >>>",
        "{}",
        "assert 0:idx_r <= fml:x & fml:x < arr_streamid_r.end(fml:a)",
        "<<<\n\t        `fml:a`.resize(`fml:s`);\n\t        for (unsigned i = 0; i < `fml:s`; i++)\n\t            `fml:a`[i] = y;\n\t    >>>",
        "local loc:dcid {loc:dcid := quic_packet_retry.dst_cid(fml:pkt); local loc:scid {loc:scid := quic_packet_retry.src_cid(fml:pkt); if cid_mapped(loc:dcid) {loc:dcid := cid_to_aid(loc:dcid)}; retry_token(loc:scid) := quic_packet_retry.token(fml:pkt); if ~_generating {conn_requested(fml:src,fml:dst,loc:scid) := false; conn_requested(fml:src,fml:dst,loc:dcid) := false; connected(loc:dcid) := false; connected(loc:scid) := false; conn_seen(loc:dcid) := false; conn_seen(loc:scid) := false; assert ~retry_recv(loc:dcid); retry_recv(loc:dcid) := true; server_cid := loc:scid; connected(the_cid) := false; connected(server_cid) := false; conn_seen(server_cid) := false; conn_seen(the_cid) := false; client_initial_rcid := loc:scid; local loc:0 {call loc:0 := tls_extensions.empty; local loc:extns {loc:extns := loc:0; local loc:0 {call loc:0 := make_transport_parameters; call loc:extns := tls_extensions.append(loc:extns, loc:0)}; call tls_api.upper.destroy(0:tls_api.id); call tls_api.upper.create(0:tls_api.id, false, loc:extns); conn_requested(fml:dst,fml:src,the_cid) := true}}}\nelse {retry_sent(loc:scid) := true; retry_response(loc:scid) := true; initial_keys_set(loc:scid) := false; tp_client_set := false; conn_requested(fml:src,fml:dst,loc:dcid) := false; conn_requested(fml:src,fml:dst,the_cid) := false; conn_seen(loc:dcid) := false; conn_seen(the_cid) := false; local loc:0 {call loc:0 := src_tls_id(fml:src); call tls_api.upper.destroy(loc:0)}}}}",
        "fml:e := (quic_packet_type.zero_rtt if ~prot.hdr_long(fml:h) else (quic_packet_type.initial if (bvand(prot.hdr_type(fml:h),0x30) = 0x00) else quic_packet_type.handshake))",
        "{}",
        "{}",
        "{}",
        "{}",
        "assert arr_pkt_num_r.value(fml:a,fml:x) = fml:y",
        "{}",
        "{}",
        "{}",
        "{}",
        "assert quic_packet.retired_cids.value(fml:a,fml:x) = fml:y",
        "<<<\n\t        `fml:s` = (`index`) `fml:a`.size();\n\t    >>>",
        "fml:res := forged_quic_packet_retry.ptype(fml:pkt) ~= quic_packet_type.one_rtt",
        "fml:tls_id := client.tls_id",
        "{}",
        "<<<\n                if ((`forged_quic_packet.idx`)`fml:a`.size() > 0)\n                    `fml:res` = `fml:a`.back();\n            >>>",
        "{}",
        "<<<\n\t        unsigned __old_size = `fml:a`.size();\n\t        `fml:a`.resize(`fml:s`);\n\t        for (unsigned i = __old_size; i < (unsigned)`fml:s`; i++)\n\t            `fml:a`[i] = v;\n            >>>",
        "{}",
        "{}",
        "{}",
        "<<<\n\t        `fml:a`.push_back(`fml:v`);\n            >>>",
        "if _generating {assert fml:scid = the_cid}\nelse {call tls_api.upper.save_token(frame.new_token.data(fml:f))}",
        "<<<\n\t        `fml:s` = (`replayed_quic_packet_0rtt.idx`) `fml:a`.size();\n\t    >>>",
        "{assert quic_packet_0rtt.retired_cids.end(fml:a) = quic_packet_0rtt.retired_cids.end(old_fml:a); assert quic_packet_0rtt.retired_cids.value(fml:a,X) = (fml:y if (X = fml:x) else quic_packet_0rtt.retired_cids.value(old_fml:a,X))}",
        "<<<\n\t        if (0 <= `fml:x` && `fml:x` < (`vector[transport_parameter].domain`)`fml:a`.size()) \n\t            `fml:a`[`fml:x`] = `fml:y`;\n\t    >>>",
        "<<<\n\t        if (0 <= `fml:x` && `fml:x` < (`forged_quic_packet_retry.idx`)`fml:a`.size()) \n\t            `fml:y` = `fml:a`[`fml:x`];\n\t    >>>",
        "sock_mim_client := sock",
        "assert 0:frame.ack_ecn.range.idx <= fml:x & fml:x < frame.ack_ecn.range.arr.end(fml:a)",
        "assert 0:frame.ack_ecn.range.idx <= fml:s",
        "{}",
        "call http_request := http_request_file.read",
        "{}",
        "{}",
        "assert 0:jdx_r <= fml:x & fml:x < arr_pkt_num_r.end(fml:a)",
        "fml:y := fml:x + 1",
        "<<<\n                for (unsigned i = 0; i < `fml:a`.size()/2; i++) {\n                    std::swap(`fml:a`[i],`fml:a`[`fml:a`.size()-i-1]);\n                }\n            >>>",
        "assert quic_packet_0rtt.retired_cids.end(fml:a) = fml:s & quic_packet_0rtt.retired_cids.value(fml:a,X) = fml:y",
        "<<<\n\t    >>>",
        "fml:y := fml:x + 1",
        "{}",
        "{}",
        "fml:res := fml:dst = client.ep | fml:dst = client_alt | fml:dst = client_vn",
        "fml:e := (quic_packet_type.zero_rtt if ~prot.hdr_long(fml:h) else (quic_packet_type.initial if (prot.hdr_type(fml:h) = 0x7f) else quic_packet_type.handshake))",
        "{}",
        "{}",
        "{}",
        "assert 0:quic_packet.idx <= fml:x & fml:x < quic_packet.retired_cids.end(fml:a)",
        "{}",
        "<<<\n        val.val = 0;\n        for (unsigned i = 0; i < bytes.size(); i++)\n            val.val = (val.val << 8) + bytes[i];\n        >>>",
        "assert fml:s = ip_endpoints.end(fml:a)",
        "{assert fml:s = current_stream; local loc:tp {loc:tp := trans_params(the_cid); if version_negociated {assert fml:src = client_vn}\nelse {if ~disable_active_migration.is_set(loc:tp) {if ~migration_done | allowed_multiple_migration {assert fml:src = client.ep | fml:src = client_alt}\nelse {assert fml:src = client_alt}}\nelse {assert fml:src = client.ep}}; assert fml:dst = server.ep; if ~zero_rtt_server_test | zero_rtt_sent {assert connected(the_cid) & fml:dcid = connected_to(the_cid)}\nelse {assert fml:dcid ~= the_cid}; assert stream_length(fml:dcid,fml:s) = stream_app_data_end(fml:dcid,fml:s); assert stream_length(fml:dcid,fml:s) < fml:end & fml:end <= stream_data.end(http_request); assert current_stream < 60}}",
        "<<<\n                for (unsigned i = 0; i < `fml:b`.size(); i++)\n\t            `fml:a`.push_back(`fml:b`[i]);\n            >>>",
        "{}",
        "{assert connected(fml:dcid) & connected_to(fml:dcid) = fml:scid; assert num_queued_frames(fml:scid) > 0 -> fml:e = queued_level(fml:scid); assert fml:e = quic_packet_type.one_rtt & established_1rtt_keys(fml:scid); assert ~conn_closed(fml:scid)}",
        "<<<\n\t        `fml:a`.resize(`fml:s`);\n\t        for (unsigned i = 0; i < `fml:s`; i++)\n\t            `fml:a`[i] = y;\n\t    >>>",
        "assert vector[transport_parameter].end(fml:a) = 0",
        "<<<\n\t        if (0 <= `fml:x` && `fml:x` < (`quic_packet_retry.idx`)`fml:a`.size()) \n\t            `fml:a`[`fml:x`] = `fml:y`;\n\t    >>>",
        "{}",
        "{}",
        "{}",
        "{assert fml:x < fml:y & (fml:x < Y -> fml:y <= Y); assert tls_extensions.domain.succ(fml:x,fml:y)}",
        "fml:y := fml:x + 1",
        "{}",
        "local loc:0 {call loc:0 := socket_endpoint(fml:host, fml:s); local loc:dst {loc:dst := loc:0; local loc:idx {loc:idx := prot.arr.begin(fml:pkts); local loc:0 {call loc:0 := stream_data.empty; local loc:past_data {loc:past_data := loc:0; while loc:idx < prot.arr.end(fml:pkts)\n{local loc:ppkt {loc:ppkt := prot.arr.value(fml:pkts,loc:idx); local loc:0 {call loc:0 := src_tls_id(loc:dst); local loc:tls_id {loc:tls_id := loc:0; local loc:header {loc:header := stream_data.value(loc:ppkt,0); local loc:hdr_type {loc:hdr_type := bfe[0][6](stream_data.value(loc:ppkt,0)); local loc:tt {loc:tt := bvand(loc:hdr_type,0x30); local loc:is_long {loc:is_long := bvand(0x80:byte,loc:header) ~= 0; local loc:version {loc:version := stream_data.segment(loc:ppkt,1,1 + 4); local loc:0 {call loc:0 := bytes_to_version(loc:version); local loc:bversion {loc:bversion := loc:0; local loc:ptype {loc:ptype := bvand(0x30:byte,loc:header); if loc:bversion = 0 & loc:is_long | version_not_found(fml:src) {call loc:past_data := stream_data.extend(loc:past_data, loc:ppkt); call tls_client_version_response(fml:src, loc:dst, loc:past_data)}\nelse {if loc:tt = 0x30 & loc:is_long & loc:bversion ~= 0 {call tls_client_retry_response(fml:src, loc:dst, loc:ppkt)}\nelse {local loc:0 {call loc:0 := reference_pkt_num(loc:ppkt, true); local loc:rnum {loc:rnum := loc:0; local loc:0 {call loc:0 := prot.decrypt(loc:tls_id, loc:rnum, loc:ppkt); local loc:res {loc:res := loc:0; if tls_api.upper.ok(loc:res) {local loc:0 {call loc:0 := is_padding_packet(tls_api.upper.payload(loc:res)); local loc:is_pad {loc:is_pad := loc:0; if loc:is_pad {call padding_packet_event(fml:host, fml:src, loc:dst, loc:ppkt)}\nelse {local loc:0 {call loc:0 := pkt_serdes.from_bytes(tls_api.upper.data(loc:res)); local loc:pkt {loc:pkt := loc:0; local loc:0 {call loc:0 := prot.get_pnum_len(tls_api.upper.data(loc:res)); call quic_packet.seq_num(loc:pkt) := prot.correct_pnum(loc:rnum, quic_packet.seq_num(loc:pkt), loc:0)}; call recv_packet(fml:host, fml:src, loc:dst, loc:pkt); call infer_tls_events(fml:src, loc:dst, loc:pkt); call packet_event(fml:src, loc:dst, loc:pkt)}}}}}}\nelse {call undecryptable_packet_event(fml:host, fml:src, loc:dst, loc:ppkt)}}}}}}}; call loc:idx := prot.idx.next(loc:idx)}}}}}}}}}}}}; version_not_found(fml:src) := false; call show_last_datagram_size(last_datagram_received_size); if ~first_datagram_received & fml:host = endpoint_id.server {assert last_datagram_received_size + 8 > 1200; first_datagram_received := true}; last_datagram_received_size := 0:stream_pos}}}}}",
        "{assert frame.ack.range.arr.end(fml:a) = fml:s; assert 0:frame.ack.range.idx <= X & X < frame.ack.range.arr.end(old_fml:a) -> frame.ack.range.arr.value(fml:a,X) = frame.ack.range.arr.value(old_fml:a,X); assert frame.ack.range.arr.end(old_fml:a) <= X & X < fml:s -> frame.ack.range.arr.value(fml:a,X) = fml:v}",
        "{}",
        "{}",
        "<<<\n                if ((`quic_packet.idx`)`fml:a`.size() > 0)\n                    `fml:res` = `fml:a`.back();\n            >>>",
        "fml:y := fml:x - 1",
        "<<<\n\t        `fml:a`.resize(`fml:s`);\n\t        for (unsigned i = 0; i < `fml:s`; i++)\n\t            `fml:a`[i] = y;\n\t    >>>",
        "{assert quic_packet_coal_0rtt.src_cid(fml:pkt) = quic_packet_coal_0rtt.src_cid_i(fml:pkt); assert quic_packet_coal_0rtt.dst_cid(fml:pkt) = quic_packet_coal_0rtt.dst_cid_i(fml:pkt); assert quic_packet_coal_0rtt.seq_num(fml:pkt) = quic_packet_coal_0rtt.seq_num_i(fml:pkt); local loc:dcid_i {loc:dcid_i := quic_packet_coal_0rtt.dst_cid_i(fml:pkt); local loc:scid_i {loc:scid_i := quic_packet_coal_0rtt.src_cid_i(fml:pkt); if cid_mapped(loc:dcid_i) {loc:dcid_i := cid_to_aid(loc:dcid_i)}; local loc:dcid {loc:dcid := quic_packet_coal_0rtt.dst_cid(fml:pkt); local loc:scid {loc:scid := quic_packet_coal_0rtt.src_cid(fml:pkt); if cid_mapped(loc:dcid) {loc:dcid := cid_to_aid(loc:dcid)}; if fml:src = client_alt | fml:dst = client_alt {migration_done := true}; assert stream_data.end(quic_packet_coal_0rtt.token_i(fml:pkt)) ~= 0 -> quic_packet_coal_0rtt.ptype_i(fml:pkt) = quic_packet_type.initial & retry_recv(loc:dcid_i); assert quic_packet_coal_0rtt.ptype_i(fml:pkt) ~= quic_packet_type.zero_rtt; assert connected(loc:dcid_i) | quic_packet_coal_0rtt.ptype_i(fml:pkt) = quic_packet_type.initial & is_client(loc:scid_i) & loc:dcid_i = nonce_cid(loc:scid_i); local loc:0 {call loc:0 := quic_packet_coal_0rtt.long(fml:pkt); if loc:0 {assert connected(loc:dcid_i) -> connected_to(loc:dcid_i) = loc:scid_i}\nelse {loc:scid_i := connected_to(loc:dcid_i)}}; assert quic_packet_coal_0rtt.ptype_i(fml:pkt) = queued_level(loc:scid_i); if _generating {assert quic_packet_coal_0rtt.seq_num_i(fml:pkt) <= last_pkt_num(loc:scid_i,quic_packet_coal_0rtt.ptype_i(fml:pkt)) + 0x15; assert quic_packet_coal_0rtt.seq_num_i(fml:pkt) > last_pkt_num(loc:scid_i,quic_packet_coal_0rtt.ptype_i(fml:pkt)); assert quic_packet_coal_0rtt.seq_num(fml:pkt) = quic_packet_coal_0rtt.seq_num_i(fml:pkt)}; assert ~sent_pkt(loc:scid_i,quic_packet_coal_0rtt.ptype_i(fml:pkt),quic_packet_coal_0rtt.seq_num_i(fml:pkt)); sent_pkt(loc:scid_i,quic_packet_coal_0rtt.ptype_i(fml:pkt),quic_packet_coal_0rtt.seq_num_i(fml:pkt)) := true; assert num_queued_frames(loc:scid_i) > 0; assert quic_packet_coal_0rtt.payload_i(fml:pkt) = queued_frames(loc:scid_i); local loc:0 {call loc:0 := quic_packet_coal_0rtt.long(fml:pkt); assert conn_seen(loc:scid_i) & loc:0 & is_client(loc:scid_i) -> conn_requested(fml:src,fml:dst,loc:scid_i)}; assert conn_seen(loc:dcid_i) -> hi_non_probing_endpoint(loc:dcid_i,fml:dst); assert ~_generating & ~queued_non_ack(loc:scid_i) -> ack_credit(loc:scid_i) > 0; if conn_draining(loc:scid_i) {assert ~draining_pkt_sent(loc:scid_i) & queued_close(loc:scid_i)}; assert quic_packet_coal_0rtt.ptype(fml:pkt) = quic_packet_type.zero_rtt; local loc:type_app {loc:type_app := quic_packet_type.one_rtt; assert ~sent_pkt(loc:scid,loc:type_app,quic_packet_coal_0rtt.seq_num(fml:pkt)); sent_pkt(loc:scid,loc:type_app,quic_packet_coal_0rtt.seq_num(fml:pkt)) := true; assert num_queued_frames_rtt(loc:scid) > 0; assert quic_packet_coal_0rtt.payload(fml:pkt) = queued_frames_rtt(loc:scid); assert connected(loc:dcid) -> connected_to(loc:dcid) = loc:scid; local loc:0 {call loc:0 := quic_packet_coal_0rtt.long(fml:pkt); assert conn_seen(loc:scid) & loc:0 & is_client(loc:scid) -> conn_requested(fml:src,fml:dst,loc:scid)}}}}}}}",
        "{}",
        "local loc:0 {call loc:0 := socket_endpoint_mim(fml:host, fml:s, fml:src); local loc:dst {loc:dst := loc:0; local loc:idx {loc:idx := prot.arr.begin(fml:pkts); if ~mim_agent.nat_configured {mim_agent.nat_configured := true; call mim_client_target.set_ep(fml:src); call mim_server_target.set_ep(loc:dst); if sock_mim_client = 0 {call fake_client.set_ep(mim_client_target.ep); ip.endpoint.interface(fake_client.ep) := ip.lo; call sock_mim_client := net.listen(endpoint_id.mim, fake_client.ep)}}; while loc:idx < prot.arr.end(fml:pkts)\n{local loc:ppkt {loc:ppkt := prot.arr.value(fml:pkts,loc:idx); local loc:0 {call loc:0 := src_tls_id(loc:dst); local loc:tls_id {loc:tls_id := loc:0; local loc:header {loc:header := stream_data.value(loc:ppkt,0); local loc:hdr_type {loc:hdr_type := bfe[0][6](stream_data.value(loc:ppkt,0)); local loc:tt {loc:tt := bvand(loc:hdr_type,0x30); local loc:is_long {loc:is_long := bvand(0x80:byte,loc:header) ~= 0; local loc:version {loc:version := stream_data.segment(loc:ppkt,1,1 + 4); local loc:0 {call loc:0 := bytes_to_version(loc:version); local loc:bversion {loc:bversion := loc:0; local loc:ptype {loc:ptype := bvand(0x30:byte,loc:header); call recv_packet_mim(fml:host, fml:src, loc:dst, loc:ppkt); local loc:rppkt {loc:rppkt := loc:ppkt; if forward_packets {if fml:src = mim_client_target.ep {local loc:pkt_type {loc:pkt_type := quic_packet_type.initial; if loc:is_long {if bvand(stream_data.value(loc:ppkt,0),0xf0) = 0xc0 {loc:pkt_type := quic_packet_type.initial}\nelse {if loc:bversion = 0 | version_not_found(fml:src) {loc:pkt_type := quic_packet_type.version_negociation}\nelse {if loc:tt = 0x30 & loc:bversion ~= 0 {loc:pkt_type := quic_packet_type.retry}\nelse {if loc:tt = 0x10 & loc:bversion ~= 0 {loc:pkt_type := quic_packet_type.zero_rtt}\nelse {loc:pkt_type := quic_packet_type.handshake}}}}}\nelse {loc:pkt_type := quic_packet_type.one_rtt}; if (loc:pkt_type = mim_agent.enc_level_ppkt_to_be_forge | loc:pkt_type = quic_packet_type.initial) & save_packet {call mim_agent.save_packets(loc:ppkt); call mim_agent.ppkt_to_be_replayed_to_server := forged_pkts.append(mim_agent.ppkt_to_be_replayed_to_server, loc:ppkt); mim_agent.ppkt_saved_b := true}; call mim_agent.ppkt_to_be_forwarded_to_server(mim_agent.cppkt_forwarded_to_server) := forged_pkts.append(mim_agent.ppkt_to_be_forwarded_to_server(mim_agent.cppkt_forwarded_to_server), loc:rppkt)}}\nelse {if fml:src = mim_server_target.ep {local loc:pkt_type {loc:pkt_type := quic_packet_type.initial; if loc:is_long {if bvand(stream_data.value(loc:ppkt,0),0xf0) = 0xc0 {loc:pkt_type := quic_packet_type.initial}\nelse {if loc:bversion = 0 | version_not_found(fml:src) {loc:pkt_type := quic_packet_type.version_negociation}\nelse {if loc:tt = 0x30 & loc:bversion ~= 0 {loc:pkt_type := quic_packet_type.retry; mim_agent.wait_forward := false}\nelse {if loc:tt = 0x10 & loc:bversion ~= 0 {loc:pkt_type := quic_packet_type.zero_rtt; mim_agent.wait_forward := false}\nelse {loc:pkt_type := quic_packet_type.handshake; mim_agent.wait_forward := false}}}}}\nelse {loc:pkt_type := quic_packet_type.one_rtt; mim_agent.wait_forward := false}; call mim_agent.ppkt_to_be_forwarded_to_client(mim_agent.cppkt_forwarded_to_client) := forged_pkts.append(mim_agent.ppkt_to_be_forwarded_to_client(mim_agent.cppkt_forwarded_to_client), loc:rppkt)}}}}; if forward_packets_victim {local loc:ddst {loc:ddst := victim_agent.ep; call mim_agent.ppkt_to_be_reflected_to_victim := forged_pkts.append(mim_agent.ppkt_to_be_reflected_to_victim, loc:rppkt); call mim_agent.reflection_packets(loc:rppkt, 0:ip.port)}}; if replay_packets {call mim_agent.forward_packet_to(mim_agent.ppkt_saved, fml:host, fml:s, fml:src, loc:dst)}; if ~mim_agent.init_cids {local loc:dcil {loc:dcil := bfe[0][7](stream_data.value(loc:ppkt,5)); local loc:0 {call loc:0 := cid_to_bytes(0:cid, 1:cid_length); local loc:ikm {loc:ikm := loc:0; if loc:dcil ~= 0 {client_initial_dcil := loc:dcil; loc:ikm := stream_data.segment(loc:ppkt,6,6 + loc:dcil)}; local loc:scil {loc:scil := bfe[0][7](stream_data.value(loc:ppkt,6 + loc:dcil)); local loc:0 {call loc:0 := cid_to_bytes(0:cid, 1:cid_length); local loc:skm {loc:skm := loc:0; if loc:scil ~= 0 {client_initial_scil := loc:scil; client_non_zero_scil := true; loc:skm := stream_data.segment(loc:ppkt,6 + loc:dcil + 1,6 + loc:dcil + 1 + loc:scil)}; call client_initial_dcid := bytes_to_cid(loc:ikm); call client_initial_scid := bytes_to_cid(loc:skm); call export_length_cid_mim(loc:dcil, loc:scil); mim_agent.init_cids := true}}}}}}}; call loc:idx := prot.idx.next(loc:idx)}}}}}}}}}}}}}; if forward_packets & keep_coalesed {if fml:src = mim_client_target.ep {mim_agent.cppkt_forwarded_to_server := mim_agent.cppkt_forwarded_to_server + 1}\nelse {if fml:src = mim_server_target.ep {mim_agent.cppkt_forwarded_to_client := mim_agent.cppkt_forwarded_to_client + 1}}}}}}",
        "{}",
        "<<<\n                for (unsigned i = 0; i < `fml:b`.size(); i++)\n\t            `fml:a`.push_back(`fml:b`[i]);\n            >>>",
        "<<<\n       srand((unsigned) time(0)); //fixed or random seed ?\n       res = 0;\n       res = ::rand()%(max-1) + 0;\n       std::cerr << \"lower random: \" << res << \"\\n\";\n       >>>",
        "{}",
        "assert vector[tls.extension].end(fml:a) = fml:s & vector[tls.extension].value(fml:a,X) = fml:y",
        "call enqueue_frame(fml:scid, fml:f, fml:e, false)",
        "<<<\n\t        if (`fml:a`.size() > 0) {\n\t            a.pop_back();\n\t        }\n            >>>",
        "{}",
        "{assert fml:y < fml:x & (Y:vector[tls.compression_method].domain < fml:x -> Y <= fml:y); assert vector[tls.compression_method].domain.succ(fml:y,fml:x)}",
        "<<<\n                for (unsigned i = 0; i < `fml:b`.size(); i++)\n\t            `fml:a`.push_back(`fml:b`[i]);\n            >>>",
        "{}",
        "{}",
        "assert 0:index <= fml:s",
        "fml:y := fml:x - 1",
        "{}",
        "{}",
        "<<<\n        const char * session_file = getenv(\"initial_max_data\");\n        FILE *fp;\n        if(session_file != NULL) {\n            fp = fopen(session_file,\"w\");\n            fprintf(fp, \"%llu\", i);\n            fclose(fp);\n        }\n\n        >>>",
        "<<<\t\t\t// Modified code from Tom R.\n\t\t\tchar *dev = strdup(\"lo\"); //TODO\n\t\t\tbool free = false;\n\t\t\tchar opt;\n\t\t\tint port;\n\t\t\t\n\t\t\tif (dst.interface == `ip.ivy`) {\n\t\t\t\tdev = strdup(\"ivy\");\n\t\t\t}\n\t\t\tint l = strlen(dev);\n\n\t\t\ts = socket(AF_INET, SOCK_DGRAM,0);\n\t\t\tstd::cerr << \"listen SOCKET \" << s << std::endl;\n\t\t\tstd::cerr << \"listen SOCKET dev \" << dev << std::endl;\n\t\t\tif (s <= 0) {\n\t\t\t\tprintf(\"socket: socket\\n\");\n\t\t\t\texit(EXIT_FAILURE);\n\t\t\t}\n\t\t\tint v = 1;\n\t\t\tif (setsockopt(s, SOL_IP, IP_FREEBIND, &v, sizeof(v)) < 0) {\n\t\t\t\tperror(\"setsockopt: freebind\");\n\t\t\t\texit(EXIT_FAILURE);\n\t\t\t}\n\t\t\tif (setsockopt(s, SOL_SOCKET, SO_BINDTODEVICE, dev, l) < 0) {\n\t\t\t\tchar s[100];\n\t\t\t\tsprintf(s, \"setsockopt: bind to device %s\", dev);\n\t\t\t\tperror(s);\n\t\t\t\texit(EXIT_FAILURE);\n\t\t\t}\n\t\t\t\n\t\t\tint error = 0;\n\t\t\tif (setsockopt(s, SOL_SOCKET, SO_REUSEADDR,  &error, sizeof(int)) < 0 || setsockopt(s, SOL_SOCKET, SO_REUSEPORT,  &error, sizeof(int)) < 0)\n\t\t\t\tperror(\"setsockopt(SO_REUSEADDR) failed\");\n\t\t\t\n\t\t\tstruct sockaddr_in v_dst = {};\n\t\t\tv_dst.sin_addr.s_addr = htonl(dst.addr);\n\t\t\t//inet_pton(AF_INET, ip, &v_dst.sin_addr.s_addr);\n\t\t\tv_dst.sin_port = htons(dst.port);\n\t\t\tv_dst.sin_family = AF_INET;\n\t\t\t\n\t\t\tif (bind(s, (struct sockaddr*) &v_dst, sizeof(struct sockaddr_in)) != 0) {\n\t\t\t\t\tchar s[100];\n\t\t\t\t\tsprintf(s, \"bind to addr %u\", htonl(dst.addr));\n\t\t\t\t\tperror(s);\n\t\t\t\texit(EXIT_FAILURE);\n\t\t\t}\n\t\t\t\n\t\t\n\t\t\t/*\n\t\t\tchar buf[100];\n\t\t\tint len = 100;\n\t\t\tif (recv(s, buf, len, 0) == -1) {\n\t\t\t\tperror(\"recv\");\n\t\t\t\texit(EXIT_FAILURE);\n\t\t\t}\n\t\t\tprintf(\"%s: %s\\n\", dev, buf);\n\t\t\t*/\n\n\t\t\tinstall_reader(new udp_reader(`prm:V0`,s, *`net.impl.cb(prm:V0)`, this));\n\n\t\t>>>",
        "<<<\n\t        `fml:a`.push_back(`fml:v`);\n            >>>",
        "<<<\n        //is_rtt = true; //todo\n        if(is_server)\n            is_client_test = true;\n\n        std::cerr << \"create cid = \" << c << std::endl;  \n\n        // We create a new picootls session, and add an entry in the cid_map\n        // for it.\n\n        ptls_context_t* ctx;\n        ctx = new ptls_context_t;\n        memset(ctx, 0, sizeof(ptls_context_t));\n\n        /*\n        HelloRetryRequest random:\n            CF 21 AD 74 E5 9A 61 11 BE 1D 8C 02 1E 65 B8 91\n            C2 A2 11 16 7A BB 8C 5E 07 9E 09 E2 C8 A8 33 9C\n        */\n        ctx->random_bytes = ptls_openssl_random_bytes;\n        ctx->key_exchanges = picotls_key_exchanges; \n        ctx->cipher_suites = picotls_cipher_suites; \n        ctx->send_change_cipher_spec = 0;\n        // ctx->hkdf_label_prefix = QUIC_LABEL_QUIC_BASE;\n        \n        ctx->hkdf_label_prefix__obsolete = NULL;\n        ctx->update_traffic_key = (ptls_update_traffic_key_t *)malloc(sizeof(ptls_update_traffic_key_t));\n        memset(ctx->update_traffic_key, 0, sizeof(ptls_update_traffic_key_t));\n        //ctx->update_traffic_key = new ptls_update_traffic_key_t;\n        ctx->update_traffic_key->cb = quic_update_traffic_key_cb;\n        \n        //ctx->on_extension = new ptls_on_extension_t;\n        ctx->on_extension = (ptls_on_extension_t *)malloc(sizeof(ptls_on_extension_t));\n        memset(ctx->on_extension, 0, sizeof(ptls_on_extension_t));\n        ctx->on_extension->cb = tls_on_extension_cb;\n        \n        ctx->get_time = &ptls_get_time;\n        const char * is_zrtt = getenv(\"ZERORTT_TEST\");\n        \n        ctx->max_early_data_size = 0xFFFFFFFF;\n\n        std::cerr << \"PROUT 3 \"  << std::endl;\n        \n        ptls_handshake_properties_t *handshake_properties = new ptls_handshake_properties_t; \n        memset(handshake_properties, 0, sizeof(ptls_handshake_properties_t));\n        handshake_properties->collect_extension = tls_collect_extensions_cb;\n        handshake_properties->collected_extensions = tls_collected_extensions_cb;\n    \n        std::cerr << \"PROUT 4 \" << std::endl;\n        \n        ptls_iovec_t *alpn_vec = new(ptls_iovec_t);  // TODO: will leak this\n        \n        // h3-x == HTTP/3 over QUIC \n        // hq-x == HTTP/0.9 over QUIC\n        alpn_vec->base = (uint8_t*) \"hq-interop\";\n        if(const char* env_p = std::getenv(\"TEST_ALPN\")) { \n            std::cerr << \"TEST_ALPN \" << env_p << std::endl;\n            alpn_vec->base = (uint8_t*) env_p;\n        }\n\n        alpn_vec->len = strlen((char *)(alpn_vec->base));\n        handshake_properties->client.negotiated_protocols.count = 1;\n        handshake_properties->client.negotiated_protocols.list  = alpn_vec;\n\n        // add the extensions\n        ptls_raw_extension_t *ptls_exts = new ptls_raw_extension_t[e.size()+1];\n        for (unsigned i = 0; i < e.size(); i++) {\n            `tls_ser` ser;\n\t        std::cerr << \"etype =\" << std::endl;  \n            __ser(ser,e[i]);\n            unsigned etype = (((unsigned char)(ser.res[0])) << 8) + ((unsigned char)(ser.res[1]));\n            unsigned len = (((unsigned char)(ser.res[2])) << 8) + ((unsigned char)(ser.res[3]));\n            unsigned char *data = new unsigned char[ser.res.size()-4];\n            std::copy(ser.res.begin()+4,ser.res.end(),data);\n            ptls_exts[i].type = etype;\n            std::cerr << \"etype =\" << etype << std::endl;  \n            ptls_exts[i].data.base = data;\n            //std::cerr << \"data =\" << data << std::endl;  \n            ptls_exts[i].data.len = len;\n            std::cerr << \"len =\" << len << std::endl;  \n            // int eres = gnutls_session_ext_register (session, \"ext_name\", etype,\n            //   GNUTLS_EXT_APPLICATION, gnutls_ext_supp_recv_params,\n            //   gnutls_ext_supp_send_params, 0,0,0,0);\n            // if (eres != GNUTLS_E_SUCCESS) {\n            //     std::cerr << \"gnutls_session_ext_register\\n\";\n            //     exit(1);\n            // }\n        }\n        ptls_exts[e.size()].type = 0xffff;\n        ptls_exts[e.size()].data.base = NULL;\n        ptls_exts[e.size()].data.len = 0;\n        handshake_properties->additional_extensions = ptls_exts;\n\n        // Read the certificate, if we are a server\n\n        if (is_server) { //segfautl ??\n            int r = ptls_load_certificates(ctx, \"leaf_cert.pem\");\n            std::cerr << \"ptls_load_certificates \"  << r << std::endl;\n            /* Read the certificate file */\n            if (r != 0) {\n                std::cerr << \"could not load certificate file leaf_cert.pem\\n\";\n                exit(1);\n            } else if(set_sign_certificate_from_key_file(\"leaf_cert.key\", ctx)) {\n                std::cerr << \"could not load key file leaf_cert.key\\n\";\n                exit(1);\n            }\n        }\n\n        ptls_t *session;\n        session = ptls_new(ctx,is_server ? 1 : 0);\n        ptls_set_server_name(session, \"servername\", strlen(\"servername\"));\n\n        if(const char* env_p = std::getenv(\"TEST_IMPL\")) { \n            std::cerr << \"TEST_IMPL \" << env_p << std::endl;\n            std::cerr << \"is_server \" << is_server << std::endl;\n            if(strncmp(env_p,\"quic-go\",10) == 0 \n                || strncmp(env_p,\"quiche\",10) == 0 \n                   || strncmp(env_p,\"lsquic\",10) == 0 \n                   || strncmp(env_p,\"quinn\",10) == 0\n                      || strncmp(env_p,\"aioquic\",10) == 0) //TODO ask why sometime ALPN needed\n                if (is_server) { // && false\n                        std::cerr << \"ptls_set_negotiated_protocol\"  << std::endl;\n                        ptls_set_negotiated_protocol(session, \n                            (const char*) handshake_properties->client.negotiated_protocols.list[0].base, \n                            handshake_properties->client.negotiated_protocols.list[0].len);\n                } \n        }\n\n        picotls_connection *s = new picotls_connection(c, session, ctx, *`tls_api.upper.foo.cb`, handshake_properties, is_server);\n        *ptls_get_data_ptr(session) = s;   \n        \n        if(is_zrtt != NULL){ //is_server &&\n            /**\n            * @brief picoquic_server_setup_ticket_aead_contexts\n            */\n            uint8_t temp_secret[256]; /* secret_max */\n            int ret = 0;\n            std::cerr << \"picoquic_server_setup_ticket_aead_contexts 1 \" << std::endl;\n            ptls_cipher_suite_t cipher_ticket = { 0, &ptls_openssl_aes128gcm, &ptls_openssl_sha256 };\n            if (cipher_ticket.hash->digest_size > sizeof(temp_secret)) {\n                ret = -1;\n            } else {\n                std::cerr << \"picoquic_server_setup_ticket_aead_contexts 2 \" << std::endl;\n                //ctx->random_bytes(temp_secret, cipher_ticket.hash->digest_size);\n                for(int i = 0; i < cipher_ticket.hash->digest_size; i++)\n                    temp_secret[i] = 1;\n                std::cerr << \"picoquic_server_setup_ticket_aead_contexts 3 \" << std::endl;\n                /* Create the AEAD contexts */\n                ret = quic_set_aead_from_secret(&s->ticket_aead_encrypt, &cipher_ticket, 1, temp_secret, \"random label\");\n                if (ret == 0) {\n                    std::cerr << \"picoquic_server_setup_ticket_aead_contexts 4 \" << std::endl;\n                    ret = quic_set_aead_from_secret(&s->ticket_aead_decrypt, &cipher_ticket, 0, temp_secret, \"random label\");\n                }\n                std::cerr << \"picoquic_server_setup_ticket_aead_contexts 5 \" << std::endl;\n                /* erase the temporary secret */\n                ptls_clear_memory(temp_secret, cipher_ticket.hash->digest_size);\n            } \n\n            ptls_iovec_t ticket_psk = ptls_iovec_init(NULL, 0);\n                std::cerr << \"ptls_encrypt_ticket_t \" << is_zrtt << std::endl;\n                ptls_encrypt_ticket_t* encrypt_ticket = (ptls_encrypt_ticket_t*) malloc(sizeof(ptls_encrypt_ticket_t)+ sizeof(ptls_iovec_t*));\n                if (encrypt_ticket != NULL) {\n                    encrypt_ticket->cb = tls_server_encrypt_ticket_cb;\n                    ptls_iovec_t** ppreceiver = (ptls_iovec_t**)(((char*)encrypt_ticket) + sizeof(ptls_encrypt_ticket_t));\n                    *ppreceiver = &ticket_psk;\n                    ctx->encrypt_ticket = encrypt_ticket;\n                }\n\n            ctx->ticket_lifetime = 100000; /* 100,000 seconds, a bit more than one day */\n            ctx->max_early_data_size = 0xFFFFFFFF;\n            ctx->require_dhe_on_psk = 1;\n            ctx->omit_end_of_early_data = 1;\n\n            ptls_iovec_t ticket_psk2 = ptls_iovec_init(NULL, 0);\n                std::cerr << \"ptls_save_ticket_t \" << is_zrtt << std::endl;\n                ptls_save_ticket_t* save_ticket = (ptls_save_ticket_t*) malloc(sizeof(ptls_save_ticket_t)+ sizeof(ptls_iovec_t*)); // + sizeof(ptls_iovec_t*)\n                if (save_ticket != NULL) {\n                    save_ticket->cb = tls_client_save_ticket_cb; //memory error\n                    ptls_iovec_t** ppreceiver2 = (ptls_iovec_t**)(((char*)save_ticket) + sizeof(ptls_save_ticket_t));\n                    *ppreceiver2 = &ticket_psk2;\n                    ctx->save_ticket = save_ticket;\n                }\n        }\n\n        if(is_zrtt == NULL){\n            std::cerr << \"PROUT 2 \" << std::endl;\n            ctx->ticket_lifetime = 0; // no ticket? was: 100000; /* 100,000 seconds, a bit more than one day */\n            ctx->require_dhe_on_psk = 1;\n            ctx->omit_end_of_early_data = 0;\n        }\n\n        std::cerr << \"ptls_get_data_ptr\"  << std::endl;\n\n\t    `tls_api.upper.foo.cid_map`[c] = s;\n        \n        std::cerr << \"cid_map[c] = s;\"  << std::endl;\n\n        // Start the handshake if we are the client. The in_epoch is zero for \"initial\".\n\n        if (!is_server) \n            picotls_do_handshake(s,0,0,0);\n        >>>",
        "<<<\n\t        if (0 <= `fml:x` && `fml:x` < (`index`)`fml:a`.size()) \n\t            `fml:a`[`fml:x`] = `fml:y`;\n\t    >>>",
        "{}",
        "<<<\n                for (unsigned i = 0; i < `fml:b`.size(); i++)\n\t            `fml:a`.push_back(`fml:b`[i]);\n            >>>",
        "{}",
        "{if nclients > 1 {local loc:cdx {loc:cdx := clients.client.arr.begin(clients.clients); while loc:cdx < clients.client.arr.end(clients.clients)\n{local loc:cc {loc:cc := clients.client.arr.value(clients.clients,loc:cdx); call loc:cdx := clients.client.idx.next(loc:cdx)}}}}\nelse {call client.set_ep(fml:src)}; local loc:0 {call loc:0 := bytes_to_version(stream_data.segment(fml:spkt,1,5)); local loc:version {loc:version := loc:0; local loc:lens {loc:lens := stream_data.value(fml:spkt,5); local loc:dcil {loc:dcil := bfe[0][7](stream_data.value(fml:spkt,5)); local loc:0 {call loc:0 := cid_to_bytes(0:cid, 1:cid_length); local loc:ikm {loc:ikm := loc:0; if loc:dcil ~= 0 {client_initial_dcil := loc:dcil; loc:ikm := stream_data.segment(fml:spkt,6,6 + loc:dcil)}; local loc:0 {call loc:0 := bytes_to_cid(loc:ikm); local loc:dcid {loc:dcid := loc:0; local loc:scil {loc:scil := bfe[0][7](stream_data.value(fml:spkt,6 + loc:dcil)); local loc:0 {call loc:0 := cid_to_bytes(0:cid, 1:cid_length); local loc:skm {loc:skm := loc:0; if loc:scil ~= 0 {client_initial_scil := loc:scil; client_non_zero_scil := true; loc:skm := stream_data.segment(fml:spkt,6 + loc:dcil + 1,6 + loc:dcil + 1 + loc:scil)}; local loc:0 {call loc:0 := bytes_to_cid(loc:skm); local loc:scid {loc:scid := loc:0; if loc:scil = 0 | loc:dcil = 0 {issued_zero_length_cid := true}; assert loc:dcil >= 8; if ~retry_sent(loc:dcid) {client_initial_dcid := loc:dcid; client_initial_scid := loc:scid; call export_length_cid_extension(loc:dcil, loc:scil); call export_length_cid(loc:dcil, loc:scil)}; if ~tp_client_set | negocation_of_version(fml:src) {local loc:0 {call loc:0 := tls_extensions.empty; local loc:extns {loc:extns := loc:0; local loc:0 {call loc:0 := make_transport_parameters; call loc:extns := tls_extensions.append(loc:extns, loc:0)}; if zero_rtt_client_test {call tls_api.upper.create_0rtt_client(0:tls_api.id, true, loc:extns)}\nelse {call tls_api.upper.create(0:tls_api.id, true, loc:extns)}; tp_client_set := true}}}; client_initial_version := loc:version; if client_initial_version ~= initial_version & client_initial_version ~= 0xfaceb002 {negocation_of_version(fml:src) := true}\nelse {if (~initial_keys_set(loc:dcid) & retry_client_test -> retry_sent(loc:dcid)) | negocation_of_version(fml:src) {call export_length_cid_extension(loc:dcil, loc:scil); negocation_of_version(fml:src) := false; local loc:0 {call loc:0 := stream_data.empty; local loc:salt {loc:salt := loc:0; if client_initial_version = 0xfaceb002 | client_initial_version = 0xff00001b | client_initial_version = 0xff00001c {call loc:salt := stream_data.append(loc:salt, 0xc3:byte); call loc:salt := stream_data.append(loc:salt, 0xee:byte); call loc:salt := stream_data.append(loc:salt, 0xf7:byte); call loc:salt := stream_data.append(loc:salt, 0x12:byte); call loc:salt := stream_data.append(loc:salt, 0xc7:byte); call loc:salt := stream_data.append(loc:salt, 0x2e:byte); call loc:salt := stream_data.append(loc:salt, 0xbb:byte); call loc:salt := stream_data.append(loc:salt, 0x5a:byte); call loc:salt := stream_data.append(loc:salt, 0x11:byte); call loc:salt := stream_data.append(loc:salt, 0xa7:byte); call loc:salt := stream_data.append(loc:salt, 0xd2:byte); call loc:salt := stream_data.append(loc:salt, 0x43:byte); call loc:salt := stream_data.append(loc:salt, 0x2b:byte); call loc:salt := stream_data.append(loc:salt, 0xb4:byte); call loc:salt := stream_data.append(loc:salt, 0x63:byte); call loc:salt := stream_data.append(loc:salt, 0x65:byte); call loc:salt := stream_data.append(loc:salt, 0xbe:byte); call loc:salt := stream_data.append(loc:salt, 0xf9:byte); call loc:salt := stream_data.append(loc:salt, 0xf5:byte); call loc:salt := stream_data.append(loc:salt, 0x02:byte)}; if client_initial_version = 0xff00001d {call loc:salt := stream_data.append(loc:salt, 0xaf:byte); call loc:salt := stream_data.append(loc:salt, 0xbf:byte); call loc:salt := stream_data.append(loc:salt, 0xec:byte); call loc:salt := stream_data.append(loc:salt, 0x28:byte); call loc:salt := stream_data.append(loc:salt, 0x99:byte); call loc:salt := stream_data.append(loc:salt, 0x93:byte); call loc:salt := stream_data.append(loc:salt, 0xd2:byte); call loc:salt := stream_data.append(loc:salt, 0x4c:byte); call loc:salt := stream_data.append(loc:salt, 0x9e:byte); call loc:salt := stream_data.append(loc:salt, 0x97:byte); call loc:salt := stream_data.append(loc:salt, 0x86:byte); call loc:salt := stream_data.append(loc:salt, 0xf1:byte); call loc:salt := stream_data.append(loc:salt, 0x9c:byte); call loc:salt := stream_data.append(loc:salt, 0x61:byte); call loc:salt := stream_data.append(loc:salt, 0x11:byte); call loc:salt := stream_data.append(loc:salt, 0xe0:byte); call loc:salt := stream_data.append(loc:salt, 0x43:byte); call loc:salt := stream_data.append(loc:salt, 0x90:byte); call loc:salt := stream_data.append(loc:salt, 0xa8:byte); call loc:salt := stream_data.append(loc:salt, 0x99:byte)}; if client_initial_version = 0x00000001 | client_initial_version = 0xff000022 {call loc:salt := stream_data.append(loc:salt, 0x38:byte); call loc:salt := stream_data.append(loc:salt, 0x76:byte); call loc:salt := stream_data.append(loc:salt, 0x2c:byte); call loc:salt := stream_data.append(loc:salt, 0xf7:byte); call loc:salt := stream_data.append(loc:salt, 0xf5:byte); call loc:salt := stream_data.append(loc:salt, 0x59:byte); call loc:salt := stream_data.append(loc:salt, 0x34:byte); call loc:salt := stream_data.append(loc:salt, 0xb3:byte); call loc:salt := stream_data.append(loc:salt, 0x4d:byte); call loc:salt := stream_data.append(loc:salt, 0x17:byte); call loc:salt := stream_data.append(loc:salt, 0x9a:byte); call loc:salt := stream_data.append(loc:salt, 0xe6:byte); call loc:salt := stream_data.append(loc:salt, 0xa4:byte); call loc:salt := stream_data.append(loc:salt, 0xc8:byte); call loc:salt := stream_data.append(loc:salt, 0x0c:byte); call loc:salt := stream_data.append(loc:salt, 0xad:byte); call loc:salt := stream_data.append(loc:salt, 0xcc:byte); call loc:salt := stream_data.append(loc:salt, 0xbb:byte); call loc:salt := stream_data.append(loc:salt, 0x7f:byte); call loc:salt := stream_data.append(loc:salt, 0x0a:byte)}; call show_set_initial_keys(loc:ikm); call tls_api.upper.set_initial_keys(0:tls_api.id, loc:salt, loc:ikm); initial_keys_set(loc:dcid) := true}}}}}}}}}}}}}}}}}}",
        "{}",
        "<<<\n                if ((`index`)`fml:a`.size() > 0)\n                    `fml:res` = `fml:a`.back();\n            >>>",
        "<<<\n\t        `fml:s` = (`prot.idx`) `fml:a`.size();\n\t    >>>",
        "{used_cid(fml:dcid) := true; connected(fml:dcid) := true; connected_to(fml:dcid) := fml:scid}",
        "assert arr_pkt_num_s.end(fml:a) = 0",
        "<<<\n\t        if (`fml:a`.size() > 0) {\n\t            a.pop_back();\n\t        }\n            >>>",
        "<<<\n\t    std::vector<char> buf(y.size());\n\t    std::copy(y.begin(),y.end(),buf.begin());\n\t    `quic_deser_retry` des(buf);\n\t    __deser(des,x);\n\t    >>>",
        "assert 0:quic_packet.idx <= fml:x & fml:x < quic_packet.retired_cids.end(fml:a)",
        "{assert forged_pkts.end(fml:a) = fml:s; assert 0:index <= X & X < forged_pkts.end(old_fml:a) -> forged_pkts.value(fml:a,X) = forged_pkts.value(old_fml:a,X); assert forged_pkts.end(old_fml:a) <= X & X < fml:s -> forged_pkts.value(fml:a,X) = fml:v}",
        "<<<\t/*if(is_vnet) {\n\t\tstruct sockaddr_in v_dst = {};\n\t\tv_dst.sin_addr.s_addr = htonl(addr.addr);\n\t\t//inet_pton(AF_INET, htonl(dst.addr), &v_dst.sin_addr.s_addr);\n\t\tv_dst.sin_port = htons(dst.port);\n\t\tv_dst.sin_family = AF_INET;\n\t\tstd::cerr << \"sending from socket: \" << s << std::endl;\n\t\tif (sendto(s, buf, len, 0, (struct sockaddr*)&v_dst, sizeof(struct sockaddr_in)) != len) {\n\t\t\tchar s[100];\n\t\t\tsprintf(s, \"sendto %s\", buf);\n\t\t\tperror(s);\n\t\t\texit(EXIT_FAILURE);\n\t\t}\n\t} else {*/\n\t\tstruct sockaddr_in dstaddr;\n\t\tdstaddr.sin_family = AF_INET;\n\t\tdstaddr.sin_addr.s_addr = htonl(dst.addr);\n\t\t//dstaddr.sin_addr.s_addr = htonl(INADDR_ANY);\n\t\tdstaddr.sin_port = htons(dst.port);\n\t\tstd::cerr << \"sending from socket: \" << s << std::endl;\n\t\t\n\t\tstruct sockaddr_in sin;\n\t\tsocklen_t len = sizeof(sin);\n\t\tif (::getsockname(s, (struct sockaddr *)&sin, &len) == -1)\n\t\t\tperror(\"getsockname\");\n\t\telse\n\t\t\tstd::cerr <<  \"port number \" << ntohs(sin.sin_port)  << std::endl;\n\t\tstd::cerr << \"sending to id: \" << x << std::endl;\n\t\tstd::cerr << \"sending to id: \" << me << \" addr: \" << ntohl(dstaddr.sin_addr.s_addr) << \" port: \" << ntohs(dstaddr.sin_port) << std::endl;\n\t\t`quic_prot_ser` sr;\n\t\t__ser(sr,x);\n\t\tif (::getsockname(s, (struct sockaddr *)&sin, &len) == -1)\n\t\t\tperror(\"getsockname\");\n\t\telse\n\t\t\tstd::cerr <<  \"port number \" << ntohs(sin.sin_port)  << std::endl;\n\t\t\n\t\t\n\t\tint error = 0;\n\t\tsocklen_t lsen = sizeof (error);\n\t\tint retval = ::getsockopt (s, SOL_SOCKET, SO_ERROR, &error, &lsen);\n\t\t\n\t\tif (retval != 0) {\n\t\t\t/* there was a problem getting the error code */\n\t\t\tstd::cerr << \"error getting socket error code: \" << strerror(retval)  << std::endl;\n\t\t\treturn;\n\t\t}\n\n\t\tif (error != 0) {\n\t\t\t/* socket has a non zero error status */\n\t\t\tstd::cerr <<  \"socket error: \" << strerror(error)  << std::endl;\n\t\t}\n\t\t\n\t\tif (::sendto(s,&sr.res[0],sr.res.size(),0,(struct sockaddr *)&dstaddr,sizeof(dstaddr)) < 0) \n\tif (::sendto(s,&sr.res[0],sr.res.size(),0,(struct sockaddr *)&dstaddr,sizeof(dstaddr)) < 0) \n\t\tif (::sendto(s,&sr.res[0],sr.res.size(),0,(struct sockaddr *)&dstaddr,sizeof(dstaddr)) < 0) \n\t#ifdef _WIN32\n\t\t\t\t{ std::cerr << \"sendto failed \" << WSAGetLastError() << \"\\n\"; exit(1); }\n\t#else\n\t\t\t\t{ perror(\"sendto failed\"); exit(1); }\n\t#endif\n\t\terror = 0;\n\t\tlsen = sizeof (error);\n\t\tretval = ::getsockopt (s, SOL_SOCKET, SO_ERROR, &error, &lsen);\n\t\t\n\t\tif (retval != 0) {\n\t\t\t/* there was a problem getting the error code */\n\t\t\tstd::cerr << \"error getting socket error code: \" << strerror(retval)  << std::endl;\n\t\t\treturn;\n\t\t}\n\n\t\tif (error != 0) {\n\t\t\t/* socket has a non zero error status */\n\t\t\tstd::cerr <<  \"socket error: \" << strerror(error)  << std::endl;\n\t\t}\n\n\t\tstd::cerr << \"sending id finish\" << std::endl;\n\t//}\n\t\n\t>>>",
        "{}",
        "assert quic_packet_retry.retired_cids.value(fml:a,fml:x) = fml:y",
        "assert 0:replayed_quic_packet_0rtt.idx <= fml:x & fml:x < replayed_quic_packet_0rtt.retired_cids.end(fml:a)",
        "{}",
        "<<<\n\t        if (`fml:a`.size() > 0) {\n\t            a.pop_back();\n\t        }\n            >>>",
        "{}",
        "<<<\n                for (unsigned i = 0; i < `fml:b`.size(); i++)\n\t            `fml:a`.push_back(`fml:b`[i]);\n            >>>",
        "{}",
        "{}",
        "assert 0:vector[tls.cipher_suite].domain <= fml:s",
        "{}",
        "<<<\n                for (unsigned i = 0; i < `fml:a`.size()/2; i++) {\n                    std::swap(`fml:a`[i],`fml:a`[`fml:a`.size()-i-1]);\n                }\n            >>>",
        "assert 0:vector[tls.psk_identity].domain < fml:x",
        "{}",
        "assert 0:replayed_quic_packet_0rtt.idx <= fml:x & fml:x < replayed_quic_packet_0rtt.retired_cids.end(fml:a)",
        "{}",
        "fml:y := fml:x - 1",
        "local loc:cdx {loc:cdx := 0:clients.client.idx; while loc:cdx < 2\n{if fml:src = clients.client.ep(clients.client.arr.value(clients.clients,loc:cdx)) {fml:tls_id := clients.client.tls_id(clients.client.arr.value(clients.clients,loc:cdx))}; call loc:cdx := clients.client.idx.next(loc:cdx)}}",
        "{assert replayed_quic_packet_0rtt.retired_cids.end(fml:a) = replayed_quic_packet_0rtt.retired_cids.end(old_fml:a); assert replayed_quic_packet_0rtt.retired_cids.value(fml:a,X) = (fml:y if (X = fml:x) else replayed_quic_packet_0rtt.retired_cids.value(old_fml:a,X))}",
        "{}",
        "{assert fml:y < fml:x & (Y:forged_quic_packet.idx < fml:x -> Y <= fml:y); assert forged_quic_packet.idx.succ(fml:y,fml:x)}",
        "<<<\n\t        if (0 <= `fml:x` && `fml:x` < (`frame.ack_ecn.range.idx`)`fml:a`.size()) \n\t            `fml:a`[`fml:x`] = `fml:y`;\n\t    >>>",
        "<<<\n\t    `quic_ser_zerortt` ser;\n\t    __ser(ser,x);\n\t    y.resize(ser.res.size());\n\t    for (unsigned i = 0; i < ser.res.size(); i++)\n\t        y[i] = (unsigned char) ser.res[i];\n//\t    std::copy(ser.res.begin(),ser.res.end(),y.begin());\n\t    >>>",
        "{}",
        "<<<\n\t        `fml:a`.push_back(`fml:v`);\n            >>>",
        "fml:y := fml:x - 1",
        "{}",
        "local loc:jdx_s {loc:jdx_s := 0:jdx_s; while loc:jdx_s < arr_pkt_num_s.end(lastest_pkt_num_sender)\n{local loc:seq {loc:seq := arr_pkt_num_s.value(lastest_pkt_num_sender,loc:jdx_s); local loc:idx_s {loc:idx_s := 0:idx_s; while loc:seq <= fml:largest_acked & loc:idx_s < arr_streamid_s.end(lastest_stream_id_sender(loc:seq))\n{local loc:sid {loc:sid := arr_streamid_s.value(lastest_stream_id_sender(loc:seq),loc:idx_s); if sending_resetSent(loc:sid) {call handle_sending_resetRecvd(loc:sid)}\nelse {if sending_dataSent(loc:sid) {call handle_sending_dataRecvd(loc:sid)}}; call loc:idx_s := idx_s.next(loc:idx_s)}}; call loc:jdx_s := jdx_s.next(loc:jdx_s)}}}}",
        "<<<\n                for (unsigned i = 0; i < `fml:b`.size(); i++)\n\t            `fml:a`.push_back(`fml:b`[i]);\n            >>>",
        "{}",
        "<<<\n                /**\n                    Not working in localhost but should be ok in private adress TODO\n                        -> To simulate that we set: sock_mim_client = sock (from server) to simulate NAT\n                */\n                // -o lo\n                std::string command = \"sudo iptables -t nat -A POSTROUTING -d 10.0.3.1 -p udp --sport 4439:4439 -j SNAT --to-source 10.0.1.1:\" + std::to_string(dst); //  # error in localhost\n                int n = command.length();\n\n                // declaring character array\n                char command_array[n + 1];\n            \n                // copying the contents of the\n                // string to char array\n                strcpy(command_array, command.c_str());\n\n                int cr = system(command_array);\n            >>>",
        "{assert fml:y < fml:x & (Y:tls.handshakes.domain < fml:x -> Y <= fml:y); assert tls.handshakes.domain.succ(fml:y,fml:x)}",
        "{}",
        "assert fml:s = quic_packet_0rtt.arr.end(fml:a)",
        "<<<\n\t        `fml:a`.push_back(`fml:v`);\n            >>>",
        "{}",
        "{receiving_recv(S) := false; receiving_sizeKnown(S) := false; receiving_dataRecvd(S) := false; receiving_dataRead(S) := false; receiving_resetRecvd(S) := false; receiving_resetRead(S) := false}",
        "{}",
        "{assert fml:y < fml:x & (Y:jdx_r < fml:x -> Y <= fml:y); assert jdx_r.succ(fml:y,fml:x)}",
        "{}",
        "<<<\n\t        if (`fml:a`.size() > 0) {\n\t            a.pop_back();\n\t        }\n            >>>",
        "{assert frame.ack_ecn.range.arr.end(fml:a) > frame.ack_ecn.range.arr.end(old_fml:a) & ~(frame.ack_ecn.range.arr.end(old_fml:a) < X & X < frame.ack_ecn.range.arr.end(fml:a)); assert 0:frame.ack_ecn.range.idx <= X & X < frame.ack_ecn.range.arr.end(old_fml:a) -> frame.ack_ecn.range.arr.value(fml:a,X) = frame.ack_ecn.range.arr.value(old_fml:a,X); assert frame.ack_ecn.range.arr.value(fml:a,frame.ack_ecn.range.arr.end(old_fml:a)) = fml:v}",
        "assert 0:forged_quic_packet.idx <= fml:x & fml:x < forged_quic_packet.arr.end(fml:a)",
        "<<<\n\t        if (`fml:a`.size() > 0) {\n\t            a.pop_back();\n\t        }\n            >>>",
        "assert 0:quic_packet_vn.idx < fml:x",
        "{assert servers.server.arr.end(fml:a) = fml:s; assert 0:servers.server.idx <= X & X < servers.server.arr.end(old_fml:a) -> servers.server.arr.value(fml:a,X) = servers.server.arr.value(old_fml:a,X); assert servers.server.arr.end(old_fml:a) <= X & X < fml:s -> servers.server.arr.value(fml:a,X) = fml:v}",
        "{}",
        "<<<\n\t        unsigned __old_size = `fml:a`.size();\n\t        `fml:a`.resize(`fml:s`);\n\t        for (unsigned i = __old_size; i < (unsigned)`fml:s`; i++)\n\t            `fml:a`[i] = v;\n            >>>",
        "{}",
        "assert forged_quic_packet_retry.arr.value(fml:a,fml:x) = fml:y",
        "{}",
        "{}",
        "{}",
        "{assert tls.handshakes.end(fml:a) = tls.handshakes.end(old_fml:a); assert tls.handshakes.value(fml:a,X) = (fml:y if (X = fml:x) else tls.handshakes.value(old_fml:a,X))}",
        "{assert forged_protected_quic_packet.retired_cids.end(fml:a) = fml:s; assert 0:forged_protected_quic_packet.idx <= X & X < forged_protected_quic_packet.retired_cids.end(old_fml:a) -> forged_protected_quic_packet.retired_cids.value(fml:a,X) = forged_protected_quic_packet.retired_cids.value(old_fml:a,X); assert forged_protected_quic_packet.retired_cids.end(old_fml:a) <= X & X < fml:s -> forged_protected_quic_packet.retired_cids.value(fml:a,X) = fml:v}",
        "assert versions_bv.value(fml:a,fml:x) = fml:y",
        "{if nclients > 1 {local loc:cdx {loc:cdx := clients.client.arr.begin(clients.clients); while loc:cdx < clients.client.arr.end(clients.clients)\n{local loc:cc {loc:cc := clients.client.arr.value(clients.clients,loc:cdx); call loc:cdx := clients.client.idx.next(loc:cdx)}}}}\nelse {call client.set_ep(fml:src)}; local loc:0 {call loc:0 := bytes_to_version(stream_data.segment(fml:spkt,1,5)); local loc:ver {loc:ver := loc:0; local loc:lens {loc:lens := stream_data.value(fml:spkt,5); local loc:dcil {loc:dcil := bfe[0][7](stream_data.value(fml:spkt,5)); local loc:0 {call loc:0 := cid_to_bytes(0:cid, 1:cid_length); local loc:ikm {loc:ikm := loc:0; if loc:dcil ~= 0 {client_initial_dcil := loc:dcil; loc:ikm := stream_data.segment(fml:spkt,6,6 + loc:dcil)}; local loc:scil {loc:scil := bfe[0][7](stream_data.value(fml:spkt,6 + loc:dcil)); local loc:0 {call loc:0 := cid_to_bytes(0:cid, 1:cid_length); local loc:skm {loc:skm := loc:0; if loc:scil ~= 0 {client_initial_scil := loc:scil; client_non_zero_scil := true; loc:skm := stream_data.segment(fml:spkt,6 + loc:dcil + 1,6 + loc:dcil + 1 + loc:scil)}; assert loc:dcil >= 8; call client_initial_dcid := bytes_to_cid(loc:ikm); call client_initial_scid := bytes_to_cid(loc:skm); call export_length_cid_extension(loc:scil, loc:dcil); local loc:0 {call loc:0 := pkt_serdes_0rtt.from_bytes(fml:spkt); local loc:pkt {loc:pkt := loc:0; quic_packet_0rtt.ptype(loc:pkt) := quic_packet_type.zero_rtt; call recv_0rtt_pkt(fml:src, fml:dst, loc:pkt); call infer_tls_events_0rtt(fml:src, fml:dst, loc:pkt); call packet_event_0rtt(fml:src, fml:dst, loc:pkt)}}}}}}}}}}}}",
        "assert cids.value(fml:a,fml:x) = fml:y",
        "<<<\n\t        `fml:a`.push_back(`fml:v`);\n            >>>",
        "{}",
        "{}",
        "{assert quic_packet_0rtt.arr.end(fml:a) > quic_packet_0rtt.arr.end(old_fml:a) & ~(quic_packet_0rtt.arr.end(old_fml:a) < X & X < quic_packet_0rtt.arr.end(fml:a)); assert 0:quic_packet_0rtt.idx <= X & X < quic_packet_0rtt.arr.end(old_fml:a) -> quic_packet_0rtt.arr.value(fml:a,X) = quic_packet_0rtt.arr.value(old_fml:a,X); assert quic_packet_0rtt.arr.value(fml:a,quic_packet_0rtt.arr.end(old_fml:a)) = fml:v}",
        "<<<\n    val = b;\n    >>>",
        "{force_new_ack := false; call enqueue_frame(fml:scid, fml:f, fml:e, false)}",
        "{}",
        "<<<\n            const char * session_file = getenv(\"RETRY_TOKEN_FILE\");\n            FILE *fp;\n            size_t len = 0;\n            ssize_t read;\n            char * line = NULL;\n            if(session_file != NULL) {\n                fp = fopen(session_file,\"r\");\n                read = getline(&line, &len, fp);\n                fclose(fp);\n                bool is_error = false;\n                if(line != NULL) { \n                    std::cerr << \"RETRY_TOKEN_FILE 1 \" << line << std::endl;\n                    int hex_len = strlen(line);\n                    std::cerr << \"RETRY_TOKEN_FILE hex_len \" << hex_len << std::endl;\n                    uint8_t secret[hex_len/2];\n                    for (int j = 0; j < hex_len/2; j++) {\n                        int a = ws_xton(line[j*2]);\n                        int b = ws_xton(line[j*2 + 1]);\n                        if (a == -1 || b == -1) {\n                            is_error = true;\n                            std::cerr << \"a ERROR \" << line[j*2] << std::endl;\n                            std::cerr << \"b ERROR \" << line[j*2 + 1] << std::endl;\n                            std::cerr << \"RETRY_TOKEN_FILE ERROR \" << std::endl;\n                            break;\n                        }\n                        secret[j] = a << 4 | b;\n                        // std::cerr << \"RETRY_TOKEN_FILE a \" << a << std::endl;\n                        // std::cerr << \"RETRY_TOKEN_FILE b \" << b << std::endl;\n                        // std::cerr << \"RETRY_TOKEN_FILE secret[j] \" << secret[j] << std::endl;\n                    }  \n                    std::cerr << \"TEST_ST 2 \" << secret << std::endl;\n                    /*for(int i = (hex_len/2)-1; i >=0 && !is_error; i--)\n                        b.push_back(secret[i]);*/\n                    for(int i = 0; i < hex_len/2 && !is_error; i++)\n                        b.push_back(secret[i]);\n                }\n            }\n        >>>",
        "{}",
        "{assert versions.end(fml:a) > versions.end(old_fml:a) & ~(versions.end(old_fml:a) < X & X < versions.end(fml:a)); assert 0:index <= X & X < versions.end(old_fml:a) -> versions.value(fml:a,X) = versions.value(old_fml:a,X); assert versions.value(fml:a,versions.end(old_fml:a)) = fml:v}",
        "<<<\n\t        `fml:a`.resize(`fml:s`);\n\t        for (unsigned i = 0; i < `fml:s`; i++)\n\t            `fml:a`[i] = y;\n\t    >>>",
        "{}",
        "{}",
        "fml:y := fml:x - 1",
        "{assert bytes.end(fml:a) > bytes.end(old_fml:a) & ~(bytes.end(old_fml:a) < X & X < bytes.end(fml:a)); assert 0:idx <= X & X < bytes.end(old_fml:a) -> bytes.value(fml:a,X) = bytes.value(old_fml:a,X); assert bytes.value(fml:a,bytes.end(old_fml:a)) = fml:v}",
        "<<<\n\t        if (0 <= `fml:x` && `fml:x` < (`prot.idx`)`fml:a`.size()) \n\t            `fml:a`[`fml:x`] = `fml:y`;\n\t    >>>",
        "<<<\n\t        if (0 <= `fml:x` && `fml:x` < (`replayed_quic_packet_0rtt.idx`)`fml:a`.size()) \n\t            `fml:y` = `fml:a`[`fml:x`];\n\t    >>>",
        "assert arr_pkt_num_s.end(fml:a) = fml:s & arr_pkt_num_s.value(fml:a,X) = fml:y",
        "assert 0:vector[transport_parameter].domain < fml:x",
        "{assert fml:x < fml:y & (fml:x < Y -> fml:y <= Y); assert prot.idx.succ(fml:x,fml:y)}",
        "assert quic_packet.arr.end(fml:a) = fml:s & quic_packet.arr.value(fml:a,X) = fml:y",
        "{}",
        "assert 0:idx <= fml:x & fml:x < bytes.end(fml:a)",
        "<<<\n\t        `fml:s` = (`index`) `fml:a`.size();\n\t    >>>",
        "{assert arr_streamid_s.end(fml:a) = arr_streamid_s.end(old_fml:a); assert arr_streamid_s.value(fml:a,X) = (fml:y if (X = fml:x) else arr_streamid_s.value(old_fml:a,X))}",
        "fml:y := fml:x - 1",
        "{}",
        "assert fml:s = quic_packet_coal_0rtt.arr.end(fml:a)",
        "<<<\n\t    std::vector<char> buf(y.size());\n\t    std::copy(y.begin(),y.end(),buf.begin());\n\t    `quic_deser` des(buf);\n\t    __deser(des,x);\n\t    >>>",
        "assert 0:vector[tls.handshake].domain < fml:x",
        "assert fml:s = prot.arr.end(fml:a)",
        "{assert fml:y < fml:x & (Y:vector[tls.psk_identity].domain < fml:x -> Y <= fml:y); assert vector[tls.psk_identity].domain.succ(fml:y,fml:x)}",
        "{if (~zero_rtt_allowed | zero_rtt_sent) & fml:e ~= quic_packet_type.zero_rtt {assert connected(fml:dcid) & connected_to(fml:dcid) = fml:scid; assert fml:e = quic_packet_type.one_rtt & established_1rtt_keys(fml:scid)}\nelse {assert fml:e = quic_packet_type.one_rtt & established_1rtt_keys(fml:scid) | fml:e = quic_packet_type.zero_rtt & ~established_1rtt_keys(fml:scid)}; if ~zero_rtt_allowed | zero_rtt_sent {assert num_queued_frames(fml:scid) > 0 -> fml:e = queued_level(fml:scid)}; assert ~conn_closed(fml:scid); local loc:offset {loc:offset := (frame.stream.offset(fml:f) if frame.stream.off(fml:f) else 0); assert loc:offset + frame.stream.length(fml:f) <= stream_app_data_end(fml:dcid,frame.stream.id(fml:f)); assert frame.stream.data(fml:f) = stream_data.segment(stream_app_data(fml:dcid,frame.stream.id(fml:f)),loc:offset,loc:offset + frame.stream.length(fml:f)); assert frame.stream.fin(fml:f) <-> stream_app_data_finished(fml:dcid,frame.stream.id(fml:f)) & loc:offset + frame.stream.length(fml:f) = stream_app_data_end(fml:dcid,frame.stream.id(fml:f)); local loc:kind {loc:kind := get_stream_kind(frame.stream.id(fml:f)); if ~zero_rtt_allowed | zero_rtt_sent {assert conn_seen(fml:scid)}; assert stream_reset(fml:dcid,frame.stream.id(fml:f)) -> loc:offset + frame.stream.length(fml:f) <= stream_length(fml:dcid,frame.stream.id(fml:f)); if ~zero_rtt_allowed | zero_rtt_sent {local loc:0 {call loc:0 := stream_id_allowed(fml:dcid, frame.stream.id(fml:f), fml:e); assert loc:0}}\nelse {if _generating {assert frame.stream.id(fml:f) = 4}}}}}",
        "{}",
        "{}",
        "{}",
        "{unknown_ignore.is_set(fml:s) := true; unknown_ignore.value(fml:s) := fml:p}",
        "<<<\n       srand((unsigned) time(0)); //fixed or random seed ?\n       res = 0;\n       res = ::rand()%(max-min+1) + min;\n       std::cerr << \"between random: \" << res << \"\\n\";\n       >>>",
        "<<<\n\t        `fml:a`.push_back(`fml:v`);\n            >>>",
        "<<<\n\t        if (0 <= `fml:x` && `fml:x` < (`quic_packet.idx`)`fml:a`.size()) \n\t            `fml:a`[`fml:x`] = `fml:y`;\n\t    >>>",
        "<<<\n\t        if (0 <= `fml:x` && `fml:x` < (`forged_protected_quic_packet.idx`)`fml:a`.size()) \n\t            `fml:y` = `fml:a`[`fml:x`];\n\t    >>>",
        "fml:dst := (server.ep if (fml:tls_id = client.tls_id) else client.ep)",
        "{}",
        "{}",
        "<<<\n\t    >>>",
        "{assert forged_pkts.end(fml:a) = forged_pkts.end(old_fml:a); assert forged_pkts.value(fml:a,X) = (fml:y if (X = fml:x) else forged_pkts.value(old_fml:a,X))}",
        "{assert clients.client.arr.end(fml:a) = clients.client.arr.end(old_fml:a); assert clients.client.arr.value(fml:a,X) = (fml:y if (X = fml:x) else clients.client.arr.value(old_fml:a,X))}",
        "<<<\n        const char * session_file = getenv(\"RETRY_TOKEN_FILE\");\n        FILE *fp;\n        if(session_file != NULL && is_recv) {\n            unsigned str_d[token.size()];\n            for (int i = 0; i < token.size(); i++)\n                str_d[i] = token[i];\n            fp = fopen(session_file,\"w\");\n            for (int i = 0; i < token.size(); i++) {\n                //std::cerr <<  \"str_d[i] \"  << str_d[i] << std::endl;\n                //std::cerr <<  \"str_d[i] == 0 \"  << (str_d[i] == 0) << std::endl;\n                if(str_d[i] < 16)\n                    fprintf(fp, \"0%x\", str_d[i]);\n                else \n                    fprintf(fp, \"%x\", str_d[i]);\n            }  \n            fclose(fp);\n        }\n        \n\n        uint8_t plaintext[] = \"\";\n        //0xbe 0c 69 0b 9f 66 57 5a 1d 76 6b 54 e3 68 c8 4e : rfc9001\n        /*uint8_t key[16] = { 0xbe, 0x0c, 0x69, 0x0b, 0x9f, 0x66, 0x57,\n                            0x5a, 0x1d, 0x76, 0x6b, 0x54, 0xe3, 0x68, \n                            0xc8, 0x4e };*/\n\n        //0xcc ce 18 7e d0 9a 09 d0 57 28 15 5a 6c b9 6b e1\n        //0xcc 0xce 0x18 0x7e 0xd0 0x9a 0x09 0xd0 0x57 0x28 0x15 0x5a 0x6c 0xb9 0x6b 0xe1 : draft 29\n        uint8_t key[16]; \n\n        //0x4d 0x32 0xec 0xdb 0x2a 0x21 0x33 0xc8 0x41 0xe4 0x04 0x3d 0xf2 0x7d 0x44 0x30\n        if(pversion == 0xff00001c) {\n            uint8_t key2[16] = { 0x4d, 0x32, 0xec, 0xdb, 0x2a,\n                                 0x21, 0x33, 0xc8, 0x41, 0xe4, \n                                 0x04, 0x3d, 0xf2, 0x7d, 0x44, \n                                 0x30 };\n            for(int i = 0; i < 16;i++)\n                key[i] = key2[i];\n        }   \n        else if(pversion == 0xff00001d) {\n            uint8_t key2[16] = { 0xcc, 0xce, 0x18, 0x7e, 0xd0, \n                                 0x9a, 0x09, 0xd0, 0x57, 0x28, \n                                 0x15, 0x5a, 0x6c, 0xb9, 0x6b, \n                                 0xe1 };\n            for(int i = 0; i < 16;i++)\n                key[i] = key2[i];\n        }\n        else if(pversion == 0x00000001) {\n            //0xbe 0x0c 0x69 0x0b 0x9f 0x66 0x57 0x5a 0x1d 0x76 0x6b 0x54 0xe3 0x68 0xc8 0x4e\n            uint8_t key2[16] = { 0xbe, 0x0c, 0x69, 0x0b, 0x9f, \n                                 0x66, 0x57, 0x5a, 0x1d, 0x76, \n                                 0x6b, 0x54, 0xe3, 0x68, 0xc8, \n                                 0x4e };\n            for(int i = 0; i < 16;i++)\n                key[i] = key2[i];\n        }\n            \n        //0x461599d35d632bf2239825bb\n        /*uint8_t nonce[12] = { 0x46, 0x15, 0x99, 0xd3, 0x5d, 0x63, 0x2b,\n                              0xf2, 0x23, 0x98, 0x25, 0xbb };*/\n\n        //0xe5 0x49 0x30 0xf9 0x7f 0x21 0x36 0xf0 0x53 0x0a 0x8c 0x1c : draft 29\n        uint8_t nonce[12];\n        //0x4d 0x16 0x11 0xd0 0x55 0x13 0xa5 0x52 0xc5 0x87 0xd5 0x75\n        if(pversion == 0xff00001c) {\n            uint8_t nonce2[12] = { 0x4d, 0x16, 0x11, 0xd0, 0x55,\n                                   0x13, 0xa5, 0x52, 0xc5, 0x87, \n                                   0xd5, 0x75 }; //nonce[12]\n            for(int i = 0; i < 12; i++)\n                nonce[i] = nonce2[i];\n        }    \n        else if(pversion == 0xff00001d) {\n            uint8_t nonce2[12] = { 0xe5, 0x49, 0x30, 0xf9, 0x7f,\n                                   0x21, 0x36, 0xf0, 0x53, 0x0a, \n                                   0x8c, 0x1c }; //nonce[12]\n            for(int i = 0; i < 12; i++)\n                nonce[i] = nonce2[i];\n        }\n        else if(pversion == 0x00000001) {\n            //0x46 0x15 0x99 0xd3 0x5d 0x63 0x2b 0xf2 0x23 0x98 0x25 0xbb\n            uint8_t nonce2[12] = { 0x46, 0x15, 0x99, 0xd3, 0x5d,\n                                   0x63, 0x2b, 0xf2, 0x23, 0x98, \n                                   0x25, 0xbb }; //nonce[12]\n            for(int i = 0; i < 12; i++)\n                nonce[i] = nonce2[i];\n        }\n        \n        ptls_aead_context_t *aead = ptls_aead_new_direct(&ptls_openssl_aes128gcm, 1, key, nonce);\n        std::cerr << \"compute_retry_integrity_tag aead \" << aead <<  \"\\n\";\n    \n        \n        uint32_t checksum_length = aead->algo->tag_size;\n        std::cerr << \"c 3 \\n\";\n        std::cerr << \"compute_retry_integrity_tag ptls_aead_context_t \" << \"\\n\";\n\n        std::vector<uint8_t> ad;\n        //ad.resize(sizeof(odcid));\n        std::cerr << \"compute_retry_integrity_tag odcil \" << odcil << \"\\n\";\n        std::cerr << \"compute_retry_integrity_tag odcid \" << std::hex << odcid << \"\\n\";\n        std::cerr << \"compute_retry_integrity_tag h \" << h << \"\\n\";\n        std::cerr << \"compute_retry_integrity_tag pversion \" << std::hex << pversion << \"\\n\";\n        std::cerr << \"compute_retry_integrity_tag dcil \" << dcil << \"\\n\";\n        std::cerr << \"compute_retry_integrity_tag dcid \" << std::hex << dcid << \"\\n\";\n        std::cerr << \"compute_retry_integrity_tag scil \" <<  scil << \"\\n\";\n        std::cerr << \"compute_retry_integrity_tag scid \" << std::hex << scid << \"\\n\";\n        std::cerr << \"compute_retry_integrity_tag seq \" << std::dec << seq << \"\\n\";\n        \n        uint8_t pushed;\n        std::cerr << \"compute_retry_integrity_tag odcil \\n\";\n        ad.push_back(odcil);\n        for (int i = odcil-1; i >= 0; --i) {\n            pushed = (odcid.val >> (8*i)) & 0xff;\n            std::cerr << std::to_string(pushed) << \" \";\n            ad.push_back(pushed);  \n        }\n        std::cerr << \"\\n\";\n        ad.push_back(h);\n        std::cerr << \"compute_retry_integrity_tag version \\n\";\n        for (int i = 4-1; i >= 0; --i) {\n            pushed = (pversion >> (8*i)) & 0xff;\n            std::cerr << std::to_string(pushed) << \" \";\n            ad.push_back(pushed);\n        } \n        std::cerr << \"\\n\";\n        std::cerr << \"compute_retry_integrity_tag dcid \\n\";\n        ad.push_back(dcil);\n        for (int i = dcil-1; i >= 0; --i) {\n            pushed = (dcid.val >> (8*i)) & 0xff;\n            std::cerr << std::to_string(pushed) << \" \";\n            ad.push_back(pushed); \n        }\n        std::cerr << \"\\n\";\n        std::cerr << \"compute_retry_integrity_tag scid \\n\";\n        ad.push_back(scil); //scil\n        for (int i = scil-1; i >= 0; --i) {\n            pushed = (scid.val >> (8*i)) & 0xff;\n            std::cerr << std::to_string(pushed) << \" \";\n            ad.push_back(pushed); \n        }\n        \n        std::cerr << \"\\n\";\n        std::cerr << \"compute_retry_integrity_tag token size: \" << token.size()  << \"\\n\";\n        for (unsigned i = 0; i < token.size(); i++) {\n            std::cerr << std::hex << token[i] << ' ';\n            ad.push_back(token[i]);\n        }\n\n        std::cerr << \"\\n\";\n        //std::copy(token.begin(),token.end(),ad.end());\n\n        std::vector<uint8_t> bytes;\n        bytes.resize(ad.size());\n\n        std::cerr << \"compute_retry_integrity_tag ad size: \" << std::dec << ad.size()  << \"\\n\";\n        std::cerr << \"\\n\";\n\n        std::copy(ad.begin(),ad.end(),bytes.begin());\n        std::cerr << \"compute_retry_integrity_tag bytes size: \" << std::dec << bytes.size()  << \"\\n\";\n        std::cerr << \"\\n\";\n\n        std::vector<uint8_t> output;\n        output.resize(16);\n\n        std::cerr << \"compute_retry_integrity_tag output size: \" << std::dec << output.size()  << \"\\n\";\n        size_t encrypted = ptls_aead_encrypt(aead,\n          &output[0], &plaintext[0], 0 , seq, //seq, strnlen ?strlen(plaintext)\n          &bytes[0], bytes.size());\n        \n        cipher.resize(output.size());\n        std::copy(output.begin(),output.end(),cipher.begin());\n\n        std::cerr << \"compute_retry_integrity_tag encrypted size: \" << std::dec << encrypted  << \"\\n\";\n        std::cerr << \"compute_retry_integrity_tag output size: \" << std::dec << output.size()  << \"\\n\";\n        std::cerr << \"\\n\";\n\n        std::cerr << \"compute_retry_integrity_tag finish \" << \"\\n\";\n    >>>",
        "{}",
        "<<<\n\t        `fml:s` = (`replayed_quic_packet_0rtt.idx`) `fml:a`.size();\n\t    >>>",
        "{}",
        "<<<\n                for (unsigned i = 0; i < `fml:a`.size()/2; i++) {\n                    std::swap(`fml:a`[i],`fml:a`[`fml:a`.size()-i-1]);\n                }\n            >>>",
        "<<<\n\t        unsigned __old_size = `fml:a`.size();\n\t        `fml:a`.resize(`fml:s`);\n\t        for (unsigned i = __old_size; i < (unsigned)`fml:s`; i++)\n\t            `fml:a`[i] = v;\n            >>>",
        "<<<\n                for (unsigned i = 0; i < `fml:b`.size(); i++)\n\t            `fml:a`.push_back(`fml:b`[i]);\n            >>>",
        "<<<\n\t        if (`fml:a`.size() > 0) {\n\t            a.pop_back();\n\t        }\n            >>>",
        "{}",
        "<<<\n\t        if (0 <= `fml:x` && `fml:x` < (`vector[tls.extension].domain`)`fml:a`.size()) \n\t            `fml:y` = `fml:a`[`fml:x`];\n\t    >>>",
        "<<<\n\t        unsigned __old_size = `fml:a`.size();\n\t        `fml:a`.resize(`fml:s`);\n\t        for (unsigned i = __old_size; i < (unsigned)`fml:s`; i++)\n\t            `fml:a`[i] = v;\n            >>>",
        "<<<\n\t        if (`fml:a`.size() > 0) {\n\t            a.pop_back();\n\t        }\n            >>>",
        "<<<\n\t    >>>",
        "if _generating {local loc:0 {call loc:0 := pkt_serdes_vn.to_bytes(fml:pkt); local loc:spkt {loc:spkt := loc:0; local loc:0 {call loc:0 := prot.arr.empty; local loc:pkts {loc:pkts := loc:0; call loc:pkts := prot.arr.append(loc:pkts, loc:spkt); local loc:0,loc:1 {call loc:0 := endpoint_to_pid(fml:src); call loc:1 := endpoint_to_socket(fml:src); call net.send(loc:0, loc:1, fml:dst, loc:pkts)}}}}}}",
        "<<<\n\t        if (0 <= `fml:x` && `fml:x` < (`index`)`fml:a`.size()) \n\t            `fml:a`[`fml:x`] = `fml:y`;\n\t    >>>",
        "fml:y := fml:x + 1",
        "{}",
        "used_cid(C) := false",
        "{}",
        "<<<\n            install_reader(new sync_reader<`cid`,%`http_request_file.synced`>(c,`http_request_file.fildes`,`http_request_file.synced`, this));\n        >>>",
        "{}",
        "{}",
        "{}",
        "assert 0:prot.idx <= fml:s",
        "{}",
        "assert bytes.end(fml:a) = 0",
        "{attacker.enc_level := quic_packet_type.initial; ip.endpoint.protocol(attacker.ep) := ip.udp; ip.endpoint.addr(attacker.ep) := client_addr; ip.endpoint.port(attacker.ep) := client_port}",
        "assert forged_quic_packet_vn.arr.end(fml:a) = fml:s & forged_quic_packet_vn.arr.value(fml:a,X) = fml:y",
        "{assert forged_quic_packet.retired_cids.end(fml:a) = fml:s; assert 0:forged_quic_packet.idx <= X & X < forged_quic_packet.retired_cids.end(old_fml:a) -> forged_quic_packet.retired_cids.value(fml:a,X) = forged_quic_packet.retired_cids.value(old_fml:a,X); assert forged_quic_packet.retired_cids.end(old_fml:a) <= X & X < fml:s -> forged_quic_packet.retired_cids.value(fml:a,X) = fml:v}",
        "<<<\n                for (unsigned i = 0; i < `fml:b`.size(); i++)\n\t            `fml:a`.push_back(`fml:b`[i]);\n            >>>",
        "{}",
        "<<<\n\t    >>>",
        "clients.client.tls_id(clients.client.arr.value(clients.clients,fml:n)) := fml:e",
        "{}",
        "fml:y := fml:x + 1",
        "<<<\n        // TODO: actually delete everything here\n        picotls_connection *s = `tls_api.upper.foo.cid_map`[c];\n        ptls_free(s->gs);\n        free(s->cctx);\n        free(s->hsp);\n        free(s->session_ticket);\n        `tls_api.upper.foo.cid_map`.erase(c);\n\n\n        >>>",
        "{assert connected(fml:dcid) & connected_to(fml:dcid) = fml:scid; assert fml:e = quic_packet_type.one_rtt & established_1rtt_keys(fml:scid); assert num_queued_frames(fml:scid) > 0 -> fml:e = queued_level(fml:scid); assert ~issued_zero_length_cid; if ~_generating {assert frame.new_connection_id.retire_prior_to(fml:f) <= frame.new_connection_id.seq_num(fml:f)}; assert frame.new_connection_id.seq_num(fml:f) < max_rtp_num(fml:scid) -> send_retire_cid(fml:dcid)}",
        "{}",
        "assert tls_hand_extensions.value(fml:a,fml:x) = fml:y",
        "{}",
        "{}",
        "{}",
        "assert arr_streamid_s.value(fml:a,fml:x) = fml:y",
        "{}",
        "{}",
        "assert tls_extensions.end(fml:a) = fml:s & tls_extensions.value(fml:a,X) = fml:y",
        "{}",
        "<<<\n\t        `fml:a`.resize(`fml:s`);\n\t        for (unsigned i = 0; i < `fml:s`; i++)\n\t            `fml:a`[i] = y;\n\t    >>>",
        "<<<\n\t        `fml:a`.resize(`fml:s`);\n\t        for (unsigned i = 0; i < `fml:s`; i++)\n\t            `fml:a`[i] = y;\n\t    >>>",
        "{}",
        "{}",
        "<<<\n\t        unsigned __old_size = `fml:a`.size();\n\t        `fml:a`.resize(`fml:s`);\n\t        for (unsigned i = __old_size; i < (unsigned)`fml:s`; i++)\n\t            `fml:a`[i] = v;\n            >>>",
        "{preferred_address.is_set(fml:s) := true; preferred_address.value(fml:s) := fml:p}",
        "{}",
        "{}",
        "{}",
        "<<<\n\t        if (0 <= `fml:x` && `fml:x` < (`vector[transport_parameter].domain`)`fml:a`.size()) \n\t            `fml:y` = `fml:a`[`fml:x`];\n\t    >>>",
        "{}",
        "<<<\n\t        `fml:s` = (`quic_packet_vn.idx`) `fml:a`.size();\n\t    >>>",
        "assert 0:quic_packet_coal_0rtt.idx < fml:x",
        "assert forged_pkts.value(fml:a,fml:x) = fml:y",
        "assert fml:s = stream_data.end(fml:a)",
        "{}",
        "assert num_queued_frames(fml:scid) > 0 -> fml:e = queued_level(fml:scid)",
        "local loc:idx {loc:idx := fml:pos; fml:val := 0:stream_pos; while loc:idx < fml:pos + fml:len\n{local loc:byte {loc:byte := stream_data.value(fml:pkt,loc:idx); if loc:idx = fml:pos {loc:byte := bvand(loc:byte,0x3f)}; fml:val := 256:stream_pos * fml:val + bfe[0][7](loc:byte); call loc:idx := stream_pos.next(loc:idx)}}}",
        "{}",
        "{}",
        "{}",
        "{assert fml:y < fml:x & (Y:tls_api.id < fml:x -> Y <= fml:y); assert tls_api.id.succ(fml:y,fml:x)}",
        "fml:y := fml:x - 1",
        "<<<\n\t    >>>",
        "{assert bytes.end(fml:a) = fml:s; assert 0:idx <= X & X < bytes.end(old_fml:a) -> bytes.value(fml:a,X) = bytes.value(old_fml:a,X); assert bytes.end(old_fml:a) <= X & X < fml:s -> bytes.value(fml:a,X) = fml:v}",
        "assert fml:s = tls_hand_extensions.end(fml:a)",
        "{assert connected(fml:dcid) & connected_to(fml:dcid) = fml:scid; assert fml:e = quic_packet_type.one_rtt -> established_1rtt_keys(fml:scid); assert fml:e = quic_packet_type.handshake -> established_handshake_keys(fml:scid); assert num_queued_frames(fml:scid) > 0 -> fml:e = queued_level(fml:scid); assert connected(fml:scid) & connected_to(fml:scid) = fml:dcid; assert frame.connection_close.reason_phrase_length(fml:f) = stream_data.end(frame.connection_close.reason_phrase(fml:f)); if _generating {assert fml:e = quic_packet_type.one_rtt; assert ~conn_closed(fml:scid)}; conn_closed(fml:scid) := true; call handle_transport_error(frame.connection_close.err_code(fml:f))}",
        "<<<\n\t    // We don't want to close a socket when there is another thread\n\t    // waiting, because the other thread won't know what to do with the\n\t    // error. \n\n\t    // Instead we shut down the socket and let the other thread close it.\n\t    // If there is a reader thread, it will see EOF and close the socket. If there is\n\t    // on open writer thread, it will close the socket after we close the\n\t    // send queue. If the queue is already closed, closing it has no effect.\n\n\t    // invariant: if a socket is open there is a reader thread or\n\t    // an open writer thread, but not both. \n\n\t    // Because of this invariant, the socket will be closed exactly once.\n\n\t    ::shutdown(s,SHUT_RDWR);\n\n\t>>>",
        "local loc:dcid {loc:dcid := replayed_quic_packet_0rtt.dst_cid(fml:pkt); local loc:0 {call loc:0 := replayed_quic_packet_0rtt.long(fml:pkt); local loc:scid {loc:scid := (replayed_quic_packet_0rtt.src_cid(fml:pkt) if loc:0 else connected_to(loc:dcid)); if cid_mapped(loc:dcid) {loc:dcid := cid_to_aid(loc:dcid)}; if queued_ack_eliciting(loc:scid) {ack_credit(loc:dcid) := ack_credit(loc:dcid) + 1}; if ~queued_non_ack(loc:scid) {ack_credit(loc:scid) := ack_credit(loc:scid) - 1}; last_pkt_num(loc:scid,replayed_quic_packet_0rtt.ptype(fml:pkt)) := replayed_quic_packet_0rtt.seq_num(fml:pkt); if replayed_quic_packet_0rtt.ptype(fml:pkt) = quic_packet_type.zero_rtt & ~_generating {connected(the_cid) := true; connected(loc:scid) := true; connected_to(the_cid) := loc:scid; connected_to(loc:scid) := the_cid}; zero_rtt_sent := true; call queued_frames_rtt(loc:scid) := frame.arr.empty; queued_non_probing(loc:scid) := false; queued_non_ack(loc:scid) := false; queued_close(loc:scid) := false; num_queued_frames_rtt(loc:scid) := 0:frame.idx; queued_ack_eliciting(loc:scid) := false}}}",
        "assert fml:s = vector[tls.compression_method].end(fml:a)",
        "assert 0:forged_quic_packet_retry.idx <= fml:x & fml:x < forged_quic_packet_retry.retired_cids.end(fml:a)",
        "{assert vector[tls.extension].end(fml:a) = vector[tls.extension].end(old_fml:a); assert vector[tls.extension].value(fml:a,X) = (fml:y if (X = fml:x) else vector[tls.extension].value(old_fml:a,X))}",
        "<<<\n\t        `fml:a`.resize(`fml:s`);\n\t        for (unsigned i = 0; i < `fml:s`; i++)\n\t            `fml:a`[i] = y;\n\t    >>>",
        "{}",
        "<<<\n\t        `fml:a`.push_back(`fml:v`);\n            >>>",
        "assert 0:index <= fml:x & fml:x < versions.end(fml:a)",
        "<<<\n\t        if (0 <= `fml:x` && `fml:x` < (`replayed_quic_packet_0rtt.idx`)`fml:a`.size()) \n\t            `fml:y` = `fml:a`[`fml:x`];\n\t    >>>",
        "{}",
        "<<<\n\t        `fml:a`.resize(`fml:s`);\n\t        for (unsigned i = 0; i < `fml:s`; i++)\n\t            `fml:a`[i] = y;\n\t    >>>",
        "<<<\n\t        if (`fml:a`.size() > 0) {\n\t            a.pop_back();\n\t        }\n            >>>",
        "{}",
        "{assert quic_packet_retry.arr.end(fml:a) > quic_packet_retry.arr.end(old_fml:a) & ~(quic_packet_retry.arr.end(old_fml:a) < X & X < quic_packet_retry.arr.end(fml:a)); assert 0:quic_packet_retry.idx <= X & X < quic_packet_retry.arr.end(old_fml:a) -> quic_packet_retry.arr.value(fml:a,X) = quic_packet_retry.arr.value(old_fml:a,X); assert quic_packet_retry.arr.value(fml:a,quic_packet_retry.arr.end(old_fml:a)) = fml:v}",
        "assert 0:tls.handshakes.domain <= fml:x & fml:x < tls.handshakes.end(fml:a)",
        "assert 0:clients.client.idx <= fml:x & fml:x < clients.client.arr.end(fml:a)",
        "<<<\n\t    >>>",
        "{assert vector[tls.cipher_suite].end(fml:a) > vector[tls.cipher_suite].end(old_fml:a) & ~(vector[tls.cipher_suite].end(old_fml:a) < X & X < vector[tls.cipher_suite].end(fml:a)); assert 0:vector[tls.cipher_suite].domain <= X & X < vector[tls.cipher_suite].end(old_fml:a) -> vector[tls.cipher_suite].value(fml:a,X) = vector[tls.cipher_suite].value(old_fml:a,X); assert vector[tls.cipher_suite].value(fml:a,vector[tls.cipher_suite].end(old_fml:a)) = fml:v}",
        "<<<\n\t        if (`fml:a`.size() > 0) {\n\t            a.pop_back();\n\t        }\n            >>>",
        "assert 0:forged_quic_packet.idx <= fml:x & fml:x < forged_quic_packet.retired_cids.end(fml:a)",
        "{}",
        "{}",
        "{assert fml:y < fml:x & (Y:idx < fml:x -> Y <= fml:y); assert idx.succ(fml:y,fml:x)}",
        "{}",
        "{}",
        "{assert connected(fml:dcid) & connected_to(fml:dcid) = fml:scid; assert fml:e = quic_packet_type.one_rtt & established_1rtt_keys(fml:scid); assert num_queued_frames(fml:scid) > 0 -> fml:e = queued_level(fml:scid); assert connected(fml:scid) & connected_to(fml:scid) = fml:dcid; assert ~conn_closed(fml:scid); local loc:kind {loc:kind := bidir; if ~(max_stream_set(fml:dcid,loc:kind) & frame.max_streams.id(fml:f) < max_stream(fml:dcid,loc:kind)) {max_stream_set(fml:dcid,loc:kind) := true; max_stream(fml:dcid,loc:kind) := frame.max_streams.id(fml:f)}}}",
        "<<<\n\t        if (0 <= `fml:x` && `fml:x` < (`quic_packet_0rtt.idx`)`fml:a`.size()) \n\t            `fml:y` = `fml:a`[`fml:x`];\n\t    >>>",
        "<<<\n                if ((`vector[tls.psk_identity].domain`)`fml:a`.size() > 0)\n                    `fml:res` = `fml:a`.back();\n            >>>",
        "{}",
        "assert quic_packet.retired_cids.end(fml:a) = 0",
        "{}",
        "<<<\n\t        if (0 <= `fml:x` && `fml:x` < (`forged_quic_packet.idx`)`fml:a`.size()) \n\t            `fml:a`[`fml:x`] = `fml:y`;\n\t    >>>",
        "{}",
        "<<<\n       res = 0;\n       srand((unsigned) time(0)); //fixed or random seed ?\n       res = ::rand()%(max-1) + 0;\n       std::cerr << \"lower random: \" << res << \"\\n\";\n       >>>",
        "{assert forged_quic_packet.arr.end(fml:a) = fml:s; assert 0:forged_quic_packet.idx <= X & X < forged_quic_packet.arr.end(old_fml:a) -> forged_quic_packet.arr.value(fml:a,X) = forged_quic_packet.arr.value(old_fml:a,X); assert forged_quic_packet.arr.end(old_fml:a) <= X & X < fml:s -> forged_quic_packet.arr.value(fml:a,X) = fml:v}",
        "if _generating {assert fml:scid = the_cid}",
        "{assert quic_packet_0rtt.retired_cids.end(fml:a) > quic_packet_0rtt.retired_cids.end(old_fml:a) & ~(quic_packet_0rtt.retired_cids.end(old_fml:a) < X & X < quic_packet_0rtt.retired_cids.end(fml:a)); assert 0:quic_packet_0rtt.idx <= X & X < quic_packet_0rtt.retired_cids.end(old_fml:a) -> quic_packet_0rtt.retired_cids.value(fml:a,X) = quic_packet_0rtt.retired_cids.value(old_fml:a,X); assert quic_packet_0rtt.retired_cids.value(fml:a,quic_packet_0rtt.retired_cids.end(old_fml:a)) = fml:v}",
        "<<<\n                for (unsigned i = 0; i < `fml:b`.size(); i++)\n\t            `fml:a`.push_back(`fml:b`[i]);\n            >>>",
        "{}",
        "{second_client.enc_level := quic_packet_type.initial; ip.endpoint.protocol(second_client.ep) := ip.udp; ip.endpoint.addr(second_client.ep) := client_addr; ip.endpoint.port(second_client.ep) := client_port; if ip.endpoint.addr(second_client.ep) = 0x7f000001 | is_mim {ip.endpoint.interface(second_client.ep) := ip.lo}\nelse {ip.endpoint.interface(second_client.ep) := ip.ivy}}",
        "assert vector[tls.handshake].value(fml:a,fml:x) = fml:y",
        "{}",
        "{}",
        "<<<\n\t        unsigned __old_size = `fml:a`.size();\n\t        `fml:a`.resize(`fml:s`);\n\t        for (unsigned i = __old_size; i < (unsigned)`fml:s`; i++)\n\t            `fml:a`[i] = v;\n            >>>",
        "{}",
        "<<<\n\t        if (0 <= `fml:x` && `fml:x` < (`servers.server.idx`)`fml:a`.size()) \n\t            `fml:a`[`fml:x`] = `fml:y`;\n\t    >>>",
        "{assert fml:y < fml:x & (Y:frame.idx < fml:x -> Y <= fml:y); assert frame.idx.succ(fml:y,fml:x)}",
        "{is_no_error := true; is_internal_error := false; is_server_busy := false; is_flow_control_error := false; is_stream_limit_error := false; is_stream_state_error := false; is_final_size_error := false; is_frame_encoding_error := false; is_transport_parameter_error := false; is_connection_id_limit_error := false; is_protocol_violation := false; is_invalid_token := false; is_application_error := false; is_crypto_buffer_exceeded := false; is_crypto_error := false; is_version_negociation_error := false}",
        "<<<\n                for (unsigned i = 0; i < `fml:a`.size()/2; i++) {\n                    std::swap(`fml:a`[i],`fml:a`[`fml:a`.size()-i-1]);\n                }\n            >>>",
        "{}",
        "assert arr_pkt_num_r.end(fml:a) = fml:s & arr_pkt_num_r.value(fml:a,X) = fml:y",
        "{}",
        "assert quic_packet.arr.end(fml:a) = 0",
        "fml:y := fml:x + 1",
        "{force_new_ack := false; call enqueue_frame(fml:scid, fml:f, fml:e, false)}",
        "{}",
        "{}",
        "{assert quic_packet_coal_0rtt.retired_cids.end(fml:a) = fml:s; assert 0:quic_packet_coal_0rtt.idx <= X & X < quic_packet_coal_0rtt.retired_cids.end(old_fml:a) -> quic_packet_coal_0rtt.retired_cids.value(fml:a,X) = quic_packet_coal_0rtt.retired_cids.value(old_fml:a,X); assert quic_packet_coal_0rtt.retired_cids.end(old_fml:a) <= X & X < fml:s -> quic_packet_coal_0rtt.retired_cids.value(fml:a,X) = fml:v}",
        "assert 0:quic_packet.idx <= fml:x & fml:x < quic_packet.arr.end(fml:a)",
        "assert vector[tls.cipher_suite].end(fml:a) = fml:s & vector[tls.cipher_suite].value(fml:a,X) = fml:y",
        "{}",
        "<<<\n\t    >>>",
        "{}",
        "<<<\n                for (unsigned i = 0; i < `fml:a`.size()/2; i++) {\n                    std::swap(`fml:a`[i],`fml:a`[`fml:a`.size()-i-1]);\n                }\n            >>>",
        "{}",
        "{}",
        "{}",
        "{zero_rtt_server_test := false; client_port_vn := client_port}",
        "{}",
        "<<<\n\t        if (`fml:a`.size() > 0) {\n\t            a.pop_back();\n\t        }\n            >>>",
        "<<<\n                if ((`quic_packet_coal_0rtt.idx`)`fml:a`.size() > 0)\n                    `fml:res` = `fml:a`.back();\n            >>>",
        "{assert fml:y < fml:x & (Y:tls_hand_extensions.domain < fml:x -> Y <= fml:y); assert tls_hand_extensions.domain.succ(fml:y,fml:x)}",
        "<<<\n                for (unsigned i = 0; i < `fml:b`.size(); i++)\n\t            `fml:a`.push_back(`fml:b`[i]);\n            >>>",
        "<<<\n\t        `fml:a`.push_back(`fml:v`);\n            >>>",
        "{}",
        "<<<\n                for (unsigned i = 0; i < `fml:a`.size()/2; i++) {\n                    std::swap(`fml:a`[i],`fml:a`[`fml:a`.size()-i-1]);\n                }\n            >>>",
        "assert stream_data.end(fml:a) = fml:s & stream_data.value(fml:a,X) = fml:y",
        "assert 0:stream_pos < fml:x",
        "mim_client_target.tls_id := fml:e",
        "<<<\n\t        `fml:a`.resize(`fml:s`);\n\t        for (unsigned i = 0; i < `fml:s`; i++)\n\t            `fml:a`[i] = y;\n\t    >>>",
        "assert ~tls_api.upper.open(fml:c)",
        "{}",
        "{}",
        "{}",
        "<<<\n                if ((`forged_protected_quic_packet.idx`)`fml:a`.size() > 0)\n                    `fml:res` = `fml:a`.back();\n            >>>",
        "local loc:0 {call loc:0 := socket_endpoint(fml:host, fml:s); local loc:dst {loc:dst := loc:0; local loc:idx {loc:idx := prot.arr.begin(fml:pkts); local loc:0 {call loc:0 := stream_data.empty; local loc:past_data {loc:past_data := loc:0; while loc:idx < prot.arr.end(fml:pkts)\n{local loc:ppkt {loc:ppkt := prot.arr.value(fml:pkts,loc:idx); local loc:0 {call loc:0 := src_tls_id(loc:dst); local loc:tls_id {loc:tls_id := loc:0; local loc:header {loc:header := stream_data.value(loc:ppkt,0); local loc:hdr_type {loc:hdr_type := bfe[0][6](stream_data.value(loc:ppkt,0)); local loc:tt {loc:tt := bvand(loc:hdr_type,0x30); local loc:is_long {loc:is_long := bvand(0x80:byte,loc:header) ~= 0; local loc:version {loc:version := stream_data.segment(loc:ppkt,1,1 + 4); local loc:0 {call loc:0 := bytes_to_version(loc:version); local loc:bversion {loc:bversion := loc:0; local loc:ptype {loc:ptype := bvand(0x30:byte,loc:header); if loc:bversion = 0 & loc:is_long | version_not_found(fml:src) {call loc:past_data := stream_data.extend(loc:past_data, loc:ppkt); call tls_client_version_response(fml:src, loc:dst, loc:past_data)}\nelse {if loc:tt = 0x30 & loc:is_long & loc:bversion ~= 0 {call tls_client_retry_response(fml:src, loc:dst, loc:ppkt)}\nelse {local loc:0 {call loc:0 := reference_pkt_num(loc:ppkt, true); local loc:rnum {loc:rnum := loc:0; local loc:0 {call loc:0 := prot.decrypt(loc:tls_id, loc:rnum, loc:ppkt); local loc:res {loc:res := loc:0; if tls_api.upper.ok(loc:res) {local loc:0 {call loc:0 := is_padding_packet(tls_api.upper.payload(loc:res)); local loc:is_pad {loc:is_pad := loc:0; if loc:is_pad {call padding_packet_event(fml:host, fml:src, loc:dst, loc:ppkt)}\nelse {local loc:0 {call loc:0 := pkt_serdes.from_bytes(tls_api.upper.data(loc:res)); local loc:pkt {loc:pkt := loc:0; local loc:0 {call loc:0 := prot.get_pnum_len(tls_api.upper.data(loc:res)); call quic_packet.seq_num(loc:pkt) := prot.correct_pnum(loc:rnum, quic_packet.seq_num(loc:pkt), loc:0)}; call recv_packet(fml:host, fml:src, loc:dst, loc:pkt); call infer_tls_events(fml:src, loc:dst, loc:pkt); call packet_event(fml:src, loc:dst, loc:pkt)}}}}}}\nelse {call undecryptable_packet_event(fml:host, fml:src, loc:dst, loc:ppkt)}}}}}}}; call loc:idx := prot.idx.next(loc:idx)}}}}}}}}}}}}; version_not_found(fml:src) := false; call show_last_datagram_size(last_datagram_received_size); if ~first_datagram_received & fml:host = endpoint_id.server {assert last_datagram_received_size + 8 > 1200; first_datagram_received := true}; last_datagram_received_size := 0:stream_pos}}}}}",
        "{}",
        "{}",
        "{}",
        "{assert fml:x < fml:y & (fml:x < Y -> fml:y <= Y); assert jdx_s.succ(fml:x,fml:y)}",
        "{}",
        "<<<\n                for (unsigned i = 0; i < `fml:a`.size()/2; i++) {\n                    std::swap(`fml:a`[i],`fml:a`[`fml:a`.size()-i-1]);\n                }\n            >>>",
        "assert 0:tls_hand_extensions.domain <= fml:x & fml:x < tls_hand_extensions.end(fml:a)",
        "<<<\n    val.val = 0;\n    for (unsigned i = 0; i < bytes.size(); i++)\n        val.val = (val.val << 8) + bytes[i];\n    >>>",
        "{assert connected(fml:dcid) & connected_to(fml:dcid) = fml:scid; assert fml:e = quic_packet_type.one_rtt & established_1rtt_keys(fml:scid); assert num_queued_frames(fml:scid) > 0 -> fml:e = queued_level(fml:scid); if ~_generating {assert ~is_client(fml:scid)}}",
        "{}",
        "{assert connected(fml:dcid) & connected_to(fml:dcid) = fml:scid; assert fml:e = quic_packet_type.one_rtt & established_1rtt_keys(fml:scid); assert fml:e ~= quic_packet_type.initial; assert fml:e ~= quic_packet_type.handshake; assert num_queued_frames(fml:scid) > 0 -> fml:e = queued_level(fml:scid); assert tls_handshake_finished}",
        "if _generating {local loc:0 {call loc:0 := pkt_serdes.to_bytes(fml:pkt); local loc:spkt {loc:spkt := loc:0; local loc:0 {call loc:0 := reference_pkt_num(loc:spkt, false); local loc:rnum {loc:rnum := loc:0; local loc:0 {call loc:0 := src_tls_id(fml:src); local loc:tls_id {loc:tls_id := loc:0; local loc:0 {call loc:0 := prot.encrypt(loc:tls_id, loc:rnum, loc:spkt); local loc:ppkt {loc:ppkt := loc:0; local loc:0 {call loc:0 := prot.arr.empty; local loc:pkts {loc:pkts := loc:0; call loc:pkts := prot.arr.append(loc:pkts, loc:ppkt); local loc:0,loc:1 {call loc:0 := endpoint_to_pid(fml:src); call loc:1 := endpoint_to_socket(fml:src); call net.send(loc:0, loc:1, fml:dst, loc:pkts)}}}}}}}}}}}}",
        "<<<\n\t        `fml:s` = (`quic_packet_retry.idx`) `fml:a`.size();\n\t    >>>",
        "{assert arr_pkt_num_s.end(fml:a) = fml:s; assert 0:jdx_s <= X & X < arr_pkt_num_s.end(old_fml:a) -> arr_pkt_num_s.value(fml:a,X) = arr_pkt_num_s.value(old_fml:a,X); assert arr_pkt_num_s.end(old_fml:a) <= X & X < fml:s -> arr_pkt_num_s.value(fml:a,X) = fml:v}",
        "<<<\n\t        `fml:s` = (`quic_packet_retry.idx`) `fml:a`.size();\n\t    >>>",
        "assert 0:quic_packet_0rtt.idx <= fml:s",
        "<<<        \n\t    picotls_connection *s = `tls_api.upper.foo.cid_map`[c];\n        std::cerr << \"setup_initial_traffic_keys cid: \" << c << \"\\n\";\n        std::cerr << \"setup_initial_traffic_keys session: \" << s->is_server << \"\\n\";\n        setup_initial_traffic_keys(s,salt,ikm);\n        std::cerr << \"setup_initial_traffic_keys salt: \" << salt << \"\\n\";\n        std::cerr << \"setup_initial_traffic_keys ikm: \" << ikm << \"\\n\";\n        >>>",
        "<<<\n                if ((`clients.client.idx`)`fml:a`.size() > 0)\n                    `fml:res` = `fml:a`.back();\n            >>>",
        "{}",
        "{assert connected(fml:dcid) & connected_to(fml:dcid) = fml:scid; assert fml:e = quic_packet_type.one_rtt & established_1rtt_keys(fml:scid); assert num_queued_frames(fml:scid) > 0 -> fml:e = queued_level(fml:scid)}",
        "{if _generating {handshake_done_send := true}; call enqueue_frame(fml:scid, fml:f, fml:e, false)}",
        "{}",
        "{}",
        "<<<\n\t    >>>",
        "{}",
        "{}",
        "<<<\n\t        `fml:a`.resize(`fml:s`);\n\t        for (unsigned i = 0; i < `fml:s`; i++)\n\t            `fml:a`[i] = y;\n\t    >>>",
        "mim_server_target.tls_id := fml:e",
        "{assert forged_quic_packet_retry.retired_cids.end(fml:a) > forged_quic_packet_retry.retired_cids.end(old_fml:a) & ~(forged_quic_packet_retry.retired_cids.end(old_fml:a) < X & X < forged_quic_packet_retry.retired_cids.end(fml:a)); assert 0:forged_quic_packet_retry.idx <= X & X < forged_quic_packet_retry.retired_cids.end(old_fml:a) -> forged_quic_packet_retry.retired_cids.value(fml:a,X) = forged_quic_packet_retry.retired_cids.value(old_fml:a,X); assert forged_quic_packet_retry.retired_cids.value(fml:a,forged_quic_packet_retry.retired_cids.end(old_fml:a)) = fml:v}",
        "fml:y := fml:x + 1",
        "{}",
        "{}",
        "{assert frame.arr.end(fml:a) = fml:s; assert 0:frame.idx <= X & X < frame.arr.end(old_fml:a) -> frame.arr.value(fml:a,X) = frame.arr.value(old_fml:a,X); assert frame.arr.end(old_fml:a) <= X & X < fml:s -> frame.arr.value(fml:a,X) = fml:v}",
        "<<<\n\t    >>>",
        "{packed_forwarded(P) := false; packed_forwarded_arr(P) := false}",
        "<<<\n\t    >>>",
        "<<<\n                for (unsigned i = 0; i < `fml:a`.size()/2; i++) {\n                    std::swap(`fml:a`[i],`fml:a`[`fml:a`.size()-i-1]);\n                }\n            >>>",
        "<<<\n                for (unsigned i = 0; i < `fml:a`.size()/2; i++) {\n                    std::swap(`fml:a`[i],`fml:a`[`fml:a`.size()-i-1]);\n                }\n            >>>",
        "second_client.tls_id := fml:e",
        "local loc:scid {loc:scid := quic_packet.src_cid(fml:pkt); local loc:dcid {loc:dcid := quic_packet.dst_cid(fml:pkt); local loc:sq {loc:sq := quic_packet.seq_num(fml:pkt); local loc:0 {call loc:0 := quic_packet.long(fml:pkt); if ~loc:0 {loc:scid := connected_to(loc:dcid)}}; if quic_packet.ptype(fml:pkt) = quic_packet_type.initial & ~conn_seen(loc:dcid) & ~negocation_of_version(fml:src) & ~version_negociated {nonce_cid(loc:scid) := loc:dcid}; if quic_packet.ptype(fml:pkt) = quic_packet_type.initial & (retry_sent(loc:scid) | version_negociated | negocation_of_version(fml:src)) {nonce_cid(loc:scid) := loc:dcid; conn_seen(loc:dcid) := false}; local loc:e {loc:e := quic_packet.ptype(fml:pkt); call set_encryption_level(fml:src, loc:scid, loc:e); call tls_keys_established_event(loc:scid, loc:e); if conn_requested(fml:dst,fml:src,loc:dcid) & ~connected(loc:dcid) & ~connected(loc:scid) {call app_server_open_event(fml:src, fml:dst, loc:scid, loc:dcid)}; local loc:idx {loc:idx := frame.arr.begin(quic_packet.payload(fml:pkt)); while loc:idx < frame.arr.end(quic_packet.payload(fml:pkt))\n{local loc:f {loc:f := frame.arr.value(quic_packet.payload(fml:pkt),loc:idx); if some loc:cf. *>(loc:f,loc:cf) {call show_biatch_2(fml:dst); local loc:0 {call loc:0 := src_tls_id(fml:src); call tls_send_event(fml:src, fml:dst, loc:scid, loc:dcid, frame.crypto.data(loc:cf), frame.crypto.offset(loc:cf), loc:e, loc:0)}}; if some loc:sf. *>(loc:f,loc:sf) {call app_server_open_event_1rtt(fml:src, fml:dst, loc:scid, loc:dcid); call app_send_event(fml:src, fml:dst, loc:dcid, frame.stream.id(loc:sf), frame.stream.data(loc:sf), frame.stream.offset(loc:sf), frame.stream.fin(loc:sf))}; call infer_frame(loc:scid, loc:dcid, loc:f); if some self:frame.malicious_frame. *>(loc:f,self:frame.malicious_frame) {call frame.malicious_frame.handle(self:frame.malicious_frame, loc:scid, loc:dcid, loc:e, loc:sq)}\nelse {if some self:frame.unknown_frame. *>(loc:f,self:frame.unknown_frame) {call frame.unknown_frame.handle(self:frame.unknown_frame, loc:scid, loc:dcid, loc:e, loc:sq)}\nelse {if some self:frame.ack_frequency. *>(loc:f,self:frame.ack_frequency) {call frame.ack_frequency.handle(self:frame.ack_frequency, loc:scid, loc:dcid, loc:e, loc:sq)}\nelse {if some self:frame.handshake_done. *>(loc:f,self:frame.handshake_done) {call frame.handshake_done.handle(self:frame.handshake_done, loc:scid, loc:dcid, loc:e, loc:sq)}\nelse {if some self:frame.application_close. *>(loc:f,self:frame.application_close) {call frame.application_close.handle(self:frame.application_close, loc:scid, loc:dcid, loc:e, loc:sq)}\nelse {if some self:frame.connection_close. *>(loc:f,self:frame.connection_close) {call frame.connection_close.handle(self:frame.connection_close, loc:scid, loc:dcid, loc:e, loc:sq)}\nelse {if some self:frame.path_response. *>(loc:f,self:frame.path_response) {call frame.path_response.handle(self:frame.path_response, loc:scid, loc:dcid, loc:e, loc:sq)}\nelse {if some self:frame.path_challenge. *>(loc:f,self:frame.path_challenge) {call frame.path_challenge.handle(self:frame.path_challenge, loc:scid, loc:dcid, loc:e, loc:sq)}\nelse {if some self:frame.retire_connection_id. *>(loc:f,self:frame.retire_connection_id) {call frame.retire_connection_id.handle(self:frame.retire_connection_id, loc:scid, loc:dcid, loc:e, loc:sq)}\nelse {if some self:frame.new_connection_id. *>(loc:f,self:frame.new_connection_id) {call frame.new_connection_id.handle(self:frame.new_connection_id, loc:scid, loc:dcid, loc:e, loc:sq)}\nelse {if some self:frame.streams_blocked_bidi. *>(loc:f,self:frame.streams_blocked_bidi) {call frame.streams_blocked_bidi.handle(self:frame.streams_blocked_bidi, loc:scid, loc:dcid, loc:e, loc:sq)}\nelse {if some self:frame.streams_blocked. *>(loc:f,self:frame.streams_blocked) {call frame.streams_blocked.handle(self:frame.streams_blocked, loc:scid, loc:dcid, loc:e, loc:sq)}\nelse {if some self:frame.stream_data_blocked. *>(loc:f,self:frame.stream_data_blocked) {call frame.stream_data_blocked.handle(self:frame.stream_data_blocked, loc:scid, loc:dcid, loc:e, loc:sq)}\nelse {if some self:frame.data_blocked. *>(loc:f,self:frame.data_blocked) {call frame.data_blocked.handle(self:frame.data_blocked, loc:scid, loc:dcid, loc:e, loc:sq)}\nelse {if some self:frame.max_streams_bidi. *>(loc:f,self:frame.max_streams_bidi) {call frame.max_streams_bidi.handle(self:frame.max_streams_bidi, loc:scid, loc:dcid, loc:e, loc:sq)}\nelse {if some self:frame.max_streams. *>(loc:f,self:frame.max_streams) {call frame.max_streams.handle(self:frame.max_streams, loc:scid, loc:dcid, loc:e, loc:sq)}\nelse {if some self:frame.max_stream_data. *>(loc:f,self:frame.max_stream_data) {call frame.max_stream_data.handle(self:frame.max_stream_data, loc:scid, loc:dcid, loc:e, loc:sq)}\nelse {if some self:frame.max_data. *>(loc:f,self:frame.max_data) {call frame.max_data.handle(self:frame.max_data, loc:scid, loc:dcid, loc:e, loc:sq)}\nelse {if some self:frame.stream. *>(loc:f,self:frame.stream) {call frame.stream.handle(self:frame.stream, loc:scid, loc:dcid, loc:e, loc:sq)}\nelse {if some self:frame.new_token. *>(loc:f,self:frame.new_token) {call frame.new_token.handle(self:frame.new_token, loc:scid, loc:dcid, loc:e, loc:sq)}\nelse {if some self:frame.crypto. *>(loc:f,self:frame.crypto) {call frame.crypto.handle(self:frame.crypto, loc:scid, loc:dcid, loc:e, loc:sq)}\nelse {if some self:frame.stop_sending. *>(loc:f,self:frame.stop_sending) {call frame.stop_sending.handle(self:frame.stop_sending, loc:scid, loc:dcid, loc:e, loc:sq)}\nelse {if some self:frame.rst_stream. *>(loc:f,self:frame.rst_stream) {call frame.rst_stream.handle(self:frame.rst_stream, loc:scid, loc:dcid, loc:e, loc:sq)}\nelse {if some self:frame.ack_ecn. *>(loc:f,self:frame.ack_ecn) {call frame.ack_ecn.handle(self:frame.ack_ecn, loc:scid, loc:dcid, loc:e, loc:sq)}\nelse {if some self:frame.ack. *>(loc:f,self:frame.ack) {call frame.ack.handle(self:frame.ack, loc:scid, loc:dcid, loc:e, loc:sq)}\nelse {if some self:frame.ping. *>(loc:f,self:frame.ping) {call frame.ping.handle(self:frame.ping, loc:scid, loc:dcid, loc:e, loc:sq)}\nelse {call frame.handle(loc:f, loc:scid, loc:dcid, loc:e, loc:sq)}}}}}}}}}}}}}}}}}}}}}}}}}}; call loc:idx := frame.idx.next(loc:idx)}}}}}}}",
        "<<<\n\t        if (0 <= `fml:x` && `fml:x` < (`vector[tls.cipher_suite].domain`)`fml:a`.size()) \n\t            `fml:a`[`fml:x`] = `fml:y`;\n\t    >>>",
        "<<<\n                for (unsigned i = 0; i < `fml:b`.size(); i++)\n\t            `fml:a`.push_back(`fml:b`[i]);\n            >>>",
        "<<<\n        unsigned str_d[token.size()];\n        for (int i = 0; i < token.size(); i++)\n            str_d[i] = token[i];\n        const char * session_file = getenv(\"NEW_TOKEN_FILE\");\n        FILE *fp;\n        if(session_file != NULL) {\n            fp = fopen(session_file,\"w\");\n            for (int i = 0; i < token.size(); i++) {\n                //std::cerr <<  \"str_d[i] \"  << str_d[i] << std::endl;\n                //std::cerr <<  \"str_d[i] == 0 \"  << (str_d[i] == 0) << std::endl;\n                if(str_d[i] < 16)\n                    fprintf(fp, \"0%x\", str_d[i]);\n                else \n                    fprintf(fp, \"%x\", str_d[i]);\n            }  \n            fclose(fp);\n        }\n\n        >>>",
        "{crypto_handler_pos(C,L) := 0:stream_pos; conn_enc_level(E,C) := quic_packet_type.zero_rtt; established_1rtt_keys(C) := false; established_0rtt_keys(C) := false; established_handshake_keys(C) := false; crypto_reset(C) := false}",
        "<<<\n                for (unsigned i = 0; i < `fml:b`.size(); i++)\n\t            `fml:a`.push_back(`fml:b`[i]);\n            >>>",
        "<<<\n\t        `fml:a`.push_back(`fml:v`);\n            >>>",
        "{}",
        "{}",
        "<<<\n\t        if (0 <= `fml:x` && `fml:x` < (`index`)`fml:a`.size()) \n\t            `fml:y` = `fml:a`[`fml:x`];\n\t    >>>",
        "{client.enc_level := quic_packet_type.initial; ip.endpoint.protocol(client.ep) := ip.udp; ip.endpoint.addr(client.ep) := client_addr; ip.endpoint.port(client.ep) := client_port; if ip.endpoint.addr(client.ep) = 0x7f000001 | is_mim {ip.endpoint.interface(client.ep) := ip.lo}\nelse {ip.endpoint.interface(client.ep) := ip.ivy}}",
        "local loc:data {loc:data := stream_data.segment(fml:pkt,fml:pnum_pos,fml:pnum_pos + fml:pnum_len); fml:seq := 0:pkt_num; local loc:idx {loc:idx := 0:stream_pos; while loc:idx < stream_data.end(loc:data)\n{fml:seq := 256:pkt_num * fml:seq + bfe[0][7](stream_data.value(loc:data,loc:idx)); call loc:idx := stream_pos.next(loc:idx)}}}",
        "assert 0:vector[tls.cipher_suite].domain <= fml:x & fml:x < vector[tls.cipher_suite].end(fml:a)",
        "<<<\n            if (::lseek(`http_request_file.fildes`,0,SEEK_SET) < 0) {\n                perror(\"cannot seek to beginning of file\");\n            }\n            std::vector<char> buf;\n            ivy_socket_deser_128 ds(`http_request_file.fildes`,buf);  // initializer deserializer with zero bytes\n            //ivy_socket_deser ds(`http_request_file.fildes`,buf);  // initializer deserializer with zero bytes\n            while (ds.more(1)) {\n                //long long res;\n                int128_t res;\n                ds.getn(res,1);\n                d.push_back(res);\n            }  // read all the bytes\n            \n        >>>",
        "local loc:0 {call loc:0 := src_tls_id(fml:src); local loc:tls_id {loc:tls_id := loc:0; local loc:dcil {loc:dcil := bfe[0][7](stream_data.value(fml:spkt,5)); local loc:0 {call loc:0 := prot.bytes_to_cid(stream_data.segment(fml:spkt,6,6 + loc:dcil)); local loc:dcid {loc:dcid := loc:0; local loc:scil {loc:scil := bfe[0][7](stream_data.value(fml:spkt,6 + loc:dcil)); local loc:0 {call loc:0 := prot.bytes_to_cid(stream_data.segment(fml:spkt,7 + loc:dcil,7 + loc:dcil + loc:scil)); local loc:scid {loc:scid := loc:0; local loc:versions_vn {loc:versions_vn := stream_data.segment(fml:spkt,3 + 4 + loc:dcil + loc:scil,stream_data.end(fml:spkt)); call export_length_cid_extension(loc:dcil, loc:scil); if version_not_found(fml:src) {loc:versions_vn := stream_data.segment(fml:spkt,0,stream_data.end(fml:spkt))}; local loc:0 {call loc:0 := versions.empty; local loc:sv {loc:sv := loc:0; local loc:idx {loc:idx := stream_data.begin(loc:versions_vn); while (stream_data.value(loc:versions_vn,loc:idx) ~= 0xff | stream_data.value(loc:versions_vn,loc:idx) ~= 0x00) & version_not_found(fml:src)\n{call loc:idx := stream_pos.next(loc:idx)}; while loc:idx < stream_data.end(loc:versions_vn)\n{local loc:i {loc:i := 0:stream_pos; local loc:0 {call loc:0 := stream_data.empty; local loc:v {loc:v := loc:0; while loc:i < 4\n{call loc:v := stream_data.append(loc:v, stream_data.value(loc:versions_vn,loc:idx)); loc:i := loc:i + 1; call loc:idx := stream_pos.next(loc:idx)}; call loc:sv := versions.append(loc:sv, loc:v)}}}}; local loc:idxx {loc:idxx := 0:index; local loc:idxx_bv {loc:idxx_bv := 0:index; while loc:idxx < versions.end(loc:sv)\n{local loc:ii {loc:ii := 0:index; while loc:ii < versions.end(supported_versions)\n{if versions.value(loc:sv,loc:idxx) = versions.value(supported_versions,loc:ii) {final_version := versions_bv.value(supported_versions_bv,loc:idxx_bv); call loc:idxx_bv := index.next(loc:idxx_bv)}; call loc:ii := index.next(loc:ii)}; call loc:idxx := index.next(loc:idxx)}}; if final_version ~= 0x00000000 {version_negociated := true; local loc:0 {call loc:0 := pkt_serdes_vn.from_bytes(fml:spkt); local loc:pkt {loc:pkt := loc:0; quic_packet_vn.ptype(loc:pkt) := quic_packet_type.version_negociation; call recv_vn_pkt(fml:src, fml:dst, loc:pkt); call infer_tls_events_vn(fml:src, fml:dst, loc:pkt); call packet_event_vn(fml:src, fml:dst, loc:pkt)}}}\nelse {version_not_found(fml:src) := true; call version_not_found_event}}}}}}}}}}}}}}}",
        "{}",
        "<<<\n                for (unsigned i = 0; i < `fml:a`.size()/2; i++) {\n                    std::swap(`fml:a`[i],`fml:a`[`fml:a`.size()-i-1]);\n                }\n            >>>",
        "{}",
        "<<<\n\t    std::vector<char> buf(y.size());\n\t    std::copy(y.begin(),y.end(),buf.begin());\n\t    `quic_deser_retry` des(buf);\n\t    __deser(des,x);\n\t    >>>",
        "{}",
        "<<<\n                for (unsigned i = 0; i < `fml:a`.size()/2; i++) {\n                    std::swap(`fml:a`[i],`fml:a`[`fml:a`.size()-i-1]);\n                }\n            >>>",
        "<<<\n                for (unsigned i = 0; i < `fml:a`.size()/2; i++) {\n                    std::swap(`fml:a`[i],`fml:a`[`fml:a`.size()-i-1]);\n                }\n            >>>",
        "{}",
        "assert fml:s = quic_packet_retry.arr.end(fml:a)",
        "{}",
        "{assert quic_packet_0rtt.retired_cids.end(fml:a) = fml:s; assert 0:quic_packet_0rtt.idx <= X & X < quic_packet_0rtt.retired_cids.end(old_fml:a) -> quic_packet_0rtt.retired_cids.value(fml:a,X) = quic_packet_0rtt.retired_cids.value(old_fml:a,X); assert quic_packet_0rtt.retired_cids.end(old_fml:a) <= X & X < fml:s -> quic_packet_0rtt.retired_cids.value(fml:a,X) = fml:v}",
        "<<<\n\t        `fml:a`.push_back(`fml:v`);\n            >>>",
        "{}",
        "{}",
        "{assert fml:x < fml:y & (fml:x < Y -> fml:y <= Y); assert idx.succ(fml:x,fml:y)}",
        "local loc:0 {call loc:0 := socket_endpoint(fml:host, fml:s); local loc:dst {loc:dst := loc:0; local loc:idx {loc:idx := prot.arr.begin(fml:pkts); local loc:0 {call loc:0 := stream_data.empty; local loc:past_data {loc:past_data := loc:0; while loc:idx < prot.arr.end(fml:pkts)\n{local loc:ppkt {loc:ppkt := prot.arr.value(fml:pkts,loc:idx); local loc:0 {call loc:0 := src_tls_id(loc:dst); local loc:tls_id {loc:tls_id := loc:0; local loc:header {loc:header := stream_data.value(loc:ppkt,0); local loc:hdr_type {loc:hdr_type := bfe[0][6](stream_data.value(loc:ppkt,0)); local loc:tt {loc:tt := bvand(loc:hdr_type,0x30); local loc:is_long {loc:is_long := bvand(0x80:byte,loc:header) ~= 0; local loc:version {loc:version := stream_data.segment(loc:ppkt,1,1 + 4); local loc:0 {call loc:0 := bytes_to_version(loc:version); local loc:bversion {loc:bversion := loc:0; local loc:ptype {loc:ptype := bvand(0x30:byte,loc:header); if loc:bversion = 0 & loc:is_long | version_not_found(fml:src) {call loc:past_data := stream_data.extend(loc:past_data, loc:ppkt); call tls_client_version_response(fml:src, loc:dst, loc:past_data)}\nelse {if loc:tt = 0x30 & loc:bversion ~= 0 {call tls_client_retry_response(fml:src, loc:dst, loc:ppkt)}\nelse {local loc:0 {call loc:0 := reference_pkt_num(loc:ppkt, true); local loc:rnum {loc:rnum := loc:0; local loc:0 {call loc:0 := prot.decrypt(loc:tls_id, loc:rnum, loc:ppkt); local loc:res {loc:res := loc:0; if tls_api.upper.ok(loc:res) {local loc:0 {call loc:0 := is_padding_packet(tls_api.upper.payload(loc:res)); local loc:is_pad {loc:is_pad := loc:0; if loc:is_pad {call padding_packet_event(fml:host, fml:src, loc:dst, loc:ppkt)}\nelse {local loc:0 {call loc:0 := pkt_serdes.from_bytes(tls_api.upper.data(loc:res)); local loc:pkt {loc:pkt := loc:0; local loc:0 {call loc:0 := prot.get_pnum_len(tls_api.upper.data(loc:res)); call quic_packet.seq_num(loc:pkt) := prot.correct_pnum(loc:rnum, quic_packet.seq_num(loc:pkt), loc:0)}; call recv_packet(fml:host, fml:src, loc:dst, loc:pkt); call infer_tls_events(fml:src, loc:dst, loc:pkt); call packet_event(fml:src, loc:dst, loc:pkt)}}}}}}\nelse {call undecryptable_packet_event(fml:host, fml:src, loc:dst, loc:ppkt)}}}}}}}; call loc:idx := prot.idx.next(loc:idx)}}}}}}}}}}}}; version_not_found(fml:src) := false; call show_last_datagram_size(last_datagram_received_size); if ~first_datagram_received & fml:host = endpoint_id.server {assert last_datagram_received_size + 8 > 1200; first_datagram_received := true}; last_datagram_received_size := 0:stream_pos}}}}}",
        "{}",
        "call net.recv(prm:V0, fml:s, fml:src, fml:x)",
        "{assert connected(fml:dcid) & connected_to(fml:dcid) = fml:scid; assert fml:e = quic_packet_type.one_rtt & established_1rtt_keys(fml:scid); assert num_queued_frames(fml:scid) > 0 -> fml:e = queued_level(fml:scid); assert stream_data.end(frame.path_challenge.data(fml:f)) = 8; assert ~path_challenge_pending(fml:dcid,frame.path_challenge.data(fml:f))}",
        "{assert connected(fml:dcid) & connected_to(fml:dcid) = fml:scid; assert fml:e = quic_packet_type.one_rtt & established_1rtt_keys(fml:scid); assert num_queued_frames(fml:scid) > 0 -> fml:e = queued_level(fml:scid)}",
        "{}",
        "<<<\n\t        `fml:a`.push_back(`fml:v`);\n            >>>",
        "{}",
        "<<< \n                //  -o lo\n                std::string command = \"sudo iptables -t nat -A OUTPUT -d 10.0.2.1 -p udp --dport \" + std::to_string(server_ep) + \":\" + std::to_string(server_ep) + \" ! --sport 4430:4440 -j DNAT --to-destination 10.0.3.1:4440 >/dev/null 2>&1\"; \n                int n = command.length();\n            \n                // declaring character array\n                char command_array[n + 1];\n            \n                // copying the contents of the\n                // string to char array\n                strcpy(command_array, command.c_str());\n\n                int cr = system(command_array);\n            >>>",
        "local loc:e {loc:e := (quic_packet_type.handshake if (fml:lev = 2) else quic_packet_type.zero_rtt); local loc:0 {call loc:0 := tls_id_to_cid(fml:tls_id); call tls_keys_established_event(loc:0, loc:e)}}",
        "<<<\n\t        if (0 <= `fml:x` && `fml:x` < (`stream_pos`)`fml:a`.size()) \n\t            `fml:y` = `fml:a`[`fml:x`];\n\t    >>>",
        "{}",
        "fml:y := fml:x - 1",
        "assert clients.client.arr.end(fml:a) = fml:s & clients.client.arr.value(fml:a,X) = fml:y",
        "local loc:scid {loc:scid := quic_packet_0rtt.src_cid(fml:pkt); local loc:dcid {loc:dcid := quic_packet_0rtt.dst_cid(fml:pkt); local loc:sq {loc:sq := quic_packet_0rtt.seq_num(fml:pkt); if quic_packet_0rtt.ptype(fml:pkt) = quic_packet_type.zero_rtt {nonce_cid(loc:scid) := loc:dcid}; local loc:e {loc:e := quic_packet_type.zero_rtt; call set_encryption_level(fml:src, loc:scid, loc:e); call tls_keys_established_event(loc:scid, loc:e); if conn_requested(fml:dst,fml:src,loc:dcid) & ~connected(loc:dcid) & ~connected(loc:scid) {call app_server_open_event_0rtt(fml:src, fml:dst, loc:scid, loc:dcid); call app_server_open_event(fml:src, fml:dst, loc:scid, loc:dcid)}; local loc:idx {loc:idx := frame.arr.begin(quic_packet_0rtt.payload(fml:pkt)); while loc:idx < frame.arr.end(quic_packet_0rtt.payload(fml:pkt))\n{local loc:f {loc:f := frame.arr.value(quic_packet_0rtt.payload(fml:pkt),loc:idx); if some loc:sf. *>(loc:f,loc:sf) {call app_server_open_event_0rtt(fml:src, fml:dst, loc:scid, loc:dcid); call app_send_event(fml:src, fml:dst, loc:dcid, frame.stream.id(loc:sf), frame.stream.data(loc:sf), frame.stream.offset(loc:sf), frame.stream.fin(loc:sf))}; call infer_frame(loc:scid, loc:dcid, loc:f); if some self:frame.malicious_frame. *>(loc:f,self:frame.malicious_frame) {call frame.malicious_frame.handle(self:frame.malicious_frame, loc:scid, loc:dcid, loc:e, loc:sq)}\nelse {if some self:frame.unknown_frame. *>(loc:f,self:frame.unknown_frame) {call frame.unknown_frame.handle(self:frame.unknown_frame, loc:scid, loc:dcid, loc:e, loc:sq)}\nelse {if some self:frame.ack_frequency. *>(loc:f,self:frame.ack_frequency) {call frame.ack_frequency.handle(self:frame.ack_frequency, loc:scid, loc:dcid, loc:e, loc:sq)}\nelse {if some self:frame.handshake_done. *>(loc:f,self:frame.handshake_done) {call frame.handshake_done.handle(self:frame.handshake_done, loc:scid, loc:dcid, loc:e, loc:sq)}\nelse {if some self:frame.application_close. *>(loc:f,self:frame.application_close) {call frame.application_close.handle(self:frame.application_close, loc:scid, loc:dcid, loc:e, loc:sq)}\nelse {if some self:frame.connection_close. *>(loc:f,self:frame.connection_close) {call frame.connection_close.handle(self:frame.connection_close, loc:scid, loc:dcid, loc:e, loc:sq)}\nelse {if some self:frame.path_response. *>(loc:f,self:frame.path_response) {call frame.path_response.handle(self:frame.path_response, loc:scid, loc:dcid, loc:e, loc:sq)}\nelse {if some self:frame.path_challenge. *>(loc:f,self:frame.path_challenge) {call frame.path_challenge.handle(self:frame.path_challenge, loc:scid, loc:dcid, loc:e, loc:sq)}\nelse {if some self:frame.retire_connection_id. *>(loc:f,self:frame.retire_connection_id) {call frame.retire_connection_id.handle(self:frame.retire_connection_id, loc:scid, loc:dcid, loc:e, loc:sq)}\nelse {if some self:frame.new_connection_id. *>(loc:f,self:frame.new_connection_id) {call frame.new_connection_id.handle(self:frame.new_connection_id, loc:scid, loc:dcid, loc:e, loc:sq)}\nelse {if some self:frame.streams_blocked_bidi. *>(loc:f,self:frame.streams_blocked_bidi) {call frame.streams_blocked_bidi.handle(self:frame.streams_blocked_bidi, loc:scid, loc:dcid, loc:e, loc:sq)}\nelse {if some self:frame.streams_blocked. *>(loc:f,self:frame.streams_blocked) {call frame.streams_blocked.handle(self:frame.streams_blocked, loc:scid, loc:dcid, loc:e, loc:sq)}\nelse {if some self:frame.stream_data_blocked. *>(loc:f,self:frame.stream_data_blocked) {call frame.stream_data_blocked.handle(self:frame.stream_data_blocked, loc:scid, loc:dcid, loc:e, loc:sq)}\nelse {if some self:frame.data_blocked. *>(loc:f,self:frame.data_blocked) {call frame.data_blocked.handle(self:frame.data_blocked, loc:scid, loc:dcid, loc:e, loc:sq)}\nelse {if some self:frame.max_streams_bidi. *>(loc:f,self:frame.max_streams_bidi) {call frame.max_streams_bidi.handle(self:frame.max_streams_bidi, loc:scid, loc:dcid, loc:e, loc:sq)}\nelse {if some self:frame.max_streams. *>(loc:f,self:frame.max_streams) {call frame.max_streams.handle(self:frame.max_streams, loc:scid, loc:dcid, loc:e, loc:sq)}\nelse {if some self:frame.max_stream_data. *>(loc:f,self:frame.max_stream_data) {call frame.max_stream_data.handle(self:frame.max_stream_data, loc:scid, loc:dcid, loc:e, loc:sq)}\nelse {if some self:frame.max_data. *>(loc:f,self:frame.max_data) {call frame.max_data.handle(self:frame.max_data, loc:scid, loc:dcid, loc:e, loc:sq)}\nelse {if some self:frame.stream. *>(loc:f,self:frame.stream) {call frame.stream.handle(self:frame.stream, loc:scid, loc:dcid, loc:e, loc:sq)}\nelse {if some self:frame.new_token. *>(loc:f,self:frame.new_token) {call frame.new_token.handle(self:frame.new_token, loc:scid, loc:dcid, loc:e, loc:sq)}\nelse {if some self:frame.crypto. *>(loc:f,self:frame.crypto) {call frame.crypto.handle(self:frame.crypto, loc:scid, loc:dcid, loc:e, loc:sq)}\nelse {if some self:frame.stop_sending. *>(loc:f,self:frame.stop_sending) {call frame.stop_sending.handle(self:frame.stop_sending, loc:scid, loc:dcid, loc:e, loc:sq)}\nelse {if some self:frame.rst_stream. *>(loc:f,self:frame.rst_stream) {call frame.rst_stream.handle(self:frame.rst_stream, loc:scid, loc:dcid, loc:e, loc:sq)}\nelse {if some self:frame.ack_ecn. *>(loc:f,self:frame.ack_ecn) {call frame.ack_ecn.handle(self:frame.ack_ecn, loc:scid, loc:dcid, loc:e, loc:sq)}\nelse {if some self:frame.ack. *>(loc:f,self:frame.ack) {call frame.ack.handle(self:frame.ack, loc:scid, loc:dcid, loc:e, loc:sq)}\nelse {if some self:frame.ping. *>(loc:f,self:frame.ping) {call frame.ping.handle(self:frame.ping, loc:scid, loc:dcid, loc:e, loc:sq)}\nelse {call frame.handle(loc:f, loc:scid, loc:dcid, loc:e, loc:sq)}}}}}}}}}}}}}}}}}}}}}}}}}}; call loc:idx := frame.idx.next(loc:idx)}}}}}}}",
        "<<<\n                if ((`index`)`fml:a`.size() > 0)\n                    `fml:res` = `fml:a`.back();\n            >>>",
        "{}",
        "<<<\n            std::cerr << `http_request_file.fildes` << std::endl;\n            if (::lseek(`http_request_file.fildes`,0,SEEK_SET) < 0) {\n                perror(\"cannot seek to beginning of file\");\n            }\n            vector<unsigned char> bytes;\n            bytes.resize(d.size());\n            std::copy(d.begin(),d.end(),bytes.begin());\n            if (::write(`http_request_file.fildes`,&bytes[0],bytes.size()) < 0) {\n                perror(\"cannot seek to beginning of file\");\n            }\n            if (::ftruncate(`http_request_file.fildes`,sr.res.size()) < 0) {\n                perror(\"cannot truncate file\");\n            }\n        >>>",
        "assert 0:replayed_quic_packet_0rtt.idx <= fml:x & fml:x < replayed_quic_packet_0rtt.arr.end(fml:a)",
        "{}",
        "{}",
        "assert forged_quic_packet.arr.end(fml:a) = 0",
        "{assert forged_quic_packet_vn.arr.end(fml:a) = fml:s; assert 0:forged_quic_packet_vn.idx <= X & X < forged_quic_packet_vn.arr.end(old_fml:a) -> forged_quic_packet_vn.arr.value(fml:a,X) = forged_quic_packet_vn.arr.value(old_fml:a,X); assert forged_quic_packet_vn.arr.end(old_fml:a) <= X & X < fml:s -> forged_quic_packet_vn.arr.value(fml:a,X) = fml:v}",
        "{disable_active_migration.is_set(fml:s) := true; disable_active_migration.value(fml:s) := fml:p}",
        "<<<\n\t        `fml:a`.resize(`fml:s`);\n\t        for (unsigned i = 0; i < `fml:s`; i++)\n\t            `fml:a`[i] = y;\n\t    >>>",
        "{assert connected(fml:dcid) & connected_to(fml:dcid) = fml:scid; assert fml:e = quic_packet_type.one_rtt & established_1rtt_keys(fml:scid); assert num_queued_frames(fml:scid) > 0 -> fml:e = queued_level(fml:scid)}",
        "{}",
        "<<<\n\t    >>>",
        "{}",
        "assert 0:replayed_quic_packet_0rtt.idx <= fml:s",
        "{assert fml:x < fml:y & (fml:x < Y -> fml:y <= Y); assert forged_protected_quic_packet.idx.succ(fml:x,fml:y)}",
        "{if ~stream_frame_restransmitted(fml:id) & ~sdb_frame_restransmitted(fml:id) {receiving_recv(fml:id) := true}; call lastest_stream_id_receiving(fml:seq) := arr_streamid_r.append(lastest_stream_id_receiving(fml:seq), fml:id); call lastest_pkt_num_receiving := arr_pkt_num_r.append(lastest_pkt_num_receiving, fml:seq)}",
        "client.tls_id := fml:e",
        "assert 0:forged_quic_packet.idx <= fml:s",
        "<<<\n\t        `fml:s` = (`quic_packet_coal_0rtt.idx`) `fml:a`.size();\n\t    >>>",
        "fml:scid := the_cid",
        "assert frame.ack_ecn.range.arr.end(fml:a) = fml:s & frame.ack_ecn.range.arr.value(fml:a,X) = fml:y",
        "assert frame.ack.range.arr.end(fml:a) = 0",
        "local loc:dcid {loc:dcid := forged_quic_packet_retry.dst_cid(fml:pkt); local loc:scid {loc:scid := forged_quic_packet_retry.src_cid(fml:pkt); if cid_mapped(loc:dcid) {loc:dcid := cid_to_aid(loc:dcid)}; retry_token(loc:scid) := forged_quic_packet_retry.token(fml:pkt); if ~_generating {conn_requested(fml:src,fml:dst,loc:scid) := false; conn_requested(fml:src,fml:dst,loc:dcid) := false; connected(loc:dcid) := false; connected(loc:scid) := false; conn_seen(loc:dcid) := false; conn_seen(loc:scid) := false; assert ~retry_recv(loc:dcid); retry_recv(loc:dcid) := true; server_cid := loc:scid; connected(the_cid) := false; connected(server_cid) := false; conn_seen(server_cid) := false; conn_seen(the_cid) := false; client_initial_rcid := loc:scid; local loc:0 {call loc:0 := tls_extensions.empty; local loc:extns {loc:extns := loc:0; local loc:0 {call loc:0 := make_transport_parameters; call loc:extns := tls_extensions.append(loc:extns, loc:0)}; call tls_api.upper.destroy(0:tls_api.id); call tls_api.upper.create(0:tls_api.id, false, loc:extns); conn_requested(fml:dst,fml:src,the_cid) := true}}}\nelse {retry_sent(loc:scid) := true; retry_response(loc:scid) := true; initial_keys_set(loc:scid) := false; tp_client_set := false; conn_requested(fml:src,fml:dst,loc:dcid) := false; conn_requested(fml:src,fml:dst,the_cid) := false; conn_seen(loc:dcid) := false; conn_seen(the_cid) := false; local loc:0 {call loc:0 := src_tls_id(fml:src); call tls_api.upper.destroy(loc:0)}}}}",
        "<<< res = x & 0xff; >>>",
        "{}",
        "assert 0:jdx_s <= fml:x & fml:x < arr_pkt_num_s.end(fml:a)",
        "assert quic_packet_coal_0rtt.retired_cids.end(fml:a) = fml:s & quic_packet_coal_0rtt.retired_cids.value(fml:a,X) = fml:y",
        "{}",
        "{}",
        "<<<\n\t        if (0 <= `fml:x` && `fml:x` < (`clients.client.idx`)`fml:a`.size()) \n\t            `fml:y` = `fml:a`[`fml:x`];\n\t    >>>",
        "{call show_socket(fml:s); if fml:host = endpoint_id.server {call server.behavior(fml:host, fml:s, fml:src, fml:pkts)}\nelse {if fml:host = endpoint_id.client {call client.behavior(fml:host, fml:s, fml:src, fml:pkts)}\nelse {if fml:host = endpoint_id.mim {call mim_agent.behavior(fml:host, fml:s, fml:src, fml:pkts)}\nelse {if fml:host = endpoint_id.victim {call victim_agent.behavior(fml:host, fml:s, fml:src, fml:pkts)}\nelse {if fml:host = endpoint_id.attacker {call attacker.behavior(fml:host, fml:s, fml:src, fml:pkts)}\nelse {call undefined_host_error(fml:host, fml:s, fml:src)}}}}}}",
        "{mim_client_target.enc_level := quic_packet_type.initial; ip.endpoint.protocol(mim_client_target.ep) := ip.udp; ip.endpoint.addr(mim_client_target.ep) := 0:ip.addr; ip.endpoint.port(mim_client_target.ep) := 0:ip.port; if ip.endpoint.addr(mim_client_target.ep) = 0x7f000001 | is_mim {ip.endpoint.interface(mim_client_target.ep) := ip.lo}\nelse {ip.endpoint.interface(mim_client_target.ep) := ip.ivy}}",
        "{}",
        "{}",
        "{}",
        "<<<\n                for (unsigned i = 0; i < `fml:b`.size(); i++)\n\t            `fml:a`.push_back(`fml:b`[i]);\n            >>>",
        "assert prot.arr.end(fml:a) = 0",
        "{assert frame.arr.end(fml:a) > frame.arr.end(old_fml:a) & ~(frame.arr.end(old_fml:a) < X & X < frame.arr.end(fml:a)); assert 0:frame.idx <= X & X < frame.arr.end(old_fml:a) -> frame.arr.value(fml:a,X) = frame.arr.value(old_fml:a,X); assert frame.arr.value(fml:a,frame.arr.end(old_fml:a)) = fml:v}",
        "assert 0:quic_packet_0rtt.idx <= fml:s",
        "second_server.ep := fml:e",
        "{assert fml:y < fml:x & (Y:frame.ack_ecn.range.idx < fml:x -> Y <= fml:y); assert frame.ack_ecn.range.idx.succ(fml:y,fml:x)}",
        "{}",
        "{}",
        "assert forged_protected_quic_packet.arr.value(fml:a,fml:x) = fml:y",
        "{}",
        "assert quic_packet_retry.arr.value(fml:a,fml:x) = fml:y",
        "<<<\n\t        `fml:a`.push_back(`fml:v`);\n            >>>",
        "assert 0:jdx_s <= fml:x & fml:x < arr_pkt_num_s.end(fml:a)",
        "fml:res := forged_quic_packet.ptype(fml:pkt) ~= quic_packet_type.one_rtt",
        "{assert quic_packet_vn.arr.end(fml:a) > quic_packet_vn.arr.end(old_fml:a) & ~(quic_packet_vn.arr.end(old_fml:a) < X & X < quic_packet_vn.arr.end(fml:a)); assert 0:quic_packet_vn.idx <= X & X < quic_packet_vn.arr.end(old_fml:a) -> quic_packet_vn.arr.value(fml:a,X) = quic_packet_vn.arr.value(old_fml:a,X); assert quic_packet_vn.arr.value(fml:a,quic_packet_vn.arr.end(old_fml:a)) = fml:v}",
        "{}",
        "<<<\n\t        `fml:a`.resize(`fml:s`);\n\t        for (unsigned i = 0; i < `fml:s`; i++)\n\t            `fml:a`[i] = y;\n\t    >>>",
        "<<<\n\t        if (`fml:a`.size() > 0) {\n\t            a.pop_back();\n\t        }\n            >>>",
        "assert servers.server.arr.end(fml:a) = 0",
        "if bvand(stream_data.value(fml:pkt,0),0x80) ~= 0 {local loc:hdr_type {loc:hdr_type := bvand(stream_data.value(fml:pkt,0),0x30); if loc:hdr_type = 0x00 | loc:hdr_type = 0x30 {fml:level := 0:tls_api.upper.level}\nelse {if loc:hdr_type = 0x10 {fml:level := 1:tls_api.upper.level}\nelse {fml:level := 2:tls_api.upper.level}}}}\nelse {fml:level := 3:tls_api.upper.level}",
        "<<<\n                if ((`quic_packet.idx`)`fml:a`.size() > 0)\n                    `fml:res` = `fml:a`.back();\n            >>>",
        "{}",
        "{}",
        "<<<\n\t    >>>",
        "<<<\n\t        `fml:a`.resize(`fml:s`);\n\t        for (unsigned i = 0; i < `fml:s`; i++)\n\t            `fml:a`[i] = y;\n\t    >>>",
        "{}",
        "{}",
        "<<<\n\t        unsigned __old_size = `fml:a`.size();\n\t        `fml:a`.resize(`fml:s`);\n\t        for (unsigned i = __old_size; i < (unsigned)`fml:s`; i++)\n\t            `fml:a`[i] = v;\n            >>>",
        "{}",
        "assert 0:replayed_quic_packet_0rtt.idx < fml:x",
        "{}",
        "{assert quic_packet_vn.arr.end(fml:a) = quic_packet_vn.arr.end(old_fml:a); assert quic_packet_vn.arr.value(fml:a,X) = (fml:y if (X = fml:x) else quic_packet_vn.arr.value(old_fml:a,X))}",
        "{}",
        "<<<\n\t        if (0 <= `fml:x` && `fml:x` < (`vector[tls.handshake].domain`)`fml:a`.size()) \n\t            `fml:y` = `fml:a`[`fml:x`];\n\t    >>>",
        "{}",
        "<<<\n                for (unsigned i = 0; i < `fml:a`.size()/2; i++) {\n                    std::swap(`fml:a`[i],`fml:a`[`fml:a`.size()-i-1]);\n                }\n            >>>",
        "{assert fml:x < fml:y & (fml:x < Y -> fml:y <= Y); assert vector[tls.psk_identity].domain.succ(fml:x,fml:y)}",
        "{}",
        "<<<\n\t        `fml:a`.push_back(`fml:v`);\n            >>>",
        "<<<\n                for (unsigned i = 0; i < `fml:a`.size()/2; i++) {\n                    std::swap(`fml:a`[i],`fml:a`[`fml:a`.size()-i-1]);\n                }\n            >>>",
        "{}",
        "<<<\n\t    >>>",
        "{assert quic_packet.retired_cids.end(fml:a) > quic_packet.retired_cids.end(old_fml:a) & ~(quic_packet.retired_cids.end(old_fml:a) < X & X < quic_packet.retired_cids.end(fml:a)); assert 0:quic_packet.idx <= X & X < quic_packet.retired_cids.end(old_fml:a) -> quic_packet.retired_cids.value(fml:a,X) = quic_packet.retired_cids.value(old_fml:a,X); assert quic_packet.retired_cids.value(fml:a,quic_packet.retired_cids.end(old_fml:a)) = fml:v}",
        "{}",
        "{assert cids.end(fml:a) = cids.end(old_fml:a); assert cids.value(fml:a,X) = (fml:y if (X = fml:x) else cids.value(old_fml:a,X))}",
        "{mim_agent.enc_level := quic_packet_type.initial; ip.endpoint.protocol(mim_agent.ep_in) := ip.udp; ip.endpoint.addr(mim_agent.ep_in) := mim_addr; ip.endpoint.port(mim_agent.ep_in) := mim_port_in; ip.endpoint.interface(mim_agent.ep_in) := ip.lo; ip.endpoint.protocol(mim_agent.ep_out) := ip.udp; ip.endpoint.addr(mim_agent.ep_out) := mim_addr; ip.endpoint.port(mim_agent.ep_out) := mim_port_out; if ip.endpoint.addr(mim_agent.ep_out) = 0x7f000001 {ip.endpoint.interface(mim_agent.ep_out) := ip.lo}\nelse {ip.endpoint.interface(mim_agent.ep_out) := ip.ivy}; mim_agent.nat_configured := false; mim_agent.ppkt_saved_b := false; mim_agent.init_cids := false; mim_agent.force_client_forward := false; mim_agent.force_server_forward := false; mim_agent.max_retransmit(E,S) := 0:stream_pos; mim_agent.cppkt_forwarded_to_server := 0:stream_pos; mim_agent.cppkt_forwarded_to_client := 0:stream_pos; mim_agent.last_cppkt_forwarded_to_server := 0:stream_pos; mim_agent.last_cppkt_forwarded_to_client := 0:stream_pos; mim_agent.forward_turn := false; mim_agent.forward_turn_count := 0:stream_pos; mim_agent.wait_forward := true; call mim_agent.ppkt_to_be_forge := stream_data.empty; mim_agent.enc_level_ppkt_to_be_forge := quic_packet_type.initial}",
        "assert 0:quic_packet.idx < fml:x",
        "{assert fml:x < fml:y & (fml:x < Y -> fml:y <= Y); assert idx_s.succ(fml:x,fml:y)}",
        "{}",
        "{}",
        "{assert fml:y < fml:x & (Y:prot.idx < fml:x -> Y <= fml:y); assert prot.idx.succ(fml:y,fml:x)}",
        "local loc:0 {call loc:0 := socket_endpoint(fml:host, fml:s); local loc:dst {loc:dst := loc:0; local loc:0 {call loc:0 := prot.arr.empty; local loc:pkts_mim {loc:pkts_mim := loc:0; call loc:pkts_mim := prot.arr.append(loc:pkts_mim, fml:ppkt); local loc:0 {call loc:0 := endpoint_to_socket(fml:src); call net.send(endpoint_id.mim, loc:0, loc:dst, loc:pkts_mim)}}}}}",
        "assert 0:quic_packet_vn.idx <= fml:s",
        "<<<\n\t        unsigned __old_size = `fml:a`.size();\n\t        `fml:a`.resize(`fml:s`);\n\t        for (unsigned i = __old_size; i < (unsigned)`fml:s`; i++)\n\t            `fml:a`[i] = v;\n            >>>",
        "<<<\n\t        `fml:s` = (`quic_packet.idx`) `fml:a`.size();\n\t    >>>",
        "assert forged_quic_packet_retry.arr.end(fml:a) = fml:s & forged_quic_packet_retry.arr.value(fml:a,X) = fml:y",
        "{stream_seen(C,S) := false; stream_length(C,S) := 0:stream_pos; max_stream_data_set(C,S) := false; max_data_set(C) := false; stream_finished(C,S) := false; stream_reset(C,S) := false; queued_non_probing(C) := false; queued_non_ack(C) := false; queued_close(C) := false; path_challenge_pending(C,D) := false; queued_ack_eliciting(C) := false; max_rtp_num(C) := 0:cid_seq; send_retire_cid(C) := false; count_stream_frame(I,O,L,D) := 0:stream_pos; stream_frame_restransmitted(S) := false; count_reset_frame(I,E,O) := 0:stream_pos; reset_frame_restransmitted(S) := false; count_sdb_frame(I,O) := 0:stream_pos; sdb_frame_restransmitted(S) := false; stop_sending_in_bad_state := false; first_ack_freq_received := true; last_ack_freq_seq(C) := 0:pkt_num; connection_closed := false; handshake_done_send := false; is_stream_limit_test := false; is_crypto_limit_test := false; last_cid_seq(C) := 0:cid_seq; zrtt_pkt_update := false}",
        "{assert replayed_quic_packet_0rtt.arr.end(fml:a) > replayed_quic_packet_0rtt.arr.end(old_fml:a) & ~(replayed_quic_packet_0rtt.arr.end(old_fml:a) < X & X < replayed_quic_packet_0rtt.arr.end(fml:a)); assert 0:replayed_quic_packet_0rtt.idx <= X & X < replayed_quic_packet_0rtt.arr.end(old_fml:a) -> replayed_quic_packet_0rtt.arr.value(fml:a,X) = replayed_quic_packet_0rtt.arr.value(old_fml:a,X); assert replayed_quic_packet_0rtt.arr.value(fml:a,replayed_quic_packet_0rtt.arr.end(old_fml:a)) = fml:v}",
        "{}",
        "fml:y := fml:x + 1",
        "{assert fml:y < fml:x & (Y:idx_s < fml:x -> Y <= fml:y); assert idx_s.succ(fml:y,fml:x)}",
        "{}",
        "assert vector[tls.extension].end(fml:a) = 0",
        "fml:res := quic_packet_retry.ptype(fml:pkt) ~= quic_packet_type.one_rtt",
        "{}",
        "{}",
        "<<<\n\n    std::cerr <<  \"export_length_cid_extension\"  << \"\\n\";\n\tchar str_d[20];\n\tsprintf(str_d,\"%llu\",dcil);\n\tif(setenv(\"TEST_DCIL\",str_d,true) != 0) \n\t\tfprintf(stderr, \"setenv failed\\n\");\n\n\tchar str[20];\n\tsprintf(str,\"%llu\",scil);\n\tif(setenv(\"TEST_SCIL\",str,true) != 0) \n\t\tfprintf(stderr, \"setenv failed\\n\");\n\n    char str_p[20];\n\tsprintf(str_p,\"%llu\",scil);\n\tif(setenv(\"TEST_PCIL\",str_p,true) != 0) \n\t\tfprintf(stderr, \"setenv failed\\n\");\n    >>>",
        "<<<\n                if ((`vector[transport_parameter].domain`)`fml:a`.size() > 0)\n                    `fml:res` = `fml:a`.back();\n            >>>",
        "{assert forged_quic_packet.arr.end(fml:a) = forged_quic_packet.arr.end(old_fml:a); assert forged_quic_packet.arr.value(fml:a,X) = (fml:y if (X = fml:x) else forged_quic_packet.arr.value(old_fml:a,X))}",
        "<<<\n\t        if (0 <= `fml:x` && `fml:x` < (`frame.idx`)`fml:a`.size()) \n\t            `fml:y` = `fml:a`[`fml:x`];\n\t    >>>",
        "{assert arr_streamid_s.end(fml:a) > arr_streamid_s.end(old_fml:a) & ~(arr_streamid_s.end(old_fml:a) < X & X < arr_streamid_s.end(fml:a)); assert 0:idx_s <= X & X < arr_streamid_s.end(old_fml:a) -> arr_streamid_s.value(fml:a,X) = arr_streamid_s.value(old_fml:a,X); assert arr_streamid_s.value(fml:a,arr_streamid_s.end(old_fml:a)) = fml:v}",
        "{assert frame.ack.range.arr.end(fml:a) = frame.ack.range.arr.end(old_fml:a); assert frame.ack.range.arr.value(fml:a,X) = (fml:y if (X = fml:x) else frame.ack.range.arr.value(old_fml:a,X))}",
        "assert 0:quic_packet_0rtt.idx <= fml:x & fml:x < quic_packet_0rtt.retired_cids.end(fml:a)",
        "assert fml:s = tls_extensions.end(fml:a)",
        "{packed_forwarded_arr(fml:pkt) := true; call mim_agent.ppkt_to_be_forwarded_to_server(mim_agent.last_cppkt_forwarded_to_server) := forged_pkts.empty; mim_agent.force_client_forward := false; mim_agent.forward_turn := true}",
        "<<<\n\t        if (0 <= `fml:x` && `fml:x` < (`vector[tls.handshake].domain`)`fml:a`.size()) \n\t            `fml:a`[`fml:x`] = `fml:y`;\n\t    >>>",
        "if fml:src = client.ep {fml:pid := endpoint_id.client}\nelse {if fml:src = client_alt {fml:pid := endpoint_id.client_alt}\nelse {if fml:src = client_vn {fml:pid := endpoint_id.client_vn}}}",
        "assert replayed_quic_packet_0rtt.arr.end(fml:a) = 0",
        "{max_ack_delay.is_set(fml:s) := true; max_ack_delay.value(fml:s) := fml:p}",
        "assert forged_protected_quic_packet.retired_cids.end(fml:a) = 0",
        "<<<\n\t        if (0 <= `fml:x` && `fml:x` < (`forged_quic_packet_retry.idx`)`fml:a`.size()) \n\t            `fml:a`[`fml:x`] = `fml:y`;\n\t    >>>",
        "{}",
        "<<<\n\t        if (`fml:a`.size() > 0) {\n\t            a.pop_back();\n\t        }\n            >>>",
        "{}",
        "call enqueue_frame(fml:scid, fml:f, fml:e, false)",
        "{}",
        "{}",
        "assert bytes.end(fml:a) = fml:s & bytes.value(fml:a,X) = fml:y",
        "assert 0:vector[tls.compression_method].domain < fml:x",
        "<<<\n\t        if (0 <= `fml:x` && `fml:x` < (`forged_quic_packet_retry.idx`)`fml:a`.size()) \n\t            `fml:y` = `fml:a`[`fml:x`];\n\t    >>>",
        "{}",
        "{}",
        "<<<\n\t        `fml:a`.resize(`fml:s`);\n\t        for (unsigned i = 0; i < `fml:s`; i++)\n\t            `fml:a`[i] = y;\n\t    >>>",
        "fml:y := fml:x - 1",
        "call enqueue_frame(fml:scid, fml:f, fml:e, false)",
        "{}",
        "{}",
        "{}",
        "{}",
        "if _generating {assert fml:scid = the_cid; force_new_ack := true}",
        "assert 0:forged_protected_quic_packet.idx <= fml:s",
        "assert replayed_quic_packet_0rtt.arr.end(fml:a) = fml:s & replayed_quic_packet_0rtt.arr.value(fml:a,X) = fml:y",
        "<<<\n                const char * command = \"sudo iptables -t nat -L -n -v;sudo iptables -t nat -F >/dev/null 2>&1\"; \n                int cr = system( command );\n            >>>",
        "{}",
        "<<<\n\t        `fml:a`.resize(`fml:s`);\n\t        for (unsigned i = 0; i < `fml:s`; i++)\n\t            `fml:a`[i] = y;\n\t    >>>",
        "assert forged_protected_quic_packet.retired_cids.end(fml:a) = fml:s & forged_protected_quic_packet.retired_cids.value(fml:a,X) = fml:y",
        "{}",
        "{}",
        "{assert arr_pkt_num_r.end(fml:a) = fml:s; assert 0:jdx_r <= X & X < arr_pkt_num_r.end(old_fml:a) -> arr_pkt_num_r.value(fml:a,X) = arr_pkt_num_r.value(old_fml:a,X); assert arr_pkt_num_r.end(old_fml:a) <= X & X < fml:s -> arr_pkt_num_r.value(fml:a,X) = fml:v}",
        "{}",
        "assert 0:frame.ack.range.idx <= fml:x & fml:x < frame.ack.range.arr.end(fml:a)",
        "{}",
        "assert fml:s = arr_streamid_s.end(fml:a)",
        "{}",
        "{}",
        "call enqueue_frame(fml:scid, fml:f, fml:e, false)",
        "{}",
        "{assert forged_quic_packet.retired_cids.end(fml:a) = forged_quic_packet.retired_cids.end(old_fml:a); assert forged_quic_packet.retired_cids.value(fml:a,X) = (fml:y if (X = fml:x) else forged_quic_packet.retired_cids.value(old_fml:a,X))}",
        "<<<\n\t    >>>",
        "{}",
        "assert 0:quic_packet_coal_0rtt.idx <= fml:x & fml:x < quic_packet_coal_0rtt.retired_cids.end(fml:a)",
        "{assert fml:y < fml:x & (Y:jdx_s < fml:x -> Y <= fml:y); assert jdx_s.succ(fml:y,fml:x)}",
        "{assert fml:x < fml:y & (fml:x < Y -> fml:y <= Y); assert index.succ(fml:x,fml:y)}",
        "{}",
        "assert 0:servers.server.idx <= fml:x & fml:x < servers.server.arr.end(fml:a)",
        "assert 0:index <= fml:x & fml:x < ip_endpoints.end(fml:a)",
        "{assert forged_quic_packet.arr.end(fml:a) > forged_quic_packet.arr.end(old_fml:a) & ~(forged_quic_packet.arr.end(old_fml:a) < X & X < forged_quic_packet.arr.end(fml:a)); assert 0:forged_quic_packet.idx <= X & X < forged_quic_packet.arr.end(old_fml:a) -> forged_quic_packet.arr.value(fml:a,X) = forged_quic_packet.arr.value(old_fml:a,X); assert forged_quic_packet.arr.value(fml:a,forged_quic_packet.arr.end(old_fml:a)) = fml:v}",
        "{assert vector[tls.compression_method].end(fml:a) > vector[tls.compression_method].end(old_fml:a) & ~(vector[tls.compression_method].end(old_fml:a) < X & X < vector[tls.compression_method].end(fml:a)); assert 0:vector[tls.compression_method].domain <= X & X < vector[tls.compression_method].end(old_fml:a) -> vector[tls.compression_method].value(fml:a,X) = vector[tls.compression_method].value(old_fml:a,X); assert vector[tls.compression_method].value(fml:a,vector[tls.compression_method].end(old_fml:a)) = fml:v}",
        "<<<\n\t        if (`fml:a`.size() > 0) {\n\t            a.pop_back();\n\t        }\n            >>>",
        "<<<\n\t        if (0 <= `fml:x` && `fml:x` < (`index`)`fml:a`.size()) \n\t            `fml:y` = `fml:a`[`fml:x`];\n\t    >>>",
        "{assert forged_protected_quic_packet.arr.end(fml:a) = forged_protected_quic_packet.arr.end(old_fml:a); assert forged_protected_quic_packet.arr.value(fml:a,X) = (fml:y if (X = fml:x) else forged_protected_quic_packet.arr.value(old_fml:a,X))}",
        "<<<\n\t        `fml:a`.resize(`fml:s`);\n\t        for (unsigned i = 0; i < `fml:s`; i++)\n\t            `fml:a`[i] = y;\n\t    >>>",
        "assert tls.handshakes.end(fml:a) = 0",
        "{}",
        "<<<\n\t        unsigned __old_size = `fml:a`.size();\n\t        `fml:a`.resize(`fml:s`);\n\t        for (unsigned i = __old_size; i < (unsigned)`fml:s`; i++)\n\t            `fml:a`[i] = v;\n            >>>",
        "<<<\n\t        if (0 <= `fml:x` && `fml:x` < (`idx`)`fml:a`.size()) \n\t            `fml:a`[`fml:x`] = `fml:y`;\n\t    >>>",
        "<<<\n\t        `fml:a`.push_back(`fml:v`);\n            >>>",
        "<<<\n\t    std::vector<char> buf(y.size());\n\t    std::copy(y.begin(),y.end(),buf.begin());\n\t    `quic_deser_vn` des(buf);\n\t    __deser(des,x);\n\t    >>>",
        "assert clients.client.arr.end(fml:a) = 0",
        "{assert quic_packet_coal_0rtt.retired_cids.end(fml:a) = quic_packet_coal_0rtt.retired_cids.end(old_fml:a); assert quic_packet_coal_0rtt.retired_cids.value(fml:a,X) = (fml:y if (X = fml:x) else quic_packet_coal_0rtt.retired_cids.value(old_fml:a,X))}",
        "{}",
        "{}",
        "fml:y := fml:x + 1",
        "assert 0:quic_packet_0rtt.idx < fml:x",
        "assert arr_streamid_s.end(fml:a) = fml:s & arr_streamid_s.value(fml:a,X) = fml:y",
        "{}",
        "{while fml:end < stream_data.end(http_request) & stream_data.value(http_request,fml:end) ~= 10\n{call fml:end := stream_pos.next(fml:end)}; if fml:end < stream_data.end(http_request) {call fml:end := stream_pos.next(fml:end)}; local loc:data {loc:data := stream_data.segment(http_request,stream_length(fml:dcid,fml:s),fml:end); call app_send_event(fml:src, fml:dst, fml:dcid, fml:s, loc:data, stream_length(fml:dcid,fml:s), true); current_stream := current_stream + 4}}",
        "assert 0:forged_protected_quic_packet.idx < fml:x",
        "{assert arr_pkt_num_r.end(fml:a) > arr_pkt_num_r.end(old_fml:a) & ~(arr_pkt_num_r.end(old_fml:a) < X & X < arr_pkt_num_r.end(fml:a)); assert 0:jdx_r <= X & X < arr_pkt_num_r.end(old_fml:a) -> arr_pkt_num_r.value(fml:a,X) = arr_pkt_num_r.value(old_fml:a,X); assert arr_pkt_num_r.value(fml:a,arr_pkt_num_r.end(old_fml:a)) = fml:v}",
        "<<<\n\t        unsigned __old_size = `fml:a`.size();\n\t        `fml:a`.resize(`fml:s`);\n\t        for (unsigned i = __old_size; i < (unsigned)`fml:s`; i++)\n\t            `fml:a`[i] = v;\n            >>>",
        "{assert ~http_request_file.pending(fml:c); http_request_file.pending(fml:c) := true}",
        "assert quic_packet_coal_0rtt.retired_cids.end(fml:a) = 0",
        "{}",
        "{receiving_resetRecvd(fml:id) := false; receiving_resetRead(fml:id) := true}",
        "<<<\n\t        if (0 <= `fml:x` && `fml:x` < (`vector[tls.psk_identity].domain`)`fml:a`.size()) \n\t            `fml:y` = `fml:a`[`fml:x`];\n\t    >>>",
        "{assert forged_quic_packet_vn.arr.end(fml:a) = forged_quic_packet_vn.arr.end(old_fml:a); assert forged_quic_packet_vn.arr.value(fml:a,X) = (fml:y if (X = fml:x) else forged_quic_packet_vn.arr.value(old_fml:a,X))}",
        "{assert replayed_quic_packet_0rtt.arr.end(fml:a) = replayed_quic_packet_0rtt.arr.end(old_fml:a); assert replayed_quic_packet_0rtt.arr.value(fml:a,X) = (fml:y if (X = fml:x) else replayed_quic_packet_0rtt.arr.value(old_fml:a,X))}",
        "<<<\n\t    `quic_ser` ser;\n\t    __ser(ser,x);\n\t    y.resize(ser.res.size());\n\t    for (unsigned i = 0; i < ser.res.size(); i++)\n\t        y[i] = (unsigned char) ser.res[i];\n//\t    std::copy(ser.res.begin(),ser.res.end(),y.begin());\n\t    >>>",
        "{}",
        "assert tls.handshakes.end(fml:a) = fml:s & tls.handshakes.value(fml:a,X) = fml:y",
        "assert fml:s = frame.ack.range.arr.end(fml:a)",
        "{}",
        "{server.enc_level := quic_packet_type.initial; ip.endpoint.protocol(server.ep) := ip.udp; ip.endpoint.addr(server.ep) := server_addr; ip.endpoint.port(server.ep) := server_port; if ip.endpoint.addr(server.ep) = 0x7f000001 | is_mim {ip.endpoint.interface(server.ep) := ip.lo}\nelse {ip.endpoint.interface(server.ep) := ip.ivy}}",
        "<<<\n                if ((`replayed_quic_packet_0rtt.idx`)`fml:a`.size() > 0)\n                    `fml:res` = `fml:a`.back();\n            >>>",
        "{}",
        "<<<\n    val.val = 0;\n    for (unsigned i = 0; i < bytes.size(); i++)\n        val.val = (val.val << 8) + bytes[i];\n    >>>",
        "fml:y := fml:x + 1",
        "assert false",
        "assert arr_pkt_num_s.value(fml:a,fml:x) = fml:y",
        "<<<\n\t        unsigned __old_size = `fml:a`.size();\n\t        `fml:a`.resize(`fml:s`);\n\t        for (unsigned i = __old_size; i < (unsigned)`fml:s`; i++)\n\t            `fml:a`[i] = v;\n            >>>",
        "<<<\n                for (unsigned i = 0; i < `fml:a`.size()/2; i++) {\n                    std::swap(`fml:a`[i],`fml:a`[`fml:a`.size()-i-1]);\n                }\n            >>>",
        "{}",
        "{}",
        "{}",
        "<<<\n                for (unsigned i = 0; i < `fml:b`.size(); i++)\n\t            `fml:a`.push_back(`fml:b`[i]);\n            >>>",
        "{assert tls_extensions.end(fml:a) = fml:s; assert 0:tls_extensions.domain <= X & X < tls_extensions.end(old_fml:a) -> tls_extensions.value(fml:a,X) = tls_extensions.value(old_fml:a,X); assert tls_extensions.end(old_fml:a) <= X & X < fml:s -> tls_extensions.value(fml:a,X) = fml:v}",
        "<<<\n\t        `fml:a`.resize(`fml:s`);\n\t        for (unsigned i = 0; i < `fml:s`; i++)\n\t            `fml:a`[i] = y;\n\t    >>>",
        "assert 0:stream_pos <= fml:x & fml:x < stream_data.end(fml:a)",
        "call enqueue_frame(fml:scid, fml:f, fml:e, false)",
        "<<<\n                for (unsigned i = 0; i < `fml:b`.size(); i++)\n\t            `fml:a`.push_back(`fml:b`[i]);\n            >>>",
        "{}",
        "<<<\n\t        `fml:a`.push_back(`fml:v`);\n            >>>",
        "assert fml:s = arr_pkt_num_r.end(fml:a)",
        "assert forged_quic_packet_retry.retired_cids.end(fml:a) = fml:s & forged_quic_packet_retry.retired_cids.value(fml:a,X) = fml:y",
        "assert vector[tls.psk_identity].end(fml:a) = 0",
        "{}",
        "<<<\n        is_rtt = true;\n        uint8_t *bytes;\n        int bbsize = 0;\n        std::cerr << \"XXXXXXXXXXXX\"  << \"\\n\";\n        bbsize = get_session_ticket_size();\n        bytes = (uint8_t*) malloc(bbsize * sizeof(uint8_t));\n        get_session_ticket(bytes,bbsize); \n        ptls_iovec_t ticket_psk; \n        vec_to_ptls_iovec(ticket_psk,bytes,bbsize);\n\n        ptls_context_t* ctx;\n        ctx = new ptls_context_t;\n        memset(ctx, 0, sizeof(ptls_context_t));\n        ctx->random_bytes = ptls_openssl_random_bytes;\n        ctx->key_exchanges = picotls_key_exchanges; \n        ctx->cipher_suites = picotls_cipher_suites; \n        ctx->send_change_cipher_spec = 0;\n        // ctx->hkdf_label_prefix = QUIC_LABEL_QUIC_BASE;\n        ctx->hkdf_label_prefix__obsolete = NULL;\n        \n        //ctx->update_traffic_key = new ptls_update_traffic_key_t;\n        ctx->update_traffic_key = (ptls_update_traffic_key_t *)malloc(sizeof(ptls_update_traffic_key_t));\n        memset(ctx->update_traffic_key, 0, sizeof(ptls_update_traffic_key_t));\n        ctx->update_traffic_key->cb = quic_update_traffic_key_cb;\n        \n        //ctx->on_extension = new ptls_on_extension_t;\n        ctx->on_extension = (ptls_on_extension_t *)malloc(sizeof(ptls_on_extension_t));\n        memset(ctx->on_extension, 0, sizeof(ptls_on_extension_t));\n        ctx->on_extension->cb = tls_on_extension_cb;\n\n        //ctx->client_mode = !is_server;\n    \n        ctx->require_client_authentication = 0; \n\n        ctx->get_time = &ptls_get_time;\n\n        const char * is_zrtt = getenv(\"ZERORTT_TEST\");\n        if(is_zrtt == NULL){\n            ctx->ticket_lifetime = 0; // no ticket? was: 100000; /* 100,000 seconds, a bit more than one day */\n            ctx->require_dhe_on_psk = 1;\n            ctx->max_early_data_size = 0xFFFFFFFF;\n            ctx->omit_end_of_early_data = 1;\n        }\n        else {\n            std::cerr << \"PROUT \" << is_zrtt << std::endl;\n            ctx->ticket_lifetime = 60 * 60 * 24;\n            ctx->require_dhe_on_psk = 1;\n            ctx->max_early_data_size = 0xFFFFFFFF;\n            ctx->omit_end_of_early_data = 1;\n        }\n\n       // ctx->use_exporter = 1; // master secrets should be recorded\n       \n        ptls_handshake_properties_t *handshake_properties = new ptls_handshake_properties_t; \n        memset(handshake_properties, 0, sizeof(ptls_handshake_properties_t));\n        handshake_properties->collect_extension = tls_collect_extensions_cb;\n        handshake_properties->collected_extensions = tls_collected_extensions_cb;\n  \n        ptls_iovec_t *alpn_vec = new(ptls_iovec_t);  // TODO: will leak this\n        \n        // h3-x == HTTP/3 over QUIC \n        // hq-x == HTTP/0.9 over QUIC\n        alpn_vec->base = (uint8_t*) \"hq-interop\";\n        if(const char* env_p = std::getenv(\"TEST_ALPN\")) { \n            std::cerr << \"TEST_ALPN \" << env_p << std::endl;\n            alpn_vec->base = (uint8_t*) env_p;\n        }\n\n        alpn_vec->len = strlen((char *)(alpn_vec->base));\n        handshake_properties->client.negotiated_protocols.count = 1;\n        handshake_properties->client.negotiated_protocols.list  = alpn_vec;\n\n        ptls_raw_extension_t *ptls_exts = new ptls_raw_extension_t[e.size()+he.size()];\n        for (unsigned i = 0; i < e.size(); i++) {\n            `tls_ser` ser;\n\t        std::cerr << \"etype =\" << std::endl;  \n            __ser(ser,e[i]);\n            unsigned etype = (((unsigned char)(ser.res[0])) << 8) + ((unsigned char)(ser.res[1]));\n            unsigned len = (((unsigned char)(ser.res[2])) << 8) + ((unsigned char)(ser.res[3]));\n            unsigned char *data = new unsigned char[ser.res.size()-4];\n            std::copy(ser.res.begin()+4,ser.res.end(),data);\n            ptls_exts[i].type = etype;\n            std::cerr << \"etype =\" << etype << std::endl;  \n            ptls_exts[i].data.base = data;\n            //std::cerr << \"data =\" << data << std::endl;  \n            ptls_exts[i].data.len = len;\n            std::cerr << \"len =\" << len << std::endl;  \n            // int eres = gnutls_session_ext_register (session, \"ext_name\", etype,\n            //   GNUTLS_EXT_APPLICATION, gnutls_ext_supp_recv_params,\n            //   gnutls_ext_supp_send_params, 0,0,0,0);\n            // if (eres != GNUTLS_E_SUCCESS) {\n            //     std::cerr << \"gnutls_session_ext_register\\n\";\n            //     exit(1);\n            // }\n        }\n        for (unsigned i = 0; i <  he.size(); i++) {\n            `tls_ser` ser;\n\t        std::cerr << \"etype =\" << std::endl;  \n            __ser(ser,he[i]);\n            // unsigned char etype = (((unsigned char)(ser.res[0])));\n            // unsigned len = (((unsigned char)(ser.res[1])) << 16) + (((unsigned char)(ser.res[2])) << 8) + ((unsigned char)(ser.res[3]));\n            // unsigned char *data = new unsigned char[ser.res.size()-4];\n            unsigned etype = (((unsigned char)(ser.res[0])) << 8) + ((unsigned char)(ser.res[1]));\n            unsigned len = (((unsigned char)(ser.res[2])) << 8) + ((unsigned char)(ser.res[3]));\n            unsigned char *data = new unsigned char[ser.res.size()-4];\n            std::copy(ser.res.begin()+4,ser.res.end(),data);\n            ptls_exts[e.size()+i].type = etype;\n            std::cerr << \"etype =\" << etype << std::endl;  \n            ptls_exts[e.size()+i].data.base = data;\n            std::cerr << \"data =\" << data << std::endl;  \n            ptls_exts[e.size()+i].data.len = len;\n            std::cerr << \"len =\" << len << std::endl;  \n            // int eres = gnutls_session_ext_register (session, \"ext_name\", etype,\n            //   GNUTLS_EXT_APPLICATION, gnutls_ext_supp_recv_params,\n            //   gnutls_ext_supp_send_params, 0,0,0,0);\n            // if (eres != GNUTLS_E_SUCCESS) {\n            //     std::cerr << \"gnutls_session_ext_register\\n\";\n            //     exit(1);\n            // }\n        }\n        ptls_exts[e.size()+he.size()].type = 0xffff;\n        ptls_exts[e.size()+he.size()].data.base = NULL;\n        ptls_exts[e.size()+he.size()].data.len = 0;\n\n        handshake_properties->additional_extensions = ptls_exts;\n\n        handshake_properties->client.negotiate_before_key_exchange = 0; // 1 = HELLORETRY\n\n        if (ticket_psk.base != NULL && !is_server) {\n            std::cerr << \"ticket_psk \"  <<  ticket_psk.len << \"\\n\";\n            //std::cerr << \"ticket_psk \"  <<  ticket_psk.base << \"\\n\";\n            handshake_properties->client.session_ticket.base = ticket_psk.base;\n            handshake_properties->client.session_ticket.len = ticket_psk.len;\n            size_t m = 0xFFFFFFFF;  //0xFFFFFFFF\n            handshake_properties->client.max_early_data_size = &m;      \n        }\n\n\n        // Read the certificate, if we are a server\n        if (is_server) {\n            /* Read the certificate file */\n            if (ptls_load_certificates(ctx, \"leaf_cert.pem\") != 0) {\n                 std::cerr << \"could not load certificate file leaf_cert.pem\\n\";\n                 exit(1);\n            } else if(set_sign_certificate_from_key_file(\"leaf_cert.key\", ctx)) {\n                std::cerr << \"could not load key file leaf_cert.key\\n\";\n                exit(1);\n            }\n        }\n\n        ptls_t *session;\n        session = ptls_new(ctx,is_server ? 1 : 0);\n        ptls_set_server_name(session, \"servername\", strlen(\"servername\"));\n\n\n        if(const char* env_p = std::getenv(\"TEST_IMPL\")) { \n            std::cerr << \"TEST_IMPL \" << env_p << std::endl;\n            std::cerr << \"TEST_IMPL \" << env_p << std::endl;\n            std::cerr << \"is_server \" << is_server << std::endl;\n            if(strncmp(env_p,\"quic-go\",10) == 0 \n                || strncmp(env_p,\"quiche\",10) == 0 \n                   || strncmp(env_p,\"lsquic\",10) == 0 \n                   || strncmp(env_p,\"quinn\",10) == 0\n                      || strncmp(env_p,\"aioquic\",10) == 0 || true) //TODO ask why sometime ALPN needed\n                if (is_server) {\n                        std::cerr << \"ptls_set_negotiated_protocol\"  << std::endl;\n                        std::cerr << \"ptls_set_negotiated_protocol\"  << std::endl;\n                        ptls_set_negotiated_protocol(session, \n                            (const char*) handshake_properties->client.negotiated_protocols.list[0].base, \n                            handshake_properties->client.negotiated_protocols.list[0].len);\n                }\n                   \n        }\n\n        picotls_connection *s = new picotls_connection(c,session,ctx,*`tls_api.upper.foo.cb`,handshake_properties,is_server);\n        *ptls_get_data_ptr(session) = s;  \n\n        \n\t    `tls_api.upper.foo.cid_map`[c] = s;\n\n        if (!is_server) \n            picotls_do_handshake(s,0,0,0);\n        std::cerr << \"create 0rtt finish\"  << \"\\n\";\n        >>>",
        "fml:res := fml:dst = client.ep | fml:dst = client_alt | fml:dst = client_vn",
        "{assert forged_quic_packet.ptype(fml:pkt) ~= quic_packet_type.zero_rtt & forged_quic_packet.ptype(fml:pkt) ~= quic_packet_type.version_negociation & forged_quic_packet.ptype(fml:pkt) ~= quic_packet_type.retry; local loc:dcid {loc:dcid := forged_quic_packet.dst_cid(fml:pkt); local loc:scid {loc:scid := forged_quic_packet.src_cid(fml:pkt); if cid_mapped(loc:dcid) {loc:dcid := cid_to_aid(loc:dcid)}; local loc:0 {call loc:0 := tls_api.upper.get_old_new_token; assert stream_data.end(forged_quic_packet.token(fml:pkt)) ~= 0 -> retry_sent(client_initial_rcid) | retry_recv(loc:scid) | forged_quic_packet.token(fml:pkt) = loc:0}; if (fml:src = client_alt | fml:dst = client_alt) & nclients = 1 {migration_done := true}; assert connected(loc:dcid) | forged_quic_packet.ptype(fml:pkt) = quic_packet_type.initial & is_client(loc:scid) & loc:dcid = nonce_cid(loc:scid); local loc:0 {call loc:0 := forged_quic_packet.long(fml:pkt); if loc:0 {assert connected(loc:dcid) -> connected_to(loc:dcid) = loc:scid}\nelse {loc:scid := connected_to(loc:dcid)}}; if retry_sent(loc:dcid) & ~_generating & ~zero_length_token & forged_quic_packet.ptype(fml:pkt) = quic_packet_type.initial {assert loc:dcid = client_initial_rcid}; assert forged_quic_packet.ptype(fml:pkt) = queued_level(loc:scid); if _generating {assert forged_quic_packet.seq_num(fml:pkt) = last_pkt_num(loc:scid,forged_quic_packet.ptype(fml:pkt)) + 0x1}; last_pkt_num(loc:scid,forged_quic_packet.ptype(fml:pkt)) := forged_quic_packet.seq_num(fml:pkt); assert ~sent_pkt(loc:scid,forged_quic_packet.ptype(fml:pkt),forged_quic_packet.seq_num(fml:pkt)); sent_pkt(loc:scid,forged_quic_packet.ptype(fml:pkt),forged_quic_packet.seq_num(fml:pkt)) := true; assert num_queued_frames(loc:scid) > 0; assert forged_quic_packet.payload(fml:pkt) = queued_frames(loc:scid); local loc:0 {call loc:0 := forged_quic_packet.long(fml:pkt); assert conn_seen(loc:scid) & loc:0 & is_client(loc:scid) -> conn_requested(fml:src,fml:dst,loc:scid)}; assert conn_seen(loc:dcid) -> hi_non_probing_endpoint(loc:dcid,fml:dst); assert ~_generating & ~queued_non_ack(loc:scid) -> ack_credit(loc:scid) > 0; if conn_draining(loc:scid) {assert ~draining_pkt_sent(loc:scid) & queued_close(loc:scid)}}}}",
        "{}",
        "{}",
        "<<<\n\t        if (`fml:a`.size() > 0) {\n\t            a.pop_back();\n\t        }\n            >>>",
        "{}",
        "{}",
        "<<<\n\t    >>>",
        "fml:y := fml:x - 1",
        "assert forged_quic_packet.retired_cids.value(fml:a,fml:x) = fml:y",
        "fml:y := fml:x + 1",
        "<<<\n\t        unsigned __old_size = `fml:a`.size();\n\t        `fml:a`.resize(`fml:s`);\n\t        for (unsigned i = __old_size; i < (unsigned)`fml:s`; i++)\n\t            `fml:a`[i] = v;\n            >>>",
        "<<<\n\t        if (0 <= `fml:x` && `fml:x` < (`quic_packet_retry.idx`)`fml:a`.size()) \n\t            `fml:y` = `fml:a`[`fml:x`];\n\t    >>>",
        "{}",
        "{}",
        "assert vector[tls.psk_identity].end(fml:a) = fml:s & vector[tls.psk_identity].value(fml:a,X) = fml:y",
        "<<< res = (x >> 8) & 0xff; >>>",
        "<<<\n            const char * session_file = getenv(\"active_connection_id_limit\");\n            FILE *fp;\n            size_t len = 0;\n            ssize_t read;\n            char * line = NULL;\n            if(session_file != NULL) {\n                fp = fopen(session_file,\"r\");\n                read = getline(&line, &len, fp);\n                fclose(fp);\n                bool is_error = false;\n                if(line != NULL) { \n                    i = (uint32_t) std::stoll(line);\n                }\n            }\n        >>>",
        "{}",
        "{}",
        "{}",
        "local loc:dcid {loc:dcid := quic_packet_0rtt.dst_cid(fml:pkt); local loc:0 {call loc:0 := quic_packet_0rtt.long(fml:pkt); local loc:scid {loc:scid := (quic_packet_0rtt.src_cid(fml:pkt) if loc:0 else connected_to(loc:dcid)); if cid_mapped(loc:dcid) {loc:dcid := cid_to_aid(loc:dcid)}; if queued_ack_eliciting(loc:scid) {ack_credit(loc:dcid) := ack_credit(loc:dcid) + 1}; if ~queued_non_ack(loc:scid) {ack_credit(loc:scid) := ack_credit(loc:scid) - 1}; last_pkt_num(loc:scid,quic_packet_0rtt.ptype(fml:pkt)) := quic_packet_0rtt.seq_num(fml:pkt); if quic_packet_0rtt.ptype(fml:pkt) = quic_packet_type.zero_rtt & ~_generating {connected(the_cid) := true; connected(loc:scid) := true; connected_to(the_cid) := loc:scid; connected_to(loc:scid) := the_cid}; zero_rtt_sent := true; call queued_frames_rtt(loc:scid) := frame.arr.empty; queued_non_probing(loc:scid) := false; queued_non_ack(loc:scid) := false; queued_close(loc:scid) := false; num_queued_frames_rtt(loc:scid) := 0:frame.idx; queued_ack_eliciting(loc:scid) := false}}}",
        "assert tls_hand_extensions.end(fml:a) = fml:s & tls_hand_extensions.value(fml:a,X) = fml:y",
        "{assert quic_packet_0rtt.arr.end(fml:a) = fml:s; assert 0:quic_packet_0rtt.idx <= X & X < quic_packet_0rtt.arr.end(old_fml:a) -> quic_packet_0rtt.arr.value(fml:a,X) = quic_packet_0rtt.arr.value(old_fml:a,X); assert quic_packet_0rtt.arr.end(old_fml:a) <= X & X < fml:s -> quic_packet_0rtt.arr.value(fml:a,X) = fml:v}",
        "<<<\n                for (unsigned i = 0; i < `fml:b`.size(); i++)\n\t            `fml:a`.push_back(`fml:b`[i]);\n            >>>",
        "<<<\n\t    `quic_ser_vn` ser;\n\t    __ser(ser,x);\n\t    y.resize(ser.res.size());\n\t    for (unsigned i = 0; i < ser.res.size(); i++)\n\t        y[i] = (unsigned char) ser.res[i];\n//\t    std::copy(ser.res.begin(),ser.res.end(),y.begin());\n\t    >>>",
        "<<<\n\t    std::vector<char> buf(y.size());\n\t    std::copy(y.begin(),y.end(),buf.begin());\n\t    `quic_deser_zerortt` des(buf);\n\t    __deser(des,x);\n\t    >>>",
        "{}",
        "fml:y := fml:x - 1",
        "{}",
        "{assert fml:x < fml:y & (fml:x < Y -> fml:y <= Y); assert tls.handshakes.domain.succ(fml:x,fml:y)}",
        "<<<\n\t        `fml:s` = (`forged_quic_packet.idx`) `fml:a`.size();\n\t    >>>",
        "<<<\n    res = 0;\n    if(const char* env_p2 = std::getenv(\"TEST_TYPE\")) { \n      if(strcmp(env_p2, \"server\") == 0 || cond) {\n         if(const char* env_p3 = std::getenv(\"TEST_DCIL\")) {\n            std::cerr << \"TEST_DCIL \" << env_p3 << \"\\n\";\n\t        res = atoi(env_p3);\n         } else \n\t   res = 8;\n      } else \n\t  res = 8;\n    } else \n      res = 8;\n    std::cerr <<  \"dcid_size_pos size: \" <<  res << \"\\n\";\n    >>>",
        "<<<\n\t        if (`fml:a`.size() > 0) {\n\t            a.pop_back();\n\t        }\n            >>>",
        "{}",
        "assert 0:clients.client.idx <= fml:s",
        "fml:y := fml:x + 1",
        "{}",
        "<<<\n\t        if (`fml:a`.size() > 0) {\n\t            a.pop_back();\n\t        }\n            >>>",
        "{assert forged_pkts.end(fml:pkt) > 0; assert mim_agent.nat_configured; assert fml:src ~= fml:dst; assert ~(fml:src = mim_agent.ep_out & fml:dst = mim_agent.ep_in); assert ~(fml:dst = mim_agent.ep_out & fml:src = mim_agent.ep_in); assert ~mim_agent.forward_turn; assert ~packed_forwarded_arr(fml:pkt)}",
        "{}",
        "<<<\n\t        `fml:a`.push_back(`fml:v`);\n            >>>",
        "<<<\n        std::cerr << \"decrypt_cipher start \" << \"\\n\";\n\t    picotls_connection *s = `tls_api.upper.foo.cid_map`[c];\n        ptls_cipher_context_t *pn_enc = (ptls_cipher_context_t *)(s->crypto_context[l].pn_dec);\n        encrypt_symm(pn_enc,cipher,iv,clear);\n        std::cerr << \"decrypt_cipher end \" << \"\\n\";\n\n        >>>",
        "assert 0:prot.idx <= fml:x & fml:x < prot.arr.end(fml:a)",
        "{}",
        "assert servers.server.arr.value(fml:a,fml:x) = fml:y",
        "<<<\n\t    >>>",
        "{}",
        "{}",
        "second_server.tls_id := fml:e",
        "{fml:ok := true; local loc:max {loc:max := 0:stream_pos; local loc:tp {loc:tp := trans_params(fml:scid); if active_connection_id_limit.is_set(loc:tp) {loc:max := active_connection_id_limit.stream_pos_32(active_connection_id_limit.value(loc:tp)); fml:ok := fml:count <= loc:max}}}}",
        "{}",
        "{}",
        "{}",
        "{}",
        "{}",
        "assert quic_packet_vn.arr.value(fml:a,fml:x) = fml:y",
        "<<<\n        const char * session_file = getenv(\"initial_max_stream_data_bidi_remote\");\n        FILE *fp;\n        if(session_file != NULL) {\n            fp = fopen(session_file,\"w\");\n            fprintf(fp, \"%llu\", i);\n            fclose(fp);\n        }\n\n        >>>",
        "{assert fml:x < fml:y & (fml:x < Y -> fml:y <= Y); assert frame.ack.range.idx.succ(fml:x,fml:y)}",
        "{}",
        "assert 0:forged_quic_packet_retry.idx <= fml:x & fml:x < forged_quic_packet_retry.arr.end(fml:a)",
        "assert 0:tls_extensions.domain <= fml:x & fml:x < tls_extensions.end(fml:a)",
        "mim_agent.ep_in := fml:e",
        "local loc:0 {call loc:0 := stream_data.empty; local loc:early_data_end {loc:early_data_end := loc:0; local loc:0 {call loc:0 := tls_id_to_dst(fml:tls_id); call show_biatch(loc:0)}; call loc:early_data_end := stream_data.append(loc:early_data_end, 0xff:byte); call loc:early_data_end := stream_data.append(loc:early_data_end, 0xff:byte); call loc:early_data_end := stream_data.append(loc:early_data_end, 0xff:byte); call loc:early_data_end := stream_data.append(loc:early_data_end, 0xff:byte); local loc:e {loc:e := (quic_packet_type.initial if (fml:lev = 0) else (quic_packet_type.handshake if (fml:lev = 2) else quic_packet_type.zero_rtt)); if stream_data.value(fml:bytes,0) = 0x4 & stream_data.segment(fml:bytes,stream_data.end(fml:bytes) - 4,stream_data.end(fml:bytes)) = loc:early_data_end {loc:e := quic_packet_type.one_rtt}; local loc:0 {call loc:0 := tls_id_to_cid(fml:tls_id); local loc:scid {loc:scid := loc:0; local loc:0,loc:1 {call loc:0 := tls_id_to_src(fml:tls_id); call loc:1 := tls_id_to_dst(fml:tls_id); call tls_send_event(loc:0, loc:1, loc:scid, 0:cid, fml:bytes, crypto_data_end(loc:scid,loc:e), loc:e, fml:tls_id)}}}}}}",
        "{}",
        "{}",
        "{}",
        "assert 0:frame.idx <= fml:x & fml:x < frame.arr.end(fml:a)",
        "{}",
        "{assert quic_packet_0rtt.arr.end(fml:a) = quic_packet_0rtt.arr.end(old_fml:a); assert quic_packet_0rtt.arr.value(fml:a,X) = (fml:y if (X = fml:x) else quic_packet_0rtt.arr.value(old_fml:a,X))}",
        "assert 0:vector[tls.compression_method].domain <= fml:x & fml:x < vector[tls.compression_method].end(fml:a)",
        "<<<\n                if ((`vector[tls.cipher_suite].domain`)`fml:a`.size() > 0)\n                    `fml:res` = `fml:a`.back();\n            >>>",
        "{}",
        "<<<\n\t        `fml:s` = (`tls_hand_extensions.domain`) `fml:a`.size();\n\t    >>>",
        "<<<\n                if ((`forged_quic_packet_vn.idx`)`fml:a`.size() > 0)\n                    `fml:res` = `fml:a`.back();\n            >>>",
        "{unknown_transport_parameter.is_set(fml:s) := true; unknown_transport_parameter.value(fml:s) := fml:p}",
        "{assert quic_packet.arr.end(fml:a) = quic_packet.arr.end(old_fml:a); assert quic_packet.arr.value(fml:a,X) = (fml:y if (X = fml:x) else quic_packet.arr.value(old_fml:a,X))}",
        "{initial_max_data.is_set(fml:s) := true; initial_max_data.value(fml:s) := fml:p}",
        "<<<\n\t        if (0 <= `fml:x` && `fml:x` < (`replayed_quic_packet_0rtt.idx`)`fml:a`.size()) \n\t            `fml:a`[`fml:x`] = `fml:y`;\n\t    >>>",
        "{assert fml:x < fml:y & (fml:x < Y -> fml:y <= Y); assert tls_hand_extensions.domain.succ(fml:x,fml:y)}",
        "<<<\n                if ((`forged_quic_packet_retry.idx`)`fml:a`.size() > 0)\n                    `fml:res` = `fml:a`.back();\n            >>>",
        "{}",
        "call enqueue_frame(fml:scid, fml:f, fml:e, false)",
        "{}",
        "{}",
        "<<<\n\t        if (0 <= `fml:x` && `fml:x` < (`forged_quic_packet.idx`)`fml:a`.size()) \n\t            `fml:y` = `fml:a`[`fml:x`];\n\t    >>>",
        "{initial_max_stream_data_bidi_remote.is_set(fml:s) := true; initial_max_stream_data_bidi_remote.value(fml:s) := fml:p}",
        "{}",
        "{}",
        "assert fml:s = quic_packet.arr.end(fml:a)",
        "{assert fml:x < fml:y & (fml:x < Y -> fml:y <= Y); assert idx_r.succ(fml:x,fml:y)}",
        "{assert vector[transport_parameter].end(fml:a) > vector[transport_parameter].end(old_fml:a) & ~(vector[transport_parameter].end(old_fml:a) < X & X < vector[transport_parameter].end(fml:a)); assert 0:vector[transport_parameter].domain <= X & X < vector[transport_parameter].end(old_fml:a) -> vector[transport_parameter].value(fml:a,X) = vector[transport_parameter].value(old_fml:a,X); assert vector[transport_parameter].value(fml:a,vector[transport_parameter].end(old_fml:a)) = fml:v}",
        "{}",
        "assert 0:forged_quic_packet_retry.idx < fml:x",
        "{assert mim_agent.nat_configured; assert fml:src ~= fml:dst; assert ~(fml:src = mim_agent.ep_out & fml:dst = mim_agent.ep_in); assert ~(fml:dst = mim_agent.ep_out & fml:src = mim_agent.ep_in); assert ~mim_agent.forward_turn; assert stream_data.end(mim_agent.ppkt_to_be_forge) > 0; assert forged_protected_quic_packet.ptype(fml:pkt) = forged_protected_quic_packet.ptype(mim_agent.ppkt_to_be_forge_parsed); assert forged_protected_quic_packet.dst_cid(fml:pkt) = forged_protected_quic_packet.dst_cid(mim_agent.ppkt_to_be_forge_parsed); assert forged_protected_quic_packet.src_cid(fml:pkt) = forged_protected_quic_packet.src_cid(mim_agent.ppkt_to_be_forge_parsed); assert forged_protected_quic_packet.protected_payload(fml:pkt) = forged_protected_quic_packet.protected_payload(mim_agent.ppkt_to_be_forge_parsed)}",
        "<<<\n    scid_h = scil;\n    dcid_h = dcil;\n    >>>",
        "if _generating {assert fml:scid = the_cid; assert frame.crypto.length(fml:f) > 0; assert frame.crypto.offset(fml:f) = crypto_length(fml:scid,fml:e); assert frame.crypto.length(fml:f) = crypto_data_end(fml:scid,fml:e) - frame.crypto.offset(fml:f)}",
        "{}",
        "{}",
        "{}",
        "assert forged_quic_packet_retry.retired_cids.value(fml:a,fml:x) = fml:y",
        "{}",
        "<<<\n\t    >>>",
        "{}",
        "{assert vector[tls.compression_method].end(fml:a) = vector[tls.compression_method].end(old_fml:a); assert vector[tls.compression_method].value(fml:a,X) = (fml:y if (X = fml:x) else vector[tls.compression_method].value(old_fml:a,X))}",
        "{}",
        "<<<\n                for (unsigned i = 0; i < `fml:a`.size()/2; i++) {\n                    std::swap(`fml:a`[i],`fml:a`[`fml:a`.size()-i-1]);\n                }\n            >>>",
        "assert 0:tls_extensions.domain < fml:x",
        "second_client.ep := fml:e",
        "<<<\n\t        unsigned __old_size = `fml:a`.size();\n\t        `fml:a`.resize(`fml:s`);\n\t        for (unsigned i = __old_size; i < (unsigned)`fml:s`; i++)\n\t            `fml:a`[i] = v;\n            >>>",
        "<<<\n\t        `fml:s` = (`quic_packet_0rtt.idx`) `fml:a`.size();\n\t    >>>",
        "{}",
        "assert vector[tls.handshake].end(fml:a) = 0",
        "{}",
        "assert fml:s = vector[tls.extension].end(fml:a)",
        "<<<\n\t        if (`fml:a`.size() > 0) {\n\t            a.pop_back();\n\t        }\n            >>>",
        "{}",
        "<<<\n\t        `fml:a`.push_back(`fml:v`);\n            >>>",
        "call enqueue_frame(fml:scid, fml:f, fml:e, false)",
        "<<<\n\t        `fml:a`.resize(`fml:s`);\n\t        for (unsigned i = 0; i < `fml:s`; i++)\n\t            `fml:a`[i] = y;\n\t    >>>",
        "{stateless_reset_token.is_set(fml:s) := true; stateless_reset_token.value(fml:s) := fml:p}",
        "{}",
        "<<<\n\t        `fml:a`.resize(`fml:s`);\n\t        for (unsigned i = 0; i < `fml:s`; i++)\n\t            `fml:a`[i] = y;\n\t    >>>",
        "<<<\n\t        if (0 <= `fml:x` && `fml:x` < (`quic_packet.idx`)`fml:a`.size()) \n\t            `fml:y` = `fml:a`[`fml:x`];\n\t    >>>",
        "<<<\n                for (unsigned i = 0; i < `fml:a`.size()/2; i++) {\n                    std::swap(`fml:a`[i],`fml:a`[`fml:a`.size()-i-1]);\n                }\n            >>>",
        "<<<\n                if ((`tls.handshakes.domain`)`fml:a`.size() > 0)\n                    `fml:res` = `fml:a`.back();\n            >>>",
        "<<<\n\t    >>>",
        "{}",
        "<<<\n\t        `fml:a`.push_back(`fml:v`);\n            >>>",
        "{}",
        "assert replayed_quic_packet_0rtt.arr.value(fml:a,fml:x) = fml:y",
        "assert 0:frame.ack_ecn.range.idx <= fml:x & fml:x < frame.ack_ecn.range.arr.end(fml:a)",
        "attacker.tls_id := fml:e",
        "{}",
        "{}",
        "if _generating {assert fml:scid = the_cid}",
        "assert forged_pkts.end(fml:a) = fml:s & forged_pkts.value(fml:a,X) = fml:y",
        "assert fml:s = forged_protected_quic_packet.arr.end(fml:a)",
        "{}",
        "{}",
        "<<<\n        const char * session_file = getenv(\"initial_max_stream_data_uni\");\n        FILE *fp;\n        if(session_file != NULL) {\n            fp = fopen(session_file,\"w\");\n            fprintf(fp, \"%llu\", i);\n            fclose(fp);\n        }\n\n        >>>",
        "assert stream_data.value(fml:a,fml:x) = fml:y",
        "if _generating {assert conn_total_data(the_cid) > 30; assert fml:scid = the_cid; assert frame.connection_close.err_code(fml:f) = 0}\nelse {assert is_no_error; call _finalize}",
        "assert forged_quic_packet_vn.arr.value(fml:a,fml:x) = fml:y",
        "<<<\n            const char * session_file = getenv(\"SAVED_PACKET\");\n            std::cerr << \"SAVED_PACKET 5b \" << session_file<< \"\\n\";\n            FILE *fp;\n            if(session_file != NULL) {\n                fp = fopen(session_file,\"r\");\n                read = getline(&line, &len, fp);\n                fclose(fp);\n                bool is_error = false;\n                if(line != NULL) { \n                    std::cerr << \"SAVED_PACKET 1 \" << line << std::endl;\n                    int hex_len = strlen(line);\n                    std::cerr << \"SAVED_PACKET hex_len \" << hex_len << std::endl;\n                    uint8_t secret[hex_len/2];\n                    for (int j = 0; j < hex_len/2; j++) {\n                        int a = ws_xton(line[j*2]);\n                        int b = ws_xton(line[j*2 + 1]);\n                        if (a == -1 || b == -1) {\n                            is_error = true;\n                            std::cerr << \"a ERROR \" << line[j*2] << std::endl;\n                            std::cerr << \"b ERROR \" << line[j*2 + 1] << std::endl;\n                            std::cerr << \"SAVED_PACKET ERROR \" << std::endl;\n                            break;\n                        }\n                        secret[j] = a << 4 | b;\n                    }  \n                    std::cerr << \"SAVED_PACKET TEST_ST 2 \" << secret << std::endl;\n                    for(int i = 0; i < hex_len/2 && !is_error; i++)\n                        ppkt.push_back(secret[i]);\n                }\n            }        \n            >>>",
        "<<<\n\t        unsigned __old_size = `fml:a`.size();\n\t        `fml:a`.resize(`fml:s`);\n\t        for (unsigned i = __old_size; i < (unsigned)`fml:s`; i++)\n\t            `fml:a`[i] = v;\n            >>>",
        "{}",
        "{}",
        "<<<\n                if ((`quic_packet_0rtt.idx`)`fml:a`.size() > 0)\n                    `fml:res` = `fml:a`.back();\n            >>>",
        "{}",
        "{}",
        "local loc:dcid {loc:dcid := quic_packet_vn.dst_cid(fml:pkt); local loc:scid {loc:scid := quic_packet_vn.src_cid(fml:pkt); if cid_mapped(loc:dcid) {loc:dcid := cid_to_aid(loc:dcid)}; if fml:src = client_alt | fml:dst = client_alt {migration_done := true}; assert quic_packet_vn.ptype(fml:pkt) = quic_packet_type.version_negociation; assert ~negocation_of_version_initiated(fml:src)}}",
        "{retry_source_connection_id.is_set(fml:s) := true; retry_source_connection_id.value(fml:s) := fml:p}",
        "{}",
        "<<<\n\t        if (0 <= `fml:x` && `fml:x` < (`quic_packet.idx`)`fml:a`.size()) \n\t            `fml:a`[`fml:x`] = `fml:y`;\n\t    >>>",
        "{}",
        "{assert arr_pkt_num_s.end(fml:a) > arr_pkt_num_s.end(old_fml:a) & ~(arr_pkt_num_s.end(old_fml:a) < X & X < arr_pkt_num_s.end(fml:a)); assert 0:jdx_s <= X & X < arr_pkt_num_s.end(old_fml:a) -> arr_pkt_num_s.value(fml:a,X) = arr_pkt_num_s.value(old_fml:a,X); assert arr_pkt_num_s.value(fml:a,arr_pkt_num_s.end(old_fml:a)) = fml:v}",
        "{}",
        "{}",
        "assert fml:s = frame.ack_ecn.range.arr.end(fml:a)",
        "{}",
        "{}",
        "<<<\n    is_padding = true;\n    for (unsigned i = 0; i < spkt.size(); i++)\n\tis_padding = is_padding && (spkt[i] == 0);\n    >>>",
        "<<<\n\t        `fml:a`.resize(`fml:s`);\n\t        for (unsigned i = 0; i < `fml:s`; i++)\n\t            `fml:a`[i] = y;\n\t    >>>",
        "{}",
        "<<<\n    scid_mim = scil;\n    dcid_mim = dcil;\n    >>>",
        "{}",
        "assert 0:vector[tls.handshake].domain <= fml:x & fml:x < vector[tls.handshake].end(fml:a)",
        "{}",
        "<<<\n\t        `fml:a`.resize(`fml:s`);\n\t        for (unsigned i = 0; i < `fml:s`; i++)\n\t            `fml:a`[i] = y;\n\t    >>>",
        "{}",
        "local loc:dcid {loc:dcid := quic_packet_vn.dst_cid(fml:pkt); local loc:scid {loc:scid := quic_packet_vn.src_cid(fml:pkt); if cid_mapped(loc:dcid) {loc:dcid := cid_to_aid(loc:dcid)}; if ~_generating {conn_requested(fml:src,fml:dst,loc:scid) := false; conn_requested(fml:src,fml:dst,loc:dcid) := false; connected(loc:dcid) := false; connected(loc:scid) := false; conn_seen(loc:dcid) := false; conn_seen(loc:scid) := false; local loc:old_cid {loc:old_cid := the_cid; call the_cid := inc_cid(loc:old_cid, 2:stream_pos); server_cid := 0x0:cid; connected(the_cid) := false; connected(server_cid) := false; conn_seen(the_cid) := false; conn_seen(server_cid) := false; local loc:0 {call loc:0 := tls_extensions.empty; local loc:extns {loc:extns := loc:0; local loc:0 {call loc:0 := make_transport_parameters; call loc:extns := tls_extensions.append(loc:extns, loc:0)}; call tls_api.upper.create(0:tls_api.id, false, loc:extns); conn_requested(fml:dst,fml:src,the_cid) := true}}}}; negocation_of_version_initiated(fml:src) := true}}",
        "assert 0:quic_packet_coal_0rtt.idx <= fml:s",
        "{assert fml:x < fml:y & (fml:x < Y -> fml:y <= Y); assert vector[transport_parameter].domain.succ(fml:x,fml:y)}",
        "assert 0:quic_packet.idx <= fml:x & fml:x < quic_packet.arr.end(fml:a)",
        "{}",
        "<<<\n\t    `quic_ser` ser;\n\t    __ser(ser,x);\n\t    y.resize(ser.res.size());\n\t    for (unsigned i = 0; i < ser.res.size(); i++)\n\t        y[i] = (unsigned char) ser.res[i];\n//\t    std::copy(ser.res.begin(),ser.res.end(),y.begin());\n\t    >>>",
        "local loc:imsdbl {initial_max_stream_data_bidi_local.stream_pos_32(loc:imsdbl) := max_stream_data; local loc:imd {call initial_max_data.stream_pos_32(loc:imd) := random_stream_pos(1:stream_pos, 0xFFFFFFF:stream_pos); local loc:it {call max_idle_timeout.seconds_16(loc:it) := random_microsecs(0:microsecs, 0xFFFFFFF:microsecs); local loc:imsdbr {initial_max_stream_data_bidi_remote.stream_pos_32(loc:imsdbr) := max_stream_data; local loc:imsdu {call initial_max_stream_data_uni.stream_pos_32(loc:imsdu) := random_stream_pos(1:stream_pos, 0xFFFFFFF:stream_pos); call quic_transport_parameters.transport_parameters(fml:tp) := vector[transport_parameter].append(quic_transport_parameters.transport_parameters(fml:tp), loc:imsdbl); call quic_transport_parameters.transport_parameters(fml:tp) := vector[transport_parameter].append(quic_transport_parameters.transport_parameters(fml:tp), loc:imd); call quic_transport_parameters.transport_parameters(fml:tp) := vector[transport_parameter].append(quic_transport_parameters.transport_parameters(fml:tp), loc:it); call quic_transport_parameters.transport_parameters(fml:tp) := vector[transport_parameter].append(quic_transport_parameters.transport_parameters(fml:tp), loc:imsdbr); call quic_transport_parameters.transport_parameters(fml:tp) := vector[transport_parameter].append(quic_transport_parameters.transport_parameters(fml:tp), loc:imsdu); local loc:icid {initial_source_connection_id.scid(loc:icid) := the_cid; call quic_transport_parameters.transport_parameters(fml:tp) := vector[transport_parameter].append(quic_transport_parameters.transport_parameters(fml:tp), loc:icid); local loc:no_migration {call quic_transport_parameters.transport_parameters(fml:tp) := vector[transport_parameter].append(quic_transport_parameters.transport_parameters(fml:tp), loc:no_migration); local loc:max_streams_bidi {call initial_max_stream_id_bidi.stream_id_16(loc:max_streams_bidi) := random_stream_id(4:stream_id, 0xFFFFFFF:stream_id); call quic_transport_parameters.transport_parameters(fml:tp) := vector[transport_parameter].append(quic_transport_parameters.transport_parameters(fml:tp), loc:max_streams_bidi); local loc:max_streams_uni {call initial_max_stream_id_uni.stream_id_16(loc:max_streams_uni) := random_stream_id(4:stream_id, 0xFFFFFFF:stream_id); call quic_transport_parameters.transport_parameters(fml:tp) := vector[transport_parameter].append(quic_transport_parameters.transport_parameters(fml:tp), loc:max_streams_uni)}}}}}}}}}",
        "assert arr_streamid_r.end(fml:a) = fml:s & arr_streamid_r.value(fml:a,X) = fml:y",
        "fml:y := fml:x - 1",
        "{assert replayed_quic_packet_0rtt.retired_cids.end(fml:a) = fml:s; assert 0:replayed_quic_packet_0rtt.idx <= X & X < replayed_quic_packet_0rtt.retired_cids.end(old_fml:a) -> replayed_quic_packet_0rtt.retired_cids.value(fml:a,X) = replayed_quic_packet_0rtt.retired_cids.value(old_fml:a,X); assert replayed_quic_packet_0rtt.retired_cids.end(old_fml:a) <= X & X < fml:s -> replayed_quic_packet_0rtt.retired_cids.value(fml:a,X) = fml:v}",
        "fml:y := fml:x - 1",
        "{}",
        "<<<\n\t    >>>",
        "{assert connected(fml:dcid) & connected_to(fml:dcid) = fml:scid; assert fml:e = quic_packet_type.one_rtt & established_1rtt_keys(fml:scid); assert num_queued_frames(fml:scid) > 0 -> fml:e = queued_level(fml:scid); assert stream_seen(fml:scid,frame.max_stream_data.id(fml:f)); if ~max_stream_data_set(fml:scid,frame.max_stream_data.id(fml:f)) | frame.max_stream_data.pos(fml:f) > max_stream_data_val(fml:scid,frame.max_stream_data.id(fml:f)) {max_stream_data_set(fml:scid,frame.max_stream_data.id(fml:f)) := true; max_stream_data_val(fml:scid,frame.max_stream_data.id(fml:f)) := frame.max_stream_data.pos(fml:f)}}",
        "{}",
        "local loc:code {loc:code := bvand(0xc0:byte,stream_data.value(fml:pkt,fml:pos)); if loc:code = 0 {fml:len := 1:stream_pos}\nelse {if loc:code = 0x40 {fml:len := 2:stream_pos}\nelse {if loc:code = 0x80 {fml:len := 4:stream_pos}\nelse {fml:len := 8:stream_pos}}}}",
        "{}",
        "local loc:0 {call loc:0 := socket_endpoint(fml:host, fml:s); local loc:dst {loc:dst := loc:0; local loc:idx {loc:idx := prot.arr.begin(fml:pkts); local loc:0 {call loc:0 := stream_data.empty; local loc:past_data {loc:past_data := loc:0; while loc:idx < prot.arr.end(fml:pkts)\n{local loc:ppkt {loc:ppkt := prot.arr.value(fml:pkts,loc:idx); local loc:0 {call loc:0 := src_tls_id(loc:dst); local loc:tls_id {loc:tls_id := loc:0; local loc:header {loc:header := stream_data.value(loc:ppkt,0); local loc:hdr_type {loc:hdr_type := bfe[0][6](stream_data.value(loc:ppkt,0)); local loc:tt {loc:tt := bvand(loc:hdr_type,0x30); local loc:is_long {loc:is_long := bvand(0x80:byte,loc:header) ~= 0; local loc:version {loc:version := stream_data.segment(loc:ppkt,1,1 + 4); local loc:0 {call loc:0 := bytes_to_version(loc:version); local loc:bversion {loc:bversion := loc:0; local loc:ptype {loc:ptype := bvand(0x30:byte,loc:header); if loc:bversion = 0 & loc:is_long | version_not_found(fml:src) {call loc:past_data := stream_data.extend(loc:past_data, loc:ppkt); call tls_client_version_response(fml:src, loc:dst, loc:past_data)}\nelse {if loc:tt = 0x30 & loc:is_long & loc:bversion ~= 0 {call tls_client_retry_response(fml:src, loc:dst, loc:ppkt)}\nelse {local loc:0 {call loc:0 := reference_pkt_num(loc:ppkt, true); local loc:rnum {loc:rnum := loc:0; local loc:0 {call loc:0 := prot.decrypt(loc:tls_id, loc:rnum, loc:ppkt); local loc:res {loc:res := loc:0; if tls_api.upper.ok(loc:res) {local loc:0 {call loc:0 := is_padding_packet(tls_api.upper.payload(loc:res)); local loc:is_pad {loc:is_pad := loc:0; if loc:is_pad {call padding_packet_event(fml:host, fml:src, loc:dst, loc:ppkt)}\nelse {local loc:0 {call loc:0 := pkt_serdes.from_bytes(tls_api.upper.data(loc:res)); local loc:pkt {loc:pkt := loc:0; local loc:0 {call loc:0 := prot.get_pnum_len(tls_api.upper.data(loc:res)); call quic_packet.seq_num(loc:pkt) := prot.correct_pnum(loc:rnum, quic_packet.seq_num(loc:pkt), loc:0)}; call recv_packet(fml:host, fml:src, loc:dst, loc:pkt); call infer_tls_events(fml:src, loc:dst, loc:pkt); call packet_event(fml:src, loc:dst, loc:pkt)}}}}}}\nelse {call undecryptable_packet_event(fml:host, fml:src, loc:dst, loc:ppkt)}}}}}}}; call loc:idx := prot.idx.next(loc:idx)}}}}}}}}}}}}; version_not_found(fml:src) := false; call show_last_datagram_size(last_datagram_received_size); if ~first_datagram_received & fml:host = endpoint_id.server {assert last_datagram_received_size + 8 > 1200; first_datagram_received := true}; last_datagram_received_size := 0:stream_pos}}}}}",
        "assert quic_packet_coal_0rtt.retired_cids.value(fml:a,fml:x) = fml:y",
        "fml:y := fml:x + 1",
        "fml:res := quic_packet_0rtt.ptype(fml:pkt) ~= quic_packet_type.one_rtt",
        "{}",
        "{}",
        "local loc:0 {call loc:0 := socket_endpoint(fml:host, fml:s); local loc:dst {loc:dst := loc:0; local loc:idx {loc:idx := prot.arr.begin(fml:pkts); local loc:0 {call loc:0 := stream_data.empty; local loc:past_data {loc:past_data := loc:0; while loc:idx < prot.arr.end(fml:pkts)\n{local loc:ppkt {loc:ppkt := prot.arr.value(fml:pkts,loc:idx); local loc:0 {call loc:0 := src_tls_id(loc:dst); local loc:tls_id {loc:tls_id := loc:0; local loc:header {loc:header := stream_data.value(loc:ppkt,0); local loc:hdr_type {loc:hdr_type := bfe[0][6](stream_data.value(loc:ppkt,0)); local loc:tt {loc:tt := bvand(loc:hdr_type,0x30); local loc:is_long {loc:is_long := bvand(0x80:byte,loc:header) ~= 0; local loc:version {loc:version := stream_data.segment(loc:ppkt,1,1 + 4); local loc:0 {call loc:0 := bytes_to_version(loc:version); local loc:bversion {loc:bversion := loc:0; local loc:ptype {loc:ptype := bvand(0x30:byte,loc:header); if loc:bversion = 0 & loc:is_long | version_not_found(fml:src) {call loc:past_data := stream_data.extend(loc:past_data, loc:ppkt); call tls_client_version_response(fml:src, loc:dst, loc:past_data)}\nelse {if loc:tt = 0x30 & loc:is_long & loc:bversion ~= 0 {call tls_client_retry_response(fml:src, loc:dst, loc:ppkt)}\nelse {local loc:0 {call loc:0 := reference_pkt_num(loc:ppkt, true); local loc:rnum {loc:rnum := loc:0; local loc:0 {call loc:0 := prot.decrypt(loc:tls_id, loc:rnum, loc:ppkt); local loc:res {loc:res := loc:0; if tls_api.upper.ok(loc:res) {local loc:0 {call loc:0 := is_padding_packet(tls_api.upper.payload(loc:res)); local loc:is_pad {loc:is_pad := loc:0; if loc:is_pad {call padding_packet_event(fml:host, fml:src, loc:dst, loc:ppkt)}\nelse {local loc:0 {call loc:0 := pkt_serdes.from_bytes(tls_api.upper.data(loc:res)); local loc:pkt {loc:pkt := loc:0; local loc:0 {call loc:0 := prot.get_pnum_len(tls_api.upper.data(loc:res)); call quic_packet.seq_num(loc:pkt) := prot.correct_pnum(loc:rnum, quic_packet.seq_num(loc:pkt), loc:0)}; call recv_packet(fml:host, fml:src, loc:dst, loc:pkt); call infer_tls_events(fml:src, loc:dst, loc:pkt); call packet_event(fml:src, loc:dst, loc:pkt)}}}}}}\nelse {call undecryptable_packet_event(fml:host, fml:src, loc:dst, loc:ppkt)}}}}}}}; call loc:idx := prot.idx.next(loc:idx)}}}}}}}}}}}}; version_not_found(fml:src) := false; call show_last_datagram_size(last_datagram_received_size); if ~first_datagram_received & fml:host = endpoint_id.server {assert last_datagram_received_size + 8 > 1200; first_datagram_received := true}; last_datagram_received_size := 0:stream_pos}}}}}",
        "{assert conn_requested(fml:dst,fml:src,fml:dcid); assert ~connected(fml:dcid) & ~connected(fml:scid)}",
        "assert 0:tls_extensions.domain <= fml:x & fml:x < tls_extensions.end(fml:a)",
        "{stream_seen(fml:scid,frame.stream.id(fml:f)) := true; local loc:offset {loc:offset := (frame.stream.offset(fml:f) if frame.stream.off(fml:f) else 0); local loc:length {loc:length := loc:offset + frame.stream.length(fml:f); if stream_length(fml:dcid,frame.stream.id(fml:f)) < loc:length {conn_total_data(fml:dcid) := conn_total_data(fml:dcid) + loc:length - stream_length(fml:dcid,frame.stream.id(fml:f)); stream_length(fml:dcid,frame.stream.id(fml:f)) := loc:length}; if frame.stream.fin(fml:f) {stream_finished(fml:dcid,frame.stream.id(fml:f)) := true}; if (~zero_rtt_allowed | zero_rtt_sent) & fml:e ~= quic_packet_type.zero_rtt {call enqueue_frame(fml:scid, fml:f, fml:e, false)}\nelse {first_zrtt_pkt := fml:dcid; call enqueue_frame_rtt(fml:scid, fml:f, fml:e, false)}}}}",
        "<<<\n                for (unsigned i = 0; i < `fml:a`.size()/2; i++) {\n                    std::swap(`fml:a`[i],`fml:a`[`fml:a`.size()-i-1]);\n                }\n            >>>",
        "<<<\n\t        unsigned __old_size = `fml:a`.size();\n\t        `fml:a`.resize(`fml:s`);\n\t        for (unsigned i = __old_size; i < (unsigned)`fml:s`; i++)\n\t            `fml:a`[i] = v;\n            >>>",
        "{stream_app_pos(C,S) := 0:stream_pos; stream_app_data_finished(C,S) := false}",
        "<<<\n\t        if (`fml:a`.size() > 0) {\n\t            a.pop_back();\n\t        }\n            >>>",
        "{}",
        "<<<\n\t        if (0 <= `fml:x` && `fml:x` < (`quic_packet_0rtt.idx`)`fml:a`.size()) \n\t            `fml:y` = `fml:a`[`fml:x`];\n\t    >>>",
        "<<<\n                for (unsigned i = 0; i < `fml:a`.size()/2; i++) {\n                    std::swap(`fml:a`[i],`fml:a`[`fml:a`.size()-i-1]);\n                }\n            >>>",
        "<<<\n\t    >>>",
        "<<<\n\t    >>>",
        "assert tls_extensions.end(fml:a) = 0",
        "<<<\n\t        if (0 <= `fml:x` && `fml:x` < (`tls_extensions.domain`)`fml:a`.size()) \n\t            `fml:y` = `fml:a`[`fml:x`];\n\t    >>>",
        "<<<\n\t        unsigned __old_size = `fml:a`.size();\n\t        `fml:a`.resize(`fml:s`);\n\t        for (unsigned i = __old_size; i < (unsigned)`fml:s`; i++)\n\t            `fml:a`[i] = v;\n            >>>",
        "{}",
        "{}",
        "{}",
        "{assert tls_extensions.end(fml:a) > tls_extensions.end(old_fml:a) & ~(tls_extensions.end(old_fml:a) < X & X < tls_extensions.end(fml:a)); assert 0:tls_extensions.domain <= X & X < tls_extensions.end(old_fml:a) -> tls_extensions.value(fml:a,X) = tls_extensions.value(old_fml:a,X); assert tls_extensions.value(fml:a,tls_extensions.end(old_fml:a)) = fml:v}",
        "<<<\n\t        if (0 <= `fml:x` && `fml:x` < (`tls_hand_extensions.domain`)`fml:a`.size()) \n\t            `fml:a`[`fml:x`] = `fml:y`;\n\t    >>>",
        "<<<\n                for (unsigned i = 0; i < `fml:b`.size(); i++)\n\t            `fml:a`.push_back(`fml:b`[i]);\n            >>>",
        "assert 0:index < fml:x",
        "<<<\n                if ((`index`)`fml:a`.size() > 0)\n                    `fml:res` = `fml:a`.back();\n            >>>",
        "call enqueue_frame(fml:scid, fml:f, fml:e, false)",
        "if _generating {assert fml:scid = the_cid}",
        "{assert fml:x < fml:y & (fml:x < Y -> fml:y <= Y); assert vector[tls.compression_method].domain.succ(fml:x,fml:y)}",
        "{if ~stream_frame_restransmitted(fml:id) {sending_send(fml:id) := false; sending_dataSent(fml:id) := true}; call lastest_stream_id_sender(fml:seq) := arr_streamid_s.append(lastest_stream_id_sender(fml:seq), fml:id); call lastest_pkt_num_sender := arr_pkt_num_s.append(lastest_pkt_num_sender, fml:seq)}",
        "{assert fml:y < fml:x & (Y:quic_packet_coal_0rtt.idx < fml:x -> Y <= fml:y); assert quic_packet_coal_0rtt.idx.succ(fml:y,fml:x)}",
        "{}",
        "{}",
        "<<<\n\t        `fml:s` = (`forged_quic_packet_retry.idx`) `fml:a`.size();\n\t    >>>",
        "{}",
        "{}",
        "<<<\n\t        if (0 <= `fml:x` && `fml:x` < (`quic_packet_0rtt.idx`)`fml:a`.size()) \n\t            `fml:a`[`fml:x`] = `fml:y`;\n\t    >>>",
        "{}",
        "assert 0:vector[tls.extension].domain < fml:x",
        "{assert forged_quic_packet_retry.arr.end(fml:a) = forged_quic_packet_retry.arr.end(old_fml:a); assert forged_quic_packet_retry.arr.value(fml:a,X) = (fml:y if (X = fml:x) else forged_quic_packet_retry.arr.value(old_fml:a,X))}",
        "fml:y := fml:x + 1",
        "{assert replayed_quic_packet_0rtt.retired_cids.end(fml:a) > replayed_quic_packet_0rtt.retired_cids.end(old_fml:a) & ~(replayed_quic_packet_0rtt.retired_cids.end(old_fml:a) < X & X < replayed_quic_packet_0rtt.retired_cids.end(fml:a)); assert 0:replayed_quic_packet_0rtt.idx <= X & X < replayed_quic_packet_0rtt.retired_cids.end(old_fml:a) -> replayed_quic_packet_0rtt.retired_cids.value(fml:a,X) = replayed_quic_packet_0rtt.retired_cids.value(old_fml:a,X); assert replayed_quic_packet_0rtt.retired_cids.value(fml:a,replayed_quic_packet_0rtt.retired_cids.end(old_fml:a)) = fml:v}",
        "assert fml:s = frame.arr.end(fml:a)",
        "{}",
        "assert tls_api.upper.open(fml:c)",
        "assert quic_packet_coal_0rtt.arr.value(fml:a,fml:x) = fml:y",
        "{assert tls_handshake_finished; assert connected(fml:dcid) & connected_to(fml:dcid) = fml:scid; assert fml:e = quic_packet_type.one_rtt & established_1rtt_keys(fml:scid); assert num_queued_frames(fml:scid) > 0 -> fml:e = queued_level(fml:scid); assert ~conn_closed(fml:scid); assert conn_seen(fml:scid)}",
        "{}",
        "{}",
        "assert 0:index <= fml:x & fml:x < cids.end(fml:a)",
        "<<<\n\t        `fml:a`.push_back(`fml:v`);\n            >>>",
        "assert versions_bv.end(fml:a) = 0",
        "<<<\n       srand((unsigned) time(0)); //fixed or random seed ?\n       res = 0;\n       res = ::rand()%32767 + (min+1);\n       std::cerr << \"greater random: \" << res << \"\\n\";\n       >>>",
        "assert forged_quic_packet.arr.value(fml:a,fml:x) = fml:y",
        "{}",
        "assert quic_packet.retired_cids.end(fml:a) = fml:s & quic_packet.retired_cids.value(fml:a,X) = fml:y",
        "{assert ip_endpoints.end(fml:a) = fml:s; assert 0:index <= X & X < ip_endpoints.end(old_fml:a) -> ip_endpoints.value(fml:a,X) = ip_endpoints.value(old_fml:a,X); assert ip_endpoints.end(old_fml:a) <= X & X < fml:s -> ip_endpoints.value(fml:a,X) = fml:v}",
        "{}",
        "{}",
        "{}",
        "{}",
        "{}",
        "{}",
        "{assert fml:x < fml:y & (fml:x < Y -> fml:y <= Y); assert servers.server.idx.succ(fml:x,fml:y)}",
        "<<<\n\t        `fml:a`.push_back(`fml:v`);\n            >>>",
        "<<<\n                for (unsigned i = 0; i < `fml:b`.size(); i++)\n\t            `fml:a`.push_back(`fml:b`[i]);\n            >>>",
        "{assert cids.end(fml:a) > cids.end(old_fml:a) & ~(cids.end(old_fml:a) < X & X < cids.end(fml:a)); assert 0:index <= X & X < cids.end(old_fml:a) -> cids.value(fml:a,X) = cids.value(old_fml:a,X); assert cids.value(fml:a,cids.end(old_fml:a)) = fml:v}",
        "fml:y := fml:x + 1",
        "assert arr_streamid_r.value(fml:a,fml:x) = fml:y",
        "fml:y := fml:x + 1",
        "assert fml:s = replayed_quic_packet_0rtt.retired_cids.end(fml:a)",
        "assert fml:s = clients.client.arr.end(fml:a)",
        "fml:res := forged_protected_quic_packet.ptype(fml:pkt) ~= quic_packet_type.one_rtt",
        "<<<\n\t    `quic_ser_zerortt` ser;\n\t    __ser(ser,x);\n\t    y.resize(ser.res.size());\n\t    for (unsigned i = 0; i < ser.res.size(); i++)\n\t        y[i] = (unsigned char) ser.res[i];\n//\t    std::copy(ser.res.begin(),ser.res.end(),y.begin());\n\t    >>>",
        "assert 0:tls_hand_extensions.domain < fml:x",
        "attacker.ep := fml:e",
        "<<<\t\ts = make_udp_socket();\n\t\tif(addr.addr != 0x7f000001) {\n\t\t\tstd::cerr << \"open SOCKET \" << s << std::endl;\n\t\t\tis_vnet = true;\n\t\t\tchar * dev = strdup(\"lo\"); //TODO\n\t\t\tif (addr.interface == `ip.ivy`) {\n\t\t\t\tdev = strdup(\"ivy\");\n\t\t\t}\n\t\t\tstd::cerr << \"open SOCKET dev \" << dev << std::endl;\n\t\t\t/*if(strcmp(dev,\"lo\") == 0) {\n\t\t\t\tint v = 1;\n\t\t\t\tif (setsockopt(s, SOL_IP, IP_FREEBIND, &v, sizeof(v)) < 0) {\n\t\t\t\t\tperror(\"setsockopt: freebind\");\n\t\t\t\t\texit(EXIT_FAILURE);\n\t\t\t\t}\n\t\t\t}*/\n\t\t\tif (setsockopt(s, SOL_SOCKET, SO_BINDTODEVICE, dev, strlen(dev)) < 0) {\n\t\t\t\tperror(\"setsockopt: bind to device\");\n\t\t\t\texit(EXIT_FAILURE);\n\t\t\t} //TODO comment for shadow\n\t\t\tstruct sockaddr_in v_src = {};\n\t\t\tv_src.sin_addr.s_addr = htonl(addr.addr); // TODO reversorder\n\t\t\t//inet_pton(AF_INET, htonl(addr.addr), &v_src.sin_addr.s_addr);\n\t\t\tv_src.sin_port = htons(addr.port);\n\t\t\tv_src.sin_family = AF_INET;\n\t\t\t\n\t\t\tint error = 0;\n\t\t\tif (setsockopt(s, SOL_SOCKET, SO_REUSEADDR, &error, sizeof(int)) < 0 || setsockopt(s, SOL_SOCKET, SO_REUSEPORT, &error, sizeof(int)) < 0)\n\t\t\t\tperror(\"setsockopt(SO_REUSEADDR) failed\");\n\t\t\n\t\t\tif (bind(s, (struct sockaddr*) &v_src, sizeof(struct sockaddr_in)) != 0) {\n\t\t\t\tchar s[100];\n\t\t\t\tsprintf(s, \"bind to addr %u\", htonl(addr.addr));\n\t\t\t\tperror(s);\n\t\t\t\texit(EXIT_FAILURE);\n\t\t\t}\n\t\t} else {\n\t\t\tstd::cerr << \"SOCKET \" << s << std::endl;\n\t\t\tstruct sockaddr_in myaddr;\n\t\t\tmyaddr.sin_family = AF_INET;\n\t\t\tmyaddr.sin_addr.s_addr = htonl(addr.addr); // inet_addr(\"10.0.0.1\"); //\n\t\t\t// myaddr.sin_addr.s_addr = htonl(INADDR_ANY);\n\t\t\tmyaddr.sin_port = htons(addr.port);\n\n\t\t\tstruct sockaddr_in sin;\n\t\t\tsocklen_t len = sizeof(sin);\n\t\t\tif (::getsockname(s, (struct sockaddr *)&sin, &len) == -1)\n\t\t\t\tperror(\"getsockname\");\n\t\t\telse\n\t\t\t\tstd::cerr <<  \"source port number \" << ntohs(sin.sin_port)  << std::endl;\n\n\t\t\tstd::cerr << \"binding client id: \" << `prm:V0` << \" addr: \" << ntohl(myaddr.sin_addr.s_addr) << \" port: \" << ntohs(myaddr.sin_port) << std::endl;\n\t\t\tif (::bind(s, (struct sockaddr *)&myaddr, sizeof(myaddr)) != 0)\n\t\t\t\t{ perror(\"bind failed\"); exit(1); }\n\t\t\t\n\t\t\tlen = sizeof(sin);\n\t\t\tif (::getsockname(s, (struct sockaddr *)&sin, &len) == -1)\n\t\t\t\tperror(\"getsockname\");\n\t\t\telse\n\t\t\t\tstd::cerr <<  \"source port number \" << ntohs(sin.sin_port)  << std::endl;\n\t\t}\n\t\tinstall_reader(new udp_reader(`prm:V0`,s, *`net.impl.cb(prm:V0)`, this));\n\t    >>>",
        "{call sock := net.open(endpoint_id.client, client.ep); call sock_alt := net.open(endpoint_id.client_alt, client_alt); sock_vn := sock; call client.set_tls_id(0:tls_api.id); call server.set_tls_id(1:tls_api.id); local loc:0 {call loc:0 := tls_extensions.empty; local loc:extns {loc:extns := loc:0; local loc:0 {call loc:0 := make_transport_parameters; call loc:extns := tls_extensions.append(loc:extns, loc:0)}; call tls_api.upper.create(0:tls_api.id, false, loc:extns)}}}",
        "{}",
        "call enqueue_frame(fml:scid, fml:f, fml:e, false)",
        "{zero_rtt_client_test := false; zero_rtt_server_test := false; allowed_migration := true; allowed_multiple_migration := false; version_negociated := false; negocation_of_version_initiated(E) := false; negocation_of_version(E) := false; first_datagram_received := false; last_datagram_received_size := 0:stream_pos; nclients := 1:stream_pos}",
        "assert fml:s = quic_packet_0rtt.retired_cids.end(fml:a)",
        "<<<\n                for (unsigned i = 0; i < `fml:b`.size(); i++)\n\t            `fml:a`.push_back(`fml:b`[i]);\n            >>>",
        "<<<\n\t        if (0 <= `fml:x` && `fml:x` < (`prot.idx`)`fml:a`.size()) \n\t            `fml:y` = `fml:a`[`fml:x`];\n\t    >>>",
        "assert forged_quic_packet_retry.retired_cids.end(fml:a) = 0",
        "assert 0:replayed_quic_packet_0rtt.idx <= fml:s",
        "assert fml:s = quic_packet.retired_cids.end(fml:a)",
        "{}",
        "assert 0:vector[tls.cipher_suite].domain <= fml:x & fml:x < vector[tls.cipher_suite].end(fml:a)",
        "<<<\n\t        `fml:a`.resize(`fml:s`);\n\t        for (unsigned i = 0; i < `fml:s`; i++)\n\t            `fml:a`[i] = y;\n\t    >>>",
        "{}",
        "assert 0:idx_r < fml:x",
        "<<<\n\t        `fml:a`.push_back(`fml:v`);\n            >>>",
        "assert forged_quic_packet.retired_cids.end(fml:a) = fml:s & forged_quic_packet.retired_cids.value(fml:a,X) = fml:y",
        "assert frame.ack_ecn.range.arr.end(fml:a) = 0",
        "assert arr_streamid_r.end(fml:a) = 0",
        "{assert connected(fml:dcid) & connected_to(fml:dcid) = fml:scid; assert fml:e = quic_packet_type.one_rtt & established_1rtt_keys(fml:scid); assert num_queued_frames(fml:scid) > 0 -> fml:e = queued_level(fml:scid)}",
        "{}",
        "assert 0:tls.handshakes.domain < fml:x",
        "{}",
        "assert frame.ack_ecn.range.arr.value(fml:a,fml:x) = fml:y",
        "assert 0:forged_quic_packet.idx <= fml:x & fml:x < forged_quic_packet.arr.end(fml:a)",
        "{}",
        "<<<\n\t        if (0 <= `fml:x` && `fml:x` < (`frame.idx`)`fml:a`.size()) \n\t            `fml:a`[`fml:x`] = `fml:y`;\n\t    >>>",
        "{assert fml:x < fml:y & (fml:x < Y -> fml:y <= Y); assert jdx_r.succ(fml:x,fml:y)}",
        "if prot.hdr_long(fml:h) {fml:scid := prot.scid(fml:h)}\nelse {if used_cid(prot.dcid(fml:h)) {fml:scid := connected_to(prot.dcid(fml:h))}\nelse {fml:scid := 0:cid}}",
        "{}",
        "<<<\n\t    std::vector<char> buf(y.size());\n\t    std::copy(y.begin(),y.end(),buf.begin());\n\t    `quic_deser_vn` des(buf);\n\t    __deser(des,x);\n\t    >>>",
        "local loc:0,loc:1,loc:2,loc:3 {call loc:0 := cid_to_us(fml:odcid); call loc:1 := cid_to_us(fml:dcid); call loc:2 := cid_to_us(fml:scid); call loc:3 := tls_api.upper.compute_retry_integrity_tag(fml:odcil, loc:0, fml:pversion, fml:dcil, loc:1, fml:scil, loc:2, fml:token, fml:seq, fml:h, fml:b); local loc:rt {loc:rt := loc:3; fml:cipher := loc:rt}}",
        "assert frame.ack.range.arr.value(fml:a,fml:x) = fml:y",
        "{assert fml:x < fml:y & (fml:x < Y -> fml:y <= Y); assert quic_packet_coal_0rtt.idx.succ(fml:x,fml:y)}",
        "{assert forged_pkts.end(fml:pkt) > 0; assert mim_agent.nat_configured; assert fml:src ~= fml:dst; assert ~(fml:src = mim_agent.ep_out & fml:dst = mim_agent.ep_in); assert ~(fml:dst = mim_agent.ep_out & fml:src = mim_agent.ep_in); assert ~packed_forwarded_arr(fml:pkt)}",
        "<<<\n        //is_rtt = true; //todo\n        if(is_server)\n            is_client_test = true;\n\n        std::cerr << \"create cid = \" << c << std::endl;  \n        std::cerr << \"is_server  = \" << is_server << std::endl;  \n\n        // We create a new picootls session, and add an entry in the cid_map\n        // for it.\n\n        ptls_context_t* ctx;\n        ctx = new ptls_context_t;\n        memset(ctx, 0, sizeof(ptls_context_t));\n\n        /*\n        HelloRetryRequest random:\n            CF 21 AD 74 E5 9A 61 11 BE 1D 8C 02 1E 65 B8 91\n            C2 A2 11 16 7A BB 8C 5E 07 9E 09 E2 C8 A8 33 9C\n        */\n        ctx->random_bytes = ptls_openssl_random_bytes;\n        ctx->key_exchanges = picotls_key_exchanges; \n        ctx->cipher_suites = picotls_cipher_suites; \n        ctx->send_change_cipher_spec = 0;\n        // ctx->hkdf_label_prefix = QUIC_LABEL_QUIC_BASE;\n        \n        ctx->hkdf_label_prefix__obsolete = NULL;\n        ctx->update_traffic_key = (ptls_update_traffic_key_t *)malloc(sizeof(ptls_update_traffic_key_t));\n        memset(ctx->update_traffic_key, 0, sizeof(ptls_update_traffic_key_t));\n        //ctx->update_traffic_key = new ptls_update_traffic_key_t;\n        ctx->update_traffic_key->cb = quic_update_traffic_key_cb;\n        \n        //ctx->on_extension = new ptls_on_extension_t;\n        ctx->on_extension = (ptls_on_extension_t *)malloc(sizeof(ptls_on_extension_t));\n        memset(ctx->on_extension, 0, sizeof(ptls_on_extension_t));\n        ctx->on_extension->cb = tls_on_extension_cb;\n        \n        ctx->get_time = &ptls_get_time;\n        const char * is_zrtt = getenv(\"ZERORTT_TEST\");\n\n       // ctx->client_mode = !is_server;\n\n        ctx->max_early_data_size = 0xFFFFFFFF;\n        ctx->omit_end_of_early_data = 0;\n\n        std::cerr << \"PROUT 3 \"  << std::endl;\n\n        //ctx->use_exporter = 1; // master secrets should be recorded\n        \n        ptls_handshake_properties_t *handshake_properties = new ptls_handshake_properties_t; \n        memset(handshake_properties, 0, sizeof(ptls_handshake_properties_t));\n        handshake_properties->collect_extension = tls_collect_extensions_cb;\n        handshake_properties->collected_extensions = tls_collected_extensions_cb;\n   \n        std::cerr << \"PROUT 4 \" << std::endl;\n        \n        ptls_iovec_t *alpn_vec = new(ptls_iovec_t);  // TODO: will leak this\n        \n        // h3-x == HTTP/3 over QUIC \n        // hq-x == HTTP/0.9 over QUIC\n        alpn_vec->base = (uint8_t*) \"hq-interop\";\n        if(const char* env_p = std::getenv(\"TEST_ALPN\")) { \n            std::cerr << \"TEST_ALPN \" << env_p << std::endl;\n            alpn_vec->base = (uint8_t*) env_p;\n        }\n\n        alpn_vec->len = strlen((char *)(alpn_vec->base));\n        handshake_properties->client.negotiated_protocols.count = 1;\n        handshake_properties->client.negotiated_protocols.list  = alpn_vec;\n\n        // add the extensions\n        ptls_raw_extension_t *ptls_exts = new ptls_raw_extension_t[e.size()+1];\n        for (unsigned i = 0; i < e.size(); i++) {\n            `tls_ser` ser;\n\t        std::cerr << \"etype =\" << std::endl;  \n            __ser(ser,e[i]);\n            unsigned etype = (((unsigned char)(ser.res[0])) << 8) + ((unsigned char)(ser.res[1]));\n            unsigned len = (((unsigned char)(ser.res[2])) << 8) + ((unsigned char)(ser.res[3]));\n            unsigned char *data = new unsigned char[ser.res.size()-4];\n            std::copy(ser.res.begin()+4,ser.res.end(),data);\n            ptls_exts[i].type = etype;\n            std::cerr << \"etype =\" << etype << std::endl;  \n            ptls_exts[i].data.base = data;\n            //std::cerr << \"data =\" << data << std::endl;  \n            ptls_exts[i].data.len = len;\n            std::cerr << \"len =\" << len << std::endl;  \n            // int eres = gnutls_session_ext_register (session, \"ext_name\", etype,\n            //   GNUTLS_EXT_APPLICATION, gnutls_ext_supp_recv_params,\n            //   gnutls_ext_supp_send_params, 0,0,0,0);\n            // if (eres != GNUTLS_E_SUCCESS) {\n            //     std::cerr << \"gnutls_session_ext_register\\n\";\n            //     exit(1);\n            // }\n        }\n        ptls_exts[e.size()].type = 0xffff;\n        ptls_exts[e.size()].data.base = NULL;\n        ptls_exts[e.size()].data.len = 0;\n\n        for (unsigned i = 0; i < e.size(); i++) {\n            std::cerr << \"ptls_exts[i].type = \" << ptls_exts[i].type << std::endl;  \n            //std::cerr << \"ptls_exts[i].base = \" << ptls_exts[i].data.base << std::endl;\n            std::cerr << \"ptls_exts[i].len = \" << ptls_exts[i].data.len << std::endl;\n        }\n        handshake_properties->additional_extensions = ptls_exts;\n\n        // Read the certificate, if we are a server\n\n        if (is_server) { //segfautl ??\n            int r = ptls_load_certificates(ctx, \"leaf_cert.pem\");\n            std::cerr << \"ptls_load_certificates \"  << r << std::endl;\n            /* Read the certificate file */\n            if (r != 0) {\n                std::cerr << \"could not load certificate file leaf_cert.pem\\n\";\n                exit(1);\n            } else if(set_sign_certificate_from_key_file(\"leaf_cert.key\", ctx)) {\n                std::cerr << \"could not load key file leaf_cert.key\\n\";\n                exit(1);\n            }\n        }\n\n        ptls_t *session;\n        session = ptls_new(ctx,is_server ? 1 : 0);\n        ptls_set_server_name(session, \"servername\", strlen(\"servername\"));\n\n        //if(const char* env_p = std::getenv(\"TEST_IMPL\")) { \n        //    std::cerr << \"TEST_IMPL \" << env_p << std::endl;\n        //    std::cerr << \"is_server \" << is_server << std::endl;\n            // if(strncmp(env_p,\"quic-go\",10) == 0 \n            //     || strncmp(env_p,\"quiche\",10) == 0 \n            //        || strncmp(env_p,\"lsquic\",10) == 0 \n            //           || strncmp(env_p,\"quinn\",10) == 0 \n            //              || strncmp(env_p,\"aioquic\",10) == 0) //TODO ask why sometime ALPN needed\n            //     if (is_server) { // && false\n                        std::cerr << \"ptls_set_negotiated_protocol\"  << std::endl;\n                        ptls_set_negotiated_protocol(session, \n                            (const char*) handshake_properties->client.negotiated_protocols.list[0].base, \n                            handshake_properties->client.negotiated_protocols.list[0].len);\n                // } \n        //}\n\n        picotls_connection *s = new picotls_connection(c, session, ctx, *`tls_api.upper.foo.cb`, handshake_properties, is_server);\n        *ptls_get_data_ptr(session) = s;   \n        \n        if(is_zrtt != NULL){ //is_server && \n            /**\n            * @brief picoquic_server_setup_ticket_aead_contexts\n            */\n            uint8_t temp_secret[256]; /* secret_max */\n            int ret = 0;\n            std::cerr << \"picoquic_server_setup_ticket_aead_contexts 1 \" << std::endl;\n            ptls_cipher_suite_t cipher_ticket ={ 0, &ptls_openssl_aes128gcm, &ptls_openssl_sha256 };\n            //  { 0,  &ptls_openssl_aes256gcmsha384, &ptls_openssl_aes128gcmsha256, &ptls_minicrypto_chacha20poly1305sha256 };\n            //{ 0, &ptls_openssl_aes128gcm, &ptls_openssl_sha256, &ptls_openssl_aes128gcm };\n            if (cipher_ticket.hash->digest_size > sizeof(temp_secret)) {\n                ret = -1;\n            } else {\n                std::cerr << \"picoquic_server_setup_ticket_aead_contexts 2 \" << std::endl;\n                //ctx->random_bytes(temp_secret, cipher_ticket.hash->digest_size);\n                for(int i = 0; i < cipher_ticket.hash->digest_size; i++)\n                    temp_secret[i] = 1;\n                std::cerr << \"picoquic_server_setup_ticket_aead_contexts 3 \" << std::endl;\n                /* Create the AEAD contexts */\n                ret = quic_set_aead_from_secret(&s->ticket_aead_encrypt, &cipher_ticket, 1, temp_secret, \"random label\");\n                if (ret == 0) {\n                    std::cerr << \"picoquic_server_setup_ticket_aead_contexts 4 \" << std::endl;\n                    ret = quic_set_aead_from_secret(&s->ticket_aead_decrypt, &cipher_ticket, 0, temp_secret, \"random label\");\n                }\n                std::cerr << \"picoquic_server_setup_ticket_aead_contexts 5 \" << std::endl;\n                /* erase the temporary secret */\n                ptls_clear_memory(temp_secret, cipher_ticket.hash->digest_size);\n            } \n\n            ptls_iovec_t ticket_psk = ptls_iovec_init(NULL, 0);\n            std::cerr << \"ptls_encrypt_ticket_t \" << is_zrtt << std::endl;\n            ptls_encrypt_ticket_t* encrypt_ticket = (ptls_encrypt_ticket_t*) malloc(sizeof(ptls_encrypt_ticket_t)+ sizeof(ptls_iovec_t*));\n            if (encrypt_ticket != NULL) {\n                encrypt_ticket->cb = tls_server_encrypt_ticket_cb;\n                ptls_iovec_t** ppreceiver = (ptls_iovec_t**)(((char*)encrypt_ticket) + sizeof(ptls_encrypt_ticket_t));\n                *ppreceiver = &ticket_psk;\n                ctx->encrypt_ticket = encrypt_ticket;\n            }\n\n            ctx->ticket_lifetime = 100000; /* 100,000 seconds, a bit more than one day */\n            ctx->max_early_data_size = 0xFFFFFFFF;\n            ctx->require_dhe_on_psk = 1;\n\n            ptls_iovec_t ticket_psk2 = ptls_iovec_init(NULL, 0);\n            std::cerr << \"ptls_save_ticket_t \" << is_zrtt << std::endl;\n            ptls_save_ticket_t* save_ticket = (ptls_save_ticket_t*) malloc(sizeof(ptls_save_ticket_t)+ sizeof(ptls_iovec_t*)); // + sizeof(ptls_iovec_t*)\n            if (save_ticket != NULL) {\n                save_ticket->cb = tls_client_save_ticket_cb; //memory error\n                ptls_iovec_t** ppreceiver2 = (ptls_iovec_t**)(((char*)save_ticket) + sizeof(ptls_save_ticket_t));\n                *ppreceiver2 = &ticket_psk2;\n                ctx->save_ticket = save_ticket;\n            }\n        } else {\n            ctx->ticket_lifetime = 0; // no ticket? was: 100000; /* 100,000 seconds, a bit more than one day */\n            ctx->require_dhe_on_psk = 1;\n        }\n\n\n\t    `tls_api.upper.foo.cid_map`[c] = s;\n        \n        // Start the handshake if we are the client. The in_epoch is zero for \"initial\".\n\n        if (!is_server) \n            picotls_do_handshake(s,0,0,0);\n        >>>",
        "{assert fml:y < fml:x & (Y:index < fml:x -> Y <= fml:y); assert index.succ(fml:y,fml:x)}",
        "client_server.ep_in := fml:e",
        "if _generating {assert fml:scid = the_cid; assert frame.rst_stream.id(fml:f) = 4}",
        "{if some loc:ch. *>(fml:hs,loc:ch) {is_client(fml:scid) := true; call handle_tls_extensions(fml:src, fml:dst, fml:scid, tls.client_hello.extensions(loc:ch), true)}\nelse {if some loc:sh. *>(fml:hs,loc:sh) {call handle_tls_extensions(fml:src, fml:dst, fml:scid, tls.server_hello.extensions(loc:sh), false)}\nelse {if some loc:ee. *>(fml:hs,loc:ee) {call handle_tls_extensions(fml:src, fml:dst, fml:scid, tls.encrypted_extensions.extensions(loc:ee), false)}}}; if some loc:fh. *>(fml:hs,loc:fh) {tls_handshake_finished := true}}",
        "{assert forged_quic_packet_retry.arr.end(fml:a) > forged_quic_packet_retry.arr.end(old_fml:a) & ~(forged_quic_packet_retry.arr.end(old_fml:a) < X & X < forged_quic_packet_retry.arr.end(fml:a)); assert 0:forged_quic_packet_retry.idx <= X & X < forged_quic_packet_retry.arr.end(old_fml:a) -> forged_quic_packet_retry.arr.value(fml:a,X) = forged_quic_packet_retry.arr.value(old_fml:a,X); assert forged_quic_packet_retry.arr.value(fml:a,forged_quic_packet_retry.arr.end(old_fml:a)) = fml:v}",
        "{assert arr_pkt_num_s.end(fml:a) = arr_pkt_num_s.end(old_fml:a); assert arr_pkt_num_s.value(fml:a,X) = (fml:y if (X = fml:x) else arr_pkt_num_s.value(old_fml:a,X))}",
        "<<<\n\t    >>>",
        "<<<\n\t        `fml:a`.push_back(`fml:v`);\n            >>>",
        "{}",
        "assert fml:s = forged_quic_packet.arr.end(fml:a)",
        "assert fml:s = forged_pkts.end(fml:a)",
        "{}",
        "{}",
        "{}",
        "<<<\n                for (unsigned i = 0; i < `fml:a`.size()/2; i++) {\n                    std::swap(`fml:a`[i],`fml:a`[`fml:a`.size()-i-1]);\n                }\n            >>>",
        "assert 0:quic_packet.idx <= fml:s",
        "{}",
        "{assert frame.ack_ecn.range.arr.end(fml:a) = frame.ack_ecn.range.arr.end(old_fml:a); assert frame.ack_ecn.range.arr.value(fml:a,X) = (fml:y if (X = fml:x) else frame.ack_ecn.range.arr.value(old_fml:a,X))}",
        "assert tls_api.upper.open(fml:c) & tls_api.upper.established(fml:c)",
        "{}",
        "assert 0:index <= fml:s",
        "<<<\n\t        if (`fml:a`.size() > 0) {\n\t            a.pop_back();\n\t        }\n            >>>",
        "<<<\n    res = 0;\n    if(const char* env_p2 = std::getenv(\"TEST_TYPE\")) { \n      if(strcmp(env_p2, \"server\") == 0 || cond) {\n         if(const char* env_p3 = std::getenv(\"TEST_SCIL\")) {\n            std::cerr << \"TEST_SCIL \" << env_p3 << \"\\n\";\n\t        res = atoi(env_p3);\n         } else \n\t   res = 8;\n      } else \n\t  res = 8;\n    } else \n      res = 8;\n    std::cerr <<  \"scid_size_pos size: \" <<  res << \"\\n\";\n    >>>",
        "{}",
        "{}",
        "{assert tls.handshakes.end(fml:a) > tls.handshakes.end(old_fml:a) & ~(tls.handshakes.end(old_fml:a) < X & X < tls.handshakes.end(fml:a)); assert 0:tls.handshakes.domain <= X & X < tls.handshakes.end(old_fml:a) -> tls.handshakes.value(fml:a,X) = tls.handshakes.value(old_fml:a,X); assert tls.handshakes.value(fml:a,tls.handshakes.end(old_fml:a)) = fml:v}",
        "<<<\n\t        `fml:a`.resize(`fml:s`);\n\t        for (unsigned i = 0; i < `fml:s`; i++)\n\t            `fml:a`[i] = y;\n\t    >>>",
        "{call client_alt := endpoint_id_addr(endpoint_id.client_alt); call client_vn := endpoint_id_addr(endpoint_id.client_vn)}",
        "{}",
        "{}",
        "{}",
        "{assert cids.end(fml:a) = fml:s; assert 0:index <= X & X < cids.end(old_fml:a) -> cids.value(fml:a,X) = cids.value(old_fml:a,X); assert cids.end(old_fml:a) <= X & X < fml:s -> cids.value(fml:a,X) = fml:v}",
        "if _generating {local loc:0 {call loc:0 := pkt_serdes_retry.to_bytes(fml:pkt); local loc:spkt {loc:spkt := loc:0; local loc:0 {call loc:0 := prot.arr.empty; local loc:pkts {loc:pkts := loc:0; call loc:pkts := prot.arr.append(loc:pkts, loc:spkt); local loc:0,loc:1 {call loc:0 := endpoint_to_pid(fml:src); call loc:1 := endpoint_to_socket(fml:src); call net.send(loc:0, loc:1, fml:dst, loc:pkts)}}}}}}",
        "{}",
        "<<<\n                for (unsigned i = 0; i < `fml:b`.size(); i++)\n\t            `fml:a`.push_back(`fml:b`[i]);\n            >>>",
        "{}",
        "assert 0:vector[transport_parameter].domain <= fml:s",
        "<<<\n\t        if (`fml:a`.size() > 0) {\n\t            a.pop_back();\n\t        }\n            >>>",
        "{}",
        "assert tls.handshakes.value(fml:a,fml:x) = fml:y",
        "{}",
        "fml:res := quic_packet_coal_0rtt.ptype(fml:pkt) ~= quic_packet_type.one_rtt",
        "{assert fml:x < fml:y & (fml:x < Y -> fml:y <= Y); assert forged_quic_packet_vn.idx.succ(fml:x,fml:y)}",
        "{}",
        "{}",
        "{}",
        "<<<\n                for (unsigned i = 0; i < `fml:a`.size()/2; i++) {\n                    std::swap(`fml:a`[i],`fml:a`[`fml:a`.size()-i-1]);\n                }\n            >>>",
        "{assert stream_data.end(fml:a) = fml:s; assert 0:stream_pos <= X & X < stream_data.end(old_fml:a) -> stream_data.value(fml:a,X) = stream_data.value(old_fml:a,X); assert stream_data.end(old_fml:a) <= X & X < fml:s -> stream_data.value(fml:a,X) = fml:v}",
        "assert 0:jdx_r < fml:x",
        "assert 0:forged_quic_packet_vn.idx <= fml:x & fml:x < forged_quic_packet_vn.arr.end(fml:a)",
        "{assert fml:x < fml:y & (fml:x < Y -> fml:y <= Y); assert forged_quic_packet_retry.idx.succ(fml:x,fml:y)}",
        "<<<\n\t        if (0 <= `fml:x` && `fml:x` < (`tls_extensions.domain`)`fml:a`.size()) \n\t            `fml:a`[`fml:x`] = `fml:y`;\n\t    >>>",
        "{assert fml:x < fml:y & (fml:x < Y -> fml:y <= Y); assert forged_quic_packet.idx.succ(fml:x,fml:y)}",
        "{}",
        "{}",
        "{}",
        "{assert fml:x < fml:y & (fml:x < Y -> fml:y <= Y); assert frame.idx.succ(fml:x,fml:y)}",
        "<<<\n\t        unsigned __old_size = `fml:a`.size();\n\t        `fml:a`.resize(`fml:s`);\n\t        for (unsigned i = __old_size; i < (unsigned)`fml:s`; i++)\n\t            `fml:a`[i] = v;\n            >>>",
        "{}",
        "<<<\n\t        `fml:a`.resize(`fml:s`);\n\t        for (unsigned i = 0; i < `fml:s`; i++)\n\t            `fml:a`[i] = y;\n\t    >>>",
        "<<<\n\t        unsigned __old_size = `fml:a`.size();\n\t        `fml:a`.resize(`fml:s`);\n\t        for (unsigned i = __old_size; i < (unsigned)`fml:s`; i++)\n\t            `fml:a`[i] = v;\n            >>>",
        "if _generating {assert fml:scid = the_cid; assert frame.stream_data_blocked.id(fml:f) = 4}",
        "<<<\n\t    `quic_ser_retry` ser;\n\t    __ser(ser,x);\n\t    y.resize(ser.res.size());\n\t    for (unsigned i = 0; i < ser.res.size(); i++)\n\t        y[i] = (unsigned char) ser.res[i];\n//\t    std::copy(ser.res.begin(),ser.res.end(),y.begin());\n\t    >>>",
        "local loc:len_minus_one {loc:len_minus_one := bfe[0][1](stream_data.value(fml:pkt,0)); fml:pnum_len := loc:len_minus_one + 1}",
        "fml:y := fml:x - 1",
        "<<<\n                // should use postrouting\n                std::string command = \"sudo iptables -t nat -A OUTPUT -o lo -d 127.0.0.1 -p udp --dport \" + std::to_string(server_ep) + \":\" + std::to_string(server_ep) + \" -j DNAT --to-destination 127.0.0.1:\"+ std::to_string(victim_ep) +\">/dev/null 2>&1\"; \n                int n = command.length();\n                std::cerr << \"configure_NAT_attack_in_spoof \" << command << \"\\n\";\n                // declaring character array\n                char command_array[n + 1];\n            \n                // copying the contents of the\n                // string to char array\n                strcpy(command_array, command.c_str());\n\n                int cr = system(command_array);\n            >>>",
        "<<<        std::cerr << \"decrypt_aead start \" << \"\\n\";\n        std::cerr << \"decrypt_aead ad \" << ad.size() <<  \"\\n\";\n\t    picotls_connection *s = `tls_api.upper.foo.cid_map`[c];\n        ptls_aead_context_t *aead = (ptls_aead_context_t *)(s->crypto_context[l].aead_decrypt);\n        std::cerr << \"aead == \" << aead << \"\\n\";\n\t    if(aead != 0) {\n\t        uint32_t checksum_length = aead->algo->tag_size;\n            std::cerr << \"checksum_length == \" << checksum_length << \"\\n\";\n            std::vector<uint8_t> bytes;\n            bytes.resize(ad.size());\n            std::copy(ad.begin(),ad.end(),bytes.begin());\n\n            std::cerr << \"seq == \" << seq << \"\\n\";\n            std::cerr << \"bytes.size() == \" << bytes.size() << \"\\n\";\n\n            std::vector<uint8_t> input, output;\n            input.resize(cipher.size());\n            std::copy(cipher.begin(),cipher.end(),input.begin());\n            output.resize(cipher.size() - checksum_length);\n            size_t decrypted = ptls_aead_decrypt(aead,\n                                                &output[0], \n                                                &input[0], \n                                                input.size(), \n                                                seq,\n                                                &bytes[0], bytes.size());\n            res.ok = decrypted <= input.size();\n            std::cerr << \"decrypted <= input.size() == \" << (decrypted <= input.size()) << \"\\n\";\n            if (res.ok) {\n                res.data.resize(output.size());\n                std::copy(output.begin(),output.end(),res.data.begin());\n            }\n        } else {\n            std::cerr << \"decrypt_aead failure \" << \"\\n\";\n            res.ok = false;\n        }\n        std::cerr << \"decrypt_aead finish \" << \"\\n\";\n        >>>",
        "<<<\n\t        unsigned __old_size = `fml:a`.size();\n\t        `fml:a`.resize(`fml:s`);\n\t        for (unsigned i = __old_size; i < (unsigned)`fml:s`; i++)\n\t            `fml:a`[i] = v;\n            >>>",
        "if _generating {assert fml:scid = the_cid; if ~zero_rtt_server_test | zero_rtt_sent {assert connected(the_cid) & fml:dcid = connected_to(the_cid)}; assert frame.stream.len(fml:f) & frame.stream.off(fml:f); assert frame.stream.length(fml:f) > 0; assert frame.stream.offset(fml:f) = stream_length(fml:dcid,frame.stream.id(fml:f)); assert frame.stream.length(fml:f) = stream_app_data_end(fml:dcid,frame.stream.id(fml:f)) - frame.stream.offset(fml:f)}",
        "assert clients.client.arr.value(fml:a,fml:x) = fml:y",
        "local loc:cdx {loc:cdx := 0:servers.server.idx; local loc:idx_port {loc:idx_port := 0:ip.port; while loc:cdx < 2\n{local loc:cc {servers.server.enc_level(loc:cc) := quic_packet_type.initial; ip.endpoint.protocol(servers.server.ep(loc:cc)) := ip.udp; ip.endpoint.addr(servers.server.ep(loc:cc)) := server_addr; ip.endpoint.port(servers.server.ep(loc:cc)) := server_port + 2 * (loc:idx_port + 1); call servers.servers := servers.server.arr.append(servers.servers, loc:cc); call loc:cdx := servers.server.idx.next(loc:cdx); loc:idx_port := loc:idx_port + 1}}}}",
        "<<<\n\t    >>>",
        "<<<\n                for (unsigned i = 0; i < `fml:a`.size()/2; i++) {\n                    std::swap(`fml:a`[i],`fml:a`[`fml:a`.size()-i-1]);\n                }\n            >>>",
        "<<<\n\t        unsigned __old_size = `fml:a`.size();\n\t        `fml:a`.resize(`fml:s`);\n\t        for (unsigned i = __old_size; i < (unsigned)`fml:s`; i++)\n\t            `fml:a`[i] = v;\n            >>>",
        "assert 0:quic_packet_coal_0rtt.idx <= fml:s",
        "{}",
        "{}",
        "{}",
        "<<<\n\t        `fml:s` = (`tls.handshakes.domain`) `fml:a`.size();\n\t    >>>",
        "assert vector[tls.compression_method].value(fml:a,fml:x) = fml:y",
        "<<<\n\t        `fml:a`.push_back(`fml:v`);\n            >>>",
        "<<<\n\t        if (0 <= `fml:x` && `fml:x` < (`forged_quic_packet_vn.idx`)`fml:a`.size()) \n\t            `fml:y` = `fml:a`[`fml:x`];\n\t    >>>",
        "{}",
        "{}",
        "{}",
        "assert quic_packet_0rtt.arr.value(fml:a,fml:x) = fml:y",
        "{}",
        "<<<\n\t        if (0 <= `fml:x` && `fml:x` < (`quic_packet_0rtt.idx`)`fml:a`.size()) \n\t            `fml:a`[`fml:x`] = `fml:y`;\n\t    >>>",
        "<<<\n                if ((`idx_s`)`fml:a`.size() > 0)\n                    `fml:res` = `fml:a`.back();\n            >>>",
        "assert 0:quic_packet_0rtt.idx <= fml:x & fml:x < quic_packet_0rtt.arr.end(fml:a)",
        "{assert stream_data.end(fml:a) > stream_data.end(old_fml:a) & ~(stream_data.end(old_fml:a) < X & X < stream_data.end(fml:a)); assert 0:stream_pos <= X & X < stream_data.end(old_fml:a) -> stream_data.value(fml:a,X) = stream_data.value(old_fml:a,X); assert stream_data.value(fml:a,stream_data.end(old_fml:a)) = fml:v}",
        "<<<\n\t    >>>",
        "{}",
        "local loc:tp {loc:tp := trans_params(fml:dcid); fml:max := 0:stream_pos; if get_stream_kind(fml:id) = unidir {if initial_max_stream_data_uni.is_set(loc:tp) {fml:max := initial_max_stream_data_uni.stream_pos_32(initial_max_stream_data_uni.value(trans_params(fml:dcid)))}}\nelse {if is_client(fml:dcid) <-> get_stream_role(fml:id) = role.client {if initial_max_stream_data_bidi_local.is_set(loc:tp) {fml:max := initial_max_stream_data_bidi_local.stream_pos_32(initial_max_stream_data_bidi_local.value(trans_params(fml:dcid)))}}\nelse {if initial_max_stream_data_bidi_remote.is_set(loc:tp) {fml:max := initial_max_stream_data_bidi_remote.stream_pos_32(initial_max_stream_data_bidi_remote.value(trans_params(fml:dcid)))}}}; if max_stream_data_set(fml:dcid,fml:id) {local loc:msdv {loc:msdv := max_stream_data_val(fml:dcid,fml:id); fml:max := (loc:msdv if (loc:msdv > fml:max) else fml:max)}}; local loc:0 {call loc:0 := max_additional_data(fml:dcid); local loc:alt_max {loc:alt_max := loc:0 + stream_length(fml:dcid,fml:id); fml:max := (loc:alt_max if (loc:alt_max < fml:max) else fml:max); if zero_rtt_allowed & ~zero_rtt_sent | fml:e = quic_packet_type.zero_rtt {fml:max := 1000:stream_pos}}}}",
        "{assert num_queued_frames(fml:scid) > 0 -> fml:e = queued_level(fml:scid); assert ~conn_closed(fml:scid); assert fml:e ~= quic_packet_type.zero_rtt; assert frame.crypto.offset(fml:f) + frame.crypto.length(fml:f) <= crypto_data_end(fml:scid,fml:e); assert frame.crypto.data(fml:f) = stream_data.segment(crypto_data(fml:scid,fml:e),frame.crypto.offset(fml:f),frame.crypto.offset(fml:f) + frame.crypto.length(fml:f))}",
        "<<<\n                for (unsigned i = 0; i < `fml:a`.size()/2; i++) {\n                    std::swap(`fml:a`[i],`fml:a`[`fml:a`.size()-i-1]);\n                }\n            >>>",
        "{}",
        "<<<\n        res = c.val;\n    >>>",
        "{}",
        "{assert fml:y < fml:x & (Y:tls_extensions.domain < fml:x -> Y <= fml:y); assert tls_extensions.domain.succ(fml:y,fml:x)}",
        "{}",
        "{call mim_agent.ppkt_to_be_forge := stream_data.empty; mim_agent.forward_turn := true}",
        "assert forged_quic_packet.retired_cids.end(fml:a) = 0",
        "<<<\n\t        if (0 <= `fml:x` && `fml:x` < (`quic_packet_vn.idx`)`fml:a`.size()) \n\t            `fml:a`[`fml:x`] = `fml:y`;\n\t    >>>",
        "{}",
        "{}",
        "{max_idle_timeout.is_set(fml:s) := true; max_idle_timeout.value(fml:s) := fml:p}",
        "assert 0:vector[tls.psk_identity].domain <= fml:x & fml:x < vector[tls.psk_identity].end(fml:a)",
        "<<<\n\t        if (0 <= `fml:x` && `fml:x` < (`jdx_r`)`fml:a`.size()) \n\t            `fml:a`[`fml:x`] = `fml:y`;\n\t    >>>",
        "assert 0:index <= fml:x & fml:x < versions.end(fml:a)",
        "{call map_cids(fml:scid, fml:dcid); call map_cids(fml:dcid, fml:scid); ack_credit(fml:scid) := ack_credit(fml:scid) + 1}",
        "{}",
        "assert stream_data.end(fml:a) = 0",
        "{}",
        "local loc:length {loc:length := frame.crypto.offset(fml:f) + frame.crypto.length(fml:f); if crypto_length(fml:scid,fml:e) < loc:length {crypto_length(fml:scid,fml:e) := loc:length}; local loc:idx {loc:idx := frame.crypto.offset(fml:f); while loc:idx < frame.crypto.offset(fml:f) + frame.crypto.length(fml:f)\n{crypto_data_present(fml:scid,fml:e,loc:idx) := true; call loc:idx := stream_pos.next(loc:idx)}; call enqueue_frame(fml:scid, fml:f, fml:e, false); if fml:e = quic_packet_type.handshake {established_1rtt_keys(fml:scid) := true}}}",
        "call enqueue_frame(fml:scid, fml:f, fml:e, false)",
        "{}",
        "<<<\n                if ((`vector[tls.handshake].domain`)`fml:a`.size() > 0)\n                    `fml:res` = `fml:a`.back();\n            >>>",
        "local loc:idx {loc:idx := stream_data.begin(fml:x); while loc:idx < stream_data.end(fml:x)\n{local loc:0 {call loc:0 := prot.byte_xor(stream_data.value(fml:x,loc:idx), stream_data.value(fml:y,loc:idx)); call fml:x := stream_data.set(fml:x, loc:idx, loc:0)}; call loc:idx := stream_pos.next(loc:idx)}}",
        "<<<\n\t        `fml:a`.resize(`fml:s`);\n\t        for (unsigned i = 0; i < `fml:s`; i++)\n\t            `fml:a`[i] = y;\n\t    >>>",
        "assert tls_hand_extensions.end(fml:a) = 0",
        "{}",
        "{}",
        "{assert vector[tls.handshake].end(fml:a) = vector[tls.handshake].end(old_fml:a); assert vector[tls.handshake].value(fml:a,X) = (fml:y if (X = fml:x) else vector[tls.handshake].value(old_fml:a,X))}",
        "{}",
        "{victim_agent.enc_level := quic_packet_type.initial; ip.endpoint.protocol(victim_agent.ep) := ip.udp; ip.endpoint.addr(victim_agent.ep) := victim_addr; ip.endpoint.port(victim_agent.ep) := victim_port; call victim_agent.ppkt_recvd := forged_pkts.empty}",
        "{assert vector[tls.cipher_suite].end(fml:a) = fml:s; assert 0:vector[tls.cipher_suite].domain <= X & X < vector[tls.cipher_suite].end(old_fml:a) -> vector[tls.cipher_suite].value(fml:a,X) = vector[tls.cipher_suite].value(old_fml:a,X); assert vector[tls.cipher_suite].end(old_fml:a) <= X & X < fml:s -> vector[tls.cipher_suite].value(fml:a,X) = fml:v}",
        "fml:tls_id := (client.tls_id if (fml:src = client.ep) else second_client.tls_id)",
        "{assert fml:y < fml:x & (Y:vector[tls.extension].domain < fml:x -> Y <= fml:y); assert vector[tls.extension].domain.succ(fml:y,fml:x)}",
        "{}",
        "<<<\n                for (unsigned i = 0; i < `fml:b`.size(); i++)\n\t            `fml:a`.push_back(`fml:b`[i]);\n            >>>",
        "<<<\n\t        `fml:s` = (`jdx_r`) `fml:a`.size();\n\t    >>>",
        "assert cids.end(fml:a) = fml:s & cids.value(fml:a,X) = fml:y",
        "<<<\n\t        if (0 <= `fml:x` && `fml:x` < (`index`)`fml:a`.size()) \n\t            `fml:y` = `fml:a`[`fml:x`];\n\t    >>>",
        "{}",
        "{}",
        "<<<\n                if ((`replayed_quic_packet_0rtt.idx`)`fml:a`.size() > 0)\n                    `fml:res` = `fml:a`.back();\n            >>>",
        "{}",
        "{}",
        "<<<\n\t        `fml:a`.push_back(`fml:v`);\n            >>>",
        "{}",
        "assert vector[tls.cipher_suite].end(fml:a) = 0",
        "<<<\n\t        if (0 <= `fml:x` && `fml:x` < (`quic_packet.idx`)`fml:a`.size()) \n\t            `fml:y` = `fml:a`[`fml:x`];\n\t    >>>",
        "<<<\n                if ((`forged_quic_packet_retry.idx`)`fml:a`.size() > 0)\n                    `fml:res` = `fml:a`.back();\n            >>>",
        "{}",
        "{assert fml:x < fml:y & (fml:x < Y -> fml:y <= Y); assert tls_api.id.succ(fml:x,fml:y)}",
        "{}",
        "{}",
        "{assert fml:y < fml:x & (Y:quic_packet.idx < fml:x -> Y <= fml:y); assert quic_packet.idx.succ(fml:y,fml:x)}",
        "{}",
        "assert 0:tls.handshakes.domain <= fml:x & fml:x < tls.handshakes.end(fml:a)",
        "<<<\n\t    >>>",
        "{ip.endpoint.protocol(fml:ep) := ip.udp; ip.endpoint.addr(fml:ep) := (server_addr if (fml:ep_id = endpoint_id.server | fml:ep_id = endpoint_id.server_alt) else (mim_addr if (fml:ep_id = endpoint_id.mim) else client_addr)); ip.endpoint.port(fml:ep) := (client_port if (fml:ep_id = endpoint_id.client) else (mim_port_in if (fml:ep_id = endpoint_id.mim) else (victim_port if (fml:ep_id = endpoint_id.victim) else (client_port_alt if (fml:ep_id = endpoint_id.client_alt) else (client_port_vn if (fml:ep_id = endpoint_id.client_vn) else (server_port_alt if (fml:ep_id = endpoint_id.server_alt) else server_port))))))}",
        "{}",
        "assert fml:s = versions.end(fml:a)",
        "assert 0:idx_s <= fml:x & fml:x < arr_streamid_s.end(fml:a)",
        "{assert fml:y < fml:x & (Y:vector[tls.handshake].domain < fml:x -> Y <= fml:y); assert vector[tls.handshake].domain.succ(fml:y,fml:x)}",
        "{}",
        "{}",
        "assert 0:quic_packet_0rtt.idx <= fml:x & fml:x < quic_packet_0rtt.retired_cids.end(fml:a)",
        "if _generating {assert fml:scid = the_cid; assert 4:stream_id <= frame.max_stream_data.id(fml:f) & frame.max_stream_data.id(fml:f) <= 16}",
        "{}",
        "assert quic_packet.arr.value(fml:a,fml:x) = fml:y",
        "{}",
        "{}",
        "<<<\n            const char * session_file = getenv(\"initial_max_stream_data_bidi_local\");\n            FILE *fp;\n            size_t len = 0;\n            ssize_t read;\n            char * line = NULL;\n            if(session_file != NULL) {\n                fp = fopen(session_file,\"r\");\n                read = getline(&line, &len, fp);\n                fclose(fp);\n                bool is_error = false;\n                if(line != NULL) { \n                    i = (uint32_t) std::stoll(line);\n                }\n            }\n        >>>",
        "assert quic_packet_retry.arr.end(fml:a) = fml:s & quic_packet_retry.arr.value(fml:a,X) = fml:y",
        "<<<\n                if ((`vector[tls.compression_method].domain`)`fml:a`.size() > 0)\n                    `fml:res` = `fml:a`.back();\n            >>>",
        "assert 0:quic_packet_retry.idx <= fml:s",
        "{}",
        "{}",
        "<<<\n                if ((`tls_extensions.domain`)`fml:a`.size() > 0)\n                    `fml:res` = `fml:a`.back();\n            >>>",
        "{}",
        "<<<\n                for (unsigned i = 0; i < `fml:a`.size()/2; i++) {\n                    std::swap(`fml:a`[i],`fml:a`[`fml:a`.size()-i-1]);\n                }\n            >>>",
        "assert 0:index <= fml:x & fml:x < versions_bv.end(fml:a)",
        "fml:y := fml:x - 1",
        "assert tls_extensions.value(fml:a,fml:x) = fml:y",
        "{}",
        "<<<\n\t        if (0 <= `fml:x` && `fml:x` < (`vector[tls.compression_method].domain`)`fml:a`.size()) \n\t            `fml:y` = `fml:a`[`fml:x`];\n\t    >>>",
        "<<<\n                if ((`forged_protected_quic_packet.idx`)`fml:a`.size() > 0)\n                    `fml:res` = `fml:a`.back();\n            >>>",
        "<<<\n\t        `fml:a`.resize(`fml:s`);\n\t        for (unsigned i = 0; i < `fml:s`; i++)\n\t            `fml:a`[i] = y;\n\t    >>>",
        "<<<\n\t        unsigned __old_size = `fml:a`.size();\n\t        `fml:a`.resize(`fml:s`);\n\t        for (unsigned i = __old_size; i < (unsigned)`fml:s`; i++)\n\t            `fml:a`[i] = v;\n            >>>",
        "<<<\n                if ((`forged_quic_packet.idx`)`fml:a`.size() > 0)\n                    `fml:res` = `fml:a`.back();\n            >>>",
        "assert vector[tls.compression_method].end(fml:a) = 0",
        "assert 0:forged_protected_quic_packet.idx <= fml:x & fml:x < forged_protected_quic_packet.arr.end(fml:a)",
        "{}",
        "servers.server.ep(servers.server.arr.value(servers.servers,fml:n)) := fml:e",
        "{assert tls_extensions.end(fml:a) = tls_extensions.end(old_fml:a); assert tls_extensions.value(fml:a,X) = (fml:y if (X = fml:x) else tls_extensions.value(old_fml:a,X))}",
        "{}",
        "{}",
        "{}",
        "<<<\n                for (unsigned i = 0; i < `fml:a`.size()/2; i++) {\n                    std::swap(`fml:a`[i],`fml:a`[`fml:a`.size()-i-1]);\n                }\n            >>>",
        "{assert vector[tls.cipher_suite].end(fml:a) = vector[tls.cipher_suite].end(old_fml:a); assert vector[tls.cipher_suite].value(fml:a,X) = (fml:y if (X = fml:x) else vector[tls.cipher_suite].value(old_fml:a,X))}",
        "assert replayed_quic_packet_0rtt.retired_cids.end(fml:a) = 0",
        "<<<\n        const char * session_file = getenv(\"initial_max_stream_id_bidi\");\n        FILE *fp;\n        if(session_file != NULL) {\n            fp = fopen(session_file,\"w\");\n            if(i < 16)\n                fprintf(fp, \"0%x\", i);\n            else \n                fprintf(fp, \"%x\", i);\n            fclose(fp);\n        }\n\n        >>>",
        "{}",
        "{}",
        "{assert forged_quic_packet_retry.retired_cids.end(fml:a) = fml:s; assert 0:forged_quic_packet_retry.idx <= X & X < forged_quic_packet_retry.retired_cids.end(old_fml:a) -> forged_quic_packet_retry.retired_cids.value(fml:a,X) = forged_quic_packet_retry.retired_cids.value(old_fml:a,X); assert forged_quic_packet_retry.retired_cids.end(old_fml:a) <= X & X < fml:s -> forged_quic_packet_retry.retired_cids.value(fml:a,X) = fml:v}",
        "assert replayed_quic_packet_0rtt.retired_cids.end(fml:a) = fml:s & replayed_quic_packet_0rtt.retired_cids.value(fml:a,X) = fml:y",
        "<<<\n\t    >>>",
        "assert 0:idx < fml:x",
        "assert 0:forged_quic_packet_vn.idx <= fml:x & fml:x < forged_quic_packet_vn.arr.end(fml:a)",
        "if _generating {assert fml:scid = the_cid; assert frame.max_data.pos(fml:f) = 4000}\nelse {assert ~(max_data_set(fml:scid) & max_data_val(fml:scid) > frame.max_data.pos(fml:f)); local loc:tp {loc:tp := trans_params(fml:scid); if initial_max_data.is_set(loc:tp) {}}}",
        "{}",
        "local loc:dcid {loc:dcid := replayed_quic_packet_0rtt.dst_cid(fml:pkt); local loc:scid {loc:scid := replayed_quic_packet_0rtt.src_cid(fml:pkt); if cid_mapped(loc:dcid) {loc:dcid := cid_to_aid(loc:dcid)}; if fml:src = client_alt | fml:dst = client_alt {migration_done := true}; assert replayed_quic_packet_0rtt.ptype(fml:pkt) = quic_packet_type.zero_rtt; local loc:pn_app_space {loc:pn_app_space := quic_packet_type.one_rtt; assert ~sent_pkt(loc:scid,loc:pn_app_space,replayed_quic_packet_0rtt.seq_num(fml:pkt)); sent_pkt(loc:scid,loc:pn_app_space,replayed_quic_packet_0rtt.seq_num(fml:pkt)) := true; assert loc:scid = initial_scid & loc:dcid = initial_dcid; assert num_queued_frames_rtt(loc:scid) > 0; assert replayed_quic_packet_0rtt.payload(fml:pkt) = queued_frames_rtt(loc:scid); assert connected(loc:dcid) -> connected_to(loc:dcid) = loc:scid; local loc:0 {call loc:0 := replayed_quic_packet_0rtt.long(fml:pkt); assert conn_seen(loc:scid) & loc:0 & is_client(loc:scid) -> conn_requested(fml:src,fml:dst,loc:scid)}}}}",
        "fml:y := fml:x + 1",
        "{}",
        "{assert stream_data.end(fml:a) = stream_data.end(old_fml:a); assert stream_data.value(fml:a,X) = (fml:y if (X = fml:x) else stream_data.value(old_fml:a,X))}",
        "<<<\n    res.val = c.val * 2;\n    >>>",
        "{assert connected(fml:dcid) & connected_to(fml:dcid) = fml:scid; assert fml:e = quic_packet_type.one_rtt & established_1rtt_keys(fml:scid); assert num_queued_frames(fml:scid) > 0 -> fml:e = queued_level(fml:scid); assert connected(fml:scid) & connected_to(fml:scid) = fml:dcid; assert frame.application_close.reason_phrase_length(fml:f) = stream_data.end(frame.application_close.reason_phrase(fml:f)); conn_closed(fml:scid) := true; call handle_transport_error(frame.application_close.err_code(fml:f))}",
        "<<<\n\t        if (0 <= `fml:x` && `fml:x` < (`tls_hand_extensions.domain`)`fml:a`.size()) \n\t            `fml:y` = `fml:a`[`fml:x`];\n\t    >>>",
        "<<<\n                for (unsigned i = 0; i < `fml:b`.size(); i++)\n\t            `fml:a`.push_back(`fml:b`[i]);\n            >>>",
        "assert quic_packet_retry.retired_cids.end(fml:a) = fml:s & quic_packet_retry.retired_cids.value(fml:a,X) = fml:y",
        "{assert quic_packet_retry.retired_cids.end(fml:a) = quic_packet_retry.retired_cids.end(old_fml:a); assert quic_packet_retry.retired_cids.value(fml:a,X) = (fml:y if (X = fml:x) else quic_packet_retry.retired_cids.value(old_fml:a,X))}",
        "{}",
        "<<<\n                for (unsigned i = 0; i < `fml:b`.size(); i++)\n\t            `fml:a`.push_back(`fml:b`[i]);\n            >>>",
        "<<<\n\t        if (0 <= `fml:x` && `fml:x` < (`vector[tls.compression_method].domain`)`fml:a`.size()) \n\t            `fml:a`[`fml:x`] = `fml:y`;\n\t    >>>",
        "{}",
        "<<<\n                for (unsigned i = 0; i < `fml:b`.size(); i++)\n\t            `fml:a`.push_back(`fml:b`[i]);\n            >>>",
        "{}",
        "assert 0:tls_hand_extensions.domain <= fml:s",
        "<<<\n                for (unsigned i = 0; i < `fml:a`.size()/2; i++) {\n                    std::swap(`fml:a`[i],`fml:a`[`fml:a`.size()-i-1]);\n                }\n            >>>",
        "{assert quic_packet_coal_0rtt.arr.end(fml:a) = fml:s; assert 0:quic_packet_coal_0rtt.idx <= X & X < quic_packet_coal_0rtt.arr.end(old_fml:a) -> quic_packet_coal_0rtt.arr.value(fml:a,X) = quic_packet_coal_0rtt.arr.value(old_fml:a,X); assert quic_packet_coal_0rtt.arr.end(old_fml:a) <= X & X < fml:s -> quic_packet_coal_0rtt.arr.value(fml:a,X) = fml:v}",
        "<<<\n                if ((`quic_packet_vn.idx`)`fml:a`.size() > 0)\n                    `fml:res` = `fml:a`.back();\n            >>>",
        "{}",
        "<<<\n\t    >>>",
        "<<<\n                for (unsigned i = 0; i < `fml:a`.size()/2; i++) {\n                    std::swap(`fml:a`[i],`fml:a`[`fml:a`.size()-i-1]);\n                }\n            >>>",
        "{assert fml:x < fml:y & (fml:x < Y -> fml:y <= Y); assert vector[tls.handshake].domain.succ(fml:x,fml:y)}",
        "{}",
        "<<<\n        pnum_len = (pkt[0] & 0x3) + 1;\n        >>>",
        "<<<\n                if ((`frame.ack_ecn.range.idx`)`fml:a`.size() > 0)\n                    `fml:res` = `fml:a`.back();\n            >>>",
        "<<<\n\t        unsigned __old_size = `fml:a`.size();\n\t        `fml:a`.resize(`fml:s`);\n\t        for (unsigned i = __old_size; i < (unsigned)`fml:s`; i++)\n\t            `fml:a`[i] = v;\n            >>>",
        "<<<\n\t        `fml:a`.push_back(`fml:v`);\n            >>>",
        "<<<\n\t    std::vector<char> buf(y.size());\n\t    std::copy(y.begin(),y.end(),buf.begin());\n\t    `quic_deser_zerortt` des(buf);\n\t    __deser(des,x);\n\t    >>>",
        "<<<\n\t        unsigned __old_size = `fml:a`.size();\n\t        `fml:a`.resize(`fml:s`);\n\t        for (unsigned i = __old_size; i < (unsigned)`fml:s`; i++)\n\t            `fml:a`[i] = v;\n            >>>",
        "{zero_length_token := false; token_saved := true; retry_sent(C) := false; retry_recv(C) := false; retry_response(C) := false; header_retry := 0xF6:stream_pos; retry_client_test := false}",
        "<<<\n                for (unsigned i = 0; i < `fml:a`.size()/2; i++) {\n                    std::swap(`fml:a`[i],`fml:a`[`fml:a`.size()-i-1]);\n                }\n            >>>",
        "{}",
        "assert 0:frame.ack.range.idx <= fml:s",
        "assert 0:forged_quic_packet.idx < fml:x",
        "<<<\n\t        `fml:a`.push_back(`fml:v`);\n            >>>",
        "{}",
        "{}",
        "<<<\n\t        `fml:a`.push_back(`fml:v`);\n            >>>",
        "{tls_api.upper.open(fml:c) := false; tls_api.upper.established(fml:c) := false}",
        "assert servers.server.arr.end(fml:a) = fml:s & servers.server.arr.value(fml:a,X) = fml:y",
        "<<<\n\t        if (`fml:a`.size() > 0) {\n\t            a.pop_back();\n\t        }\n            >>>",
        "{}",
        "<<<\n\t        if (0 <= `fml:x` && `fml:x` < (`idx_r`)`fml:a`.size()) \n\t            `fml:y` = `fml:a`[`fml:x`];\n\t    >>>",
        "<<<\n\t        `fml:a`.resize(`fml:s`);\n\t        for (unsigned i = 0; i < `fml:s`; i++)\n\t            `fml:a`[i] = y;\n\t    >>>",
        "<<<\n\t        unsigned __old_size = `fml:a`.size();\n\t        `fml:a`.resize(`fml:s`);\n\t        for (unsigned i = __old_size; i < (unsigned)`fml:s`; i++)\n\t            `fml:a`[i] = v;\n            >>>",
        "<<<\n\t        if (0 <= `fml:x` && `fml:x` < (`index`)`fml:a`.size()) \n\t            `fml:y` = `fml:a`[`fml:x`];\n\t    >>>",
        "assert 0:quic_packet_retry.idx <= fml:s",
        "<<<        picotls_connection *s = `tls_api.upper.foo.cid_map`[c];\n        std::cerr << \"lower.recv   s \"   << s << \"\\n\";\n        std::vector<char> &input = s->input;\n        for (unsigned i = 0; i < data.size(); i++) {\n            input.push_back(data[i]);\n        }\n        // TODO: make the epoch a parameter of this call\n        // For now, we assume that the epochs come in order\n        size_t in_epoch = ptls_get_read_epoch(s->gs);\n        picotls_do_handshake(s,in_epoch,&(s->input[0]),s->input.size());\n        s->input.clear();\n        >>>",
        "<<<\n            const char * session_file = getenv(\"initial_max_data\");\n            FILE *fp;\n            size_t len = 0;\n            ssize_t read;\n            char * line = NULL;\n            if(session_file != NULL) {\n                fp = fopen(session_file,\"r\");\n                read = getline(&line, &len, fp);\n                fclose(fp);\n                bool is_error = false;\n                if(line != NULL) { \n                    i = (uint32_t) std::stoll(line);\n                }\n            }\n        >>>",
        "{}",
        "{}",
        "{}",
        "{}",
        "{ack_delay_exponent.is_set(fml:s) := true; ack_delay_exponent.value(fml:s) := fml:p}",
        "{}",
        "{}",
        "{}",
        "{}",
        "assert 0:forged_protected_quic_packet.idx <= fml:x & fml:x < forged_protected_quic_packet.arr.end(fml:a)",
        "{}",
        "{}",
        "{}",
        "{}",
        "{}",
        "{}",
        "{}",
        "{assert quic_packet_retry.arr.end(fml:a) = quic_packet_retry.arr.end(old_fml:a); assert quic_packet_retry.arr.value(fml:a,X) = (fml:y if (X = fml:x) else quic_packet_retry.arr.value(old_fml:a,X))}",
        "<<<\n\t        if (`fml:a`.size() > 0) {\n\t            a.pop_back();\n\t        }\n            >>>",
        "local loc:0 {call loc:0 := dst_is_generated_tls(fml:dst); if loc:0 {local loc:0 {call loc:0 := src_tls_id(fml:dst); call tls_api.lower.recv(loc:0, fml:data, 0:tls_api.lower.level)}}}",
        "fake_client.tls_id := fml:e",
        "{header_retry := bfe[0][7](stream_data.value(fml:spkt,0)); local loc:dcil {loc:dcil := bfe[0][7](stream_data.value(fml:spkt,5)); local loc:0 {call loc:0 := prot.bytes_to_cid(stream_data.segment(fml:spkt,6,6 + loc:dcil)); local loc:dcid {loc:dcid := loc:0; local loc:scil {loc:scil := bfe[0][7](stream_data.value(fml:spkt,6 + loc:dcil)); local loc:0 {call loc:0 := prot.bytes_to_cid(stream_data.segment(fml:spkt,7 + loc:dcil,7 + loc:dcil + loc:scil)); local loc:scid {loc:scid := loc:0; call export_length_cid_extension(loc:scil, loc:dcil); local loc:0 {call loc:0 := pkt_serdes_retry.from_bytes(fml:spkt); local loc:pkt {loc:pkt := loc:0; quic_packet_retry.ptype(loc:pkt) := quic_packet_type.retry; call recv_retry_pkt(fml:src, fml:dst, loc:pkt); call infer_tls_events_retry(fml:src, fml:dst, loc:pkt); retry_token(loc:dcid) := quic_packet_retry.token(loc:pkt); if stream_data.end(quic_packet_retry.token(loc:pkt)) = 0 {zero_length_token := true}; retry_response(loc:dcid) := true; call packet_event_retry(fml:src, fml:dst, loc:pkt)}}}}}}}}}",
        "local loc:dcid {loc:dcid := forged_quic_packet_vn.dst_cid(fml:pkt); local loc:scid {loc:scid := forged_quic_packet_vn.src_cid(fml:pkt); if cid_mapped(loc:dcid) {loc:dcid := cid_to_aid(loc:dcid)}; if fml:src = client_alt | fml:dst = client_alt {migration_done := true}; assert mim_agent.nat_configured}}",
        "assert 0:quic_packet_retry.idx <= fml:x & fml:x < quic_packet_retry.retired_cids.end(fml:a)",
        "{}",
        "<<<\n\t        if (0 <= `fml:x` && `fml:x` < (`vector[tls.cipher_suite].domain`)`fml:a`.size()) \n\t            `fml:y` = `fml:a`[`fml:x`];\n\t    >>>",
        "<<<\n\t        if (0 <= `fml:x` && `fml:x` < (`forged_protected_quic_packet.idx`)`fml:a`.size()) \n\t            `fml:a`[`fml:x`] = `fml:y`;\n\t    >>>",
        "<<<\n                if ((`quic_packet_retry.idx`)`fml:a`.size() > 0)\n                    `fml:res` = `fml:a`.back();\n            >>>",
        "{}",
        "{assert frame.ack.range.arr.end(fml:a) > frame.ack.range.arr.end(old_fml:a) & ~(frame.ack.range.arr.end(old_fml:a) < X & X < frame.ack.range.arr.end(fml:a)); assert 0:frame.ack.range.idx <= X & X < frame.ack.range.arr.end(old_fml:a) -> frame.ack.range.arr.value(fml:a,X) = frame.ack.range.arr.value(old_fml:a,X); assert frame.ack.range.arr.value(fml:a,frame.ack.range.arr.end(old_fml:a)) = fml:v}",
        "{}",
        "{assert arr_streamid_r.end(fml:a) = arr_streamid_r.end(old_fml:a); assert arr_streamid_r.value(fml:a,X) = (fml:y if (X = fml:x) else arr_streamid_r.value(old_fml:a,X))}",
        "{}",
        "assert 0:forged_quic_packet_retry.idx <= fml:x & fml:x < forged_quic_packet_retry.arr.end(fml:a)",
        "{if ~_generating {call handle_transport_error(frame.stop_sending.err_code(fml:f))}; stream_seen(fml:scid,frame.stop_sending.id(fml:f)) := true; call enqueue_frame(fml:scid, fml:f, fml:e, false)}",
        "local loc:pn_offset {loc:pn_offset := 0:stream_pos; if prot.hdr_long(fml:header) {loc:pn_offset := fml:hdr_len - fml:pnum_pos}\nelse {loc:pn_offset := 1:stream_pos + 8}; fml:sample := fml:packetByte; local loc:sample_offset {loc:sample_offset := loc:pn_offset + 4; if loc:sample_offset + fml:sample_size > stream_data.end(fml:packetByte) {local loc:diff {loc:diff := (loc:sample_offset + fml:sample_size) - stream_data.end(fml:packetByte); local loc:i {loc:i := 0:stream_pos; while loc:i < loc:diff\n{call fml:sample := stream_data.append(fml:sample, 0x00:byte); loc:i := loc:i + 1}}}}}}",
        "{}",
        "{if ~stream_frame_restransmitted(fml:id) {receiving_recv(fml:id) := false; receiving_sizeKnown(fml:id) := true}; call lastest_stream_id_receiving(fml:seq) := arr_streamid_r.append(lastest_stream_id_receiving(fml:seq), fml:id); call lastest_pkt_num_receiving := arr_pkt_num_r.append(lastest_pkt_num_receiving, fml:seq)}",
        "{}",
        "{assert fml:y < fml:x & (Y:stream_pos < fml:x -> Y <= fml:y); assert stream_pos.succ(fml:y,fml:x)}",
        "assert 0:forged_quic_packet_retry.idx <= fml:s",
        "{}",
        "{}",
        "<<<\n\t        if (0 <= `fml:x` && `fml:x` < (`clients.client.idx`)`fml:a`.size()) \n\t            `fml:a`[`fml:x`] = `fml:y`;\n\t    >>>",
        "mim_agent.tls_id := fml:e",
        "{}",
        "{assert connected(fml:dcid) & connected_to(fml:dcid) = fml:scid; if _generating {assert fml:e ~= quic_packet_type.initial & fml:e ~= quic_packet_type.handshake; assert ~conn_closed(fml:scid)}; assert fml:e = quic_packet_type.handshake -> established_handshake_keys(fml:scid); assert fml:e = quic_packet_type.one_rtt -> established_1rtt_keys(fml:scid); assert fml:e ~= quic_packet_type.version_negociation & fml:e ~= quic_packet_type.retry & fml:e ~= quic_packet_type.zero_rtt; assert num_queued_frames(fml:scid) > 0 -> fml:e = queued_level(fml:scid); local loc:idx {loc:idx := 0:frame.ack.range.idx; local loc:last {loc:last := frame.ack.largest_acked(fml:f); if max_acked(fml:dcid,fml:e) < loc:last {max_acked(fml:dcid,fml:e) := loc:last}; assert frame.ack.range.arr.end(frame.ack.ack_ranges(fml:f)) > 0; local loc:some_new_ack {loc:some_new_ack := false; while loc:idx < frame.ack.range.arr.end(frame.ack.ack_ranges(fml:f))\n{local loc:ack_range {loc:ack_range := frame.ack.range.arr.value(frame.ack.ack_ranges(fml:f),loc:idx); assert loc:idx > 0 -> frame.ack.range.gap(loc:ack_range) < loc:last - 1; local loc:upper {loc:upper := loc:last - (frame.ack.range.gap(loc:ack_range) + 2 if (loc:idx > 0) else 0); assert frame.ack.range.ranges(loc:ack_range) <= loc:upper; loc:last := loc:upper - frame.ack.range.ranges(loc:ack_range); local loc:jdx {loc:jdx := loc:last; while loc:jdx <= loc:upper\n{assert sent_pkt(fml:dcid,fml:e,loc:jdx); if pkt_has_close(fml:dcid,fml:e,loc:jdx) {conn_draining(fml:scid) := true}; if ~acked_pkt(fml:dcid,fml:e,loc:jdx) {loc:some_new_ack := true}; acked_pkt(fml:dcid,fml:e,loc:jdx) := true; loc:jdx := loc:jdx + 1}; call loc:idx := frame.ack.range.idx.next(loc:idx)}}}}; if _generating {assert loc:some_new_ack; assert frame.ack.largest_acked(fml:f) = max_acked(fml:dcid,fml:e)}}}}}",
        "<<<\n\t        `fml:s` = (`vector[transport_parameter].domain`) `fml:a`.size();\n\t    >>>",
        "assert fml:s = quic_packet_coal_0rtt.retired_cids.end(fml:a)",
        "assert 0:forged_protected_quic_packet.idx <= fml:x & fml:x < forged_protected_quic_packet.retired_cids.end(fml:a)",
        "assert 0:index <= fml:x & fml:x < forged_pkts.end(fml:a)",
        "assert fml:s = cids.end(fml:a)",
        "fml:y := fml:x - 1",
        "{assert quic_packet.retired_cids.end(fml:a) = fml:s; assert 0:quic_packet.idx <= X & X < quic_packet.retired_cids.end(old_fml:a) -> quic_packet.retired_cids.value(fml:a,X) = quic_packet.retired_cids.value(old_fml:a,X); assert quic_packet.retired_cids.end(old_fml:a) <= X & X < fml:s -> quic_packet.retired_cids.value(fml:a,X) = fml:v}",
        "{}",
        "<<<\n\t        `fml:a`.push_back(`fml:v`);\n            >>>",
        "<<<\n\t        `fml:s` = (`quic_packet_coal_0rtt.idx`) `fml:a`.size();\n\t    >>>",
        "fml:res := replayed_quic_packet_0rtt.ptype(fml:pkt) ~= quic_packet_type.one_rtt",
        "<<<\n                if ((`tls_hand_extensions.domain`)`fml:a`.size() > 0)\n                    `fml:res` = `fml:a`.back();\n            >>>",
        "{initial_keys_set(C) := false; tp_client_set := false; client_non_zero_scil := false; zero_rtt_allowed := false; zero_rtt_sent := false; send_connection_close := false}",
        "{}",
        "local loc:tppkt {loc:tppkt := fml:ppkt; call loc:tppkt := stream_data.set(loc:tppkt, 1:stream_pos, 0xff:byte); call loc:tppkt := stream_data.set(loc:tppkt, 2:stream_pos, 0x00:byte); call loc:tppkt := stream_data.set(loc:tppkt, 3:stream_pos, 0x00:byte); call loc:tppkt := stream_data.set(loc:tppkt, 4:stream_pos, 0x1d:byte); fml:rppkt := loc:tppkt}",
        "{}",
        "<<<\n\t        `fml:s` = (`quic_packet_0rtt.idx`) `fml:a`.size();\n\t    >>>",
        "{}",
        "{}",
        "assert 0:index <= fml:s",
        "{client_server.enc_level := quic_packet_type.initial; ip.endpoint.protocol(client_server.ep_in) := ip.udp; ip.endpoint.addr(client_server.ep_in) := server_addr; ip.endpoint.port(client_server.ep_in) := client_port; ip.endpoint.protocol(client_server.ep_out) := ip.udp; ip.endpoint.addr(client_server.ep_out) := server_addr; ip.endpoint.port(client_server.ep_out) := server_port}",
        "{}",
        "{assert prot.arr.end(fml:a) = fml:s; assert 0:prot.idx <= X & X < prot.arr.end(old_fml:a) -> prot.arr.value(fml:a,X) = prot.arr.value(old_fml:a,X); assert prot.arr.end(old_fml:a) <= X & X < fml:s -> prot.arr.value(fml:a,X) = fml:v}",
        "{}",
        "{assert fml:x < fml:y & (fml:x < Y -> fml:y <= Y); assert vector[tls.cipher_suite].domain.succ(fml:x,fml:y)}",
        "{assert fml:y < fml:x & (Y:clients.client.idx < fml:x -> Y <= fml:y); assert clients.client.idx.succ(fml:y,fml:x)}",
        "{}",
        "assert 0:forged_quic_packet_retry.idx <= fml:s",
        "<<<\n\t        unsigned __old_size = `fml:a`.size();\n\t        `fml:a`.resize(`fml:s`);\n\t        for (unsigned i = __old_size; i < (unsigned)`fml:s`; i++)\n\t            `fml:a`[i] = v;\n            >>>",
        "assert fml:s = bytes.end(fml:a)",
        "{}",
        "local loc:jdx_r {loc:jdx_r := 0:jdx_r; while loc:jdx_r < arr_pkt_num_r.end(lastest_pkt_num_receiving)\n{local loc:seq {loc:seq := arr_pkt_num_r.value(lastest_pkt_num_receiving,loc:jdx_r); local loc:idx_r {loc:idx_r := 0:idx_r; while loc:seq <= fml:largest_acked & loc:idx_r < arr_streamid_r.end(lastest_stream_id_receiving(loc:seq))\n{local loc:sid {loc:sid := arr_streamid_r.value(lastest_stream_id_receiving(loc:seq),loc:idx_r); if receiving_resetRecvd(loc:sid) {call handle_receiving_resetRead(loc:sid)}\nelse {if receiving_sizeKnown(loc:sid) {call handle_receiving_dataRecvd(loc:sid)}}; call loc:idx_r := idx_r.next(loc:idx_r)}}; call loc:jdx_r := jdx_r.next(loc:jdx_r)}}}}",
        "{}",
        "{}",
        "{}",
        "fml:y := fml:x - 1",
        "assert frame.ack.range.arr.end(fml:a) = fml:s & frame.ack.range.arr.value(fml:a,X) = fml:y",
        "{}",
        "{assert tls.handshakes.end(fml:a) = fml:s; assert 0:tls.handshakes.domain <= X & X < tls.handshakes.end(old_fml:a) -> tls.handshakes.value(fml:a,X) = tls.handshakes.value(old_fml:a,X); assert tls.handshakes.end(old_fml:a) <= X & X < fml:s -> tls.handshakes.value(fml:a,X) = fml:v}",
        "{}",
        "assert fml:s = arr_pkt_num_s.end(fml:a)",
        "<<<\n\t    std::vector<char> buf(y.size());\n\t    std::copy(y.begin(),y.end(),buf.begin());\n\t    `quic_deser_zerortt` des(buf);\n\t    __deser(des,x);\n\t    >>>",
        "{}",
        "{}",
        "call enqueue_frame(fml:scid, fml:f, fml:e, false)",
        "{}",
        "{}",
        "{}",
        "<<<\n                for (unsigned i = 0; i < `fml:b`.size(); i++)\n\t            `fml:a`.push_back(`fml:b`[i]);\n            >>>",
        "<<<\n\t        `fml:s` = (`frame.ack.range.idx`) `fml:a`.size();\n\t    >>>",
        "assert 0:frame.idx <= fml:s",
        "{assert servers.server.arr.end(fml:a) = servers.server.arr.end(old_fml:a); assert servers.server.arr.value(fml:a,X) = (fml:y if (X = fml:x) else servers.server.arr.value(old_fml:a,X))}",
        "{}",
        "assert 0:quic_packet_coal_0rtt.idx <= fml:x & fml:x < quic_packet_coal_0rtt.arr.end(fml:a)",
        "<<<\n\t    >>>",
        "<<<\n            const char * session_file = getenv(\"initial_max_stream_data_uni\");\n            FILE *fp;\n            size_t len = 0;\n            ssize_t read;\n            char * line = NULL;\n            if(session_file != NULL) {\n                fp = fopen(session_file,\"r\");\n                read = getline(&line, &len, fp);\n                fclose(fp);\n                bool is_error = false;\n                if(line != NULL) { \n                    i = (uint32_t) std::stoll(line);\n                }\n            }\n        >>>",
        "{}",
        "<<<\n\t        if (0 <= `fml:x` && `fml:x` < (`index`)`fml:a`.size()) \n\t            `fml:a`[`fml:x`] = `fml:y`;\n\t    >>>",
        "{}",
        "assert 0:forged_protected_quic_packet.idx <= fml:s",
        "if _generating {local loc:0 {call loc:0 := pkt_serdes_0rtt.to_bytes(fml:pkt); local loc:spkt {loc:spkt := loc:0; local loc:0 {call loc:0 := prot.arr.empty; local loc:pkts {loc:pkts := loc:0; local loc:0 {call loc:0 := src_tls_id(fml:src); local loc:tls_id {loc:tls_id := loc:0; local loc:0 {call loc:0 := reference_pkt_num(loc:spkt, false); local loc:rnum {loc:rnum := loc:0; local loc:0 {call loc:0 := prot.encrypt_rtt(loc:tls_id, loc:rnum, loc:spkt); local loc:ppkt {loc:ppkt := loc:0; call loc:pkts := prot.arr.append(loc:pkts, loc:ppkt); local loc:0,loc:1 {call loc:0 := endpoint_to_pid(fml:src); call loc:1 := endpoint_to_socket(fml:src); call net.send(loc:0, loc:1, fml:dst, loc:pkts)}; zero_rtt_sent := true}}}}}}}}}}}",
        "{}",
        "{assert fml:x < fml:y & (fml:x < Y -> fml:y <= Y); assert frame.ack_ecn.range.idx.succ(fml:x,fml:y)}",
        "{}",
        "<<<\n\t        if (`fml:a`.size() > 0) {\n\t            a.pop_back();\n\t        }\n            >>>",
        "assert 0:index <= fml:x & fml:x < forged_pkts.end(fml:a)",
        "<<<\n        bytes.push_back(0x40 | (val >> 8) & 0x3f);\n        bytes.push_back(val & 0xff);\n        >>>",
        "{assert fml:y < fml:x & (Y:quic_packet_vn.idx < fml:x -> Y <= fml:y); assert quic_packet_vn.idx.succ(fml:y,fml:x)}",
        "{}",
        "<<<\n       srand((unsigned) time(0)); //fixed or random seed ?\n       res = 0;\n       res = ::rand()%32767 + (min+1);\n       std::cerr << \"greater random: \" << res << \"\\n\";\n       >>>",
        "assert 0:idx_s <= fml:s",
        "{assert versions.end(fml:a) = versions.end(old_fml:a); assert versions.value(fml:a,X) = (fml:y if (X = fml:x) else versions.value(old_fml:a,X))}",
        "<<<\n\t    std::vector<char> buf(y.size());\n\t    std::copy(y.begin(),y.end(),buf.begin());\n\t    `quic_deser_forged` des(buf);\n\t    __deser(des,x);\n\t    >>>",
        "{enable_time_stamp.is_set(fml:s) := true; enable_time_stamp.value(fml:s) := fml:p}",
        "{}",
        "assert 0:prot.idx < fml:x",
        "assert 0:frame.ack.range.idx <= fml:x & fml:x < frame.ack.range.arr.end(fml:a)",
        "{initial_max_stream_id_uni.is_set(fml:s) := true; initial_max_stream_id_uni.value(fml:s) := fml:p}",
        "<<<\n\t        `fml:a`.push_back(`fml:v`);\n            >>>",
        "{}",
        "<<<\n\t        `fml:a`.push_back(`fml:v`);\n            >>>",
        "{if ~stream_frame_restransmitted(fml:id) & ~sdb_frame_restransmitted(fml:id) {sending_ready(fml:id) := false; sending_send(fml:id) := true}; call lastest_stream_id_sender(fml:seq) := arr_streamid_s.append(lastest_stream_id_sender(fml:seq), fml:id); call lastest_pkt_num_sender := arr_pkt_num_s.append(lastest_pkt_num_sender, fml:seq)}",
        "{assert forged_pkts.end(fml:pkt) > 0; assert mim_agent.nat_configured; assert fml:src ~= fml:dst; assert ~(fml:src = mim_agent.ep_out & fml:dst = mim_agent.ep_in); assert ~(fml:dst = mim_agent.ep_out & fml:src = mim_agent.ep_in); assert ~packed_forwarded_arr(fml:pkt)}",
        "{}",
        "<<<\n\t        if (0 <= `fml:x` && `fml:x` < (`forged_quic_packet_retry.idx`)`fml:a`.size()) \n\t            `fml:a`[`fml:x`] = `fml:y`;\n\t    >>>",
        "<<<\n                if ((`frame.ack.range.idx`)`fml:a`.size() > 0)\n                    `fml:res` = `fml:a`.back();\n            >>>",
        "local loc:0 {call loc:0 := socket_endpoint(fml:host, fml:s); local loc:dst {loc:dst := loc:0; local loc:idx {loc:idx := prot.arr.begin(fml:pkts); while loc:idx < prot.arr.end(fml:pkts)\n{local loc:ppkt {loc:ppkt := prot.arr.value(fml:pkts,loc:idx); local loc:0 {call loc:0 := src_tls_id(loc:dst); local loc:tls_id {loc:tls_id := loc:0; local loc:header {loc:header := stream_data.value(loc:ppkt,0); local loc:hdr_type {loc:hdr_type := bfe[0][6](stream_data.value(loc:ppkt,0)); local loc:tt {loc:tt := bvand(loc:hdr_type,0x30); local loc:is_long {loc:is_long := bvand(0x80:byte,loc:header) ~= 0; local loc:version {loc:version := stream_data.segment(loc:ppkt,1,1 + 4); local loc:0 {call loc:0 := bytes_to_version(loc:version); local loc:bversion {loc:bversion := loc:0; local loc:ptype {loc:ptype := bvand(0x30:byte,loc:header); if zrtt_pkt_set & ~zrtt_pkt_process {zrtt_pkt_process := true; local loc:0 {call loc:0 := reference_pkt_num(last_zrtt_pkt, true); local loc:rnum {loc:rnum := loc:0; local loc:0 {call loc:0 := prot.decrypt(loc:tls_id, loc:rnum, last_zrtt_pkt); local loc:res {loc:res := loc:0; if tls_api.upper.ok(loc:res) {if loc:bversion ~= 0 {call tls_client_0rtt_response(fml:src, loc:dst, tls_api.upper.data(loc:res))}}\nelse {call undecryptable_packet_event(fml:host, fml:src, loc:dst, last_zrtt_pkt)}}}}}}; if bvand(stream_data.value(loc:ppkt,0),0xf0) = 0xc0 {call tls_client_initial_response(fml:src, loc:dst, loc:ppkt)}; local loc:0 {call loc:0 := reference_pkt_num(loc:ppkt, true); local loc:rnum {loc:rnum := loc:0; local loc:0 {call loc:0 := prot.decrypt(loc:tls_id, loc:rnum, loc:ppkt); local loc:res {loc:res := loc:0; if tls_api.upper.ok(loc:res) {local loc:0 {call loc:0 := is_padding_packet(tls_api.upper.payload(loc:res)); local loc:is_pad {loc:is_pad := loc:0; if loc:is_pad {call padding_packet_event(fml:host, fml:src, loc:dst, loc:ppkt)}\nelse {if loc:tt = 0x10 & loc:bversion ~= 0 {call tls_client_0rtt_response(fml:src, loc:dst, tls_api.upper.data(loc:res))}\nelse {local loc:0 {call loc:0 := pkt_serdes.from_bytes(tls_api.upper.data(loc:res)); local loc:pkt {loc:pkt := loc:0; local loc:0 {call loc:0 := prot.get_pnum_len(tls_api.upper.data(loc:res)); call quic_packet.seq_num(loc:pkt) := prot.correct_pnum(loc:rnum, quic_packet.seq_num(loc:pkt), loc:0)}; call recv_packet(fml:host, fml:src, loc:dst, loc:pkt); call infer_tls_events(fml:src, loc:dst, loc:pkt); call packet_event(fml:src, loc:dst, loc:pkt); if nclients > 1 {local loc:cdx {loc:cdx := cids.begin(the_cids); while loc:cdx < cids.end(the_cids)\n{local loc:tcid {loc:tcid := cids.value(the_cids,loc:cdx); if bvand(stream_data.value(loc:ppkt,0),0xf0) = 0xc0 & ~connected(loc:tcid) {call app_server_open_event(loc:dst, fml:src, loc:tcid, quic_packet.src_cid(loc:pkt))}; call loc:cdx := index.next(loc:cdx)}}}}\nelse {if bvand(stream_data.value(loc:ppkt,0),0xf0) = 0xc0 & ~connected(the_cid) {call app_server_open_event(loc:dst, fml:src, the_cid, quic_packet.src_cid(loc:pkt))}}}}}}}}}\nelse {call undecryptable_packet_event(fml:host, fml:src, loc:dst, loc:ppkt)}; call loc:idx := prot.idx.next(loc:idx)}}}}}}}}}}}}}}}}; version_not_found(fml:src) := false; call show_last_datagram_size(last_datagram_received_size); if ~first_datagram_received {first_datagram_received := true}; last_datagram_received_size := 0:stream_pos}}}",
        "{}",
        "{}",
        "{}",
        "<<<\n            std::vector<char> buf(x.size() - pos);\n            std::copy(x.begin()+pos,x.end(),buf.begin());\n            `tls_deser` ds(buf);\n\n            try { \n                std::cerr << x << std::endl;\n                std::cerr << pos << std::endl;\n                std::cerr << std::endl;\n               __deser(ds,res.value);\n               res.pos = pos + ds.pos;\n            }\n\n            // If deserialization failure, print out the packet for\n            // debugging purposes.\n\n            catch(deser_err &err) {\n                std::cerr << \"error: failed to deserialize data\" << std::endl;\n                //std::cerr << err.what() << std::endl;\n                std::cerr << \"hex dump of data follows.\" << std::endl;\n                for (unsigned i = 0; i < buf.size(); i++) {\n                    if (i > 0 && i % 16 == 0) \n                        std::cerr << std::endl;\n                    if (i == ds.pos)\n                        fprintf(stderr,\"*\");\n                    fprintf(stderr,\"%02X\",((unsigned)buf[i]) & 0xff);\n                }\n                std::cerr << std::endl;\n                exit(1);\n            }\n\n        >>>",
        "{}",
        "{}",
        "{assert servers.server.arr.end(fml:a) > servers.server.arr.end(old_fml:a) & ~(servers.server.arr.end(old_fml:a) < X & X < servers.server.arr.end(fml:a)); assert 0:servers.server.idx <= X & X < servers.server.arr.end(old_fml:a) -> servers.server.arr.value(fml:a,X) = servers.server.arr.value(old_fml:a,X); assert servers.server.arr.value(fml:a,servers.server.arr.end(old_fml:a)) = fml:v}",
        "<<<\n\t        `fml:s` = (`frame.idx`) `fml:a`.size();\n\t    >>>",
        "{}",
        "local loc:dcid {loc:dcid := forged_quic_packet.dst_cid(fml:pkt); local loc:0 {call loc:0 := forged_quic_packet.long(fml:pkt); local loc:scid {loc:scid := (forged_quic_packet.src_cid(fml:pkt) if loc:0 else connected_to(loc:dcid)); if cid_mapped(loc:dcid) {loc:dcid := cid_to_aid(loc:dcid)}; if forged_quic_packet.ptype(fml:pkt) = quic_packet_type.initial {initial_token := forged_quic_packet.token(fml:pkt); if ~conn_seen(loc:dcid) {if ~zero_rtt_sent {call show_initial_request_initial; local loc:0 {call loc:0 := src_tls_id(fml:src); call tls_client_initial_request(fml:src, fml:dst, loc:dcid, forged_quic_packet.pversion(fml:pkt), loc:0)}}; conn_requested(fml:src,fml:dst,loc:scid) := true}; cid_to_token(loc:dcid) := forged_quic_packet.token(fml:pkt)}; conn_seen(loc:scid) := true; if queued_ack_eliciting(loc:scid) {ack_credit(loc:dcid) := ack_credit(loc:dcid) + 1}; if ~queued_non_ack(loc:scid) {ack_credit(loc:scid) := ack_credit(loc:scid) - 1}; if queued_non_probing(loc:scid) {if forged_quic_packet.ptype(fml:pkt) = quic_packet_type.one_rtt {if forged_quic_packet.seq_num(fml:pkt) >= hi_non_probing(loc:scid) {hi_non_probing(loc:scid) := forged_quic_packet.seq_num(fml:pkt); hi_non_probing_endpoint(loc:scid,fml:src) := true}}\nelse {hi_non_probing_endpoint(loc:scid,fml:src) := true}}; if queued_close(loc:scid) {pkt_has_close(loc:scid,forged_quic_packet.ptype(fml:pkt),forged_quic_packet.seq_num(fml:pkt)) := true}; if conn_draining(loc:scid) {draining_pkt_sent(loc:scid) := true}; if forged_quic_packet.ptype(fml:pkt) = quic_packet_type.initial & ~first_initial_send & zero_rtt_allowed {first_initial_send := true; initial_scid := loc:scid; initial_dcid := loc:dcid; queued_level(the_cid) := quic_packet_type.zero_rtt}\nelse {first_initial_send := false}; call queued_frames(loc:scid) := frame.arr.empty; queued_non_probing(loc:scid) := false; queued_non_ack(loc:scid) := false; queued_close(loc:scid) := false; num_queued_frames(loc:scid) := 0:frame.idx; queued_ack_eliciting(loc:scid) := false}}}",
        "local loc:0 {call loc:0 := socket_endpoint(fml:host, fml:s); local loc:dst {loc:dst := loc:0; local loc:idx {loc:idx := prot.arr.begin(fml:pkts); while loc:idx < prot.arr.end(fml:pkts)\n{local loc:ppkt {loc:ppkt := prot.arr.value(fml:pkts,loc:idx); local loc:0 {call loc:0 := src_tls_id(loc:dst); local loc:tls_id {loc:tls_id := loc:0; local loc:header {loc:header := stream_data.value(loc:ppkt,0); local loc:hdr_type {loc:hdr_type := bfe[0][6](stream_data.value(loc:ppkt,0)); local loc:tt {loc:tt := bvand(loc:hdr_type,0x30); local loc:is_long {loc:is_long := bvand(0x80:byte,loc:header) ~= 0; local loc:version {loc:version := stream_data.segment(loc:ppkt,1,1 + 4); local loc:0 {call loc:0 := bytes_to_version(loc:version); local loc:bversion {loc:bversion := loc:0; local loc:ptype {loc:ptype := bvand(0x30:byte,loc:header); if zrtt_pkt_set & ~zrtt_pkt_process {zrtt_pkt_process := true; local loc:0 {call loc:0 := reference_pkt_num(last_zrtt_pkt, true); local loc:rnum {loc:rnum := loc:0; local loc:0 {call loc:0 := prot.decrypt(loc:tls_id, loc:rnum, last_zrtt_pkt); local loc:res {loc:res := loc:0; if tls_api.upper.ok(loc:res) {if loc:bversion ~= 0 {call tls_client_0rtt_response(fml:src, loc:dst, tls_api.upper.data(loc:res))}}\nelse {call undecryptable_packet_event(fml:host, fml:src, loc:dst, last_zrtt_pkt)}}}}}}; if bvand(stream_data.value(loc:ppkt,0),0xf0) = 0xc0 {call tls_client_initial_response(fml:src, loc:dst, loc:ppkt)}; local loc:0 {call loc:0 := reference_pkt_num(loc:ppkt, true); local loc:rnum {loc:rnum := loc:0; local loc:0 {call loc:0 := prot.decrypt(loc:tls_id, loc:rnum, loc:ppkt); local loc:res {loc:res := loc:0; if tls_api.upper.ok(loc:res) {local loc:0 {call loc:0 := is_padding_packet(tls_api.upper.payload(loc:res)); local loc:is_pad {loc:is_pad := loc:0; if loc:is_pad {call padding_packet_event(fml:host, fml:src, loc:dst, loc:ppkt)}\nelse {if loc:tt = 0x10 & loc:bversion ~= 0 {call tls_client_0rtt_response(fml:src, loc:dst, tls_api.upper.data(loc:res))}\nelse {local loc:0 {call loc:0 := pkt_serdes.from_bytes(tls_api.upper.data(loc:res)); local loc:pkt {loc:pkt := loc:0; local loc:0 {call loc:0 := prot.get_pnum_len(tls_api.upper.data(loc:res)); call quic_packet.seq_num(loc:pkt) := prot.correct_pnum(loc:rnum, quic_packet.seq_num(loc:pkt), loc:0)}; call recv_packet(fml:host, fml:src, loc:dst, loc:pkt); call infer_tls_events(fml:src, loc:dst, loc:pkt); call packet_event(fml:src, loc:dst, loc:pkt); if nclients > 1 {local loc:cdx {loc:cdx := cids.begin(the_cids); while loc:cdx < cids.end(the_cids)\n{local loc:tcid {loc:tcid := cids.value(the_cids,loc:cdx); if bvand(stream_data.value(loc:ppkt,0),0xf0) = 0xc0 & ~connected(loc:tcid) {call app_server_open_event(loc:dst, fml:src, loc:tcid, quic_packet.src_cid(loc:pkt))}; call loc:cdx := index.next(loc:cdx)}}}}\nelse {if bvand(stream_data.value(loc:ppkt,0),0xf0) = 0xc0 & ~connected(the_cid) {call app_server_open_event(loc:dst, fml:src, the_cid, quic_packet.src_cid(loc:pkt))}}}}}}}}}\nelse {call undecryptable_packet_event(fml:host, fml:src, loc:dst, loc:ppkt)}; call loc:idx := prot.idx.next(loc:idx)}}}}}}}}}}}}}}}}; version_not_found(fml:src) := false; call show_last_datagram_size(last_datagram_received_size); if ~first_datagram_received {first_datagram_received := true}; last_datagram_received_size := 0:stream_pos}}}",
        "<<<\n\t        `fml:s` = (`forged_protected_quic_packet.idx`) `fml:a`.size();\n\t    >>>",
        "{}",
        "{fml:ok := false; local loc:tp {loc:tp := trans_params(fml:dcid); local loc:kind {loc:kind := get_stream_kind(fml:id); local loc:idhi {loc:idhi := fml:id / 4; if ~(is_client(fml:dcid) <-> get_stream_role(fml:id) = role.client) {if loc:kind = unidir {if initial_max_stream_id_uni.is_set(loc:tp) {fml:ok := loc:idhi < initial_max_stream_id_uni.stream_id_16(initial_max_stream_id_uni.value(loc:tp))}}\nelse {if initial_max_stream_id_bidi.is_set(loc:tp) {fml:ok := loc:idhi < initial_max_stream_id_bidi.stream_id_16(initial_max_stream_id_bidi.value(loc:tp))}}; fml:ok := fml:ok | max_stream_set(fml:dcid,loc:kind) & loc:idhi < max_stream(fml:dcid,loc:kind)}\nelse {fml:ok := stream_seen(fml:dcid,fml:id)}}}}}",
        "<<<\n\t    >>>",
        "assert quic_packet_coal_0rtt.arr.end(fml:a) = fml:s & quic_packet_coal_0rtt.arr.value(fml:a,X) = fml:y",
        "{}",
        "<<<\n                for (unsigned i = 0; i < `fml:b`.size(); i++)\n\t            `fml:a`.push_back(`fml:b`[i]);\n            >>>",
        "assert 0:idx <= fml:x & fml:x < bytes.end(fml:a)",
        "assert 0:index <= fml:x & fml:x < versions_bv.end(fml:a)",
        "{initial_source_connection_id.is_set(fml:s) := true; initial_source_connection_id.value(fml:s) := fml:p}",
        "fml:y := fml:x - 1",
        "<<<\n\t    `quic_ser_vn` ser;\n\t    __ser(ser,x);\n\t    y.resize(ser.res.size());\n\t    for (unsigned i = 0; i < ser.res.size(); i++)\n\t        y[i] = (unsigned char) ser.res[i];\n//\t    std::copy(ser.res.begin(),ser.res.end(),y.begin());\n\t    >>>",
        "{assert forged_pkts.end(fml:a) > forged_pkts.end(old_fml:a) & ~(forged_pkts.end(old_fml:a) < X & X < forged_pkts.end(fml:a)); assert 0:index <= X & X < forged_pkts.end(old_fml:a) -> forged_pkts.value(fml:a,X) = forged_pkts.value(old_fml:a,X); assert forged_pkts.value(fml:a,forged_pkts.end(old_fml:a)) = fml:v}",
        "{}",
        "{}",
        "{assert fml:y < fml:x & (Y:vector[transport_parameter].domain < fml:x -> Y <= fml:y); assert vector[transport_parameter].domain.succ(fml:y,fml:x)}",
        "{assert forged_quic_packet_retry.arr.end(fml:a) = fml:s; assert 0:forged_quic_packet_retry.idx <= X & X < forged_quic_packet_retry.arr.end(old_fml:a) -> forged_quic_packet_retry.arr.value(fml:a,X) = forged_quic_packet_retry.arr.value(old_fml:a,X); assert forged_quic_packet_retry.arr.end(old_fml:a) <= X & X < fml:s -> forged_quic_packet_retry.arr.value(fml:a,X) = fml:v}",
        "{zrtt_pkt_set := false; zrtt_pkt_process := false; call last_zrtt_pkt := stream_data.empty}",
        "assert fml:d = http_request_file.contents",
        "{}",
        "{assert vector[tls.psk_identity].end(fml:a) = fml:s; assert 0:vector[tls.psk_identity].domain <= X & X < vector[tls.psk_identity].end(old_fml:a) -> vector[tls.psk_identity].value(fml:a,X) = vector[tls.psk_identity].value(old_fml:a,X); assert vector[tls.psk_identity].end(old_fml:a) <= X & X < fml:s -> vector[tls.psk_identity].value(fml:a,X) = fml:v}",
        "{sending_dataSent(fml:id) := false; sending_ready(fml:id) := true; sending_dataRecvd(fml:id) := true}",
        "{}",
        "{}",
        "{}",
        "{}",
        "assert 0:servers.server.idx <= fml:s",
        "assert quic_packet_retry.retired_cids.end(fml:a) = 0",
        "assert 0:vector[tls.handshake].domain <= fml:s",
        "assert prot.arr.end(fml:a) = fml:s & prot.arr.value(fml:a,X) = fml:y",
        "{}",
        "{}",
        "{}",
        "<<<\n\t        if (0 <= `fml:x` && `fml:x` < (`jdx_r`)`fml:a`.size()) \n\t            `fml:y` = `fml:a`[`fml:x`];\n\t    >>>",
        "{}",
        "{}",
        "fml:y := fml:x - 1",
        "<<<\n\t        if (`fml:a`.size() > 0) {\n\t            a.pop_back();\n\t        }\n            >>>",
        "fml:y := fml:x - 1",
        "<<<\n\t        if (0 <= `fml:x` && `fml:x` < (`frame.ack.range.idx`)`fml:a`.size()) \n\t            `fml:a`[`fml:x`] = `fml:y`;\n\t    >>>",
        "assert versions_bv.end(fml:a) = fml:s & versions_bv.value(fml:a,X) = fml:y",
        "<<<\n                for (unsigned i = 0; i < `fml:b`.size(); i++)\n\t            `fml:a`.push_back(`fml:b`[i]);\n            >>>",
        "{assert quic_packet.ptype(fml:pkt) ~= quic_packet_type.zero_rtt & quic_packet.ptype(fml:pkt) ~= quic_packet_type.version_negociation & quic_packet.ptype(fml:pkt) ~= quic_packet_type.retry; local loc:dcid {loc:dcid := quic_packet.dst_cid(fml:pkt); local loc:scid {loc:scid := quic_packet.src_cid(fml:pkt); if cid_mapped(loc:dcid) {loc:dcid := cid_to_aid(loc:dcid)}; local loc:0 {call loc:0 := tls_api.upper.get_old_new_token; assert stream_data.end(quic_packet.token(fml:pkt)) ~= 0 -> retry_sent(client_initial_rcid) | retry_recv(loc:scid) | quic_packet.token(fml:pkt) = loc:0}; if (fml:src = client_alt | fml:dst = client_alt) & nclients = 1 {migration_done := true}; assert connected(loc:dcid) | quic_packet.ptype(fml:pkt) = quic_packet_type.initial & is_client(loc:scid) & loc:dcid = nonce_cid(loc:scid); local loc:0 {call loc:0 := quic_packet.long(fml:pkt); if loc:0 {assert connected(loc:dcid) -> connected_to(loc:dcid) = loc:scid}\nelse {loc:scid := connected_to(loc:dcid)}}; if retry_sent(loc:dcid) & ~_generating & ~zero_length_token & quic_packet.ptype(fml:pkt) = quic_packet_type.initial {assert loc:dcid = client_initial_rcid}; assert quic_packet.ptype(fml:pkt) = queued_level(loc:scid); if _generating {assert quic_packet.seq_num(fml:pkt) = last_pkt_num(loc:scid,quic_packet.ptype(fml:pkt)) + 0x1}; last_pkt_num(loc:scid,quic_packet.ptype(fml:pkt)) := quic_packet.seq_num(fml:pkt); assert ~sent_pkt(loc:scid,quic_packet.ptype(fml:pkt),quic_packet.seq_num(fml:pkt)); sent_pkt(loc:scid,quic_packet.ptype(fml:pkt),quic_packet.seq_num(fml:pkt)) := true; assert num_queued_frames(loc:scid) > 0; assert quic_packet.payload(fml:pkt) = queued_frames(loc:scid); local loc:0 {call loc:0 := quic_packet.long(fml:pkt); assert conn_seen(loc:scid) & loc:0 & is_client(loc:scid) -> conn_requested(fml:src,fml:dst,loc:scid)}; assert conn_seen(loc:dcid) -> hi_non_probing_endpoint(loc:dcid,fml:dst); assert ~_generating & ~queued_non_ack(loc:scid) -> ack_credit(loc:scid) > 0; if conn_draining(loc:scid) {assert ~draining_pkt_sent(loc:scid) & queued_close(loc:scid)}}}}",
        "{}",
        "assert 0:jdx_s < fml:x",
        "local loc:cdx {loc:cdx := 0:servers.server.idx; while loc:cdx < 2\n{if fml:src = servers.server.ep(servers.server.arr.value(servers.servers,loc:cdx)) {fml:tls_id := servers.server.tls_id(servers.server.arr.value(servers.servers,loc:cdx))}; call loc:cdx := servers.server.idx.next(loc:cdx)}}",
        "{}",
        "{}",
        "{}",
        "<<<\n\t    >>>",
        "{}",
        "fml:y := fml:x - 1",
        "{}",
        "<<<\n    res = 0;\n    if(const char* env_p2 = std::getenv(\"TEST_TYPE\")) { \n      if(strcmp(env_p2, \"client\") == 0 || cond) {\n         if(const char* env_p3 = std::getenv(\"TEST_DCIL\")) {\n            std::cerr << \"TEST_DCIL \" << env_p3 << \"\\n\";\n\t        res = atoi(env_p3);\n         } \n         else \n\t        res = 8;\n      } else \n\t  res = 8;\n    } else \n      res = 8;\n    std::cerr <<  \"dcid_size_cl size: \" <<  res << \"\\n\";\n    >>>",
        "{if _generating {local loc:tp {loc:tp := trans_params(the_cid); if version_negociated {assert fml:src = client_vn}\nelse {if ~disable_active_migration.is_set(loc:tp) {if ~migration_done | allowed_multiple_migration {assert fml:src = client.ep | fml:src = client_alt}\nelse {assert fml:src = client_alt}}\nelse {assert fml:src = client.ep}}; assert fml:dst = server.ep; if quic_packet.ptype(fml:pkt) = quic_packet_type.initial & retry_recv(quic_packet.src_cid(fml:pkt)) & ~zero_length_token {assert quic_packet.token(fml:pkt) = retry_token(quic_packet.src_cid(fml:pkt))}\nelse {assert stream_data.end(quic_packet.token(fml:pkt)) = 0}}}; if final_version = 0x00000000 {local loc:0 {call loc:0 := quic_packet.long(fml:pkt); assert loc:0 -> quic_packet.pversion(fml:pkt) = initial_version}}\nelse {local loc:0 {call loc:0 := quic_packet.long(fml:pkt); assert loc:0 -> quic_packet.pversion(fml:pkt) = final_version}}}",
        "<<<\n\t        `fml:s` = (`forged_protected_quic_packet.idx`) `fml:a`.size();\n\t    >>>",
        "assert 0:jdx_r <= fml:s",
        "<<<\n\t        if (0 <= `fml:x` && `fml:x` < (`idx_s`)`fml:a`.size()) \n\t            `fml:a`[`fml:x`] = `fml:y`;\n\t    >>>",
        "{}",
        "{assert fml:y < fml:x & (Y:forged_quic_packet_retry.idx < fml:x -> Y <= fml:y); assert forged_quic_packet_retry.idx.succ(fml:y,fml:x)}",
        "{}",
        "{}",
        "assert fml:s = arr_streamid_r.end(fml:a)",
        "<<<\n    res.resize(len);\n    for (unsigned i = 0; i < len; i++) {\n        res[len-i-1] = 0xff & (c.val >> (i * 8));\n    }\n    >>>",
        "{}",
        "http_request_file.pending(C) := false",
        "{}",
        "assert 0:vector[tls.compression_method].domain <= fml:x & fml:x < vector[tls.compression_method].end(fml:a)",
        "<<<\n\t    >>>",
        "{}",
        "<<<\n\t        unsigned __old_size = `fml:a`.size();\n\t        `fml:a`.resize(`fml:s`);\n\t        for (unsigned i = __old_size; i < (unsigned)`fml:s`; i++)\n\t            `fml:a`[i] = v;\n            >>>",
        "{}",
        "{assert fml:y < fml:x & (Y:frame.ack.range.idx < fml:x -> Y <= fml:y); assert frame.ack.range.idx.succ(fml:y,fml:x)}",
        "{}",
        "{}",
        "{assert connected(fml:dcid) & connected_to(fml:dcid) = fml:scid; assert fml:e = quic_packet_type.one_rtt & established_1rtt_keys(fml:scid); assert num_queued_frames(fml:scid) > 0 -> fml:e = queued_level(fml:scid); assert frame.retire_connection_id.seq_num(fml:f) <= max_seq_num(fml:dcid)}",
        "{}",
        "<<<\n\t    >>>",
        "{}",
        "<<<\n\t        `fml:a`.resize(`fml:s`);\n\t        for (unsigned i = 0; i < `fml:s`; i++)\n\t            `fml:a`[i] = y;\n\t    >>>",
        "fml:y := fml:x - 1",
        "{}",
        "<<<\n\t        if (0 <= `fml:x` && `fml:x` < (`forged_quic_packet_vn.idx`)`fml:a`.size()) \n\t            `fml:a`[`fml:x`] = `fml:y`;\n\t    >>>",
        "assert 0:forged_quic_packet.idx <= fml:x & fml:x < forged_quic_packet.retired_cids.end(fml:a)",
        "{}",
        "local loc:tp {loc:tp := trans_params(fml:dcid); fml:max := 0:stream_pos; if initial_max_data.is_set(loc:tp) {fml:max := initial_max_data.stream_pos_32(initial_max_data.value(loc:tp))}; if max_data_set(fml:dcid) {local loc:smax {loc:smax := max_data_val(fml:dcid); fml:max := (loc:smax if (loc:smax > fml:max) else fml:max)}}; fml:max := fml:max - conn_total_data(fml:dcid)}",
        "<<<\n\t        `fml:a`.resize(`fml:s`);\n\t        for (unsigned i = 0; i < `fml:s`; i++)\n\t            `fml:a`[i] = y;\n\t    >>>",
        "{path_challenge_pending(fml:scid,frame.path_response.data(fml:f)) := false; call enqueue_frame(fml:scid, fml:f, fml:e, true)}",
        "{}",
        "<<<\n                for (unsigned i = 0; i < `fml:a`.size()/2; i++) {\n                    std::swap(`fml:a`[i],`fml:a`[`fml:a`.size()-i-1]);\n                }\n            >>>",
        "{}",
        "{}",
        "{}",
        "assert fml:s = quic_packet_vn.arr.end(fml:a)",
        "{}",
        "assert ip_endpoints.end(fml:a) = fml:s & ip_endpoints.value(fml:a,X) = fml:y",
        "local loc:idx {loc:idx := vector[transport_parameter].begin(quic_transport_parameters.transport_parameters(fml:tps)); while loc:idx < vector[transport_parameter].end(quic_transport_parameters.transport_parameters(fml:tps))\n{if some self:unknown_transport_parameter. *>(vector[transport_parameter].value(quic_transport_parameters.transport_parameters(fml:tps),loc:idx),self:unknown_transport_parameter) {call trans_params(fml:scid) := unknown_transport_parameter.set(self:unknown_transport_parameter, trans_params(fml:scid))}\nelse {if some self:unknown_ignore. *>(vector[transport_parameter].value(quic_transport_parameters.transport_parameters(fml:tps),loc:idx),self:unknown_ignore) {call trans_params(fml:scid) := unknown_ignore.set(self:unknown_ignore, trans_params(fml:scid))}\nelse {if some self:version_information. *>(vector[transport_parameter].value(quic_transport_parameters.transport_parameters(fml:tps),loc:idx),self:version_information) {call trans_params(fml:scid) := version_information.set(self:version_information, trans_params(fml:scid))}\nelse {if some self:min_ack_delay. *>(vector[transport_parameter].value(quic_transport_parameters.transport_parameters(fml:tps),loc:idx),self:min_ack_delay) {call trans_params(fml:scid) := min_ack_delay.set(self:min_ack_delay, trans_params(fml:scid))}\nelse {if some self:enable_time_stamp. *>(vector[transport_parameter].value(quic_transport_parameters.transport_parameters(fml:tps),loc:idx),self:enable_time_stamp) {call trans_params(fml:scid) := enable_time_stamp.set(self:enable_time_stamp, trans_params(fml:scid))}\nelse {if some self:grease_quic_bit. *>(vector[transport_parameter].value(quic_transport_parameters.transport_parameters(fml:tps),loc:idx),self:grease_quic_bit) {call trans_params(fml:scid) := grease_quic_bit.set(self:grease_quic_bit, trans_params(fml:scid))}\nelse {if some self:loss_bits. *>(vector[transport_parameter].value(quic_transport_parameters.transport_parameters(fml:tps),loc:idx),self:loss_bits) {call trans_params(fml:scid) := loss_bits.set(self:loss_bits, trans_params(fml:scid))}\nelse {if some self:retry_source_connection_id. *>(vector[transport_parameter].value(quic_transport_parameters.transport_parameters(fml:tps),loc:idx),self:retry_source_connection_id) {call trans_params(fml:scid) := retry_source_connection_id.set(self:retry_source_connection_id, trans_params(fml:scid))}\nelse {if some self:initial_source_connection_id. *>(vector[transport_parameter].value(quic_transport_parameters.transport_parameters(fml:tps),loc:idx),self:initial_source_connection_id) {call trans_params(fml:scid) := initial_source_connection_id.set(self:initial_source_connection_id, trans_params(fml:scid))}\nelse {if some self:active_connection_id_limit. *>(vector[transport_parameter].value(quic_transport_parameters.transport_parameters(fml:tps),loc:idx),self:active_connection_id_limit) {call trans_params(fml:scid) := active_connection_id_limit.set(self:active_connection_id_limit, trans_params(fml:scid))}\nelse {if some self:max_ack_delay. *>(vector[transport_parameter].value(quic_transport_parameters.transport_parameters(fml:tps),loc:idx),self:max_ack_delay) {call trans_params(fml:scid) := max_ack_delay.set(self:max_ack_delay, trans_params(fml:scid))}\nelse {if some self:initial_max_stream_data_uni. *>(vector[transport_parameter].value(quic_transport_parameters.transport_parameters(fml:tps),loc:idx),self:initial_max_stream_data_uni) {call trans_params(fml:scid) := initial_max_stream_data_uni.set(self:initial_max_stream_data_uni, trans_params(fml:scid))}\nelse {if some self:initial_max_stream_data_bidi_remote. *>(vector[transport_parameter].value(quic_transport_parameters.transport_parameters(fml:tps),loc:idx),self:initial_max_stream_data_bidi_remote) {call trans_params(fml:scid) := initial_max_stream_data_bidi_remote.set(self:initial_max_stream_data_bidi_remote, trans_params(fml:scid))}\nelse {if some self:disable_active_migration. *>(vector[transport_parameter].value(quic_transport_parameters.transport_parameters(fml:tps),loc:idx),self:disable_active_migration) {call trans_params(fml:scid) := disable_active_migration.set(self:disable_active_migration, trans_params(fml:scid))}\nelse {if some self:initial_max_stream_id_uni. *>(vector[transport_parameter].value(quic_transport_parameters.transport_parameters(fml:tps),loc:idx),self:initial_max_stream_id_uni) {call trans_params(fml:scid) := initial_max_stream_id_uni.set(self:initial_max_stream_id_uni, trans_params(fml:scid))}\nelse {if some self:ack_delay_exponent. *>(vector[transport_parameter].value(quic_transport_parameters.transport_parameters(fml:tps),loc:idx),self:ack_delay_exponent) {call trans_params(fml:scid) := ack_delay_exponent.set(self:ack_delay_exponent, trans_params(fml:scid))}\nelse {if some self:stateless_reset_token. *>(vector[transport_parameter].value(quic_transport_parameters.transport_parameters(fml:tps),loc:idx),self:stateless_reset_token) {call trans_params(fml:scid) := stateless_reset_token.set(self:stateless_reset_token, trans_params(fml:scid))}\nelse {if some self:max_packet_size. *>(vector[transport_parameter].value(quic_transport_parameters.transport_parameters(fml:tps),loc:idx),self:max_packet_size) {call trans_params(fml:scid) := max_packet_size.set(self:max_packet_size, trans_params(fml:scid))}\nelse {if some self:preferred_address. *>(vector[transport_parameter].value(quic_transport_parameters.transport_parameters(fml:tps),loc:idx),self:preferred_address) {call trans_params(fml:scid) := preferred_address.set(self:preferred_address, trans_params(fml:scid))}\nelse {if some self:max_idle_timeout. *>(vector[transport_parameter].value(quic_transport_parameters.transport_parameters(fml:tps),loc:idx),self:max_idle_timeout) {call trans_params(fml:scid) := max_idle_timeout.set(self:max_idle_timeout, trans_params(fml:scid))}\nelse {if some self:initial_max_stream_id_bidi. *>(vector[transport_parameter].value(quic_transport_parameters.transport_parameters(fml:tps),loc:idx),self:initial_max_stream_id_bidi) {call trans_params(fml:scid) := initial_max_stream_id_bidi.set(self:initial_max_stream_id_bidi, trans_params(fml:scid))}\nelse {if some self:initial_max_data. *>(vector[transport_parameter].value(quic_transport_parameters.transport_parameters(fml:tps),loc:idx),self:initial_max_data) {call trans_params(fml:scid) := initial_max_data.set(self:initial_max_data, trans_params(fml:scid))}\nelse {if some self:initial_max_stream_data_bidi_local. *>(vector[transport_parameter].value(quic_transport_parameters.transport_parameters(fml:tps),loc:idx),self:initial_max_stream_data_bidi_local) {call trans_params(fml:scid) := initial_max_stream_data_bidi_local.set(self:initial_max_stream_data_bidi_local, trans_params(fml:scid))}\nelse {if some self:original_destination_connection_id. *>(vector[transport_parameter].value(quic_transport_parameters.transport_parameters(fml:tps),loc:idx),self:original_destination_connection_id) {call trans_params(fml:scid) := original_destination_connection_id.set(self:original_destination_connection_id, trans_params(fml:scid))}\nelse {call trans_params(fml:scid) := transport_parameter.set(vector[transport_parameter].value(quic_transport_parameters.transport_parameters(fml:tps),loc:idx), trans_params(fml:scid))}}}}}}}}}}}}}}}}}}}}}}}}; call loc:idx := vector[transport_parameter].domain.next(loc:idx)}; if ~_generating {if client_non_zero_scil & fml:scid ~= 1 & (client_initial_version = 0x00000001 | client_initial_version = 0x00000001) {assert initial_source_connection_id.is_set(trans_params(fml:scid))}}; if fml:is_client_hello {assert ~stateless_reset_token.is_set(trans_params(fml:scid))}\nelse {if ~_generating & fml:scid ~= 1 {assert original_destination_connection_id.is_set(trans_params(fml:scid))}}; if ~fml:is_client_hello & (retry_recv(client_initial_rcid) | retry_sent(client_initial_rcid)) & ~zero_length_token {assert retry_source_connection_id.is_set(trans_params(fml:scid)); assert retry_source_connection_id.rcid(retry_source_connection_id.value(trans_params(fml:scid))) = client_initial_rcid}; if min_ack_delay.is_set(trans_params(fml:scid)) & max_ack_delay.is_set(trans_params(fml:scid)) {local loc:min_ack_milli {loc:min_ack_milli := min_ack_delay.exponent_8(min_ack_delay.value(trans_params(fml:scid))) * 1000; assert loc:min_ack_milli < max_ack_delay.exponent_8(max_ack_delay.value(trans_params(fml:scid)))}}; if zero_rtt_server_test & ~fml:is_client_hello {if initial_max_stream_data_uni.is_set(trans_params(fml:scid)) {assert initial_max_stream_data_uni.stream_pos_32(initial_max_stream_data_uni.value(trans_params(fml:scid))) >= initial_max_stream_data_uni_server_0rtt}; if initial_max_stream_data_bidi_remote.is_set(trans_params(fml:scid)) {assert initial_max_stream_data_bidi_remote.stream_pos_32(initial_max_stream_data_bidi_remote.value(trans_params(fml:scid))) >= initial_max_stream_data_bidi_remote_server_0rtt}; if initial_max_data.is_set(trans_params(fml:scid)) {assert initial_max_data.stream_pos_32(initial_max_data.value(trans_params(fml:scid))) >= initial_max_data_server_0rtt}; if initial_max_stream_data_bidi_local.is_set(trans_params(fml:scid)) {assert initial_max_stream_data_bidi_local.stream_pos_32(initial_max_stream_data_bidi_local.value(trans_params(fml:scid))) >= initial_max_stream_data_bidi_local_server_0rtt}; if initial_max_stream_id_bidi.is_set(trans_params(fml:scid)) {assert initial_max_stream_id_bidi.stream_id_16(initial_max_stream_id_bidi.value(trans_params(fml:scid))) >= initial_max_stream_id_bidi_server_0rtt}; if active_connection_id_limit.is_set(trans_params(fml:scid)) {assert active_connection_id_limit.stream_pos_32(active_connection_id_limit.value(trans_params(fml:scid))) >= active_connection_id_limit_server_0rtt}}; if ~fml:is_client_hello {if initial_max_stream_data_uni.is_set(trans_params(fml:scid)) {call tls_api.upper.save_initial_max_stream_data_uni(initial_max_stream_data_uni.stream_pos_32(initial_max_stream_data_uni.value(trans_params(fml:scid))))}; if initial_max_stream_data_bidi_remote.is_set(trans_params(fml:scid)) {call tls_api.upper.save_initial_max_stream_data_bidi_remote(initial_max_stream_data_bidi_remote.stream_pos_32(initial_max_stream_data_bidi_remote.value(trans_params(fml:scid))))}; if initial_max_data.is_set(trans_params(fml:scid)) {call tls_api.upper.save_initial_max_data(initial_max_data.stream_pos_32(initial_max_data.value(trans_params(fml:scid))))}; if initial_max_stream_data_bidi_local.is_set(trans_params(fml:scid)) {call tls_api.upper.save_initial_max_stream_data_bidi_local(initial_max_stream_data_bidi_local.stream_pos_32(initial_max_stream_data_bidi_local.value(trans_params(fml:scid))))}; if initial_max_stream_id_bidi.is_set(trans_params(fml:scid)) {call tls_api.upper.save_initial_max_stream_id_bidi(initial_max_stream_id_bidi.stream_id_16(initial_max_stream_id_bidi.value(trans_params(fml:scid))))}; if active_connection_id_limit.is_set(trans_params(fml:scid)) {call tls_api.upper.save_active_connection_id_limit(active_connection_id_limit.stream_pos_32(active_connection_id_limit.value(trans_params(fml:scid))))}}}",
        "{}",
        "assert 0:idx_r <= fml:s",
        "assert 0:vector[tls.psk_identity].domain <= fml:s",
        "assert 0:index <= fml:s",
        "fml:y := fml:x - 1",
        "{}",
        "<<<\n\t        if (`fml:a`.size() > 0) {\n\t            a.pop_back();\n\t        }\n            >>>",
        "<<<\n\t    >>>",
        "{assert connected(fml:dcid) & connected_to(fml:dcid) = fml:scid; assert fml:e = quic_packet_type.one_rtt & established_1rtt_keys(fml:scid); assert num_queued_frames(fml:scid) > 0 -> fml:e = queued_level(fml:scid); assert connected(fml:scid) & connected_to(fml:scid) = fml:dcid; assert ~conn_closed(fml:scid); local loc:kind {loc:kind := bidir; if ~(max_stream_set(fml:dcid,loc:kind) & frame.max_streams_bidi.id(fml:f) < max_stream(fml:dcid,loc:kind)) {max_stream_set(fml:dcid,loc:kind) := true; max_stream(fml:dcid,loc:kind) := frame.max_streams_bidi.id(fml:f)}}}",
        "{assert forged_pkts.end(fml:pkt) > 0; assert mim_agent.nat_configured; assert fml:src ~= fml:dst; assert ~(fml:src = mim_agent.ep_out & fml:dst = mim_agent.ep_in); assert ~(fml:dst = mim_agent.ep_out & fml:src = mim_agent.ep_in); assert ~packed_forwarded_arr(fml:pkt)}",
        "{}",
        "{assert replayed_quic_packet_0rtt.arr.end(fml:a) = fml:s; assert 0:replayed_quic_packet_0rtt.idx <= X & X < replayed_quic_packet_0rtt.arr.end(old_fml:a) -> replayed_quic_packet_0rtt.arr.value(fml:a,X) = replayed_quic_packet_0rtt.arr.value(old_fml:a,X); assert replayed_quic_packet_0rtt.arr.end(old_fml:a) <= X & X < fml:s -> replayed_quic_packet_0rtt.arr.value(fml:a,X) = fml:v}",
        "{}",
        "{call queued_frames(fml:scid) := frame.arr.append(queued_frames(fml:scid), fml:f); num_queued_frames(fml:scid) := frame.arr.end(queued_frames(fml:scid)); queued_level(fml:scid) := fml:e; if ~fml:probing {queued_non_probing(fml:scid) := true}; if ~(exists V. *>(fml:f,V:frame.ack)) {queued_non_ack(fml:scid) := true}; if exists V. *>(fml:f,V:frame.path_challenge) {queued_challenge(fml:scid) := true}; if (exists V. *>(fml:f,V:frame.connection_close)) | (exists V. *>(fml:f,V)) {queued_close(fml:scid) := true}; if ~(exists V. *>(fml:f,V:frame.ack)) & ~(exists V. *>(fml:f,V)) {queued_ack_eliciting(fml:scid) := true}}",
        "<<<\n\t        `fml:a`.push_back(`fml:v`);\n            >>>",
        "<<<\n                for (unsigned i = 0; i < `fml:b`.size(); i++)\n\t            `fml:a`.push_back(`fml:b`[i]);\n            >>>",
        "assert forged_quic_packet_vn.arr.end(fml:a) = 0",
        "{}",
        "{}",
        "assert fml:s = forged_quic_packet.retired_cids.end(fml:a)",
        "<<<\n\t        if (`fml:a`.size() > 0) {\n\t            a.pop_back();\n\t        }\n            >>>",
        "{}",
        "assert 0:stream_pos <= fml:x & fml:x < stream_data.end(fml:a)",
        "{}",
        "assert forged_quic_packet.arr.end(fml:a) = fml:s & forged_quic_packet.arr.value(fml:a,X) = fml:y",
        "{second_server.enc_level := quic_packet_type.initial; ip.endpoint.protocol(second_server.ep) := ip.udp; ip.endpoint.addr(second_server.ep) := server_addr; ip.endpoint.port(second_server.ep) := server_port_alt; if ip.endpoint.addr(second_server.ep) = 0x7f000001 | is_mim {ip.endpoint.interface(second_server.ep) := ip.lo}\nelse {ip.endpoint.interface(second_server.ep) := ip.ivy}}",
        "local loc:dcid {loc:dcid := forged_quic_packet_vn.dst_cid(fml:pkt); local loc:scid {loc:scid := forged_quic_packet_vn.src_cid(fml:pkt); if cid_mapped(loc:dcid) {loc:dcid := cid_to_aid(loc:dcid)}}}",
        "<<<\n                for (unsigned i = 0; i < `fml:a`.size()/2; i++) {\n                    std::swap(`fml:a`[i],`fml:a`[`fml:a`.size()-i-1]);\n                }\n            >>>",
        "assert 0:quic_packet.idx <= fml:s",
        "assert quic_packet_retry.arr.end(fml:a) = 0",
        "assert arr_pkt_num_r.end(fml:a) = 0",
        "{call supported_versions := versions.empty; local loc:0 {call loc:0 := stream_data.empty; local loc:v1 {loc:v1 := loc:0; call supported_versions_bv := versions_bv.empty; if iversion = 1 {call loc:v1 := stream_data.append(loc:v1, 0x0:byte); call loc:v1 := stream_data.append(loc:v1, 0x0:byte); call loc:v1 := stream_data.append(loc:v1, 0x0:byte); call loc:v1 := stream_data.append(loc:v1, 0x01:byte); call supported_versions_bv := versions_bv.append(supported_versions_bv, 0x00000001:version); initial_version := 0x00000001:version}\nelse {if iversion = 34 {call loc:v1 := stream_data.append(loc:v1, 0xff:byte); call loc:v1 := stream_data.append(loc:v1, 0x0:byte); call loc:v1 := stream_data.append(loc:v1, 0x0:byte); call loc:v1 := stream_data.append(loc:v1, 0x22:byte); call supported_versions_bv := versions_bv.append(supported_versions_bv, 0xff000022:version); initial_version := 0xff000022:version}\nelse {if iversion = 29 {call loc:v1 := stream_data.append(loc:v1, 0xff:byte); call loc:v1 := stream_data.append(loc:v1, 0x0:byte); call loc:v1 := stream_data.append(loc:v1, 0x0:byte); call loc:v1 := stream_data.append(loc:v1, 0x1d:byte); call supported_versions_bv := versions_bv.append(supported_versions_bv, 0xff00001d:version); initial_version := 0xff00001d:version}\nelse {if iversion = 28 {call loc:v1 := stream_data.append(loc:v1, 0xff:byte); call loc:v1 := stream_data.append(loc:v1, 0x0:byte); call loc:v1 := stream_data.append(loc:v1, 0x0:byte); call loc:v1 := stream_data.append(loc:v1, 0x1c:byte); call supported_versions_bv := versions_bv.append(supported_versions_bv, 0xff00001c:version); initial_version := 0xff00001c:version}\nelse {if iversion = 27 {call loc:v1 := stream_data.append(loc:v1, 0xff:byte); call loc:v1 := stream_data.append(loc:v1, 0x0:byte); call loc:v1 := stream_data.append(loc:v1, 0x0:byte); call loc:v1 := stream_data.append(loc:v1, 0x1b:byte); call supported_versions_bv := versions_bv.append(supported_versions_bv, 0xff00001b:version); initial_version := 0xff00001b:version}}}}}; call supported_versions := versions.append(supported_versions, loc:v1); final_version := 0x0000000:version; version_not_found(E) := false}}}",
        "if fml:e = quic_packet_type.initial & ~zero_rtt_allowed {fml:e := quic_packet_type.handshake}\nelse {if fml:e = quic_packet_type.initial & zero_rtt_allowed {fml:e := quic_packet_type.zero_rtt}\nelse {if fml:e = quic_packet_type.zero_rtt {fml:e := quic_packet_type.handshake}\nelse {fml:e := quic_packet_type.one_rtt}}}",
        "{}",
        "{}",
        "{}",
        "<<<\n                for (unsigned i = 0; i < `fml:a`.size()/2; i++) {\n                    std::swap(`fml:a`[i],`fml:a`[`fml:a`.size()-i-1]);\n                }\n            >>>",
        "{}",
        "{}",
        "<<<\n                for (unsigned i = 0; i < `fml:a`.size()/2; i++) {\n                    std::swap(`fml:a`[i],`fml:a`[`fml:a`.size()-i-1]);\n                }\n            >>>",
        "{fake_client.enc_level := quic_packet_type.initial; ip.endpoint.protocol(fake_client.ep) := ip.udp; ip.endpoint.addr(fake_client.ep) := 0:ip.addr; ip.endpoint.port(fake_client.ep) := 0:ip.port; if ip.endpoint.addr(fake_client.ep) = 0x7f000001 | is_mim {ip.endpoint.interface(fake_client.ep) := ip.lo}\nelse {ip.endpoint.interface(fake_client.ep) := ip.ivy}}",
        "assert fml:s = vector[tls.cipher_suite].end(fml:a)",
        "{}"
    ],
    "delegates": [],
    "states": [],
    "assertions": [],
    "pvars": [],
    "predicates": [],
    "isolates": [
        "frame.arr.spec,frame.arr.impl",
        "vector[tls.cipher_suite].domain.impl,vector[tls.cipher_suite].domain.spec",
        "vector[transport_parameter].spec,vector[transport_parameter].impl",
        "quic_packet_0rtt.arr.spec,quic_packet_0rtt.arr.impl",
        "frame.ack_ecn.range.idx.impl,frame.ack_ecn.range.idx.spec",
        "quic_packet.retired_cids.spec,quic_packet.retired_cids.impl",
        "arr_pkt_num_r.spec,arr_pkt_num_r.impl",
        "prot.idx.impl,prot.idx.spec",
        "forged_quic_packet_vn.arr.spec,forged_quic_packet_vn.arr.impl",
        "quic_packet_retry.arr.spec,quic_packet_retry.arr.impl",
        "forged_protected_pkt_serdes",
        "tls_api.id.impl,tls_api.id.spec",
        "forged_quic_packet_retry.retired_cids.spec,forged_quic_packet_retry.retired_cids.impl",
        "vector[tls.compression_method].spec,vector[tls.compression_method].impl",
        "idx.impl,idx.spec",
        "quic_packet_retry.idx.impl,quic_packet_retry.idx.spec",
        "quic_packet_retry.retired_cids.spec,quic_packet_retry.retired_cids.impl",
        "pkt_serdes_retry",
        "tls.handshakes.spec,tls.handshakes.impl",
        "forged_protected_quic_packet.arr.spec,forged_protected_quic_packet.arr.impl",
        "quic_packet.arr.spec,quic_packet.arr.impl",
        "jdx_r.impl,jdx_r.spec",
        "vector[tls.psk_identity].spec,vector[tls.psk_identity].impl",
        "pkt_serdes_0rtt_coal",
        "bytes.spec,bytes.impl",
        "frame.ack.range.idx.impl,frame.ack.range.idx.spec",
        "tls_api.upper.foo.impl",
        "vector[tls.compression_method].domain.impl,vector[tls.compression_method].domain.spec",
        "forged_quic_packet_vn.idx.impl,forged_quic_packet_vn.idx.spec",
        "replayed_quic_packet_0rtt.idx.impl,replayed_quic_packet_0rtt.idx.spec",
        "prot.arr.spec,prot.arr.impl",
        "frame.ack_ecn.range.arr.spec,frame.ack_ecn.range.arr.impl",
        "frame.ack.range.arr.spec,frame.ack.range.arr.impl",
        "replayed_pkt_serdes_0rtt",
        "quic_packet_coal_0rtt.arr.spec,quic_packet_coal_0rtt.arr.impl",
        "forged_protected_quic_packet.retired_cids.spec,forged_protected_quic_packet.retired_cids.impl",
        "cids.spec,cids.impl",
        "pkt_serdes_vn",
        "tls_extensions.domain.impl,tls_extensions.domain.spec",
        "index.impl,index.spec",
        "quic_packet_coal_0rtt.idx.impl,quic_packet_coal_0rtt.idx.spec",
        "quic_packet_coal_0rtt.retired_cids.spec,quic_packet_coal_0rtt.retired_cids.impl",
        "forged_protected_quic_packet.idx.impl,forged_protected_quic_packet.idx.spec",
        "net",
        "tls_hand_extensions.domain.impl,tls_hand_extensions.domain.spec",
        "vector[tls.handshake].spec,vector[tls.handshake].impl",
        "forged_pkt_serdes_retry",
        "forged_pkt_serdes",
        "arr_pkt_num_s.spec,arr_pkt_num_s.impl",
        "http_request_file",
        "stream_pos.impl,stream_pos.spec",
        "quic_packet_0rtt.idx.impl,quic_packet_0rtt.idx.spec",
        "quic_packet_0rtt.retired_cids.spec,quic_packet_0rtt.retired_cids.impl",
        "arr_streamid_s.spec,arr_streamid_s.impl",
        "quic_packet_vn.arr.spec,quic_packet_vn.arr.impl",
        "forged_quic_packet_retry.idx.impl,forged_quic_packet_retry.idx.spec",
        "forged_pkt_serdes_vn",
        "forged_pkts.spec,forged_pkts.impl",
        "vector[transport_parameter].domain.impl,vector[transport_parameter].domain.spec",
        "vector[tls.extension].spec,vector[tls.extension].impl",
        "tls_extensions.spec,tls_extensions.impl",
        "clients.client.arr.spec,clients.client.arr.impl",
        "forged_quic_packet.retired_cids.spec,forged_quic_packet.retired_cids.impl",
        "this",
        "vector[tls.extension].domain.impl,vector[tls.extension].domain.spec",
        "pkt_serdes",
        "forged_quic_packet.arr.spec,forged_quic_packet.arr.impl",
        "vector[tls.psk_identity].domain.impl,vector[tls.psk_identity].domain.spec",
        "frame.idx.impl,frame.idx.spec",
        "tls.handshakes.domain.impl,tls.handshakes.domain.spec",
        "servers.server.arr.spec,servers.server.arr.impl",
        "quic_packet.idx.impl,quic_packet.idx.spec",
        "pkt_serdes_0rtt",
        "idx_r.impl,idx_r.spec",
        "versions_bv.spec,versions_bv.impl",
        "tls_hand_extensions.spec,tls_hand_extensions.impl",
        "arr_streamid_r.spec,arr_streamid_r.impl",
        "vector[tls.cipher_suite].spec,vector[tls.cipher_suite].impl",
        "idx_s.impl,idx_s.spec",
        "replayed_quic_packet_0rtt.retired_cids.spec,replayed_quic_packet_0rtt.retired_cids.impl",
        "forged_quic_packet_retry.arr.spec,forged_quic_packet_retry.arr.impl",
        "stream_data.spec,stream_data.impl",
        "versions.spec,versions.impl",
        "jdx_s.impl,jdx_s.spec",
        "forged_quic_packet.idx.impl,forged_quic_packet.idx.spec",
        "clients.client.idx.impl,clients.client.idx.spec",
        "vector[tls.handshake].domain.impl,vector[tls.handshake].domain.spec",
        "quic_packet_vn.idx.impl,quic_packet_vn.idx.spec",
        "ip_endpoints.spec,ip_endpoints.impl",
        "servers.server.idx.impl,servers.server.idx.spec",
        "replayed_quic_packet_0rtt.arr.spec,replayed_quic_packet_0rtt.arr.impl"
    ],
    "transitions": [],
    "public_actions": [
        "servers.server.idx.spec.prev[before4]",
        "show_crypto_length",
        "tls_api.upper.decrypt_cipher",
        "quic_packet_0rtt.arr.get",
        "vector[tls.handshake].impl.pop_back[implement95]",
        "quic_packet.retired_cids.size",
        "prot.show_pkt",
        "quic_packet_coal_0rtt.retired_cids.pop_back",
        "frame.new_connection_id.handle",
        "ip_endpoints.impl.append[implement96]",
        "version_information.set",
        "replayed_quic_packet_0rtt.arr.extend",
        "show_fsm_sending_send_event",
        "arr_pkt_num_s.impl.get[implement91]",
        "tls_api.upper.foo.impl.encrypt_cipher[implement368]",
        "tls.handshakes.reverse",
        "app_server_open_event_vn",
        "forged_protected_quic_packet.arr.create",
        "vector[tls.cipher_suite].pop_back",
        "forged_quic_packet.retired_cids.spec.append[after113]",
        "second_server.behavior",
        "forged_quic_packet.arr.impl.create[implement88]",
        "vector[tls.compression_method].impl.empty[implement89]",
        "vector[transport_parameter].spec.set[after108]",
        "tls_api.upper.save_initial_max_stream_data_uni",
        "forged_quic_packet_vn.arr.size",
        "quic_packet_retry.retired_cids.impl.back[implement94]",
        "frame.path_challenge.handle[after306]",
        "tls_api.upper.set_initial_keys",
        "forged_protected_quic_packet.retired_cids.spec.set[before107]",
        "forged_quic_packet_vn.arr.resize",
        "quic_packet.retired_cids.spec.set[after108]",
        "servers.server.set_ep",
        "vector[tls.psk_identity].get",
        "forged_quic_packet_vn.arr.spec.append[after113]",
        "show_last_datagram_size",
        "frame.ack_ecn.range.arr.impl.size[implement92]",
        "original_destination_connection_id.set",
        "quic_packet_0rtt.arr.impl.extend[implement97]",
        "tls_api.id.impl.next[implement16]",
        "arr_pkt_num_r.impl.back[implement94]",
        "forged_quic_packet_retry.retired_cids.impl.extend[implement97]",
        "mim_server_target.init[after454]",
        "vector[tls.psk_identity].pop_back",
        "vector[tls.cipher_suite].impl.resize[implement93]",
        "tls_hand_extensions.back",
        "frame.ack_ecn.range.arr.empty",
        "versions.append",
        "replayed_quic_packet_0rtt.arr.set",
        "quic_packet_coal_0rtt.retired_cids.reverse",
        "infer_tls_events_retry",
        "ip_endpoints.spec.append[after113]",
        "quic_packet_retry.idx.spec.next[after3]",
        "quic_packet_0rtt.arr.impl.reverse[implement98]",
        "prot.arr.spec.get[after110]",
        "tls.handshakes.impl.extend[implement97]",
        "tls_id_to_src",
        "forged_pkts.impl.size[implement92]",
        "replayed_quic_packet_0rtt.idx.spec.next[after3]",
        "frame.data_blocked.handle",
        "quic_packet_vn.arr.impl.pop_back[implement95]",
        "infer_tls_events_vn",
        "ip_endpoints.impl.pop_back[implement95]",
        "versions_bv.spec.resize[after112]",
        "quic_packet_0rtt.arr.impl.empty[implement89]",
        "tls_client_initial_request",
        "vector[tls.extension].spec.create[before105]",
        "forged_protected_quic_packet.arr.impl.pop_back[implement95]",
        "ip_endpoints.set",
        "frame.arr.impl.append[implement96]",
        "ip_endpoints.spec.get[after110]",
        "forged_protected_quic_packet.retired_cids.size",
        "vector[tls.psk_identity].spec.append[after113]",
        "tls.handshakes.domain.next",
        "quic_packet_coal_0rtt.arr.impl.get[implement91]",
        "stream_data.impl.extend[implement97]",
        "arr_streamid_r.impl.empty[implement89]",
        "quic_packet_coal_0rtt.retired_cids.impl.get[implement91]",
        "tls.handshakes.empty",
        "vector[tls.handshake].impl.size[implement92]",
        "vector[tls.extension].domain.impl.prev[implement9]",
        "arr_streamid_r.spec.get[before109]",
        "tls_api.upper.send[before394]",
        "quic_packet_coal_0rtt.arr.spec.set[after108]",
        "vector[tls.extension].impl.back[implement94]",
        "frame.streams_blocked_bidi.handle[before291]",
        "quic_packet.retired_cids.impl.size[implement92]",
        "mim_agent.reflection_packets",
        "quic_packet_retry.arr.reverse",
        "quic_packet.arr.reverse",
        "tls_hand_extensions.impl.resize[implement93]",
        "quic_packet_retry.arr.spec.set[before107]",
        "vector[tls.cipher_suite].domain.spec.prev[before4]",
        "clients.client.idx.spec.prev[before4]",
        "replayed_quic_packet_0rtt.arr.impl.extend[implement97]",
        "forged_protected_quic_packet.arr.spec.resize[after112]",
        "clients.client.arr.spec.resize[after112]",
        "vector[tls.compression_method].impl.size[implement92]",
        "quic_packet.idx.impl.prev[implement9]",
        "arr_pkt_num_s.impl.create[implement88]",
        "quic_packet_coal_0rtt.arr.impl.pop_back[implement95]",
        "show_fsm_receiving_ack_event",
        "vector[tls.cipher_suite].set",
        "init[after464]",
        "bytes.impl.back[implement94]",
        "tls.handshakes.impl.empty[implement89]",
        "vector[tls.extension].impl.pop_back[implement95]",
        "show_fsm_sending_ready_event",
        "lower_stream_pos",
        "vector[tls.psk_identity].impl.set[implement90]",
        "vector[tls.psk_identity].back",
        "clients.client.arr.impl.create[implement88]",
        "grease_quic_bit.set",
        "min_ack_delay_check",
        "vector[tls.handshake].resize",
        "frame.retire_connection_id.handle[after304]",
        "tls_extensions.impl.pop_back[implement95]",
        "random_stream_id[implement441]",
        "quic_packet_0rtt.idx.spec.prev[after5]",
        "reference_pkt_num",
        "quic_packet_0rtt.retired_cids.set",
        "frame.ping.handle[after296]",
        "tls.handshakes.spec.size[after111]",
        "arr_streamid_s.impl.create[implement88]",
        "packet_event_0rtt[before330]",
        "forged_protected_quic_packet.retired_cids.spec.size[after111]",
        "prot.decrypt",
        "quic_packet_retry.retired_cids.spec.resize[after112]",
        "reflect_packet_to_victim_event[after346]",
        "quic_packet_retry.retired_cids.impl.set[implement90]",
        "frame.path_response.handle[before307]",
        "prot.idx.impl.prev[implement9]",
        "bytes.impl.get[implement91]",
        "replayed_packet_event_0rtt",
        "inc_cid",
        "arr_pkt_num_s.impl.size[implement92]",
        "frame.ack_frequency.handle[after312]",
        "forged_quic_packet.retired_cids.impl.reverse[implement98]",
        "quic_packet.retired_cids.resize",
        "vector[tls.psk_identity].impl.resize[implement93]",
        "quic_packet.idx.impl.next[implement8]",
        "vector[tls.compression_method].domain.next",
        "handle_transport_error",
        "vector[transport_parameter].extend",
        "handle_receiving_dataRecvd",
        "frame.max_streams.handle",
        "servers.server.arr.impl.size[implement92]",
        "victim_agent.behavior",
        "tls.handshakes.impl.get[implement91]",
        "bytes.spec.create[before105]",
        "forged_protected_quic_packet.arr.impl.extend[implement97]",
        "max_packet_size.set",
        "quic_packet_retry.idx.spec.prev[before4]",
        "arr_streamid_s.spec.empty[after104]",
        "ip_endpoints.empty",
        "quic_packet.idx.spec.next[after3]",
        "vector[tls.psk_identity].extend",
        "tls_extensions.impl.reverse[implement98]",
        "tls_hand_extensions.spec.append[after113]",
        "frame.ack_ecn.range.arr.spec.resize[after112]",
        "tls_extensions.get",
        "forged_protected_quic_packet.retired_cids.spec.set[after108]",
        "idx_s.spec.prev[before4]",
        "frame.ack_ecn.range.idx.impl.next[implement8]",
        "quic_packet_0rtt.arr.spec.empty[after104]",
        "frame.ack.range.arr.impl.get[implement91]",
        "quic_packet_vn.idx.prev",
        "stream_data.impl.back[implement94]",
        "prot.retry_integrity_tag",
        "arr_streamid_r.impl.set[implement90]",
        "forged_quic_packet.retired_cids.back",
        "prot.pos_to_byte",
        "forged_quic_packet_retry.arr.spec.empty[after104]",
        "forged_quic_packet_vn.idx.spec.prev[before4]",
        "vector[tls.handshake].spec.size[after111]",
        "servers.server.arr.impl.back[implement94]",
        "forged_protected_quic_packet.idx.impl.next[implement8]",
        "mim_agent.reset_NAT",
        "vector[tls.extension].spec.get[before109]",
        "quic_packet.long",
        "tls_api.id.spec.prev[before12]",
        "versions_bv.set",
        "replayed_quic_packet_0rtt.retired_cids.impl.resize[implement93]",
        "vector[transport_parameter].spec.resize[after112]",
        "prot.show_token_len",
        "servers.server.arr.extend",
        "frame.ack_ecn.range.arr.reverse",
        "vector[tls.compression_method].spec.create[before105]",
        "forged_protected_pkt_serdes.to_bytes[implement398]",
        "quic_packet_retry.idx.impl.next[implement8]",
        "quic_packet_retry.idx.spec.prev[after5]",
        "forged_pkts.reverse",
        "net.listen",
        "vector[tls.compression_method].domain.impl.next[implement8]",
        "vector[tls.psk_identity].domain.impl.next[implement8]",
        "arr_streamid_r.impl.pop_back[implement95]",
        "vector[tls.compression_method].spec.create[after106]",
        "forward_packet_to_server_event",
        "frame.idx.impl.prev[implement9]",
        "vector[tls.cipher_suite].domain.impl.next[implement8]",
        "vector[tls.handshake].spec.resize[after112]",
        "vector[tls.compression_method].create",
        "show_cond",
        "clients.client.arr.spec.append[after113]",
        "quic_packet_coal_0rtt.arr.pop_back",
        "forged_quic_packet_retry.arr.impl.create[implement88]",
        "vector[tls.handshake].reverse",
        "forward_packet_to_client_event[after340]",
        "vector[tls.compression_method].spec.resize[after112]",
        "tls.handshakes.size",
        "replayed_quic_packet_0rtt.arr.size",
        "fake_client.set_ep",
        "tls_hand_extensions.spec.get[before109]",
        "tls_extensions.domain.next",
        "forged_quic_packet_retry.retired_cids.spec.size[after111]",
        "arr_streamid_s.impl.get[implement91]",
        "tls_extensions.spec.create[before105]",
        "forged_pkts.get",
        "quic_packet_retry.retired_cids.pop_back",
        "tls_client_initial_request[after471]",
        "frame.ack_ecn.range.arr.impl.resize[implement93]",
        "vector[tls.psk_identity].impl.reverse[implement98]",
        "idx_r.impl.next[implement8]",
        "frame.ping.handle",
        "prot.byte_xor",
        "http_request_file.write[before64]",
        "initial_max_stream_id_bidi.set",
        "replayed_quic_packet_0rtt.arr.impl.resize[implement93]",
        "quic_packet_retry.retired_cids.impl.empty[implement89]",
        "forged_quic_packet.retired_cids.spec.create[before105]",
        "cids.spec.set[before107]",
        "quic_packet_vn.arr.spec.resize[after112]",
        "vector[tls.compression_method].impl.extend[implement97]",
        "quic_packet_0rtt.retired_cids.spec.get[after110]",
        "quic_packet_coal_0rtt.arr.impl.append[implement96]",
        "vector[transport_parameter].spec.set[before107]",
        "forged_quic_packet_vn.idx.impl.prev[implement9]",
        "quic_packet_0rtt.arr.impl.back[implement94]",
        "replayed_quic_packet_0rtt.retired_cids.impl.extend[implement97]",
        "vector[tls.compression_method].impl.resize[implement93]",
        "vector[tls.handshake].back",
        "random_stream_pos[implement438]",
        "arr_streamid_r.impl.back[implement94]",
        "replayed_quic_packet_0rtt.retired_cids.impl.pop_back[implement95]",
        "forged_pkts.impl.create[implement88]",
        "forged_packet_event_retry[before349]",
        "versions.pop_back",
        "index.next",
        "frame.arr.spec.create[after106]",
        "frame.application_close.handle",
        "frame.ack.range.idx.spec.prev[before4]",
        "packet_event[after324]",
        "quic_packet_vn.arr.set",
        "quic_packet_coal_0rtt.arr.spec.append[after113]",
        "quic_packet_coal_0rtt.retired_cids.impl.back[implement94]",
        "frame.arr.impl.empty[implement89]",
        "frame.ack_ecn.range.idx.spec.prev[before4]",
        "net.open",
        "ip_endpoints.back",
        "tls_recv_event[before258]",
        "idx_r.spec.prev[after5]",
        "prot.arr.extend",
        "prot.decrypt[implement432]",
        "idx_s.next",
        "servers.server.arr.get",
        "lower_stream_id[implement443]",
        "frame.arr.get",
        "quic_packet.arr.impl.create[implement88]",
        "servers.server.arr.impl.pop_back[implement95]",
        "tls_extensions.reverse",
        "quic_packet_coal_0rtt.retired_cids.back",
        "quic_packet.retired_cids.reverse",
        "forged_quic_packet.arr.impl.append[implement96]",
        "quic_packet_coal_0rtt.retired_cids.spec.append[after113]",
        "tls_extensions.pop_back",
        "quic_packet_0rtt.arr.create",
        "bytes.impl.reverse[implement98]",
        "tls_api.upper.foo.impl.get_old_new_token[implement364]",
        "frame.ack.range.arr.impl.append[implement96]",
        "quic_packet_retry.arr.impl.get[implement91]",
        "arr_streamid_r.impl.size[implement92]",
        "tls_extensions.impl.empty[implement89]",
        "replayed_quic_packet_0rtt.retired_cids.set",
        "quic_packet_0rtt.arr.spec.set[before107]",
        "http_request_file.handle_synced",
        "set_encryption_level",
        "initial_max_stream_data_uni.set",
        "greater_stream_id[implement442]",
        "arr_pkt_num_r.impl.pop_back[implement95]",
        "forged_quic_packet_retry.arr.reverse",
        "versions.impl.size[implement92]",
        "servers.server.arr.impl.get[implement91]",
        "quic_packet_retry.arr.extend",
        "tls_api.upper.foo.impl.upper_send[implement386]",
        "random_stream_data[implement444]",
        "frame.stop_sending.handle[before273]",
        "forged_pkts.spec.empty[after104]",
        "quic_packet_vn.arr.impl.get[implement91]",
        "quic_packet_retry.retired_cids.set",
        "versions_bv.impl.set[implement90]",
        "bytes.impl.pop_back[implement95]",
        "arr_pkt_num_r.spec.set[after108]",
        "quic_packet_vn.arr.impl.create[implement88]",
        "tls_hand_extensions.impl.extend[implement97]",
        "show_fsm_sending_resetSent_event",
        "ip_endpoints.extend",
        "clients.client.arr.create",
        "quic_packet_coal_0rtt.retired_cids.extend",
        "forged_quic_packet_retry.retired_cids.create",
        "forged_quic_packet.idx.prev",
        "cidseq_to_seqnum",
        "tls_hand_extensions.set",
        "show_biatch",
        "replayed_quic_packet_0rtt.idx.spec.prev[after5]",
        "clients.client.arr.impl.reverse[implement98]",
        "forged_quic_packet.arr.impl.get[implement91]",
        "frame.ack.range.arr.impl.create[implement88]",
        "ip_endpoints.spec.get[before109]",
        "frame.arr.spec.empty[after104]",
        "vector[tls.psk_identity].spec.size[after111]",
        "forged_packet_event_vn",
        "tls_api.upper.foo.impl.iv_size[implement367]",
        "jdx_r.impl.next[implement8]",
        "bytes.spec.get[after110]",
        "quic_packet_coal_0rtt.arr.size",
        "cids.impl.back[implement94]",
        "clients.client.idx.spec.next[after3]",
        "pkt_serdes_retry.to_bytes",
        "prot.arr.spec.set[before107]",
        "handle_receiving_resetRecvd",
        "servers.server.arr.back",
        "vector[tls.extension].reverse",
        "quic_packet.idx.next",
        "arr_pkt_num_r.size",
        "prot.encrypt[implement430]",
        "app_send_event[after243]",
        "bytes.impl.extend[implement97]",
        "vector[transport_parameter].create",
        "prot.arr.spec.append[after113]",
        "versions.create",
        "quic_packet_0rtt.retired_cids.append",
        "endpoint_to_socket",
        "clients.client.arr.size",
        "quic_packet_retry.arr.size",
        "tls_send_event[before257]",
        "forged_protected_quic_packet.retired_cids.spec.append[after113]",
        "tls_extensions.impl.size[implement92]",
        "forged_protected_quic_packet.arr.spec.append[after113]",
        "quic_packet.retired_cids.impl.resize[implement93]",
        "vector[tls.handshake].extend",
        "servers.server.arr.pop_back",
        "index.impl.prev[implement9]",
        "vector[tls.extension].size",
        "is_random_padding_packet",
        "vector[tls.compression_method].set",
        "frame.connection_close.handle",
        "idx.impl.next[implement8]",
        "vector[tls.extension].domain.spec.next[after3]",
        "vector[transport_parameter].empty",
        "prot.arr.back",
        "show_enc_level",
        "prot.encrypt_rtt",
        "forged_pkts.append",
        "cids.spec.empty[after104]",
        "min_ack_delay.set",
        "prot.arr.append",
        "init[after461]",
        "ip_endpoints.impl.resize[implement93]",
        "tls_extensions.domain.prev",
        "set_encryption_level[after261]",
        "tls_client_0rtt_response",
        "init[after322]",
        "versions_bv.spec.size[after111]",
        "arr_pkt_num_s.get",
        "forged_quic_packet_vn.arr.empty",
        "tls_api.upper.foo.impl.get_initial_max_stream_id_bidi[implement380]",
        "versions_bv.impl.pop_back[implement95]",
        "replayed_quic_packet_0rtt.arr.get",
        "forged_quic_packet_vn.arr.impl.size[implement92]",
        "forged_quic_packet_vn.arr.impl.reverse[implement98]",
        "frame.data_blocked.handle[after288]",
        "cids.spec.create[before105]",
        "quic_packet_vn.arr.back",
        "quic_packet.arr.impl.resize[implement93]",
        "quic_packet.arr.spec.resize[after112]",
        "prot.get_header_info",
        "replayed_quic_packet_0rtt.arr.impl.append[implement96]",
        "socket_endpoint",
        "bytes.impl.size[implement92]",
        "frame.ack.range.idx.next",
        "arr_streamid_s.impl.pop_back[implement95]",
        "cids.resize",
        "forged_quic_packet_retry.retired_cids.impl.size[implement92]",
        "handle_sending_resetSent",
        "show_initial_request_initial",
        "version_not_found_event",
        "cid_to_us",
        "forged_quic_packet_retry.retired_cids.size",
        "arr_streamid_s.spec.resize[after112]",
        "client_server.behavior",
        "quic_packet_0rtt.arr.spec.create[after106]",
        "versions.spec.create[after106]",
        "quic_packet_coal_0rtt.arr.set",
        "forged_protected_quic_packet.arr.spec.empty[after104]",
        "vector[tls.cipher_suite].domain.impl.prev[implement9]",
        "frame_stop_sending_handle[before491]",
        "pkt_serdes_vn.from_bytes",
        "vector[transport_parameter].impl.reverse[implement98]",
        "vector[transport_parameter].spec.size[after111]",
        "frame.max_streams_bidi.handle",
        "arr_streamid_s.impl.size[implement92]",
        "frame.max_data.handle[before293]",
        "forged_quic_packet_retry.retired_cids.impl.reverse[implement98]",
        "quic_packet_coal_0rtt.retired_cids.spec.get[before109]",
        "forged_protected_quic_packet.retired_cids.impl.create[implement88]",
        "forged_quic_packet_vn.idx.spec.prev[after5]",
        "greater_stream_id",
        "frame.ack_ecn.range.arr.extend",
        "quic_packet_retry.arr.spec.get[before109]",
        "vector[tls.handshake].size",
        "tls_keys_established_event[after260]",
        "bytes.empty",
        "arr_pkt_num_s.spec.create[before105]",
        "servers.server.idx.next",
        "frame.streams_blocked_bidi.handle",
        "forged_quic_packet_retry.retired_cids.spec.set[after108]",
        "quic_packet_coal_0rtt.retired_cids.resize",
        "prot.correct_pnum",
        "tls_api.upper.foo.impl.encrypt_aead[implement384]",
        "server.set_tls_id",
        "client.set_ep",
        "prot.idx.impl.next[implement8]",
        "handle_sending_resetRecvd",
        "arr_streamid_r.spec.append[after113]",
        "show_ack_credit",
        "packet_event",
        "cid_to_stream_id",
        "cids.impl.empty[implement89]",
        "forged_quic_packet_vn.arr.create",
        "tls.handshakes.append",
        "init[after484]",
        "quic_packet_vn.arr.spec.set[before107]",
        "quic_packet_0rtt.retired_cids.size",
        "attacker.configure_NAT_attack_in_spoof_hack",
        "frame.ack.range.arr.reverse",
        "frame.arr.resize",
        "pkt_serdes_0rtt.to_bytes",
        "frame.rst_stream.handle[before271]",
        "recv_0rtt_pkt",
        "frame.new_connection_id.handle[after302]",
        "versions_bv.spec.set[after108]",
        "vector[tls.psk_identity].spec.get[after110]",
        "prot.arr.impl.back[implement94]",
        "http_request_file.synced[before67]",
        "frame_application_close_handle[before496]",
        "bytes_to_itoken",
        "tls_hand_extensions.spec.resize[after112]",
        "pkt_serdes.from_bytes[implement399]",
        "frame.ack.range.arr.create",
        "vector[transport_parameter].spec.get[before109]",
        "vector[transport_parameter].impl.extend[implement97]",
        "frame.streams_blocked.handle",
        "ip_endpoints.spec.empty[after104]",
        "forged_quic_packet_retry.retired_cids.spec.get[before109]",
        "versions.spec.resize[after112]",
        "quic_packet_vn.arr.impl.resize[implement93]",
        "frame.ack.range.idx.impl.prev[implement9]",
        "arr_pkt_num_r.impl.append[implement96]",
        "mim_agent.forward_packet_to",
        "forged_pkts.impl.back[implement94]",
        "vector[tls.psk_identity].spec.set[after108]",
        "arr_streamid_s.impl.append[implement96]",
        "quic_packet_retry.retired_cids.spec.append[after113]",
        "quic_packet_coal_0rtt.idx.impl.next[implement8]",
        "forged_pkt_serdes_retry.to_bytes[implement398]",
        "quic_packet.arr.impl.pop_back[implement95]",
        "frame.unknown_frame.handle",
        "pkt_serdes.from_bytes",
        "tls_api.upper.foo.impl.save_active_connection_id_limit[implement381]",
        "arr_streamid_r.impl.resize[implement93]",
        "tls_api.upper.save_initial_max_stream_data_bidi_local",
        "stream_data.spec.create[before105]",
        "quic_packet.retired_cids.impl.extend[implement97]",
        "versions_bv.create",
        "frame.arr.pop_back",
        "vector[tls.cipher_suite].spec.get[after110]",
        "clients.init_tls_ids",
        "vector[tls.psk_identity].impl.size[implement92]",
        "vector[tls.extension].impl.size[implement92]",
        "init[after500]",
        "forged_quic_packet.arr.size",
        "socket_endpoint_mim",
        "tls.handshakes.pop_back",
        "forged_quic_packet_retry.arr.append",
        "servers.set_tls_id",
        "replayed_quic_packet_0rtt.arr.impl.set[implement90]",
        "forged_quic_packet.arr.impl.set[implement90]",
        "tls_api.upper.init[after388]",
        "quic_packet_0rtt.idx.spec.next[after3]",
        "mim_client_target.set_ep",
        "forged_protected_quic_packet.arr.impl.get[implement91]",
        "_finalize",
        "stream_data.impl.resize[implement93]",
        "arr_pkt_num_s.impl.set[implement90]",
        "active_connection_id_limit.set",
        "servers.server.arr.impl.extend[implement97]",
        "stream_pos.next",
        "versions_bv.spec.append[after113]",
        "ip_endpoints.impl.extend[implement97]",
        "frame.ack_ecn.range.arr.impl.get[implement91]",
        "forged_quic_packet_vn.arr.impl.append[implement96]",
        "tls_api.upper.get_old_new_token",
        "cids.impl.set[implement90]",
        "tls_hand_extensions.size",
        "quic_packet_0rtt.retired_cids.spec.empty[after104]",
        "tls_api.upper.get_old_retry_token",
        "ip_endpoints.create",
        "show_l",
        "forged_quic_packet.retired_cids.impl.size[implement92]",
        "vector[tls.extension].spec.get[after110]",
        "handle_tls_extensions",
        "tls_client_version_request",
        "vector[transport_parameter].spec.get[after110]",
        "quic_packet_coal_0rtt.retired_cids.impl.reverse[implement98]",
        "replayed_quic_packet_0rtt.arr.spec.size[after111]",
        "vector[tls.handshake].spec.append[after113]",
        "victim_agent.set_tls_id",
        "frame.arr.spec.set[after108]",
        "client_server.set_tls_id",
        "arr_pkt_num_r.append",
        "vector[tls.extension].domain.prev",
        "quic_packet_coal_0rtt.arr.spec.empty[after104]",
        "quic_packet_coal_0rtt.arr.resize",
        "recv_packet_mim",
        "idx_r.next",
        "forged_quic_packet_retry.retired_cids.back",
        "forged_protected_quic_packet.arr.impl.set[implement90]",
        "versions.impl.get[implement91]",
        "forged_quic_packet_retry.arr.impl.resize[implement93]",
        "packet_event_coal_0rtt[after479]",
        "arr_streamid_r.size",
        "replayed_quic_packet_0rtt.idx.prev",
        "arr_streamid_r.reverse",
        "frame.arr.impl.create[implement88]",
        "vector[tls.compression_method].append",
        "server.set_ep",
        "tls_api.upper.create[after390]",
        "stream_data.impl.set[implement90]",
        "frame.streams_blocked_bidi.handle[after292]",
        "arr_pkt_num_s.size",
        "arr_pkt_num_r.back",
        "quic_packet_retry.arr.impl.pop_back[implement95]",
        "quic_packet.retired_cids.extend",
        "frame.idx.next",
        "forged_protected_quic_packet.idx.spec.prev[after5]",
        "vector[transport_parameter].spec.create[after106]",
        "mim_agent.save_packets",
        "forged_protected_quic_packet.arr.impl.empty[implement89]",
        "vector[tls.compression_method].size",
        "forged_pkt_serdes.to_bytes",
        "clients.client.idx.impl.next[implement8]",
        "quic_packet.arr.size",
        "versions.size",
        "forged_quic_packet.arr.impl.resize[implement93]",
        "quic_packet_0rtt.retired_cids.impl.empty[implement89]",
        "tls.handshakes.spec.create[before105]",
        "replayed_quic_packet_0rtt.retired_cids.reverse",
        "replayed_quic_packet_0rtt.retired_cids.spec.get[after110]",
        "quic_packet_retry.arr.spec.resize[after112]",
        "tls_api.upper.session_established[before395]",
        "arr_streamid_s.get",
        "quic_packet_coal_0rtt.retired_cids.impl.set[implement90]",
        "replayed_quic_packet_0rtt.arr.reverse",
        "quic_packet_vn.arr.resize",
        "forged_protected_quic_packet.arr.spec.create[after106]",
        "replayed_quic_packet_0rtt.arr.impl.create[implement88]",
        "quic_packet_vn.arr.spec.empty[after104]",
        "vector[tls.extension].impl.set[implement90]",
        "stream_pos.spec.next[after3]",
        "quic_packet_retry.arr.resize",
        "frame.malicious_frame.handle",
        "frame.arr.reverse",
        "versions.spec.get[after110]",
        "initial_max_stream_data_bidi_local.set",
        "frame.ack_ecn.range.idx.impl.prev[implement9]",
        "frame.ack.range.idx.prev",
        "versions.spec.empty[after104]",
        "tls_api.upper.get_initial_max_stream_data_bidi_remote",
        "bytes_to_version",
        "frame.handshake_done.handle",
        "greater_microsecs",
        "servers.server.idx.impl.prev[implement9]",
        "quic_packet.arr.spec.append[after113]",
        "ip_endpoints.impl.size[implement92]",
        "vector[tls.handshake].domain.prev",
        "tls_extensions.create",
        "forged_protected_quic_packet.retired_cids.spec.get[after110]",
        "frame.arr.spec.set[before107]",
        "arr_pkt_num_s.back",
        "vector[tls.handshake].spec.set[before107]",
        "quic_packet_retry.retired_cids.extend",
        "quic_packet_coal_0rtt.arr.impl.set[implement90]",
        "forged_protected_quic_packet.retired_cids.back",
        "arr_streamid_r.spec.resize[after112]",
        "vector[tls.psk_identity].spec.get[before109]",
        "idx_s.prev",
        "vector[tls.handshake].spec.create[after106]",
        "arr_streamid_s.spec.set[before107]",
        "enqueue_frame_rtt",
        "tls.handshakes.impl.set[implement90]",
        "forged_pkts.set",
        "random_stream_id",
        "cids.impl.create[implement88]",
        "servers.server.idx.prev",
        "forged_quic_packet.retired_cids.impl.resize[implement93]",
        "vector[tls.cipher_suite].impl.size[implement92]",
        "tls_send_event[after468]",
        "bytes.spec.set[after108]",
        "tls_hand_extensions.spec.set[after108]",
        "frame.ack_ecn.handle[before265]",
        "tls_hand_extensions.append",
        "forged_quic_packet_vn.arr.spec.size[after111]",
        "vector[tls.extension].spec.resize[after112]",
        "idx_s.impl.next[implement8]",
        "arr_pkt_num_s.impl.back[implement94]",
        "clients.init[after453]",
        "quic_packet_vn.arr.spec.get[before109]",
        "forged_protected_quic_packet.retired_cids.extend",
        "forged_quic_packet_retry.retired_cids.impl.append[implement96]",
        "quic_packet_retry.retired_cids.impl.pop_back[implement95]",
        "quic_packet_retry.retired_cids.spec.size[after111]",
        "versions.get",
        "quic_packet_retry.retired_cids.size",
        "loss_bits.set",
        "stream_data.resize",
        "quic_packet_coal_0rtt.arr.spec.set[before107]",
        "forged_quic_packet.arr.back",
        "forged_quic_packet_vn.arr.spec.create[before105]",
        "servers.server.arr.spec.get[before109]",
        "arr_streamid_s.resize",
        "servers.server.idx.spec.prev[after5]",
        "victim_agent.set_ep",
        "frame.ack_ecn.range.arr.size",
        "undecryptable_packet_event",
        "vector[tls.psk_identity].domain.prev",
        "quic_packet_0rtt.arr.reverse",
        "forged_quic_packet.retired_cids.size",
        "forged_quic_packet_vn.arr.get",
        "quic_packet_vn.arr.impl.empty[implement89]",
        "tls_extensions.append",
        "init[after483]",
        "quic_packet_vn.arr.spec.create[after106]",
        "replayed_quic_packet_0rtt.retired_cids.impl.create[implement88]",
        "forged_quic_packet_retry.arr.spec.size[after111]",
        "replayed_quic_packet_0rtt.arr.create",
        "clients.client.arr.impl.size[implement92]",
        "mim_agent.configure_NAT_attack_out_localhost",
        "vector[tls.psk_identity].impl.pop_back[implement95]",
        "jdx_r.next",
        "vector[tls.cipher_suite].resize",
        "forged_quic_packet_retry.idx.prev",
        "ip_endpoints.spec.set[after108]",
        "replayed_quic_packet_0rtt.retired_cids.size",
        "frame.idx.spec.prev[before4]",
        "vector[tls.cipher_suite].domain.spec.prev[after5]",
        "forged_pkts.resize",
        "quic_packet.arr.impl.extend[implement97]",
        "replayed_quic_packet_0rtt.arr.spec.set[before107]",
        "prot.encrypt_rtt[implement431]",
        "arr_pkt_num_r.extend",
        "forged_quic_packet_retry.arr.create",
        "packet_event_coal_0rtt[after333]",
        "stream_data.impl.size[implement92]",
        "prot.arr.spec.set[after108]",
        "tls_api.upper.foo.impl.get_initial_max_stream_data_bidi_remote[implement374]",
        "arr_streamid_r.resize",
        "versions.extend",
        "pkt_serdes_0rtt_coal.from_bytes",
        "replay_packet_to_server_event[after344]",
        "arr_pkt_num_s.set",
        "vector[tls.extension].spec.append[after113]",
        "quic_packet_vn.idx.spec.next[after3]",
        "frame.arr.spec.get[after110]",
        "endpoint_to_socket_mim",
        "servers.server.arr.spec.size[after111]",
        "tls_extensions.set",
        "tls_api.upper.decrypt_aead",
        "stream_data.extend",
        "frame.ack_ecn.range.arr.get",
        "tls_recv_event[after259]",
        "tls_api.upper.get_initial_max_stream_id_bidi",
        "frame.arr.impl.back[implement94]",
        "quic_packet_retry.retired_cids.spec.get[before109]",
        "forged_pkts.create",
        "init[after320]",
        "vector[tls.extension].empty",
        "tls_api.upper.foo.impl.save_initial_max_stream_data_bidi_local[implement377]",
        "quic_packet_0rtt.idx.impl.next[implement8]",
        "packet_event_retry[before327]",
        "frame.arr.back",
        "vector[tls.handshake].set",
        "servers.init_tls_ids",
        "quic_packet_coal_0rtt.arr.get",
        "quic_packet_0rtt.arr.back",
        "forged_pkts.empty",
        "versions_bv.impl.extend[implement97]",
        "clients.client.arr.impl.append[implement96]",
        "vector[tls.extension].spec.set[before107]",
        "mim_server_target.set_ep",
        "tls_api.upper.recv[before393]",
        "arr_pkt_num_r.spec.get[before109]",
        "replayed_quic_packet_0rtt.retired_cids.create",
        "frame.rst_stream.handle[after272]",
        "forged_quic_packet_retry.arr.set",
        "forged_protected_quic_packet.retired_cids.impl.reverse[implement98]",
        "init[after353]",
        "handle_receiving_dataRead",
        "versions_bv.resize",
        "app_server_open_event_1rtt",
        "pkt_serdes_0rtt.to_bytes[implement398]",
        "tls.handshakes.impl.reverse[implement98]",
        "clients.client.arr.spec.set[before107]",
        "forged_quic_packet_vn.arr.impl.resize[implement93]",
        "quic_packet_retry.arr.impl.resize[implement93]",
        "arr_pkt_num_r.resize",
        "frame.ack_ecn.range.arr.impl.append[implement96]",
        "clients.set_ep",
        "replayed_quic_packet_0rtt.arr.append",
        "quic_packet_retry.arr.impl.create[implement88]",
        "tls_api.upper.save_initial_max_stream_data_bidi_remote",
        "quic_packet_coal_0rtt.retired_cids.impl.append[implement96]",
        "frame.ack_ecn.range.arr.set",
        "arr_streamid_r.spec.set[before107]",
        "forged_quic_packet_vn.arr.impl.create[implement88]",
        "packet_event_retry[after328]",
        "packet_encryption_level_up",
        "forged_protected_quic_packet.idx.prev",
        "forged_quic_packet.arr.resize",
        "vector[tls.handshake].get",
        "tls_api.lower.recv",
        "arr_pkt_num_r.spec.get[after110]",
        "show_iretryb",
        "vector[tls.psk_identity].resize",
        "quic_packet_vn.arr.size",
        "forged_quic_packet_retry.arr.get",
        "quic_packet.retired_cids.spec.get[after110]",
        "versions_bv.impl.size[implement92]",
        "forged_quic_packet_retry.long",
        "dst_tls_id",
        "cipher_packet",
        "forged_quic_packet.retired_cids.impl.back[implement94]",
        "tls_hand_extensions.reverse",
        "quic_packet_0rtt.arr.impl.resize[implement93]",
        "forged_pkt_serdes_vn.from_bytes",
        "arr_pkt_num_r.empty",
        "show_fsm_receiving_dataRead_event",
        "arr_pkt_num_s.impl.append[implement96]",
        "frame_new_token_handle[before490]",
        "replayed_quic_packet_0rtt.arr.impl.size[implement92]",
        "quic_packet_0rtt.retired_cids.spec.set[after108]",
        "vector[transport_parameter].impl.set[implement90]",
        "forged_quic_packet_retry.arr.impl.get[implement91]",
        "mim_agent.configure_NAT_attack_out_trick",
        "frame.ack_ecn.range.arr.spec.set[before107]",
        "frame.ack_ecn.range.arr.spec.create[before105]",
        "frame.ack_ecn.range.arr.create",
        "init[after482]",
        "recv_retry_pkt",
        "quic_packet_coal_0rtt.arr.back",
        "arr_pkt_num_r.spec.set[before107]",
        "vector[tls.extension].domain.impl.next[implement8]",
        "forged_protected_quic_packet.arr.impl.reverse[implement98]",
        "quic_packet_0rtt.retired_cids.spec.create[after106]",
        "stream_data.impl.empty[implement89]",
        "forged_quic_packet_vn.idx.impl.next[implement8]",
        "vector[tls.compression_method].reverse",
        "vector[tls.compression_method].back",
        "dst_is_generated",
        "packet_encryption_level",
        "forged_quic_packet.retired_cids.append",
        "servers.server.arr.create",
        "tls_api.upper.send",
        "quic_packet.retired_cids.spec.set[before107]",
        "tls.handshake_event",
        "prot.bytes_to_cid",
        "ip_endpoints.spec.size[after111]",
        "client_send_event[before501]",
        "prot.arr.impl.extend[implement97]",
        "quic_packet_vn.arr.append",
        "frame.unknown_frame.handle[before297]",
        "quic_packet_coal_0rtt.arr.impl.create[implement88]",
        "vector[transport_parameter].spec.empty[after104]",
        "quic_packet_retry.arr.impl.set[implement90]",
        "forged_quic_packet.arr.create",
        "frame.ack.range.arr.back",
        "tls_extensions.empty",
        "tls_extensions.domain.spec.next[after3]",
        "tls_hand_extensions.domain.impl.next[implement8]",
        "vector[tls.psk_identity].empty",
        "client.behavior",
        "frame.ack.range.arr.spec.resize[after112]",
        "forged_quic_packet_vn.arr.extend",
        "tls_api.upper.save_token",
        "quic_packet.retired_cids.impl.back[implement94]",
        "jdx_r.impl.prev[implement9]",
        "ip_endpoints.impl.create[implement88]",
        "packet_event_coal_0rtt[before332]",
        "clients.client.idx.next",
        "mim_agent.behavior",
        "ip_endpoints.pop_back",
        "clients.client.arr.impl.extend[implement97]",
        "lower_microsecs[implement447]",
        "quic_packet_retry.retired_cids.get",
        "vector[tls.extension].spec.create[after106]",
        "frame.max_streams.handle[after276]",
        "vector[tls.cipher_suite].impl.pop_back[implement95]",
        "tls.handshakes.domain.prev",
        "vector[tls.compression_method].domain.spec.prev[after5]",
        "quic_packet_vn.arr.impl.extend[implement97]",
        "jdx_r.prev",
        "prot.arr.pop_back",
        "versions.spec.create[before105]",
        "idx.impl.prev[implement9]",
        "pkt_serdes_retry.from_bytes",
        "forged_quic_packet_retry.retired_cids.resize",
        "tls_api.upper.foo.impl.save_initial_max_data[implement375]",
        "net.impl.listen",
        "prot.arr.impl.append[implement96]",
        "tls_api.upper.foo.impl.create_0rtt_client[implement361]",
        "ip_endpoints.impl.set[implement90]",
        "forged_protected_quic_packet.retired_cids.get",
        "arr_streamid_r.impl.extend[implement97]",
        "vector[tls.extension].pop_back",
        "tls_client_initial_response[after472]",
        "quic_packet.retired_cids.create",
        "versions.impl.back[implement94]",
        "prot.arr.impl.size[implement92]",
        "map_cids",
        "arr_pkt_num_s.spec.empty[after104]",
        "forged_pkts.impl.pop_back[implement95]",
        "pkt_serdes_retry.from_bytes[implement399]",
        "quic_packet.retired_cids.spec.get[before109]",
        "forged_pkts.spec.resize[after112]",
        "net.send",
        "forged_quic_packet.retired_cids.empty",
        "quic_packet_retry.retired_cids.spec.get[after110]",
        "replayed_quic_packet_0rtt.retired_cids.spec.set[before107]",
        "versions.set",
        "forged_quic_packet.arr.impl.pop_back[implement95]",
        "quic_packet_0rtt.retired_cids.reverse",
        "forged_quic_packet_retry.arr.impl.extend[implement97]",
        "stream_data.size",
        "arr_pkt_num_s.extend",
        "vector[tls.cipher_suite].spec.create[before105]",
        "forged_quic_packet_vn.arr.set",
        "ip_endpoints.impl.reverse[implement98]",
        "vector[tls.psk_identity].domain.spec.prev[before4]",
        "tls_send_event",
        "replayed_quic_packet_0rtt.retired_cids.spec.get[before109]",
        "forged_quic_packet.idx.next",
        "clients.client.idx.impl.prev[implement9]",
        "clients.src_tls_id",
        "replayed_quic_packet_0rtt.retired_cids.spec.set[after108]",
        "quic_packet.arr.empty",
        "forged_quic_packet.idx.spec.prev[after5]",
        "frame.ack_ecn.range.arr.impl.set[implement90]",
        "pkt_serdes_0rtt_coal.to_bytes[implement398]",
        "forged_pkts.back",
        "servers.server.arr.impl.append[implement96]",
        "quic_packet_vn.idx.impl.prev[implement9]",
        "vector[tls.handshake].append",
        "handle_sending_ack",
        "tls_extensions.impl.extend[implement97]",
        "tls_client_initial_response",
        "mim_agent.configure_NAT_attack_out",
        "tls.handshakes.domain.spec.prev[after5]",
        "app_server_open_event_retry",
        "quic_packet_0rtt.arr.spec.size[after111]",
        "vector[tls.cipher_suite].impl.append[implement96]",
        "frame.ack.range.arr.resize",
        "init[after321]",
        "vector[transport_parameter].pop_back",
        "jdx_r.spec.prev[after5]",
        "forged_quic_packet_retry.arr.back",
        "forged_quic_packet_retry.arr.impl.pop_back[implement95]",
        "frame.ack_ecn.range.arr.spec.append[after113]",
        "forged_quic_packet.arr.spec.get[before109]",
        "vector[tls.compression_method].impl.pop_back[implement95]",
        "quic_packet_vn.idx.spec.prev[before4]",
        "servers.server.arr.spec.resize[after112]",
        "forged_protected_quic_packet.arr.pop_back",
        "clients.client.arr.impl.resize[implement93]",
        "pkt_serdes_vn.to_bytes",
        "forged_quic_packet_retry.arr.spec.get[after110]",
        "tls_extensions.back",
        "random_stream_pos",
        "quic_packet_coal_0rtt.arr.empty",
        "tls.handshakes.spec.set[after108]",
        "forged_protected_quic_packet.retired_cids.spec.resize[after112]",
        "versions_bv.spec.get[after110]",
        "tls_client_0rtt_response[after475]",
        "cids.spec.get[after110]",
        "versions.impl.append[implement96]",
        "packet_event_vn",
        "random_stream_data",
        "quic_packet_0rtt.arr.spec.append[after113]",
        "prot.bytes_to_pos",
        "frame.ack.handle[after264]",
        "forged_protected_quic_packet.retired_cids.create",
        "tls_api.upper.foo.impl.get_old_retry_token[implement363]",
        "vector[tls.compression_method].empty",
        "versions.spec.append[after113]",
        "servers.server.arr.impl.create[implement88]",
        "forged_protected_quic_packet.retired_cids.set",
        "vector[tls.cipher_suite].domain.prev",
        "quic_packet_coal_0rtt.idx.impl.prev[implement9]",
        "bytes.spec.append[after113]",
        "prot.arr.impl.set[implement90]",
        "replayed_quic_packet_0rtt.arr.impl.get[implement91]",
        "arr_pkt_num_s.spec.create[after106]",
        "vector[transport_parameter].domain.spec.prev[before4]",
        "prot.idx.spec.next[after3]",
        "quic_packet.arr.spec.create[after106]",
        "app_send_event",
        "bytes.spec.get[before109]",
        "cids.impl.size[implement92]",
        "arr_streamid_s.spec.set[after108]",
        "idx_s.impl.prev[implement9]",
        "tls_api.upper.get_active_connection_id_limit",
        "quic_packet_coal_0rtt.arr.spec.size[after111]",
        "forged_pkt_serdes.from_bytes[implement399]",
        "vector[tls.handshake].domain.spec.prev[before4]",
        "prot.arr.spec.size[after111]",
        "vector[tls.psk_identity].domain.spec.prev[after5]",
        "frame.stream.handle[before267]",
        "forged_quic_packet_retry.idx.next",
        "frame.crypto.handle",
        "tls_hand_extensions.empty",
        "unknown_ignore.set",
        "random_microsecs[implement445]",
        "forged_quic_packet.retired_cids.impl.append[implement96]",
        "quic_packet.retired_cids.impl.set[implement90]",
        "forged_protected_quic_packet.retired_cids.impl.get[implement91]",
        "tls_id_to_dst",
        "reflect_packet_to_victim_event",
        "quic_packet.retired_cids.set",
        "quic_packet_coal_0rtt.arr.impl.empty[implement89]",
        "forged_pkts.spec.set[after108]",
        "clients.client.arr.spec.set[after108]",
        "tls_api.upper.foo.impl.compute_retry_integrity_tag[implement383]",
        "quic_packet_0rtt.arr.empty",
        "replayed_quic_packet_0rtt.retired_cids.impl.size[implement92]",
        "quic_packet_vn.arr.reverse",
        "quic_packet_retry.retired_cids.impl.reverse[implement98]",
        "arr_streamid_s.impl.resize[implement93]",
        "forged_quic_packet.arr.impl.extend[implement97]",
        "clients.client.arr.impl.pop_back[implement95]",
        "forged_pkts.extend",
        "vector[tls.extension].impl.get[implement91]",
        "quic_packet_retry.retired_cids.impl.resize[implement93]",
        "frame.ack_ecn.range.arr.impl.pop_back[implement95]",
        "arr_pkt_num_r.impl.empty[implement89]",
        "packet_event_vn[after477]",
        "forged_pkts.impl.set[implement90]",
        "index.impl.next[implement8]",
        "vector[tls.compression_method].resize",
        "init[after242]",
        "arr_streamid_r.create",
        "http_request_file.sync[implement73]",
        "frame.retire_connection_id.handle",
        "quic_packet_coal_0rtt.arr.reverse",
        "versions_bv.append",
        "prot.arr.spec.create[before105]",
        "quic_packet_0rtt.retired_cids.create",
        "bytes.spec.empty[after104]",
        "attacker.init[after458]",
        "forged_quic_packet_vn.arr.spec.create[after106]",
        "forged_quic_packet.retired_cids.spec.resize[after112]",
        "versions.impl.extend[implement97]",
        "forged_protected_quic_packet.arr.set",
        "replayed_quic_packet_0rtt.arr.impl.empty[implement89]",
        "clients.set_tls_id",
        "arr_streamid_s.extend",
        "tls.handshakes.domain.impl.next[implement8]",
        "tls_api.upper.foo.impl.destroy[implement365]",
        "frame.new_connection_id.handle[before301]",
        "forged_quic_packet_retry.retired_cids.append",
        "tls_hand_extensions.spec.get[after110]",
        "forged_quic_packet_vn.arr.pop_back",
        "arr_pkt_num_s.resize",
        "quic_packet_0rtt.arr.pop_back",
        "arr_streamid_s.spec.get[after110]",
        "clients.client.arr.reverse",
        "vector[tls.cipher_suite].append",
        "tls_extensions.spec.create[after106]",
        "recv_packet",
        "forged_quic_packet_retry.retired_cids.impl.create[implement88]",
        "quic_packet_0rtt.retired_cids.impl.create[implement88]",
        "quic_packet_0rtt.retired_cids.resize",
        "forged_pkt_serdes_vn.to_bytes",
        "vector[tls.extension].impl.resize[implement93]",
        "preferred_address.set",
        "frame.ack.range.arr.get",
        "clients.client.arr.append",
        "arr_streamid_r.extend",
        "vector[transport_parameter].impl.get[implement91]",
        "servers.server.arr.append",
        "quic_packet_vn.arr.impl.size[implement92]",
        "quic_packet_coal_0rtt.idx.spec.prev[before4]",
        "forged_pkts.spec.get[after110]",
        "stream_data.spec.size[after111]",
        "tls_api.upper.create",
        "frame.ping.handle[before295]",
        "prot.get_var_int",
        "tls_api.upper.alert",
        "forged_quic_packet_retry.arr.resize",
        "show_probing",
        "tls_api.id.spec.prev[after13]",
        "tls_extensions.domain.impl.prev[implement9]",
        "arr_pkt_num_s.impl.empty[implement89]",
        "bytes.spec.resize[after112]",
        "tls_hand_extensions.spec.size[after111]",
        "frame.connection_close.handle[before279]",
        "net.close",
        "replayed_packet_event_0rtt[after355]",
        "vector[tls.compression_method].spec.size[after111]",
        "forged_quic_packet_retry.retired_cids.spec.set[before107]",
        "vector[tls.extension].spec.set[after108]",
        "tls.handshakes.impl.create[implement88]",
        "quic_packet.retired_cids.empty",
        "forged_protected_quic_packet.retired_cids.impl.append[implement96]",
        "versions.spec.set[before107]",
        "replayed_quic_packet_0rtt.retired_cids.impl.get[implement91]",
        "vector[tls.psk_identity].append",
        "bytes.impl.create[implement88]",
        "versions.impl.pop_back[implement95]",
        "arr_pkt_num_s.append",
        "quic_packet_retry.arr.spec.append[after113]",
        "tls.handshakes.spec.get[before109]",
        "clients.client.arr.spec.get[before109]",
        "forged_protected_quic_packet.retired_cids.impl.empty[implement89]",
        "vector[tls.cipher_suite].spec.append[after113]",
        "forged_protected_quic_packet.retired_cids.impl.pop_back[implement95]",
        "forged_quic_packet.retired_cids.spec.set[before107]",
        "ip_endpoints.size",
        "cids.reverse",
        "idx.spec.prev[after5]",
        "bytes.resize",
        "quic_packet_vn.arr.extend",
        "frame.max_streams.handle[before275]",
        "quic_packet_0rtt.retired_cids.impl.get[implement91]",
        "vector[tls.psk_identity].impl.back[implement94]",
        "packet_event_retry",
        "quic_packet.retired_cids.spec.empty[after104]",
        "arr_streamid_r.get",
        "forged_quic_packet.retired_cids.impl.set[implement90]",
        "arr_pkt_num_s.reverse",
        "lower_stream_pos[implement440]",
        "forged_quic_packet.arr.spec.resize[after112]",
        "frame_retire_connection_id_handle[before494]",
        "quic_packet_0rtt.retired_cids.spec.append[after113]",
        "forged_quic_packet_vn.arr.impl.extend[implement97]",
        "vector[transport_parameter].size",
        "second_client.init[after452]",
        "vector[tls.handshake].spec.get[after110]",
        "arr_streamid_s.size",
        "forged_quic_packet.retired_cids.resize",
        "versions.impl.resize[implement93]",
        "arr_streamid_s.back",
        "servers.server.arr.impl.set[implement90]",
        "frame.idx.spec.prev[after5]",
        "init[after84]",
        "frame.ack.range.arr.impl.reverse[implement98]",
        "cids.create",
        "arr_pkt_num_r.spec.create[after106]",
        "vector[tls.compression_method].extend",
        "quic_packet.arr.spec.empty[after104]",
        "tls_extensions.domain.impl.next[implement8]",
        "frame.ack_ecn.handle[after266]",
        "init[after348]",
        "ip_endpoints.get",
        "quic_packet_coal_0rtt.retired_cids.spec.resize[after112]",
        "quic_packet.arr.spec.get[before109]",
        "vector[tls.cipher_suite].spec.create[after106]",
        "recv_vn_pkt",
        "forged_quic_packet_retry.retired_cids.impl.empty[implement89]",
        "arr_pkt_num_s.empty",
        "quic_packet_vn.arr.impl.reverse[implement98]",
        "vector[tls.extension].append",
        "forged_protected_pkt_serdes.from_bytes",
        "frame.arr.extend",
        "init[after481]",
        "random_microsecs",
        "forged_quic_packet_vn.arr.impl.pop_back[implement95]",
        "quic_packet_coal_0rtt.arr.impl.back[implement94]",
        "tls_hand_extensions.domain.spec.prev[after5]",
        "frame.arr.impl.extend[implement97]",
        "vector[tls.extension].impl.append[implement96]",
        "forged_quic_packet.retired_cids.create",
        "vector[tls.compression_method].impl.reverse[implement98]",
        "stream_data.spec.create[after106]",
        "stream_pos.spec.prev[before4]",
        "mim_client_target.set_tls_id",
        "vector[transport_parameter].impl.create[implement88]",
        "tls_api.upper.create[before389]",
        "tls_hand_extensions.pop_back",
        "prot.show_header",
        "forged_protected_quic_packet.retired_cids.empty",
        "forged_protected_quic_packet.retired_cids.impl.back[implement94]",
        "fake_client.behavior",
        "show_connected",
        "tls_api.upper.save_active_connection_id_limit",
        "vector[tls.handshake].create",
        "jdx_s.spec.next[after3]",
        "servers.server.arr.set",
        "arr_pkt_num_r.impl.reverse[implement98]",
        "tls_hand_extensions.spec.set[before107]",
        "bytes_to_cid",
        "frame.new_token.handle[before309]",
        "show_kk",
        "frame.handshake_done.handle[before299]",
        "packet_event[after476]",
        "quic_packet_retry.arr.impl.size[implement92]",
        "arr_pkt_num_s.spec.resize[after112]",
        "quic_packet_retry.retired_cids.impl.size[implement92]",
        "quic_packet_0rtt.arr.spec.create[before105]",
        "tls_api.upper.foo.impl.set_initial_keys[implement366]",
        "clients.client.arr.impl.back[implement94]",
        "arr_pkt_num_s.pop_back",
        "frame.stream_data_blocked.handle[before285]",
        "frame.handshake_done.handle[after300]",
        "vector[tls.handshake].domain.next",
        "forged_quic_packet_retry.retired_cids.extend",
        "arr_streamid_s.impl.empty[implement89]",
        "quic_packet.retired_cids.append",
        "index.prev",
        "frame.ack_ecn.range.arr.impl.create[implement88]",
        "mim_server_target.set_tls_id",
        "forged_quic_packet_retry.retired_cids.spec.append[after113]",
        "servers.server.idx.impl.next[implement8]",
        "arr_streamid_s.pop_back",
        "forged_quic_packet_vn.idx.prev",
        "frame.arr.spec.resize[after112]",
        "frame.ack.range.arr.impl.empty[implement89]",
        "init[after334]",
        "vector[tls.extension].impl.empty[implement89]",
        "arr_streamid_s.impl.reverse[implement98]",
        "replayed_quic_packet_0rtt.arr.impl.reverse[implement98]",
        "second_client.set_tls_id",
        "infer_tls_events",
        "vector[tls.cipher_suite].impl.set[implement90]",
        "vector[tls.cipher_suite].impl.extend[implement97]",
        "tls_api.upper.foo.impl.save_token[implement370]",
        "init[after256]",
        "quic_packet_retry.arr.impl.extend[implement97]",
        "bytes.impl.append[implement96]",
        "forged_protected_quic_packet.arr.get",
        "tls_api.upper.session_established",
        "cids.impl.get[implement91]",
        "client.init[after452]",
        "prot.get_pnum",
        "vector[tls.cipher_suite].spec.get[before109]",
        "http_request_file.read[implement71]",
        "tls_client_version_response[after473]",
        "app_server_open_event",
        "tls_hand_extensions.impl.reverse[implement98]",
        "tls_api.upper.iv_size",
        "forged_pkt_serdes_retry.from_bytes[implement399]",
        "forged_quic_packet_retry.retired_cids.get",
        "prot.arr.impl.reverse[implement98]",
        "vector[tls.cipher_suite].impl.reverse[implement98]",
        "show_tls_keys_established_event",
        "quic_packet_retry.arr.spec.size[after111]",
        "quic_packet_coal_0rtt.retired_cids.get",
        "quic_packet_0rtt.retired_cids.spec.resize[after112]",
        "forged_protected_quic_packet.arr.impl.append[implement96]",
        "cids.extend",
        "tls_hand_extensions.domain.next",
        "idx.spec.next[after3]",
        "attacker.behavior",
        "vector[tls.cipher_suite].create",
        "net.impl.handle_recv",
        "frame.path_challenge.handle[before305]",
        "frame.streams_blocked.handle[before289]",
        "stream_data.create",
        "quic_packet_0rtt.retired_cids.impl.append[implement96]",
        "vector[tls.psk_identity].reverse",
        "mim_agent.configure_NAT_attack_in",
        "tls_api_upper_keys_established[implement469]",
        "stream_data.impl.get[implement91]",
        "servers.server.arr.resize",
        "tls_api.id.impl.prev[implement17]",
        "clients.client.arr.spec.create[after106]",
        "infer_tls_events_0rtt",
        "versions_bv.impl.back[implement94]",
        "vector[tls.extension].extend",
        "http_request_file.write[implement70]",
        "replayed_quic_packet_0rtt.arr.spec.get[before109]",
        "prot.show_pkt_length",
        "versions_bv.reverse",
        "forged_quic_packet.arr.spec.empty[after104]",
        "forged_quic_packet_vn.arr.spec.resize[after112]",
        "disable_active_migration.set",
        "forged_protected_quic_packet.arr.impl.create[implement88]",
        "frame.ack_frequency.handle[before311]",
        "quic_packet_coal_0rtt.arr.extend",
        "forged_quic_packet.retired_cids.impl.empty[implement89]",
        "frame.ack.range.arr.extend",
        "replayed_quic_packet_0rtt.retired_cids.spec.create[before105]",
        "forged_protected_quic_packet.idx.spec.next[after3]",
        "handle_receiving_recv",
        "client.set_tls_id",
        "forged_quic_packet.arr.spec.create[before105]",
        "quic_packet_coal_0rtt.retired_cids.impl.size[implement92]",
        "tls_id_to_cid",
        "frame.ack_ecn.range.arr.spec.create[after106]",
        "frame.ack.range.arr.spec.empty[after104]",
        "forged_packet_event_retry[after350]",
        "lo_byte_pos",
        "show_fsm_sending_dataSent_event",
        "arr_pkt_num_s.spec.set[before107]",
        "quic_packet_coal_0rtt.retired_cids.spec.create[after106]",
        "cids.empty",
        "quic_packet_0rtt.arr.append",
        "clients.client.arr.impl.get[implement91]",
        "net_recv[implement466]",
        "mim_client_target.init[after452]",
        "tls_api.lower.send",
        "forged_protected_quic_packet.arr.resize",
        "idx_r.prev",
        "vector[tls.handshake].impl.extend[implement97]",
        "prot.arr.spec.empty[after104]",
        "frame.arr.spec.append[after113]",
        "quic_packet_0rtt.retired_cids.spec.create[before105]",
        "second_server.set_ep",
        "frame.ack_ecn.range.idx.spec.prev[after5]",
        "quic_packet.arr.create",
        "arr_pkt_num_r.get",
        "forged_protected_quic_packet.arr.spec.get[after110]",
        "tls_api.upper.recv",
        "quic_packet_retry.arr.spec.get[after110]",
        "vector[transport_parameter].impl.append[implement96]",
        "arr_pkt_num_s.spec.get[before109]",
        "forged_quic_packet.long",
        "quic_packet_vn.arr.spec.append[after113]",
        "forged_protected_quic_packet.retired_cids.resize",
        "versions.impl.create[implement88]",
        "forged_quic_packet.retired_cids.impl.pop_back[implement95]",
        "servers.server.arr.spec.empty[after104]",
        "prot.get_level",
        "quic_packet.arr.impl.back[implement94]",
        "clients.client.arr.pop_back",
        "recv_protected_packet_mim",
        "vector[tls.cipher_suite].impl.empty[implement89]",
        "quic_packet.retired_cids.impl.create[implement88]",
        "show_version",
        "stream_data.empty",
        "arr_pkt_num_r.impl.resize[implement93]",
        "quic_packet_0rtt.retired_cids.pop_back",
        "replayed_quic_packet_0rtt.idx.spec.prev[before4]",
        "servers.server.set_tls_id",
        "quic_packet_vn.arr.spec.set[after108]",
        "infer_frame",
        "vector[tls.handshake].impl.get[implement91]",
        "quic_packet_retry.arr.get",
        "frame.ack_ecn.range.arr.impl.reverse[implement98]",
        "vector[tls.psk_identity].domain.spec.next[after3]",
        "recv_packet_victim",
        "arr_streamid_r.impl.append[implement96]",
        "forged_quic_packet_retry.arr.impl.reverse[implement98]",
        "versions_bv.pop_back",
        "clients.client.arr.impl.empty[implement89]",
        "quic_packet.retired_cids.spec.append[after113]",
        "bytes.create",
        "cids.spec.set[after108]",
        "mim_agent.init[after457]",
        "quic_packet.idx.spec.prev[before4]",
        "idx_s.spec.next[after3]",
        "quic_packet_coal_0rtt.idx.prev",
        "forged_protected_quic_packet.retired_cids.pop_back",
        "prot.idx.spec.prev[after5]",
        "mim_agent.replay_packet",
        "quic_packet_vn.arr.spec.create[before105]",
        "forged_pkts.impl.resize[implement93]",
        "quic_packet.arr.impl.size[implement92]",
        "forged_quic_packet_retry.arr.spec.create[after106]",
        "init[after262]",
        "replayed_quic_packet_0rtt.arr.spec.append[after113]",
        "quic_packet.arr.set",
        "stream_pos.impl.next[implement8]",
        "idx_s.spec.prev[after5]",
        "quic_packet.retired_cids.get",
        "vector[tls.extension].spec.empty[after104]",
        "quic_packet_retry.long",
        "frame.ack_ecn.handle",
        "forged_packet_event",
        "export_length_cid_extension",
        "vector[transport_parameter].impl.back[implement94]",
        "forged_quic_packet.arr.spec.set[after108]",
        "frame.arr.impl.get[implement91]",
        "arr_streamid_s.spec.append[after113]",
        "frame.ack.range.arr.spec.set[after108]",
        "quic_packet_0rtt.retired_cids.spec.set[before107]",
        "tls_extensions.spec.size[after111]",
        "forward_packet_to_server_event[after342]",
        "vector[tls.handshake].impl.set[implement90]",
        "endpoint_to_pid",
        "replayed_quic_packet_0rtt.arr.spec.empty[after104]",
        "max_ack_delay.set",
        "forged_protected_quic_packet.retired_cids.spec.empty[after104]",
        "forged_quic_packet_retry.arr.impl.set[implement90]",
        "quic_packet_coal_0rtt.idx.next",
        "replayed_quic_packet_0rtt.arr.impl.pop_back[implement95]",
        "clients.client.arr.empty",
        "frame.max_streams_bidi.handle[after278]",
        "prot.arr.resize",
        "vector[tls.cipher_suite].reverse",
        "bytes.spec.create[after106]",
        "vector[tls.compression_method].domain.spec.prev[before4]",
        "forged_quic_packet_retry.retired_cids.impl.get[implement91]",
        "stream_data.get",
        "versions.resize",
        "vector[tls.extension].impl.create[implement88]",
        "tls_hand_extensions.domain.impl.prev[implement9]",
        "frame.connection_close.handle[after280]",
        "forged_pkts.size",
        "tls.handshakes.get",
        "vector[tls.cipher_suite].domain.next",
        "stream_data.back",
        "frame_ack_handle[before488]",
        "forged_protected_quic_packet.retired_cids.spec.create[before105]",
        "replayed_quic_packet_0rtt.arr.spec.create[after106]",
        "attacker.reset_NAT",
        "forged_quic_packet.arr.empty",
        "arr_streamid_r.impl.create[implement88]",
        "forged_protected_quic_packet.retired_cids.spec.create[after106]",
        "frame.ack_ecn.range.idx.prev",
        "stream_pos.prev",
        "arr_pkt_num_r.spec.resize[after112]",
        "stream_data.set",
        "frame.ack.range.arr.spec.get[before109]",
        "bytes.extend",
        "arr_streamid_s.spec.size[after111]",
        "vector[tls.compression_method].get",
        "forged_quic_packet_retry.arr.pop_back",
        "frame.streams_blocked.handle[after290]",
        "stream_data.reverse",
        "forged_quic_packet.retired_cids.spec.set[after108]",
        "forged_quic_packet.arr.impl.empty[implement89]",
        "tls_extensions.extend",
        "quic_packet_coal_0rtt.retired_cids.spec.set[before107]",
        "jdx_s.spec.prev[after5]",
        "index.spec.next[after3]",
        "show_receiving_fsm_event",
        "servers.server.arr.spec.set[before107]",
        "ip_endpoints.spec.set[before107]",
        "forged_quic_packet.arr.spec.append[after113]",
        "vector[tls.compression_method].spec.append[after113]",
        "cids.impl.pop_back[implement95]",
        "forged_pkts.impl.get[implement91]",
        "forged_protected_quic_packet.arr.spec.set[after108]",
        "vector[tls.psk_identity].impl.create[implement88]",
        "tls.handshakes.spec.empty[after104]",
        "forged_protected_quic_packet.arr.extend",
        "frame.ack.range.arr.impl.resize[implement93]",
        "bytes.impl.set[implement90]",
        "replayed_quic_packet_0rtt.retired_cids.impl.append[implement96]",
        "forged_pkt_serdes_vn.from_bytes[implement399]",
        "clients.client.arr.spec.empty[after104]",
        "quic_packet_coal_0rtt.retired_cids.spec.set[after108]",
        "quic_packet_retry.retired_cids.create",
        "tls_api.upper.get_initial_max_stream_data_bidi_local",
        "quic_packet_vn.idx.impl.next[implement8]",
        "quic_packet_0rtt.idx.spec.prev[before4]",
        "arr_streamid_s.spec.create[after106]",
        "servers.server.arr.reverse",
        "client_send_event[after502]",
        "forged_protected_quic_packet.idx.spec.prev[before4]",
        "arr_pkt_num_r.spec.append[after113]",
        "quic_packet_coal_0rtt.arr.impl.resize[implement93]",
        "http_request_file.sync[before66]",
        "quic_packet_coal_0rtt.retired_cids.spec.empty[after104]",
        "forged_quic_packet.retired_cids.extend",
        "handle_receiving_resetRead",
        "vector[tls.psk_identity].impl.get[implement91]",
        "forged_quic_packet_vn.arr.spec.set[after108]",
        "replayed_quic_packet_0rtt.arr.spec.set[after108]",
        "forged_pkt_serdes.to_bytes[implement398]",
        "show_fsm_receiving_dataRecvd_event",
        "tls.handshakes.spec.create[after106]",
        "frame.ack.range.arr.spec.size[after111]",
        "forged_quic_packet_retry.retired_cids.empty",
        "server.init[after454]",
        "replayed_quic_packet_0rtt.retired_cids.impl.back[implement94]",
        "prot.show_payload",
        "stream_id_to_cid",
        "jdx_s.impl.next[implement8]",
        "frame.handle",
        "arr_pkt_num_s.spec.get[after110]",
        "bytes.impl.resize[implement93]",
        "versions_bv.impl.reverse[implement98]",
        "quic_packet_vn.arr.get",
        "vector[transport_parameter].resize",
        "cids.pop_back",
        "vector[tls.extension].impl.extend[implement97]",
        "tls_extensions.spec.resize[after112]",
        "tls_extensions.impl.create[implement88]",
        "stream_data.spec.get[before109]",
        "frame.stream_data_blocked.handle[after286]",
        "arr_pkt_num_r.impl.extend[implement97]",
        "versions.empty",
        "vector[tls.psk_identity].impl.append[implement96]",
        "arr_pkt_num_r.spec.size[after111]",
        "forged_quic_packet_retry.retired_cids.spec.create[after106]",
        "vector[tls.psk_identity].spec.empty[after104]",
        "prot.arr.reverse",
        "tls_api.upper.foo.impl.create_0rtt[implement362]",
        "dst_is_generated_tls",
        "forged_packet_event[before335]",
        "versions_bv.extend",
        "tls_client_retry_response",
        "forged_quic_packet_retry.retired_cids.impl.pop_back[implement95]",
        "quic_packet_retry.arr.back",
        "arr_pkt_num_r.set",
        "quic_packet.retired_cids.impl.empty[implement89]",
        "forged_protected_quic_packet.idx.impl.prev[implement9]",
        "forged_quic_packet.retired_cids.spec.get[after110]",
        "forged_quic_packet_retry.idx.impl.next[implement8]",
        "tls.handshakes.impl.resize[implement93]",
        "quic_packet_retry.retired_cids.impl.get[implement91]",
        "http_request_file.write",
        "show_app_send_event",
        "vector[tls.psk_identity].spec.create[after106]",
        "hi_byte_pos",
        "tls_api.upper.foo.impl.get_active_connection_id_limit[implement382]",
        "forged_protected_quic_packet.idx.next",
        "transport_parameter.set",
        "replayed_pkt_serdes_0rtt.from_bytes",
        "packet_event_0rtt[after331]",
        "tls_hand_extensions.spec.create[after106]",
        "quic_packet_0rtt.arr.spec.resize[after112]",
        "forged_quic_packet.retired_cids.impl.extend[implement97]",
        "forged_pkt_serdes_vn.to_bytes[implement398]",
        "pkt_serdes_0rtt_coal.from_bytes[implement399]",
        "quic_packet.arr.pop_back",
        "vector[tls.compression_method].domain.impl.prev[implement9]",
        "http_request_file.synced",
        "tls.handshakes.domain.spec.next[after3]",
        "forged_quic_packet.arr.impl.size[implement92]",
        "dcid_size_pos",
        "quic_packet_0rtt.retired_cids.impl.pop_back[implement95]",
        "jdx_s.next",
        "clients.client.arr.spec.create[before105]",
        "replayed_quic_packet_0rtt.idx.impl.next[implement8]",
        "arr_streamid_r.empty",
        "quic_packet_0rtt.arr.impl.pop_back[implement95]",
        "replay_packet_to_server_event[before343]",
        "quic_packet_retry.arr.create",
        "quic_packet_vn.arr.impl.append[implement96]",
        "tls_api.upper.foo.impl.decrypt_cipher[implement369]",
        "prot.arr.spec.get[before109]",
        "tls_api.id.prev",
        "servers.server.arr.spec.get[after110]",
        "forged_quic_packet_retry.arr.impl.empty[implement89]",
        "vector[transport_parameter].domain.next",
        "forged_quic_packet.retired_cids.reverse",
        "second_server.set_tls_id",
        "acti_coid_check",
        "arr_streamid_s.create",
        "arr_streamid_r.set",
        "clear_packet",
        "prot.arr.create",
        "vector[tls.psk_identity].size",
        "quic_packet_vn.arr.spec.get[after110]",
        "tls_api.upper.foo.impl.save_initial_max_stream_data_bidi_remote[implement373]",
        "frame.ack.range.idx.spec.next[after3]",
        "modify_protected_packet_event",
        "forged_quic_packet_retry.arr.spec.set[before107]",
        "tls_extensions.spec.set[before107]",
        "mim_agent.set_ep",
        "tls_api_lower_send[implement467]",
        "forged_quic_packet.retired_cids.get",
        "arr_pkt_num_r.pop_back",
        "vector[tls.compression_method].domain.prev",
        "frame.arr.spec.get[before109]",
        "tls_keys_established_event",
        "quic_packet_0rtt.arr.spec.set[after108]",
        "vector[tls.compression_method].spec.set[before107]",
        "vector[tls.cipher_suite].impl.back[implement94]",
        "replayed_quic_packet_0rtt.arr.pop_back",
        "tls_hand_extensions.impl.size[implement92]",
        "forged_quic_packet_vn.arr.impl.back[implement94]",
        "unknown_transport_parameter.set",
        "quic_packet.arr.spec.set[after108]",
        "initial_max_data.set",
        "replayed_quic_packet_0rtt.retired_cids.impl.set[implement90]",
        "tls_hand_extensions.domain.spec.next[after3]",
        "forged_quic_packet_retry.retired_cids.impl.back[implement94]",
        "frame.rst_stream.handle",
        "frame.unknown_frame.handle[after298]",
        "vector[tls.psk_identity].set",
        "show_fsm_receiving_resetRead_event",
        "forged_quic_packet.retired_cids.impl.get[implement91]",
        "initial_max_stream_data_bidi_remote.set",
        "forged_quic_packet.arr.reverse",
        "padding_packet_event",
        "quic_packet.arr.spec.size[after111]",
        "idx_r.spec.next[after3]",
        "vector[transport_parameter].spec.append[after113]",
        "quic_packet_coal_0rtt.retired_cids.set",
        "forged_quic_packet_retry.idx.spec.prev[before4]",
        "modify_protected_packet_event[before337]",
        "export_length_cid",
        "frame_crypto_handle[before487]",
        "vector[tls.extension].create",
        "quic_packet.arr.back",
        "quic_packet.arr.resize",
        "forged_quic_packet_retry.retired_cids.spec.get[after110]",
        "quic_packet.retired_cids.pop_back",
        "quic_packet.arr.impl.empty[implement89]",
        "forged_protected_quic_packet.arr.size",
        "vector[tls.compression_method].spec.set[after108]",
        "frame.stream_data_blocked.handle",
        "quic_packet.retired_cids.impl.reverse[implement98]",
        "tls_extensions.domain.spec.prev[before4]",
        "second_client.set_ep",
        "frame.arr.impl.resize[implement93]",
        "quic_packet_0rtt.arr.impl.size[implement92]",
        "clients.client.arr.extend",
        "vector[tls.handshake].spec.empty[after104]",
        "arr_pkt_num_s.create",
        "vector[tls.extension].spec.size[after111]",
        "prot.arr.impl.pop_back[implement95]",
        "tls_api.upper.get_initial_max_stream_data_uni",
        "quic_packet.retired_cids.impl.append[implement96]",
        "frame.new_token.handle[after310]",
        "stream_data.impl.create[implement88]",
        "stateless_reset_token.set",
        "replayed_pkt_serdes_0rtt.to_bytes",
        "versions_bv.impl.create[implement88]",
        "quic_packet.retired_cids.impl.get[implement91]",
        "replayed_quic_packet_0rtt.retired_cids.impl.reverse[implement98]",
        "tls.handshakes.impl.back[implement94]",
        "frame.ack_ecn.range.arr.impl.empty[implement89]",
        "quic_packet_0rtt.retired_cids.empty",
        "quic_packet_0rtt.arr.impl.append[implement96]",
        "frame.ack.range.arr.empty",
        "replayed_quic_packet_0rtt.arr.spec.get[after110]",
        "frame.ack_ecn.range.arr.spec.get[before109]",
        "attacker.set_tls_id",
        "tls_api.upper.keys_established",
        "forged_quic_packet_vn.arr.reverse",
        "frame_new_connection_id_handle[before493]",
        "forged_pkts.spec.create[after106]",
        "forged_protected_quic_packet.arr.spec.size[after111]",
        "forged_protected_pkt_serdes.to_bytes",
        "tls.handshakes.set",
        "tls_api.upper.foo.impl.save_initial_max_stream_data_uni[implement371]",
        "stream_data.spec.get[after110]",
        "frame_connection_close_handle[before495]",
        "forged_quic_packet_vn.arr.spec.get[after110]",
        "mim_agent.get_saved_packets",
        "forged_quic_packet_retry.retired_cids.impl.resize[implement93]",
        "vector[transport_parameter].get",
        "quic_packet.idx.prev",
        "quic_packet_0rtt.retired_cids.impl.back[implement94]",
        "quic_packet_retry.retired_cids.append",
        "cids.get",
        "packet_event_vn[before316]",
        "retry_source_connection_id.set",
        "frame.ack_ecn.range.arr.append",
        "quic_packet.arr.impl.set[implement90]",
        "quic_packet_coal_0rtt.retired_cids.append",
        "arr_pkt_num_s.spec.append[after113]",
        "quic_packet_retry.idx.prev",
        "frame.stream.handle",
        "frame.ack_ecn.range.arr.spec.size[after111]",
        "tls_api.upper.encrypt_cipher",
        "quic_packet.arr.get",
        "is_padding_packet",
        "vector[tls.handshake].impl.create[implement88]",
        "cids.size",
        "export_length_cid_mim",
        "show_level_offset_length",
        "vector[tls.handshake].spec.get[before109]",
        "forged_quic_packet_retry.retired_cids.pop_back",
        "quic_packet_0rtt.arr.impl.create[implement88]",
        "cids.set",
        "packet_event_vn[after317]",
        "quic_packet_coal_0rtt.retired_cids.spec.create[before105]",
        "vector[transport_parameter].domain.spec.next[after3]",
        "quic_packet.arr.spec.set[before107]",
        "ip_endpoints.append",
        "pkt_serdes.to_bytes[implement398]",
        "make_transport_parameters",
        "arr_streamid_r.spec.create[after106]",
        "quic_packet_retry.idx.impl.prev[implement9]",
        "replayed_quic_packet_0rtt.retired_cids.spec.resize[after112]",
        "vector[tls.handshake].domain.impl.prev[implement9]",
        "forged_protected_quic_packet.arr.reverse",
        "prot.arr.impl.empty[implement89]",
        "frame.max_stream_data.handle[before283]",
        "tls_api.upper.save_initial_max_stream_id_bidi",
        "prot.get_var_int_len",
        "replayed_quic_packet_0rtt.arr.empty",
        "mim_client_target.behavior",
        "quic_packet_coal_0rtt.retired_cids.spec.get[after110]",
        "frame.idx.impl.next[implement8]",
        "quic_packet_0rtt.long",
        "vector[transport_parameter].append",
        "quic_packet_vn.arr.create",
        "second_client.behavior",
        "app_server_open_event[before240]",
        "tls_extensions.spec.get[before109]",
        "frame.stream.handle[after268]",
        "stream_data.impl.reverse[implement98]",
        "vector[tls.handshake].impl.resize[implement93]",
        "init[after239]",
        "frame.ack.range.arr.impl.pop_back[implement95]",
        "tls_api.upper.save_initial_max_data",
        "quic_packet_0rtt.arr.impl.get[implement91]",
        "cids.impl.reverse[implement98]",
        "versions.impl.empty[implement89]",
        "tls_hand_extensions.impl.empty[implement89]",
        "tls_extensions.spec.empty[after104]",
        "tls_extensions.impl.get[implement91]",
        "quic_packet_0rtt.retired_cids.impl.resize[implement93]",
        "replayed_quic_packet_0rtt.retired_cids.pop_back",
        "frame.idx.prev",
        "arr_streamid_r.back",
        "tls_extensions.spec.append[after113]",
        "tls_hand_extensions.impl.set[implement90]",
        "forged_protected_quic_packet.retired_cids.impl.extend[implement97]",
        "index.spec.prev[before4]",
        "ip_endpoints.impl.back[implement94]",
        "frame.max_stream_data.handle[after284]",
        "frame_max_streams_handle[before492]",
        "vector[tls.compression_method].domain.spec.next[after3]",
        "handle_sending_dataSent",
        "quic_packet_coal_0rtt.idx.spec.prev[after5]",
        "prot.idx.prev",
        "vector[tls.cipher_suite].size",
        "forged_quic_packet_retry.arr.impl.size[implement92]",
        "frame.max_stream_data.handle",
        "show_fsm_receiving_sizeKnown_event",
        "quic_packet_0rtt.retired_cids.impl.set[implement90]",
        "quic_packet_retry.retired_cids.back",
        "vector[tls.extension].domain.spec.prev[before4]",
        "forged_quic_packet_retry.arr.spec.set[after108]",
        "frame.ack.range.idx.impl.next[implement8]",
        "replayed_quic_packet_0rtt.retired_cids.spec.append[after113]",
        "frame.arr.spec.size[after111]",
        "vector[tls.extension].set",
        "tls_api.upper.destroy[before391]",
        "quic_packet_coal_0rtt.arr.spec.get[after110]",
        "frame.malicious_frame.handle[before313]",
        "servers.server.arr.empty",
        "frame.path_response.handle",
        "cids.spec.get[before109]",
        "quic_packet_retry.retired_cids.impl.append[implement96]",
        "versions_bv.spec.empty[after104]",
        "greater_microsecs[implement446]",
        "forged_quic_packet.arr.spec.get[after110]",
        "replayed_quic_packet_0rtt.retired_cids.extend",
        "quic_packet.retired_cids.spec.create[after106]",
        "ip_endpoints.spec.resize[after112]",
        "prot.arr.size",
        "replayed_quic_packet_0rtt.retired_cids.back",
        "bytes.set",
        "quic_packet_retry.arr.pop_back",
        "quic_packet_coal_0rtt.retired_cids.empty",
        "frame.ack_ecn.range.arr.back",
        "servers.server.idx.spec.next[after3]",
        "vector[tls.handshake].impl.append[implement96]",
        "frame.ack_ecn.range.arr.impl.extend[implement97]",
        "cids.spec.append[after113]",
        "forged_quic_packet.idx.impl.next[implement8]",
        "arr_streamid_r.spec.get[after110]",
        "vector[transport_parameter].domain.impl.next[implement8]",
        "replayed_quic_packet_0rtt.retired_cids.spec.size[after111]",
        "clients.client.arr.spec.size[after111]",
        "forged_protected_quic_packet.long",
        "replayed_pkt_serdes_0rtt.to_bytes[implement398]",
        "tls_hand_extensions.domain.spec.prev[before4]",
        "attacker.set_ep",
        "net.impl.open",
        "init[after508]",
        "prot.arr.set",
        "frame.application_close.handle[after282]",
        "init[after463]",
        "quic_packet_0rtt.retired_cids.spec.size[after111]",
        "vector[tls.psk_identity].impl.extend[implement97]",
        "prot.arr.impl.get[implement91]",
        "forged_quic_packet_retry.retired_cids.spec.empty[after104]",
        "replayed_quic_packet_0rtt.arr.spec.create[before105]",
        "quic_packet.retired_cids.spec.size[after111]",
        "clients.client.arr.back",
        "vector[tls.cipher_suite].spec.set[before107]",
        "tls_hand_extensions.impl.create[implement88]",
        "victim_agent.setup_socket",
        "idx_r.spec.prev[before4]",
        "stream_data.impl.append[implement96]",
        "forged_quic_packet.retired_cids.spec.create[after106]",
        "frame.ack_ecn.range.arr.spec.empty[after104]",
        "arr_streamid_r.spec.empty[after104]",
        "frame.data_blocked.handle[before287]",
        "arr_streamid_r.append",
        "tls.handshakes.domain.spec.prev[before4]",
        "pkt_serdes.to_bytes",
        "frame.ack_ecn.range.arr.spec.get[after110]",
        "forged_quic_packet.arr.spec.set[before107]",
        "frame.ack.handle",
        "frame.arr.impl.set[implement90]",
        "jdx_r.spec.next[after3]",
        "packet_scid",
        "idx.next",
        "pkt_serdes_vn.from_bytes[implement399]",
        "prot.retry_integrity_tag[implement433]",
        "frame.ack.range.arr.spec.get[after110]",
        "quic_packet_coal_0rtt.idx.spec.next[after3]",
        "forward_packet_to_client_event[before339]",
        "tls_api.upper.foo.impl.create[implement360]",
        "index.spec.prev[after5]",
        "client_server.set_ep",
        "frame_rst_stream_handle[before489]",
        "handle_tls_handshake",
        "forged_quic_packet_retry.arr.spec.append[after113]",
        "arr_pkt_num_s.spec.set[after108]",
        "ip_endpoints.impl.empty[implement89]",
        "quic_packet_retry.arr.impl.append[implement96]",
        "frame.max_data.handle",
        "forged_quic_packet.arr.spec.size[after111]",
        "forged_pkts.spec.size[after111]",
        "ip_endpoints.resize",
        "tls_hand_extensions.domain.prev",
        "tls_hand_extensions.resize",
        "vector[tls.handshake].impl.reverse[implement98]",
        "quic_packet.arr.spec.create[before105]",
        "tls.handshakes.extend",
        "frame.ack_ecn.range.arr.spec.set[after108]",
        "tls_api.upper.key_material_export[before396]",
        "replayed_quic_packet_0rtt.arr.back",
        "versions_bv.spec.create[before105]",
        "tls_hand_extensions.impl.pop_back[implement95]",
        "scid_size_pos",
        "vector[tls.extension].get",
        "tls_extensions.size",
        "tls.handshakes.spec.append[after113]",
        "vector[tls.cipher_suite].impl.create[implement88]",
        "init[after460]",
        "tls.handshakes.resize",
        "show_fsm_receiving_recv_event",
        "http_request_file.sync",
        "cids.spec.resize[after112]",
        "packet_event_retry[after478]",
        "quic_packet_0rtt.retired_cids.back",
        "arr_streamid_s.impl.extend[implement97]",
        "quic_packet_0rtt.idx.next",
        "vector[transport_parameter].spec.create[before105]",
        "quic_packet_coal_0rtt.retired_cids.impl.pop_back[implement95]",
        "packet_event_coal_0rtt",
        "tls.handshakes.spec.get[after110]",
        "tls_extensions.resize",
        "quic_packet_coal_0rtt.long",
        "forged_quic_packet_vn.idx.spec.next[after3]",
        "arr_streamid_r.pop_back",
        "quic_packet_vn.idx.next",
        "forged_quic_packet.arr.append",
        "quic_packet_retry.arr.impl.reverse[implement98]",
        "stream_data.spec.resize[after112]",
        "jdx_r.spec.prev[before4]",
        "forged_quic_packet_vn.arr.spec.get[before109]",
        "forged_quic_packet_retry.idx.spec.next[after3]",
        "tls_extensions.impl.set[implement90]",
        "forged_quic_packet.idx.spec.next[after3]",
        "arr_pkt_num_r.create",
        "forged_quic_packet.arr.get",
        "clients.client.arr.get",
        "frame.idx.spec.next[after3]",
        "versions_bv.impl.resize[implement93]",
        "bytes.size",
        "forged_quic_packet.retired_cids.impl.create[implement88]",
        "cids.impl.resize[implement93]",
        "frame_stream_data_blocked_handle[before498]",
        "pkt_serdes_retry.to_bytes[implement398]",
        "prot.get_pnum_len",
        "forged_quic_packet.idx.impl.prev[implement9]",
        "attacker.configure_NAT_attack_in_spoof",
        "tls_api.upper.foo.impl.decrypt_aead[implement385]",
        "quic_packet_coal_0rtt.retired_cids.impl.resize[implement93]",
        "frame_stream_handle[before486]",
        "clients.client.arr.spec.get[after110]",
        "servers.init[after455]",
        "forged_quic_packet_vn.arr.impl.empty[implement89]",
        "frame.arr.impl.reverse[implement98]",
        "prot.arr.impl.resize[implement93]",
        "quic_packet_coal_0rtt.arr.spec.create[before105]",
        "http_request_file.read",
        "bytes.reverse",
        "replayed_quic_packet_0rtt.retired_cids.resize",
        "tls.handshakes.impl.size[implement92]",
        "vector[tls.compression_method].spec.get[after110]",
        "versions_bv.impl.append[implement96]",
        "forged_quic_packet_vn.arr.impl.get[implement91]",
        "vector[tls.compression_method].pop_back",
        "packet_event_0rtt",
        "quic_packet_vn.arr.empty",
        "quic_packet_0rtt.arr.spec.get[after110]",
        "versions_bv.size",
        "quic_packet_0rtt.arr.impl.set[implement90]",
        "arr_streamid_s.impl.back[implement94]",
        "quic_packet_0rtt.arr.spec.get[before109]",
        "stream_data.spec.append[after113]",
        "vector[tls.psk_identity].impl.empty[implement89]",
        "versions.reverse",
        "stream_max_data",
        "frame.crypto.handle[before269]",
        "quic_packet_coal_0rtt.arr.impl.reverse[implement98]",
        "quic_packet_coal_0rtt.arr.append",
        "prot.cid_to_tls_id",
        "replayed_quic_packet_0rtt.retired_cids.append",
        "tls_extensions.domain.spec.prev[after5]",
        "forged_quic_packet.retired_cids.set",
        "modify_protected_packet_event[after338]",
        "forged_quic_packet.retired_cids.spec.empty[after104]",
        "quic_packet_vn.arr.impl.set[implement90]",
        "forged_quic_packet.arr.pop_back",
        "show_set_initial_keys",
        "max_idle_timeout.set",
        "vector[tls.psk_identity].spec.set[before107]",
        "arr_pkt_num_r.impl.set[implement90]",
        "versions.spec.get[before109]",
        "app_server_open_event[after241]",
        "prot.arr.empty",
        "stream_data.spec.empty[after104]",
        "quic_packet_retry.arr.empty",
        "frame.crypto.handle[after270]",
        "frame.malicious_frame.handle[after314]",
        "frame.ack.range.arr.set",
        "vector[tls.handshake].impl.back[implement94]",
        "prot.stream_data_xor",
        "arr_pkt_num_r.impl.create[implement88]",
        "tls_hand_extensions.spec.empty[after104]",
        "arr_streamid_s.set",
        "quic_packet.arr.extend",
        "vector[tls.handshake].spec.set[after108]",
        "vector[transport_parameter].set",
        "victim_agent.init[after459]",
        "vector[tls.cipher_suite].spec.resize[after112]",
        "src_tls_id",
        "vector[tls.extension].domain.spec.prev[after5]",
        "frame.ack.range.arr.size",
        "quic_packet_0rtt.retired_cids.impl.extend[implement97]",
        "arr_pkt_num_r.impl.size[implement92]",
        "cids.spec.create[after106]",
        "versions_bv.impl.get[implement91]",
        "show_stream",
        "undefined_host_error",
        "replayed_quic_packet_0rtt.arr.impl.back[implement94]",
        "frame.ack_ecn.range.idx.next",
        "clients.client.arr.set",
        "tls_hand_extensions.impl.append[implement96]",
        "vector[tls.cipher_suite].extend",
        "vector[tls.cipher_suite].spec.empty[after104]",
        "quic_packet.arr.impl.get[implement91]",
        "forged_quic_packet_retry.arr.impl.back[implement94]",
        "show_fsm_receiving_resetRecvd_event",
        "tls_api.id.spec.next[after11]",
        "quic_packet_0rtt.arr.size",
        "forward_packet_to_client_event",
        "quic_packet.idx.spec.prev[after5]",
        "vector[tls.extension].resize",
        "tls.handshakes.spec.set[before107]",
        "quic_packet_coal_0rtt.retired_cids.impl.empty[implement89]",
        "endpoint_id_addr",
        "frame.ack_frequency.handle",
        "versions.spec.size[after111]",
        "arr_streamid_s.spec.get[before109]",
        "vector[tls.handshake].domain.spec.prev[after5]",
        "show_sending_fsm_event",
        "frame.arr.create",
        "quic_packet_0rtt.retired_cids.spec.get[before109]",
        "frame_max_stream_data_handle[before497]",
        "servers.server.arr.size",
        "quic_packet.arr.spec.get[after110]",
        "prot.idx.next",
        "vector[tls.handshake].empty",
        "tls_api.upper.foo.impl.get_initial_max_stream_data_bidi_local[implement378]",
        "quic_packet_retry.arr.spec.create[after106]",
        "vector[tls.compression_method].impl.back[implement94]",
        "quic_packet_retry.retired_cids.spec.create[before105]",
        "tls.handshakes.back",
        "bytes.append",
        "tls_extensions.impl.back[implement94]",
        "forged_quic_packet_retry.arr.empty",
        "forged_quic_packet.arr.impl.reverse[implement98]",
        "versions_bv.spec.get[before109]",
        "quic_packet_0rtt.idx.impl.prev[implement9]",
        "tls_extensions.spec.get[after110]",
        "tls.handshake_parser.deserialize",
        "vector[tls.compression_method].impl.get[implement91]",
        "forged_protected_quic_packet.arr.impl.back[implement94]",
        "vector[tls.compression_method].impl.create[implement88]",
        "arr_pkt_num_s.impl.resize[implement93]",
        "forged_quic_packet.arr.impl.back[implement94]",
        "vector[tls.compression_method].spec.empty[after104]",
        "forged_protected_quic_packet.arr.spec.get[before109]",
        "quic_packet_0rtt.arr.extend",
        "servers.set_ep",
        "tls_extensions.spec.set[after108]",
        "tls_hand_extensions.create",
        "bytes.pop_back",
        "versions.back",
        "arr_streamid_r.impl.reverse[implement98]",
        "vector[tls.cipher_suite].spec.set[after108]",
        "replayed_quic_packet_0rtt.retired_cids.spec.empty[after104]",
        "tls_api.upper.foo.impl.save_initial_max_stream_id_bidi[implement379]",
        "show_iretry",
        "quic_packet_0rtt.retired_cids.extend",
        "forged_quic_packet_retry.retired_cids.spec.resize[after112]",
        "replayed_quic_packet_0rtt.retired_cids.spec.create[after106]",
        "quic_packet_retry.arr.impl.empty[implement89]",
        "idx.spec.prev[before4]",
        "forged_quic_packet_vn.arr.spec.set[before107]",
        "frame_max_data_handle[before499]",
        "arr_streamid_s.empty",
        "replayed_packet_event_0rtt[before354]",
        "vector[tls.handshake].domain.impl.next[implement8]",
        "forged_quic_packet_retry.retired_cids.set",
        "stream_data.spec.set[after108]",
        "double_cid",
        "frame.application_close.handle[before281]",
        "tls_hand_extensions.impl.get[implement91]",
        "quic_packet_coal_0rtt.retired_cids.impl.extend[implement97]",
        "quic_packet_retry.retired_cids.spec.create[after106]",
        "quic_packet_retry.retired_cids.spec.set[after108]",
        "tls.handshake_data_event",
        "arr_pkt_num_s.impl.extend[implement97]",
        "vector[tls.compression_method].impl.set[implement90]",
        "tls_api.upper.create_0rtt",
        "quic_packet_coal_0rtt.arr.impl.extend[implement97]",
        "vector[tls.handshake].pop_back",
        "tls_hand_extensions.spec.create[before105]",
        "vector[tls.extension].impl.reverse[implement98]",
        "quic_packet_coal_0rtt.arr.spec.resize[after112]",
        "quic_packet_vn.arr.impl.back[implement94]",
        "forged_quic_packet_retry.retired_cids.reverse",
        "bytes.impl.empty[implement89]",
        "versions.impl.reverse[implement98]",
        "vector[tls.handshake].domain.spec.next[after3]",
        "forged_quic_packet.arr.extend",
        "prot.get_pnum_len_b",
        "frame.ack_ecn.range.arr.impl.back[implement94]",
        "tls_extensions.impl.resize[implement93]",
        "cids.impl.append[implement96]",
        "pkt_serdes_0rtt.from_bytes[implement399]",
        "servers.server.arr.impl.resize[implement93]",
        "init[after326]",
        "servers.server.arr.impl.reverse[implement98]",
        "vector[transport_parameter].back",
        "frame.ack.range.arr.spec.create[before105]",
        "forged_quic_packet.idx.spec.prev[before4]",
        "forged_pkts.impl.append[implement96]",
        "app_server_open_event_0rtt",
        "versions_bv.back",
        "tls.handshakes.impl.append[implement96]",
        "tls_api.upper.destroy[after392]",
        "servers.server.arr.spec.create[after106]",
        "vector[transport_parameter].impl.pop_back[implement95]",
        "quic_packet_retry.idx.next",
        "arr_streamid_r.impl.get[implement91]",
        "prot.arr.impl.create[implement88]",
        "forged_protected_quic_packet.retired_cids.impl.resize[implement93]",
        "ip_endpoints.impl.get[implement91]",
        "quic_packet_retry.arr.spec.create[before105]",
        "tls_api.upper.foo.impl.lower_recv[implement387]",
        "tls_api.upper.foo.impl.get_initial_max_data[implement376]",
        "frame.ack.range.arr.append",
        "clients.client.arr.resize",
        "prot.arr.get",
        "frame.ack.range.arr.pop_back",
        "ack_delay_exponent.set",
        "vector[tls.psk_identity].create",
        "bytes.back",
        "jdx_s.prev",
        "vector[tls.extension].back",
        "forged_protected_quic_packet.arr.spec.set[before107]",
        "tls_api.upper.create_0rtt_client",
        "frame.stop_sending.handle",
        "arr_streamid_s.reverse",
        "quic_packet_coal_0rtt.retired_cids.create",
        "replay_packet_to_server_event",
        "lower_stream_id",
        "quic_packet_retry.retired_cids.empty",
        "quic_packet_retry.arr.spec.set[after108]",
        "stream_data.impl.pop_back[implement95]",
        "tls_handshake_data_event[after470]",
        "fake_client.set_tls_id",
        "tls_client_retry_response[after474]",
        "forged_packet_event_vn[before351]",
        "quic_packet_retry.retired_cids.spec.set[before107]",
        "frame.arr.size",
        "vector[tls.cipher_suite].impl.get[implement91]",
        "forged_protected_quic_packet.retired_cids.impl.set[implement90]",
        "quic_packet_retry.arr.impl.back[implement94]",
        "tls_api.upper.destroy",
        "frame.ack.range.arr.spec.append[after113]",
        "show_endpoint",
        "arr_streamid_r.spec.set[after108]",
        "quic_packet_coal_0rtt.arr.create",
        "forged_quic_packet_retry.arr.spec.get[before109]",
        "frame.stop_sending.handle[after274]",
        "prot.get_packet_sample",
        "tls_api.upper.compute_retry_integrity_tag",
        "handle_receiving_sizeKnown",
        "forged_quic_packet_retry.arr.size",
        "stream_pos.spec.prev[after5]",
        "forged_quic_packet_retry.retired_cids.spec.create[before105]",
        "idx.prev",
        "quic_packet_0rtt.arr.set",
        "clients.client.arr.impl.set[implement90]",
        "mim_agent.set_tls_id",
        "client_send_event",
        "frame.ack.handle[before263]",
        "vector[transport_parameter].impl.size[implement92]",
        "quic_packet_coal_0rtt.retired_cids.spec.size[after111]",
        "forged_protected_quic_packet.retired_cids.spec.get[before109]",
        "forged_pkts.spec.set[before107]",
        "cids.spec.size[after111]",
        "stream_pos.impl.prev[implement9]",
        "quic_packet.retired_cids.spec.resize[after112]",
        "frame.arr.append",
        "tls_extensions.impl.append[implement96]",
        "quic_packet_coal_0rtt.arr.impl.size[implement92]",
        "replayed_quic_packet_0rtt.long",
        "tls_hand_extensions.impl.back[implement94]",
        "init[after462]",
        "show_pstats",
        "mim_agent.modify_packet",
        "quic_packet_retry.retired_cids.reverse",
        "quic_packet_0rtt.retired_cids.impl.size[implement92]",
        "frame.ack_ecn.range.arr.resize",
        "tls_hand_extensions.get",
        "forged_pkts.spec.create[before105]",
        "client_server.init[after456]",
        "quic_packet_vn.arr.pop_back",
        "prot.arr.spec.resize[after112]",
        "stream_data.pop_back",
        "vector[tls.cipher_suite].domain.spec.next[after3]",
        "clients.client.idx.spec.prev[after5]",
        "forged_protected_quic_packet.arr.back",
        "forged_quic_packet_retry.arr.spec.create[before105]",
        "forged_protected_quic_packet.arr.impl.resize[implement93]",
        "bytes.spec.size[after111]",
        "show_biatch_2",
        "handle_receiving_ack",
        "tls_recv_event",
        "show_test",
        "show_initial_request_vn",
        "vector[tls.psk_identity].domain.impl.prev[implement9]",
        "frame.ack.range.arr.spec.create[after106]",
        "clients.client.set_ep",
        "tls.handshakes.spec.resize[after112]",
        "tls_hand_extensions.extend",
        "arr_pkt_num_s.spec.size[after111]",
        "replayed_pkt_serdes_0rtt.from_bytes[implement399]",
        "vector[tls.cipher_suite].get",
        "frame.arr.set",
        "frame.max_data.handle[after294]",
        "forged_quic_packet_vn.arr.append",
        "pkt_serdes_0rtt_coal.to_bytes",
        "clients.client.idx.prev",
        "cids.impl.extend[implement97]",
        "frame.ack.range.arr.impl.size[implement92]",
        "frame.arr.spec.create[before105]",
        "servers.server.arr.spec.set[after108]",
        "cids.back",
        "quic_packet_coal_0rtt.arr.spec.get[before109]",
        "servers.server.arr.impl.empty[implement89]",
        "tls_api.upper.foo.impl.get_initial_max_stream_data_uni[implement372]",
        "infer_tls",
        "versions.impl.set[implement90]",
        "vector[tls.psk_identity].domain.next",
        "forged_protected_quic_packet.arr.spec.create[before105]",
        "packet_event_0rtt[after480]",
        "forged_protected_quic_packet.arr.empty",
        "frame.ack_ecn.range.idx.spec.next[after3]",
        "show_tls_id_to_cid",
        "frame.arr.impl.pop_back[implement95]",
        "forged_pkts.spec.get[before109]",
        "prot.to_var_int_16",
        "quic_packet_vn.idx.spec.prev[after5]",
        "replayed_quic_packet_0rtt.retired_cids.empty",
        "greater_stream_pos[implement439]",
        "arr_streamid_s.spec.create[before105]",
        "versions.spec.set[after108]",
        "forged_protected_pkt_serdes.from_bytes[implement399]",
        "enable_time_stamp.set",
        "forged_pkt_serdes.from_bytes",
        "prot.idx.spec.prev[before4]",
        "frame.ack.range.arr.spec.set[before107]",
        "initial_max_stream_id_uni.set",
        "forged_quic_packet_retry.arr.impl.append[implement96]",
        "arr_streamid_s.append",
        "vector[tls.compression_method].impl.append[implement96]",
        "handle_sending_send",
        "reflect_packet_to_victim_event[before345]",
        "forged_pkt_serdes_retry.from_bytes",
        "forged_quic_packet_retry.retired_cids.impl.set[implement90]",
        "frame.ack.range.arr.impl.back[implement94]",
        "server.behavior",
        "quic_packet_retry.retired_cids.resize",
        "tls_api.upper.get_initial_max_data",
        "tls_api.upper.key_material_export",
        "tls.handshake_parser.deserialize[implement253]",
        "replayed_quic_packet_0rtt.arr.resize",
        "quic_packet_retry.arr.append",
        "servers.server.arr.spec.append[after113]",
        "frame.arr.impl.size[implement92]",
        "forged_protected_quic_packet.retired_cids.append",
        "forged_packet_event[after336]",
        "mim_server_target.behavior",
        "forged_protected_quic_packet.arr.impl.size[implement92]",
        "vector[tls.cipher_suite].back",
        "stream_id_allowed",
        "vector[tls.handshake].impl.empty[implement89]",
        "quic_packet_coal_0rtt.arr.spec.create[after106]",
        "frame.ack_ecn.range.arr.pop_back",
        "frame.ack.range.arr.impl.extend[implement97]",
        "bytes.spec.set[before107]",
        "versions_bv.spec.set[before107]",
        "initial_source_connection_id.set",
        "idx_r.impl.prev[implement9]",
        "pkt_serdes_vn.to_bytes[implement398]",
        "forged_pkts.spec.append[after113]",
        "tls_client_version_response",
        "quic_packet.arr.append",
        "vector[transport_parameter].domain.spec.prev[after5]",
        "forged_quic_packet_retry.arr.spec.resize[after112]",
        "init[after329]",
        "http_request_file.read[after65]",
        "cids.append",
        "vector[tls.psk_identity].spec.resize[after112]",
        "handle_sending_dataRecvd",
        "forged_quic_packet_vn.arr.back",
        "versions_bv.get",
        "net.recv",
        "forged_quic_packet_retry.arr.extend",
        "servers.server.arr.spec.create[before105]",
        "quic_packet_retry.retired_cids.spec.empty[after104]",
        "vector[tls.handshake].spec.create[before105]",
        "prot.arr.spec.create[after106]",
        "vector[tls.cipher_suite].empty",
        "frame.arr.empty",
        "arr_pkt_num_r.reverse",
        "arr_pkt_num_r.impl.get[implement91]",
        "quic_packet_retry.arr.set",
        "lower_microsecs",
        "jdx_s.impl.prev[implement9]",
        "quic_packet.retired_cids.impl.pop_back[implement95]",
        "tls.handshakes.domain.impl.prev[implement9]",
        "frame.ack.range.arr.impl.set[implement90]",
        "versions_bv.spec.create[after106]",
        "forged_pkts.impl.extend[implement97]",
        "packet_event[before323]",
        "tls.handshakes.create",
        "jdx_s.spec.prev[before4]",
        "servers.src_tls_id",
        "forged_protected_quic_packet.retired_cids.reverse",
        "forged_protected_quic_packet.arr.append",
        "quic_packet.retired_cids.back",
        "vector[transport_parameter].impl.empty[implement89]",
        "show_fsm_sending_resetRecvd_event",
        "forged_quic_packet_retry.idx.impl.prev[implement9]",
        "greater_stream_pos",
        "dcid_size_cl",
        "packet_event[before485]",
        "forged_protected_quic_packet.retired_cids.impl.size[implement92]",
        "arr_pkt_num_r.spec.create[before105]",
        "arr_streamid_s.impl.set[implement90]",
        "bytes.get",
        "forged_quic_packet_retry.idx.spec.prev[after5]",
        "forged_packet_event_retry",
        "vector[transport_parameter].domain.prev",
        "arr_streamid_r.spec.size[after111]",
        "cid_to_bytes",
        "forged_pkt_serdes_retry.to_bytes",
        "http_request_file.init[after63]",
        "quic_packet_coal_0rtt.retired_cids.size",
        "vector[tls.compression_method].spec.get[before109]",
        "forged_pkts.impl.empty[implement89]",
        "frame.path_challenge.handle",
        "vector[transport_parameter].impl.resize[implement93]",
        "show_tls_lower_send",
        "frame.ack.range.idx.spec.prev[after5]",
        "versions_bv.empty",
        "tls_api.id.next",
        "frame.retire_connection_id.handle[before303]",
        "pkt_serdes_0rtt.from_bytes",
        "versions_bv.impl.empty[implement89]",
        "quic_packet_0rtt.arr.resize",
        "quic_packet_retry.retired_cids.impl.create[implement88]",
        "vector[transport_parameter].domain.impl.prev[implement9]",
        "prot.encrypt",
        "forged_quic_packet_vn.arr.impl.set[implement90]",
        "forged_quic_packet.retired_cids.spec.get[before109]",
        "show_fsm_sending_dataRecvd_event",
        "max_additional_data",
        "quic_packet_coal_0rtt.retired_cids.impl.create[implement88]",
        "frame.path_response.handle[after308]",
        "frame.new_token.handle",
        "quic_packet.arr.impl.reverse[implement98]",
        "quic_packet_0rtt.idx.prev",
        "show_tls_send_event",
        "forged_pkts.pop_back",
        "quic_packet_vn.arr.spec.size[after111]",
        "vector[tls.extension].domain.next",
        "ip_endpoints.spec.create[after106]",
        "handle_client_transport_parameters",
        "forged_quic_packet_vn.idx.next",
        "arr_streamid_r.spec.create[before105]",
        "vector[tls.psk_identity].spec.create[before105]",
        "ip_endpoints.spec.create[before105]",
        "replayed_quic_packet_0rtt.idx.impl.prev[implement9]",
        "vector[transport_parameter].reverse",
        "arr_pkt_num_s.impl.pop_back[implement95]",
        "replayed_quic_packet_0rtt.retired_cids.impl.empty[implement89]",
        "frame.max_streams_bidi.handle[before277]",
        "forward_packet_to_server_event[before341]",
        "show_aead",
        "replayed_quic_packet_0rtt.arr.spec.resize[after112]",
        "replayed_quic_packet_0rtt.retired_cids.get",
        "enqueue_frame",
        "quic_packet.arr.impl.append[implement96]",
        "quic_packet_retry.retired_cids.impl.extend[implement97]",
        "forged_quic_packet_vn.arr.spec.empty[after104]",
        "show_cid",
        "ip_endpoints.reverse",
        "forged_quic_packet.retired_cids.spec.size[after111]",
        "tls.handshakes.impl.pop_back[implement95]",
        "forged_quic_packet.retired_cids.pop_back",
        "stream_data.spec.set[before107]",
        "tls_api.upper.encrypt_aead",
        "forged_quic_packet.arr.spec.create[after106]",
        "second_server.init[after454]",
        "forged_packet_event_vn[after352]",
        "quic_packet_0rtt.retired_cids.impl.reverse[implement98]",
        "quic_packet.retired_cids.spec.create[before105]",
        "quic_packet_retry.arr.spec.empty[after104]",
        "arr_pkt_num_r.spec.empty[after104]",
        "init[after465]",
        "quic_packet_type.next",
        "forged_quic_packet.arr.set",
        "replayed_quic_packet_0rtt.idx.next",
        "quic_packet_0rtt.retired_cids.get",
        "forged_pkts.impl.reverse[implement98]",
        "stream_data.append",
        "show_socket",
        "arr_pkt_num_s.impl.reverse[implement98]",
        "fake_client.init[after452]",
        "vector[tls.cipher_suite].spec.size[after111]",
        "clients.client.set_tls_id"
    ]
}