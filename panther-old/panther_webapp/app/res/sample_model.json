{
    "ivy_base": {
        "tls_msg.ivy": {
            "include": "tls_picotls.ivy"
        },
        "order.ivy": {},
        "udp_impl.ivy": {
            "include": "ip.ivy"
        },
        "tls_picotls.ivy": {},
        "serdes.ivy": {},
        "ip.ivy": {},
        "collections.ivy": {
            "include": "collections_impl.ivy"
        },
        "collections_impl.ivy": {},
        "ipv6.ivy": {},
        "deserializer.ivy": {}
    },
    "quic_attacks_stack": {
        "attack_connection.ivy": {
            "include": [
                "forged_quic_packet.ivy",
                "forged_quic_packet_retry.ivy",
                "forged_quic_packet_vn.ivy"
            ],
            "function": [],
            "relation": [],
            "export": [],
            "action": {}
        },
        "forged_quic_packet_vn.ivy": {
            "include": [
                "quic_types.ivy",
                "quic_transport_error_code.ivy",
                "quic_frame.ivy",
                "quic_packet.ivy",
                "quic_transport_parameters.ivy",
                "ip.ivy"
            ],
            "function": [],
            "relation": [],
            "export": [],
            "action": {
                "forged_packet_event_vn(src:ip.endpoint,dst:ip.endpoint,pkt:forged_quic_packet_vn) = {}": []
            }
        },
        "forged_quic_packet.ivy": {
            "include": [
                "quic_types.ivy",
                "quic_transport_error_code.ivy",
                "quic_frame.ivy",
                "quic_transport_parameters.ivy",
                "ip.ivy",
                "quic_fsm_sending.ivy",
                "quic_fsm_receiving.ivy"
            ],
            "function": [],
            "relation": [
                "packed_forwarded(P:stream_data)",
                "packed_forwarded_arr(P:forged_pkts)"
            ],
            "export": [],
            "action": {
                "long(pkt:this) returns(res:bool) = {": [],
                "forged_packet_event(src:ip.endpoint,dst:ip.endpoint,pkt:forged_quic_packet) = {}": [],
                "modify_protected_packet_event(src:ip.endpoint,dst:ip.endpoint,pkt:forged_protected_quic_packet) = {}": [],
                "forward_packet_to_client_event(src:ip.endpoint,dst:ip.endpoint,pkt:forged_pkts) = {}": [],
                "forward_packet_to_server_event(src:ip.endpoint,dst:ip.endpoint,pkt:forged_pkts) = {}": [],
                "replay_packet_to_server_event(src:ip.endpoint,dst:ip.endpoint,pkt:forged_pkts) = {}": [],
                "reflect_packet_to_victim_event(src:ip.endpoint,dst:ip.endpoint,pkt:forged_pkts) = {}": []
            }
        },
        "forged_quic_packet_retry.ivy": {
            "include": [
                "quic_types.ivy",
                "quic_transport_error_code.ivy",
                "quic_frame.ivy",
                "quic_packet.ivy",
                "quic_transport_parameters.ivy",
                "ip.ivy",
                "quic_fsm_sending.ivy",
                "quic_fsm_receiving.ivy",
                "byte_stream.ivy"
            ],
            "function": [],
            "relation": [],
            "export": [],
            "action": {
                "long(pkt:this) returns(res:bool) = {": [],
                "forged_packet_event_retry(src:ip.endpoint,dst:ip.endpoint,pkt:forged_quic_packet_retry,inpkt:quic_packet_retry) = {}": []
            }
        }
    },
    "quic_entities_behavior": {
        "ivy_quic_server_behavior.ivy": {
            "include": [
                "order.ivy",
                "quic_infer.ivy",
                "file.ivy",
                "ivy_quic_shim_server.ivy",
                "random_value.ivy"
            ],
            "function": [],
            "relation": [],
            "export": [],
            "action": {
                "endpoint_to_pid(src:ip.endpoint) returns (pid:endpoint_id) = {": [],
                "socket_endpoint(host:endpoint_id,s:net.socket) returns (src:ip.endpoint) = {": [],
                "socket_endpoint_mim(host:endpoint_id,s:net.socket,src:ip.endpoint) returns (dst:ip.endpoint) = {": [],
                "endpoint_to_socket_mim(src:ip.endpoint) returns (socket:net.socket) = {": [],
                "endpoint_to_socket(src:ip.endpoint) returns (socket:net.socket) = {": [],
                "tls_id_to_src(tls_id:tls_api.id) returns (src:ip.endpoint) = {": [],
                "tls_id_to_dst(tls_id:tls_api.id) returns (dst:ip.endpoint) = {": [],
                "tls_id_to_cid(tls_id:tls_api.id) returns (scid:cid) = {": [],
                "dst_is_generated(dst:ip.endpoint) returns (res:bool) = {": [],
                "dst_is_generated_tls(dst:ip.endpoint) returns (res:bool) = {": [],
                "dst_tls_id(dst:ip.endpoint) returns (tls_id:tls_api.id) = {": [],
                "src_tls_id(src:ip.endpoint) returns (tls_id:tls_api.id) = {": [],
                "client_send_event(src:ip.endpoint, dst:ip.endpoint, dcid:cid, s : stream_id, end : stream_pos)": [],
                "show_tls_send_event(src:ip.endpoint, dst:ip.endpoint, scid:cid, dcid:cid, data:stream_data, pos:stream_pos, e:quic_packet_type, tls_id:tls_api.id) = {}": [],
                "show_packet(src:ip.endpoint,dst:ip.endpoint,pkt:quic_packet)": []
            }
        },
        "quic_endpoint.ivy": {
            "include": [
                "quic_locale.ivy"
            ],
            "function": [
                "ppkt_to_be_forwarded_to_server(C:stream_pos) : forged_pkts",
                "ppkt_to_be_forwarded_to_client(C:stream_pos) : forged_pkts",
                "max_retransmit(E:quic_packet_type,S:ip.endpoint) : stream_pos"
            ],
            "relation": [],
            "export": [],
            "action": {
                "endpoint_id_addr(ep_id : endpoint_id) returns (ep:ip.endpoint) = {": [],
                "set_ep(e:ip.endpoint) = {": [],
                "set_tls_id(e:tls_api.id) = {": [],
                "behavior(host:endpoint_id, s:net.socket, src:ip.endpoint, pkts:prot.arr) = {": [],
                "set_ep(p:this,e:ip.endpoint)": [],
                "set_tls_id(p:this,e:tls_api.id)": [],
                "set_ep(e:ip.endpoint,n:client.idx) = {": [],
                "set_tls_id(e:tls_api.id,n:client.idx) = {": [],
                "src_tls_id(src:ip.endpoint) returns (tls_id:tls_api.id) = {": [],
                "init_tls_ids = {": [],
                "set_ep(e:ip.endpoint,n:server.idx) = {": [],
                "set_tls_id(e:tls_api.id,n:server.idx) = {": [],
                "set_tls_id(e:tls_api.id,ee:tls_api.id) = {": [],
                "forward_packet_to(ppkt:stream_data,host:endpoint_id, s:net.socket, src:ip.endpoint, dst:ip.endpoint) = {": [],
                "replay_packet(ppkt:stream_data,host:endpoint_id, s:net.socket, src:ip.endpoint) = {": [],
                "modify_packet(ppkt:stream_data) returns(rppkt:stream_data) =  {": [],
                "save_packets(ppkt:stream_data) = {": [],
                "get_saved_packets returns(ppkt:stream_data) = {": [],
                "reflection_packets(ppkt:stream_data,dst_port:ip.port) = {": [],
                "configure_NAT_attack_in(server_ep:ip.port) = {": [],
                "configure_NAT_attack_out_trick(dst:ip.endpoint) = {": [],
                "configure_NAT_attack_out_localhost(dst:ip.port) = {": [],
                "configure_NAT_attack_out(dst:ip.port) = {": [],
                "reset_NAT = {": [],
                "configure_NAT_attack_in_spoof(server_ep:ip.port,victim_ep:ip.port) = {": [],
                "configure_NAT_attack_in_spoof_hack(server_ep:ip.port,victim_ep:ip.port) = {": [],
                "setup_socket = {": [],
                "double_cid(c:cid) returns(res:cid) = {": []
            }
        }
    },
    "quic_config": {
        "ivy_quic_server_standard_tp.ivy": {
            "include": [],
            "function": [],
            "relation": [],
            "export": [],
            "action": {
                "make_transport_parameters returns (tp:quic_transport_parameters) = {": []
            }
        }
    },
    "quic_fsm": {
        "quic_fsm_receiving.ivy": {
            "include": [
                "quic_types.ivy",
                "quic_frame.ivy"
            ],
            "function": [
                "lastest_stream_id_receiving(P:pkt_num) : this.arr_streamid_r",
                "lastest_pkt_num_receiving : this.arr_pkt_num_r"
            ],
            "relation": [
                "receiving_recv(S:stream_id)",
                "receiving_sizeKnown(S:stream_id)",
                "receiving_dataRecvd(S:stream_id)",
                "receiving_dataRead(S:stream_id)",
                "receiving_resetRecvd(S:stream_id)",
                "receiving_resetRead(S:stream_id)"
            ],
            "export": [],
            "action": {
                "handle_receiving_recv(id:stream_id,seq:pkt_num) = {": [],
                "handle_receiving_sizeKnown(id:stream_id,seq:pkt_num) = {": [],
                "handle_receiving_dataRecvd(id:stream_id) = {": [],
                "handle_receiving_dataRead(id:stream_id) = {": [],
                "handle_receiving_resetRecvd(id:stream_id,seq:pkt_num) = {": [],
                "handle_receiving_resetRead(id:stream_id) = {": [],
                "handle_receiving_ack(largest_acked:pkt_num) = {": []
            }
        },
        "quic_fsm_sending.ivy": {
            "include": [
                "quic_types.ivy"
            ],
            "function": [
                "lastest_stream_id_sender(P:pkt_num) : this.arr_streamid_s",
                "lastest_pkt_num_sender : this.arr_pkt_num_s"
            ],
            "relation": [
                "sending_ready(S:stream_id)",
                "sending_send(S:stream_id)",
                "sending_dataSent(S:stream_id)",
                "sending_dataRecvd(S:stream_id)",
                "sending_resetSent(S:stream_id)",
                "sending_resetRecvd(S:stream_id)"
            ],
            "export": [],
            "action": {
                "handle_sending_send(id:stream_id,seq:pkt_num) = {": [],
                "handle_sending_dataSent(id:stream_id,seq:pkt_num) = {": [],
                "handle_sending_dataRecvd(id:stream_id) = {": [],
                "handle_sending_resetSent(id:stream_id,seq:pkt_num) = {": [],
                "handle_sending_resetRecvd(id:stream_id) = {": [],
                "handle_sending_ack(largest_acked:pkt_num) = {": []
            }
        }
    },
    "quic_stack": {
        "quic_types.ivy": {
            "include": [],
            "function": [],
            "relation": [],
            "export": [],
            "action": {
                "next(e:this) returns (e:this) = {": []
            }
        },
        "quic_protection.ivy": {
            "include": [
                "tls_msg.ivy",
                "byte_stream.ivy",
                "quic_types.ivy",
                "quic_transport_error_code.ivy",
                "collections.ivy"
            ],
            "function": [],
            "relation": [],
            "export": [],
            "action": {
                "encrypt(c:tls_id,seq:pkt_num,pkt:stream_data) returns (pkt:stream_data)": [],
                "encrypt_rtt(c:tls_id,seq:pkt_num,pkt:stream_data) returns (pkt:stream_data)": [],
                "decrypt(c:tls_id,seq:pkt_num,pkt:stream_data) returns (res:tls.decrypt_result)": [],
                "retry_integrity_tag(odcil: stream_pos, odcid: cid, pversion: version, dcil: stream_pos, dcid: cid, scil: stream_pos, scid: cid, token : stream_data, seq:pkt_num,h:stream_pos,b:bool) returns (cipher:stream_data)": [],
                "cid_to_tls_id(c:cid) returns(res:tls_api.id) = {": [],
                "get_level(pkt:stream_data) returns (level:tls.level) = {": [],
                "get_packet_sample(header:header_info, packetByte: stream_data, pnum_pos:stream_pos,hdr_len:stream_pos,sample_size:stream_pos) returns (sample: stream_data) = {": [],
                "get_header_info(pkt:stream_data,decrypt:bool) returns (h:header_info) = {": [],
                "correct_pnum(last:pkt_num, pnum:pkt_num, pnum_len:stream_pos)": [],
                "get_pnum_len_b(pkt:stream_data) returns (pnum_len:stream_pos) = {": [],
                "get_pnum_len(pkt:stream_data) returns (pnum_len:stream_pos) = {": [],
                "get_pnum(pkt:stream_data,pnum_pos:stream_pos,pnum_len:stream_pos) returns (seq:pkt_num) = {": [],
                "get_var_int_len(pkt:stream_data,pos:stream_pos) returns (len:stream_pos) = {": [],
                "get_var_int(pkt:stream_data,pos:stream_pos,len:stream_pos) returns (val:stream_pos) = {": [],
                "to_var_int_16(val:stream_pos) returns (bytes:stream_data) = {": [],
                "bytes_to_pos(b:byte) returns (val:stream_pos) = {": [],
                "pos_to_byte(b:stream_pos) returns (val:byte) = {": [],
                "bytes_to_cid(bytes:stream_data) returns (val:cid) = {": [],
                "byte_xor(x:byte,y:byte) returns (z:byte) = {": [],
                "stream_data_xor(x:stream_data,y:stream_data) returns (x:stream_data) = {": []
            }
        },
        "quic_transport_error_code.ivy": {
            "include": [],
            "function": [],
            "relation": [
                "is_no_error  ",
                "is_internal_error ",
                "is_server_busy ",
                "is_flow_control_error",
                "is_stream_limit_error ",
                "is_stream_state_error ",
                "is_final_size_error  ",
                "is_frame_encoding_error ",
                "is_transport_parameter_error ",
                "is_connection_id_limit_error  ",
                "is_protocol_violation  ",
                "is_invalid_token ",
                "is_application_error ",
                "is_crypto_buffer_exceeded ",
                "is_key_update_error ",
                "is_aead_limit_reached",
                "is_no_viable_path",
                "is_crypto_error  ",
                "is_version_negociation_error"
            ],
            "export": [],
            "action": {
                "handle_transport_error(ec:error_code) =": []
            }
        },
        "quic_frame.ivy": {
            "include": [
                "collections.ivy",
                "order.ivy",
                "quic_stream.ivy",
                "quic_transport_error_code.ivy"
            ],
            "function": [
                "max_stream_data_val(C:cid,S:stream_id) : stream_pos",
                "max_data_val(C:cid) : stream_pos",
                "stream_length(C:cid,S:stream_id) : stream_pos",
                "max_stream(C:cid,K:stream_kind) : stream_id ",
                "queued_frames(C:cid) : frame.arr",
                "queued_frames_rtt(C:cid) : frame.arr",
                "queued_level(C:cid) : quic_packet_type",
                "queued_level_rtt(C:cid) : quic_packet_type",
                "num_queued_frames(C:cid) : frame.idx",
                "num_queued_frames_rtt(C:cid) : frame.idx",
                "conn_total_data(C:cid) : stream_pos",
                "queued_level_type(C:cid,T:quic_packet_type) : frame.arr",
                "max_rtp_num(C:cid) : cid_seq",
                "count_stream_frame(I:stream_id,O:stream_pos, ",
                "count_reset_frame(I:stream_id,E:error_code,O:stream_pos) : stream_pos",
                "count_sdb_frame(I:stream_id,O:stream_pos) : stream_pos",
                "first_ack_freq_received : bool",
                "last_ack_freq_seq(C:cid) : pkt_num",
                "count_newcid_frame(I:cid_seq,O:cid_seq, ",
                "count_rcid_frame(I:cid_seq) : stream_pos",
                "last_cid_seq(C:cid):cid_seq",
                "first_zrtt_pkt : cid"
            ],
            "relation": [
                "stream_seen(C:cid,S:stream_id)",
                "max_stream_data_set(C:cid,S:stream_id)",
                "max_data_set(C:cid)",
                "stream_finished(C:cid,S:stream_id)",
                "stream_reset(C:cid,S:stream_id)",
                "max_stream_set(C:cid,K:stream_kind)",
                "queued_non_probing(C:cid)",
                "queued_non_ack(C:cid)",
                "queued_challenge(C:cid)",
                "queued_close(C:cid)",
                "path_challenge_pending(C:cid,D:stream_data)",
                "queued_ack_eliciting(C:cid)",
                "send_retire_cid(C:cid)",
                "stream_frame_restransmitted(S:stream_id)",
                "reset_frame_restransmitted(S:stream_id)",
                "sdb_frame_restransmitted(S:stream_id)",
                "connection_closed ",
                "handshake_done_send ",
                "zrtt_pkt_update ",
                "is_crypto_limit_test",
                "stop_sending_in_bad_state"
            ],
            "export": [],
            "action": {
                "handle(f:this,scid:cid,dcid:cid,e:quic_packet_type,seq_num:pkt_num) = {": [],
                "handle(f:frame.ack,scid:cid,dcid:cid,e:quic_packet_type,seq_num:pkt_num)": [],
                "handle(f:frame.ack_ecn,scid:cid,dcid:cid,e:quic_packet_type,seq_num:pkt_num)": [],
                "handle(f:frame.stream,scid:cid,dcid:cid,e:quic_packet_type,seq_num:pkt_num)": [],
                "handle(f:frame.crypto,scid:cid,dcid:cid,e:quic_packet_type,seq_num:pkt_num)": [],
                "handle(f:frame.rst_stream,scid:cid,dcid:cid,e:quic_packet_type,seq_num:pkt_num)": [],
                "handle(f:frame.stop_sending,scid:cid,dcid:cid,e:quic_packet_type,seq_num:pkt_num)": [],
                "handle(f:frame.max_streams,scid:cid,dcid:cid,e:quic_packet_type,seq_num:pkt_num)": [],
                "handle(f:frame.max_streams_bidi,scid:cid,dcid:cid,e:quic_packet_type,seq_num:pkt_num)": [],
                "handle(f:frame.connection_close,scid:cid,dcid:cid,e:quic_packet_type,seq_num:pkt_num)": [],
                "handle(f:frame.application_close,scid:cid,dcid:cid,e:quic_packet_type,seq_num:pkt_num)": [],
                "handle(f:frame.max_stream_data,scid:cid,dcid:cid,e:quic_packet_type,seq_num:pkt_num)": [],
                "handle(f:frame.stream_data_blocked,scid:cid,dcid:cid,e:quic_packet_type,seq_num:pkt_num)": [],
                "handle(f:frame.data_blocked,scid:cid,dcid:cid,e:quic_packet_type,seq_num:pkt_num)": [],
                "handle(f:frame.streams_blocked,scid:cid,dcid:cid,e:quic_packet_type,seq_num:pkt_num)": [],
                "handle(f:frame.streams_blocked_bidi,scid:cid,dcid:cid,e:quic_packet_type,seq_num:pkt_num)": [],
                "handle(f:frame.max_data,scid:cid,dcid:cid,e:quic_packet_type,seq_num:pkt_num)": [],
                "handle(f:frame.ping,scid:cid,dcid:cid,e:quic_packet_type,seq_num:pkt_num)": [],
                "handle(f:frame.unknown_frame,scid:cid,dcid:cid,e:quic_packet_type,seq_num:pkt_num)": [],
                "handle(f:frame.handshake_done,scid:cid,dcid:cid,e:quic_packet_type,seq_num:pkt_num)": [],
                "handle(f:frame.new_connection_id,scid:cid,dcid:cid,e:quic_packet_type,seq_num:pkt_num)": [],
                "handle(f:frame.retire_connection_id,scid:cid,dcid:cid,e:quic_packet_type,seq_num:pkt_num)": [],
                "handle(f:frame.path_challenge,scid:cid,dcid:cid,e:quic_packet_type,seq_num:pkt_num)": [],
                "handle(f:frame.path_response,scid:cid,dcid:cid,e:quic_packet_type,seq_num:pkt_num)": [],
                "handle(f:frame.new_token,scid:cid,dcid:cid,e:quic_packet_type,seq_num:pkt_num)": [],
                "handle(f:frame.ack_frequency,scid:cid,dcid:cid,e:quic_packet_type)": [],
                "handle(f:frame.malicious_frame,scid:cid,dcid:cid,e:quic_packet_type,seq_num:pkt_num)": [],
                "enqueue_frame(scid:cid, f:frame, e:quic_packet_type, probing:bool) = {": [],
                "enqueue_frame_rtt(scid:cid, f:frame, e:quic_packet_type, probing:bool) = {": [],
                "stream_max_data(dcid:cid,id:stream_id, e:quic_packet_type) returns (max:stream_pos) = {": [],
                "stream_id_allowed(dcid:cid,id:stream_id,e: quic_packet_type) returns (ok:bool) = {": [],
                "stream_id_to_cid(bytes:stream_id) returns (val:cid) = {": [],
                "cid_to_stream_id(c:cid,len:cid_length) returns(res:stream_id) = {": [],
                "max_additional_data(dcid:cid) returns (max:stream_pos) = {": [],
                "min_ack_delay_check(dcid:cid) returns (ok:bool) = {": [],
                "acti_coid_check(scid:cid,count:stream_pos) returns (ok:bool) = {": []
            }
        },
        "quic_packet.ivy": {
            "include": [
                "quic_types.ivy",
                "quic_transport_error_code.ivy",
                "quic_frame.ivy",
                "quic_transport_parameters.ivy",
                "ip.ivy",
                "quic_fsm_sending.ivy",
                "quic_fsm_receiving.ivy"
            ],
            "function": [
                "last_pkt_num(C:cid,L:quic_packet_type) : pkt_num",
                "max_acked(C:cid,L:quic_packet_type) : pkt_num",
                "ack_credit(C:cid) : pkt_num",
                "trans_params(C:cid) : trans_params_struct",
                "cid_to_aid(C:cid) : cid ",
                "cid_to_token(C:cid) : stream_data ",
                "initial_token : stream_data ",
                "seqnum_to_cid (D : cid,S : cid_seq) : cid",
                "max_seq_num(C:cid) : cid_seq",
                "connected_to(C:cid) : cid",
                "nonce_cid(C:cid) : cid",
                "hi_non_probing(C:cid) : pkt_num",
                "num_conn(C:cid) : stream_pos",
                "initial_scid : cid ",
                "initial_dcid : cid "
            ],
            "relation": [
                "conn_seen(C:cid)",
                "conn_closed(C:cid)",
                "conn_draining(C:cid)",
                "draining_pkt_sent(C:cid)",
                "sent_pkt(C:cid,L:quic_packet_type,N:pkt_num)",
                "acked_pkt(C:cid,L:quic_packet_type,N:pkt_num)",
                "trans_params_set(C:cid)",
                "connected(C:cid)",
                "cid_mapped(C:cid)",
                "cid_mapped_token(C:cid)",
                "is_client(C:cid)",
                "conn_requested(S:ip.endpoint,D:ip.endpoint,C:cid)",
                "issued_zero_length_cid ",
                "hi_non_probing_endpoint(C:cid,E:ip.endpoint)",
                "pkt_has_close(C:cid,L:quic_packet_type,N:pkt_num)",
                "tls_handshake_finished",
                "migration_done",
                "first_initial_send"
            ],
            "export": [],
            "action": {
                "long(pkt:this) returns(res:bool) = {": [],
                "packet_event(src:ip.endpoint,dst:ip.endpoint,pkt:quic_packet) = {}": [],
                "handle_tls_handshake(src:ip.endpoint,dst:ip.endpoint,scid:cid,dcid:cid, hs:tls.handshake) = {": [],
                "handle_tls_extensions(src:ip.endpoint, dst:ip.endpoint, scid:cid, exts:vector[tls.extension], is_client_hello:bool) = {": [],
                "handle_client_transport_parameters(src:ip.endpoint,dst:ip.endpoint,scid:cid, tps:quic_transport_parameters, is_client_hello : bool) = {": []
            }
        },
        "quic_connection.ivy": {
            "include": [
                "quic_types.ivy",
                "quic_transport_error_code.ivy",
                "quic_application.ivy",
                "quic_security.ivy",
                "quic_frame.ivy",
                "quic_packet.ivy",
                "quic_packet_retry.ivy",
                "quic_packet_vn.ivy"
            ],
            "function": [],
            "relation": [],
            "export": [],
            "action": {}
        },
        "quic_stream.ivy": {
            "include": [
                "byte_stream.ivy",
                "quic_types.ivy",
                "quic_transport_error_code.ivy"
            ],
            "function": [
                "get_stream_kind(S:stream_id) =",
                "get_stream_role(S:stream_id) ="
            ],
            "relation": [],
            "export": [],
            "action": {}
        },
        "quic_packet_vn.ivy": {
            "include": [
                "quic_types.ivy",
                "quic_transport_error_code.ivy",
                "quic_frame.ivy",
                "quic_packet.ivy",
                "quic_transport_parameters.ivy",
                "ip.ivy"
            ],
            "function": [],
            "relation": [],
            "export": [],
            "action": {
                "packet_event_vn(src:ip.endpoint,dst:ip.endpoint,pkt:quic_packet_vn) = {}": [],
                "inc_cid(c:cid, inc:stream_pos) returns(res:cid) = {": []
            }
        },
        "quic_transport_parameters.ivy": {
            "include": [
                "quic_types.ivy",
                "quic_transport_error_code.ivy",
                "quic_stream.ivy",
                "quic_packet_vn.ivy",
                "tls_record.ivy",
                "ip.ivy",
                "ipv6.ivy"
            ],
            "function": [
                "initial_max_stream_data_uni_server_0rtt : stream_pos",
                "initial_max_stream_data_bidi_remote_server_0rtt : stream_pos",
                "initial_max_data_server_0rtt : stream_pos",
                "initial_max_stream_data_bidi_local_server_0rtt : stream_pos",
                "initial_max_stream_id_bidi_server_0rtt : stream_id",
                "active_connection_id_limit_server_0rtt : stream_pos"
            ],
            "relation": [],
            "export": [],
            "action": {
                "set(p:this,s:trans_params_struct) returns (s:trans_params_struct) = {}": [],
                "set(p:ptype,s:trans_params_struct) returns (s:trans_params_struct) = {": []
            }
        },
        "quic_application.ivy": {
            "include": [
                "byte_stream.ivy",
                "quic_stream.ivy"
            ],
            "function": [
                "stream_app_data(C:cid,S:stream_id) : stream_data",
                "stream_app_data_end(C:cid,S:stream_id) : stream_pos",
                "stream_app_pos(C:cid,S:stream_id) : stream_pos",
                "stream_app_data_finished(C:cid,S:stream_id) : bool"
            ],
            "relation": [
                "used_cid(C:cid)"
            ],
            "export": [],
            "action": {
                "app_server_open_event(src:ip.endpoint,dst:ip.endpoint,scid:cid,dcid:cid)": [],
                "app_send_event(src:ip.endpoint, dst:ip.endpoint, dcid:cid, s : stream_id, data : stream_data, pos : stream_pos, close : bool)": [],
                "map_cids(dcid:cid,scid:cid) = {": []
            }
        },
        "quic_security.ivy": {
            "include": [
                "tls_protocol.ivy"
            ],
            "function": [
                "crypto_data(C:cid,L:quic_packet_type) : stream_data",
                "crypto_data_end(C:cid,L:quic_packet_type) : stream_pos",
                "crypto_length(C:cid,L:quic_packet_type) : stream_pos",
                "crypto_pos(C:cid,L:quic_packet_type) : stream_pos",
                "crypto_handler_pos(C:cid,L:quic_packet_type) : stream_pos",
                "conn_enc_level(E:ip.endpoint,C:cid) : quic_packet_type"
            ],
            "relation": [
                "crypto_data_present(C:cid,L:quic_packet_type,P:stream_pos)",
                "established_1rtt_keys(C:cid)",
                "established_0rtt_keys(C:cid)",
                "established_handshake_keys(C:cid)",
                "crypto_reset(C:cid)"
            ],
            "export": [],
            "action": {
                "tls_send_event(src:ip.endpoint,dst:ip.endpoint,scid:cid, dcid:cid,data:stream_data, pos:stream_pos,e:quic_packet_type, tls_id:tls_api.id)": [],
                "tls_recv_event(src:ip.endpoint, dst:ip.endpoint, scid:cid, dcid:cid, e:quic_packet_type, lo: stream_pos, hi : stream_pos)": [],
                "tls_keys_established_event(scid:cid, e:quic_packet_type)": [],
                "tls_client_initial_request(src:ip.endpoint,dst:ip.endpoint,nonce:cid, pversion:version, id:tls_api.id)": [],
                "tls_client_initial_response(src:ip.endpoint,dst:ip.endpoint,ppkt:stream_data)": [],
                "tls_client_version_request(src:ip.endpoint,dst:ip.endpoint)": [],
                "tls_client_version_response(src:ip.endpoint,dst:ip.endpoint,ppkt:stream_data)": [],
                "tls_client_retry_response(src:ip.endpoint,dst:ip.endpoint,ppkt:stream_data)": [],
                "tls_client_0rtt_response(src:ip.endpoint,dst:ip.endpoint,ppkt:stream_data)": [],
                "set_encryption_level(src:ip.endpoint, scid:cid, e:quic_packet_type)": []
            }
        },
        "quic_packet_retry.ivy": {
            "include": [
                "quic_types.ivy",
                "quic_transport_error_code.ivy",
                "quic_frame.ivy",
                "quic_packet.ivy",
                "quic_transport_parameters.ivy",
                "ip.ivy",
                "quic_fsm_sending.ivy",
                "quic_fsm_receiving.ivy",
                "byte_stream.ivy"
            ],
            "function": [
                "retry_token(C:cid) : stream_data"
            ],
            "relation": [
                "retry_sent(C:cid)",
                "retry_recv(C:cid)",
                "token_saved",
                "zero_length_token",
                "retry_response(C:cid)",
                "retry_client_test"
            ],
            "export": [],
            "action": {
                "long(pkt:this) returns(res:bool) = {": [],
                "packet_event_retry(src:ip.endpoint,dst:ip.endpoint,pkt:quic_packet_retry) = {}": []
            }
        }
    },
    "tls_stack": {
        "quic_infer.ivy": {
            "include": [],
            "function": [],
            "relation": [],
            "export": [],
            "action": {
                "infer_tls_events(src:ip.endpoint,dst:ip.endpoint,pkt:quic_packet) = {": [],
                "infer_tls_events_vn(src:ip.endpoint,dst:ip.endpoint,pkt:quic_packet_vn) = {": [],
                "infer_tls_events_retry(src:ip.endpoint,dst:ip.endpoint,pkt:quic_packet_retry) = {": [],
                "infer_tls_events_0rtt(src:ip.endpoint,dst:ip.endpoint,pkt:quic_packet_0rtt) = {": []
            }
        },
        "tls_record.ivy": {
            "include": [
                "order.ivy",
                "collections.ivy",
                "byte_stream.ivy"
            ],
            "function": [],
            "relation": [],
            "export": [],
            "action": {}
        },
        "tls_protocol.ivy": {
            "include": [
                "tls_record.ivy",
                "tls_deser_ser.ivy",
                "deserializer.ivy",
                "ip.ivy"
            ],
            "function": [],
            "relation": [],
            "export": [],
            "action": {
                "handshake_event(src : ip.endpoint, dst : ip.endpoint, h : handshake)": [],
                "handshake_data_event(src : ip.endpoint, dst : ip.endpoint, data:stream_data)": []
            }
        },
        "tls_deser_ser.ivy": {
            "include": [
                "tls_record.ivy"
            ],
            "function": [],
            "relation": [],
            "export": [],
            "action": {}
        }
    },
    "quic_entities": {
        "ivy_quic_mim.ivy": {
            "include": [
                "order.ivy",
                "quic_infer.ivy",
                "file.ivy",
                "quic_shim.ivy",
                "random_value.ivy"
            ],
            "function": [],
            "relation": [],
            "export": [],
            "action": {}
        },
        "ivy_quic_server.ivy": {
            "include": [
                "order.ivy",
                "quic_infer.ivy",
                "file.ivy",
                "quic_shim.ivy",
                "random_value.ivy"
            ],
            "function": [],
            "relation": [],
            "export": [],
            "action": {}
        },
        "ivy_quic_victim.ivy": {
            "include": [
                "order.ivy",
                "quic_infer.ivy",
                "file.ivy",
                "quic_shim.ivy",
                "random_value.ivy"
            ],
            "function": [],
            "relation": [],
            "export": [],
            "action": {}
        },
        "ivy_quic_attacker.ivy": {
            "include": [
                "order.ivy",
                "quic_infer.ivy",
                "file.ivy",
                "quic_shim.ivy",
                "random_value.ivy"
            ],
            "function": [],
            "relation": [],
            "export": [],
            "action": {}
        },
        "ivy_quic_client_server.ivy": {
            "include": [
                "order.ivy",
                "quic_infer.ivy",
                "file.ivy",
                "quic_shim.ivy",
                "random_value.ivy"
            ],
            "function": [],
            "relation": [],
            "export": [],
            "action": {}
        }
    },
    "quic_shims": {
        "ivy_quic_shim_server.ivy": {
            "include": [
                "quic_shim.ivy"
            ],
            "function": [],
            "relation": [],
            "export": [],
            "action": {}
        },
        "quic_shim.ivy": {
            "include": [
                "quic_connection.ivy",
                "attack_connection.ivy",
                "tls_msg.ivy",
                "serdes.ivy",
                "quic_deser.ivy",
                "quic_ser.ivy",
                "quic_deser_vn.ivy",
                "quic_ser_vn.ivy",
                "quic_deser_retry.ivy",
                "quic_ser_retry.ivy",
                "quic_deser_zerortt.ivy",
                "quic_ser_zerortt.ivy",
                "quic_deser_forged.ivy",
                "quic_ser_forged.ivy",
                "quic_protection.ivy",
                "random_value.ivy",
                "quic_endpoint.ivy",
                "quic_locale.ivy",
                "ivy_quic_server.ivy",
                "ivy_quic_client_server.ivy",
                "ivy_quic_attacker.ivy",
                "ivy_quic_victim.ivy",
                "ivy_quic_mim.ivy"
            ],
            "function": [
                "client_initial_rcid : cid",
                "client_initial_scid : cid",
                "client_initial_scil : stream_pos",
                "client_initial_dcid : cid",
                "client_initial_dcil : stream_pos",
                "client_initial_version : version",
                "nclients : stream_pos",
                "the_cids : cids",
                "server_cids : cids",
                "last_datagram_received_size : stream_pos",
                "initial_version : version ",
                "last_packet_type(C:cid) : quic_packet_type",
                "last_packet_length(C:cid) : stream_pos"
            ],
            "relation": [
                "initial_keys_set(C:cid)",
                "tp_client_set ",
                "client_non_zero_scil",
                "zero_rtt_allowed",
                "zero_rtt_sent",
                "send_connection_close ",
                "zero_rtt_client_test",
                "zero_rtt_server_test ",
                "allowed_migration ",
                "allowed_multiple_migration",
                "first_datagram_received",
                "version_negociated",
                "negocation_of_version(E:ip.endpoint)",
                "negocation_of_version_initiated(E:ip.endpoint)",
                "version_not_found(E:ip.endpoint)"
            ],
            "export": [],
            "action": {
                "packet_encryption_level(h:prot.header_info) returns (e:quic_packet_type) = {": [],
                "packet_encryption_level_up(h:prot.header_info) returns (e:quic_packet_type) = {": [],
                "packet_scid(h:prot.header_info) returns (scid:cid) = {": [],
                "reference_pkt_num(spkt:stream_data,decrypt:bool) returns (pnum:pkt_num) = {": [],
                "is_padding_packet(spkt:stream_data) returns (is_padding:bool) = {": [],
                "is_random_padding_packet(spkt:stream_data) returns (is_padding:bool) = {": [],
                "cid_to_bytes(c:cid,len:cid_length) returns(res:stream_data) = {": [],
                "cid_to_us(c:cid) returns(res:tls_api.id) = {": [],
                "cidseq_to_seqnum(c:cid_seq) returns(res:pkt_num) = {": [],
                "dcid_size_cl(cond:bool) returns(res:cid_length) = {": [],
                "scid_size_pos(cond:bool) returns(res:stream_pos) = {": [],
                "dcid_size_pos(cond:bool) returns(res:stream_pos) = {": [],
                "hi_byte_pos(x:stream_pos) returns (res:byte) = {": [],
                "lo_byte_pos(x:stream_pos) returns (res:byte) = {": [],
                "bytes_to_cid(bytes:stream_data) returns (val:cid) = {": [],
                "bytes_to_version(bytes:stream_data) returns (val:version) = {": [],
                "bytes_to_itoken(bytes:stream_data) returns (val:itoken) = {": [],
                "export_length_cid_extension(dcil:stream_pos,scil:stream_pos) = {": [],
                "export_length_cid(dcil:stream_pos,scil:stream_pos) = {": [],
                "export_length_cid_mim(dcil:stream_pos,scil:stream_pos) = {": []
            }
        }
    },
    "quic_utils": {
        "random_value.ivy": {
            "include": [
                "quic_types.ivy"
            ],
            "function": [],
            "relation": [],
            "export": [],
            "action": {
                "random_stream_pos(min:stream_pos,max:stream_pos) returns (res:stream_pos)": [],
                "greater_stream_pos(min:stream_pos) returns (res:stream_pos)": [],
                "lower_stream_pos(max:stream_pos) returns (res:stream_pos)": [],
                "random_stream_id(min:stream_id,max:stream_id) returns (res:stream_id)": [],
                "greater_stream_id(min:stream_id) returns (res:stream_id)": [],
                "lower_stream_id(max:stream_id) returns (res:stream_id)": [],
                "random_stream_data(min:stream_pos,max:stream_pos,len:stream_pos) returns (res:stream_data)": [],
                "random_microsecs(min:microsecs,max:microsecs) returns (res:microsecs)": [],
                "greater_microsecs(min:microsecs) returns (res:microsecs)": [],
                "lower_microsecs(max:microsecs) returns (res:microsecs)": []
            }
        },
        "file.ivy": {
            "include": [],
            "function": [],
            "relation": [
                "pending(C:cont)"
            ],
            "export": [],
            "action": {
                "write(d:data)": [],
                "read returns (d:data)": [],
                "sync(c:cont)": [],
                "synced(c:cont)": [],
                "handle_synced(c:cont) = {": []
            }
        },
        "quic_locale.ivy": {
            "include": [
                "udp_impl.ivy",
                "tls_msg.ivy"
            ],
            "function": [],
            "relation": [],
            "export": [],
            "action": {}
        },
        "quic_deser_zerortt.ivy": {
            "include": [],
            "function": [],
            "relation": [],
            "export": [],
            "action": {}
        },
        "quic_deser_forged.ivy": {
            "include": [],
            "function": [],
            "relation": [],
            "export": [],
            "action": {}
        },
        "quic_deser_retry.ivy": {
            "include": [],
            "function": [],
            "relation": [],
            "export": [],
            "action": {}
        },
        "quic_ser_forged.ivy": {
            "include": [],
            "function": [],
            "relation": [],
            "export": [],
            "action": {}
        },
        "quic_deser.ivy": {
            "include": [],
            "function": [],
            "relation": [],
            "export": [],
            "action": {}
        },
        "quic_ser.ivy": {
            "include": [],
            "function": [],
            "relation": [],
            "export": [],
            "action": {}
        },
        "quic_ser_vn.ivy": {
            "include": [],
            "function": [],
            "relation": [],
            "export": [],
            "action": {}
        },
        "quic_deser_vn.ivy": {
            "include": [],
            "function": [],
            "relation": [],
            "export": [],
            "action": {}
        },
        "quic_ser_retry.ivy": {
            "include": [],
            "function": [],
            "relation": [],
            "export": [],
            "action": {}
        },
        "quic_ser_zerortt.ivy": {
            "include": [],
            "function": [],
            "relation": [],
            "export": [],
            "action": {}
        },
        "byte_stream.ivy": {
            "include": [
                "collections.ivy"
            ],
            "function": [],
            "relation": [],
            "export": [],
            "action": {}
        }
    }
}